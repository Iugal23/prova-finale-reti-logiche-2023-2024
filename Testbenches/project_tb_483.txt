-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 987;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (99,0,154,0,21,0,176,0,163,0,114,0,136,0,0,0,0,0,124,0,44,0,102,0,207,0,247,0,0,0,2,0,14,0,192,0,221,0,0,0,175,0,135,0,44,0,91,0,28,0,133,0,103,0,0,0,85,0,241,0,118,0,0,0,108,0,19,0,202,0,36,0,220,0,245,0,181,0,204,0,150,0,193,0,245,0,174,0,63,0,0,0,48,0,73,0,0,0,69,0,0,0,1,0,0,0,80,0,84,0,1,0,139,0,0,0,140,0,162,0,250,0,0,0,244,0,207,0,177,0,173,0,173,0,199,0,243,0,0,0,1,0,246,0,222,0,224,0,232,0,86,0,0,0,250,0,188,0,57,0,121,0,34,0,13,0,29,0,0,0,173,0,124,0,66,0,255,0,78,0,34,0,40,0,116,0,240,0,48,0,107,0,26,0,164,0,13,0,0,0,0,0,0,0,22,0,66,0,179,0,27,0,84,0,233,0,96,0,25,0,196,0,0,0,0,0,183,0,157,0,27,0,55,0,192,0,228,0,33,0,0,0,154,0,0,0,0,0,209,0,227,0,169,0,4,0,142,0,117,0,244,0,89,0,193,0,34,0,217,0,0,0,0,0,215,0,50,0,136,0,0,0,189,0,225,0,165,0,0,0,152,0,0,0,97,0,253,0,0,0,165,0,150,0,173,0,178,0,235,0,197,0,225,0,89,0,219,0,135,0,221,0,0,0,0,0,77,0,107,0,105,0,22,0,211,0,226,0,69,0,51,0,0,0,0,0,17,0,58,0,60,0,36,0,123,0,92,0,58,0,239,0,230,0,29,0,232,0,1,0,62,0,52,0,159,0,248,0,79,0,232,0,127,0,0,0,229,0,0,0,0,0,163,0,254,0,0,0,0,0,34,0,67,0,227,0,131,0,205,0,77,0,2,0,249,0,252,0,0,0,3,0,132,0,113,0,230,0,0,0,214,0,219,0,133,0,98,0,254,0,220,0,166,0,137,0,21,0,156,0,165,0,91,0,0,0,168,0,119,0,79,0,125,0,202,0,249,0,226,0,152,0,0,0,20,0,25,0,165,0,193,0,0,0,130,0,87,0,76,0,126,0,17,0,53,0,116,0,111,0,0,0,249,0,0,0,173,0,65,0,8,0,71,0,2,0,86,0,174,0,204,0,108,0,135,0,0,0,223,0,152,0,65,0,0,0,47,0,0,0,51,0,0,0,141,0,228,0,70,0,99,0,110,0,73,0,141,0,0,0,224,0,0,0,4,0,0,0,165,0,0,0,18,0,29,0,0,0,83,0,36,0,0,0,12,0,95,0,112,0,84,0,22,0,172,0,173,0,0,0,157,0,183,0,251,0,197,0,148,0,0,0,242,0,216,0,0,0,103,0,14,0,0,0,218,0,25,0,160,0,0,0,156,0,190,0,5,0,63,0,171,0,0,0,201,0,198,0,123,0,176,0,230,0,213,0,0,0,125,0,127,0,0,0,0,0,0,0,121,0,14,0,196,0,14,0,236,0,0,0,0,0,95,0,49,0,0,0,0,0,184,0,166,0,34,0,249,0,178,0,235,0,67,0,0,0,208,0,150,0,174,0,195,0,187,0,1,0,155,0,72,0,0,0,0,0,137,0,76,0,239,0,87,0,111,0,214,0,0,0,96,0,80,0,188,0,181,0,63,0,28,0,0,0,29,0,18,0,51,0,0,0,113,0,43,0,0,0,0,0,0,0,51,0,0,0,210,0,0,0,232,0,166,0,0,0,127,0,0,0,0,0,51,0,93,0,85,0,143,0,0,0,164,0,0,0,176,0,0,0,150,0,109,0,1,0,214,0,232,0,12,0,185,0,0,0,126,0,144,0,60,0,138,0,228,0,0,0,12,0,6,0,0,0,2,0,182,0,186,0,42,0,158,0,0,0,229,0,39,0,134,0,22,0,75,0,234,0,0,0,36,0,0,0,245,0,163,0,0,0,73,0,213,0,183,0,225,0,123,0,159,0,46,0,8,0,59,0,0,0,73,0,217,0,27,0,91,0,167,0,122,0,64,0,0,0,250,0,207,0,93,0,85,0,98,0,128,0,80,0,5,0,181,0,228,0,184,0,204,0,73,0,52,0,13,0,116,0,63,0,32,0,165,0,182,0,75,0,64,0,95,0,0,0,125,0,51,0,0,0,31,0,216,0,0,0,106,0,95,0,71,0,77,0,0,0,144,0,41,0,60,0,32,0,163,0,200,0,197,0,246,0,25,0,57,0,51,0,0,0,194,0,14,0,191,0,216,0,104,0,0,0,0,0,167,0,118,0,0,0,1,0,0,0,55,0,99,0,171,0,0,0,199,0,0,0,95,0,24,0,0,0,26,0,220,0,229,0,121,0,0,0,170,0,0,0,93,0,12,0,0,0,0,0,227,0,126,0,0,0,211,0,170,0,195,0,103,0,0,0,243,0,105,0,0,0,32,0,105,0,4,0,123,0,215,0,0,0,80,0,205,0,132,0,163,0,20,0,208,0,0,0,0,0,0,0,161,0,24,0,0,0,201,0,134,0,0,0,201,0,188,0,108,0,0,0,0,0,238,0,139,0,105,0,0,0,80,0,0,0,214,0,110,0,16,0,53,0,0,0,171,0,0,0,105,0,85,0,17,0,164,0,19,0,0,0,42,0,150,0,0,0,243,0,163,0,158,0,149,0,63,0,115,0,0,0,0,0,229,0,0,0,234,0,23,0,132,0,201,0,0,0,27,0,166,0,0,0,208,0,0,0,161,0,207,0,216,0,228,0,0,0,5,0,0,0,31,0,0,0,223,0,166,0,97,0,0,0,169,0,247,0,35,0,2,0,92,0,113,0,42,0,0,0,64,0,201,0,202,0,105,0,14,0,236,0,185,0,40,0,28,0,248,0,144,0,0,0,20,0,148,0,119,0,53,0,33,0,4,0,143,0,192,0,42,0,164,0,255,0,25,0,116,0,228,0,81,0,0,0,71,0,117,0,9,0,99,0,46,0,221,0,182,0,0,0,84,0,180,0,62,0,234,0,141,0,9,0,0,0,89,0,49,0,169,0,213,0,102,0,39,0,13,0,91,0,102,0,72,0,229,0,55,0,208,0,199,0,41,0,210,0,206,0,0,0,126,0,157,0,215,0,0,0,129,0,74,0,63,0,0,0,216,0,130,0,127,0,149,0,85,0,183,0,0,0,74,0,16,0,173,0,16,0,194,0,133,0,211,0,13,0,0,0,236,0,4,0,151,0,146,0,120,0,44,0,22,0,240,0,31,0,199,0,114,0,0,0,0,0,195,0,23,0,165,0,0,0,132,0,155,0,0,0,97,0,115,0,55,0,131,0,252,0,81,0,73,0,0,0,15,0,114,0,148,0,0,0,154,0,103,0,0,0,0,0,97,0,146,0,0,0,34,0,86,0,132,0,244,0,65,0,251,0,163,0,173,0,0,0,186,0,224,0,126,0,0,0,121,0,0,0,38,0,63,0,128,0,138,0,160,0,0,0,157,0,30,0,67,0,0,0,45,0,177,0,0,0,55,0,188,0,151,0,21,0,4,0,40,0,0,0,0,0,244,0,28,0,194,0,0,0,166,0,0,0,29,0,116,0,194,0,190,0,0,0,72,0,152,0,53,0,191,0,42,0,43,0,247,0,173,0,54,0,132,0,0,0,9,0,66,0,107,0,0,0,0,0,248,0,98,0,94,0,80,0,42,0,0,0,63,0,114,0,32,0,80,0,207,0,135,0,28,0,69,0,241,0,6,0,240,0,182,0,43,0,29,0,221,0,251,0,99,0,47,0,62,0,62,0,49,0,133,0,18,0,0,0,113,0,98,0,222,0,111,0,151,0,0,0,235,0,0,0,79,0,25,0,214,0,0,0,12,0,241,0,244,0,225,0,114,0,214,0,216,0,142,0,152,0,65,0,254,0,11,0,19,0,0,0,0,0,137,0,25,0,208,0,177,0,0,0,150,0,142,0,97,0,197,0,189,0,148,0,24,0,0,0,67,0,92,0,36,0,112,0,246,0,46,0,0,0,0,0,0,0,212,0,27,0,153,0,0,0,206,0,0,0,198,0,238,0,239,0,74,0,18,0,0,0,33,0,222,0,240,0,35,0,133,0,111,0,136,0,246,0,222,0,24,0,76,0,203,0,186,0,0,0,21,0,195,0,133,0,0,0,202,0,189,0,183,0,63,0,198,0,143,0,0,0,58,0,147,0,142,0,130,0,148,0,0,0,0,0,15,0,222,0,220,0,26,0,17,0,3,0,58,0,235,0,50,0,0,0,244,0,102,0,174,0,183,0,206,0,0,0,189,0,49,0,173,0,0,0,39,0,216,0,185,0,212,0,0,0,246,0,0,0,67,0,0,0,172,0,133,0,191,0,123,0,218,0,35,0,110,0,141,0,0,0,0,0,49,0);
signal scenario_full  : scenario_type := (99,31,154,31,21,31,176,31,163,31,114,31,136,31,136,30,136,29,124,31,44,31,102,31,207,31,247,31,247,30,2,31,14,31,192,31,221,31,221,30,175,31,135,31,44,31,91,31,28,31,133,31,103,31,103,30,85,31,241,31,118,31,118,30,108,31,19,31,202,31,36,31,220,31,245,31,181,31,204,31,150,31,193,31,245,31,174,31,63,31,63,30,48,31,73,31,73,30,69,31,69,30,1,31,1,30,80,31,84,31,1,31,139,31,139,30,140,31,162,31,250,31,250,30,244,31,207,31,177,31,173,31,173,31,199,31,243,31,243,30,1,31,246,31,222,31,224,31,232,31,86,31,86,30,250,31,188,31,57,31,121,31,34,31,13,31,29,31,29,30,173,31,124,31,66,31,255,31,78,31,34,31,40,31,116,31,240,31,48,31,107,31,26,31,164,31,13,31,13,30,13,29,13,28,22,31,66,31,179,31,27,31,84,31,233,31,96,31,25,31,196,31,196,30,196,29,183,31,157,31,27,31,55,31,192,31,228,31,33,31,33,30,154,31,154,30,154,29,209,31,227,31,169,31,4,31,142,31,117,31,244,31,89,31,193,31,34,31,217,31,217,30,217,29,215,31,50,31,136,31,136,30,189,31,225,31,165,31,165,30,152,31,152,30,97,31,253,31,253,30,165,31,150,31,173,31,178,31,235,31,197,31,225,31,89,31,219,31,135,31,221,31,221,30,221,29,77,31,107,31,105,31,22,31,211,31,226,31,69,31,51,31,51,30,51,29,17,31,58,31,60,31,36,31,123,31,92,31,58,31,239,31,230,31,29,31,232,31,1,31,62,31,52,31,159,31,248,31,79,31,232,31,127,31,127,30,229,31,229,30,229,29,163,31,254,31,254,30,254,29,34,31,67,31,227,31,131,31,205,31,77,31,2,31,249,31,252,31,252,30,3,31,132,31,113,31,230,31,230,30,214,31,219,31,133,31,98,31,254,31,220,31,166,31,137,31,21,31,156,31,165,31,91,31,91,30,168,31,119,31,79,31,125,31,202,31,249,31,226,31,152,31,152,30,20,31,25,31,165,31,193,31,193,30,130,31,87,31,76,31,126,31,17,31,53,31,116,31,111,31,111,30,249,31,249,30,173,31,65,31,8,31,71,31,2,31,86,31,174,31,204,31,108,31,135,31,135,30,223,31,152,31,65,31,65,30,47,31,47,30,51,31,51,30,141,31,228,31,70,31,99,31,110,31,73,31,141,31,141,30,224,31,224,30,4,31,4,30,165,31,165,30,18,31,29,31,29,30,83,31,36,31,36,30,12,31,95,31,112,31,84,31,22,31,172,31,173,31,173,30,157,31,183,31,251,31,197,31,148,31,148,30,242,31,216,31,216,30,103,31,14,31,14,30,218,31,25,31,160,31,160,30,156,31,190,31,5,31,63,31,171,31,171,30,201,31,198,31,123,31,176,31,230,31,213,31,213,30,125,31,127,31,127,30,127,29,127,28,121,31,14,31,196,31,14,31,236,31,236,30,236,29,95,31,49,31,49,30,49,29,184,31,166,31,34,31,249,31,178,31,235,31,67,31,67,30,208,31,150,31,174,31,195,31,187,31,1,31,155,31,72,31,72,30,72,29,137,31,76,31,239,31,87,31,111,31,214,31,214,30,96,31,80,31,188,31,181,31,63,31,28,31,28,30,29,31,18,31,51,31,51,30,113,31,43,31,43,30,43,29,43,28,51,31,51,30,210,31,210,30,232,31,166,31,166,30,127,31,127,30,127,29,51,31,93,31,85,31,143,31,143,30,164,31,164,30,176,31,176,30,150,31,109,31,1,31,214,31,232,31,12,31,185,31,185,30,126,31,144,31,60,31,138,31,228,31,228,30,12,31,6,31,6,30,2,31,182,31,186,31,42,31,158,31,158,30,229,31,39,31,134,31,22,31,75,31,234,31,234,30,36,31,36,30,245,31,163,31,163,30,73,31,213,31,183,31,225,31,123,31,159,31,46,31,8,31,59,31,59,30,73,31,217,31,27,31,91,31,167,31,122,31,64,31,64,30,250,31,207,31,93,31,85,31,98,31,128,31,80,31,5,31,181,31,228,31,184,31,204,31,73,31,52,31,13,31,116,31,63,31,32,31,165,31,182,31,75,31,64,31,95,31,95,30,125,31,51,31,51,30,31,31,216,31,216,30,106,31,95,31,71,31,77,31,77,30,144,31,41,31,60,31,32,31,163,31,200,31,197,31,246,31,25,31,57,31,51,31,51,30,194,31,14,31,191,31,216,31,104,31,104,30,104,29,167,31,118,31,118,30,1,31,1,30,55,31,99,31,171,31,171,30,199,31,199,30,95,31,24,31,24,30,26,31,220,31,229,31,121,31,121,30,170,31,170,30,93,31,12,31,12,30,12,29,227,31,126,31,126,30,211,31,170,31,195,31,103,31,103,30,243,31,105,31,105,30,32,31,105,31,4,31,123,31,215,31,215,30,80,31,205,31,132,31,163,31,20,31,208,31,208,30,208,29,208,28,161,31,24,31,24,30,201,31,134,31,134,30,201,31,188,31,108,31,108,30,108,29,238,31,139,31,105,31,105,30,80,31,80,30,214,31,110,31,16,31,53,31,53,30,171,31,171,30,105,31,85,31,17,31,164,31,19,31,19,30,42,31,150,31,150,30,243,31,163,31,158,31,149,31,63,31,115,31,115,30,115,29,229,31,229,30,234,31,23,31,132,31,201,31,201,30,27,31,166,31,166,30,208,31,208,30,161,31,207,31,216,31,228,31,228,30,5,31,5,30,31,31,31,30,223,31,166,31,97,31,97,30,169,31,247,31,35,31,2,31,92,31,113,31,42,31,42,30,64,31,201,31,202,31,105,31,14,31,236,31,185,31,40,31,28,31,248,31,144,31,144,30,20,31,148,31,119,31,53,31,33,31,4,31,143,31,192,31,42,31,164,31,255,31,25,31,116,31,228,31,81,31,81,30,71,31,117,31,9,31,99,31,46,31,221,31,182,31,182,30,84,31,180,31,62,31,234,31,141,31,9,31,9,30,89,31,49,31,169,31,213,31,102,31,39,31,13,31,91,31,102,31,72,31,229,31,55,31,208,31,199,31,41,31,210,31,206,31,206,30,126,31,157,31,215,31,215,30,129,31,74,31,63,31,63,30,216,31,130,31,127,31,149,31,85,31,183,31,183,30,74,31,16,31,173,31,16,31,194,31,133,31,211,31,13,31,13,30,236,31,4,31,151,31,146,31,120,31,44,31,22,31,240,31,31,31,199,31,114,31,114,30,114,29,195,31,23,31,165,31,165,30,132,31,155,31,155,30,97,31,115,31,55,31,131,31,252,31,81,31,73,31,73,30,15,31,114,31,148,31,148,30,154,31,103,31,103,30,103,29,97,31,146,31,146,30,34,31,86,31,132,31,244,31,65,31,251,31,163,31,173,31,173,30,186,31,224,31,126,31,126,30,121,31,121,30,38,31,63,31,128,31,138,31,160,31,160,30,157,31,30,31,67,31,67,30,45,31,177,31,177,30,55,31,188,31,151,31,21,31,4,31,40,31,40,30,40,29,244,31,28,31,194,31,194,30,166,31,166,30,29,31,116,31,194,31,190,31,190,30,72,31,152,31,53,31,191,31,42,31,43,31,247,31,173,31,54,31,132,31,132,30,9,31,66,31,107,31,107,30,107,29,248,31,98,31,94,31,80,31,42,31,42,30,63,31,114,31,32,31,80,31,207,31,135,31,28,31,69,31,241,31,6,31,240,31,182,31,43,31,29,31,221,31,251,31,99,31,47,31,62,31,62,31,49,31,133,31,18,31,18,30,113,31,98,31,222,31,111,31,151,31,151,30,235,31,235,30,79,31,25,31,214,31,214,30,12,31,241,31,244,31,225,31,114,31,214,31,216,31,142,31,152,31,65,31,254,31,11,31,19,31,19,30,19,29,137,31,25,31,208,31,177,31,177,30,150,31,142,31,97,31,197,31,189,31,148,31,24,31,24,30,67,31,92,31,36,31,112,31,246,31,46,31,46,30,46,29,46,28,212,31,27,31,153,31,153,30,206,31,206,30,198,31,238,31,239,31,74,31,18,31,18,30,33,31,222,31,240,31,35,31,133,31,111,31,136,31,246,31,222,31,24,31,76,31,203,31,186,31,186,30,21,31,195,31,133,31,133,30,202,31,189,31,183,31,63,31,198,31,143,31,143,30,58,31,147,31,142,31,130,31,148,31,148,30,148,29,15,31,222,31,220,31,26,31,17,31,3,31,58,31,235,31,50,31,50,30,244,31,102,31,174,31,183,31,206,31,206,30,189,31,49,31,173,31,173,30,39,31,216,31,185,31,212,31,212,30,246,31,246,30,67,31,67,30,172,31,133,31,191,31,123,31,218,31,35,31,110,31,141,31,141,30,141,29,49,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
