-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 586;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (197,0,7,0,66,0,10,0,40,0,110,0,114,0,13,0,94,0,71,0,0,0,0,0,30,0,200,0,241,0,147,0,82,0,205,0,0,0,49,0,10,0,174,0,57,0,0,0,190,0,108,0,5,0,104,0,0,0,0,0,0,0,62,0,113,0,66,0,0,0,0,0,0,0,193,0,204,0,78,0,51,0,0,0,119,0,0,0,186,0,163,0,18,0,129,0,0,0,94,0,0,0,117,0,0,0,160,0,0,0,0,0,70,0,0,0,94,0,9,0,0,0,195,0,100,0,196,0,0,0,205,0,220,0,5,0,76,0,93,0,202,0,0,0,123,0,0,0,191,0,213,0,0,0,0,0,73,0,215,0,217,0,236,0,122,0,0,0,62,0,86,0,52,0,10,0,0,0,21,0,73,0,71,0,127,0,61,0,42,0,219,0,144,0,44,0,143,0,139,0,166,0,219,0,174,0,143,0,0,0,53,0,96,0,118,0,89,0,178,0,56,0,0,0,162,0,138,0,110,0,0,0,213,0,185,0,237,0,127,0,111,0,0,0,45,0,0,0,58,0,0,0,169,0,55,0,46,0,0,0,161,0,101,0,16,0,65,0,219,0,230,0,243,0,156,0,154,0,30,0,214,0,72,0,3,0,0,0,255,0,113,0,75,0,0,0,212,0,145,0,157,0,144,0,191,0,225,0,222,0,187,0,94,0,219,0,206,0,0,0,197,0,39,0,0,0,0,0,141,0,230,0,255,0,206,0,48,0,148,0,13,0,149,0,0,0,250,0,24,0,106,0,98,0,0,0,211,0,218,0,54,0,0,0,147,0,149,0,160,0,0,0,147,0,181,0,81,0,39,0,179,0,99,0,241,0,165,0,0,0,67,0,157,0,156,0,95,0,63,0,6,0,134,0,160,0,75,0,85,0,105,0,89,0,59,0,0,0,197,0,0,0,230,0,58,0,85,0,169,0,28,0,248,0,237,0,247,0,66,0,186,0,27,0,184,0,103,0,26,0,78,0,226,0,39,0,0,0,127,0,0,0,49,0,169,0,48,0,0,0,0,0,2,0,216,0,0,0,196,0,176,0,0,0,198,0,169,0,231,0,16,0,87,0,108,0,152,0,7,0,14,0,0,0,129,0,0,0,0,0,105,0,0,0,0,0,0,0,44,0,0,0,148,0,182,0,104,0,126,0,102,0,130,0,159,0,0,0,85,0,3,0,43,0,86,0,0,0,180,0,27,0,24,0,174,0,12,0,197,0,114,0,79,0,48,0,0,0,9,0,242,0,0,0,122,0,0,0,191,0,197,0,255,0,0,0,0,0,79,0,224,0,252,0,150,0,117,0,83,0,182,0,0,0,0,0,23,0,150,0,20,0,184,0,148,0,157,0,153,0,107,0,253,0,220,0,126,0,128,0,0,0,41,0,238,0,114,0,52,0,110,0,0,0,45,0,13,0,0,0,134,0,0,0,0,0,191,0,158,0,200,0,132,0,4,0,120,0,0,0,67,0,0,0,184,0,120,0,14,0,198,0,68,0,70,0,69,0,0,0,181,0,74,0,234,0,31,0,224,0,149,0,51,0,195,0,86,0,253,0,230,0,0,0,194,0,0,0,7,0,96,0,100,0,198,0,34,0,102,0,18,0,160,0,0,0,0,0,193,0,0,0,87,0,0,0,171,0,6,0,245,0,9,0,203,0,5,0,0,0,0,0,79,0,99,0,220,0,235,0,160,0,35,0,189,0,41,0,64,0,244,0,7,0,240,0,65,0,0,0,242,0,43,0,127,0,245,0,152,0,0,0,19,0,221,0,0,0,157,0,39,0,0,0,0,0,40,0,113,0,42,0,60,0,205,0,242,0,222,0,0,0,234,0,159,0,145,0,64,0,245,0,211,0,116,0,152,0,94,0,151,0,0,0,154,0,167,0,27,0,0,0,227,0,0,0,43,0,143,0,166,0,0,0,190,0,56,0,0,0,195,0,91,0,219,0,0,0,235,0,155,0,160,0,104,0,161,0,158,0,46,0,159,0,227,0,200,0,0,0,21,0,0,0,0,0,247,0,38,0,200,0,0,0,141,0,0,0,69,0,58,0,0,0,235,0,143,0,116,0,167,0,91,0,234,0,211,0,0,0,87,0,172,0,54,0,221,0,67,0,119,0,0,0,162,0,0,0,205,0,80,0,0,0,131,0,57,0,184,0,0,0,122,0,137,0,131,0,219,0,13,0,78,0,221,0,0,0,0,0,101,0,180,0,0,0,49,0,41,0,211,0,0,0,192,0,0,0,197,0,0,0,108,0,86,0,107,0,30,0,136,0,164,0,223,0,54,0,229,0,222,0,0,0,98,0,225,0,103,0,0,0,55,0,25,0,14,0,0,0,0,0,84,0,109,0,0,0,254,0,102,0,56,0,33,0,194,0,67,0,31,0,24,0,222,0,226,0,222,0,4,0,177,0,210,0,170,0,18,0,24,0,151,0,1,0,0,0,0,0,99,0,0,0,0,0,0,0,39,0,0,0,111,0,0,0,0,0,36,0,119,0,140,0,234,0,116,0,34,0,0,0,199,0,98,0,111,0,144,0,201,0,215,0,121,0,0,0,97,0,231,0,201,0,178,0,0,0,233,0,49,0);
signal scenario_full  : scenario_type := (197,31,7,31,66,31,10,31,40,31,110,31,114,31,13,31,94,31,71,31,71,30,71,29,30,31,200,31,241,31,147,31,82,31,205,31,205,30,49,31,10,31,174,31,57,31,57,30,190,31,108,31,5,31,104,31,104,30,104,29,104,28,62,31,113,31,66,31,66,30,66,29,66,28,193,31,204,31,78,31,51,31,51,30,119,31,119,30,186,31,163,31,18,31,129,31,129,30,94,31,94,30,117,31,117,30,160,31,160,30,160,29,70,31,70,30,94,31,9,31,9,30,195,31,100,31,196,31,196,30,205,31,220,31,5,31,76,31,93,31,202,31,202,30,123,31,123,30,191,31,213,31,213,30,213,29,73,31,215,31,217,31,236,31,122,31,122,30,62,31,86,31,52,31,10,31,10,30,21,31,73,31,71,31,127,31,61,31,42,31,219,31,144,31,44,31,143,31,139,31,166,31,219,31,174,31,143,31,143,30,53,31,96,31,118,31,89,31,178,31,56,31,56,30,162,31,138,31,110,31,110,30,213,31,185,31,237,31,127,31,111,31,111,30,45,31,45,30,58,31,58,30,169,31,55,31,46,31,46,30,161,31,101,31,16,31,65,31,219,31,230,31,243,31,156,31,154,31,30,31,214,31,72,31,3,31,3,30,255,31,113,31,75,31,75,30,212,31,145,31,157,31,144,31,191,31,225,31,222,31,187,31,94,31,219,31,206,31,206,30,197,31,39,31,39,30,39,29,141,31,230,31,255,31,206,31,48,31,148,31,13,31,149,31,149,30,250,31,24,31,106,31,98,31,98,30,211,31,218,31,54,31,54,30,147,31,149,31,160,31,160,30,147,31,181,31,81,31,39,31,179,31,99,31,241,31,165,31,165,30,67,31,157,31,156,31,95,31,63,31,6,31,134,31,160,31,75,31,85,31,105,31,89,31,59,31,59,30,197,31,197,30,230,31,58,31,85,31,169,31,28,31,248,31,237,31,247,31,66,31,186,31,27,31,184,31,103,31,26,31,78,31,226,31,39,31,39,30,127,31,127,30,49,31,169,31,48,31,48,30,48,29,2,31,216,31,216,30,196,31,176,31,176,30,198,31,169,31,231,31,16,31,87,31,108,31,152,31,7,31,14,31,14,30,129,31,129,30,129,29,105,31,105,30,105,29,105,28,44,31,44,30,148,31,182,31,104,31,126,31,102,31,130,31,159,31,159,30,85,31,3,31,43,31,86,31,86,30,180,31,27,31,24,31,174,31,12,31,197,31,114,31,79,31,48,31,48,30,9,31,242,31,242,30,122,31,122,30,191,31,197,31,255,31,255,30,255,29,79,31,224,31,252,31,150,31,117,31,83,31,182,31,182,30,182,29,23,31,150,31,20,31,184,31,148,31,157,31,153,31,107,31,253,31,220,31,126,31,128,31,128,30,41,31,238,31,114,31,52,31,110,31,110,30,45,31,13,31,13,30,134,31,134,30,134,29,191,31,158,31,200,31,132,31,4,31,120,31,120,30,67,31,67,30,184,31,120,31,14,31,198,31,68,31,70,31,69,31,69,30,181,31,74,31,234,31,31,31,224,31,149,31,51,31,195,31,86,31,253,31,230,31,230,30,194,31,194,30,7,31,96,31,100,31,198,31,34,31,102,31,18,31,160,31,160,30,160,29,193,31,193,30,87,31,87,30,171,31,6,31,245,31,9,31,203,31,5,31,5,30,5,29,79,31,99,31,220,31,235,31,160,31,35,31,189,31,41,31,64,31,244,31,7,31,240,31,65,31,65,30,242,31,43,31,127,31,245,31,152,31,152,30,19,31,221,31,221,30,157,31,39,31,39,30,39,29,40,31,113,31,42,31,60,31,205,31,242,31,222,31,222,30,234,31,159,31,145,31,64,31,245,31,211,31,116,31,152,31,94,31,151,31,151,30,154,31,167,31,27,31,27,30,227,31,227,30,43,31,143,31,166,31,166,30,190,31,56,31,56,30,195,31,91,31,219,31,219,30,235,31,155,31,160,31,104,31,161,31,158,31,46,31,159,31,227,31,200,31,200,30,21,31,21,30,21,29,247,31,38,31,200,31,200,30,141,31,141,30,69,31,58,31,58,30,235,31,143,31,116,31,167,31,91,31,234,31,211,31,211,30,87,31,172,31,54,31,221,31,67,31,119,31,119,30,162,31,162,30,205,31,80,31,80,30,131,31,57,31,184,31,184,30,122,31,137,31,131,31,219,31,13,31,78,31,221,31,221,30,221,29,101,31,180,31,180,30,49,31,41,31,211,31,211,30,192,31,192,30,197,31,197,30,108,31,86,31,107,31,30,31,136,31,164,31,223,31,54,31,229,31,222,31,222,30,98,31,225,31,103,31,103,30,55,31,25,31,14,31,14,30,14,29,84,31,109,31,109,30,254,31,102,31,56,31,33,31,194,31,67,31,31,31,24,31,222,31,226,31,222,31,4,31,177,31,210,31,170,31,18,31,24,31,151,31,1,31,1,30,1,29,99,31,99,30,99,29,99,28,39,31,39,30,111,31,111,30,111,29,36,31,119,31,140,31,234,31,116,31,34,31,34,30,199,31,98,31,111,31,144,31,201,31,215,31,121,31,121,30,97,31,231,31,201,31,178,31,178,30,233,31,49,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
