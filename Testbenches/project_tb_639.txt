-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 318;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (192,0,255,0,89,0,228,0,169,0,192,0,20,0,3,0,7,0,143,0,227,0,21,0,7,0,0,0,184,0,1,0,195,0,243,0,139,0,49,0,0,0,192,0,184,0,54,0,143,0,226,0,3,0,0,0,0,0,138,0,4,0,0,0,249,0,0,0,17,0,97,0,22,0,19,0,0,0,189,0,196,0,57,0,210,0,196,0,0,0,0,0,0,0,101,0,0,0,248,0,230,0,252,0,11,0,216,0,210,0,33,0,62,0,64,0,77,0,77,0,230,0,147,0,0,0,89,0,23,0,141,0,224,0,0,0,0,0,137,0,236,0,111,0,0,0,186,0,75,0,217,0,181,0,115,0,140,0,210,0,45,0,200,0,12,0,114,0,0,0,136,0,5,0,0,0,107,0,55,0,5,0,0,0,18,0,165,0,166,0,19,0,148,0,0,0,197,0,46,0,180,0,251,0,69,0,116,0,0,0,59,0,89,0,63,0,36,0,0,0,26,0,128,0,63,0,0,0,146,0,70,0,0,0,115,0,136,0,86,0,43,0,0,0,210,0,113,0,228,0,32,0,0,0,9,0,47,0,229,0,78,0,12,0,0,0,0,0,67,0,0,0,189,0,192,0,42,0,119,0,191,0,84,0,226,0,91,0,72,0,213,0,235,0,85,0,110,0,55,0,215,0,0,0,175,0,0,0,0,0,0,0,0,0,9,0,224,0,81,0,178,0,212,0,173,0,206,0,0,0,101,0,236,0,12,0,33,0,0,0,210,0,130,0,0,0,200,0,171,0,231,0,92,0,22,0,0,0,45,0,0,0,202,0,0,0,0,0,0,0,237,0,0,0,33,0,87,0,98,0,210,0,40,0,170,0,0,0,124,0,220,0,91,0,27,0,0,0,0,0,42,0,32,0,155,0,12,0,150,0,102,0,164,0,0,0,63,0,93,0,17,0,200,0,100,0,101,0,4,0,183,0,178,0,15,0,165,0,23,0,81,0,0,0,184,0,22,0,239,0,5,0,243,0,198,0,0,0,96,0,0,0,249,0,0,0,181,0,0,0,144,0,15,0,181,0,0,0,174,0,167,0,209,0,117,0,211,0,0,0,0,0,254,0,0,0,189,0,0,0,187,0,196,0,4,0,93,0,0,0,132,0,120,0,61,0,151,0,19,0,0,0,209,0,67,0,146,0,21,0,156,0,120,0,167,0,1,0,203,0,149,0,0,0,79,0,212,0,0,0,239,0,102,0,146,0,94,0,116,0,208,0,156,0,135,0,229,0,0,0,0,0,102,0,198,0,164,0,0,0,0,0,135,0,189,0,243,0,0,0,0,0,184,0,34,0,120,0,62,0,29,0,40,0,14,0,28,0,235,0,156,0,254,0,243,0,0,0,152,0,238,0,0,0,216,0,142,0,72,0,10,0,54,0,150,0);
signal scenario_full  : scenario_type := (192,31,255,31,89,31,228,31,169,31,192,31,20,31,3,31,7,31,143,31,227,31,21,31,7,31,7,30,184,31,1,31,195,31,243,31,139,31,49,31,49,30,192,31,184,31,54,31,143,31,226,31,3,31,3,30,3,29,138,31,4,31,4,30,249,31,249,30,17,31,97,31,22,31,19,31,19,30,189,31,196,31,57,31,210,31,196,31,196,30,196,29,196,28,101,31,101,30,248,31,230,31,252,31,11,31,216,31,210,31,33,31,62,31,64,31,77,31,77,31,230,31,147,31,147,30,89,31,23,31,141,31,224,31,224,30,224,29,137,31,236,31,111,31,111,30,186,31,75,31,217,31,181,31,115,31,140,31,210,31,45,31,200,31,12,31,114,31,114,30,136,31,5,31,5,30,107,31,55,31,5,31,5,30,18,31,165,31,166,31,19,31,148,31,148,30,197,31,46,31,180,31,251,31,69,31,116,31,116,30,59,31,89,31,63,31,36,31,36,30,26,31,128,31,63,31,63,30,146,31,70,31,70,30,115,31,136,31,86,31,43,31,43,30,210,31,113,31,228,31,32,31,32,30,9,31,47,31,229,31,78,31,12,31,12,30,12,29,67,31,67,30,189,31,192,31,42,31,119,31,191,31,84,31,226,31,91,31,72,31,213,31,235,31,85,31,110,31,55,31,215,31,215,30,175,31,175,30,175,29,175,28,175,27,9,31,224,31,81,31,178,31,212,31,173,31,206,31,206,30,101,31,236,31,12,31,33,31,33,30,210,31,130,31,130,30,200,31,171,31,231,31,92,31,22,31,22,30,45,31,45,30,202,31,202,30,202,29,202,28,237,31,237,30,33,31,87,31,98,31,210,31,40,31,170,31,170,30,124,31,220,31,91,31,27,31,27,30,27,29,42,31,32,31,155,31,12,31,150,31,102,31,164,31,164,30,63,31,93,31,17,31,200,31,100,31,101,31,4,31,183,31,178,31,15,31,165,31,23,31,81,31,81,30,184,31,22,31,239,31,5,31,243,31,198,31,198,30,96,31,96,30,249,31,249,30,181,31,181,30,144,31,15,31,181,31,181,30,174,31,167,31,209,31,117,31,211,31,211,30,211,29,254,31,254,30,189,31,189,30,187,31,196,31,4,31,93,31,93,30,132,31,120,31,61,31,151,31,19,31,19,30,209,31,67,31,146,31,21,31,156,31,120,31,167,31,1,31,203,31,149,31,149,30,79,31,212,31,212,30,239,31,102,31,146,31,94,31,116,31,208,31,156,31,135,31,229,31,229,30,229,29,102,31,198,31,164,31,164,30,164,29,135,31,189,31,243,31,243,30,243,29,184,31,34,31,120,31,62,31,29,31,40,31,14,31,28,31,235,31,156,31,254,31,243,31,243,30,152,31,238,31,238,30,216,31,142,31,72,31,10,31,54,31,150,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
