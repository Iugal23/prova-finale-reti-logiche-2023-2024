-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 712;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (230,0,211,0,44,0,251,0,18,0,239,0,102,0,102,0,185,0,117,0,0,0,67,0,156,0,226,0,239,0,114,0,0,0,17,0,95,0,242,0,0,0,23,0,74,0,0,0,98,0,202,0,0,0,118,0,28,0,161,0,250,0,0,0,205,0,242,0,10,0,179,0,206,0,168,0,0,0,38,0,209,0,58,0,193,0,0,0,59,0,20,0,168,0,67,0,43,0,49,0,0,0,36,0,0,0,206,0,117,0,131,0,211,0,0,0,38,0,0,0,120,0,34,0,14,0,107,0,0,0,193,0,74,0,0,0,181,0,130,0,42,0,0,0,47,0,241,0,84,0,0,0,190,0,74,0,72,0,68,0,167,0,0,0,17,0,148,0,142,0,220,0,0,0,146,0,17,0,38,0,213,0,136,0,24,0,125,0,48,0,0,0,79,0,226,0,239,0,249,0,62,0,187,0,69,0,249,0,110,0,0,0,6,0,35,0,0,0,104,0,46,0,17,0,34,0,237,0,178,0,225,0,0,0,0,0,0,0,0,0,0,0,104,0,154,0,0,0,0,0,4,0,96,0,228,0,0,0,81,0,0,0,145,0,110,0,200,0,19,0,38,0,14,0,0,0,65,0,236,0,233,0,90,0,214,0,237,0,84,0,81,0,0,0,159,0,47,0,237,0,12,0,86,0,81,0,0,0,149,0,190,0,67,0,0,0,235,0,67,0,178,0,229,0,195,0,54,0,109,0,176,0,205,0,128,0,0,0,20,0,81,0,208,0,2,0,14,0,58,0,55,0,17,0,0,0,239,0,6,0,24,0,0,0,124,0,31,0,118,0,26,0,0,0,0,0,113,0,194,0,185,0,237,0,14,0,0,0,48,0,42,0,231,0,0,0,236,0,255,0,0,0,104,0,8,0,26,0,114,0,0,0,37,0,63,0,0,0,0,0,141,0,0,0,138,0,145,0,220,0,11,0,186,0,165,0,234,0,112,0,224,0,39,0,27,0,144,0,53,0,127,0,70,0,88,0,252,0,108,0,0,0,190,0,76,0,197,0,154,0,135,0,0,0,0,0,0,0,40,0,207,0,0,0,43,0,98,0,16,0,240,0,0,0,0,0,0,0,0,0,156,0,186,0,14,0,213,0,51,0,0,0,98,0,246,0,0,0,41,0,53,0,178,0,185,0,0,0,229,0,0,0,1,0,249,0,0,0,210,0,197,0,130,0,78,0,0,0,0,0,0,0,110,0,140,0,36,0,0,0,146,0,122,0,188,0,58,0,0,0,129,0,77,0,249,0,14,0,159,0,224,0,205,0,77,0,80,0,154,0,174,0,100,0,21,0,67,0,0,0,30,0,29,0,0,0,81,0,226,0,117,0,28,0,224,0,194,0,0,0,0,0,0,0,194,0,129,0,248,0,0,0,213,0,66,0,14,0,62,0,102,0,55,0,31,0,193,0,0,0,224,0,201,0,226,0,253,0,3,0,170,0,113,0,95,0,0,0,106,0,139,0,106,0,67,0,152,0,0,0,0,0,178,0,245,0,0,0,0,0,174,0,196,0,118,0,90,0,235,0,187,0,0,0,0,0,145,0,190,0,184,0,0,0,202,0,97,0,36,0,246,0,69,0,0,0,234,0,130,0,186,0,103,0,221,0,0,0,28,0,63,0,170,0,203,0,45,0,17,0,63,0,200,0,74,0,169,0,0,0,27,0,216,0,232,0,249,0,59,0,83,0,130,0,0,0,173,0,111,0,0,0,80,0,200,0,73,0,85,0,181,0,94,0,32,0,24,0,0,0,105,0,190,0,0,0,99,0,162,0,74,0,112,0,0,0,0,0,0,0,212,0,175,0,121,0,172,0,87,0,150,0,31,0,69,0,0,0,44,0,0,0,0,0,151,0,74,0,113,0,110,0,100,0,8,0,129,0,97,0,38,0,0,0,14,0,16,0,58,0,237,0,226,0,199,0,221,0,0,0,15,0,209,0,45,0,182,0,0,0,26,0,133,0,135,0,0,0,47,0,59,0,244,0,0,0,0,0,0,0,78,0,210,0,154,0,126,0,160,0,0,0,98,0,57,0,9,0,111,0,36,0,125,0,0,0,242,0,0,0,5,0,0,0,0,0,242,0,0,0,41,0,0,0,11,0,76,0,179,0,35,0,111,0,74,0,136,0,43,0,75,0,24,0,58,0,98,0,0,0,0,0,126,0,107,0,0,0,153,0,185,0,104,0,211,0,211,0,0,0,172,0,236,0,109,0,107,0,50,0,69,0,164,0,96,0,223,0,101,0,0,0,125,0,116,0,208,0,0,0,129,0,112,0,197,0,0,0,238,0,232,0,60,0,219,0,247,0,255,0,148,0,84,0,72,0,14,0,148,0,57,0,5,0,0,0,165,0,181,0,157,0,4,0,245,0,0,0,252,0,118,0,90,0,37,0,181,0,206,0,32,0,196,0,14,0,137,0,39,0,36,0,162,0,51,0,67,0,13,0,0,0,43,0,245,0,19,0,0,0,34,0,0,0,174,0,87,0,0,0,36,0,93,0,0,0,218,0,39,0,74,0,124,0,30,0,0,0,0,0,255,0,144,0,0,0,251,0,213,0,195,0,45,0,181,0,58,0,235,0,0,0,138,0,152,0,128,0,152,0,95,0,0,0,131,0,254,0,235,0,139,0,0,0,45,0,0,0,227,0,224,0,199,0,0,0,253,0,137,0,183,0,164,0,5,0,36,0,217,0,0,0,87,0,227,0,12,0,9,0,0,0,136,0,111,0,244,0,200,0,149,0,184,0,217,0,25,0,132,0,220,0,234,0,240,0,96,0,117,0,0,0,211,0,21,0,111,0,232,0,145,0,59,0,0,0,29,0,0,0,97,0,180,0,250,0,0,0,60,0,0,0,0,0,169,0,80,0,96,0,233,0,31,0,56,0,42,0,217,0,60,0,157,0,199,0,81,0,55,0,208,0,0,0,0,0,128,0,127,0,177,0,0,0,66,0,225,0,230,0,52,0,243,0,18,0,218,0,207,0,22,0,95,0,149,0,241,0,142,0,246,0,61,0,191,0,186,0,80,0,198,0,0,0,209,0,45,0,130,0,131,0,0,0,114,0,14,0,192,0,104,0,0,0,47,0,92,0,132,0,0,0,108,0,56,0,252,0,0,0,158,0,184,0,116,0,0,0,244,0,44,0,101,0);
signal scenario_full  : scenario_type := (230,31,211,31,44,31,251,31,18,31,239,31,102,31,102,31,185,31,117,31,117,30,67,31,156,31,226,31,239,31,114,31,114,30,17,31,95,31,242,31,242,30,23,31,74,31,74,30,98,31,202,31,202,30,118,31,28,31,161,31,250,31,250,30,205,31,242,31,10,31,179,31,206,31,168,31,168,30,38,31,209,31,58,31,193,31,193,30,59,31,20,31,168,31,67,31,43,31,49,31,49,30,36,31,36,30,206,31,117,31,131,31,211,31,211,30,38,31,38,30,120,31,34,31,14,31,107,31,107,30,193,31,74,31,74,30,181,31,130,31,42,31,42,30,47,31,241,31,84,31,84,30,190,31,74,31,72,31,68,31,167,31,167,30,17,31,148,31,142,31,220,31,220,30,146,31,17,31,38,31,213,31,136,31,24,31,125,31,48,31,48,30,79,31,226,31,239,31,249,31,62,31,187,31,69,31,249,31,110,31,110,30,6,31,35,31,35,30,104,31,46,31,17,31,34,31,237,31,178,31,225,31,225,30,225,29,225,28,225,27,225,26,104,31,154,31,154,30,154,29,4,31,96,31,228,31,228,30,81,31,81,30,145,31,110,31,200,31,19,31,38,31,14,31,14,30,65,31,236,31,233,31,90,31,214,31,237,31,84,31,81,31,81,30,159,31,47,31,237,31,12,31,86,31,81,31,81,30,149,31,190,31,67,31,67,30,235,31,67,31,178,31,229,31,195,31,54,31,109,31,176,31,205,31,128,31,128,30,20,31,81,31,208,31,2,31,14,31,58,31,55,31,17,31,17,30,239,31,6,31,24,31,24,30,124,31,31,31,118,31,26,31,26,30,26,29,113,31,194,31,185,31,237,31,14,31,14,30,48,31,42,31,231,31,231,30,236,31,255,31,255,30,104,31,8,31,26,31,114,31,114,30,37,31,63,31,63,30,63,29,141,31,141,30,138,31,145,31,220,31,11,31,186,31,165,31,234,31,112,31,224,31,39,31,27,31,144,31,53,31,127,31,70,31,88,31,252,31,108,31,108,30,190,31,76,31,197,31,154,31,135,31,135,30,135,29,135,28,40,31,207,31,207,30,43,31,98,31,16,31,240,31,240,30,240,29,240,28,240,27,156,31,186,31,14,31,213,31,51,31,51,30,98,31,246,31,246,30,41,31,53,31,178,31,185,31,185,30,229,31,229,30,1,31,249,31,249,30,210,31,197,31,130,31,78,31,78,30,78,29,78,28,110,31,140,31,36,31,36,30,146,31,122,31,188,31,58,31,58,30,129,31,77,31,249,31,14,31,159,31,224,31,205,31,77,31,80,31,154,31,174,31,100,31,21,31,67,31,67,30,30,31,29,31,29,30,81,31,226,31,117,31,28,31,224,31,194,31,194,30,194,29,194,28,194,31,129,31,248,31,248,30,213,31,66,31,14,31,62,31,102,31,55,31,31,31,193,31,193,30,224,31,201,31,226,31,253,31,3,31,170,31,113,31,95,31,95,30,106,31,139,31,106,31,67,31,152,31,152,30,152,29,178,31,245,31,245,30,245,29,174,31,196,31,118,31,90,31,235,31,187,31,187,30,187,29,145,31,190,31,184,31,184,30,202,31,97,31,36,31,246,31,69,31,69,30,234,31,130,31,186,31,103,31,221,31,221,30,28,31,63,31,170,31,203,31,45,31,17,31,63,31,200,31,74,31,169,31,169,30,27,31,216,31,232,31,249,31,59,31,83,31,130,31,130,30,173,31,111,31,111,30,80,31,200,31,73,31,85,31,181,31,94,31,32,31,24,31,24,30,105,31,190,31,190,30,99,31,162,31,74,31,112,31,112,30,112,29,112,28,212,31,175,31,121,31,172,31,87,31,150,31,31,31,69,31,69,30,44,31,44,30,44,29,151,31,74,31,113,31,110,31,100,31,8,31,129,31,97,31,38,31,38,30,14,31,16,31,58,31,237,31,226,31,199,31,221,31,221,30,15,31,209,31,45,31,182,31,182,30,26,31,133,31,135,31,135,30,47,31,59,31,244,31,244,30,244,29,244,28,78,31,210,31,154,31,126,31,160,31,160,30,98,31,57,31,9,31,111,31,36,31,125,31,125,30,242,31,242,30,5,31,5,30,5,29,242,31,242,30,41,31,41,30,11,31,76,31,179,31,35,31,111,31,74,31,136,31,43,31,75,31,24,31,58,31,98,31,98,30,98,29,126,31,107,31,107,30,153,31,185,31,104,31,211,31,211,31,211,30,172,31,236,31,109,31,107,31,50,31,69,31,164,31,96,31,223,31,101,31,101,30,125,31,116,31,208,31,208,30,129,31,112,31,197,31,197,30,238,31,232,31,60,31,219,31,247,31,255,31,148,31,84,31,72,31,14,31,148,31,57,31,5,31,5,30,165,31,181,31,157,31,4,31,245,31,245,30,252,31,118,31,90,31,37,31,181,31,206,31,32,31,196,31,14,31,137,31,39,31,36,31,162,31,51,31,67,31,13,31,13,30,43,31,245,31,19,31,19,30,34,31,34,30,174,31,87,31,87,30,36,31,93,31,93,30,218,31,39,31,74,31,124,31,30,31,30,30,30,29,255,31,144,31,144,30,251,31,213,31,195,31,45,31,181,31,58,31,235,31,235,30,138,31,152,31,128,31,152,31,95,31,95,30,131,31,254,31,235,31,139,31,139,30,45,31,45,30,227,31,224,31,199,31,199,30,253,31,137,31,183,31,164,31,5,31,36,31,217,31,217,30,87,31,227,31,12,31,9,31,9,30,136,31,111,31,244,31,200,31,149,31,184,31,217,31,25,31,132,31,220,31,234,31,240,31,96,31,117,31,117,30,211,31,21,31,111,31,232,31,145,31,59,31,59,30,29,31,29,30,97,31,180,31,250,31,250,30,60,31,60,30,60,29,169,31,80,31,96,31,233,31,31,31,56,31,42,31,217,31,60,31,157,31,199,31,81,31,55,31,208,31,208,30,208,29,128,31,127,31,177,31,177,30,66,31,225,31,230,31,52,31,243,31,18,31,218,31,207,31,22,31,95,31,149,31,241,31,142,31,246,31,61,31,191,31,186,31,80,31,198,31,198,30,209,31,45,31,130,31,131,31,131,30,114,31,14,31,192,31,104,31,104,30,47,31,92,31,132,31,132,30,108,31,56,31,252,31,252,30,158,31,184,31,116,31,116,30,244,31,44,31,101,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
