-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 871;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (222,0,47,0,106,0,81,0,12,0,210,0,89,0,194,0,25,0,0,0,0,0,203,0,221,0,125,0,245,0,79,0,230,0,27,0,153,0,80,0,201,0,110,0,121,0,211,0,216,0,39,0,0,0,225,0,50,0,253,0,18,0,0,0,131,0,95,0,0,0,40,0,55,0,61,0,25,0,154,0,29,0,229,0,0,0,74,0,14,0,107,0,221,0,0,0,0,0,75,0,163,0,22,0,52,0,0,0,89,0,111,0,163,0,29,0,33,0,0,0,213,0,68,0,154,0,250,0,0,0,202,0,145,0,55,0,123,0,224,0,234,0,202,0,28,0,206,0,17,0,152,0,0,0,109,0,174,0,86,0,82,0,74,0,134,0,202,0,6,0,41,0,0,0,232,0,0,0,73,0,138,0,116,0,31,0,0,0,132,0,7,0,0,0,157,0,121,0,73,0,88,0,188,0,0,0,0,0,129,0,27,0,253,0,190,0,193,0,253,0,35,0,0,0,22,0,0,0,139,0,63,0,155,0,252,0,114,0,210,0,23,0,0,0,115,0,47,0,102,0,0,0,127,0,191,0,0,0,210,0,16,0,0,0,0,0,139,0,163,0,0,0,25,0,124,0,85,0,234,0,216,0,253,0,191,0,124,0,228,0,88,0,57,0,0,0,86,0,9,0,49,0,176,0,68,0,169,0,53,0,0,0,155,0,159,0,212,0,120,0,0,0,8,0,227,0,185,0,217,0,106,0,0,0,232,0,117,0,3,0,245,0,105,0,43,0,0,0,181,0,190,0,0,0,116,0,176,0,118,0,185,0,0,0,38,0,17,0,125,0,159,0,27,0,0,0,0,0,103,0,0,0,235,0,0,0,112,0,173,0,106,0,101,0,129,0,0,0,212,0,75,0,0,0,248,0,0,0,183,0,0,0,0,0,193,0,241,0,34,0,4,0,21,0,167,0,99,0,158,0,234,0,198,0,168,0,80,0,164,0,0,0,203,0,83,0,112,0,63,0,0,0,249,0,138,0,0,0,151,0,76,0,98,0,18,0,0,0,5,0,0,0,124,0,188,0,49,0,27,0,45,0,191,0,225,0,81,0,0,0,0,0,87,0,0,0,25,0,98,0,151,0,160,0,138,0,91,0,0,0,0,0,226,0,21,0,190,0,72,0,241,0,106,0,0,0,13,0,232,0,254,0,56,0,6,0,220,0,65,0,0,0,228,0,224,0,102,0,0,0,0,0,0,0,194,0,238,0,0,0,0,0,72,0,150,0,194,0,87,0,243,0,0,0,44,0,232,0,90,0,57,0,0,0,205,0,148,0,37,0,211,0,250,0,0,0,99,0,98,0,9,0,84,0,149,0,81,0,43,0,58,0,141,0,170,0,24,0,0,0,193,0,10,0,23,0,37,0,219,0,169,0,18,0,74,0,87,0,0,0,0,0,16,0,165,0,0,0,91,0,185,0,192,0,74,0,198,0,0,0,192,0,0,0,87,0,249,0,0,0,72,0,117,0,124,0,6,0,220,0,55,0,0,0,232,0,139,0,176,0,163,0,137,0,120,0,64,0,188,0,55,0,249,0,42,0,68,0,0,0,173,0,125,0,45,0,173,0,146,0,139,0,128,0,211,0,100,0,178,0,42,0,0,0,98,0,171,0,249,0,0,0,48,0,49,0,36,0,206,0,25,0,74,0,163,0,32,0,90,0,91,0,152,0,186,0,58,0,221,0,1,0,0,0,233,0,120,0,166,0,95,0,0,0,6,0,1,0,0,0,202,0,0,0,136,0,102,0,49,0,0,0,199,0,212,0,194,0,109,0,0,0,0,0,227,0,0,0,18,0,0,0,228,0,0,0,92,0,131,0,0,0,38,0,0,0,183,0,0,0,229,0,152,0,250,0,131,0,238,0,8,0,0,0,197,0,149,0,178,0,92,0,238,0,233,0,48,0,53,0,250,0,0,0,218,0,14,0,81,0,189,0,19,0,232,0,215,0,138,0,93,0,227,0,60,0,105,0,0,0,0,0,74,0,4,0,183,0,211,0,252,0,0,0,148,0,0,0,130,0,0,0,205,0,0,0,168,0,185,0,169,0,0,0,123,0,167,0,61,0,185,0,185,0,178,0,32,0,2,0,99,0,181,0,107,0,41,0,0,0,215,0,3,0,40,0,161,0,210,0,0,0,178,0,0,0,0,0,121,0,233,0,12,0,67,0,17,0,252,0,190,0,233,0,0,0,0,0,249,0,0,0,108,0,0,0,0,0,50,0,0,0,149,0,0,0,0,0,0,0,67,0,7,0,115,0,65,0,56,0,0,0,213,0,235,0,0,0,0,0,216,0,245,0,178,0,255,0,227,0,0,0,150,0,86,0,130,0,76,0,148,0,164,0,0,0,0,0,117,0,34,0,237,0,94,0,74,0,167,0,144,0,236,0,175,0,209,0,36,0,45,0,84,0,202,0,158,0,36,0,106,0,106,0,15,0,0,0,118,0,0,0,255,0,0,0,4,0,241,0,164,0,128,0,159,0,142,0,177,0,12,0,45,0,28,0,142,0,80,0,33,0,110,0,15,0,96,0,0,0,211,0,0,0,85,0,142,0,31,0,0,0,2,0,173,0,48,0,227,0,76,0,41,0,156,0,177,0,48,0,0,0,36,0,0,0,123,0,0,0,0,0,181,0,0,0,157,0,0,0,150,0,72,0,228,0,177,0,199,0,72,0,237,0,0,0,108,0,34,0,255,0,110,0,164,0,39,0,124,0,0,0,225,0,217,0,0,0,0,0,105,0,150,0,139,0,19,0,243,0,238,0,0,0,230,0,227,0,110,0,73,0,0,0,114,0,0,0,69,0,125,0,239,0,153,0,139,0,109,0,135,0,63,0,122,0,31,0,235,0,0,0,0,0,129,0,62,0,73,0,58,0,0,0,34,0,43,0,186,0,26,0,73,0,115,0,93,0,119,0,93,0,13,0,0,0,6,0,236,0,195,0,102,0,146,0,210,0,173,0,72,0,148,0,204,0,101,0,79,0,0,0,246,0,216,0,166,0,114,0,104,0,233,0,93,0,140,0,220,0,0,0,116,0,236,0,208,0,171,0,33,0,228,0,132,0,0,0,243,0,249,0,132,0,231,0,0,0,170,0,0,0,69,0,201,0,123,0,35,0,67,0,110,0,228,0,186,0,0,0,0,0,0,0,245,0,212,0,151,0,94,0,21,0,83,0,151,0,151,0,67,0,0,0,248,0,0,0,1,0,206,0,227,0,85,0,42,0,194,0,11,0,169,0,49,0,168,0,83,0,227,0,54,0,38,0,144,0,251,0,136,0,153,0,50,0,120,0,194,0,179,0,44,0,43,0,0,0,0,0,157,0,188,0,0,0,53,0,41,0,162,0,114,0,25,0,0,0,0,0,243,0,110,0,144,0,215,0,53,0,0,0,114,0,23,0,105,0,88,0,188,0,163,0,226,0,4,0,218,0,0,0,246,0,65,0,53,0,0,0,187,0,78,0,10,0,203,0,124,0,135,0,0,0,0,0,122,0,137,0,100,0,161,0,0,0,20,0,111,0,177,0,249,0,0,0,48,0,109,0,255,0,15,0,236,0,115,0,217,0,26,0,22,0,42,0,33,0,229,0,171,0,0,0,0,0,144,0,66,0,83,0,36,0,251,0,0,0,191,0,199,0,0,0,119,0,57,0,246,0,58,0,0,0,22,0,173,0,0,0,69,0,0,0,108,0,165,0,176,0,0,0,13,0,71,0,228,0,0,0,139,0,0,0,242,0,34,0,166,0,28,0,56,0,226,0,119,0,0,0,92,0,81,0,242,0,45,0,105,0,0,0,84,0,229,0,184,0,253,0,185,0,16,0,55,0,217,0,0,0,189,0,255,0,0,0,0,0,87,0,180,0);
signal scenario_full  : scenario_type := (222,31,47,31,106,31,81,31,12,31,210,31,89,31,194,31,25,31,25,30,25,29,203,31,221,31,125,31,245,31,79,31,230,31,27,31,153,31,80,31,201,31,110,31,121,31,211,31,216,31,39,31,39,30,225,31,50,31,253,31,18,31,18,30,131,31,95,31,95,30,40,31,55,31,61,31,25,31,154,31,29,31,229,31,229,30,74,31,14,31,107,31,221,31,221,30,221,29,75,31,163,31,22,31,52,31,52,30,89,31,111,31,163,31,29,31,33,31,33,30,213,31,68,31,154,31,250,31,250,30,202,31,145,31,55,31,123,31,224,31,234,31,202,31,28,31,206,31,17,31,152,31,152,30,109,31,174,31,86,31,82,31,74,31,134,31,202,31,6,31,41,31,41,30,232,31,232,30,73,31,138,31,116,31,31,31,31,30,132,31,7,31,7,30,157,31,121,31,73,31,88,31,188,31,188,30,188,29,129,31,27,31,253,31,190,31,193,31,253,31,35,31,35,30,22,31,22,30,139,31,63,31,155,31,252,31,114,31,210,31,23,31,23,30,115,31,47,31,102,31,102,30,127,31,191,31,191,30,210,31,16,31,16,30,16,29,139,31,163,31,163,30,25,31,124,31,85,31,234,31,216,31,253,31,191,31,124,31,228,31,88,31,57,31,57,30,86,31,9,31,49,31,176,31,68,31,169,31,53,31,53,30,155,31,159,31,212,31,120,31,120,30,8,31,227,31,185,31,217,31,106,31,106,30,232,31,117,31,3,31,245,31,105,31,43,31,43,30,181,31,190,31,190,30,116,31,176,31,118,31,185,31,185,30,38,31,17,31,125,31,159,31,27,31,27,30,27,29,103,31,103,30,235,31,235,30,112,31,173,31,106,31,101,31,129,31,129,30,212,31,75,31,75,30,248,31,248,30,183,31,183,30,183,29,193,31,241,31,34,31,4,31,21,31,167,31,99,31,158,31,234,31,198,31,168,31,80,31,164,31,164,30,203,31,83,31,112,31,63,31,63,30,249,31,138,31,138,30,151,31,76,31,98,31,18,31,18,30,5,31,5,30,124,31,188,31,49,31,27,31,45,31,191,31,225,31,81,31,81,30,81,29,87,31,87,30,25,31,98,31,151,31,160,31,138,31,91,31,91,30,91,29,226,31,21,31,190,31,72,31,241,31,106,31,106,30,13,31,232,31,254,31,56,31,6,31,220,31,65,31,65,30,228,31,224,31,102,31,102,30,102,29,102,28,194,31,238,31,238,30,238,29,72,31,150,31,194,31,87,31,243,31,243,30,44,31,232,31,90,31,57,31,57,30,205,31,148,31,37,31,211,31,250,31,250,30,99,31,98,31,9,31,84,31,149,31,81,31,43,31,58,31,141,31,170,31,24,31,24,30,193,31,10,31,23,31,37,31,219,31,169,31,18,31,74,31,87,31,87,30,87,29,16,31,165,31,165,30,91,31,185,31,192,31,74,31,198,31,198,30,192,31,192,30,87,31,249,31,249,30,72,31,117,31,124,31,6,31,220,31,55,31,55,30,232,31,139,31,176,31,163,31,137,31,120,31,64,31,188,31,55,31,249,31,42,31,68,31,68,30,173,31,125,31,45,31,173,31,146,31,139,31,128,31,211,31,100,31,178,31,42,31,42,30,98,31,171,31,249,31,249,30,48,31,49,31,36,31,206,31,25,31,74,31,163,31,32,31,90,31,91,31,152,31,186,31,58,31,221,31,1,31,1,30,233,31,120,31,166,31,95,31,95,30,6,31,1,31,1,30,202,31,202,30,136,31,102,31,49,31,49,30,199,31,212,31,194,31,109,31,109,30,109,29,227,31,227,30,18,31,18,30,228,31,228,30,92,31,131,31,131,30,38,31,38,30,183,31,183,30,229,31,152,31,250,31,131,31,238,31,8,31,8,30,197,31,149,31,178,31,92,31,238,31,233,31,48,31,53,31,250,31,250,30,218,31,14,31,81,31,189,31,19,31,232,31,215,31,138,31,93,31,227,31,60,31,105,31,105,30,105,29,74,31,4,31,183,31,211,31,252,31,252,30,148,31,148,30,130,31,130,30,205,31,205,30,168,31,185,31,169,31,169,30,123,31,167,31,61,31,185,31,185,31,178,31,32,31,2,31,99,31,181,31,107,31,41,31,41,30,215,31,3,31,40,31,161,31,210,31,210,30,178,31,178,30,178,29,121,31,233,31,12,31,67,31,17,31,252,31,190,31,233,31,233,30,233,29,249,31,249,30,108,31,108,30,108,29,50,31,50,30,149,31,149,30,149,29,149,28,67,31,7,31,115,31,65,31,56,31,56,30,213,31,235,31,235,30,235,29,216,31,245,31,178,31,255,31,227,31,227,30,150,31,86,31,130,31,76,31,148,31,164,31,164,30,164,29,117,31,34,31,237,31,94,31,74,31,167,31,144,31,236,31,175,31,209,31,36,31,45,31,84,31,202,31,158,31,36,31,106,31,106,31,15,31,15,30,118,31,118,30,255,31,255,30,4,31,241,31,164,31,128,31,159,31,142,31,177,31,12,31,45,31,28,31,142,31,80,31,33,31,110,31,15,31,96,31,96,30,211,31,211,30,85,31,142,31,31,31,31,30,2,31,173,31,48,31,227,31,76,31,41,31,156,31,177,31,48,31,48,30,36,31,36,30,123,31,123,30,123,29,181,31,181,30,157,31,157,30,150,31,72,31,228,31,177,31,199,31,72,31,237,31,237,30,108,31,34,31,255,31,110,31,164,31,39,31,124,31,124,30,225,31,217,31,217,30,217,29,105,31,150,31,139,31,19,31,243,31,238,31,238,30,230,31,227,31,110,31,73,31,73,30,114,31,114,30,69,31,125,31,239,31,153,31,139,31,109,31,135,31,63,31,122,31,31,31,235,31,235,30,235,29,129,31,62,31,73,31,58,31,58,30,34,31,43,31,186,31,26,31,73,31,115,31,93,31,119,31,93,31,13,31,13,30,6,31,236,31,195,31,102,31,146,31,210,31,173,31,72,31,148,31,204,31,101,31,79,31,79,30,246,31,216,31,166,31,114,31,104,31,233,31,93,31,140,31,220,31,220,30,116,31,236,31,208,31,171,31,33,31,228,31,132,31,132,30,243,31,249,31,132,31,231,31,231,30,170,31,170,30,69,31,201,31,123,31,35,31,67,31,110,31,228,31,186,31,186,30,186,29,186,28,245,31,212,31,151,31,94,31,21,31,83,31,151,31,151,31,67,31,67,30,248,31,248,30,1,31,206,31,227,31,85,31,42,31,194,31,11,31,169,31,49,31,168,31,83,31,227,31,54,31,38,31,144,31,251,31,136,31,153,31,50,31,120,31,194,31,179,31,44,31,43,31,43,30,43,29,157,31,188,31,188,30,53,31,41,31,162,31,114,31,25,31,25,30,25,29,243,31,110,31,144,31,215,31,53,31,53,30,114,31,23,31,105,31,88,31,188,31,163,31,226,31,4,31,218,31,218,30,246,31,65,31,53,31,53,30,187,31,78,31,10,31,203,31,124,31,135,31,135,30,135,29,122,31,137,31,100,31,161,31,161,30,20,31,111,31,177,31,249,31,249,30,48,31,109,31,255,31,15,31,236,31,115,31,217,31,26,31,22,31,42,31,33,31,229,31,171,31,171,30,171,29,144,31,66,31,83,31,36,31,251,31,251,30,191,31,199,31,199,30,119,31,57,31,246,31,58,31,58,30,22,31,173,31,173,30,69,31,69,30,108,31,165,31,176,31,176,30,13,31,71,31,228,31,228,30,139,31,139,30,242,31,34,31,166,31,28,31,56,31,226,31,119,31,119,30,92,31,81,31,242,31,45,31,105,31,105,30,84,31,229,31,184,31,253,31,185,31,16,31,55,31,217,31,217,30,189,31,255,31,255,30,255,29,87,31,180,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
