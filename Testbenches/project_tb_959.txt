-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 977;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (221,0,242,0,181,0,153,0,31,0,88,0,0,0,101,0,53,0,0,0,45,0,166,0,247,0,202,0,223,0,81,0,94,0,0,0,70,0,139,0,0,0,0,0,170,0,104,0,253,0,0,0,183,0,235,0,242,0,0,0,52,0,115,0,127,0,209,0,123,0,94,0,50,0,0,0,78,0,50,0,227,0,210,0,215,0,38,0,95,0,166,0,7,0,77,0,120,0,106,0,196,0,91,0,87,0,95,0,127,0,244,0,216,0,98,0,40,0,0,0,0,0,43,0,107,0,26,0,79,0,114,0,185,0,0,0,167,0,0,0,73,0,207,0,167,0,44,0,120,0,75,0,127,0,219,0,216,0,122,0,42,0,183,0,0,0,214,0,0,0,0,0,207,0,138,0,0,0,20,0,42,0,109,0,167,0,255,0,216,0,0,0,119,0,23,0,71,0,51,0,199,0,105,0,254,0,131,0,123,0,0,0,61,0,0,0,236,0,149,0,1,0,69,0,5,0,90,0,176,0,63,0,76,0,0,0,12,0,0,0,121,0,200,0,0,0,89,0,161,0,0,0,0,0,246,0,102,0,0,0,11,0,191,0,34,0,242,0,54,0,13,0,102,0,125,0,0,0,173,0,123,0,72,0,0,0,135,0,196,0,1,0,242,0,26,0,0,0,175,0,45,0,227,0,245,0,0,0,140,0,193,0,236,0,180,0,31,0,185,0,0,0,10,0,52,0,0,0,67,0,214,0,54,0,253,0,67,0,0,0,113,0,186,0,122,0,0,0,46,0,180,0,61,0,142,0,250,0,158,0,129,0,131,0,0,0,0,0,0,0,116,0,86,0,0,0,98,0,0,0,46,0,70,0,55,0,168,0,144,0,0,0,205,0,85,0,0,0,173,0,110,0,0,0,216,0,54,0,14,0,165,0,8,0,249,0,252,0,70,0,134,0,34,0,44,0,106,0,185,0,0,0,242,0,144,0,126,0,56,0,0,0,0,0,127,0,126,0,179,0,215,0,161,0,0,0,174,0,80,0,226,0,134,0,168,0,0,0,63,0,98,0,0,0,77,0,0,0,204,0,13,0,0,0,0,0,52,0,195,0,66,0,11,0,64,0,0,0,130,0,0,0,42,0,139,0,157,0,48,0,90,0,176,0,191,0,0,0,87,0,20,0,78,0,33,0,83,0,133,0,230,0,123,0,118,0,203,0,81,0,25,0,105,0,0,0,0,0,7,0,36,0,142,0,0,0,10,0,181,0,108,0,65,0,60,0,0,0,209,0,77,0,52,0,199,0,186,0,0,0,141,0,48,0,81,0,0,0,196,0,0,0,0,0,101,0,66,0,152,0,100,0,11,0,143,0,132,0,0,0,246,0,179,0,0,0,236,0,0,0,131,0,206,0,0,0,6,0,0,0,190,0,0,0,136,0,213,0,0,0,82,0,100,0,0,0,32,0,0,0,252,0,0,0,159,0,124,0,118,0,152,0,249,0,78,0,0,0,255,0,144,0,255,0,200,0,20,0,41,0,226,0,106,0,253,0,147,0,75,0,0,0,2,0,58,0,0,0,69,0,0,0,0,0,17,0,173,0,177,0,0,0,0,0,63,0,182,0,252,0,213,0,87,0,93,0,130,0,91,0,0,0,135,0,0,0,157,0,149,0,0,0,150,0,0,0,192,0,0,0,0,0,3,0,113,0,178,0,0,0,21,0,202,0,194,0,95,0,23,0,220,0,196,0,0,0,30,0,0,0,177,0,86,0,86,0,208,0,234,0,0,0,128,0,67,0,232,0,122,0,111,0,253,0,252,0,45,0,201,0,0,0,151,0,229,0,165,0,25,0,174,0,27,0,244,0,238,0,0,0,0,0,41,0,184,0,59,0,27,0,78,0,147,0,107,0,0,0,164,0,0,0,182,0,9,0,67,0,100,0,126,0,0,0,176,0,0,0,88,0,10,0,15,0,164,0,247,0,191,0,0,0,0,0,252,0,127,0,189,0,65,0,193,0,116,0,19,0,17,0,235,0,228,0,235,0,4,0,34,0,128,0,228,0,108,0,123,0,116,0,58,0,123,0,241,0,184,0,113,0,169,0,199,0,22,0,114,0,0,0,0,0,0,0,228,0,245,0,78,0,0,0,104,0,121,0,226,0,234,0,223,0,197,0,44,0,202,0,220,0,87,0,145,0,199,0,0,0,0,0,36,0,88,0,217,0,249,0,98,0,0,0,0,0,142,0,220,0,203,0,85,0,92,0,79,0,0,0,0,0,103,0,2,0,171,0,0,0,226,0,60,0,27,0,31,0,12,0,0,0,194,0,246,0,0,0,151,0,22,0,199,0,189,0,219,0,39,0,0,0,255,0,122,0,0,0,117,0,4,0,86,0,114,0,0,0,0,0,229,0,85,0,97,0,0,0,149,0,164,0,198,0,1,0,189,0,170,0,43,0,219,0,145,0,53,0,0,0,229,0,196,0,165,0,155,0,0,0,74,0,156,0,227,0,0,0,231,0,65,0,242,0,0,0,75,0,191,0,135,0,148,0,0,0,78,0,0,0,23,0,0,0,87,0,29,0,0,0,0,0,51,0,1,0,33,0,147,0,0,0,177,0,224,0,175,0,22,0,0,0,237,0,68,0,201,0,0,0,161,0,0,0,0,0,86,0,0,0,123,0,0,0,104,0,0,0,104,0,0,0,70,0,129,0,0,0,236,0,0,0,0,0,97,0,146,0,72,0,148,0,0,0,137,0,86,0,183,0,0,0,0,0,76,0,99,0,125,0,96,0,161,0,0,0,157,0,247,0,39,0,86,0,84,0,178,0,98,0,237,0,71,0,51,0,0,0,178,0,226,0,253,0,38,0,0,0,175,0,39,0,154,0,232,0,53,0,171,0,38,0,241,0,166,0,142,0,144,0,250,0,17,0,0,0,227,0,211,0,0,0,153,0,103,0,89,0,70,0,49,0,0,0,167,0,106,0,0,0,0,0,0,0,237,0,212,0,97,0,218,0,0,0,0,0,75,0,0,0,0,0,0,0,0,0,214,0,0,0,53,0,115,0,0,0,98,0,174,0,14,0,16,0,133,0,60,0,0,0,194,0,29,0,74,0,0,0,40,0,0,0,170,0,129,0,0,0,23,0,170,0,3,0,0,0,136,0,105,0,124,0,54,0,0,0,71,0,201,0,0,0,0,0,47,0,13,0,94,0,229,0,6,0,59,0,123,0,138,0,146,0,236,0,160,0,21,0,0,0,0,0,155,0,207,0,168,0,68,0,133,0,55,0,90,0,194,0,205,0,162,0,223,0,76,0,0,0,98,0,194,0,17,0,49,0,170,0,244,0,111,0,3,0,129,0,219,0,0,0,162,0,0,0,4,0,0,0,52,0,107,0,70,0,0,0,181,0,0,0,0,0,77,0,30,0,221,0,34,0,78,0,164,0,199,0,186,0,0,0,0,0,96,0,21,0,234,0,0,0,89,0,233,0,6,0,12,0,108,0,176,0,70,0,120,0,20,0,28,0,31,0,204,0,242,0,245,0,43,0,229,0,19,0,119,0,93,0,93,0,40,0,141,0,88,0,0,0,214,0,128,0,190,0,0,0,88,0,0,0,254,0,52,0,107,0,222,0,233,0,107,0,156,0,156,0,0,0,87,0,255,0,0,0,0,0,0,0,143,0,231,0,19,0,103,0,158,0,59,0,154,0,237,0,86,0,130,0,189,0,44,0,28,0,36,0,209,0,0,0,137,0,23,0,6,0,62,0,0,0,75,0,56,0,0,0,36,0,169,0,230,0,0,0,233,0,243,0,242,0,0,0,153,0,5,0,100,0,224,0,111,0,153,0,0,0,92,0,237,0,0,0,156,0,180,0,184,0,28,0,46,0,148,0,0,0,0,0,0,0,171,0,156,0,40,0,201,0,0,0,223,0,142,0,7,0,64,0,62,0,89,0,9,0,0,0,141,0,158,0,68,0,0,0,155,0,205,0,107,0,165,0,159,0,214,0,129,0,0,0,25,0,176,0,83,0,92,0,0,0,110,0,213,0,0,0,0,0,186,0,90,0,0,0,145,0,58,0,255,0,226,0,50,0,5,0,0,0,145,0,193,0,222,0,114,0,52,0,0,0,243,0,0,0,63,0,234,0,156,0,63,0,0,0,101,0,0,0,0,0,105,0,245,0,114,0,187,0,226,0,2,0,12,0,138,0,53,0,128,0,41,0,111,0,0,0,166,0,3,0,39,0,31,0,0,0,0,0,105,0,91,0,77,0,238,0,84,0,0,0,229,0,118,0,20,0,214,0,118,0,249,0,36,0,112,0,93,0,111,0,178,0,234,0,103,0,72,0,0,0,91,0,88,0,0,0,184,0,73,0,246,0,242,0,25,0);
signal scenario_full  : scenario_type := (221,31,242,31,181,31,153,31,31,31,88,31,88,30,101,31,53,31,53,30,45,31,166,31,247,31,202,31,223,31,81,31,94,31,94,30,70,31,139,31,139,30,139,29,170,31,104,31,253,31,253,30,183,31,235,31,242,31,242,30,52,31,115,31,127,31,209,31,123,31,94,31,50,31,50,30,78,31,50,31,227,31,210,31,215,31,38,31,95,31,166,31,7,31,77,31,120,31,106,31,196,31,91,31,87,31,95,31,127,31,244,31,216,31,98,31,40,31,40,30,40,29,43,31,107,31,26,31,79,31,114,31,185,31,185,30,167,31,167,30,73,31,207,31,167,31,44,31,120,31,75,31,127,31,219,31,216,31,122,31,42,31,183,31,183,30,214,31,214,30,214,29,207,31,138,31,138,30,20,31,42,31,109,31,167,31,255,31,216,31,216,30,119,31,23,31,71,31,51,31,199,31,105,31,254,31,131,31,123,31,123,30,61,31,61,30,236,31,149,31,1,31,69,31,5,31,90,31,176,31,63,31,76,31,76,30,12,31,12,30,121,31,200,31,200,30,89,31,161,31,161,30,161,29,246,31,102,31,102,30,11,31,191,31,34,31,242,31,54,31,13,31,102,31,125,31,125,30,173,31,123,31,72,31,72,30,135,31,196,31,1,31,242,31,26,31,26,30,175,31,45,31,227,31,245,31,245,30,140,31,193,31,236,31,180,31,31,31,185,31,185,30,10,31,52,31,52,30,67,31,214,31,54,31,253,31,67,31,67,30,113,31,186,31,122,31,122,30,46,31,180,31,61,31,142,31,250,31,158,31,129,31,131,31,131,30,131,29,131,28,116,31,86,31,86,30,98,31,98,30,46,31,70,31,55,31,168,31,144,31,144,30,205,31,85,31,85,30,173,31,110,31,110,30,216,31,54,31,14,31,165,31,8,31,249,31,252,31,70,31,134,31,34,31,44,31,106,31,185,31,185,30,242,31,144,31,126,31,56,31,56,30,56,29,127,31,126,31,179,31,215,31,161,31,161,30,174,31,80,31,226,31,134,31,168,31,168,30,63,31,98,31,98,30,77,31,77,30,204,31,13,31,13,30,13,29,52,31,195,31,66,31,11,31,64,31,64,30,130,31,130,30,42,31,139,31,157,31,48,31,90,31,176,31,191,31,191,30,87,31,20,31,78,31,33,31,83,31,133,31,230,31,123,31,118,31,203,31,81,31,25,31,105,31,105,30,105,29,7,31,36,31,142,31,142,30,10,31,181,31,108,31,65,31,60,31,60,30,209,31,77,31,52,31,199,31,186,31,186,30,141,31,48,31,81,31,81,30,196,31,196,30,196,29,101,31,66,31,152,31,100,31,11,31,143,31,132,31,132,30,246,31,179,31,179,30,236,31,236,30,131,31,206,31,206,30,6,31,6,30,190,31,190,30,136,31,213,31,213,30,82,31,100,31,100,30,32,31,32,30,252,31,252,30,159,31,124,31,118,31,152,31,249,31,78,31,78,30,255,31,144,31,255,31,200,31,20,31,41,31,226,31,106,31,253,31,147,31,75,31,75,30,2,31,58,31,58,30,69,31,69,30,69,29,17,31,173,31,177,31,177,30,177,29,63,31,182,31,252,31,213,31,87,31,93,31,130,31,91,31,91,30,135,31,135,30,157,31,149,31,149,30,150,31,150,30,192,31,192,30,192,29,3,31,113,31,178,31,178,30,21,31,202,31,194,31,95,31,23,31,220,31,196,31,196,30,30,31,30,30,177,31,86,31,86,31,208,31,234,31,234,30,128,31,67,31,232,31,122,31,111,31,253,31,252,31,45,31,201,31,201,30,151,31,229,31,165,31,25,31,174,31,27,31,244,31,238,31,238,30,238,29,41,31,184,31,59,31,27,31,78,31,147,31,107,31,107,30,164,31,164,30,182,31,9,31,67,31,100,31,126,31,126,30,176,31,176,30,88,31,10,31,15,31,164,31,247,31,191,31,191,30,191,29,252,31,127,31,189,31,65,31,193,31,116,31,19,31,17,31,235,31,228,31,235,31,4,31,34,31,128,31,228,31,108,31,123,31,116,31,58,31,123,31,241,31,184,31,113,31,169,31,199,31,22,31,114,31,114,30,114,29,114,28,228,31,245,31,78,31,78,30,104,31,121,31,226,31,234,31,223,31,197,31,44,31,202,31,220,31,87,31,145,31,199,31,199,30,199,29,36,31,88,31,217,31,249,31,98,31,98,30,98,29,142,31,220,31,203,31,85,31,92,31,79,31,79,30,79,29,103,31,2,31,171,31,171,30,226,31,60,31,27,31,31,31,12,31,12,30,194,31,246,31,246,30,151,31,22,31,199,31,189,31,219,31,39,31,39,30,255,31,122,31,122,30,117,31,4,31,86,31,114,31,114,30,114,29,229,31,85,31,97,31,97,30,149,31,164,31,198,31,1,31,189,31,170,31,43,31,219,31,145,31,53,31,53,30,229,31,196,31,165,31,155,31,155,30,74,31,156,31,227,31,227,30,231,31,65,31,242,31,242,30,75,31,191,31,135,31,148,31,148,30,78,31,78,30,23,31,23,30,87,31,29,31,29,30,29,29,51,31,1,31,33,31,147,31,147,30,177,31,224,31,175,31,22,31,22,30,237,31,68,31,201,31,201,30,161,31,161,30,161,29,86,31,86,30,123,31,123,30,104,31,104,30,104,31,104,30,70,31,129,31,129,30,236,31,236,30,236,29,97,31,146,31,72,31,148,31,148,30,137,31,86,31,183,31,183,30,183,29,76,31,99,31,125,31,96,31,161,31,161,30,157,31,247,31,39,31,86,31,84,31,178,31,98,31,237,31,71,31,51,31,51,30,178,31,226,31,253,31,38,31,38,30,175,31,39,31,154,31,232,31,53,31,171,31,38,31,241,31,166,31,142,31,144,31,250,31,17,31,17,30,227,31,211,31,211,30,153,31,103,31,89,31,70,31,49,31,49,30,167,31,106,31,106,30,106,29,106,28,237,31,212,31,97,31,218,31,218,30,218,29,75,31,75,30,75,29,75,28,75,27,214,31,214,30,53,31,115,31,115,30,98,31,174,31,14,31,16,31,133,31,60,31,60,30,194,31,29,31,74,31,74,30,40,31,40,30,170,31,129,31,129,30,23,31,170,31,3,31,3,30,136,31,105,31,124,31,54,31,54,30,71,31,201,31,201,30,201,29,47,31,13,31,94,31,229,31,6,31,59,31,123,31,138,31,146,31,236,31,160,31,21,31,21,30,21,29,155,31,207,31,168,31,68,31,133,31,55,31,90,31,194,31,205,31,162,31,223,31,76,31,76,30,98,31,194,31,17,31,49,31,170,31,244,31,111,31,3,31,129,31,219,31,219,30,162,31,162,30,4,31,4,30,52,31,107,31,70,31,70,30,181,31,181,30,181,29,77,31,30,31,221,31,34,31,78,31,164,31,199,31,186,31,186,30,186,29,96,31,21,31,234,31,234,30,89,31,233,31,6,31,12,31,108,31,176,31,70,31,120,31,20,31,28,31,31,31,204,31,242,31,245,31,43,31,229,31,19,31,119,31,93,31,93,31,40,31,141,31,88,31,88,30,214,31,128,31,190,31,190,30,88,31,88,30,254,31,52,31,107,31,222,31,233,31,107,31,156,31,156,31,156,30,87,31,255,31,255,30,255,29,255,28,143,31,231,31,19,31,103,31,158,31,59,31,154,31,237,31,86,31,130,31,189,31,44,31,28,31,36,31,209,31,209,30,137,31,23,31,6,31,62,31,62,30,75,31,56,31,56,30,36,31,169,31,230,31,230,30,233,31,243,31,242,31,242,30,153,31,5,31,100,31,224,31,111,31,153,31,153,30,92,31,237,31,237,30,156,31,180,31,184,31,28,31,46,31,148,31,148,30,148,29,148,28,171,31,156,31,40,31,201,31,201,30,223,31,142,31,7,31,64,31,62,31,89,31,9,31,9,30,141,31,158,31,68,31,68,30,155,31,205,31,107,31,165,31,159,31,214,31,129,31,129,30,25,31,176,31,83,31,92,31,92,30,110,31,213,31,213,30,213,29,186,31,90,31,90,30,145,31,58,31,255,31,226,31,50,31,5,31,5,30,145,31,193,31,222,31,114,31,52,31,52,30,243,31,243,30,63,31,234,31,156,31,63,31,63,30,101,31,101,30,101,29,105,31,245,31,114,31,187,31,226,31,2,31,12,31,138,31,53,31,128,31,41,31,111,31,111,30,166,31,3,31,39,31,31,31,31,30,31,29,105,31,91,31,77,31,238,31,84,31,84,30,229,31,118,31,20,31,214,31,118,31,249,31,36,31,112,31,93,31,111,31,178,31,234,31,103,31,72,31,72,30,91,31,88,31,88,30,184,31,73,31,246,31,242,31,25,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
