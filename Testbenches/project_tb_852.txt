-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 636;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (217,0,87,0,23,0,159,0,182,0,124,0,60,0,0,0,0,0,1,0,0,0,74,0,2,0,0,0,128,0,44,0,143,0,246,0,162,0,47,0,138,0,210,0,0,0,61,0,177,0,33,0,158,0,46,0,0,0,11,0,0,0,123,0,255,0,238,0,64,0,254,0,249,0,230,0,216,0,196,0,0,0,39,0,184,0,7,0,32,0,168,0,70,0,134,0,144,0,0,0,239,0,52,0,0,0,131,0,152,0,177,0,182,0,153,0,4,0,168,0,0,0,57,0,208,0,161,0,177,0,146,0,59,0,0,0,193,0,155,0,0,0,121,0,142,0,102,0,143,0,61,0,81,0,175,0,0,0,85,0,167,0,158,0,65,0,22,0,1,0,184,0,92,0,48,0,177,0,9,0,141,0,7,0,135,0,237,0,89,0,223,0,197,0,0,0,134,0,0,0,246,0,145,0,0,0,0,0,159,0,202,0,62,0,116,0,92,0,204,0,248,0,175,0,0,0,91,0,67,0,0,0,28,0,36,0,0,0,170,0,86,0,27,0,241,0,1,0,58,0,49,0,135,0,43,0,54,0,76,0,140,0,129,0,192,0,176,0,246,0,0,0,0,0,36,0,68,0,0,0,225,0,11,0,0,0,50,0,149,0,0,0,0,0,241,0,34,0,223,0,78,0,65,0,172,0,28,0,122,0,169,0,103,0,0,0,15,0,236,0,243,0,107,0,17,0,10,0,88,0,30,0,0,0,247,0,155,0,238,0,106,0,114,0,249,0,29,0,184,0,119,0,0,0,233,0,103,0,245,0,0,0,0,0,53,0,13,0,237,0,129,0,103,0,194,0,252,0,143,0,176,0,0,0,107,0,66,0,0,0,250,0,47,0,48,0,165,0,135,0,230,0,77,0,10,0,209,0,27,0,170,0,44,0,14,0,33,0,215,0,238,0,188,0,209,0,0,0,56,0,86,0,180,0,73,0,0,0,218,0,191,0,238,0,164,0,64,0,122,0,0,0,110,0,94,0,8,0,178,0,160,0,91,0,160,0,107,0,42,0,0,0,29,0,117,0,192,0,6,0,30,0,0,0,232,0,92,0,21,0,78,0,218,0,0,0,31,0,202,0,169,0,208,0,135,0,49,0,0,0,74,0,12,0,19,0,0,0,225,0,128,0,43,0,71,0,244,0,211,0,8,0,0,0,195,0,191,0,224,0,76,0,52,0,46,0,89,0,0,0,41,0,227,0,0,0,0,0,12,0,95,0,225,0,185,0,13,0,220,0,202,0,204,0,216,0,24,0,171,0,25,0,110,0,143,0,86,0,185,0,0,0,0,0,30,0,172,0,0,0,62,0,30,0,170,0,0,0,0,0,73,0,0,0,120,0,145,0,190,0,0,0,220,0,39,0,49,0,0,0,243,0,51,0,121,0,140,0,255,0,248,0,0,0,135,0,227,0,254,0,240,0,0,0,58,0,65,0,67,0,140,0,231,0,205,0,195,0,114,0,194,0,0,0,169,0,233,0,34,0,71,0,77,0,79,0,0,0,42,0,29,0,36,0,0,0,123,0,9,0,113,0,225,0,175,0,111,0,155,0,188,0,166,0,78,0,9,0,55,0,151,0,162,0,61,0,199,0,174,0,57,0,11,0,240,0,0,0,131,0,5,0,24,0,56,0,209,0,150,0,73,0,27,0,3,0,0,0,163,0,0,0,132,0,199,0,0,0,146,0,0,0,13,0,0,0,136,0,152,0,97,0,240,0,41,0,186,0,60,0,201,0,196,0,168,0,65,0,73,0,170,0,0,0,165,0,63,0,44,0,195,0,156,0,117,0,0,0,191,0,0,0,0,0,0,0,2,0,62,0,129,0,140,0,155,0,215,0,158,0,249,0,154,0,164,0,171,0,174,0,55,0,49,0,23,0,252,0,122,0,61,0,37,0,0,0,0,0,0,0,14,0,113,0,27,0,0,0,0,0,0,0,7,0,17,0,126,0,217,0,36,0,116,0,23,0,69,0,0,0,137,0,237,0,107,0,0,0,77,0,150,0,129,0,117,0,98,0,108,0,115,0,0,0,0,0,77,0,148,0,107,0,179,0,225,0,66,0,197,0,70,0,240,0,174,0,0,0,117,0,35,0,223,0,61,0,0,0,225,0,32,0,184,0,18,0,0,0,0,0,39,0,125,0,16,0,157,0,12,0,132,0,0,0,147,0,12,0,89,0,131,0,122,0,35,0,0,0,209,0,37,0,227,0,0,0,64,0,89,0,161,0,211,0,248,0,45,0,147,0,111,0,136,0,0,0,111,0,33,0,49,0,189,0,20,0,167,0,0,0,66,0,0,0,191,0,197,0,16,0,191,0,232,0,25,0,190,0,201,0,0,0,149,0,0,0,80,0,90,0,0,0,0,0,25,0,5,0,223,0,75,0,5,0,178,0,32,0,203,0,130,0,175,0,0,0,0,0,160,0,235,0,220,0,152,0,0,0,65,0,234,0,181,0,96,0,0,0,128,0,140,0,237,0,0,0,59,0,0,0,0,0,0,0,252,0,14,0,130,0,3,0,219,0,48,0,25,0,12,0,6,0,137,0,75,0,244,0,222,0,0,0,193,0,222,0,231,0,131,0,0,0,0,0,189,0,93,0,147,0,37,0,97,0,144,0,139,0,87,0,93,0,152,0,0,0,37,0,156,0,0,0,116,0,0,0,10,0,204,0,0,0,232,0,186,0,108,0,0,0,188,0,152,0,23,0,253,0,70,0,146,0,0,0,243,0,0,0,211,0,125,0,94,0,253,0,206,0,117,0,0,0,113,0,0,0,110,0,130,0,229,0,242,0,61,0,230,0,78,0,0,0);
signal scenario_full  : scenario_type := (217,31,87,31,23,31,159,31,182,31,124,31,60,31,60,30,60,29,1,31,1,30,74,31,2,31,2,30,128,31,44,31,143,31,246,31,162,31,47,31,138,31,210,31,210,30,61,31,177,31,33,31,158,31,46,31,46,30,11,31,11,30,123,31,255,31,238,31,64,31,254,31,249,31,230,31,216,31,196,31,196,30,39,31,184,31,7,31,32,31,168,31,70,31,134,31,144,31,144,30,239,31,52,31,52,30,131,31,152,31,177,31,182,31,153,31,4,31,168,31,168,30,57,31,208,31,161,31,177,31,146,31,59,31,59,30,193,31,155,31,155,30,121,31,142,31,102,31,143,31,61,31,81,31,175,31,175,30,85,31,167,31,158,31,65,31,22,31,1,31,184,31,92,31,48,31,177,31,9,31,141,31,7,31,135,31,237,31,89,31,223,31,197,31,197,30,134,31,134,30,246,31,145,31,145,30,145,29,159,31,202,31,62,31,116,31,92,31,204,31,248,31,175,31,175,30,91,31,67,31,67,30,28,31,36,31,36,30,170,31,86,31,27,31,241,31,1,31,58,31,49,31,135,31,43,31,54,31,76,31,140,31,129,31,192,31,176,31,246,31,246,30,246,29,36,31,68,31,68,30,225,31,11,31,11,30,50,31,149,31,149,30,149,29,241,31,34,31,223,31,78,31,65,31,172,31,28,31,122,31,169,31,103,31,103,30,15,31,236,31,243,31,107,31,17,31,10,31,88,31,30,31,30,30,247,31,155,31,238,31,106,31,114,31,249,31,29,31,184,31,119,31,119,30,233,31,103,31,245,31,245,30,245,29,53,31,13,31,237,31,129,31,103,31,194,31,252,31,143,31,176,31,176,30,107,31,66,31,66,30,250,31,47,31,48,31,165,31,135,31,230,31,77,31,10,31,209,31,27,31,170,31,44,31,14,31,33,31,215,31,238,31,188,31,209,31,209,30,56,31,86,31,180,31,73,31,73,30,218,31,191,31,238,31,164,31,64,31,122,31,122,30,110,31,94,31,8,31,178,31,160,31,91,31,160,31,107,31,42,31,42,30,29,31,117,31,192,31,6,31,30,31,30,30,232,31,92,31,21,31,78,31,218,31,218,30,31,31,202,31,169,31,208,31,135,31,49,31,49,30,74,31,12,31,19,31,19,30,225,31,128,31,43,31,71,31,244,31,211,31,8,31,8,30,195,31,191,31,224,31,76,31,52,31,46,31,89,31,89,30,41,31,227,31,227,30,227,29,12,31,95,31,225,31,185,31,13,31,220,31,202,31,204,31,216,31,24,31,171,31,25,31,110,31,143,31,86,31,185,31,185,30,185,29,30,31,172,31,172,30,62,31,30,31,170,31,170,30,170,29,73,31,73,30,120,31,145,31,190,31,190,30,220,31,39,31,49,31,49,30,243,31,51,31,121,31,140,31,255,31,248,31,248,30,135,31,227,31,254,31,240,31,240,30,58,31,65,31,67,31,140,31,231,31,205,31,195,31,114,31,194,31,194,30,169,31,233,31,34,31,71,31,77,31,79,31,79,30,42,31,29,31,36,31,36,30,123,31,9,31,113,31,225,31,175,31,111,31,155,31,188,31,166,31,78,31,9,31,55,31,151,31,162,31,61,31,199,31,174,31,57,31,11,31,240,31,240,30,131,31,5,31,24,31,56,31,209,31,150,31,73,31,27,31,3,31,3,30,163,31,163,30,132,31,199,31,199,30,146,31,146,30,13,31,13,30,136,31,152,31,97,31,240,31,41,31,186,31,60,31,201,31,196,31,168,31,65,31,73,31,170,31,170,30,165,31,63,31,44,31,195,31,156,31,117,31,117,30,191,31,191,30,191,29,191,28,2,31,62,31,129,31,140,31,155,31,215,31,158,31,249,31,154,31,164,31,171,31,174,31,55,31,49,31,23,31,252,31,122,31,61,31,37,31,37,30,37,29,37,28,14,31,113,31,27,31,27,30,27,29,27,28,7,31,17,31,126,31,217,31,36,31,116,31,23,31,69,31,69,30,137,31,237,31,107,31,107,30,77,31,150,31,129,31,117,31,98,31,108,31,115,31,115,30,115,29,77,31,148,31,107,31,179,31,225,31,66,31,197,31,70,31,240,31,174,31,174,30,117,31,35,31,223,31,61,31,61,30,225,31,32,31,184,31,18,31,18,30,18,29,39,31,125,31,16,31,157,31,12,31,132,31,132,30,147,31,12,31,89,31,131,31,122,31,35,31,35,30,209,31,37,31,227,31,227,30,64,31,89,31,161,31,211,31,248,31,45,31,147,31,111,31,136,31,136,30,111,31,33,31,49,31,189,31,20,31,167,31,167,30,66,31,66,30,191,31,197,31,16,31,191,31,232,31,25,31,190,31,201,31,201,30,149,31,149,30,80,31,90,31,90,30,90,29,25,31,5,31,223,31,75,31,5,31,178,31,32,31,203,31,130,31,175,31,175,30,175,29,160,31,235,31,220,31,152,31,152,30,65,31,234,31,181,31,96,31,96,30,128,31,140,31,237,31,237,30,59,31,59,30,59,29,59,28,252,31,14,31,130,31,3,31,219,31,48,31,25,31,12,31,6,31,137,31,75,31,244,31,222,31,222,30,193,31,222,31,231,31,131,31,131,30,131,29,189,31,93,31,147,31,37,31,97,31,144,31,139,31,87,31,93,31,152,31,152,30,37,31,156,31,156,30,116,31,116,30,10,31,204,31,204,30,232,31,186,31,108,31,108,30,188,31,152,31,23,31,253,31,70,31,146,31,146,30,243,31,243,30,211,31,125,31,94,31,253,31,206,31,117,31,117,30,113,31,113,30,110,31,130,31,229,31,242,31,61,31,230,31,78,31,78,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
