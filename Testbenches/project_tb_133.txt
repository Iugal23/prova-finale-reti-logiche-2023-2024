-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 379;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (56,0,32,0,16,0,30,0,63,0,0,0,92,0,84,0,116,0,168,0,143,0,224,0,92,0,204,0,43,0,0,0,46,0,210,0,0,0,189,0,253,0,0,0,98,0,219,0,189,0,0,0,0,0,0,0,72,0,15,0,0,0,152,0,213,0,77,0,143,0,32,0,173,0,255,0,98,0,6,0,81,0,93,0,99,0,241,0,112,0,135,0,110,0,151,0,0,0,0,0,46,0,186,0,0,0,128,0,0,0,218,0,0,0,21,0,0,0,62,0,0,0,22,0,147,0,0,0,161,0,117,0,29,0,231,0,0,0,158,0,208,0,193,0,138,0,30,0,0,0,192,0,26,0,0,0,220,0,105,0,27,0,214,0,63,0,165,0,198,0,39,0,5,0,126,0,0,0,130,0,245,0,193,0,0,0,10,0,0,0,202,0,13,0,168,0,0,0,0,0,116,0,177,0,195,0,137,0,4,0,14,0,92,0,0,0,0,0,26,0,0,0,12,0,146,0,80,0,18,0,1,0,8,0,0,0,32,0,22,0,16,0,35,0,230,0,128,0,214,0,202,0,170,0,166,0,207,0,45,0,189,0,96,0,183,0,102,0,231,0,49,0,0,0,234,0,174,0,191,0,252,0,41,0,184,0,230,0,191,0,0,0,0,0,2,0,13,0,69,0,39,0,0,0,228,0,68,0,51,0,48,0,50,0,0,0,111,0,0,0,145,0,137,0,0,0,227,0,104,0,71,0,14,0,116,0,0,0,190,0,141,0,66,0,144,0,224,0,0,0,90,0,117,0,195,0,0,0,0,0,138,0,0,0,115,0,0,0,230,0,0,0,103,0,208,0,0,0,156,0,84,0,0,0,0,0,0,0,154,0,201,0,136,0,147,0,0,0,141,0,237,0,83,0,182,0,253,0,197,0,0,0,0,0,26,0,42,0,199,0,192,0,221,0,0,0,91,0,86,0,31,0,233,0,228,0,0,0,0,0,188,0,235,0,210,0,238,0,4,0,0,0,114,0,46,0,171,0,139,0,24,0,94,0,8,0,182,0,0,0,32,0,4,0,34,0,169,0,73,0,146,0,105,0,0,0,0,0,0,0,117,0,0,0,244,0,219,0,232,0,0,0,0,0,0,0,0,0,0,0,226,0,236,0,0,0,201,0,86,0,215,0,164,0,95,0,155,0,164,0,0,0,89,0,86,0,27,0,32,0,90,0,0,0,0,0,240,0,0,0,0,0,137,0,0,0,0,0,205,0,158,0,168,0,109,0,206,0,151,0,30,0,102,0,240,0,108,0,213,0,135,0,129,0,233,0,0,0,93,0,46,0,79,0,33,0,0,0,105,0,0,0,212,0,194,0,56,0,0,0,0,0,40,0,0,0,1,0,0,0,75,0,205,0,52,0,169,0,183,0,0,0,89,0,130,0,75,0,161,0,89,0,0,0,99,0,148,0,65,0,81,0,25,0,2,0,166,0,0,0,0,0,221,0,11,0,0,0,27,0,214,0,0,0,0,0,58,0,145,0,83,0,0,0,234,0,115,0,89,0,155,0,0,0,5,0,203,0,178,0,249,0,31,0,15,0,0,0,244,0,0,0,0,0,54,0,76,0,26,0,158,0,130,0,1,0,169,0,109,0,230,0,22,0,0,0,81,0,233,0,0,0,203,0,130,0,150,0,5,0,0,0,146,0,58,0,246,0);
signal scenario_full  : scenario_type := (56,31,32,31,16,31,30,31,63,31,63,30,92,31,84,31,116,31,168,31,143,31,224,31,92,31,204,31,43,31,43,30,46,31,210,31,210,30,189,31,253,31,253,30,98,31,219,31,189,31,189,30,189,29,189,28,72,31,15,31,15,30,152,31,213,31,77,31,143,31,32,31,173,31,255,31,98,31,6,31,81,31,93,31,99,31,241,31,112,31,135,31,110,31,151,31,151,30,151,29,46,31,186,31,186,30,128,31,128,30,218,31,218,30,21,31,21,30,62,31,62,30,22,31,147,31,147,30,161,31,117,31,29,31,231,31,231,30,158,31,208,31,193,31,138,31,30,31,30,30,192,31,26,31,26,30,220,31,105,31,27,31,214,31,63,31,165,31,198,31,39,31,5,31,126,31,126,30,130,31,245,31,193,31,193,30,10,31,10,30,202,31,13,31,168,31,168,30,168,29,116,31,177,31,195,31,137,31,4,31,14,31,92,31,92,30,92,29,26,31,26,30,12,31,146,31,80,31,18,31,1,31,8,31,8,30,32,31,22,31,16,31,35,31,230,31,128,31,214,31,202,31,170,31,166,31,207,31,45,31,189,31,96,31,183,31,102,31,231,31,49,31,49,30,234,31,174,31,191,31,252,31,41,31,184,31,230,31,191,31,191,30,191,29,2,31,13,31,69,31,39,31,39,30,228,31,68,31,51,31,48,31,50,31,50,30,111,31,111,30,145,31,137,31,137,30,227,31,104,31,71,31,14,31,116,31,116,30,190,31,141,31,66,31,144,31,224,31,224,30,90,31,117,31,195,31,195,30,195,29,138,31,138,30,115,31,115,30,230,31,230,30,103,31,208,31,208,30,156,31,84,31,84,30,84,29,84,28,154,31,201,31,136,31,147,31,147,30,141,31,237,31,83,31,182,31,253,31,197,31,197,30,197,29,26,31,42,31,199,31,192,31,221,31,221,30,91,31,86,31,31,31,233,31,228,31,228,30,228,29,188,31,235,31,210,31,238,31,4,31,4,30,114,31,46,31,171,31,139,31,24,31,94,31,8,31,182,31,182,30,32,31,4,31,34,31,169,31,73,31,146,31,105,31,105,30,105,29,105,28,117,31,117,30,244,31,219,31,232,31,232,30,232,29,232,28,232,27,232,26,226,31,236,31,236,30,201,31,86,31,215,31,164,31,95,31,155,31,164,31,164,30,89,31,86,31,27,31,32,31,90,31,90,30,90,29,240,31,240,30,240,29,137,31,137,30,137,29,205,31,158,31,168,31,109,31,206,31,151,31,30,31,102,31,240,31,108,31,213,31,135,31,129,31,233,31,233,30,93,31,46,31,79,31,33,31,33,30,105,31,105,30,212,31,194,31,56,31,56,30,56,29,40,31,40,30,1,31,1,30,75,31,205,31,52,31,169,31,183,31,183,30,89,31,130,31,75,31,161,31,89,31,89,30,99,31,148,31,65,31,81,31,25,31,2,31,166,31,166,30,166,29,221,31,11,31,11,30,27,31,214,31,214,30,214,29,58,31,145,31,83,31,83,30,234,31,115,31,89,31,155,31,155,30,5,31,203,31,178,31,249,31,31,31,15,31,15,30,244,31,244,30,244,29,54,31,76,31,26,31,158,31,130,31,1,31,169,31,109,31,230,31,22,31,22,30,81,31,233,31,233,30,203,31,130,31,150,31,5,31,5,30,146,31,58,31,246,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
