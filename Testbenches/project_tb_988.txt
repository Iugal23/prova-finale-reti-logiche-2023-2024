-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 676;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (127,0,90,0,36,0,0,0,67,0,62,0,101,0,0,0,110,0,184,0,156,0,247,0,0,0,106,0,72,0,127,0,42,0,0,0,41,0,244,0,0,0,155,0,236,0,178,0,12,0,119,0,58,0,245,0,208,0,146,0,0,0,0,0,0,0,17,0,57,0,212,0,202,0,83,0,224,0,98,0,228,0,246,0,198,0,16,0,0,0,9,0,0,0,87,0,192,0,163,0,32,0,239,0,7,0,0,0,254,0,252,0,7,0,39,0,82,0,45,0,18,0,105,0,187,0,16,0,195,0,212,0,0,0,60,0,178,0,46,0,59,0,83,0,149,0,115,0,94,0,213,0,76,0,23,0,6,0,0,0,226,0,90,0,146,0,0,0,70,0,22,0,0,0,0,0,109,0,206,0,193,0,210,0,124,0,20,0,253,0,186,0,0,0,255,0,238,0,98,0,0,0,41,0,170,0,185,0,33,0,0,0,0,0,14,0,78,0,0,0,22,0,59,0,55,0,253,0,235,0,0,0,218,0,193,0,235,0,185,0,166,0,46,0,202,0,11,0,135,0,237,0,0,0,211,0,0,0,0,0,184,0,200,0,90,0,0,0,87,0,0,0,18,0,189,0,0,0,199,0,206,0,172,0,198,0,126,0,0,0,237,0,0,0,19,0,219,0,22,0,0,0,2,0,183,0,202,0,243,0,188,0,164,0,81,0,251,0,186,0,0,0,60,0,185,0,42,0,0,0,155,0,55,0,198,0,48,0,191,0,153,0,0,0,36,0,28,0,219,0,57,0,78,0,198,0,77,0,3,0,249,0,230,0,0,0,219,0,137,0,8,0,24,0,235,0,120,0,0,0,72,0,86,0,54,0,125,0,19,0,38,0,50,0,188,0,0,0,51,0,132,0,218,0,40,0,15,0,0,0,73,0,0,0,0,0,46,0,155,0,0,0,81,0,90,0,143,0,0,0,224,0,186,0,251,0,0,0,125,0,4,0,0,0,227,0,235,0,131,0,0,0,99,0,46,0,117,0,0,0,241,0,172,0,0,0,48,0,205,0,24,0,219,0,60,0,68,0,77,0,28,0,146,0,184,0,224,0,251,0,0,0,0,0,153,0,196,0,0,0,228,0,18,0,188,0,230,0,154,0,104,0,172,0,46,0,196,0,190,0,73,0,0,0,0,0,0,0,83,0,0,0,0,0,0,0,0,0,56,0,25,0,0,0,81,0,107,0,7,0,178,0,144,0,0,0,0,0,107,0,210,0,153,0,68,0,63,0,49,0,245,0,113,0,65,0,220,0,28,0,199,0,124,0,185,0,77,0,147,0,229,0,57,0,0,0,59,0,0,0,182,0,0,0,247,0,213,0,245,0,68,0,87,0,244,0,205,0,122,0,0,0,102,0,160,0,204,0,79,0,72,0,212,0,108,0,120,0,0,0,171,0,222,0,169,0,204,0,200,0,244,0,201,0,36,0,112,0,0,0,178,0,172,0,0,0,0,0,248,0,151,0,19,0,135,0,0,0,236,0,0,0,0,0,0,0,60,0,207,0,41,0,130,0,0,0,249,0,0,0,0,0,134,0,243,0,147,0,239,0,207,0,219,0,101,0,27,0,0,0,179,0,146,0,0,0,0,0,169,0,64,0,117,0,223,0,204,0,250,0,70,0,0,0,192,0,38,0,0,0,129,0,0,0,214,0,0,0,0,0,84,0,115,0,92,0,77,0,66,0,183,0,0,0,216,0,85,0,250,0,0,0,63,0,204,0,237,0,120,0,70,0,0,0,0,0,89,0,80,0,189,0,128,0,243,0,0,0,61,0,119,0,4,0,210,0,158,0,174,0,74,0,145,0,184,0,150,0,246,0,0,0,0,0,255,0,55,0,0,0,253,0,179,0,64,0,23,0,84,0,11,0,7,0,32,0,63,0,0,0,123,0,179,0,243,0,67,0,109,0,33,0,68,0,106,0,86,0,0,0,165,0,22,0,36,0,218,0,114,0,228,0,31,0,38,0,0,0,29,0,0,0,0,0,0,0,252,0,0,0,158,0,0,0,0,0,229,0,73,0,50,0,194,0,243,0,236,0,209,0,57,0,134,0,51,0,10,0,2,0,77,0,128,0,249,0,163,0,131,0,239,0,71,0,144,0,0,0,0,0,126,0,240,0,241,0,89,0,14,0,123,0,235,0,0,0,147,0,97,0,115,0,101,0,36,0,125,0,94,0,6,0,211,0,0,0,82,0,72,0,104,0,10,0,40,0,222,0,216,0,97,0,55,0,239,0,0,0,114,0,13,0,203,0,68,0,0,0,246,0,195,0,67,0,104,0,0,0,77,0,96,0,167,0,109,0,16,0,151,0,124,0,38,0,225,0,169,0,115,0,164,0,109,0,69,0,119,0,0,0,153,0,70,0,7,0,249,0,18,0,0,0,61,0,108,0,42,0,173,0,154,0,166,0,99,0,170,0,107,0,185,0,155,0,79,0,13,0,0,0,222,0,108,0,0,0,0,0,148,0,105,0,200,0,233,0,176,0,86,0,86,0,102,0,0,0,0,0,60,0,158,0,148,0,232,0,187,0,185,0,0,0,242,0,0,0,0,0,125,0,0,0,167,0,17,0,0,0,223,0,2,0,254,0,0,0,77,0,0,0,160,0,0,0,204,0,232,0,138,0,146,0,73,0,184,0,166,0,0,0,0,0,198,0,207,0,0,0,142,0,0,0,0,0,0,0,20,0,187,0,0,0,135,0,223,0,0,0,45,0,117,0,4,0,212,0,31,0,39,0,122,0,222,0,144,0,48,0,200,0,136,0,171,0,17,0,181,0,248,0,93,0,49,0,143,0,50,0,146,0,0,0,186,0,244,0,57,0,226,0,0,0,116,0,85,0,132,0,0,0,75,0,47,0,88,0,0,0,24,0,97,0,10,0,79,0,103,0,0,0,163,0,121,0,127,0,25,0,70,0,69,0,0,0,0,0,38,0,104,0,218,0,166,0,107,0,22,0,30,0,27,0,0,0,143,0,139,0,130,0,39,0);
signal scenario_full  : scenario_type := (127,31,90,31,36,31,36,30,67,31,62,31,101,31,101,30,110,31,184,31,156,31,247,31,247,30,106,31,72,31,127,31,42,31,42,30,41,31,244,31,244,30,155,31,236,31,178,31,12,31,119,31,58,31,245,31,208,31,146,31,146,30,146,29,146,28,17,31,57,31,212,31,202,31,83,31,224,31,98,31,228,31,246,31,198,31,16,31,16,30,9,31,9,30,87,31,192,31,163,31,32,31,239,31,7,31,7,30,254,31,252,31,7,31,39,31,82,31,45,31,18,31,105,31,187,31,16,31,195,31,212,31,212,30,60,31,178,31,46,31,59,31,83,31,149,31,115,31,94,31,213,31,76,31,23,31,6,31,6,30,226,31,90,31,146,31,146,30,70,31,22,31,22,30,22,29,109,31,206,31,193,31,210,31,124,31,20,31,253,31,186,31,186,30,255,31,238,31,98,31,98,30,41,31,170,31,185,31,33,31,33,30,33,29,14,31,78,31,78,30,22,31,59,31,55,31,253,31,235,31,235,30,218,31,193,31,235,31,185,31,166,31,46,31,202,31,11,31,135,31,237,31,237,30,211,31,211,30,211,29,184,31,200,31,90,31,90,30,87,31,87,30,18,31,189,31,189,30,199,31,206,31,172,31,198,31,126,31,126,30,237,31,237,30,19,31,219,31,22,31,22,30,2,31,183,31,202,31,243,31,188,31,164,31,81,31,251,31,186,31,186,30,60,31,185,31,42,31,42,30,155,31,55,31,198,31,48,31,191,31,153,31,153,30,36,31,28,31,219,31,57,31,78,31,198,31,77,31,3,31,249,31,230,31,230,30,219,31,137,31,8,31,24,31,235,31,120,31,120,30,72,31,86,31,54,31,125,31,19,31,38,31,50,31,188,31,188,30,51,31,132,31,218,31,40,31,15,31,15,30,73,31,73,30,73,29,46,31,155,31,155,30,81,31,90,31,143,31,143,30,224,31,186,31,251,31,251,30,125,31,4,31,4,30,227,31,235,31,131,31,131,30,99,31,46,31,117,31,117,30,241,31,172,31,172,30,48,31,205,31,24,31,219,31,60,31,68,31,77,31,28,31,146,31,184,31,224,31,251,31,251,30,251,29,153,31,196,31,196,30,228,31,18,31,188,31,230,31,154,31,104,31,172,31,46,31,196,31,190,31,73,31,73,30,73,29,73,28,83,31,83,30,83,29,83,28,83,27,56,31,25,31,25,30,81,31,107,31,7,31,178,31,144,31,144,30,144,29,107,31,210,31,153,31,68,31,63,31,49,31,245,31,113,31,65,31,220,31,28,31,199,31,124,31,185,31,77,31,147,31,229,31,57,31,57,30,59,31,59,30,182,31,182,30,247,31,213,31,245,31,68,31,87,31,244,31,205,31,122,31,122,30,102,31,160,31,204,31,79,31,72,31,212,31,108,31,120,31,120,30,171,31,222,31,169,31,204,31,200,31,244,31,201,31,36,31,112,31,112,30,178,31,172,31,172,30,172,29,248,31,151,31,19,31,135,31,135,30,236,31,236,30,236,29,236,28,60,31,207,31,41,31,130,31,130,30,249,31,249,30,249,29,134,31,243,31,147,31,239,31,207,31,219,31,101,31,27,31,27,30,179,31,146,31,146,30,146,29,169,31,64,31,117,31,223,31,204,31,250,31,70,31,70,30,192,31,38,31,38,30,129,31,129,30,214,31,214,30,214,29,84,31,115,31,92,31,77,31,66,31,183,31,183,30,216,31,85,31,250,31,250,30,63,31,204,31,237,31,120,31,70,31,70,30,70,29,89,31,80,31,189,31,128,31,243,31,243,30,61,31,119,31,4,31,210,31,158,31,174,31,74,31,145,31,184,31,150,31,246,31,246,30,246,29,255,31,55,31,55,30,253,31,179,31,64,31,23,31,84,31,11,31,7,31,32,31,63,31,63,30,123,31,179,31,243,31,67,31,109,31,33,31,68,31,106,31,86,31,86,30,165,31,22,31,36,31,218,31,114,31,228,31,31,31,38,31,38,30,29,31,29,30,29,29,29,28,252,31,252,30,158,31,158,30,158,29,229,31,73,31,50,31,194,31,243,31,236,31,209,31,57,31,134,31,51,31,10,31,2,31,77,31,128,31,249,31,163,31,131,31,239,31,71,31,144,31,144,30,144,29,126,31,240,31,241,31,89,31,14,31,123,31,235,31,235,30,147,31,97,31,115,31,101,31,36,31,125,31,94,31,6,31,211,31,211,30,82,31,72,31,104,31,10,31,40,31,222,31,216,31,97,31,55,31,239,31,239,30,114,31,13,31,203,31,68,31,68,30,246,31,195,31,67,31,104,31,104,30,77,31,96,31,167,31,109,31,16,31,151,31,124,31,38,31,225,31,169,31,115,31,164,31,109,31,69,31,119,31,119,30,153,31,70,31,7,31,249,31,18,31,18,30,61,31,108,31,42,31,173,31,154,31,166,31,99,31,170,31,107,31,185,31,155,31,79,31,13,31,13,30,222,31,108,31,108,30,108,29,148,31,105,31,200,31,233,31,176,31,86,31,86,31,102,31,102,30,102,29,60,31,158,31,148,31,232,31,187,31,185,31,185,30,242,31,242,30,242,29,125,31,125,30,167,31,17,31,17,30,223,31,2,31,254,31,254,30,77,31,77,30,160,31,160,30,204,31,232,31,138,31,146,31,73,31,184,31,166,31,166,30,166,29,198,31,207,31,207,30,142,31,142,30,142,29,142,28,20,31,187,31,187,30,135,31,223,31,223,30,45,31,117,31,4,31,212,31,31,31,39,31,122,31,222,31,144,31,48,31,200,31,136,31,171,31,17,31,181,31,248,31,93,31,49,31,143,31,50,31,146,31,146,30,186,31,244,31,57,31,226,31,226,30,116,31,85,31,132,31,132,30,75,31,47,31,88,31,88,30,24,31,97,31,10,31,79,31,103,31,103,30,163,31,121,31,127,31,25,31,70,31,69,31,69,30,69,29,38,31,104,31,218,31,166,31,107,31,22,31,30,31,27,31,27,30,143,31,139,31,130,31,39,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
