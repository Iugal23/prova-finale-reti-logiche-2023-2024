-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 519;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,129,0,173,0,56,0,146,0,200,0,158,0,120,0,0,0,22,0,18,0,110,0,209,0,146,0,0,0,77,0,104,0,253,0,25,0,0,0,0,0,0,0,201,0,246,0,174,0,125,0,171,0,238,0,247,0,188,0,86,0,9,0,247,0,240,0,63,0,0,0,47,0,129,0,115,0,183,0,89,0,174,0,241,0,167,0,128,0,0,0,44,0,229,0,96,0,240,0,25,0,0,0,104,0,85,0,85,0,167,0,50,0,126,0,0,0,194,0,0,0,16,0,167,0,243,0,151,0,250,0,202,0,83,0,28,0,190,0,12,0,206,0,24,0,0,0,0,0,0,0,184,0,157,0,0,0,223,0,0,0,192,0,0,0,56,0,104,0,255,0,73,0,236,0,31,0,68,0,70,0,1,0,47,0,137,0,59,0,204,0,0,0,0,0,0,0,215,0,82,0,72,0,92,0,0,0,97,0,136,0,228,0,182,0,149,0,63,0,169,0,230,0,146,0,242,0,208,0,196,0,233,0,134,0,130,0,41,0,199,0,12,0,0,0,234,0,22,0,175,0,63,0,0,0,153,0,0,0,228,0,0,0,141,0,88,0,0,0,0,0,0,0,233,0,211,0,41,0,53,0,245,0,130,0,84,0,85,0,22,0,104,0,54,0,209,0,0,0,180,0,172,0,246,0,0,0,23,0,0,0,0,0,191,0,0,0,99,0,249,0,31,0,0,0,81,0,0,0,225,0,0,0,0,0,195,0,70,0,58,0,95,0,0,0,89,0,211,0,73,0,0,0,3,0,233,0,168,0,0,0,20,0,168,0,249,0,38,0,88,0,0,0,60,0,189,0,140,0,218,0,92,0,244,0,0,0,189,0,250,0,247,0,193,0,0,0,222,0,200,0,0,0,201,0,0,0,0,0,65,0,31,0,0,0,160,0,235,0,104,0,4,0,67,0,0,0,13,0,35,0,0,0,69,0,128,0,222,0,44,0,214,0,76,0,115,0,0,0,20,0,0,0,19,0,82,0,175,0,0,0,116,0,68,0,161,0,221,0,131,0,172,0,0,0,8,0,86,0,17,0,0,0,170,0,25,0,0,0,0,0,20,0,239,0,223,0,131,0,0,0,47,0,140,0,184,0,155,0,128,0,62,0,160,0,0,0,221,0,164,0,93,0,127,0,150,0,218,0,173,0,202,0,0,0,186,0,253,0,104,0,0,0,36,0,113,0,144,0,193,0,37,0,55,0,81,0,162,0,29,0,7,0,0,0,67,0,252,0,173,0,25,0,135,0,240,0,242,0,0,0,192,0,52,0,156,0,202,0,0,0,139,0,231,0,0,0,17,0,234,0,0,0,100,0,113,0,167,0,5,0,18,0,16,0,194,0,225,0,209,0,169,0,0,0,0,0,47,0,106,0,0,0,98,0,0,0,113,0,65,0,60,0,16,0,0,0,241,0,16,0,116,0,0,0,89,0,0,0,35,0,0,0,90,0,233,0,18,0,86,0,218,0,35,0,209,0,37,0,66,0,0,0,0,0,0,0,0,0,174,0,217,0,82,0,63,0,188,0,70,0,0,0,47,0,73,0,0,0,248,0,228,0,169,0,235,0,251,0,209,0,0,0,122,0,91,0,106,0,0,0,54,0,190,0,246,0,187,0,207,0,0,0,153,0,0,0,39,0,162,0,51,0,17,0,202,0,90,0,244,0,3,0,64,0,119,0,125,0,69,0,153,0,245,0,119,0,106,0,50,0,0,0,0,0,99,0,152,0,208,0,218,0,22,0,129,0,219,0,87,0,234,0,143,0,146,0,0,0,23,0,194,0,51,0,47,0,0,0,0,0,221,0,130,0,245,0,44,0,7,0,151,0,0,0,7,0,36,0,42,0,10,0,74,0,147,0,22,0,0,0,249,0,223,0,195,0,142,0,56,0,226,0,0,0,101,0,38,0,104,0,153,0,69,0,84,0,27,0,29,0,17,0,211,0,34,0,0,0,201,0,114,0,55,0,0,0,0,0,42,0,204,0,175,0,155,0,65,0,0,0,177,0,194,0,56,0,196,0,242,0,211,0,237,0,78,0,109,0,23,0,0,0,15,0,0,0,46,0,208,0,15,0,182,0,134,0,0,0,182,0,48,0,11,0,0,0,247,0,55,0,143,0,11,0,255,0,126,0,143,0,216,0,229,0,222,0,147,0,242,0,180,0,178,0,0,0,70,0,0,0,134,0,84,0,72,0,137,0,218,0,129,0,182,0,182,0,238,0,181,0,20,0,0,0,195,0,192,0,11,0,88,0,0,0,0,0,217,0,181,0,74,0,156,0,55,0);
signal scenario_full  : scenario_type := (0,0,129,31,173,31,56,31,146,31,200,31,158,31,120,31,120,30,22,31,18,31,110,31,209,31,146,31,146,30,77,31,104,31,253,31,25,31,25,30,25,29,25,28,201,31,246,31,174,31,125,31,171,31,238,31,247,31,188,31,86,31,9,31,247,31,240,31,63,31,63,30,47,31,129,31,115,31,183,31,89,31,174,31,241,31,167,31,128,31,128,30,44,31,229,31,96,31,240,31,25,31,25,30,104,31,85,31,85,31,167,31,50,31,126,31,126,30,194,31,194,30,16,31,167,31,243,31,151,31,250,31,202,31,83,31,28,31,190,31,12,31,206,31,24,31,24,30,24,29,24,28,184,31,157,31,157,30,223,31,223,30,192,31,192,30,56,31,104,31,255,31,73,31,236,31,31,31,68,31,70,31,1,31,47,31,137,31,59,31,204,31,204,30,204,29,204,28,215,31,82,31,72,31,92,31,92,30,97,31,136,31,228,31,182,31,149,31,63,31,169,31,230,31,146,31,242,31,208,31,196,31,233,31,134,31,130,31,41,31,199,31,12,31,12,30,234,31,22,31,175,31,63,31,63,30,153,31,153,30,228,31,228,30,141,31,88,31,88,30,88,29,88,28,233,31,211,31,41,31,53,31,245,31,130,31,84,31,85,31,22,31,104,31,54,31,209,31,209,30,180,31,172,31,246,31,246,30,23,31,23,30,23,29,191,31,191,30,99,31,249,31,31,31,31,30,81,31,81,30,225,31,225,30,225,29,195,31,70,31,58,31,95,31,95,30,89,31,211,31,73,31,73,30,3,31,233,31,168,31,168,30,20,31,168,31,249,31,38,31,88,31,88,30,60,31,189,31,140,31,218,31,92,31,244,31,244,30,189,31,250,31,247,31,193,31,193,30,222,31,200,31,200,30,201,31,201,30,201,29,65,31,31,31,31,30,160,31,235,31,104,31,4,31,67,31,67,30,13,31,35,31,35,30,69,31,128,31,222,31,44,31,214,31,76,31,115,31,115,30,20,31,20,30,19,31,82,31,175,31,175,30,116,31,68,31,161,31,221,31,131,31,172,31,172,30,8,31,86,31,17,31,17,30,170,31,25,31,25,30,25,29,20,31,239,31,223,31,131,31,131,30,47,31,140,31,184,31,155,31,128,31,62,31,160,31,160,30,221,31,164,31,93,31,127,31,150,31,218,31,173,31,202,31,202,30,186,31,253,31,104,31,104,30,36,31,113,31,144,31,193,31,37,31,55,31,81,31,162,31,29,31,7,31,7,30,67,31,252,31,173,31,25,31,135,31,240,31,242,31,242,30,192,31,52,31,156,31,202,31,202,30,139,31,231,31,231,30,17,31,234,31,234,30,100,31,113,31,167,31,5,31,18,31,16,31,194,31,225,31,209,31,169,31,169,30,169,29,47,31,106,31,106,30,98,31,98,30,113,31,65,31,60,31,16,31,16,30,241,31,16,31,116,31,116,30,89,31,89,30,35,31,35,30,90,31,233,31,18,31,86,31,218,31,35,31,209,31,37,31,66,31,66,30,66,29,66,28,66,27,174,31,217,31,82,31,63,31,188,31,70,31,70,30,47,31,73,31,73,30,248,31,228,31,169,31,235,31,251,31,209,31,209,30,122,31,91,31,106,31,106,30,54,31,190,31,246,31,187,31,207,31,207,30,153,31,153,30,39,31,162,31,51,31,17,31,202,31,90,31,244,31,3,31,64,31,119,31,125,31,69,31,153,31,245,31,119,31,106,31,50,31,50,30,50,29,99,31,152,31,208,31,218,31,22,31,129,31,219,31,87,31,234,31,143,31,146,31,146,30,23,31,194,31,51,31,47,31,47,30,47,29,221,31,130,31,245,31,44,31,7,31,151,31,151,30,7,31,36,31,42,31,10,31,74,31,147,31,22,31,22,30,249,31,223,31,195,31,142,31,56,31,226,31,226,30,101,31,38,31,104,31,153,31,69,31,84,31,27,31,29,31,17,31,211,31,34,31,34,30,201,31,114,31,55,31,55,30,55,29,42,31,204,31,175,31,155,31,65,31,65,30,177,31,194,31,56,31,196,31,242,31,211,31,237,31,78,31,109,31,23,31,23,30,15,31,15,30,46,31,208,31,15,31,182,31,134,31,134,30,182,31,48,31,11,31,11,30,247,31,55,31,143,31,11,31,255,31,126,31,143,31,216,31,229,31,222,31,147,31,242,31,180,31,178,31,178,30,70,31,70,30,134,31,84,31,72,31,137,31,218,31,129,31,182,31,182,31,238,31,181,31,20,31,20,30,195,31,192,31,11,31,88,31,88,30,88,29,217,31,181,31,74,31,156,31,55,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
