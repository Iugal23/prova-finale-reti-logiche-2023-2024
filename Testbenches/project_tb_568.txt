-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 827;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (41,0,65,0,0,0,222,0,0,0,116,0,151,0,0,0,150,0,170,0,92,0,147,0,109,0,0,0,0,0,93,0,34,0,159,0,0,0,254,0,248,0,216,0,179,0,14,0,9,0,138,0,213,0,0,0,120,0,137,0,222,0,0,0,133,0,221,0,88,0,116,0,172,0,20,0,166,0,214,0,240,0,111,0,133,0,112,0,105,0,0,0,234,0,172,0,162,0,0,0,58,0,0,0,0,0,29,0,187,0,0,0,0,0,100,0,81,0,83,0,224,0,170,0,40,0,207,0,141,0,0,0,222,0,135,0,225,0,93,0,35,0,110,0,217,0,0,0,237,0,226,0,88,0,23,0,0,0,0,0,0,0,193,0,0,0,78,0,198,0,0,0,77,0,109,0,98,0,0,0,13,0,224,0,183,0,10,0,233,0,212,0,208,0,58,0,142,0,35,0,79,0,234,0,138,0,51,0,61,0,3,0,199,0,136,0,0,0,223,0,0,0,0,0,91,0,0,0,1,0,55,0,42,0,232,0,240,0,0,0,84,0,71,0,0,0,62,0,122,0,112,0,120,0,0,0,24,0,0,0,102,0,40,0,240,0,0,0,0,0,157,0,22,0,29,0,130,0,163,0,173,0,0,0,89,0,245,0,251,0,0,0,0,0,0,0,156,0,145,0,0,0,0,0,0,0,101,0,14,0,32,0,85,0,184,0,0,0,0,0,44,0,95,0,120,0,0,0,253,0,159,0,0,0,0,0,189,0,0,0,0,0,162,0,0,0,0,0,243,0,200,0,188,0,86,0,5,0,0,0,102,0,231,0,159,0,142,0,145,0,224,0,159,0,0,0,230,0,0,0,0,0,127,0,201,0,164,0,33,0,129,0,192,0,201,0,19,0,145,0,199,0,44,0,22,0,202,0,0,0,0,0,0,0,68,0,0,0,0,0,193,0,251,0,143,0,0,0,0,0,22,0,155,0,76,0,36,0,180,0,227,0,0,0,0,0,7,0,37,0,62,0,16,0,0,0,108,0,211,0,75,0,108,0,162,0,100,0,170,0,0,0,104,0,154,0,19,0,20,0,79,0,53,0,246,0,41,0,198,0,72,0,209,0,196,0,128,0,0,0,0,0,65,0,0,0,40,0,101,0,0,0,148,0,86,0,187,0,0,0,121,0,113,0,0,0,87,0,117,0,216,0,25,0,173,0,10,0,0,0,0,0,0,0,215,0,8,0,73,0,0,0,87,0,130,0,0,0,210,0,61,0,214,0,65,0,112,0,143,0,197,0,218,0,197,0,217,0,183,0,0,0,94,0,207,0,239,0,190,0,46,0,209,0,204,0,0,0,184,0,229,0,188,0,0,0,171,0,191,0,8,0,155,0,0,0,0,0,237,0,55,0,0,0,175,0,0,0,158,0,124,0,0,0,153,0,0,0,204,0,222,0,40,0,233,0,242,0,155,0,85,0,165,0,25,0,0,0,0,0,100,0,193,0,180,0,201,0,186,0,0,0,21,0,1,0,212,0,42,0,128,0,63,0,0,0,92,0,99,0,40,0,27,0,243,0,0,0,233,0,131,0,146,0,46,0,236,0,225,0,0,0,0,0,117,0,245,0,2,0,236,0,30,0,18,0,255,0,10,0,173,0,31,0,201,0,176,0,0,0,112,0,120,0,88,0,163,0,50,0,207,0,197,0,95,0,162,0,101,0,71,0,20,0,0,0,221,0,103,0,0,0,1,0,245,0,60,0,251,0,116,0,0,0,194,0,0,0,84,0,0,0,132,0,133,0,73,0,55,0,0,0,0,0,69,0,105,0,104,0,142,0,90,0,176,0,97,0,106,0,158,0,153,0,151,0,124,0,0,0,125,0,209,0,33,0,71,0,187,0,114,0,0,0,0,0,0,0,44,0,151,0,247,0,161,0,50,0,212,0,233,0,0,0,0,0,102,0,234,0,0,0,87,0,0,0,198,0,246,0,151,0,53,0,245,0,174,0,169,0,0,0,6,0,200,0,209,0,7,0,131,0,0,0,0,0,163,0,46,0,158,0,0,0,242,0,120,0,0,0,180,0,0,0,43,0,240,0,39,0,53,0,50,0,0,0,220,0,80,0,156,0,10,0,17,0,0,0,12,0,160,0,202,0,132,0,243,0,0,0,133,0,30,0,176,0,0,0,190,0,89,0,238,0,0,0,87,0,221,0,238,0,130,0,157,0,193,0,0,0,97,0,183,0,83,0,0,0,37,0,56,0,81,0,20,0,73,0,7,0,165,0,149,0,74,0,189,0,227,0,110,0,92,0,123,0,0,0,56,0,71,0,146,0,174,0,231,0,131,0,51,0,203,0,233,0,209,0,0,0,127,0,240,0,26,0,0,0,160,0,0,0,159,0,108,0,154,0,42,0,161,0,190,0,2,0,0,0,168,0,76,0,22,0,0,0,244,0,190,0,133,0,216,0,81,0,0,0,177,0,251,0,0,0,55,0,0,0,200,0,128,0,247,0,116,0,0,0,149,0,250,0,10,0,242,0,0,0,249,0,121,0,0,0,0,0,217,0,250,0,252,0,52,0,134,0,87,0,22,0,10,0,0,0,29,0,139,0,125,0,149,0,169,0,233,0,95,0,0,0,177,0,0,0,106,0,151,0,0,0,0,0,55,0,121,0,150,0,223,0,126,0,36,0,64,0,0,0,0,0,171,0,0,0,0,0,104,0,11,0,187,0,171,0,34,0,54,0,0,0,0,0,164,0,187,0,174,0,37,0,36,0,38,0,0,0,230,0,139,0,0,0,97,0,176,0,22,0,248,0,0,0,116,0,0,0,38,0,47,0,190,0,142,0,135,0,77,0,139,0,212,0,236,0,54,0,4,0,248,0,38,0,92,0,113,0,123,0,0,0,0,0,0,0,17,0,77,0,44,0,141,0,151,0,141,0,70,0,136,0,233,0,237,0,141,0,57,0,16,0,0,0,201,0,60,0,191,0,0,0,0,0,27,0,80,0,21,0,0,0,4,0,67,0,98,0,11,0,0,0,37,0,41,0,0,0,95,0,184,0,43,0,117,0,140,0,110,0,227,0,164,0,0,0,34,0,15,0,142,0,182,0,44,0,197,0,164,0,25,0,14,0,0,0,39,0,0,0,236,0,160,0,0,0,0,0,199,0,27,0,30,0,0,0,0,0,0,0,81,0,125,0,179,0,105,0,216,0,1,0,236,0,145,0,185,0,0,0,213,0,227,0,0,0,156,0,145,0,0,0,63,0,75,0,0,0,35,0,218,0,58,0,183,0,180,0,18,0,0,0,0,0,171,0,46,0,111,0,4,0,156,0,48,0,92,0,0,0,11,0,47,0,242,0,115,0,242,0,0,0,50,0,1,0,249,0,126,0,61,0,201,0,194,0,162,0,0,0,146,0,191,0,23,0,217,0,0,0,0,0,0,0,0,0,0,0,190,0,55,0,164,0,0,0,175,0,125,0,201,0,53,0,149,0,0,0,90,0,150,0,85,0,68,0,109,0,230,0,199,0,220,0,0,0,250,0,0,0,0,0,21,0,102,0,96,0,240,0,22,0,0,0,180,0,0,0,142,0,93,0,0,0,159,0,99,0,159,0,40,0,0,0,242,0,101,0,131,0,132,0,17,0,252,0,0,0,212,0,199,0,95,0,105,0,48,0,50,0,35,0,195,0,74,0,208,0,125,0,62,0,175,0,203,0);
signal scenario_full  : scenario_type := (41,31,65,31,65,30,222,31,222,30,116,31,151,31,151,30,150,31,170,31,92,31,147,31,109,31,109,30,109,29,93,31,34,31,159,31,159,30,254,31,248,31,216,31,179,31,14,31,9,31,138,31,213,31,213,30,120,31,137,31,222,31,222,30,133,31,221,31,88,31,116,31,172,31,20,31,166,31,214,31,240,31,111,31,133,31,112,31,105,31,105,30,234,31,172,31,162,31,162,30,58,31,58,30,58,29,29,31,187,31,187,30,187,29,100,31,81,31,83,31,224,31,170,31,40,31,207,31,141,31,141,30,222,31,135,31,225,31,93,31,35,31,110,31,217,31,217,30,237,31,226,31,88,31,23,31,23,30,23,29,23,28,193,31,193,30,78,31,198,31,198,30,77,31,109,31,98,31,98,30,13,31,224,31,183,31,10,31,233,31,212,31,208,31,58,31,142,31,35,31,79,31,234,31,138,31,51,31,61,31,3,31,199,31,136,31,136,30,223,31,223,30,223,29,91,31,91,30,1,31,55,31,42,31,232,31,240,31,240,30,84,31,71,31,71,30,62,31,122,31,112,31,120,31,120,30,24,31,24,30,102,31,40,31,240,31,240,30,240,29,157,31,22,31,29,31,130,31,163,31,173,31,173,30,89,31,245,31,251,31,251,30,251,29,251,28,156,31,145,31,145,30,145,29,145,28,101,31,14,31,32,31,85,31,184,31,184,30,184,29,44,31,95,31,120,31,120,30,253,31,159,31,159,30,159,29,189,31,189,30,189,29,162,31,162,30,162,29,243,31,200,31,188,31,86,31,5,31,5,30,102,31,231,31,159,31,142,31,145,31,224,31,159,31,159,30,230,31,230,30,230,29,127,31,201,31,164,31,33,31,129,31,192,31,201,31,19,31,145,31,199,31,44,31,22,31,202,31,202,30,202,29,202,28,68,31,68,30,68,29,193,31,251,31,143,31,143,30,143,29,22,31,155,31,76,31,36,31,180,31,227,31,227,30,227,29,7,31,37,31,62,31,16,31,16,30,108,31,211,31,75,31,108,31,162,31,100,31,170,31,170,30,104,31,154,31,19,31,20,31,79,31,53,31,246,31,41,31,198,31,72,31,209,31,196,31,128,31,128,30,128,29,65,31,65,30,40,31,101,31,101,30,148,31,86,31,187,31,187,30,121,31,113,31,113,30,87,31,117,31,216,31,25,31,173,31,10,31,10,30,10,29,10,28,215,31,8,31,73,31,73,30,87,31,130,31,130,30,210,31,61,31,214,31,65,31,112,31,143,31,197,31,218,31,197,31,217,31,183,31,183,30,94,31,207,31,239,31,190,31,46,31,209,31,204,31,204,30,184,31,229,31,188,31,188,30,171,31,191,31,8,31,155,31,155,30,155,29,237,31,55,31,55,30,175,31,175,30,158,31,124,31,124,30,153,31,153,30,204,31,222,31,40,31,233,31,242,31,155,31,85,31,165,31,25,31,25,30,25,29,100,31,193,31,180,31,201,31,186,31,186,30,21,31,1,31,212,31,42,31,128,31,63,31,63,30,92,31,99,31,40,31,27,31,243,31,243,30,233,31,131,31,146,31,46,31,236,31,225,31,225,30,225,29,117,31,245,31,2,31,236,31,30,31,18,31,255,31,10,31,173,31,31,31,201,31,176,31,176,30,112,31,120,31,88,31,163,31,50,31,207,31,197,31,95,31,162,31,101,31,71,31,20,31,20,30,221,31,103,31,103,30,1,31,245,31,60,31,251,31,116,31,116,30,194,31,194,30,84,31,84,30,132,31,133,31,73,31,55,31,55,30,55,29,69,31,105,31,104,31,142,31,90,31,176,31,97,31,106,31,158,31,153,31,151,31,124,31,124,30,125,31,209,31,33,31,71,31,187,31,114,31,114,30,114,29,114,28,44,31,151,31,247,31,161,31,50,31,212,31,233,31,233,30,233,29,102,31,234,31,234,30,87,31,87,30,198,31,246,31,151,31,53,31,245,31,174,31,169,31,169,30,6,31,200,31,209,31,7,31,131,31,131,30,131,29,163,31,46,31,158,31,158,30,242,31,120,31,120,30,180,31,180,30,43,31,240,31,39,31,53,31,50,31,50,30,220,31,80,31,156,31,10,31,17,31,17,30,12,31,160,31,202,31,132,31,243,31,243,30,133,31,30,31,176,31,176,30,190,31,89,31,238,31,238,30,87,31,221,31,238,31,130,31,157,31,193,31,193,30,97,31,183,31,83,31,83,30,37,31,56,31,81,31,20,31,73,31,7,31,165,31,149,31,74,31,189,31,227,31,110,31,92,31,123,31,123,30,56,31,71,31,146,31,174,31,231,31,131,31,51,31,203,31,233,31,209,31,209,30,127,31,240,31,26,31,26,30,160,31,160,30,159,31,108,31,154,31,42,31,161,31,190,31,2,31,2,30,168,31,76,31,22,31,22,30,244,31,190,31,133,31,216,31,81,31,81,30,177,31,251,31,251,30,55,31,55,30,200,31,128,31,247,31,116,31,116,30,149,31,250,31,10,31,242,31,242,30,249,31,121,31,121,30,121,29,217,31,250,31,252,31,52,31,134,31,87,31,22,31,10,31,10,30,29,31,139,31,125,31,149,31,169,31,233,31,95,31,95,30,177,31,177,30,106,31,151,31,151,30,151,29,55,31,121,31,150,31,223,31,126,31,36,31,64,31,64,30,64,29,171,31,171,30,171,29,104,31,11,31,187,31,171,31,34,31,54,31,54,30,54,29,164,31,187,31,174,31,37,31,36,31,38,31,38,30,230,31,139,31,139,30,97,31,176,31,22,31,248,31,248,30,116,31,116,30,38,31,47,31,190,31,142,31,135,31,77,31,139,31,212,31,236,31,54,31,4,31,248,31,38,31,92,31,113,31,123,31,123,30,123,29,123,28,17,31,77,31,44,31,141,31,151,31,141,31,70,31,136,31,233,31,237,31,141,31,57,31,16,31,16,30,201,31,60,31,191,31,191,30,191,29,27,31,80,31,21,31,21,30,4,31,67,31,98,31,11,31,11,30,37,31,41,31,41,30,95,31,184,31,43,31,117,31,140,31,110,31,227,31,164,31,164,30,34,31,15,31,142,31,182,31,44,31,197,31,164,31,25,31,14,31,14,30,39,31,39,30,236,31,160,31,160,30,160,29,199,31,27,31,30,31,30,30,30,29,30,28,81,31,125,31,179,31,105,31,216,31,1,31,236,31,145,31,185,31,185,30,213,31,227,31,227,30,156,31,145,31,145,30,63,31,75,31,75,30,35,31,218,31,58,31,183,31,180,31,18,31,18,30,18,29,171,31,46,31,111,31,4,31,156,31,48,31,92,31,92,30,11,31,47,31,242,31,115,31,242,31,242,30,50,31,1,31,249,31,126,31,61,31,201,31,194,31,162,31,162,30,146,31,191,31,23,31,217,31,217,30,217,29,217,28,217,27,217,26,190,31,55,31,164,31,164,30,175,31,125,31,201,31,53,31,149,31,149,30,90,31,150,31,85,31,68,31,109,31,230,31,199,31,220,31,220,30,250,31,250,30,250,29,21,31,102,31,96,31,240,31,22,31,22,30,180,31,180,30,142,31,93,31,93,30,159,31,99,31,159,31,40,31,40,30,242,31,101,31,131,31,132,31,17,31,252,31,252,30,212,31,199,31,95,31,105,31,48,31,50,31,35,31,195,31,74,31,208,31,125,31,62,31,175,31,203,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
