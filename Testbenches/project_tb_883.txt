-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 238;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,0,0,99,0,10,0,237,0,105,0,0,0,24,0,189,0,156,0,36,0,25,0,9,0,118,0,162,0,11,0,108,0,185,0,180,0,49,0,0,0,0,0,101,0,15,0,130,0,248,0,164,0,0,0,220,0,90,0,246,0,224,0,252,0,162,0,0,0,40,0,7,0,140,0,67,0,76,0,176,0,0,0,0,0,232,0,94,0,27,0,62,0,1,0,244,0,100,0,246,0,142,0,141,0,0,0,237,0,237,0,252,0,185,0,232,0,220,0,71,0,254,0,21,0,241,0,55,0,190,0,254,0,194,0,192,0,0,0,174,0,229,0,246,0,189,0,173,0,245,0,130,0,157,0,0,0,12,0,0,0,56,0,241,0,159,0,77,0,154,0,0,0,118,0,95,0,253,0,59,0,87,0,214,0,0,0,199,0,155,0,171,0,0,0,31,0,131,0,0,0,16,0,150,0,98,0,20,0,40,0,232,0,34,0,82,0,48,0,51,0,121,0,119,0,0,0,129,0,222,0,32,0,15,0,122,0,69,0,140,0,131,0,0,0,209,0,89,0,240,0,169,0,158,0,23,0,198,0,195,0,60,0,0,0,121,0,126,0,148,0,209,0,126,0,82,0,148,0,0,0,31,0,0,0,106,0,188,0,175,0,137,0,0,0,199,0,225,0,50,0,211,0,0,0,237,0,207,0,0,0,20,0,223,0,197,0,0,0,123,0,50,0,228,0,231,0,229,0,107,0,67,0,0,0,0,0,107,0,114,0,151,0,33,0,0,0,72,0,102,0,43,0,0,0,0,0,13,0,176,0,0,0,175,0,17,0,232,0,242,0,105,0,7,0,148,0,114,0,252,0,44,0,145,0,186,0,26,0,63,0,0,0,104,0,9,0,0,0,77,0,236,0,0,0,159,0,0,0,190,0,189,0,0,0,0,0,150,0,73,0,4,0,197,0,132,0,191,0,156,0,212,0,12,0,104,0,156,0,45,0,0,0,82,0,0,0,117,0,0,0,194,0,208,0,198,0,0,0,0,0,0,0,173,0,0,0,172,0,1,0,179,0,226,0);
signal scenario_full  : scenario_type := (0,0,0,0,99,31,10,31,237,31,105,31,105,30,24,31,189,31,156,31,36,31,25,31,9,31,118,31,162,31,11,31,108,31,185,31,180,31,49,31,49,30,49,29,101,31,15,31,130,31,248,31,164,31,164,30,220,31,90,31,246,31,224,31,252,31,162,31,162,30,40,31,7,31,140,31,67,31,76,31,176,31,176,30,176,29,232,31,94,31,27,31,62,31,1,31,244,31,100,31,246,31,142,31,141,31,141,30,237,31,237,31,252,31,185,31,232,31,220,31,71,31,254,31,21,31,241,31,55,31,190,31,254,31,194,31,192,31,192,30,174,31,229,31,246,31,189,31,173,31,245,31,130,31,157,31,157,30,12,31,12,30,56,31,241,31,159,31,77,31,154,31,154,30,118,31,95,31,253,31,59,31,87,31,214,31,214,30,199,31,155,31,171,31,171,30,31,31,131,31,131,30,16,31,150,31,98,31,20,31,40,31,232,31,34,31,82,31,48,31,51,31,121,31,119,31,119,30,129,31,222,31,32,31,15,31,122,31,69,31,140,31,131,31,131,30,209,31,89,31,240,31,169,31,158,31,23,31,198,31,195,31,60,31,60,30,121,31,126,31,148,31,209,31,126,31,82,31,148,31,148,30,31,31,31,30,106,31,188,31,175,31,137,31,137,30,199,31,225,31,50,31,211,31,211,30,237,31,207,31,207,30,20,31,223,31,197,31,197,30,123,31,50,31,228,31,231,31,229,31,107,31,67,31,67,30,67,29,107,31,114,31,151,31,33,31,33,30,72,31,102,31,43,31,43,30,43,29,13,31,176,31,176,30,175,31,17,31,232,31,242,31,105,31,7,31,148,31,114,31,252,31,44,31,145,31,186,31,26,31,63,31,63,30,104,31,9,31,9,30,77,31,236,31,236,30,159,31,159,30,190,31,189,31,189,30,189,29,150,31,73,31,4,31,197,31,132,31,191,31,156,31,212,31,12,31,104,31,156,31,45,31,45,30,82,31,82,30,117,31,117,30,194,31,208,31,198,31,198,30,198,29,198,28,173,31,173,30,172,31,1,31,179,31,226,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
