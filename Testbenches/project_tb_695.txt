-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 215;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,0,0,85,0,0,0,29,0,79,0,76,0,0,0,14,0,200,0,12,0,0,0,47,0,51,0,0,0,146,0,74,0,194,0,136,0,0,0,221,0,16,0,162,0,72,0,113,0,169,0,251,0,82,0,87,0,0,0,62,0,206,0,73,0,0,0,128,0,37,0,66,0,17,0,187,0,0,0,156,0,120,0,57,0,102,0,143,0,0,0,0,0,97,0,117,0,119,0,0,0,70,0,0,0,145,0,80,0,0,0,38,0,120,0,122,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,138,0,123,0,206,0,32,0,14,0,11,0,55,0,0,0,0,0,61,0,53,0,34,0,146,0,255,0,180,0,249,0,113,0,125,0,196,0,247,0,161,0,103,0,151,0,166,0,0,0,0,0,186,0,0,0,0,0,227,0,124,0,0,0,0,0,19,0,122,0,29,0,186,0,0,0,244,0,148,0,168,0,179,0,195,0,96,0,79,0,134,0,43,0,209,0,247,0,62,0,79,0,0,0,0,0,245,0,164,0,230,0,122,0,246,0,199,0,0,0,54,0,85,0,129,0,71,0,140,0,35,0,12,0,31,0,94,0,83,0,51,0,0,0,148,0,0,0,101,0,59,0,0,0,9,0,21,0,0,0,146,0,95,0,97,0,147,0,204,0,0,0,234,0,0,0,150,0,109,0,184,0,209,0,104,0,84,0,0,0,164,0,35,0,0,0,129,0,146,0,0,0,105,0,36,0,196,0,0,0,0,0,243,0,75,0,0,0,108,0,4,0,96,0,131,0,171,0,26,0,142,0,227,0,0,0,98,0,214,0,50,0,0,0,48,0,107,0,99,0,204,0,169,0,51,0,0,0,0,0,0,0,79,0,105,0,220,0,95,0,73,0,0,0,37,0,186,0,197,0,0,0,85,0,83,0,0,0,0,0,163,0,167,0,45,0,88,0);
signal scenario_full  : scenario_type := (0,0,0,0,85,31,85,30,29,31,79,31,76,31,76,30,14,31,200,31,12,31,12,30,47,31,51,31,51,30,146,31,74,31,194,31,136,31,136,30,221,31,16,31,162,31,72,31,113,31,169,31,251,31,82,31,87,31,87,30,62,31,206,31,73,31,73,30,128,31,37,31,66,31,17,31,187,31,187,30,156,31,120,31,57,31,102,31,143,31,143,30,143,29,97,31,117,31,119,31,119,30,70,31,70,30,145,31,80,31,80,30,38,31,120,31,122,31,122,30,122,29,122,28,122,27,4,31,4,30,4,29,138,31,123,31,206,31,32,31,14,31,11,31,55,31,55,30,55,29,61,31,53,31,34,31,146,31,255,31,180,31,249,31,113,31,125,31,196,31,247,31,161,31,103,31,151,31,166,31,166,30,166,29,186,31,186,30,186,29,227,31,124,31,124,30,124,29,19,31,122,31,29,31,186,31,186,30,244,31,148,31,168,31,179,31,195,31,96,31,79,31,134,31,43,31,209,31,247,31,62,31,79,31,79,30,79,29,245,31,164,31,230,31,122,31,246,31,199,31,199,30,54,31,85,31,129,31,71,31,140,31,35,31,12,31,31,31,94,31,83,31,51,31,51,30,148,31,148,30,101,31,59,31,59,30,9,31,21,31,21,30,146,31,95,31,97,31,147,31,204,31,204,30,234,31,234,30,150,31,109,31,184,31,209,31,104,31,84,31,84,30,164,31,35,31,35,30,129,31,146,31,146,30,105,31,36,31,196,31,196,30,196,29,243,31,75,31,75,30,108,31,4,31,96,31,131,31,171,31,26,31,142,31,227,31,227,30,98,31,214,31,50,31,50,30,48,31,107,31,99,31,204,31,169,31,51,31,51,30,51,29,51,28,79,31,105,31,220,31,95,31,73,31,73,30,37,31,186,31,197,31,197,30,85,31,83,31,83,30,83,29,163,31,167,31,45,31,88,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
