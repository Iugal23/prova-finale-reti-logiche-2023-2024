-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 189;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (219,0,192,0,0,0,100,0,238,0,0,0,0,0,0,0,110,0,228,0,205,0,28,0,95,0,152,0,213,0,121,0,49,0,179,0,22,0,51,0,228,0,0,0,251,0,29,0,0,0,79,0,118,0,0,0,218,0,67,0,71,0,57,0,204,0,92,0,159,0,127,0,211,0,64,0,0,0,141,0,172,0,94,0,249,0,120,0,119,0,78,0,157,0,140,0,0,0,167,0,0,0,0,0,17,0,223,0,0,0,222,0,123,0,213,0,0,0,39,0,169,0,52,0,126,0,0,0,153,0,66,0,240,0,203,0,212,0,29,0,0,0,168,0,12,0,233,0,6,0,140,0,5,0,233,0,185,0,133,0,116,0,117,0,4,0,213,0,163,0,251,0,186,0,0,0,151,0,19,0,122,0,242,0,171,0,132,0,66,0,130,0,195,0,0,0,54,0,9,0,98,0,217,0,185,0,145,0,140,0,74,0,38,0,182,0,0,0,144,0,99,0,0,0,0,0,56,0,43,0,59,0,7,0,223,0,93,0,105,0,74,0,141,0,171,0,158,0,99,0,233,0,23,0,37,0,52,0,0,0,54,0,233,0,0,0,7,0,85,0,26,0,159,0,0,0,0,0,105,0,49,0,203,0,233,0,0,0,0,0,192,0,108,0,178,0,82,0,47,0,220,0,22,0,40,0,238,0,126,0,134,0,0,0,249,0,0,0,0,0,112,0,211,0,120,0,79,0,174,0,225,0,191,0,225,0,65,0,29,0,194,0,30,0,8,0,0,0,0,0,0,0,249,0,0,0,220,0,43,0,15,0,41,0,2,0,228,0,0,0,0,0,109,0,0,0,139,0);
signal scenario_full  : scenario_type := (219,31,192,31,192,30,100,31,238,31,238,30,238,29,238,28,110,31,228,31,205,31,28,31,95,31,152,31,213,31,121,31,49,31,179,31,22,31,51,31,228,31,228,30,251,31,29,31,29,30,79,31,118,31,118,30,218,31,67,31,71,31,57,31,204,31,92,31,159,31,127,31,211,31,64,31,64,30,141,31,172,31,94,31,249,31,120,31,119,31,78,31,157,31,140,31,140,30,167,31,167,30,167,29,17,31,223,31,223,30,222,31,123,31,213,31,213,30,39,31,169,31,52,31,126,31,126,30,153,31,66,31,240,31,203,31,212,31,29,31,29,30,168,31,12,31,233,31,6,31,140,31,5,31,233,31,185,31,133,31,116,31,117,31,4,31,213,31,163,31,251,31,186,31,186,30,151,31,19,31,122,31,242,31,171,31,132,31,66,31,130,31,195,31,195,30,54,31,9,31,98,31,217,31,185,31,145,31,140,31,74,31,38,31,182,31,182,30,144,31,99,31,99,30,99,29,56,31,43,31,59,31,7,31,223,31,93,31,105,31,74,31,141,31,171,31,158,31,99,31,233,31,23,31,37,31,52,31,52,30,54,31,233,31,233,30,7,31,85,31,26,31,159,31,159,30,159,29,105,31,49,31,203,31,233,31,233,30,233,29,192,31,108,31,178,31,82,31,47,31,220,31,22,31,40,31,238,31,126,31,134,31,134,30,249,31,249,30,249,29,112,31,211,31,120,31,79,31,174,31,225,31,191,31,225,31,65,31,29,31,194,31,30,31,8,31,8,30,8,29,8,28,249,31,249,30,220,31,43,31,15,31,41,31,2,31,228,31,228,30,228,29,109,31,109,30,139,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
