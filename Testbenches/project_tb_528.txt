-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 422;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (209,0,182,0,23,0,152,0,61,0,17,0,131,0,221,0,36,0,0,0,142,0,152,0,57,0,175,0,13,0,0,0,183,0,252,0,67,0,141,0,80,0,0,0,240,0,8,0,94,0,209,0,0,0,216,0,59,0,113,0,0,0,193,0,144,0,113,0,127,0,161,0,0,0,31,0,10,0,80,0,114,0,205,0,0,0,215,0,109,0,231,0,159,0,236,0,106,0,164,0,205,0,252,0,59,0,54,0,186,0,131,0,0,0,125,0,147,0,247,0,217,0,13,0,90,0,0,0,0,0,0,0,0,0,167,0,91,0,239,0,78,0,129,0,129,0,22,0,160,0,0,0,86,0,83,0,0,0,71,0,188,0,117,0,9,0,242,0,93,0,183,0,54,0,18,0,107,0,0,0,47,0,81,0,0,0,123,0,137,0,0,0,191,0,62,0,0,0,0,0,90,0,60,0,152,0,96,0,14,0,225,0,140,0,162,0,212,0,0,0,250,0,0,0,63,0,42,0,93,0,0,0,248,0,149,0,129,0,19,0,93,0,0,0,203,0,49,0,144,0,0,0,134,0,122,0,16,0,40,0,19,0,199,0,98,0,57,0,0,0,201,0,0,0,58,0,27,0,226,0,164,0,90,0,179,0,162,0,194,0,253,0,188,0,30,0,32,0,0,0,122,0,160,0,189,0,145,0,0,0,182,0,127,0,223,0,164,0,81,0,120,0,0,0,80,0,45,0,165,0,0,0,186,0,146,0,59,0,210,0,40,0,0,0,122,0,0,0,95,0,69,0,133,0,17,0,84,0,67,0,110,0,21,0,0,0,213,0,155,0,107,0,155,0,44,0,0,0,39,0,96,0,0,0,27,0,0,0,120,0,115,0,125,0,103,0,0,0,224,0,0,0,0,0,0,0,36,0,26,0,51,0,0,0,96,0,228,0,0,0,24,0,203,0,12,0,178,0,75,0,41,0,105,0,56,0,39,0,6,0,0,0,0,0,152,0,0,0,40,0,220,0,0,0,0,0,93,0,0,0,213,0,209,0,201,0,223,0,0,0,244,0,201,0,0,0,208,0,0,0,217,0,0,0,41,0,97,0,0,0,75,0,248,0,197,0,248,0,210,0,136,0,208,0,29,0,239,0,255,0,45,0,124,0,0,0,150,0,211,0,135,0,25,0,53,0,209,0,56,0,0,0,81,0,50,0,222,0,51,0,0,0,0,0,0,0,157,0,125,0,23,0,0,0,141,0,0,0,14,0,77,0,135,0,82,0,0,0,94,0,225,0,77,0,115,0,0,0,217,0,87,0,143,0,249,0,107,0,194,0,0,0,0,0,201,0,12,0,129,0,0,0,194,0,163,0,0,0,242,0,0,0,169,0,32,0,89,0,143,0,230,0,47,0,26,0,234,0,0,0,0,0,12,0,170,0,53,0,6,0,109,0,241,0,252,0,0,0,0,0,107,0,118,0,0,0,87,0,227,0,109,0,142,0,8,0,196,0,194,0,0,0,230,0,92,0,94,0,0,0,206,0,117,0,66,0,249,0,33,0,7,0,0,0,157,0,180,0,92,0,206,0,18,0,117,0,18,0,252,0,119,0,248,0,50,0,234,0,244,0,30,0,0,0,0,0,232,0,79,0,0,0,0,0,0,0,126,0,4,0,30,0,210,0,237,0,93,0,239,0,55,0,0,0,207,0,71,0,40,0,91,0,179,0,254,0,119,0,189,0,8,0,117,0,170,0,0,0,116,0,244,0,139,0,161,0,129,0,107,0,0,0,175,0,42,0,0,0,67,0,32,0,0,0,218,0,250,0,14,0,12,0,202,0,164,0,65,0,179,0,242,0,118,0,127,0,84,0,0,0,0,0,204,0,52,0,0,0,0,0,164,0,0,0);
signal scenario_full  : scenario_type := (209,31,182,31,23,31,152,31,61,31,17,31,131,31,221,31,36,31,36,30,142,31,152,31,57,31,175,31,13,31,13,30,183,31,252,31,67,31,141,31,80,31,80,30,240,31,8,31,94,31,209,31,209,30,216,31,59,31,113,31,113,30,193,31,144,31,113,31,127,31,161,31,161,30,31,31,10,31,80,31,114,31,205,31,205,30,215,31,109,31,231,31,159,31,236,31,106,31,164,31,205,31,252,31,59,31,54,31,186,31,131,31,131,30,125,31,147,31,247,31,217,31,13,31,90,31,90,30,90,29,90,28,90,27,167,31,91,31,239,31,78,31,129,31,129,31,22,31,160,31,160,30,86,31,83,31,83,30,71,31,188,31,117,31,9,31,242,31,93,31,183,31,54,31,18,31,107,31,107,30,47,31,81,31,81,30,123,31,137,31,137,30,191,31,62,31,62,30,62,29,90,31,60,31,152,31,96,31,14,31,225,31,140,31,162,31,212,31,212,30,250,31,250,30,63,31,42,31,93,31,93,30,248,31,149,31,129,31,19,31,93,31,93,30,203,31,49,31,144,31,144,30,134,31,122,31,16,31,40,31,19,31,199,31,98,31,57,31,57,30,201,31,201,30,58,31,27,31,226,31,164,31,90,31,179,31,162,31,194,31,253,31,188,31,30,31,32,31,32,30,122,31,160,31,189,31,145,31,145,30,182,31,127,31,223,31,164,31,81,31,120,31,120,30,80,31,45,31,165,31,165,30,186,31,146,31,59,31,210,31,40,31,40,30,122,31,122,30,95,31,69,31,133,31,17,31,84,31,67,31,110,31,21,31,21,30,213,31,155,31,107,31,155,31,44,31,44,30,39,31,96,31,96,30,27,31,27,30,120,31,115,31,125,31,103,31,103,30,224,31,224,30,224,29,224,28,36,31,26,31,51,31,51,30,96,31,228,31,228,30,24,31,203,31,12,31,178,31,75,31,41,31,105,31,56,31,39,31,6,31,6,30,6,29,152,31,152,30,40,31,220,31,220,30,220,29,93,31,93,30,213,31,209,31,201,31,223,31,223,30,244,31,201,31,201,30,208,31,208,30,217,31,217,30,41,31,97,31,97,30,75,31,248,31,197,31,248,31,210,31,136,31,208,31,29,31,239,31,255,31,45,31,124,31,124,30,150,31,211,31,135,31,25,31,53,31,209,31,56,31,56,30,81,31,50,31,222,31,51,31,51,30,51,29,51,28,157,31,125,31,23,31,23,30,141,31,141,30,14,31,77,31,135,31,82,31,82,30,94,31,225,31,77,31,115,31,115,30,217,31,87,31,143,31,249,31,107,31,194,31,194,30,194,29,201,31,12,31,129,31,129,30,194,31,163,31,163,30,242,31,242,30,169,31,32,31,89,31,143,31,230,31,47,31,26,31,234,31,234,30,234,29,12,31,170,31,53,31,6,31,109,31,241,31,252,31,252,30,252,29,107,31,118,31,118,30,87,31,227,31,109,31,142,31,8,31,196,31,194,31,194,30,230,31,92,31,94,31,94,30,206,31,117,31,66,31,249,31,33,31,7,31,7,30,157,31,180,31,92,31,206,31,18,31,117,31,18,31,252,31,119,31,248,31,50,31,234,31,244,31,30,31,30,30,30,29,232,31,79,31,79,30,79,29,79,28,126,31,4,31,30,31,210,31,237,31,93,31,239,31,55,31,55,30,207,31,71,31,40,31,91,31,179,31,254,31,119,31,189,31,8,31,117,31,170,31,170,30,116,31,244,31,139,31,161,31,129,31,107,31,107,30,175,31,42,31,42,30,67,31,32,31,32,30,218,31,250,31,14,31,12,31,202,31,164,31,65,31,179,31,242,31,118,31,127,31,84,31,84,30,84,29,204,31,52,31,52,30,52,29,164,31,164,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
