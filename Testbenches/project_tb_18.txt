-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 484;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,0,0,89,0,144,0,227,0,204,0,195,0,123,0,177,0,31,0,65,0,192,0,192,0,0,0,202,0,181,0,61,0,10,0,145,0,244,0,0,0,121,0,212,0,140,0,181,0,83,0,174,0,66,0,158,0,0,0,74,0,119,0,255,0,150,0,100,0,0,0,138,0,152,0,254,0,177,0,11,0,0,0,142,0,98,0,109,0,0,0,40,0,165,0,87,0,246,0,103,0,1,0,92,0,80,0,122,0,26,0,200,0,77,0,40,0,181,0,0,0,142,0,117,0,14,0,220,0,14,0,183,0,225,0,0,0,161,0,0,0,207,0,145,0,0,0,20,0,181,0,123,0,58,0,186,0,84,0,0,0,80,0,214,0,237,0,69,0,105,0,91,0,0,0,0,0,0,0,12,0,180,0,125,0,156,0,154,0,0,0,0,0,43,0,176,0,0,0,16,0,186,0,10,0,56,0,185,0,189,0,160,0,140,0,21,0,105,0,52,0,18,0,105,0,241,0,129,0,3,0,146,0,238,0,57,0,235,0,224,0,199,0,0,0,232,0,10,0,0,0,72,0,0,0,213,0,94,0,198,0,117,0,63,0,48,0,0,0,235,0,0,0,143,0,23,0,37,0,243,0,139,0,58,0,139,0,247,0,29,0,44,0,0,0,232,0,233,0,0,0,186,0,250,0,213,0,60,0,220,0,0,0,218,0,14,0,248,0,221,0,208,0,230,0,12,0,0,0,30,0,15,0,149,0,0,0,87,0,1,0,114,0,243,0,246,0,211,0,117,0,156,0,18,0,80,0,0,0,104,0,0,0,219,0,126,0,55,0,0,0,22,0,215,0,163,0,191,0,241,0,151,0,105,0,229,0,50,0,0,0,79,0,176,0,0,0,63,0,16,0,84,0,236,0,16,0,221,0,223,0,255,0,163,0,121,0,70,0,240,0,0,0,0,0,154,0,182,0,0,0,216,0,35,0,100,0,255,0,201,0,48,0,71,0,0,0,186,0,8,0,57,0,212,0,72,0,33,0,18,0,141,0,212,0,147,0,147,0,0,0,0,0,190,0,236,0,82,0,229,0,0,0,223,0,61,0,0,0,0,0,184,0,50,0,98,0,244,0,167,0,147,0,96,0,181,0,171,0,211,0,247,0,0,0,42,0,68,0,102,0,210,0,60,0,15,0,213,0,249,0,228,0,248,0,1,0,221,0,120,0,183,0,206,0,92,0,181,0,51,0,41,0,0,0,178,0,0,0,247,0,255,0,0,0,0,0,155,0,0,0,85,0,246,0,207,0,0,0,62,0,226,0,98,0,88,0,241,0,209,0,224,0,57,0,0,0,159,0,197,0,25,0,140,0,6,0,106,0,236,0,0,0,4,0,197,0,164,0,130,0,223,0,0,0,72,0,239,0,194,0,0,0,121,0,0,0,86,0,144,0,113,0,0,0,108,0,206,0,96,0,227,0,100,0,0,0,207,0,137,0,0,0,184,0,0,0,77,0,0,0,205,0,158,0,0,0,129,0,52,0,244,0,133,0,198,0,152,0,0,0,0,0,0,0,0,0,137,0,205,0,78,0,0,0,254,0,74,0,143,0,189,0,178,0,57,0,0,0,193,0,193,0,250,0,207,0,77,0,37,0,245,0,47,0,20,0,187,0,0,0,110,0,0,0,224,0,96,0,2,0,188,0,104,0,212,0,219,0,131,0,234,0,202,0,28,0,155,0,250,0,244,0,122,0,0,0,0,0,143,0,110,0,155,0,40,0,181,0,89,0,5,0,0,0,202,0,81,0,76,0,200,0,217,0,0,0,136,0,164,0,94,0,8,0,171,0,197,0,35,0,34,0,191,0,239,0,0,0,27,0,142,0,160,0,70,0,34,0,36,0,0,0,0,0,91,0,235,0,93,0,190,0,222,0,62,0,76,0,228,0,149,0,236,0,0,0,174,0,0,0,188,0,0,0,167,0,0,0,189,0,124,0,0,0,0,0,243,0,34,0,52,0,255,0,0,0,204,0,207,0,196,0,0,0,90,0,16,0,2,0,235,0,6,0,115,0,73,0,126,0,254,0,122,0,24,0,90,0,119,0,0,0,241,0,246,0,108,0,201,0,48,0,14,0,99,0,31,0,38,0,121,0,137,0,20,0,196,0,0,0,188,0,191,0,139,0);
signal scenario_full  : scenario_type := (0,0,0,0,89,31,144,31,227,31,204,31,195,31,123,31,177,31,31,31,65,31,192,31,192,31,192,30,202,31,181,31,61,31,10,31,145,31,244,31,244,30,121,31,212,31,140,31,181,31,83,31,174,31,66,31,158,31,158,30,74,31,119,31,255,31,150,31,100,31,100,30,138,31,152,31,254,31,177,31,11,31,11,30,142,31,98,31,109,31,109,30,40,31,165,31,87,31,246,31,103,31,1,31,92,31,80,31,122,31,26,31,200,31,77,31,40,31,181,31,181,30,142,31,117,31,14,31,220,31,14,31,183,31,225,31,225,30,161,31,161,30,207,31,145,31,145,30,20,31,181,31,123,31,58,31,186,31,84,31,84,30,80,31,214,31,237,31,69,31,105,31,91,31,91,30,91,29,91,28,12,31,180,31,125,31,156,31,154,31,154,30,154,29,43,31,176,31,176,30,16,31,186,31,10,31,56,31,185,31,189,31,160,31,140,31,21,31,105,31,52,31,18,31,105,31,241,31,129,31,3,31,146,31,238,31,57,31,235,31,224,31,199,31,199,30,232,31,10,31,10,30,72,31,72,30,213,31,94,31,198,31,117,31,63,31,48,31,48,30,235,31,235,30,143,31,23,31,37,31,243,31,139,31,58,31,139,31,247,31,29,31,44,31,44,30,232,31,233,31,233,30,186,31,250,31,213,31,60,31,220,31,220,30,218,31,14,31,248,31,221,31,208,31,230,31,12,31,12,30,30,31,15,31,149,31,149,30,87,31,1,31,114,31,243,31,246,31,211,31,117,31,156,31,18,31,80,31,80,30,104,31,104,30,219,31,126,31,55,31,55,30,22,31,215,31,163,31,191,31,241,31,151,31,105,31,229,31,50,31,50,30,79,31,176,31,176,30,63,31,16,31,84,31,236,31,16,31,221,31,223,31,255,31,163,31,121,31,70,31,240,31,240,30,240,29,154,31,182,31,182,30,216,31,35,31,100,31,255,31,201,31,48,31,71,31,71,30,186,31,8,31,57,31,212,31,72,31,33,31,18,31,141,31,212,31,147,31,147,31,147,30,147,29,190,31,236,31,82,31,229,31,229,30,223,31,61,31,61,30,61,29,184,31,50,31,98,31,244,31,167,31,147,31,96,31,181,31,171,31,211,31,247,31,247,30,42,31,68,31,102,31,210,31,60,31,15,31,213,31,249,31,228,31,248,31,1,31,221,31,120,31,183,31,206,31,92,31,181,31,51,31,41,31,41,30,178,31,178,30,247,31,255,31,255,30,255,29,155,31,155,30,85,31,246,31,207,31,207,30,62,31,226,31,98,31,88,31,241,31,209,31,224,31,57,31,57,30,159,31,197,31,25,31,140,31,6,31,106,31,236,31,236,30,4,31,197,31,164,31,130,31,223,31,223,30,72,31,239,31,194,31,194,30,121,31,121,30,86,31,144,31,113,31,113,30,108,31,206,31,96,31,227,31,100,31,100,30,207,31,137,31,137,30,184,31,184,30,77,31,77,30,205,31,158,31,158,30,129,31,52,31,244,31,133,31,198,31,152,31,152,30,152,29,152,28,152,27,137,31,205,31,78,31,78,30,254,31,74,31,143,31,189,31,178,31,57,31,57,30,193,31,193,31,250,31,207,31,77,31,37,31,245,31,47,31,20,31,187,31,187,30,110,31,110,30,224,31,96,31,2,31,188,31,104,31,212,31,219,31,131,31,234,31,202,31,28,31,155,31,250,31,244,31,122,31,122,30,122,29,143,31,110,31,155,31,40,31,181,31,89,31,5,31,5,30,202,31,81,31,76,31,200,31,217,31,217,30,136,31,164,31,94,31,8,31,171,31,197,31,35,31,34,31,191,31,239,31,239,30,27,31,142,31,160,31,70,31,34,31,36,31,36,30,36,29,91,31,235,31,93,31,190,31,222,31,62,31,76,31,228,31,149,31,236,31,236,30,174,31,174,30,188,31,188,30,167,31,167,30,189,31,124,31,124,30,124,29,243,31,34,31,52,31,255,31,255,30,204,31,207,31,196,31,196,30,90,31,16,31,2,31,235,31,6,31,115,31,73,31,126,31,254,31,122,31,24,31,90,31,119,31,119,30,241,31,246,31,108,31,201,31,48,31,14,31,99,31,31,31,38,31,121,31,137,31,20,31,196,31,196,30,188,31,191,31,139,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
