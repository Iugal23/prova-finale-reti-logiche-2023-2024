-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 779;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (175,0,110,0,89,0,35,0,164,0,211,0,188,0,56,0,101,0,124,0,254,0,89,0,44,0,226,0,0,0,6,0,31,0,84,0,247,0,74,0,51,0,162,0,7,0,0,0,0,0,176,0,182,0,92,0,75,0,227,0,0,0,195,0,0,0,208,0,89,0,111,0,0,0,189,0,231,0,232,0,33,0,121,0,225,0,232,0,185,0,76,0,6,0,75,0,178,0,141,0,0,0,120,0,195,0,0,0,46,0,56,0,33,0,0,0,0,0,0,0,39,0,0,0,162,0,52,0,170,0,104,0,188,0,0,0,55,0,165,0,222,0,163,0,133,0,150,0,54,0,0,0,143,0,6,0,159,0,0,0,238,0,183,0,150,0,217,0,172,0,208,0,145,0,0,0,133,0,0,0,0,0,80,0,159,0,242,0,0,0,0,0,214,0,199,0,132,0,0,0,62,0,0,0,0,0,194,0,133,0,138,0,203,0,96,0,201,0,116,0,80,0,233,0,36,0,0,0,84,0,154,0,0,0,13,0,0,0,55,0,195,0,213,0,217,0,132,0,49,0,91,0,165,0,0,0,0,0,134,0,182,0,184,0,155,0,127,0,0,0,251,0,110,0,124,0,251,0,0,0,201,0,7,0,46,0,184,0,105,0,51,0,0,0,101,0,19,0,71,0,233,0,63,0,115,0,158,0,209,0,194,0,219,0,91,0,0,0,203,0,15,0,0,0,101,0,0,0,187,0,4,0,220,0,195,0,54,0,22,0,18,0,45,0,0,0,53,0,0,0,168,0,91,0,13,0,109,0,97,0,0,0,99,0,194,0,113,0,88,0,94,0,121,0,119,0,47,0,126,0,170,0,73,0,127,0,52,0,92,0,140,0,2,0,245,0,0,0,93,0,58,0,183,0,0,0,166,0,101,0,160,0,82,0,155,0,0,0,0,0,100,0,8,0,244,0,153,0,176,0,0,0,0,0,65,0,0,0,34,0,1,0,0,0,143,0,251,0,191,0,115,0,136,0,0,0,124,0,0,0,0,0,107,0,118,0,88,0,4,0,0,0,132,0,195,0,190,0,115,0,192,0,176,0,141,0,0,0,69,0,208,0,198,0,0,0,15,0,67,0,3,0,20,0,171,0,73,0,0,0,169,0,109,0,99,0,201,0,44,0,0,0,0,0,241,0,86,0,213,0,134,0,238,0,0,0,174,0,215,0,4,0,94,0,0,0,81,0,0,0,85,0,0,0,0,0,72,0,0,0,135,0,162,0,154,0,0,0,34,0,234,0,250,0,91,0,117,0,116,0,209,0,66,0,52,0,247,0,184,0,233,0,249,0,163,0,131,0,142,0,121,0,146,0,119,0,173,0,146,0,181,0,0,0,46,0,22,0,148,0,150,0,93,0,0,0,113,0,11,0,17,0,12,0,237,0,126,0,133,0,94,0,89,0,98,0,68,0,199,0,107,0,155,0,37,0,94,0,29,0,90,0,5,0,133,0,39,0,49,0,47,0,149,0,129,0,106,0,86,0,149,0,0,0,169,0,70,0,0,0,67,0,248,0,0,0,205,0,87,0,251,0,0,0,108,0,208,0,0,0,0,0,215,0,0,0,0,0,0,0,184,0,0,0,180,0,17,0,0,0,0,0,212,0,249,0,95,0,0,0,14,0,110,0,64,0,0,0,0,0,34,0,242,0,117,0,117,0,0,0,141,0,250,0,75,0,144,0,0,0,175,0,28,0,81,0,243,0,182,0,116,0,222,0,131,0,152,0,206,0,0,0,54,0,103,0,127,0,204,0,150,0,168,0,65,0,0,0,69,0,125,0,130,0,0,0,242,0,0,0,96,0,242,0,101,0,74,0,246,0,36,0,215,0,97,0,223,0,167,0,0,0,0,0,48,0,251,0,158,0,94,0,89,0,174,0,106,0,143,0,90,0,13,0,66,0,180,0,198,0,59,0,44,0,102,0,206,0,0,0,41,0,187,0,0,0,91,0,176,0,36,0,91,0,22,0,0,0,177,0,135,0,56,0,225,0,242,0,11,0,0,0,114,0,72,0,43,0,217,0,184,0,55,0,183,0,202,0,159,0,52,0,0,0,72,0,31,0,118,0,0,0,148,0,48,0,181,0,0,0,0,0,187,0,166,0,166,0,62,0,227,0,108,0,134,0,0,0,51,0,90,0,10,0,38,0,238,0,248,0,16,0,11,0,24,0,129,0,121,0,116,0,8,0,117,0,170,0,0,0,214,0,248,0,250,0,229,0,62,0,147,0,170,0,111,0,110,0,134,0,61,0,114,0,90,0,205,0,208,0,49,0,0,0,31,0,162,0,21,0,0,0,36,0,0,0,143,0,74,0,92,0,138,0,236,0,10,0,2,0,0,0,183,0,74,0,158,0,189,0,222,0,0,0,0,0,176,0,77,0,112,0,32,0,149,0,13,0,0,0,122,0,170,0,103,0,28,0,117,0,149,0,0,0,148,0,206,0,101,0,0,0,0,0,0,0,221,0,44,0,124,0,0,0,115,0,98,0,105,0,208,0,166,0,187,0,74,0,222,0,0,0,165,0,81,0,175,0,0,0,108,0,0,0,58,0,0,0,0,0,104,0,145,0,199,0,100,0,60,0,0,0,13,0,116,0,83,0,225,0,0,0,115,0,0,0,0,0,0,0,0,0,208,0,145,0,53,0,0,0,0,0,37,0,99,0,0,0,148,0,0,0,22,0,0,0,32,0,175,0,0,0,173,0,173,0,137,0,62,0,52,0,157,0,239,0,193,0,49,0,0,0,121,0,83,0,129,0,71,0,70,0,10,0,173,0,210,0,220,0,0,0,166,0,0,0,92,0,202,0,0,0,145,0,216,0,207,0,143,0,200,0,0,0,0,0,116,0,133,0,185,0,92,0,133,0,153,0,0,0,37,0,73,0,79,0,0,0,147,0,158,0,5,0,54,0,61,0,114,0,12,0,0,0,124,0,8,0,121,0,110,0,127,0,229,0,125,0,42,0,226,0,104,0,92,0,0,0,191,0,218,0,0,0,238,0,155,0,110,0,160,0,214,0,30,0,150,0,189,0,236,0,247,0,0,0,153,0,0,0,79,0,0,0,98,0,190,0,3,0,197,0,0,0,216,0,233,0,134,0,0,0,45,0,0,0,0,0,153,0,239,0,223,0,18,0,47,0,62,0,75,0,0,0,57,0,207,0,238,0,203,0,0,0,91,0,146,0,39,0,213,0,154,0,117,0,161,0,34,0,187,0,25,0,217,0,0,0,227,0,8,0,188,0,0,0,0,0,29,0,90,0,0,0,89,0,245,0,189,0,0,0,73,0,75,0,186,0,90,0,11,0,202,0,166,0,112,0,166,0,198,0,0,0,107,0,229,0,42,0,180,0,209,0,226,0,30,0,0,0,11,0,71,0,0,0,0,0,220,0,62,0,185,0,0,0,0,0,200,0,195,0,102,0,73,0,155,0,44,0,27,0,140,0,241,0,226,0);
signal scenario_full  : scenario_type := (175,31,110,31,89,31,35,31,164,31,211,31,188,31,56,31,101,31,124,31,254,31,89,31,44,31,226,31,226,30,6,31,31,31,84,31,247,31,74,31,51,31,162,31,7,31,7,30,7,29,176,31,182,31,92,31,75,31,227,31,227,30,195,31,195,30,208,31,89,31,111,31,111,30,189,31,231,31,232,31,33,31,121,31,225,31,232,31,185,31,76,31,6,31,75,31,178,31,141,31,141,30,120,31,195,31,195,30,46,31,56,31,33,31,33,30,33,29,33,28,39,31,39,30,162,31,52,31,170,31,104,31,188,31,188,30,55,31,165,31,222,31,163,31,133,31,150,31,54,31,54,30,143,31,6,31,159,31,159,30,238,31,183,31,150,31,217,31,172,31,208,31,145,31,145,30,133,31,133,30,133,29,80,31,159,31,242,31,242,30,242,29,214,31,199,31,132,31,132,30,62,31,62,30,62,29,194,31,133,31,138,31,203,31,96,31,201,31,116,31,80,31,233,31,36,31,36,30,84,31,154,31,154,30,13,31,13,30,55,31,195,31,213,31,217,31,132,31,49,31,91,31,165,31,165,30,165,29,134,31,182,31,184,31,155,31,127,31,127,30,251,31,110,31,124,31,251,31,251,30,201,31,7,31,46,31,184,31,105,31,51,31,51,30,101,31,19,31,71,31,233,31,63,31,115,31,158,31,209,31,194,31,219,31,91,31,91,30,203,31,15,31,15,30,101,31,101,30,187,31,4,31,220,31,195,31,54,31,22,31,18,31,45,31,45,30,53,31,53,30,168,31,91,31,13,31,109,31,97,31,97,30,99,31,194,31,113,31,88,31,94,31,121,31,119,31,47,31,126,31,170,31,73,31,127,31,52,31,92,31,140,31,2,31,245,31,245,30,93,31,58,31,183,31,183,30,166,31,101,31,160,31,82,31,155,31,155,30,155,29,100,31,8,31,244,31,153,31,176,31,176,30,176,29,65,31,65,30,34,31,1,31,1,30,143,31,251,31,191,31,115,31,136,31,136,30,124,31,124,30,124,29,107,31,118,31,88,31,4,31,4,30,132,31,195,31,190,31,115,31,192,31,176,31,141,31,141,30,69,31,208,31,198,31,198,30,15,31,67,31,3,31,20,31,171,31,73,31,73,30,169,31,109,31,99,31,201,31,44,31,44,30,44,29,241,31,86,31,213,31,134,31,238,31,238,30,174,31,215,31,4,31,94,31,94,30,81,31,81,30,85,31,85,30,85,29,72,31,72,30,135,31,162,31,154,31,154,30,34,31,234,31,250,31,91,31,117,31,116,31,209,31,66,31,52,31,247,31,184,31,233,31,249,31,163,31,131,31,142,31,121,31,146,31,119,31,173,31,146,31,181,31,181,30,46,31,22,31,148,31,150,31,93,31,93,30,113,31,11,31,17,31,12,31,237,31,126,31,133,31,94,31,89,31,98,31,68,31,199,31,107,31,155,31,37,31,94,31,29,31,90,31,5,31,133,31,39,31,49,31,47,31,149,31,129,31,106,31,86,31,149,31,149,30,169,31,70,31,70,30,67,31,248,31,248,30,205,31,87,31,251,31,251,30,108,31,208,31,208,30,208,29,215,31,215,30,215,29,215,28,184,31,184,30,180,31,17,31,17,30,17,29,212,31,249,31,95,31,95,30,14,31,110,31,64,31,64,30,64,29,34,31,242,31,117,31,117,31,117,30,141,31,250,31,75,31,144,31,144,30,175,31,28,31,81,31,243,31,182,31,116,31,222,31,131,31,152,31,206,31,206,30,54,31,103,31,127,31,204,31,150,31,168,31,65,31,65,30,69,31,125,31,130,31,130,30,242,31,242,30,96,31,242,31,101,31,74,31,246,31,36,31,215,31,97,31,223,31,167,31,167,30,167,29,48,31,251,31,158,31,94,31,89,31,174,31,106,31,143,31,90,31,13,31,66,31,180,31,198,31,59,31,44,31,102,31,206,31,206,30,41,31,187,31,187,30,91,31,176,31,36,31,91,31,22,31,22,30,177,31,135,31,56,31,225,31,242,31,11,31,11,30,114,31,72,31,43,31,217,31,184,31,55,31,183,31,202,31,159,31,52,31,52,30,72,31,31,31,118,31,118,30,148,31,48,31,181,31,181,30,181,29,187,31,166,31,166,31,62,31,227,31,108,31,134,31,134,30,51,31,90,31,10,31,38,31,238,31,248,31,16,31,11,31,24,31,129,31,121,31,116,31,8,31,117,31,170,31,170,30,214,31,248,31,250,31,229,31,62,31,147,31,170,31,111,31,110,31,134,31,61,31,114,31,90,31,205,31,208,31,49,31,49,30,31,31,162,31,21,31,21,30,36,31,36,30,143,31,74,31,92,31,138,31,236,31,10,31,2,31,2,30,183,31,74,31,158,31,189,31,222,31,222,30,222,29,176,31,77,31,112,31,32,31,149,31,13,31,13,30,122,31,170,31,103,31,28,31,117,31,149,31,149,30,148,31,206,31,101,31,101,30,101,29,101,28,221,31,44,31,124,31,124,30,115,31,98,31,105,31,208,31,166,31,187,31,74,31,222,31,222,30,165,31,81,31,175,31,175,30,108,31,108,30,58,31,58,30,58,29,104,31,145,31,199,31,100,31,60,31,60,30,13,31,116,31,83,31,225,31,225,30,115,31,115,30,115,29,115,28,115,27,208,31,145,31,53,31,53,30,53,29,37,31,99,31,99,30,148,31,148,30,22,31,22,30,32,31,175,31,175,30,173,31,173,31,137,31,62,31,52,31,157,31,239,31,193,31,49,31,49,30,121,31,83,31,129,31,71,31,70,31,10,31,173,31,210,31,220,31,220,30,166,31,166,30,92,31,202,31,202,30,145,31,216,31,207,31,143,31,200,31,200,30,200,29,116,31,133,31,185,31,92,31,133,31,153,31,153,30,37,31,73,31,79,31,79,30,147,31,158,31,5,31,54,31,61,31,114,31,12,31,12,30,124,31,8,31,121,31,110,31,127,31,229,31,125,31,42,31,226,31,104,31,92,31,92,30,191,31,218,31,218,30,238,31,155,31,110,31,160,31,214,31,30,31,150,31,189,31,236,31,247,31,247,30,153,31,153,30,79,31,79,30,98,31,190,31,3,31,197,31,197,30,216,31,233,31,134,31,134,30,45,31,45,30,45,29,153,31,239,31,223,31,18,31,47,31,62,31,75,31,75,30,57,31,207,31,238,31,203,31,203,30,91,31,146,31,39,31,213,31,154,31,117,31,161,31,34,31,187,31,25,31,217,31,217,30,227,31,8,31,188,31,188,30,188,29,29,31,90,31,90,30,89,31,245,31,189,31,189,30,73,31,75,31,186,31,90,31,11,31,202,31,166,31,112,31,166,31,198,31,198,30,107,31,229,31,42,31,180,31,209,31,226,31,30,31,30,30,11,31,71,31,71,30,71,29,220,31,62,31,185,31,185,30,185,29,200,31,195,31,102,31,73,31,155,31,44,31,27,31,140,31,241,31,226,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
