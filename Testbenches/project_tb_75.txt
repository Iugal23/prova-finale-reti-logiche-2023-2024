-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 870;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (31,0,42,0,123,0,243,0,145,0,43,0,170,0,154,0,3,0,68,0,0,0,0,0,0,0,104,0,228,0,137,0,228,0,219,0,0,0,85,0,48,0,145,0,0,0,169,0,243,0,122,0,61,0,0,0,148,0,224,0,0,0,0,0,179,0,51,0,61,0,34,0,0,0,131,0,188,0,19,0,219,0,0,0,237,0,4,0,217,0,0,0,115,0,0,0,143,0,204,0,53,0,22,0,33,0,172,0,0,0,0,0,164,0,0,0,207,0,230,0,0,0,90,0,235,0,179,0,198,0,0,0,102,0,88,0,160,0,108,0,183,0,205,0,164,0,36,0,43,0,245,0,195,0,78,0,61,0,0,0,0,0,221,0,238,0,35,0,59,0,52,0,56,0,250,0,0,0,4,0,0,0,0,0,0,0,69,0,0,0,117,0,147,0,31,0,156,0,232,0,220,0,90,0,142,0,0,0,29,0,0,0,153,0,48,0,224,0,43,0,148,0,6,0,91,0,95,0,67,0,148,0,156,0,51,0,0,0,0,0,185,0,0,0,51,0,0,0,53,0,21,0,83,0,96,0,241,0,0,0,0,0,69,0,222,0,59,0,12,0,96,0,46,0,62,0,218,0,69,0,142,0,43,0,0,0,0,0,208,0,118,0,0,0,19,0,59,0,32,0,73,0,0,0,186,0,125,0,221,0,0,0,43,0,15,0,116,0,33,0,3,0,0,0,0,0,216,0,15,0,86,0,0,0,0,0,0,0,116,0,0,0,0,0,132,0,192,0,0,0,0,0,103,0,230,0,184,0,109,0,127,0,202,0,71,0,0,0,229,0,64,0,131,0,103,0,236,0,110,0,195,0,129,0,10,0,222,0,247,0,104,0,184,0,23,0,96,0,81,0,20,0,111,0,200,0,164,0,135,0,21,0,10,0,182,0,84,0,59,0,143,0,148,0,244,0,210,0,175,0,0,0,16,0,59,0,192,0,0,0,148,0,224,0,13,0,121,0,232,0,87,0,0,0,224,0,97,0,4,0,0,0,106,0,223,0,0,0,21,0,0,0,11,0,138,0,51,0,0,0,224,0,28,0,0,0,127,0,241,0,244,0,245,0,119,0,32,0,26,0,5,0,181,0,0,0,130,0,38,0,0,0,193,0,248,0,0,0,0,0,241,0,244,0,0,0,124,0,178,0,0,0,0,0,122,0,250,0,0,0,40,0,0,0,200,0,202,0,250,0,0,0,31,0,129,0,0,0,59,0,63,0,32,0,217,0,133,0,51,0,156,0,0,0,107,0,0,0,26,0,185,0,30,0,216,0,205,0,97,0,158,0,237,0,0,0,93,0,142,0,242,0,14,0,0,0,24,0,91,0,244,0,219,0,103,0,181,0,147,0,113,0,167,0,0,0,28,0,55,0,0,0,158,0,0,0,202,0,75,0,110,0,122,0,54,0,145,0,107,0,75,0,169,0,32,0,36,0,207,0,95,0,89,0,0,0,0,0,230,0,87,0,23,0,166,0,105,0,0,0,187,0,55,0,0,0,216,0,101,0,113,0,10,0,172,0,50,0,146,0,121,0,157,0,248,0,174,0,75,0,0,0,49,0,114,0,248,0,75,0,0,0,89,0,194,0,59,0,13,0,129,0,232,0,16,0,232,0,226,0,72,0,91,0,89,0,58,0,63,0,153,0,200,0,105,0,120,0,59,0,210,0,0,0,146,0,0,0,44,0,154,0,0,0,53,0,35,0,0,0,83,0,114,0,168,0,45,0,0,0,98,0,85,0,125,0,233,0,233,0,187,0,218,0,85,0,0,0,255,0,131,0,193,0,122,0,98,0,84,0,0,0,236,0,0,0,206,0,161,0,15,0,0,0,96,0,49,0,184,0,86,0,0,0,226,0,98,0,44,0,246,0,255,0,240,0,237,0,170,0,0,0,195,0,0,0,170,0,197,0,105,0,250,0,212,0,115,0,252,0,250,0,151,0,0,0,225,0,32,0,0,0,71,0,1,0,218,0,254,0,217,0,240,0,166,0,12,0,155,0,0,0,255,0,137,0,191,0,79,0,0,0,73,0,48,0,133,0,44,0,172,0,110,0,0,0,0,0,187,0,24,0,217,0,81,0,219,0,69,0,253,0,0,0,0,0,97,0,0,0,45,0,130,0,139,0,102,0,203,0,85,0,0,0,200,0,20,0,232,0,215,0,209,0,0,0,134,0,184,0,138,0,61,0,199,0,47,0,30,0,76,0,0,0,0,0,243,0,0,0,0,0,96,0,200,0,205,0,161,0,224,0,241,0,116,0,9,0,82,0,227,0,9,0,137,0,251,0,154,0,0,0,21,0,161,0,237,0,21,0,70,0,231,0,251,0,0,0,0,0,226,0,60,0,0,0,62,0,131,0,252,0,158,0,136,0,149,0,61,0,65,0,0,0,235,0,170,0,5,0,176,0,16,0,186,0,211,0,4,0,165,0,0,0,0,0,26,0,0,0,108,0,252,0,114,0,103,0,89,0,87,0,208,0,0,0,72,0,9,0,162,0,22,0,117,0,237,0,0,0,9,0,255,0,126,0,161,0,171,0,148,0,222,0,19,0,127,0,0,0,0,0,242,0,163,0,95,0,0,0,220,0,241,0,219,0,190,0,11,0,0,0,159,0,249,0,72,0,228,0,19,0,202,0,189,0,105,0,0,0,0,0,127,0,180,0,196,0,0,0,162,0,109,0,179,0,1,0,118,0,177,0,116,0,159,0,227,0,10,0,212,0,24,0,0,0,131,0,187,0,0,0,165,0,121,0,140,0,209,0,206,0,65,0,149,0,21,0,170,0,135,0,187,0,81,0,127,0,122,0,235,0,0,0,155,0,0,0,93,0,219,0,20,0,54,0,135,0,227,0,186,0,33,0,0,0,73,0,53,0,85,0,29,0,91,0,26,0,216,0,54,0,35,0,36,0,32,0,0,0,1,0,127,0,53,0,117,0,0,0,159,0,21,0,217,0,69,0,141,0,231,0,112,0,210,0,0,0,0,0,169,0,28,0,14,0,112,0,0,0,24,0,70,0,145,0,0,0,236,0,104,0,195,0,127,0,242,0,27,0,0,0,230,0,0,0,191,0,34,0,242,0,116,0,0,0,29,0,0,0,1,0,244,0,0,0,0,0,183,0,188,0,80,0,232,0,0,0,79,0,230,0,54,0,173,0,201,0,51,0,96,0,173,0,15,0,196,0,234,0,166,0,0,0,74,0,90,0,152,0,83,0,0,0,42,0,0,0,129,0,9,0,118,0,208,0,190,0,80,0,9,0,218,0,135,0,127,0,237,0,0,0,225,0,149,0,175,0,0,0,108,0,0,0,0,0,23,0,151,0,0,0,212,0,10,0,236,0,104,0,181,0,161,0,161,0,0,0,234,0,101,0,109,0,0,0,113,0,244,0,207,0,0,0,111,0,62,0,0,0,50,0,178,0,12,0,193,0,129,0,195,0,0,0,208,0,224,0,101,0,194,0,28,0,147,0,83,0,126,0,18,0,28,0,74,0,0,0,0,0,102,0,171,0,121,0,108,0,0,0,226,0,0,0,61,0,151,0,0,0,54,0,0,0,164,0,186,0,254,0,9,0,17,0,113,0,13,0,167,0,232,0,136,0,0,0,162,0,82,0,146,0,0,0,196,0,198,0,107,0,160,0,76,0,100,0,142,0,226,0,173,0,201,0,0,0,74,0,32,0,4,0,60,0,0,0,92,0,0,0,0,0,227,0,216,0,153,0,0,0,212,0,72,0,89,0,234,0,109,0,198,0,165,0,177,0,0,0,0,0,0,0,162,0,0,0,18,0,2,0,224,0,190,0,192,0,109,0,61,0,35,0,97,0,68,0,0,0,0,0,0,0,97,0,177,0,182,0,0,0);
signal scenario_full  : scenario_type := (31,31,42,31,123,31,243,31,145,31,43,31,170,31,154,31,3,31,68,31,68,30,68,29,68,28,104,31,228,31,137,31,228,31,219,31,219,30,85,31,48,31,145,31,145,30,169,31,243,31,122,31,61,31,61,30,148,31,224,31,224,30,224,29,179,31,51,31,61,31,34,31,34,30,131,31,188,31,19,31,219,31,219,30,237,31,4,31,217,31,217,30,115,31,115,30,143,31,204,31,53,31,22,31,33,31,172,31,172,30,172,29,164,31,164,30,207,31,230,31,230,30,90,31,235,31,179,31,198,31,198,30,102,31,88,31,160,31,108,31,183,31,205,31,164,31,36,31,43,31,245,31,195,31,78,31,61,31,61,30,61,29,221,31,238,31,35,31,59,31,52,31,56,31,250,31,250,30,4,31,4,30,4,29,4,28,69,31,69,30,117,31,147,31,31,31,156,31,232,31,220,31,90,31,142,31,142,30,29,31,29,30,153,31,48,31,224,31,43,31,148,31,6,31,91,31,95,31,67,31,148,31,156,31,51,31,51,30,51,29,185,31,185,30,51,31,51,30,53,31,21,31,83,31,96,31,241,31,241,30,241,29,69,31,222,31,59,31,12,31,96,31,46,31,62,31,218,31,69,31,142,31,43,31,43,30,43,29,208,31,118,31,118,30,19,31,59,31,32,31,73,31,73,30,186,31,125,31,221,31,221,30,43,31,15,31,116,31,33,31,3,31,3,30,3,29,216,31,15,31,86,31,86,30,86,29,86,28,116,31,116,30,116,29,132,31,192,31,192,30,192,29,103,31,230,31,184,31,109,31,127,31,202,31,71,31,71,30,229,31,64,31,131,31,103,31,236,31,110,31,195,31,129,31,10,31,222,31,247,31,104,31,184,31,23,31,96,31,81,31,20,31,111,31,200,31,164,31,135,31,21,31,10,31,182,31,84,31,59,31,143,31,148,31,244,31,210,31,175,31,175,30,16,31,59,31,192,31,192,30,148,31,224,31,13,31,121,31,232,31,87,31,87,30,224,31,97,31,4,31,4,30,106,31,223,31,223,30,21,31,21,30,11,31,138,31,51,31,51,30,224,31,28,31,28,30,127,31,241,31,244,31,245,31,119,31,32,31,26,31,5,31,181,31,181,30,130,31,38,31,38,30,193,31,248,31,248,30,248,29,241,31,244,31,244,30,124,31,178,31,178,30,178,29,122,31,250,31,250,30,40,31,40,30,200,31,202,31,250,31,250,30,31,31,129,31,129,30,59,31,63,31,32,31,217,31,133,31,51,31,156,31,156,30,107,31,107,30,26,31,185,31,30,31,216,31,205,31,97,31,158,31,237,31,237,30,93,31,142,31,242,31,14,31,14,30,24,31,91,31,244,31,219,31,103,31,181,31,147,31,113,31,167,31,167,30,28,31,55,31,55,30,158,31,158,30,202,31,75,31,110,31,122,31,54,31,145,31,107,31,75,31,169,31,32,31,36,31,207,31,95,31,89,31,89,30,89,29,230,31,87,31,23,31,166,31,105,31,105,30,187,31,55,31,55,30,216,31,101,31,113,31,10,31,172,31,50,31,146,31,121,31,157,31,248,31,174,31,75,31,75,30,49,31,114,31,248,31,75,31,75,30,89,31,194,31,59,31,13,31,129,31,232,31,16,31,232,31,226,31,72,31,91,31,89,31,58,31,63,31,153,31,200,31,105,31,120,31,59,31,210,31,210,30,146,31,146,30,44,31,154,31,154,30,53,31,35,31,35,30,83,31,114,31,168,31,45,31,45,30,98,31,85,31,125,31,233,31,233,31,187,31,218,31,85,31,85,30,255,31,131,31,193,31,122,31,98,31,84,31,84,30,236,31,236,30,206,31,161,31,15,31,15,30,96,31,49,31,184,31,86,31,86,30,226,31,98,31,44,31,246,31,255,31,240,31,237,31,170,31,170,30,195,31,195,30,170,31,197,31,105,31,250,31,212,31,115,31,252,31,250,31,151,31,151,30,225,31,32,31,32,30,71,31,1,31,218,31,254,31,217,31,240,31,166,31,12,31,155,31,155,30,255,31,137,31,191,31,79,31,79,30,73,31,48,31,133,31,44,31,172,31,110,31,110,30,110,29,187,31,24,31,217,31,81,31,219,31,69,31,253,31,253,30,253,29,97,31,97,30,45,31,130,31,139,31,102,31,203,31,85,31,85,30,200,31,20,31,232,31,215,31,209,31,209,30,134,31,184,31,138,31,61,31,199,31,47,31,30,31,76,31,76,30,76,29,243,31,243,30,243,29,96,31,200,31,205,31,161,31,224,31,241,31,116,31,9,31,82,31,227,31,9,31,137,31,251,31,154,31,154,30,21,31,161,31,237,31,21,31,70,31,231,31,251,31,251,30,251,29,226,31,60,31,60,30,62,31,131,31,252,31,158,31,136,31,149,31,61,31,65,31,65,30,235,31,170,31,5,31,176,31,16,31,186,31,211,31,4,31,165,31,165,30,165,29,26,31,26,30,108,31,252,31,114,31,103,31,89,31,87,31,208,31,208,30,72,31,9,31,162,31,22,31,117,31,237,31,237,30,9,31,255,31,126,31,161,31,171,31,148,31,222,31,19,31,127,31,127,30,127,29,242,31,163,31,95,31,95,30,220,31,241,31,219,31,190,31,11,31,11,30,159,31,249,31,72,31,228,31,19,31,202,31,189,31,105,31,105,30,105,29,127,31,180,31,196,31,196,30,162,31,109,31,179,31,1,31,118,31,177,31,116,31,159,31,227,31,10,31,212,31,24,31,24,30,131,31,187,31,187,30,165,31,121,31,140,31,209,31,206,31,65,31,149,31,21,31,170,31,135,31,187,31,81,31,127,31,122,31,235,31,235,30,155,31,155,30,93,31,219,31,20,31,54,31,135,31,227,31,186,31,33,31,33,30,73,31,53,31,85,31,29,31,91,31,26,31,216,31,54,31,35,31,36,31,32,31,32,30,1,31,127,31,53,31,117,31,117,30,159,31,21,31,217,31,69,31,141,31,231,31,112,31,210,31,210,30,210,29,169,31,28,31,14,31,112,31,112,30,24,31,70,31,145,31,145,30,236,31,104,31,195,31,127,31,242,31,27,31,27,30,230,31,230,30,191,31,34,31,242,31,116,31,116,30,29,31,29,30,1,31,244,31,244,30,244,29,183,31,188,31,80,31,232,31,232,30,79,31,230,31,54,31,173,31,201,31,51,31,96,31,173,31,15,31,196,31,234,31,166,31,166,30,74,31,90,31,152,31,83,31,83,30,42,31,42,30,129,31,9,31,118,31,208,31,190,31,80,31,9,31,218,31,135,31,127,31,237,31,237,30,225,31,149,31,175,31,175,30,108,31,108,30,108,29,23,31,151,31,151,30,212,31,10,31,236,31,104,31,181,31,161,31,161,31,161,30,234,31,101,31,109,31,109,30,113,31,244,31,207,31,207,30,111,31,62,31,62,30,50,31,178,31,12,31,193,31,129,31,195,31,195,30,208,31,224,31,101,31,194,31,28,31,147,31,83,31,126,31,18,31,28,31,74,31,74,30,74,29,102,31,171,31,121,31,108,31,108,30,226,31,226,30,61,31,151,31,151,30,54,31,54,30,164,31,186,31,254,31,9,31,17,31,113,31,13,31,167,31,232,31,136,31,136,30,162,31,82,31,146,31,146,30,196,31,198,31,107,31,160,31,76,31,100,31,142,31,226,31,173,31,201,31,201,30,74,31,32,31,4,31,60,31,60,30,92,31,92,30,92,29,227,31,216,31,153,31,153,30,212,31,72,31,89,31,234,31,109,31,198,31,165,31,177,31,177,30,177,29,177,28,162,31,162,30,18,31,2,31,224,31,190,31,192,31,109,31,61,31,35,31,97,31,68,31,68,30,68,29,68,28,97,31,177,31,182,31,182,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
