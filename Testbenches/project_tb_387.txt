-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 804;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (224,0,121,0,25,0,66,0,148,0,42,0,133,0,0,0,115,0,0,0,34,0,0,0,0,0,0,0,170,0,170,0,0,0,106,0,0,0,0,0,125,0,0,0,4,0,211,0,179,0,0,0,187,0,153,0,174,0,0,0,93,0,0,0,113,0,24,0,0,0,0,0,130,0,0,0,234,0,195,0,46,0,177,0,0,0,0,0,91,0,193,0,140,0,227,0,250,0,225,0,70,0,0,0,62,0,165,0,0,0,0,0,96,0,11,0,0,0,12,0,140,0,17,0,36,0,0,0,28,0,162,0,225,0,40,0,97,0,123,0,0,0,171,0,132,0,0,0,107,0,163,0,77,0,49,0,215,0,29,0,0,0,222,0,249,0,52,0,143,0,175,0,0,0,0,0,187,0,198,0,141,0,10,0,246,0,34,0,0,0,64,0,0,0,0,0,43,0,97,0,96,0,0,0,111,0,99,0,123,0,145,0,74,0,11,0,0,0,0,0,8,0,104,0,0,0,46,0,130,0,11,0,0,0,179,0,238,0,0,0,99,0,28,0,132,0,0,0,146,0,23,0,113,0,0,0,184,0,46,0,0,0,229,0,0,0,240,0,101,0,0,0,4,0,94,0,248,0,238,0,33,0,97,0,88,0,46,0,151,0,71,0,255,0,9,0,43,0,0,0,115,0,222,0,205,0,0,0,171,0,85,0,131,0,30,0,170,0,25,0,253,0,94,0,40,0,243,0,40,0,0,0,191,0,91,0,95,0,66,0,127,0,212,0,219,0,39,0,6,0,131,0,92,0,234,0,100,0,191,0,213,0,0,0,0,0,47,0,14,0,0,0,42,0,214,0,0,0,238,0,178,0,0,0,224,0,0,0,178,0,49,0,89,0,207,0,116,0,166,0,71,0,22,0,197,0,207,0,0,0,0,0,212,0,75,0,235,0,2,0,0,0,72,0,138,0,0,0,0,0,213,0,0,0,166,0,89,0,162,0,64,0,191,0,33,0,0,0,228,0,0,0,210,0,181,0,50,0,163,0,156,0,213,0,44,0,0,0,139,0,61,0,73,0,202,0,97,0,202,0,103,0,186,0,128,0,0,0,69,0,84,0,113,0,102,0,30,0,41,0,227,0,156,0,189,0,35,0,124,0,54,0,163,0,125,0,220,0,106,0,64,0,244,0,0,0,0,0,156,0,23,0,17,0,234,0,186,0,202,0,0,0,21,0,223,0,9,0,0,0,182,0,182,0,121,0,138,0,41,0,13,0,30,0,207,0,34,0,140,0,207,0,95,0,212,0,160,0,170,0,205,0,241,0,89,0,188,0,9,0,103,0,223,0,79,0,77,0,129,0,45,0,41,0,239,0,174,0,0,0,233,0,214,0,0,0,86,0,54,0,65,0,124,0,79,0,193,0,34,0,248,0,0,0,159,0,251,0,4,0,0,0,120,0,107,0,139,0,0,0,68,0,105,0,0,0,202,0,192,0,153,0,0,0,65,0,0,0,105,0,230,0,158,0,13,0,3,0,36,0,111,0,63,0,175,0,0,0,170,0,148,0,50,0,0,0,236,0,149,0,231,0,86,0,142,0,229,0,226,0,3,0,165,0,0,0,166,0,1,0,9,0,0,0,136,0,26,0,59,0,15,0,113,0,107,0,198,0,96,0,0,0,0,0,240,0,39,0,254,0,169,0,137,0,178,0,70,0,197,0,25,0,104,0,0,0,126,0,150,0,133,0,0,0,0,0,30,0,238,0,0,0,200,0,141,0,0,0,172,0,0,0,183,0,132,0,55,0,70,0,226,0,0,0,0,0,140,0,152,0,0,0,110,0,148,0,37,0,0,0,36,0,0,0,211,0,0,0,217,0,50,0,50,0,210,0,193,0,0,0,101,0,176,0,25,0,248,0,60,0,167,0,108,0,142,0,84,0,216,0,93,0,71,0,130,0,0,0,226,0,86,0,0,0,101,0,252,0,210,0,0,0,218,0,35,0,0,0,15,0,47,0,215,0,240,0,0,0,92,0,97,0,105,0,139,0,238,0,112,0,196,0,84,0,9,0,173,0,197,0,192,0,0,0,214,0,143,0,131,0,251,0,0,0,243,0,172,0,173,0,200,0,0,0,0,0,74,0,69,0,38,0,73,0,84,0,0,0,134,0,25,0,156,0,18,0,5,0,212,0,126,0,0,0,159,0,189,0,88,0,38,0,251,0,200,0,139,0,12,0,80,0,0,0,237,0,176,0,150,0,160,0,143,0,139,0,146,0,208,0,102,0,0,0,0,0,239,0,0,0,79,0,226,0,26,0,43,0,85,0,0,0,150,0,0,0,0,0,0,0,255,0,158,0,42,0,236,0,161,0,28,0,142,0,91,0,0,0,105,0,11,0,117,0,65,0,7,0,156,0,60,0,186,0,236,0,65,0,249,0,0,0,225,0,216,0,167,0,26,0,0,0,7,0,147,0,0,0,70,0,28,0,58,0,34,0,147,0,74,0,207,0,18,0,126,0,0,0,138,0,235,0,84,0,88,0,0,0,0,0,0,0,50,0,0,0,164,0,151,0,0,0,174,0,235,0,106,0,0,0,99,0,180,0,14,0,241,0,43,0,78,0,163,0,56,0,6,0,246,0,198,0,44,0,23,0,183,0,146,0,34,0,208,0,39,0,102,0,184,0,165,0,0,0,183,0,185,0,246,0,199,0,131,0,24,0,0,0,139,0,0,0,37,0,220,0,2,0,0,0,89,0,123,0,123,0,0,0,21,0,229,0,0,0,0,0,214,0,186,0,11,0,202,0,0,0,91,0,0,0,239,0,254,0,157,0,116,0,176,0,214,0,141,0,0,0,32,0,185,0,171,0,125,0,126,0,115,0,78,0,138,0,6,0,0,0,0,0,226,0,219,0,0,0,147,0,47,0,16,0,0,0,0,0,105,0,11,0,160,0,111,0,126,0,43,0,186,0,254,0,56,0,113,0,42,0,173,0,28,0,128,0,108,0,0,0,22,0,11,0,16,0,231,0,215,0,104,0,0,0,0,0,136,0,237,0,27,0,121,0,24,0,0,0,183,0,249,0,142,0,0,0,157,0,130,0,61,0,216,0,12,0,105,0,118,0,234,0,124,0,53,0,245,0,3,0,183,0,97,0,0,0,11,0,27,0,0,0,139,0,52,0,63,0,127,0,190,0,72,0,242,0,100,0,60,0,160,0,27,0,149,0,182,0,0,0,0,0,0,0,190,0,149,0,202,0,65,0,0,0,93,0,85,0,111,0,0,0,0,0,0,0,0,0,196,0,0,0,18,0,222,0,92,0,234,0,245,0,218,0,73,0,94,0,73,0,194,0,0,0,172,0,0,0,172,0,192,0,0,0,217,0,66,0,5,0,114,0,0,0,127,0,98,0,19,0,68,0,93,0,183,0,66,0,7,0,101,0,255,0,214,0,0,0,57,0,113,0,0,0,199,0,9,0,57,0,138,0,0,0,33,0,170,0,23,0,0,0,255,0,0,0,85,0,0,0,34,0,250,0,168,0,143,0,167,0,53,0,33,0,198,0,193,0,200,0,196,0,12,0,0,0,116,0,74,0,81,0,0,0,32,0,247,0,159,0,0,0);
signal scenario_full  : scenario_type := (224,31,121,31,25,31,66,31,148,31,42,31,133,31,133,30,115,31,115,30,34,31,34,30,34,29,34,28,170,31,170,31,170,30,106,31,106,30,106,29,125,31,125,30,4,31,211,31,179,31,179,30,187,31,153,31,174,31,174,30,93,31,93,30,113,31,24,31,24,30,24,29,130,31,130,30,234,31,195,31,46,31,177,31,177,30,177,29,91,31,193,31,140,31,227,31,250,31,225,31,70,31,70,30,62,31,165,31,165,30,165,29,96,31,11,31,11,30,12,31,140,31,17,31,36,31,36,30,28,31,162,31,225,31,40,31,97,31,123,31,123,30,171,31,132,31,132,30,107,31,163,31,77,31,49,31,215,31,29,31,29,30,222,31,249,31,52,31,143,31,175,31,175,30,175,29,187,31,198,31,141,31,10,31,246,31,34,31,34,30,64,31,64,30,64,29,43,31,97,31,96,31,96,30,111,31,99,31,123,31,145,31,74,31,11,31,11,30,11,29,8,31,104,31,104,30,46,31,130,31,11,31,11,30,179,31,238,31,238,30,99,31,28,31,132,31,132,30,146,31,23,31,113,31,113,30,184,31,46,31,46,30,229,31,229,30,240,31,101,31,101,30,4,31,94,31,248,31,238,31,33,31,97,31,88,31,46,31,151,31,71,31,255,31,9,31,43,31,43,30,115,31,222,31,205,31,205,30,171,31,85,31,131,31,30,31,170,31,25,31,253,31,94,31,40,31,243,31,40,31,40,30,191,31,91,31,95,31,66,31,127,31,212,31,219,31,39,31,6,31,131,31,92,31,234,31,100,31,191,31,213,31,213,30,213,29,47,31,14,31,14,30,42,31,214,31,214,30,238,31,178,31,178,30,224,31,224,30,178,31,49,31,89,31,207,31,116,31,166,31,71,31,22,31,197,31,207,31,207,30,207,29,212,31,75,31,235,31,2,31,2,30,72,31,138,31,138,30,138,29,213,31,213,30,166,31,89,31,162,31,64,31,191,31,33,31,33,30,228,31,228,30,210,31,181,31,50,31,163,31,156,31,213,31,44,31,44,30,139,31,61,31,73,31,202,31,97,31,202,31,103,31,186,31,128,31,128,30,69,31,84,31,113,31,102,31,30,31,41,31,227,31,156,31,189,31,35,31,124,31,54,31,163,31,125,31,220,31,106,31,64,31,244,31,244,30,244,29,156,31,23,31,17,31,234,31,186,31,202,31,202,30,21,31,223,31,9,31,9,30,182,31,182,31,121,31,138,31,41,31,13,31,30,31,207,31,34,31,140,31,207,31,95,31,212,31,160,31,170,31,205,31,241,31,89,31,188,31,9,31,103,31,223,31,79,31,77,31,129,31,45,31,41,31,239,31,174,31,174,30,233,31,214,31,214,30,86,31,54,31,65,31,124,31,79,31,193,31,34,31,248,31,248,30,159,31,251,31,4,31,4,30,120,31,107,31,139,31,139,30,68,31,105,31,105,30,202,31,192,31,153,31,153,30,65,31,65,30,105,31,230,31,158,31,13,31,3,31,36,31,111,31,63,31,175,31,175,30,170,31,148,31,50,31,50,30,236,31,149,31,231,31,86,31,142,31,229,31,226,31,3,31,165,31,165,30,166,31,1,31,9,31,9,30,136,31,26,31,59,31,15,31,113,31,107,31,198,31,96,31,96,30,96,29,240,31,39,31,254,31,169,31,137,31,178,31,70,31,197,31,25,31,104,31,104,30,126,31,150,31,133,31,133,30,133,29,30,31,238,31,238,30,200,31,141,31,141,30,172,31,172,30,183,31,132,31,55,31,70,31,226,31,226,30,226,29,140,31,152,31,152,30,110,31,148,31,37,31,37,30,36,31,36,30,211,31,211,30,217,31,50,31,50,31,210,31,193,31,193,30,101,31,176,31,25,31,248,31,60,31,167,31,108,31,142,31,84,31,216,31,93,31,71,31,130,31,130,30,226,31,86,31,86,30,101,31,252,31,210,31,210,30,218,31,35,31,35,30,15,31,47,31,215,31,240,31,240,30,92,31,97,31,105,31,139,31,238,31,112,31,196,31,84,31,9,31,173,31,197,31,192,31,192,30,214,31,143,31,131,31,251,31,251,30,243,31,172,31,173,31,200,31,200,30,200,29,74,31,69,31,38,31,73,31,84,31,84,30,134,31,25,31,156,31,18,31,5,31,212,31,126,31,126,30,159,31,189,31,88,31,38,31,251,31,200,31,139,31,12,31,80,31,80,30,237,31,176,31,150,31,160,31,143,31,139,31,146,31,208,31,102,31,102,30,102,29,239,31,239,30,79,31,226,31,26,31,43,31,85,31,85,30,150,31,150,30,150,29,150,28,255,31,158,31,42,31,236,31,161,31,28,31,142,31,91,31,91,30,105,31,11,31,117,31,65,31,7,31,156,31,60,31,186,31,236,31,65,31,249,31,249,30,225,31,216,31,167,31,26,31,26,30,7,31,147,31,147,30,70,31,28,31,58,31,34,31,147,31,74,31,207,31,18,31,126,31,126,30,138,31,235,31,84,31,88,31,88,30,88,29,88,28,50,31,50,30,164,31,151,31,151,30,174,31,235,31,106,31,106,30,99,31,180,31,14,31,241,31,43,31,78,31,163,31,56,31,6,31,246,31,198,31,44,31,23,31,183,31,146,31,34,31,208,31,39,31,102,31,184,31,165,31,165,30,183,31,185,31,246,31,199,31,131,31,24,31,24,30,139,31,139,30,37,31,220,31,2,31,2,30,89,31,123,31,123,31,123,30,21,31,229,31,229,30,229,29,214,31,186,31,11,31,202,31,202,30,91,31,91,30,239,31,254,31,157,31,116,31,176,31,214,31,141,31,141,30,32,31,185,31,171,31,125,31,126,31,115,31,78,31,138,31,6,31,6,30,6,29,226,31,219,31,219,30,147,31,47,31,16,31,16,30,16,29,105,31,11,31,160,31,111,31,126,31,43,31,186,31,254,31,56,31,113,31,42,31,173,31,28,31,128,31,108,31,108,30,22,31,11,31,16,31,231,31,215,31,104,31,104,30,104,29,136,31,237,31,27,31,121,31,24,31,24,30,183,31,249,31,142,31,142,30,157,31,130,31,61,31,216,31,12,31,105,31,118,31,234,31,124,31,53,31,245,31,3,31,183,31,97,31,97,30,11,31,27,31,27,30,139,31,52,31,63,31,127,31,190,31,72,31,242,31,100,31,60,31,160,31,27,31,149,31,182,31,182,30,182,29,182,28,190,31,149,31,202,31,65,31,65,30,93,31,85,31,111,31,111,30,111,29,111,28,111,27,196,31,196,30,18,31,222,31,92,31,234,31,245,31,218,31,73,31,94,31,73,31,194,31,194,30,172,31,172,30,172,31,192,31,192,30,217,31,66,31,5,31,114,31,114,30,127,31,98,31,19,31,68,31,93,31,183,31,66,31,7,31,101,31,255,31,214,31,214,30,57,31,113,31,113,30,199,31,9,31,57,31,138,31,138,30,33,31,170,31,23,31,23,30,255,31,255,30,85,31,85,30,34,31,250,31,168,31,143,31,167,31,53,31,33,31,198,31,193,31,200,31,196,31,12,31,12,30,116,31,74,31,81,31,81,30,32,31,247,31,159,31,159,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
