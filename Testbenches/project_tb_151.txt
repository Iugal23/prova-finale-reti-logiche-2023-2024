-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 872;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (73,0,0,0,153,0,0,0,158,0,172,0,69,0,152,0,123,0,130,0,0,0,210,0,45,0,0,0,0,0,204,0,254,0,53,0,0,0,21,0,216,0,0,0,255,0,148,0,215,0,0,0,21,0,0,0,7,0,61,0,0,0,21,0,105,0,0,0,54,0,127,0,94,0,135,0,193,0,206,0,224,0,189,0,102,0,221,0,0,0,0,0,231,0,70,0,61,0,152,0,66,0,92,0,183,0,224,0,105,0,213,0,220,0,6,0,251,0,206,0,198,0,102,0,104,0,154,0,229,0,232,0,108,0,81,0,155,0,64,0,245,0,40,0,191,0,44,0,0,0,246,0,208,0,218,0,205,0,0,0,155,0,239,0,169,0,168,0,0,0,255,0,0,0,179,0,212,0,195,0,0,0,26,0,97,0,59,0,187,0,0,0,123,0,169,0,129,0,198,0,46,0,0,0,244,0,60,0,110,0,248,0,255,0,35,0,3,0,18,0,146,0,0,0,183,0,0,0,0,0,124,0,39,0,156,0,195,0,134,0,75,0,0,0,22,0,165,0,159,0,130,0,183,0,226,0,188,0,74,0,246,0,33,0,228,0,74,0,71,0,28,0,41,0,251,0,99,0,0,0,82,0,58,0,144,0,236,0,0,0,190,0,123,0,81,0,0,0,0,0,132,0,0,0,0,0,228,0,249,0,104,0,135,0,54,0,139,0,38,0,150,0,202,0,69,0,0,0,0,0,91,0,66,0,127,0,208,0,0,0,131,0,0,0,150,0,0,0,73,0,141,0,174,0,0,0,0,0,170,0,111,0,0,0,0,0,154,0,19,0,5,0,25,0,8,0,0,0,0,0,0,0,35,0,0,0,0,0,167,0,174,0,225,0,215,0,136,0,217,0,37,0,0,0,77,0,99,0,200,0,0,0,33,0,234,0,78,0,203,0,212,0,240,0,29,0,105,0,0,0,86,0,233,0,155,0,0,0,0,0,124,0,157,0,59,0,75,0,227,0,0,0,195,0,213,0,30,0,41,0,169,0,173,0,1,0,0,0,108,0,124,0,6,0,179,0,0,0,0,0,14,0,182,0,203,0,99,0,75,0,34,0,147,0,250,0,103,0,181,0,91,0,28,0,118,0,0,0,206,0,52,0,0,0,0,0,0,0,101,0,0,0,125,0,168,0,70,0,73,0,192,0,45,0,75,0,72,0,74,0,0,0,205,0,8,0,111,0,26,0,154,0,23,0,0,0,198,0,138,0,185,0,0,0,79,0,195,0,166,0,39,0,176,0,22,0,0,0,77,0,86,0,5,0,213,0,0,0,162,0,193,0,137,0,152,0,0,0,193,0,160,0,205,0,65,0,115,0,237,0,11,0,194,0,0,0,158,0,213,0,46,0,154,0,137,0,191,0,254,0,41,0,211,0,251,0,189,0,0,0,155,0,138,0,29,0,117,0,61,0,229,0,146,0,15,0,204,0,108,0,227,0,0,0,135,0,143,0,120,0,58,0,72,0,155,0,82,0,69,0,154,0,163,0,252,0,229,0,246,0,115,0,0,0,69,0,165,0,40,0,27,0,111,0,212,0,3,0,68,0,89,0,27,0,231,0,0,0,181,0,231,0,0,0,45,0,15,0,183,0,28,0,234,0,76,0,91,0,161,0,63,0,0,0,149,0,0,0,0,0,0,0,124,0,0,0,9,0,0,0,0,0,0,0,126,0,119,0,68,0,48,0,50,0,0,0,254,0,120,0,27,0,108,0,0,0,0,0,62,0,220,0,31,0,190,0,132,0,222,0,0,0,0,0,221,0,107,0,52,0,139,0,53,0,130,0,113,0,0,0,222,0,242,0,91,0,113,0,0,0,112,0,120,0,110,0,170,0,0,0,67,0,55,0,0,0,0,0,109,0,116,0,99,0,0,0,72,0,191,0,71,0,191,0,0,0,0,0,165,0,135,0,159,0,192,0,87,0,196,0,0,0,147,0,198,0,0,0,0,0,224,0,90,0,88,0,182,0,0,0,8,0,127,0,220,0,213,0,0,0,151,0,0,0,117,0,191,0,170,0,230,0,242,0,202,0,94,0,0,0,0,0,147,0,94,0,0,0,232,0,61,0,0,0,0,0,124,0,237,0,215,0,194,0,0,0,250,0,81,0,10,0,0,0,0,0,212,0,204,0,180,0,159,0,236,0,25,0,39,0,206,0,131,0,99,0,0,0,15,0,7,0,103,0,118,0,213,0,68,0,212,0,234,0,0,0,213,0,119,0,170,0,175,0,82,0,0,0,233,0,120,0,0,0,82,0,224,0,37,0,29,0,17,0,0,0,0,0,199,0,74,0,0,0,86,0,0,0,65,0,25,0,0,0,0,0,117,0,0,0,137,0,153,0,64,0,98,0,251,0,0,0,0,0,125,0,27,0,0,0,0,0,101,0,57,0,191,0,231,0,171,0,204,0,145,0,118,0,140,0,42,0,27,0,110,0,82,0,76,0,58,0,184,0,148,0,227,0,217,0,115,0,4,0,184,0,169,0,125,0,104,0,80,0,0,0,20,0,121,0,27,0,51,0,148,0,77,0,137,0,0,0,0,0,138,0,38,0,34,0,89,0,12,0,0,0,0,0,0,0,25,0,139,0,74,0,0,0,0,0,0,0,235,0,0,0,201,0,0,0,0,0,225,0,126,0,129,0,0,0,0,0,210,0,16,0,0,0,27,0,143,0,107,0,89,0,0,0,229,0,65,0,0,0,0,0,0,0,0,0,127,0,0,0,29,0,158,0,0,0,191,0,111,0,187,0,155,0,245,0,48,0,204,0,31,0,196,0,226,0,0,0,154,0,145,0,190,0,159,0,117,0,14,0,109,0,189,0,216,0,211,0,0,0,77,0,0,0,33,0,160,0,125,0,201,0,0,0,0,0,40,0,49,0,2,0,0,0,80,0,0,0,0,0,228,0,18,0,0,0,86,0,6,0,221,0,143,0,231,0,195,0,143,0,8,0,0,0,94,0,51,0,229,0,249,0,38,0,0,0,0,0,34,0,73,0,0,0,255,0,0,0,150,0,166,0,91,0,242,0,24,0,101,0,76,0,175,0,58,0,81,0,126,0,187,0,145,0,10,0,77,0,46,0,213,0,61,0,179,0,0,0,45,0,88,0,142,0,81,0,58,0,191,0,113,0,237,0,229,0,0,0,82,0,218,0,116,0,124,0,236,0,81,0,192,0,0,0,147,0,26,0,117,0,95,0,17,0,15,0,234,0,176,0,167,0,119,0,196,0,196,0,48,0,57,0,132,0,245,0,94,0,205,0,129,0,42,0,175,0,0,0,63,0,21,0,0,0,9,0,0,0,9,0,0,0,130,0,101,0,1,0,67,0,32,0,47,0,0,0,4,0,67,0,72,0,0,0,0,0,35,0,135,0,198,0,110,0,27,0,215,0,213,0,67,0,167,0,68,0,55,0,144,0,0,0,194,0,90,0,160,0,0,0,238,0,132,0,0,0,42,0,9,0,0,0,211,0,169,0,212,0,237,0,0,0,0,0,0,0,0,0,227,0,153,0,49,0,206,0,219,0,66,0,11,0,29,0,92,0,119,0,0,0,106,0,25,0,113,0,67,0,84,0,60,0,180,0,0,0,0,0,49,0,0,0,104,0,13,0,244,0,52,0,236,0,39,0,36,0,239,0,214,0,0,0,190,0,242,0,54,0,187,0,24,0,140,0,66,0,175,0,250,0,123,0,0,0,0,0,0,0,170,0,194,0,155,0,102,0,204,0,0,0,0,0,0,0,48,0,178,0,204,0,0,0,159,0,157,0,93,0,57,0,210,0,90,0,115,0,0,0,239,0,14,0,235,0,145,0,7,0,190,0,32,0,0,0,72,0,6,0,0,0,59,0,51,0,199,0,23,0,251,0);
signal scenario_full  : scenario_type := (73,31,73,30,153,31,153,30,158,31,172,31,69,31,152,31,123,31,130,31,130,30,210,31,45,31,45,30,45,29,204,31,254,31,53,31,53,30,21,31,216,31,216,30,255,31,148,31,215,31,215,30,21,31,21,30,7,31,61,31,61,30,21,31,105,31,105,30,54,31,127,31,94,31,135,31,193,31,206,31,224,31,189,31,102,31,221,31,221,30,221,29,231,31,70,31,61,31,152,31,66,31,92,31,183,31,224,31,105,31,213,31,220,31,6,31,251,31,206,31,198,31,102,31,104,31,154,31,229,31,232,31,108,31,81,31,155,31,64,31,245,31,40,31,191,31,44,31,44,30,246,31,208,31,218,31,205,31,205,30,155,31,239,31,169,31,168,31,168,30,255,31,255,30,179,31,212,31,195,31,195,30,26,31,97,31,59,31,187,31,187,30,123,31,169,31,129,31,198,31,46,31,46,30,244,31,60,31,110,31,248,31,255,31,35,31,3,31,18,31,146,31,146,30,183,31,183,30,183,29,124,31,39,31,156,31,195,31,134,31,75,31,75,30,22,31,165,31,159,31,130,31,183,31,226,31,188,31,74,31,246,31,33,31,228,31,74,31,71,31,28,31,41,31,251,31,99,31,99,30,82,31,58,31,144,31,236,31,236,30,190,31,123,31,81,31,81,30,81,29,132,31,132,30,132,29,228,31,249,31,104,31,135,31,54,31,139,31,38,31,150,31,202,31,69,31,69,30,69,29,91,31,66,31,127,31,208,31,208,30,131,31,131,30,150,31,150,30,73,31,141,31,174,31,174,30,174,29,170,31,111,31,111,30,111,29,154,31,19,31,5,31,25,31,8,31,8,30,8,29,8,28,35,31,35,30,35,29,167,31,174,31,225,31,215,31,136,31,217,31,37,31,37,30,77,31,99,31,200,31,200,30,33,31,234,31,78,31,203,31,212,31,240,31,29,31,105,31,105,30,86,31,233,31,155,31,155,30,155,29,124,31,157,31,59,31,75,31,227,31,227,30,195,31,213,31,30,31,41,31,169,31,173,31,1,31,1,30,108,31,124,31,6,31,179,31,179,30,179,29,14,31,182,31,203,31,99,31,75,31,34,31,147,31,250,31,103,31,181,31,91,31,28,31,118,31,118,30,206,31,52,31,52,30,52,29,52,28,101,31,101,30,125,31,168,31,70,31,73,31,192,31,45,31,75,31,72,31,74,31,74,30,205,31,8,31,111,31,26,31,154,31,23,31,23,30,198,31,138,31,185,31,185,30,79,31,195,31,166,31,39,31,176,31,22,31,22,30,77,31,86,31,5,31,213,31,213,30,162,31,193,31,137,31,152,31,152,30,193,31,160,31,205,31,65,31,115,31,237,31,11,31,194,31,194,30,158,31,213,31,46,31,154,31,137,31,191,31,254,31,41,31,211,31,251,31,189,31,189,30,155,31,138,31,29,31,117,31,61,31,229,31,146,31,15,31,204,31,108,31,227,31,227,30,135,31,143,31,120,31,58,31,72,31,155,31,82,31,69,31,154,31,163,31,252,31,229,31,246,31,115,31,115,30,69,31,165,31,40,31,27,31,111,31,212,31,3,31,68,31,89,31,27,31,231,31,231,30,181,31,231,31,231,30,45,31,15,31,183,31,28,31,234,31,76,31,91,31,161,31,63,31,63,30,149,31,149,30,149,29,149,28,124,31,124,30,9,31,9,30,9,29,9,28,126,31,119,31,68,31,48,31,50,31,50,30,254,31,120,31,27,31,108,31,108,30,108,29,62,31,220,31,31,31,190,31,132,31,222,31,222,30,222,29,221,31,107,31,52,31,139,31,53,31,130,31,113,31,113,30,222,31,242,31,91,31,113,31,113,30,112,31,120,31,110,31,170,31,170,30,67,31,55,31,55,30,55,29,109,31,116,31,99,31,99,30,72,31,191,31,71,31,191,31,191,30,191,29,165,31,135,31,159,31,192,31,87,31,196,31,196,30,147,31,198,31,198,30,198,29,224,31,90,31,88,31,182,31,182,30,8,31,127,31,220,31,213,31,213,30,151,31,151,30,117,31,191,31,170,31,230,31,242,31,202,31,94,31,94,30,94,29,147,31,94,31,94,30,232,31,61,31,61,30,61,29,124,31,237,31,215,31,194,31,194,30,250,31,81,31,10,31,10,30,10,29,212,31,204,31,180,31,159,31,236,31,25,31,39,31,206,31,131,31,99,31,99,30,15,31,7,31,103,31,118,31,213,31,68,31,212,31,234,31,234,30,213,31,119,31,170,31,175,31,82,31,82,30,233,31,120,31,120,30,82,31,224,31,37,31,29,31,17,31,17,30,17,29,199,31,74,31,74,30,86,31,86,30,65,31,25,31,25,30,25,29,117,31,117,30,137,31,153,31,64,31,98,31,251,31,251,30,251,29,125,31,27,31,27,30,27,29,101,31,57,31,191,31,231,31,171,31,204,31,145,31,118,31,140,31,42,31,27,31,110,31,82,31,76,31,58,31,184,31,148,31,227,31,217,31,115,31,4,31,184,31,169,31,125,31,104,31,80,31,80,30,20,31,121,31,27,31,51,31,148,31,77,31,137,31,137,30,137,29,138,31,38,31,34,31,89,31,12,31,12,30,12,29,12,28,25,31,139,31,74,31,74,30,74,29,74,28,235,31,235,30,201,31,201,30,201,29,225,31,126,31,129,31,129,30,129,29,210,31,16,31,16,30,27,31,143,31,107,31,89,31,89,30,229,31,65,31,65,30,65,29,65,28,65,27,127,31,127,30,29,31,158,31,158,30,191,31,111,31,187,31,155,31,245,31,48,31,204,31,31,31,196,31,226,31,226,30,154,31,145,31,190,31,159,31,117,31,14,31,109,31,189,31,216,31,211,31,211,30,77,31,77,30,33,31,160,31,125,31,201,31,201,30,201,29,40,31,49,31,2,31,2,30,80,31,80,30,80,29,228,31,18,31,18,30,86,31,6,31,221,31,143,31,231,31,195,31,143,31,8,31,8,30,94,31,51,31,229,31,249,31,38,31,38,30,38,29,34,31,73,31,73,30,255,31,255,30,150,31,166,31,91,31,242,31,24,31,101,31,76,31,175,31,58,31,81,31,126,31,187,31,145,31,10,31,77,31,46,31,213,31,61,31,179,31,179,30,45,31,88,31,142,31,81,31,58,31,191,31,113,31,237,31,229,31,229,30,82,31,218,31,116,31,124,31,236,31,81,31,192,31,192,30,147,31,26,31,117,31,95,31,17,31,15,31,234,31,176,31,167,31,119,31,196,31,196,31,48,31,57,31,132,31,245,31,94,31,205,31,129,31,42,31,175,31,175,30,63,31,21,31,21,30,9,31,9,30,9,31,9,30,130,31,101,31,1,31,67,31,32,31,47,31,47,30,4,31,67,31,72,31,72,30,72,29,35,31,135,31,198,31,110,31,27,31,215,31,213,31,67,31,167,31,68,31,55,31,144,31,144,30,194,31,90,31,160,31,160,30,238,31,132,31,132,30,42,31,9,31,9,30,211,31,169,31,212,31,237,31,237,30,237,29,237,28,237,27,227,31,153,31,49,31,206,31,219,31,66,31,11,31,29,31,92,31,119,31,119,30,106,31,25,31,113,31,67,31,84,31,60,31,180,31,180,30,180,29,49,31,49,30,104,31,13,31,244,31,52,31,236,31,39,31,36,31,239,31,214,31,214,30,190,31,242,31,54,31,187,31,24,31,140,31,66,31,175,31,250,31,123,31,123,30,123,29,123,28,170,31,194,31,155,31,102,31,204,31,204,30,204,29,204,28,48,31,178,31,204,31,204,30,159,31,157,31,93,31,57,31,210,31,90,31,115,31,115,30,239,31,14,31,235,31,145,31,7,31,190,31,32,31,32,30,72,31,6,31,6,30,59,31,51,31,199,31,23,31,251,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
