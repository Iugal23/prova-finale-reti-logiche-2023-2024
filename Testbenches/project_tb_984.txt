-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 486;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (130,0,54,0,93,0,151,0,188,0,65,0,221,0,188,0,213,0,0,0,150,0,0,0,0,0,86,0,85,0,0,0,143,0,95,0,208,0,251,0,0,0,243,0,167,0,206,0,175,0,184,0,0,0,113,0,0,0,46,0,171,0,87,0,0,0,210,0,199,0,87,0,72,0,0,0,154,0,230,0,181,0,93,0,53,0,107,0,209,0,78,0,139,0,31,0,240,0,207,0,0,0,0,0,232,0,251,0,0,0,240,0,0,0,139,0,255,0,226,0,149,0,25,0,243,0,193,0,208,0,163,0,0,0,12,0,198,0,0,0,136,0,161,0,32,0,211,0,250,0,233,0,170,0,0,0,57,0,87,0,33,0,27,0,138,0,162,0,0,0,0,0,0,0,137,0,62,0,222,0,198,0,46,0,51,0,56,0,33,0,215,0,188,0,15,0,0,0,0,0,237,0,0,0,38,0,41,0,0,0,142,0,2,0,20,0,173,0,113,0,0,0,141,0,203,0,0,0,0,0,102,0,0,0,0,0,15,0,54,0,38,0,94,0,216,0,130,0,0,0,136,0,229,0,204,0,0,0,0,0,205,0,156,0,0,0,196,0,0,0,111,0,130,0,188,0,192,0,124,0,63,0,0,0,253,0,225,0,137,0,70,0,188,0,184,0,237,0,234,0,0,0,217,0,0,0,255,0,134,0,60,0,25,0,53,0,191,0,0,0,134,0,180,0,173,0,204,0,75,0,0,0,40,0,32,0,209,0,224,0,95,0,0,0,121,0,77,0,106,0,0,0,158,0,216,0,107,0,192,0,0,0,207,0,98,0,0,0,4,0,199,0,0,0,121,0,187,0,0,0,68,0,36,0,248,0,116,0,198,0,27,0,0,0,145,0,224,0,173,0,99,0,225,0,100,0,61,0,116,0,234,0,220,0,56,0,62,0,158,0,70,0,151,0,11,0,46,0,88,0,0,0,0,0,214,0,0,0,14,0,179,0,0,0,0,0,0,0,60,0,11,0,33,0,131,0,238,0,66,0,250,0,0,0,102,0,198,0,208,0,53,0,249,0,2,0,250,0,247,0,198,0,71,0,0,0,116,0,132,0,149,0,104,0,201,0,0,0,108,0,55,0,133,0,53,0,0,0,168,0,180,0,78,0,0,0,168,0,73,0,0,0,0,0,160,0,0,0,153,0,205,0,55,0,255,0,134,0,126,0,241,0,183,0,104,0,255,0,170,0,254,0,9,0,0,0,192,0,18,0,0,0,152,0,231,0,253,0,195,0,78,0,125,0,0,0,244,0,46,0,69,0,233,0,0,0,0,0,18,0,69,0,139,0,0,0,128,0,128,0,162,0,0,0,21,0,75,0,229,0,83,0,44,0,135,0,2,0,126,0,0,0,202,0,0,0,90,0,55,0,235,0,202,0,155,0,2,0,101,0,242,0,0,0,0,0,66,0,241,0,0,0,43,0,168,0,247,0,92,0,86,0,73,0,250,0,152,0,13,0,0,0,65,0,35,0,248,0,135,0,126,0,65,0,227,0,53,0,246,0,102,0,145,0,125,0,191,0,0,0,253,0,255,0,112,0,0,0,212,0,0,0,73,0,203,0,0,0,53,0,71,0,0,0,108,0,11,0,112,0,28,0,63,0,227,0,254,0,0,0,0,0,0,0,110,0,24,0,182,0,101,0,140,0,65,0,213,0,36,0,57,0,143,0,11,0,174,0,61,0,115,0,0,0,123,0,174,0,85,0,26,0,27,0,228,0,125,0,128,0,160,0,47,0,0,0,183,0,245,0,178,0,128,0,229,0,32,0,0,0,254,0,254,0,82,0,185,0,207,0,131,0,247,0,241,0,224,0,12,0,0,0,142,0,183,0,0,0,145,0,135,0,93,0,247,0,165,0,0,0,6,0,213,0,99,0,53,0,147,0,0,0,117,0,201,0,0,0,189,0,224,0,226,0,247,0,160,0,21,0,153,0,35,0,135,0,0,0,103,0,0,0,0,0,128,0,46,0,45,0,175,0,20,0,210,0,121,0,225,0,249,0,136,0,61,0,252,0,200,0,0,0,194,0,170,0,210,0,0,0,239,0,254,0,82,0,155,0,228,0,212,0,115,0,180,0,0,0,142,0,209,0,78,0,0,0,38,0,204,0,0,0,141,0,197,0,0,0,0,0,0,0);
signal scenario_full  : scenario_type := (130,31,54,31,93,31,151,31,188,31,65,31,221,31,188,31,213,31,213,30,150,31,150,30,150,29,86,31,85,31,85,30,143,31,95,31,208,31,251,31,251,30,243,31,167,31,206,31,175,31,184,31,184,30,113,31,113,30,46,31,171,31,87,31,87,30,210,31,199,31,87,31,72,31,72,30,154,31,230,31,181,31,93,31,53,31,107,31,209,31,78,31,139,31,31,31,240,31,207,31,207,30,207,29,232,31,251,31,251,30,240,31,240,30,139,31,255,31,226,31,149,31,25,31,243,31,193,31,208,31,163,31,163,30,12,31,198,31,198,30,136,31,161,31,32,31,211,31,250,31,233,31,170,31,170,30,57,31,87,31,33,31,27,31,138,31,162,31,162,30,162,29,162,28,137,31,62,31,222,31,198,31,46,31,51,31,56,31,33,31,215,31,188,31,15,31,15,30,15,29,237,31,237,30,38,31,41,31,41,30,142,31,2,31,20,31,173,31,113,31,113,30,141,31,203,31,203,30,203,29,102,31,102,30,102,29,15,31,54,31,38,31,94,31,216,31,130,31,130,30,136,31,229,31,204,31,204,30,204,29,205,31,156,31,156,30,196,31,196,30,111,31,130,31,188,31,192,31,124,31,63,31,63,30,253,31,225,31,137,31,70,31,188,31,184,31,237,31,234,31,234,30,217,31,217,30,255,31,134,31,60,31,25,31,53,31,191,31,191,30,134,31,180,31,173,31,204,31,75,31,75,30,40,31,32,31,209,31,224,31,95,31,95,30,121,31,77,31,106,31,106,30,158,31,216,31,107,31,192,31,192,30,207,31,98,31,98,30,4,31,199,31,199,30,121,31,187,31,187,30,68,31,36,31,248,31,116,31,198,31,27,31,27,30,145,31,224,31,173,31,99,31,225,31,100,31,61,31,116,31,234,31,220,31,56,31,62,31,158,31,70,31,151,31,11,31,46,31,88,31,88,30,88,29,214,31,214,30,14,31,179,31,179,30,179,29,179,28,60,31,11,31,33,31,131,31,238,31,66,31,250,31,250,30,102,31,198,31,208,31,53,31,249,31,2,31,250,31,247,31,198,31,71,31,71,30,116,31,132,31,149,31,104,31,201,31,201,30,108,31,55,31,133,31,53,31,53,30,168,31,180,31,78,31,78,30,168,31,73,31,73,30,73,29,160,31,160,30,153,31,205,31,55,31,255,31,134,31,126,31,241,31,183,31,104,31,255,31,170,31,254,31,9,31,9,30,192,31,18,31,18,30,152,31,231,31,253,31,195,31,78,31,125,31,125,30,244,31,46,31,69,31,233,31,233,30,233,29,18,31,69,31,139,31,139,30,128,31,128,31,162,31,162,30,21,31,75,31,229,31,83,31,44,31,135,31,2,31,126,31,126,30,202,31,202,30,90,31,55,31,235,31,202,31,155,31,2,31,101,31,242,31,242,30,242,29,66,31,241,31,241,30,43,31,168,31,247,31,92,31,86,31,73,31,250,31,152,31,13,31,13,30,65,31,35,31,248,31,135,31,126,31,65,31,227,31,53,31,246,31,102,31,145,31,125,31,191,31,191,30,253,31,255,31,112,31,112,30,212,31,212,30,73,31,203,31,203,30,53,31,71,31,71,30,108,31,11,31,112,31,28,31,63,31,227,31,254,31,254,30,254,29,254,28,110,31,24,31,182,31,101,31,140,31,65,31,213,31,36,31,57,31,143,31,11,31,174,31,61,31,115,31,115,30,123,31,174,31,85,31,26,31,27,31,228,31,125,31,128,31,160,31,47,31,47,30,183,31,245,31,178,31,128,31,229,31,32,31,32,30,254,31,254,31,82,31,185,31,207,31,131,31,247,31,241,31,224,31,12,31,12,30,142,31,183,31,183,30,145,31,135,31,93,31,247,31,165,31,165,30,6,31,213,31,99,31,53,31,147,31,147,30,117,31,201,31,201,30,189,31,224,31,226,31,247,31,160,31,21,31,153,31,35,31,135,31,135,30,103,31,103,30,103,29,128,31,46,31,45,31,175,31,20,31,210,31,121,31,225,31,249,31,136,31,61,31,252,31,200,31,200,30,194,31,170,31,210,31,210,30,239,31,254,31,82,31,155,31,228,31,212,31,115,31,180,31,180,30,142,31,209,31,78,31,78,30,38,31,204,31,204,30,141,31,197,31,197,30,197,29,197,28);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
