-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 542;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (108,0,0,0,213,0,0,0,0,0,126,0,184,0,188,0,40,0,9,0,100,0,0,0,26,0,0,0,112,0,8,0,51,0,63,0,72,0,177,0,125,0,87,0,13,0,231,0,210,0,24,0,8,0,158,0,123,0,159,0,73,0,240,0,0,0,118,0,44,0,0,0,59,0,5,0,0,0,204,0,205,0,193,0,0,0,237,0,0,0,0,0,18,0,216,0,24,0,172,0,219,0,106,0,210,0,27,0,10,0,201,0,79,0,45,0,0,0,96,0,0,0,185,0,175,0,80,0,39,0,104,0,238,0,76,0,89,0,0,0,0,0,216,0,125,0,248,0,27,0,0,0,4,0,244,0,118,0,166,0,216,0,55,0,55,0,0,0,207,0,0,0,187,0,56,0,117,0,203,0,188,0,8,0,39,0,56,0,118,0,160,0,0,0,198,0,69,0,32,0,71,0,34,0,205,0,252,0,212,0,34,0,96,0,163,0,0,0,194,0,125,0,71,0,39,0,31,0,228,0,35,0,171,0,176,0,236,0,98,0,244,0,159,0,254,0,150,0,0,0,0,0,0,0,76,0,145,0,51,0,238,0,215,0,192,0,163,0,0,0,0,0,0,0,189,0,80,0,0,0,0,0,122,0,30,0,0,0,129,0,0,0,0,0,220,0,225,0,237,0,188,0,123,0,135,0,215,0,0,0,0,0,162,0,161,0,250,0,181,0,108,0,92,0,152,0,122,0,43,0,105,0,0,0,16,0,130,0,66,0,0,0,62,0,14,0,0,0,0,0,187,0,239,0,6,0,38,0,33,0,0,0,212,0,146,0,179,0,0,0,0,0,125,0,0,0,84,0,125,0,91,0,247,0,230,0,44,0,0,0,0,0,25,0,151,0,227,0,0,0,0,0,74,0,0,0,220,0,78,0,104,0,102,0,0,0,60,0,124,0,207,0,107,0,104,0,93,0,42,0,0,0,131,0,30,0,0,0,61,0,118,0,51,0,225,0,248,0,0,0,0,0,115,0,0,0,0,0,238,0,184,0,63,0,200,0,184,0,73,0,160,0,0,0,186,0,206,0,48,0,0,0,7,0,0,0,31,0,114,0,122,0,0,0,201,0,104,0,64,0,79,0,214,0,0,0,85,0,0,0,0,0,21,0,0,0,145,0,183,0,66,0,238,0,189,0,11,0,182,0,81,0,0,0,213,0,0,0,248,0,43,0,62,0,0,0,4,0,1,0,21,0,76,0,104,0,229,0,66,0,134,0,0,0,182,0,243,0,152,0,91,0,0,0,0,0,73,0,237,0,100,0,151,0,206,0,60,0,125,0,70,0,202,0,0,0,175,0,132,0,0,0,95,0,82,0,6,0,0,0,0,0,136,0,164,0,0,0,1,0,0,0,249,0,128,0,224,0,0,0,112,0,0,0,83,0,238,0,0,0,215,0,168,0,91,0,221,0,183,0,151,0,10,0,171,0,207,0,248,0,231,0,73,0,159,0,182,0,246,0,0,0,243,0,26,0,146,0,0,0,140,0,0,0,62,0,0,0,118,0,205,0,74,0,243,0,74,0,103,0,242,0,45,0,0,0,96,0,104,0,38,0,40,0,19,0,231,0,207,0,36,0,0,0,0,0,0,0,35,0,57,0,25,0,32,0,0,0,193,0,73,0,119,0,4,0,42,0,44,0,69,0,155,0,0,0,246,0,185,0,190,0,213,0,203,0,208,0,0,0,32,0,230,0,0,0,234,0,131,0,196,0,218,0,103,0,0,0,158,0,0,0,101,0,173,0,208,0,0,0,0,0,98,0,0,0,0,0,49,0,4,0,30,0,0,0,180,0,0,0,228,0,194,0,190,0,207,0,136,0,130,0,230,0,228,0,0,0,155,0,232,0,217,0,242,0,23,0,187,0,80,0,187,0,0,0,237,0,12,0,124,0,87,0,21,0,216,0,19,0,141,0,188,0,192,0,30,0,216,0,30,0,0,0,0,0,199,0,145,0,142,0,19,0,6,0,103,0,71,0,69,0,0,0,0,0,182,0,164,0,184,0,187,0,45,0,0,0,0,0,207,0,217,0,250,0,59,0,139,0,60,0,0,0,102,0,11,0,20,0,245,0,0,0,48,0,0,0,4,0,198,0,18,0,158,0,154,0,163,0,0,0,209,0,29,0,67,0,2,0,250,0,93,0,154,0,252,0,130,0,104,0,206,0,190,0,243,0,21,0,0,0,60,0,0,0,141,0,0,0,210,0,254,0,195,0,184,0,40,0,0,0,228,0,95,0,149,0,0,0,111,0,111,0,68,0,204,0,166,0,0,0,0,0,196,0,234,0,0,0,92,0,65,0,0,0,161,0,0,0,0,0,246,0,112,0,182,0,0,0,0,0,56,0,0,0,118,0,218,0,219,0,199,0,206,0,50,0,110,0,45,0,174,0);
signal scenario_full  : scenario_type := (108,31,108,30,213,31,213,30,213,29,126,31,184,31,188,31,40,31,9,31,100,31,100,30,26,31,26,30,112,31,8,31,51,31,63,31,72,31,177,31,125,31,87,31,13,31,231,31,210,31,24,31,8,31,158,31,123,31,159,31,73,31,240,31,240,30,118,31,44,31,44,30,59,31,5,31,5,30,204,31,205,31,193,31,193,30,237,31,237,30,237,29,18,31,216,31,24,31,172,31,219,31,106,31,210,31,27,31,10,31,201,31,79,31,45,31,45,30,96,31,96,30,185,31,175,31,80,31,39,31,104,31,238,31,76,31,89,31,89,30,89,29,216,31,125,31,248,31,27,31,27,30,4,31,244,31,118,31,166,31,216,31,55,31,55,31,55,30,207,31,207,30,187,31,56,31,117,31,203,31,188,31,8,31,39,31,56,31,118,31,160,31,160,30,198,31,69,31,32,31,71,31,34,31,205,31,252,31,212,31,34,31,96,31,163,31,163,30,194,31,125,31,71,31,39,31,31,31,228,31,35,31,171,31,176,31,236,31,98,31,244,31,159,31,254,31,150,31,150,30,150,29,150,28,76,31,145,31,51,31,238,31,215,31,192,31,163,31,163,30,163,29,163,28,189,31,80,31,80,30,80,29,122,31,30,31,30,30,129,31,129,30,129,29,220,31,225,31,237,31,188,31,123,31,135,31,215,31,215,30,215,29,162,31,161,31,250,31,181,31,108,31,92,31,152,31,122,31,43,31,105,31,105,30,16,31,130,31,66,31,66,30,62,31,14,31,14,30,14,29,187,31,239,31,6,31,38,31,33,31,33,30,212,31,146,31,179,31,179,30,179,29,125,31,125,30,84,31,125,31,91,31,247,31,230,31,44,31,44,30,44,29,25,31,151,31,227,31,227,30,227,29,74,31,74,30,220,31,78,31,104,31,102,31,102,30,60,31,124,31,207,31,107,31,104,31,93,31,42,31,42,30,131,31,30,31,30,30,61,31,118,31,51,31,225,31,248,31,248,30,248,29,115,31,115,30,115,29,238,31,184,31,63,31,200,31,184,31,73,31,160,31,160,30,186,31,206,31,48,31,48,30,7,31,7,30,31,31,114,31,122,31,122,30,201,31,104,31,64,31,79,31,214,31,214,30,85,31,85,30,85,29,21,31,21,30,145,31,183,31,66,31,238,31,189,31,11,31,182,31,81,31,81,30,213,31,213,30,248,31,43,31,62,31,62,30,4,31,1,31,21,31,76,31,104,31,229,31,66,31,134,31,134,30,182,31,243,31,152,31,91,31,91,30,91,29,73,31,237,31,100,31,151,31,206,31,60,31,125,31,70,31,202,31,202,30,175,31,132,31,132,30,95,31,82,31,6,31,6,30,6,29,136,31,164,31,164,30,1,31,1,30,249,31,128,31,224,31,224,30,112,31,112,30,83,31,238,31,238,30,215,31,168,31,91,31,221,31,183,31,151,31,10,31,171,31,207,31,248,31,231,31,73,31,159,31,182,31,246,31,246,30,243,31,26,31,146,31,146,30,140,31,140,30,62,31,62,30,118,31,205,31,74,31,243,31,74,31,103,31,242,31,45,31,45,30,96,31,104,31,38,31,40,31,19,31,231,31,207,31,36,31,36,30,36,29,36,28,35,31,57,31,25,31,32,31,32,30,193,31,73,31,119,31,4,31,42,31,44,31,69,31,155,31,155,30,246,31,185,31,190,31,213,31,203,31,208,31,208,30,32,31,230,31,230,30,234,31,131,31,196,31,218,31,103,31,103,30,158,31,158,30,101,31,173,31,208,31,208,30,208,29,98,31,98,30,98,29,49,31,4,31,30,31,30,30,180,31,180,30,228,31,194,31,190,31,207,31,136,31,130,31,230,31,228,31,228,30,155,31,232,31,217,31,242,31,23,31,187,31,80,31,187,31,187,30,237,31,12,31,124,31,87,31,21,31,216,31,19,31,141,31,188,31,192,31,30,31,216,31,30,31,30,30,30,29,199,31,145,31,142,31,19,31,6,31,103,31,71,31,69,31,69,30,69,29,182,31,164,31,184,31,187,31,45,31,45,30,45,29,207,31,217,31,250,31,59,31,139,31,60,31,60,30,102,31,11,31,20,31,245,31,245,30,48,31,48,30,4,31,198,31,18,31,158,31,154,31,163,31,163,30,209,31,29,31,67,31,2,31,250,31,93,31,154,31,252,31,130,31,104,31,206,31,190,31,243,31,21,31,21,30,60,31,60,30,141,31,141,30,210,31,254,31,195,31,184,31,40,31,40,30,228,31,95,31,149,31,149,30,111,31,111,31,68,31,204,31,166,31,166,30,166,29,196,31,234,31,234,30,92,31,65,31,65,30,161,31,161,30,161,29,246,31,112,31,182,31,182,30,182,29,56,31,56,30,118,31,218,31,219,31,199,31,206,31,50,31,110,31,45,31,174,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
