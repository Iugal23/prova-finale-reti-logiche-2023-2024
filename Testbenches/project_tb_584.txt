-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 914;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (90,0,120,0,238,0,226,0,0,0,173,0,185,0,98,0,0,0,130,0,227,0,0,0,182,0,91,0,30,0,65,0,0,0,132,0,233,0,86,0,205,0,84,0,237,0,64,0,156,0,107,0,0,0,239,0,33,0,35,0,196,0,0,0,53,0,250,0,49,0,98,0,253,0,123,0,107,0,167,0,229,0,188,0,36,0,92,0,59,0,154,0,132,0,200,0,188,0,75,0,243,0,118,0,0,0,154,0,62,0,0,0,246,0,181,0,243,0,189,0,0,0,0,0,206,0,100,0,182,0,50,0,89,0,57,0,253,0,0,0,0,0,97,0,37,0,163,0,178,0,148,0,177,0,0,0,140,0,4,0,224,0,0,0,0,0,0,0,11,0,108,0,59,0,80,0,184,0,106,0,196,0,138,0,4,0,120,0,0,0,88,0,0,0,53,0,0,0,152,0,201,0,95,0,223,0,0,0,173,0,38,0,42,0,0,0,234,0,226,0,181,0,123,0,46,0,137,0,236,0,45,0,172,0,101,0,180,0,135,0,14,0,132,0,169,0,66,0,177,0,110,0,141,0,135,0,53,0,217,0,226,0,63,0,0,0,58,0,135,0,146,0,172,0,209,0,235,0,199,0,0,0,59,0,24,0,242,0,44,0,249,0,240,0,212,0,151,0,44,0,250,0,209,0,239,0,245,0,76,0,162,0,125,0,64,0,59,0,221,0,0,0,0,0,150,0,168,0,187,0,0,0,146,0,86,0,167,0,172,0,175,0,0,0,211,0,0,0,82,0,144,0,118,0,95,0,0,0,0,0,0,0,177,0,92,0,42,0,84,0,135,0,89,0,158,0,15,0,21,0,111,0,107,0,0,0,83,0,251,0,190,0,90,0,98,0,59,0,177,0,236,0,181,0,191,0,124,0,24,0,92,0,69,0,32,0,33,0,191,0,204,0,126,0,201,0,234,0,255,0,159,0,0,0,232,0,25,0,244,0,133,0,31,0,0,0,45,0,0,0,242,0,104,0,132,0,54,0,42,0,94,0,122,0,93,0,197,0,63,0,220,0,14,0,0,0,135,0,0,0,65,0,0,0,58,0,125,0,143,0,117,0,193,0,155,0,19,0,170,0,10,0,122,0,124,0,86,0,0,0,46,0,57,0,69,0,172,0,181,0,0,0,168,0,0,0,64,0,137,0,0,0,146,0,99,0,91,0,30,0,73,0,34,0,16,0,126,0,118,0,0,0,141,0,0,0,45,0,167,0,0,0,0,0,242,0,0,0,0,0,227,0,60,0,251,0,105,0,0,0,3,0,17,0,178,0,147,0,0,0,0,0,0,0,15,0,229,0,186,0,33,0,169,0,114,0,223,0,128,0,251,0,0,0,0,0,6,0,53,0,255,0,120,0,9,0,203,0,141,0,4,0,0,0,0,0,0,0,0,0,128,0,179,0,101,0,0,0,211,0,234,0,219,0,209,0,49,0,0,0,132,0,0,0,157,0,32,0,77,0,0,0,71,0,243,0,10,0,0,0,146,0,0,0,51,0,0,0,0,0,183,0,0,0,203,0,0,0,208,0,191,0,142,0,228,0,154,0,186,0,236,0,0,0,14,0,122,0,31,0,0,0,138,0,189,0,106,0,199,0,163,0,146,0,0,0,0,0,24,0,183,0,233,0,157,0,151,0,36,0,247,0,147,0,234,0,41,0,0,0,0,0,236,0,60,0,239,0,10,0,209,0,0,0,180,0,0,0,22,0,131,0,0,0,126,0,33,0,234,0,78,0,133,0,104,0,22,0,10,0,0,0,122,0,61,0,0,0,236,0,110,0,4,0,116,0,48,0,120,0,249,0,129,0,35,0,182,0,156,0,160,0,49,0,189,0,204,0,203,0,8,0,0,0,155,0,126,0,66,0,196,0,184,0,186,0,169,0,200,0,0,0,0,0,113,0,223,0,0,0,1,0,0,0,168,0,0,0,233,0,168,0,0,0,247,0,0,0,210,0,16,0,0,0,54,0,105,0,161,0,47,0,0,0,190,0,109,0,252,0,147,0,200,0,202,0,137,0,144,0,92,0,0,0,38,0,112,0,126,0,199,0,0,0,100,0,153,0,164,0,97,0,118,0,24,0,0,0,85,0,30,0,0,0,168,0,43,0,0,0,83,0,196,0,102,0,239,0,175,0,67,0,0,0,130,0,242,0,181,0,0,0,197,0,95,0,130,0,0,0,71,0,83,0,34,0,113,0,127,0,32,0,0,0,6,0,0,0,241,0,0,0,27,0,0,0,96,0,50,0,215,0,53,0,78,0,247,0,184,0,166,0,200,0,56,0,227,0,227,0,158,0,219,0,0,0,90,0,94,0,0,0,27,0,136,0,151,0,103,0,72,0,0,0,214,0,76,0,98,0,158,0,250,0,0,0,142,0,79,0,0,0,18,0,213,0,0,0,132,0,42,0,10,0,119,0,1,0,5,0,0,0,0,0,39,0,60,0,221,0,16,0,196,0,170,0,173,0,126,0,235,0,79,0,126,0,206,0,104,0,189,0,42,0,151,0,98,0,0,0,92,0,0,0,106,0,63,0,0,0,55,0,0,0,239,0,60,0,93,0,225,0,72,0,0,0,193,0,221,0,0,0,233,0,212,0,175,0,184,0,1,0,60,0,22,0,0,0,1,0,241,0,0,0,87,0,36,0,172,0,92,0,227,0,132,0,0,0,183,0,246,0,30,0,0,0,240,0,192,0,251,0,7,0,8,0,0,0,34,0,137,0,56,0,233,0,0,0,150,0,31,0,0,0,210,0,186,0,169,0,228,0,158,0,0,0,41,0,246,0,136,0,97,0,50,0,67,0,2,0,27,0,91,0,32,0,111,0,178,0,0,0,3,0,0,0,134,0,28,0,19,0,30,0,13,0,35,0,0,0,39,0,119,0,0,0,72,0,101,0,0,0,123,0,0,0,211,0,0,0,184,0,0,0,183,0,203,0,78,0,0,0,106,0,142,0,170,0,210,0,247,0,87,0,199,0,167,0,0,0,0,0,0,0,180,0,164,0,99,0,68,0,144,0,5,0,0,0,218,0,244,0,99,0,228,0,225,0,95,0,89,0,229,0,88,0,240,0,199,0,72,0,161,0,138,0,130,0,0,0,0,0,0,0,7,0,31,0,183,0,60,0,124,0,26,0,245,0,0,0,48,0,0,0,250,0,33,0,206,0,0,0,219,0,0,0,71,0,32,0,25,0,0,0,129,0,215,0,196,0,0,0,209,0,0,0,59,0,18,0,246,0,95,0,219,0,239,0,106,0,183,0,100,0,114,0,243,0,191,0,0,0,172,0,0,0,135,0,32,0,125,0,217,0,117,0,0,0,0,0,0,0,82,0,0,0,0,0,57,0,51,0,206,0,36,0,142,0,243,0,61,0,44,0,214,0,92,0,0,0,0,0,87,0,221,0,212,0,46,0,230,0,55,0,1,0,203,0,158,0,0,0,224,0,25,0,31,0,181,0,103,0,142,0,207,0,106,0,48,0,180,0,35,0,152,0,248,0,89,0,25,0,140,0,80,0,0,0,165,0,0,0,143,0,0,0,0,0,0,0,58,0,44,0,137,0,30,0,161,0,82,0,43,0,114,0,126,0,49,0,0,0,148,0,168,0,183,0,0,0,117,0,0,0,0,0,0,0,0,0,23,0,22,0,72,0,235,0,193,0,0,0,0,0,107,0,111,0,117,0,177,0,52,0,213,0,58,0,139,0,234,0,203,0,0,0,252,0,154,0,233,0,252,0,43,0,107,0,25,0,114,0,0,0,0,0,120,0,209,0,240,0,0,0,67,0,127,0,5,0,19,0,59,0,34,0,101,0,18,0,42,0,24,0,220,0,151,0,109,0,25,0,40,0,21,0,176,0,28,0,99,0,235,0,164,0,158,0,38,0,0,0,0,0,16,0,0,0,0,0,212,0,44,0,249,0,255,0,218,0,0,0,85,0,0,0,74,0,26,0,42,0,205,0,39,0,0,0,127,0,0,0,0,0,21,0,223,0,117,0,137,0,120,0,214,0,241,0,82,0,60,0,0,0,134,0,146,0,180,0,3,0,115,0,134,0,0,0);
signal scenario_full  : scenario_type := (90,31,120,31,238,31,226,31,226,30,173,31,185,31,98,31,98,30,130,31,227,31,227,30,182,31,91,31,30,31,65,31,65,30,132,31,233,31,86,31,205,31,84,31,237,31,64,31,156,31,107,31,107,30,239,31,33,31,35,31,196,31,196,30,53,31,250,31,49,31,98,31,253,31,123,31,107,31,167,31,229,31,188,31,36,31,92,31,59,31,154,31,132,31,200,31,188,31,75,31,243,31,118,31,118,30,154,31,62,31,62,30,246,31,181,31,243,31,189,31,189,30,189,29,206,31,100,31,182,31,50,31,89,31,57,31,253,31,253,30,253,29,97,31,37,31,163,31,178,31,148,31,177,31,177,30,140,31,4,31,224,31,224,30,224,29,224,28,11,31,108,31,59,31,80,31,184,31,106,31,196,31,138,31,4,31,120,31,120,30,88,31,88,30,53,31,53,30,152,31,201,31,95,31,223,31,223,30,173,31,38,31,42,31,42,30,234,31,226,31,181,31,123,31,46,31,137,31,236,31,45,31,172,31,101,31,180,31,135,31,14,31,132,31,169,31,66,31,177,31,110,31,141,31,135,31,53,31,217,31,226,31,63,31,63,30,58,31,135,31,146,31,172,31,209,31,235,31,199,31,199,30,59,31,24,31,242,31,44,31,249,31,240,31,212,31,151,31,44,31,250,31,209,31,239,31,245,31,76,31,162,31,125,31,64,31,59,31,221,31,221,30,221,29,150,31,168,31,187,31,187,30,146,31,86,31,167,31,172,31,175,31,175,30,211,31,211,30,82,31,144,31,118,31,95,31,95,30,95,29,95,28,177,31,92,31,42,31,84,31,135,31,89,31,158,31,15,31,21,31,111,31,107,31,107,30,83,31,251,31,190,31,90,31,98,31,59,31,177,31,236,31,181,31,191,31,124,31,24,31,92,31,69,31,32,31,33,31,191,31,204,31,126,31,201,31,234,31,255,31,159,31,159,30,232,31,25,31,244,31,133,31,31,31,31,30,45,31,45,30,242,31,104,31,132,31,54,31,42,31,94,31,122,31,93,31,197,31,63,31,220,31,14,31,14,30,135,31,135,30,65,31,65,30,58,31,125,31,143,31,117,31,193,31,155,31,19,31,170,31,10,31,122,31,124,31,86,31,86,30,46,31,57,31,69,31,172,31,181,31,181,30,168,31,168,30,64,31,137,31,137,30,146,31,99,31,91,31,30,31,73,31,34,31,16,31,126,31,118,31,118,30,141,31,141,30,45,31,167,31,167,30,167,29,242,31,242,30,242,29,227,31,60,31,251,31,105,31,105,30,3,31,17,31,178,31,147,31,147,30,147,29,147,28,15,31,229,31,186,31,33,31,169,31,114,31,223,31,128,31,251,31,251,30,251,29,6,31,53,31,255,31,120,31,9,31,203,31,141,31,4,31,4,30,4,29,4,28,4,27,128,31,179,31,101,31,101,30,211,31,234,31,219,31,209,31,49,31,49,30,132,31,132,30,157,31,32,31,77,31,77,30,71,31,243,31,10,31,10,30,146,31,146,30,51,31,51,30,51,29,183,31,183,30,203,31,203,30,208,31,191,31,142,31,228,31,154,31,186,31,236,31,236,30,14,31,122,31,31,31,31,30,138,31,189,31,106,31,199,31,163,31,146,31,146,30,146,29,24,31,183,31,233,31,157,31,151,31,36,31,247,31,147,31,234,31,41,31,41,30,41,29,236,31,60,31,239,31,10,31,209,31,209,30,180,31,180,30,22,31,131,31,131,30,126,31,33,31,234,31,78,31,133,31,104,31,22,31,10,31,10,30,122,31,61,31,61,30,236,31,110,31,4,31,116,31,48,31,120,31,249,31,129,31,35,31,182,31,156,31,160,31,49,31,189,31,204,31,203,31,8,31,8,30,155,31,126,31,66,31,196,31,184,31,186,31,169,31,200,31,200,30,200,29,113,31,223,31,223,30,1,31,1,30,168,31,168,30,233,31,168,31,168,30,247,31,247,30,210,31,16,31,16,30,54,31,105,31,161,31,47,31,47,30,190,31,109,31,252,31,147,31,200,31,202,31,137,31,144,31,92,31,92,30,38,31,112,31,126,31,199,31,199,30,100,31,153,31,164,31,97,31,118,31,24,31,24,30,85,31,30,31,30,30,168,31,43,31,43,30,83,31,196,31,102,31,239,31,175,31,67,31,67,30,130,31,242,31,181,31,181,30,197,31,95,31,130,31,130,30,71,31,83,31,34,31,113,31,127,31,32,31,32,30,6,31,6,30,241,31,241,30,27,31,27,30,96,31,50,31,215,31,53,31,78,31,247,31,184,31,166,31,200,31,56,31,227,31,227,31,158,31,219,31,219,30,90,31,94,31,94,30,27,31,136,31,151,31,103,31,72,31,72,30,214,31,76,31,98,31,158,31,250,31,250,30,142,31,79,31,79,30,18,31,213,31,213,30,132,31,42,31,10,31,119,31,1,31,5,31,5,30,5,29,39,31,60,31,221,31,16,31,196,31,170,31,173,31,126,31,235,31,79,31,126,31,206,31,104,31,189,31,42,31,151,31,98,31,98,30,92,31,92,30,106,31,63,31,63,30,55,31,55,30,239,31,60,31,93,31,225,31,72,31,72,30,193,31,221,31,221,30,233,31,212,31,175,31,184,31,1,31,60,31,22,31,22,30,1,31,241,31,241,30,87,31,36,31,172,31,92,31,227,31,132,31,132,30,183,31,246,31,30,31,30,30,240,31,192,31,251,31,7,31,8,31,8,30,34,31,137,31,56,31,233,31,233,30,150,31,31,31,31,30,210,31,186,31,169,31,228,31,158,31,158,30,41,31,246,31,136,31,97,31,50,31,67,31,2,31,27,31,91,31,32,31,111,31,178,31,178,30,3,31,3,30,134,31,28,31,19,31,30,31,13,31,35,31,35,30,39,31,119,31,119,30,72,31,101,31,101,30,123,31,123,30,211,31,211,30,184,31,184,30,183,31,203,31,78,31,78,30,106,31,142,31,170,31,210,31,247,31,87,31,199,31,167,31,167,30,167,29,167,28,180,31,164,31,99,31,68,31,144,31,5,31,5,30,218,31,244,31,99,31,228,31,225,31,95,31,89,31,229,31,88,31,240,31,199,31,72,31,161,31,138,31,130,31,130,30,130,29,130,28,7,31,31,31,183,31,60,31,124,31,26,31,245,31,245,30,48,31,48,30,250,31,33,31,206,31,206,30,219,31,219,30,71,31,32,31,25,31,25,30,129,31,215,31,196,31,196,30,209,31,209,30,59,31,18,31,246,31,95,31,219,31,239,31,106,31,183,31,100,31,114,31,243,31,191,31,191,30,172,31,172,30,135,31,32,31,125,31,217,31,117,31,117,30,117,29,117,28,82,31,82,30,82,29,57,31,51,31,206,31,36,31,142,31,243,31,61,31,44,31,214,31,92,31,92,30,92,29,87,31,221,31,212,31,46,31,230,31,55,31,1,31,203,31,158,31,158,30,224,31,25,31,31,31,181,31,103,31,142,31,207,31,106,31,48,31,180,31,35,31,152,31,248,31,89,31,25,31,140,31,80,31,80,30,165,31,165,30,143,31,143,30,143,29,143,28,58,31,44,31,137,31,30,31,161,31,82,31,43,31,114,31,126,31,49,31,49,30,148,31,168,31,183,31,183,30,117,31,117,30,117,29,117,28,117,27,23,31,22,31,72,31,235,31,193,31,193,30,193,29,107,31,111,31,117,31,177,31,52,31,213,31,58,31,139,31,234,31,203,31,203,30,252,31,154,31,233,31,252,31,43,31,107,31,25,31,114,31,114,30,114,29,120,31,209,31,240,31,240,30,67,31,127,31,5,31,19,31,59,31,34,31,101,31,18,31,42,31,24,31,220,31,151,31,109,31,25,31,40,31,21,31,176,31,28,31,99,31,235,31,164,31,158,31,38,31,38,30,38,29,16,31,16,30,16,29,212,31,44,31,249,31,255,31,218,31,218,30,85,31,85,30,74,31,26,31,42,31,205,31,39,31,39,30,127,31,127,30,127,29,21,31,223,31,117,31,137,31,120,31,214,31,241,31,82,31,60,31,60,30,134,31,146,31,180,31,3,31,115,31,134,31,134,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
