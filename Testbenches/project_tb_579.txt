-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 987;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,156,0,0,0,177,0,109,0,109,0,244,0,155,0,0,0,86,0,79,0,173,0,77,0,224,0,114,0,42,0,142,0,190,0,225,0,220,0,55,0,54,0,0,0,45,0,206,0,173,0,0,0,0,0,0,0,82,0,113,0,66,0,182,0,2,0,234,0,0,0,126,0,26,0,109,0,26,0,218,0,80,0,58,0,178,0,8,0,98,0,177,0,100,0,239,0,109,0,142,0,18,0,0,0,172,0,0,0,247,0,79,0,180,0,0,0,242,0,148,0,198,0,27,0,222,0,118,0,63,0,171,0,82,0,254,0,117,0,239,0,96,0,0,0,0,0,106,0,200,0,0,0,143,0,106,0,245,0,21,0,254,0,124,0,0,0,26,0,249,0,124,0,0,0,175,0,2,0,74,0,58,0,40,0,119,0,19,0,9,0,13,0,195,0,3,0,0,0,72,0,254,0,17,0,80,0,108,0,0,0,161,0,54,0,0,0,0,0,14,0,171,0,234,0,177,0,141,0,10,0,254,0,200,0,0,0,106,0,33,0,1,0,0,0,24,0,37,0,61,0,245,0,249,0,251,0,169,0,0,0,0,0,150,0,75,0,128,0,5,0,13,0,0,0,0,0,154,0,89,0,89,0,105,0,164,0,195,0,19,0,0,0,242,0,136,0,52,0,84,0,2,0,232,0,250,0,19,0,188,0,225,0,0,0,74,0,182,0,202,0,9,0,10,0,0,0,169,0,216,0,0,0,0,0,31,0,110,0,96,0,179,0,123,0,98,0,0,0,0,0,107,0,12,0,0,0,178,0,202,0,119,0,220,0,56,0,251,0,35,0,0,0,84,0,148,0,116,0,205,0,244,0,254,0,148,0,54,0,217,0,125,0,5,0,49,0,65,0,0,0,80,0,91,0,127,0,0,0,0,0,0,0,38,0,249,0,93,0,119,0,252,0,102,0,0,0,19,0,87,0,255,0,158,0,163,0,128,0,186,0,237,0,11,0,0,0,11,0,231,0,79,0,229,0,78,0,143,0,175,0,0,0,112,0,38,0,110,0,0,0,247,0,22,0,84,0,0,0,0,0,47,0,0,0,0,0,73,0,20,0,0,0,116,0,248,0,201,0,35,0,122,0,5,0,0,0,247,0,230,0,65,0,0,0,0,0,110,0,37,0,0,0,215,0,166,0,254,0,123,0,18,0,42,0,254,0,74,0,0,0,144,0,234,0,190,0,32,0,236,0,139,0,90,0,86,0,245,0,108,0,175,0,78,0,0,0,206,0,179,0,166,0,239,0,188,0,182,0,40,0,106,0,231,0,144,0,117,0,80,0,155,0,0,0,9,0,218,0,178,0,32,0,37,0,38,0,0,0,145,0,87,0,190,0,10,0,151,0,57,0,196,0,241,0,41,0,242,0,220,0,0,0,55,0,41,0,224,0,229,0,103,0,0,0,146,0,190,0,116,0,0,0,93,0,0,0,145,0,130,0,0,0,0,0,0,0,193,0,183,0,207,0,224,0,79,0,181,0,0,0,0,0,235,0,0,0,0,0,108,0,0,0,205,0,161,0,233,0,189,0,118,0,66,0,166,0,192,0,227,0,199,0,117,0,102,0,245,0,25,0,228,0,11,0,35,0,70,0,184,0,0,0,0,0,226,0,0,0,152,0,94,0,179,0,146,0,0,0,156,0,205,0,246,0,0,0,174,0,230,0,0,0,29,0,22,0,166,0,24,0,0,0,0,0,182,0,232,0,7,0,145,0,255,0,168,0,26,0,0,0,46,0,64,0,89,0,14,0,119,0,33,0,203,0,0,0,250,0,98,0,192,0,0,0,0,0,167,0,202,0,130,0,176,0,96,0,253,0,0,0,116,0,0,0,93,0,0,0,0,0,0,0,241,0,56,0,140,0,0,0,125,0,103,0,0,0,113,0,121,0,141,0,246,0,177,0,52,0,215,0,192,0,55,0,138,0,240,0,56,0,6,0,134,0,60,0,0,0,0,0,56,0,64,0,134,0,70,0,240,0,0,0,0,0,247,0,71,0,24,0,112,0,27,0,220,0,61,0,166,0,0,0,249,0,177,0,65,0,73,0,61,0,97,0,0,0,19,0,232,0,0,0,42,0,166,0,182,0,236,0,8,0,217,0,189,0,238,0,0,0,185,0,95,0,218,0,20,0,251,0,88,0,0,0,83,0,54,0,248,0,103,0,57,0,165,0,0,0,0,0,0,0,0,0,0,0,133,0,12,0,206,0,40,0,179,0,152,0,58,0,69,0,97,0,0,0,94,0,230,0,68,0,0,0,30,0,232,0,63,0,0,0,101,0,66,0,171,0,17,0,45,0,249,0,148,0,174,0,0,0,36,0,28,0,0,0,144,0,0,0,170,0,254,0,75,0,192,0,173,0,132,0,33,0,17,0,97,0,185,0,0,0,0,0,0,0,0,0,77,0,153,0,43,0,133,0,203,0,0,0,144,0,0,0,227,0,36,0,60,0,28,0,217,0,10,0,136,0,42,0,5,0,212,0,81,0,132,0,32,0,128,0,0,0,140,0,67,0,0,0,218,0,116,0,122,0,148,0,164,0,217,0,93,0,207,0,241,0,97,0,55,0,56,0,2,0,0,0,145,0,109,0,26,0,172,0,244,0,8,0,113,0,98,0,96,0,138,0,77,0,30,0,151,0,179,0,129,0,141,0,7,0,41,0,0,0,69,0,217,0,0,0,16,0,238,0,254,0,203,0,223,0,116,0,152,0,224,0,143,0,214,0,48,0,96,0,81,0,0,0,217,0,165,0,151,0,215,0,109,0,147,0,253,0,178,0,205,0,242,0,173,0,17,0,148,0,0,0,145,0,100,0,110,0,35,0,17,0,116,0,33,0,92,0,17,0,197,0,64,0,0,0,101,0,249,0,94,0,17,0,211,0,240,0,0,0,144,0,181,0,237,0,0,0,122,0,0,0,127,0,201,0,0,0,71,0,204,0,31,0,242,0,0,0,0,0,200,0,0,0,82,0,249,0,243,0,250,0,183,0,182,0,173,0,59,0,0,0,41,0,41,0,0,0,0,0,217,0,0,0,170,0,117,0,152,0,0,0,168,0,0,0,116,0,221,0,0,0,0,0,221,0,211,0,100,0,98,0,21,0,6,0,12,0,179,0,97,0,0,0,208,0,3,0,102,0,178,0,0,0,40,0,87,0,187,0,0,0,0,0,0,0,0,0,22,0,208,0,112,0,66,0,0,0,185,0,65,0,197,0,0,0,77,0,167,0,78,0,168,0,150,0,0,0,255,0,34,0,0,0,209,0,0,0,193,0,18,0,241,0,142,0,211,0,0,0,104,0,33,0,35,0,4,0,236,0,0,0,56,0,0,0,187,0,0,0,166,0,30,0,87,0,0,0,198,0,195,0,192,0,0,0,249,0,48,0,242,0,251,0,167,0,0,0,50,0,0,0,150,0,87,0,186,0,180,0,0,0,25,0,0,0,0,0,152,0,148,0,175,0,7,0,183,0,66,0,41,0,94,0,138,0,45,0,160,0,208,0,1,0,34,0,17,0,0,0,147,0,64,0,0,0,96,0,106,0,243,0,121,0,229,0,0,0,179,0,55,0,85,0,37,0,211,0,232,0,160,0,95,0,6,0,222,0,66,0,198,0,184,0,171,0,238,0,9,0,150,0,38,0,137,0,227,0,169,0,42,0,241,0,175,0,52,0,248,0,0,0,96,0,126,0,39,0,0,0,255,0,139,0,0,0,0,0,23,0,0,0,0,0,42,0,0,0,20,0,46,0,46,0,57,0,183,0,141,0,56,0,6,0,35,0,216,0,62,0,130,0,115,0,236,0,173,0,177,0,166,0,0,0,0,0,0,0,85,0,156,0,132,0,153,0,216,0,0,0,12,0,57,0,228,0,211,0,107,0,99,0,32,0,237,0,71,0,159,0,236,0,0,0,0,0,245,0,19,0,142,0,98,0,51,0,68,0,62,0,28,0,141,0,157,0,118,0,119,0,209,0,251,0,51,0,128,0,0,0,180,0,164,0,46,0,0,0,162,0,85,0,193,0,0,0,202,0,61,0,171,0,16,0,200,0,26,0,48,0,0,0,0,0,0,0,166,0,0,0,9,0,87,0,0,0,85,0,0,0,0,0,105,0,0,0,221,0,127,0,188,0,150,0,101,0,124,0,0,0,0,0,107,0,141,0,60,0,249,0,116,0,220,0,176,0,14,0,57,0,0,0,0,0,121,0,196,0,71,0,0,0,17,0,183,0,32,0,93,0,174,0,171,0,0,0,0,0,230,0,149,0,232,0,139,0,194,0,224,0,198,0,158,0,0,0,1,0,0,0,16,0,67,0,168,0,240,0,69,0,126,0,165,0,113,0,0,0,0,0,113,0,0,0,140,0,122,0,45,0,0,0,223,0,74,0);
signal scenario_full  : scenario_type := (0,0,156,31,156,30,177,31,109,31,109,31,244,31,155,31,155,30,86,31,79,31,173,31,77,31,224,31,114,31,42,31,142,31,190,31,225,31,220,31,55,31,54,31,54,30,45,31,206,31,173,31,173,30,173,29,173,28,82,31,113,31,66,31,182,31,2,31,234,31,234,30,126,31,26,31,109,31,26,31,218,31,80,31,58,31,178,31,8,31,98,31,177,31,100,31,239,31,109,31,142,31,18,31,18,30,172,31,172,30,247,31,79,31,180,31,180,30,242,31,148,31,198,31,27,31,222,31,118,31,63,31,171,31,82,31,254,31,117,31,239,31,96,31,96,30,96,29,106,31,200,31,200,30,143,31,106,31,245,31,21,31,254,31,124,31,124,30,26,31,249,31,124,31,124,30,175,31,2,31,74,31,58,31,40,31,119,31,19,31,9,31,13,31,195,31,3,31,3,30,72,31,254,31,17,31,80,31,108,31,108,30,161,31,54,31,54,30,54,29,14,31,171,31,234,31,177,31,141,31,10,31,254,31,200,31,200,30,106,31,33,31,1,31,1,30,24,31,37,31,61,31,245,31,249,31,251,31,169,31,169,30,169,29,150,31,75,31,128,31,5,31,13,31,13,30,13,29,154,31,89,31,89,31,105,31,164,31,195,31,19,31,19,30,242,31,136,31,52,31,84,31,2,31,232,31,250,31,19,31,188,31,225,31,225,30,74,31,182,31,202,31,9,31,10,31,10,30,169,31,216,31,216,30,216,29,31,31,110,31,96,31,179,31,123,31,98,31,98,30,98,29,107,31,12,31,12,30,178,31,202,31,119,31,220,31,56,31,251,31,35,31,35,30,84,31,148,31,116,31,205,31,244,31,254,31,148,31,54,31,217,31,125,31,5,31,49,31,65,31,65,30,80,31,91,31,127,31,127,30,127,29,127,28,38,31,249,31,93,31,119,31,252,31,102,31,102,30,19,31,87,31,255,31,158,31,163,31,128,31,186,31,237,31,11,31,11,30,11,31,231,31,79,31,229,31,78,31,143,31,175,31,175,30,112,31,38,31,110,31,110,30,247,31,22,31,84,31,84,30,84,29,47,31,47,30,47,29,73,31,20,31,20,30,116,31,248,31,201,31,35,31,122,31,5,31,5,30,247,31,230,31,65,31,65,30,65,29,110,31,37,31,37,30,215,31,166,31,254,31,123,31,18,31,42,31,254,31,74,31,74,30,144,31,234,31,190,31,32,31,236,31,139,31,90,31,86,31,245,31,108,31,175,31,78,31,78,30,206,31,179,31,166,31,239,31,188,31,182,31,40,31,106,31,231,31,144,31,117,31,80,31,155,31,155,30,9,31,218,31,178,31,32,31,37,31,38,31,38,30,145,31,87,31,190,31,10,31,151,31,57,31,196,31,241,31,41,31,242,31,220,31,220,30,55,31,41,31,224,31,229,31,103,31,103,30,146,31,190,31,116,31,116,30,93,31,93,30,145,31,130,31,130,30,130,29,130,28,193,31,183,31,207,31,224,31,79,31,181,31,181,30,181,29,235,31,235,30,235,29,108,31,108,30,205,31,161,31,233,31,189,31,118,31,66,31,166,31,192,31,227,31,199,31,117,31,102,31,245,31,25,31,228,31,11,31,35,31,70,31,184,31,184,30,184,29,226,31,226,30,152,31,94,31,179,31,146,31,146,30,156,31,205,31,246,31,246,30,174,31,230,31,230,30,29,31,22,31,166,31,24,31,24,30,24,29,182,31,232,31,7,31,145,31,255,31,168,31,26,31,26,30,46,31,64,31,89,31,14,31,119,31,33,31,203,31,203,30,250,31,98,31,192,31,192,30,192,29,167,31,202,31,130,31,176,31,96,31,253,31,253,30,116,31,116,30,93,31,93,30,93,29,93,28,241,31,56,31,140,31,140,30,125,31,103,31,103,30,113,31,121,31,141,31,246,31,177,31,52,31,215,31,192,31,55,31,138,31,240,31,56,31,6,31,134,31,60,31,60,30,60,29,56,31,64,31,134,31,70,31,240,31,240,30,240,29,247,31,71,31,24,31,112,31,27,31,220,31,61,31,166,31,166,30,249,31,177,31,65,31,73,31,61,31,97,31,97,30,19,31,232,31,232,30,42,31,166,31,182,31,236,31,8,31,217,31,189,31,238,31,238,30,185,31,95,31,218,31,20,31,251,31,88,31,88,30,83,31,54,31,248,31,103,31,57,31,165,31,165,30,165,29,165,28,165,27,165,26,133,31,12,31,206,31,40,31,179,31,152,31,58,31,69,31,97,31,97,30,94,31,230,31,68,31,68,30,30,31,232,31,63,31,63,30,101,31,66,31,171,31,17,31,45,31,249,31,148,31,174,31,174,30,36,31,28,31,28,30,144,31,144,30,170,31,254,31,75,31,192,31,173,31,132,31,33,31,17,31,97,31,185,31,185,30,185,29,185,28,185,27,77,31,153,31,43,31,133,31,203,31,203,30,144,31,144,30,227,31,36,31,60,31,28,31,217,31,10,31,136,31,42,31,5,31,212,31,81,31,132,31,32,31,128,31,128,30,140,31,67,31,67,30,218,31,116,31,122,31,148,31,164,31,217,31,93,31,207,31,241,31,97,31,55,31,56,31,2,31,2,30,145,31,109,31,26,31,172,31,244,31,8,31,113,31,98,31,96,31,138,31,77,31,30,31,151,31,179,31,129,31,141,31,7,31,41,31,41,30,69,31,217,31,217,30,16,31,238,31,254,31,203,31,223,31,116,31,152,31,224,31,143,31,214,31,48,31,96,31,81,31,81,30,217,31,165,31,151,31,215,31,109,31,147,31,253,31,178,31,205,31,242,31,173,31,17,31,148,31,148,30,145,31,100,31,110,31,35,31,17,31,116,31,33,31,92,31,17,31,197,31,64,31,64,30,101,31,249,31,94,31,17,31,211,31,240,31,240,30,144,31,181,31,237,31,237,30,122,31,122,30,127,31,201,31,201,30,71,31,204,31,31,31,242,31,242,30,242,29,200,31,200,30,82,31,249,31,243,31,250,31,183,31,182,31,173,31,59,31,59,30,41,31,41,31,41,30,41,29,217,31,217,30,170,31,117,31,152,31,152,30,168,31,168,30,116,31,221,31,221,30,221,29,221,31,211,31,100,31,98,31,21,31,6,31,12,31,179,31,97,31,97,30,208,31,3,31,102,31,178,31,178,30,40,31,87,31,187,31,187,30,187,29,187,28,187,27,22,31,208,31,112,31,66,31,66,30,185,31,65,31,197,31,197,30,77,31,167,31,78,31,168,31,150,31,150,30,255,31,34,31,34,30,209,31,209,30,193,31,18,31,241,31,142,31,211,31,211,30,104,31,33,31,35,31,4,31,236,31,236,30,56,31,56,30,187,31,187,30,166,31,30,31,87,31,87,30,198,31,195,31,192,31,192,30,249,31,48,31,242,31,251,31,167,31,167,30,50,31,50,30,150,31,87,31,186,31,180,31,180,30,25,31,25,30,25,29,152,31,148,31,175,31,7,31,183,31,66,31,41,31,94,31,138,31,45,31,160,31,208,31,1,31,34,31,17,31,17,30,147,31,64,31,64,30,96,31,106,31,243,31,121,31,229,31,229,30,179,31,55,31,85,31,37,31,211,31,232,31,160,31,95,31,6,31,222,31,66,31,198,31,184,31,171,31,238,31,9,31,150,31,38,31,137,31,227,31,169,31,42,31,241,31,175,31,52,31,248,31,248,30,96,31,126,31,39,31,39,30,255,31,139,31,139,30,139,29,23,31,23,30,23,29,42,31,42,30,20,31,46,31,46,31,57,31,183,31,141,31,56,31,6,31,35,31,216,31,62,31,130,31,115,31,236,31,173,31,177,31,166,31,166,30,166,29,166,28,85,31,156,31,132,31,153,31,216,31,216,30,12,31,57,31,228,31,211,31,107,31,99,31,32,31,237,31,71,31,159,31,236,31,236,30,236,29,245,31,19,31,142,31,98,31,51,31,68,31,62,31,28,31,141,31,157,31,118,31,119,31,209,31,251,31,51,31,128,31,128,30,180,31,164,31,46,31,46,30,162,31,85,31,193,31,193,30,202,31,61,31,171,31,16,31,200,31,26,31,48,31,48,30,48,29,48,28,166,31,166,30,9,31,87,31,87,30,85,31,85,30,85,29,105,31,105,30,221,31,127,31,188,31,150,31,101,31,124,31,124,30,124,29,107,31,141,31,60,31,249,31,116,31,220,31,176,31,14,31,57,31,57,30,57,29,121,31,196,31,71,31,71,30,17,31,183,31,32,31,93,31,174,31,171,31,171,30,171,29,230,31,149,31,232,31,139,31,194,31,224,31,198,31,158,31,158,30,1,31,1,30,16,31,67,31,168,31,240,31,69,31,126,31,165,31,113,31,113,30,113,29,113,31,113,30,140,31,122,31,45,31,45,30,223,31,74,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
