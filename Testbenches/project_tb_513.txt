-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 852;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (201,0,186,0,42,0,88,0,0,0,0,0,144,0,0,0,125,0,0,0,0,0,219,0,0,0,0,0,0,0,73,0,76,0,122,0,37,0,148,0,238,0,0,0,0,0,0,0,93,0,187,0,0,0,190,0,13,0,216,0,116,0,78,0,0,0,0,0,0,0,0,0,2,0,3,0,188,0,60,0,254,0,84,0,57,0,80,0,0,0,0,0,165,0,136,0,0,0,150,0,38,0,246,0,0,0,66,0,111,0,230,0,13,0,74,0,87,0,182,0,155,0,217,0,21,0,0,0,143,0,115,0,99,0,123,0,148,0,0,0,0,0,0,0,18,0,177,0,24,0,0,0,0,0,112,0,155,0,45,0,121,0,191,0,220,0,0,0,79,0,0,0,231,0,191,0,235,0,53,0,220,0,175,0,0,0,183,0,174,0,0,0,0,0,141,0,0,0,2,0,0,0,111,0,110,0,243,0,0,0,0,0,69,0,222,0,111,0,35,0,0,0,0,0,45,0,188,0,110,0,245,0,21,0,39,0,0,0,126,0,218,0,3,0,177,0,0,0,55,0,0,0,239,0,118,0,0,0,230,0,209,0,51,0,239,0,194,0,183,0,51,0,53,0,185,0,0,0,246,0,0,0,34,0,73,0,0,0,0,0,11,0,0,0,191,0,213,0,0,0,104,0,0,0,226,0,0,0,93,0,202,0,146,0,0,0,16,0,15,0,1,0,0,0,115,0,0,0,0,0,0,0,145,0,116,0,40,0,93,0,254,0,100,0,0,0,218,0,153,0,79,0,203,0,13,0,252,0,26,0,94,0,131,0,182,0,214,0,125,0,62,0,215,0,0,0,0,0,0,0,66,0,0,0,0,0,0,0,77,0,40,0,0,0,39,0,181,0,53,0,45,0,0,0,24,0,0,0,223,0,0,0,204,0,246,0,241,0,57,0,64,0,101,0,60,0,0,0,209,0,232,0,0,0,148,0,0,0,147,0,0,0,77,0,155,0,0,0,56,0,0,0,0,0,0,0,92,0,172,0,74,0,230,0,93,0,0,0,5,0,197,0,40,0,0,0,0,0,174,0,20,0,166,0,191,0,196,0,60,0,27,0,0,0,235,0,180,0,19,0,183,0,46,0,200,0,110,0,217,0,159,0,103,0,209,0,176,0,74,0,123,0,202,0,170,0,115,0,224,0,35,0,40,0,192,0,30,0,100,0,48,0,228,0,47,0,121,0,37,0,26,0,111,0,105,0,0,0,37,0,204,0,0,0,253,0,63,0,156,0,252,0,0,0,107,0,210,0,97,0,59,0,89,0,154,0,0,0,56,0,215,0,123,0,120,0,0,0,106,0,62,0,96,0,0,0,50,0,144,0,0,0,8,0,73,0,201,0,255,0,191,0,0,0,159,0,103,0,0,0,133,0,151,0,31,0,141,0,57,0,0,0,0,0,206,0,0,0,0,0,129,0,196,0,0,0,0,0,79,0,199,0,0,0,201,0,228,0,161,0,82,0,90,0,225,0,41,0,156,0,210,0,196,0,128,0,235,0,111,0,120,0,91,0,44,0,47,0,96,0,168,0,179,0,0,0,66,0,7,0,126,0,107,0,211,0,72,0,125,0,157,0,142,0,131,0,11,0,212,0,14,0,71,0,155,0,61,0,228,0,211,0,184,0,183,0,0,0,139,0,74,0,0,0,174,0,0,0,50,0,196,0,228,0,0,0,51,0,187,0,50,0,0,0,236,0,170,0,227,0,243,0,21,0,49,0,120,0,146,0,157,0,189,0,0,0,70,0,72,0,0,0,122,0,70,0,192,0,11,0,211,0,18,0,0,0,0,0,79,0,5,0,111,0,120,0,110,0,116,0,105,0,53,0,0,0,168,0,38,0,134,0,8,0,41,0,240,0,4,0,154,0,0,0,0,0,131,0,72,0,187,0,249,0,97,0,0,0,0,0,35,0,105,0,0,0,0,0,108,0,59,0,0,0,0,0,0,0,0,0,66,0,183,0,71,0,182,0,0,0,150,0,142,0,142,0,234,0,104,0,31,0,3,0,73,0,225,0,85,0,53,0,0,0,89,0,178,0,12,0,27,0,0,0,42,0,86,0,89,0,59,0,68,0,169,0,250,0,11,0,69,0,0,0,62,0,107,0,39,0,66,0,208,0,110,0,229,0,27,0,195,0,176,0,133,0,39,0,241,0,96,0,163,0,223,0,222,0,18,0,100,0,183,0,144,0,76,0,0,0,60,0,86,0,58,0,91,0,0,0,195,0,88,0,99,0,108,0,0,0,231,0,0,0,147,0,0,0,0,0,86,0,33,0,81,0,156,0,0,0,184,0,185,0,5,0,123,0,142,0,0,0,13,0,39,0,98,0,165,0,0,0,140,0,225,0,201,0,133,0,69,0,48,0,249,0,175,0,0,0,2,0,169,0,214,0,67,0,0,0,143,0,0,0,36,0,189,0,142,0,0,0,76,0,123,0,42,0,0,0,162,0,0,0,49,0,78,0,8,0,0,0,200,0,115,0,0,0,0,0,82,0,172,0,161,0,102,0,86,0,143,0,0,0,251,0,166,0,0,0,0,0,43,0,207,0,54,0,82,0,198,0,0,0,101,0,187,0,125,0,227,0,245,0,61,0,141,0,245,0,242,0,45,0,184,0,211,0,0,0,218,0,170,0,20,0,143,0,196,0,162,0,0,0,199,0,0,0,178,0,0,0,11,0,0,0,19,0,0,0,0,0,94,0,255,0,11,0,107,0,0,0,201,0,106,0,0,0,167,0,58,0,95,0,147,0,224,0,172,0,241,0,181,0,33,0,234,0,99,0,62,0,167,0,160,0,63,0,183,0,0,0,0,0,112,0,243,0,248,0,226,0,157,0,0,0,190,0,46,0,224,0,167,0,197,0,187,0,121,0,0,0,19,0,69,0,195,0,89,0,61,0,0,0,0,0,30,0,17,0,214,0,0,0,122,0,196,0,242,0,179,0,0,0,14,0,0,0,80,0,169,0,223,0,14,0,0,0,32,0,136,0,0,0,0,0,225,0,0,0,119,0,77,0,23,0,219,0,208,0,80,0,121,0,154,0,228,0,0,0,0,0,0,0,243,0,154,0,110,0,65,0,34,0,99,0,187,0,102,0,98,0,1,0,177,0,199,0,145,0,0,0,0,0,29,0,199,0,0,0,243,0,137,0,1,0,137,0,107,0,103,0,216,0,144,0,81,0,0,0,233,0,222,0,249,0,0,0,103,0,69,0,33,0,47,0,135,0,25,0,133,0,208,0,138,0,69,0,137,0,96,0,45,0,0,0,217,0,229,0,140,0,188,0,27,0,6,0,191,0,209,0,0,0,181,0,56,0,85,0,56,0,158,0,199,0,60,0,0,0,167,0,100,0,157,0,0,0,152,0,12,0,134,0,12,0,46,0,81,0,61,0,109,0,231,0,245,0,247,0,195,0,0,0,211,0,162,0,176,0,144,0,29,0,0,0,191,0,147,0,0,0,159,0,44,0,0,0,46,0,23,0,135,0,53,0,177,0,0,0,0,0,148,0,67,0,109,0,141,0,0,0,0,0,157,0,9,0,79,0,151,0,154,0,240,0,0,0,16,0,0,0,255,0,141,0,93,0,144,0,208,0,177,0,22,0,0,0,226,0,5,0,71,0,224,0,102,0,254,0,105,0,226,0,67,0,0,0,213,0,0,0,23,0,92,0,40,0,80,0,0,0,163,0,80,0,236,0,70,0,148,0,2,0,224,0,48,0,108,0,0,0,184,0,72,0,56,0,88,0,198,0,41,0,151,0,151,0,0,0,0,0,251,0);
signal scenario_full  : scenario_type := (201,31,186,31,42,31,88,31,88,30,88,29,144,31,144,30,125,31,125,30,125,29,219,31,219,30,219,29,219,28,73,31,76,31,122,31,37,31,148,31,238,31,238,30,238,29,238,28,93,31,187,31,187,30,190,31,13,31,216,31,116,31,78,31,78,30,78,29,78,28,78,27,2,31,3,31,188,31,60,31,254,31,84,31,57,31,80,31,80,30,80,29,165,31,136,31,136,30,150,31,38,31,246,31,246,30,66,31,111,31,230,31,13,31,74,31,87,31,182,31,155,31,217,31,21,31,21,30,143,31,115,31,99,31,123,31,148,31,148,30,148,29,148,28,18,31,177,31,24,31,24,30,24,29,112,31,155,31,45,31,121,31,191,31,220,31,220,30,79,31,79,30,231,31,191,31,235,31,53,31,220,31,175,31,175,30,183,31,174,31,174,30,174,29,141,31,141,30,2,31,2,30,111,31,110,31,243,31,243,30,243,29,69,31,222,31,111,31,35,31,35,30,35,29,45,31,188,31,110,31,245,31,21,31,39,31,39,30,126,31,218,31,3,31,177,31,177,30,55,31,55,30,239,31,118,31,118,30,230,31,209,31,51,31,239,31,194,31,183,31,51,31,53,31,185,31,185,30,246,31,246,30,34,31,73,31,73,30,73,29,11,31,11,30,191,31,213,31,213,30,104,31,104,30,226,31,226,30,93,31,202,31,146,31,146,30,16,31,15,31,1,31,1,30,115,31,115,30,115,29,115,28,145,31,116,31,40,31,93,31,254,31,100,31,100,30,218,31,153,31,79,31,203,31,13,31,252,31,26,31,94,31,131,31,182,31,214,31,125,31,62,31,215,31,215,30,215,29,215,28,66,31,66,30,66,29,66,28,77,31,40,31,40,30,39,31,181,31,53,31,45,31,45,30,24,31,24,30,223,31,223,30,204,31,246,31,241,31,57,31,64,31,101,31,60,31,60,30,209,31,232,31,232,30,148,31,148,30,147,31,147,30,77,31,155,31,155,30,56,31,56,30,56,29,56,28,92,31,172,31,74,31,230,31,93,31,93,30,5,31,197,31,40,31,40,30,40,29,174,31,20,31,166,31,191,31,196,31,60,31,27,31,27,30,235,31,180,31,19,31,183,31,46,31,200,31,110,31,217,31,159,31,103,31,209,31,176,31,74,31,123,31,202,31,170,31,115,31,224,31,35,31,40,31,192,31,30,31,100,31,48,31,228,31,47,31,121,31,37,31,26,31,111,31,105,31,105,30,37,31,204,31,204,30,253,31,63,31,156,31,252,31,252,30,107,31,210,31,97,31,59,31,89,31,154,31,154,30,56,31,215,31,123,31,120,31,120,30,106,31,62,31,96,31,96,30,50,31,144,31,144,30,8,31,73,31,201,31,255,31,191,31,191,30,159,31,103,31,103,30,133,31,151,31,31,31,141,31,57,31,57,30,57,29,206,31,206,30,206,29,129,31,196,31,196,30,196,29,79,31,199,31,199,30,201,31,228,31,161,31,82,31,90,31,225,31,41,31,156,31,210,31,196,31,128,31,235,31,111,31,120,31,91,31,44,31,47,31,96,31,168,31,179,31,179,30,66,31,7,31,126,31,107,31,211,31,72,31,125,31,157,31,142,31,131,31,11,31,212,31,14,31,71,31,155,31,61,31,228,31,211,31,184,31,183,31,183,30,139,31,74,31,74,30,174,31,174,30,50,31,196,31,228,31,228,30,51,31,187,31,50,31,50,30,236,31,170,31,227,31,243,31,21,31,49,31,120,31,146,31,157,31,189,31,189,30,70,31,72,31,72,30,122,31,70,31,192,31,11,31,211,31,18,31,18,30,18,29,79,31,5,31,111,31,120,31,110,31,116,31,105,31,53,31,53,30,168,31,38,31,134,31,8,31,41,31,240,31,4,31,154,31,154,30,154,29,131,31,72,31,187,31,249,31,97,31,97,30,97,29,35,31,105,31,105,30,105,29,108,31,59,31,59,30,59,29,59,28,59,27,66,31,183,31,71,31,182,31,182,30,150,31,142,31,142,31,234,31,104,31,31,31,3,31,73,31,225,31,85,31,53,31,53,30,89,31,178,31,12,31,27,31,27,30,42,31,86,31,89,31,59,31,68,31,169,31,250,31,11,31,69,31,69,30,62,31,107,31,39,31,66,31,208,31,110,31,229,31,27,31,195,31,176,31,133,31,39,31,241,31,96,31,163,31,223,31,222,31,18,31,100,31,183,31,144,31,76,31,76,30,60,31,86,31,58,31,91,31,91,30,195,31,88,31,99,31,108,31,108,30,231,31,231,30,147,31,147,30,147,29,86,31,33,31,81,31,156,31,156,30,184,31,185,31,5,31,123,31,142,31,142,30,13,31,39,31,98,31,165,31,165,30,140,31,225,31,201,31,133,31,69,31,48,31,249,31,175,31,175,30,2,31,169,31,214,31,67,31,67,30,143,31,143,30,36,31,189,31,142,31,142,30,76,31,123,31,42,31,42,30,162,31,162,30,49,31,78,31,8,31,8,30,200,31,115,31,115,30,115,29,82,31,172,31,161,31,102,31,86,31,143,31,143,30,251,31,166,31,166,30,166,29,43,31,207,31,54,31,82,31,198,31,198,30,101,31,187,31,125,31,227,31,245,31,61,31,141,31,245,31,242,31,45,31,184,31,211,31,211,30,218,31,170,31,20,31,143,31,196,31,162,31,162,30,199,31,199,30,178,31,178,30,11,31,11,30,19,31,19,30,19,29,94,31,255,31,11,31,107,31,107,30,201,31,106,31,106,30,167,31,58,31,95,31,147,31,224,31,172,31,241,31,181,31,33,31,234,31,99,31,62,31,167,31,160,31,63,31,183,31,183,30,183,29,112,31,243,31,248,31,226,31,157,31,157,30,190,31,46,31,224,31,167,31,197,31,187,31,121,31,121,30,19,31,69,31,195,31,89,31,61,31,61,30,61,29,30,31,17,31,214,31,214,30,122,31,196,31,242,31,179,31,179,30,14,31,14,30,80,31,169,31,223,31,14,31,14,30,32,31,136,31,136,30,136,29,225,31,225,30,119,31,77,31,23,31,219,31,208,31,80,31,121,31,154,31,228,31,228,30,228,29,228,28,243,31,154,31,110,31,65,31,34,31,99,31,187,31,102,31,98,31,1,31,177,31,199,31,145,31,145,30,145,29,29,31,199,31,199,30,243,31,137,31,1,31,137,31,107,31,103,31,216,31,144,31,81,31,81,30,233,31,222,31,249,31,249,30,103,31,69,31,33,31,47,31,135,31,25,31,133,31,208,31,138,31,69,31,137,31,96,31,45,31,45,30,217,31,229,31,140,31,188,31,27,31,6,31,191,31,209,31,209,30,181,31,56,31,85,31,56,31,158,31,199,31,60,31,60,30,167,31,100,31,157,31,157,30,152,31,12,31,134,31,12,31,46,31,81,31,61,31,109,31,231,31,245,31,247,31,195,31,195,30,211,31,162,31,176,31,144,31,29,31,29,30,191,31,147,31,147,30,159,31,44,31,44,30,46,31,23,31,135,31,53,31,177,31,177,30,177,29,148,31,67,31,109,31,141,31,141,30,141,29,157,31,9,31,79,31,151,31,154,31,240,31,240,30,16,31,16,30,255,31,141,31,93,31,144,31,208,31,177,31,22,31,22,30,226,31,5,31,71,31,224,31,102,31,254,31,105,31,226,31,67,31,67,30,213,31,213,30,23,31,92,31,40,31,80,31,80,30,163,31,80,31,236,31,70,31,148,31,2,31,224,31,48,31,108,31,108,30,184,31,72,31,56,31,88,31,198,31,41,31,151,31,151,31,151,30,151,29,251,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
