-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 535;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (128,0,220,0,84,0,0,0,58,0,1,0,8,0,207,0,204,0,220,0,196,0,19,0,74,0,148,0,148,0,110,0,0,0,196,0,210,0,0,0,47,0,65,0,31,0,45,0,0,0,80,0,152,0,161,0,0,0,0,0,169,0,0,0,56,0,0,0,92,0,92,0,59,0,194,0,134,0,46,0,117,0,26,0,0,0,135,0,240,0,0,0,77,0,0,0,57,0,104,0,0,0,0,0,206,0,105,0,2,0,0,0,226,0,0,0,127,0,0,0,0,0,0,0,0,0,31,0,91,0,223,0,73,0,11,0,0,0,111,0,82,0,212,0,2,0,137,0,55,0,145,0,92,0,0,0,174,0,209,0,156,0,236,0,65,0,8,0,205,0,156,0,0,0,0,0,0,0,104,0,22,0,165,0,130,0,132,0,0,0,0,0,0,0,0,0,237,0,0,0,164,0,172,0,162,0,0,0,125,0,0,0,14,0,10,0,252,0,204,0,223,0,0,0,190,0,7,0,220,0,215,0,95,0,155,0,103,0,215,0,109,0,74,0,145,0,104,0,94,0,192,0,171,0,158,0,79,0,136,0,0,0,173,0,40,0,4,0,221,0,155,0,0,0,224,0,83,0,0,0,0,0,0,0,0,0,19,0,20,0,0,0,117,0,35,0,0,0,28,0,0,0,95,0,47,0,195,0,213,0,0,0,20,0,168,0,129,0,189,0,0,0,102,0,0,0,16,0,153,0,1,0,105,0,0,0,99,0,54,0,0,0,70,0,44,0,98,0,165,0,45,0,0,0,78,0,70,0,195,0,211,0,186,0,99,0,54,0,0,0,202,0,225,0,148,0,239,0,189,0,158,0,109,0,113,0,186,0,0,0,0,0,198,0,163,0,0,0,0,0,163,0,60,0,228,0,120,0,198,0,197,0,228,0,0,0,56,0,161,0,0,0,0,0,113,0,211,0,255,0,79,0,42,0,113,0,0,0,0,0,152,0,177,0,16,0,149,0,60,0,50,0,239,0,2,0,219,0,114,0,232,0,4,0,32,0,182,0,10,0,194,0,125,0,188,0,99,0,81,0,123,0,138,0,182,0,0,0,87,0,251,0,228,0,150,0,119,0,0,0,134,0,247,0,0,0,36,0,148,0,54,0,147,0,30,0,135,0,253,0,68,0,247,0,60,0,241,0,255,0,83,0,152,0,213,0,100,0,54,0,0,0,94,0,12,0,190,0,214,0,251,0,58,0,0,0,83,0,141,0,191,0,0,0,154,0,182,0,48,0,95,0,254,0,0,0,0,0,21,0,227,0,172,0,0,0,40,0,52,0,9,0,0,0,73,0,251,0,0,0,56,0,51,0,0,0,160,0,101,0,135,0,194,0,113,0,0,0,176,0,188,0,106,0,60,0,192,0,108,0,158,0,145,0,157,0,105,0,164,0,0,0,38,0,69,0,255,0,0,0,240,0,149,0,170,0,32,0,142,0,203,0,99,0,69,0,146,0,254,0,120,0,230,0,251,0,27,0,80,0,150,0,0,0,167,0,0,0,157,0,3,0,0,0,0,0,158,0,0,0,0,0,15,0,45,0,214,0,117,0,109,0,11,0,72,0,190,0,179,0,0,0,88,0,138,0,26,0,126,0,0,0,250,0,144,0,28,0,62,0,0,0,42,0,79,0,153,0,220,0,243,0,87,0,0,0,218,0,0,0,100,0,214,0,220,0,243,0,212,0,0,0,67,0,193,0,67,0,0,0,11,0,122,0,117,0,247,0,106,0,80,0,0,0,88,0,186,0,220,0,0,0,52,0,0,0,180,0,218,0,0,0,198,0,113,0,53,0,117,0,185,0,100,0,114,0,220,0,251,0,128,0,109,0,204,0,0,0,179,0,16,0,151,0,96,0,149,0,45,0,178,0,241,0,138,0,198,0,159,0,19,0,87,0,207,0,182,0,175,0,15,0,236,0,174,0,0,0,0,0,254,0,0,0,93,0,227,0,164,0,77,0,24,0,161,0,72,0,169,0,0,0,229,0,194,0,0,0,205,0,216,0,0,0,251,0,0,0,90,0,199,0,4,0,0,0,164,0,105,0,136,0,198,0,46,0,229,0,6,0,209,0,37,0,215,0,198,0,218,0,69,0,170,0,0,0,248,0,122,0,6,0,241,0,0,0,82,0,202,0,0,0,27,0,0,0,232,0,11,0,126,0,165,0,0,0,139,0,0,0,136,0,44,0,0,0,71,0,91,0,140,0,186,0,0,0,251,0,68,0,226,0,101,0,155,0,9,0,208,0,100,0,0,0,0,0,236,0,50,0,0,0,214,0,53,0,217,0,7,0,0,0,7,0,130,0,0,0,0,0,135,0,97,0,129,0,250,0,164,0,84,0,161,0,0,0,176,0,0,0);
signal scenario_full  : scenario_type := (128,31,220,31,84,31,84,30,58,31,1,31,8,31,207,31,204,31,220,31,196,31,19,31,74,31,148,31,148,31,110,31,110,30,196,31,210,31,210,30,47,31,65,31,31,31,45,31,45,30,80,31,152,31,161,31,161,30,161,29,169,31,169,30,56,31,56,30,92,31,92,31,59,31,194,31,134,31,46,31,117,31,26,31,26,30,135,31,240,31,240,30,77,31,77,30,57,31,104,31,104,30,104,29,206,31,105,31,2,31,2,30,226,31,226,30,127,31,127,30,127,29,127,28,127,27,31,31,91,31,223,31,73,31,11,31,11,30,111,31,82,31,212,31,2,31,137,31,55,31,145,31,92,31,92,30,174,31,209,31,156,31,236,31,65,31,8,31,205,31,156,31,156,30,156,29,156,28,104,31,22,31,165,31,130,31,132,31,132,30,132,29,132,28,132,27,237,31,237,30,164,31,172,31,162,31,162,30,125,31,125,30,14,31,10,31,252,31,204,31,223,31,223,30,190,31,7,31,220,31,215,31,95,31,155,31,103,31,215,31,109,31,74,31,145,31,104,31,94,31,192,31,171,31,158,31,79,31,136,31,136,30,173,31,40,31,4,31,221,31,155,31,155,30,224,31,83,31,83,30,83,29,83,28,83,27,19,31,20,31,20,30,117,31,35,31,35,30,28,31,28,30,95,31,47,31,195,31,213,31,213,30,20,31,168,31,129,31,189,31,189,30,102,31,102,30,16,31,153,31,1,31,105,31,105,30,99,31,54,31,54,30,70,31,44,31,98,31,165,31,45,31,45,30,78,31,70,31,195,31,211,31,186,31,99,31,54,31,54,30,202,31,225,31,148,31,239,31,189,31,158,31,109,31,113,31,186,31,186,30,186,29,198,31,163,31,163,30,163,29,163,31,60,31,228,31,120,31,198,31,197,31,228,31,228,30,56,31,161,31,161,30,161,29,113,31,211,31,255,31,79,31,42,31,113,31,113,30,113,29,152,31,177,31,16,31,149,31,60,31,50,31,239,31,2,31,219,31,114,31,232,31,4,31,32,31,182,31,10,31,194,31,125,31,188,31,99,31,81,31,123,31,138,31,182,31,182,30,87,31,251,31,228,31,150,31,119,31,119,30,134,31,247,31,247,30,36,31,148,31,54,31,147,31,30,31,135,31,253,31,68,31,247,31,60,31,241,31,255,31,83,31,152,31,213,31,100,31,54,31,54,30,94,31,12,31,190,31,214,31,251,31,58,31,58,30,83,31,141,31,191,31,191,30,154,31,182,31,48,31,95,31,254,31,254,30,254,29,21,31,227,31,172,31,172,30,40,31,52,31,9,31,9,30,73,31,251,31,251,30,56,31,51,31,51,30,160,31,101,31,135,31,194,31,113,31,113,30,176,31,188,31,106,31,60,31,192,31,108,31,158,31,145,31,157,31,105,31,164,31,164,30,38,31,69,31,255,31,255,30,240,31,149,31,170,31,32,31,142,31,203,31,99,31,69,31,146,31,254,31,120,31,230,31,251,31,27,31,80,31,150,31,150,30,167,31,167,30,157,31,3,31,3,30,3,29,158,31,158,30,158,29,15,31,45,31,214,31,117,31,109,31,11,31,72,31,190,31,179,31,179,30,88,31,138,31,26,31,126,31,126,30,250,31,144,31,28,31,62,31,62,30,42,31,79,31,153,31,220,31,243,31,87,31,87,30,218,31,218,30,100,31,214,31,220,31,243,31,212,31,212,30,67,31,193,31,67,31,67,30,11,31,122,31,117,31,247,31,106,31,80,31,80,30,88,31,186,31,220,31,220,30,52,31,52,30,180,31,218,31,218,30,198,31,113,31,53,31,117,31,185,31,100,31,114,31,220,31,251,31,128,31,109,31,204,31,204,30,179,31,16,31,151,31,96,31,149,31,45,31,178,31,241,31,138,31,198,31,159,31,19,31,87,31,207,31,182,31,175,31,15,31,236,31,174,31,174,30,174,29,254,31,254,30,93,31,227,31,164,31,77,31,24,31,161,31,72,31,169,31,169,30,229,31,194,31,194,30,205,31,216,31,216,30,251,31,251,30,90,31,199,31,4,31,4,30,164,31,105,31,136,31,198,31,46,31,229,31,6,31,209,31,37,31,215,31,198,31,218,31,69,31,170,31,170,30,248,31,122,31,6,31,241,31,241,30,82,31,202,31,202,30,27,31,27,30,232,31,11,31,126,31,165,31,165,30,139,31,139,30,136,31,44,31,44,30,71,31,91,31,140,31,186,31,186,30,251,31,68,31,226,31,101,31,155,31,9,31,208,31,100,31,100,30,100,29,236,31,50,31,50,30,214,31,53,31,217,31,7,31,7,30,7,31,130,31,130,30,130,29,135,31,97,31,129,31,250,31,164,31,84,31,161,31,161,30,176,31,176,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
