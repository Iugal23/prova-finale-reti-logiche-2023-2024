-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 945;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (156,0,0,0,63,0,214,0,96,0,46,0,22,0,23,0,164,0,49,0,204,0,81,0,249,0,16,0,175,0,252,0,205,0,229,0,135,0,242,0,213,0,123,0,158,0,76,0,110,0,197,0,80,0,67,0,107,0,113,0,3,0,0,0,121,0,228,0,241,0,0,0,42,0,0,0,0,0,114,0,126,0,236,0,77,0,178,0,172,0,149,0,0,0,18,0,0,0,152,0,138,0,0,0,121,0,0,0,138,0,2,0,217,0,0,0,0,0,123,0,243,0,25,0,180,0,148,0,199,0,15,0,127,0,0,0,0,0,149,0,1,0,113,0,72,0,217,0,42,0,119,0,112,0,0,0,137,0,0,0,106,0,198,0,11,0,131,0,0,0,0,0,80,0,21,0,128,0,0,0,173,0,49,0,207,0,0,0,208,0,0,0,53,0,193,0,93,0,213,0,112,0,156,0,156,0,226,0,29,0,251,0,140,0,47,0,106,0,0,0,221,0,249,0,14,0,201,0,79,0,104,0,230,0,218,0,84,0,71,0,0,0,165,0,242,0,40,0,0,0,74,0,85,0,186,0,153,0,63,0,218,0,233,0,30,0,127,0,207,0,182,0,72,0,103,0,0,0,0,0,56,0,87,0,164,0,25,0,0,0,93,0,10,0,0,0,0,0,15,0,250,0,127,0,125,0,130,0,0,0,74,0,201,0,9,0,0,0,0,0,193,0,196,0,36,0,132,0,229,0,206,0,58,0,78,0,226,0,128,0,187,0,0,0,0,0,63,0,118,0,141,0,100,0,0,0,0,0,0,0,246,0,16,0,183,0,193,0,117,0,208,0,64,0,90,0,6,0,185,0,197,0,169,0,206,0,55,0,47,0,129,0,54,0,183,0,240,0,14,0,0,0,207,0,227,0,167,0,182,0,64,0,94,0,0,0,54,0,32,0,73,0,24,0,133,0,64,0,12,0,208,0,91,0,122,0,54,0,30,0,183,0,143,0,0,0,81,0,188,0,160,0,59,0,0,0,172,0,155,0,0,0,131,0,253,0,0,0,0,0,75,0,23,0,10,0,68,0,93,0,0,0,0,0,231,0,12,0,206,0,250,0,107,0,0,0,18,0,232,0,180,0,183,0,201,0,105,0,52,0,131,0,202,0,231,0,0,0,84,0,37,0,0,0,177,0,143,0,86,0,0,0,68,0,129,0,165,0,0,0,214,0,208,0,114,0,202,0,54,0,50,0,59,0,171,0,16,0,238,0,174,0,91,0,137,0,193,0,175,0,152,0,217,0,174,0,199,0,85,0,138,0,0,0,0,0,160,0,18,0,0,0,13,0,196,0,95,0,45,0,179,0,16,0,174,0,60,0,41,0,198,0,126,0,0,0,70,0,63,0,42,0,230,0,97,0,226,0,230,0,234,0,0,0,204,0,43,0,0,0,79,0,172,0,246,0,180,0,230,0,180,0,57,0,52,0,0,0,54,0,0,0,107,0,0,0,98,0,207,0,0,0,0,0,58,0,14,0,0,0,161,0,11,0,0,0,150,0,100,0,119,0,224,0,24,0,109,0,67,0,0,0,211,0,0,0,144,0,67,0,75,0,0,0,221,0,195,0,230,0,55,0,83,0,0,0,119,0,58,0,5,0,195,0,0,0,0,0,135,0,34,0,23,0,187,0,176,0,49,0,0,0,0,0,214,0,199,0,194,0,249,0,9,0,196,0,0,0,0,0,155,0,182,0,126,0,0,0,3,0,119,0,11,0,48,0,0,0,148,0,46,0,0,0,0,0,107,0,0,0,0,0,198,0,232,0,13,0,221,0,0,0,75,0,104,0,62,0,123,0,161,0,195,0,114,0,198,0,59,0,213,0,13,0,177,0,207,0,20,0,202,0,105,0,0,0,132,0,10,0,16,0,68,0,45,0,206,0,43,0,0,0,97,0,0,0,0,0,130,0,63,0,124,0,0,0,37,0,236,0,0,0,8,0,81,0,53,0,196,0,156,0,124,0,98,0,169,0,234,0,33,0,219,0,0,0,219,0,65,0,209,0,0,0,0,0,145,0,193,0,114,0,0,0,191,0,0,0,188,0,10,0,33,0,149,0,10,0,230,0,128,0,25,0,202,0,93,0,8,0,96,0,175,0,103,0,0,0,229,0,110,0,108,0,0,0,0,0,242,0,193,0,77,0,102,0,215,0,47,0,116,0,62,0,15,0,84,0,133,0,0,0,0,0,97,0,124,0,0,0,227,0,219,0,34,0,195,0,151,0,0,0,94,0,245,0,237,0,155,0,0,0,45,0,166,0,124,0,0,0,0,0,0,0,234,0,108,0,144,0,45,0,0,0,121,0,32,0,6,0,158,0,144,0,0,0,250,0,55,0,46,0,29,0,153,0,0,0,114,0,100,0,108,0,147,0,45,0,56,0,237,0,5,0,248,0,172,0,214,0,17,0,161,0,135,0,180,0,48,0,142,0,0,0,110,0,0,0,155,0,101,0,195,0,0,0,0,0,60,0,6,0,206,0,98,0,10,0,157,0,202,0,242,0,99,0,247,0,190,0,226,0,131,0,86,0,241,0,0,0,0,0,169,0,224,0,175,0,175,0,114,0,182,0,209,0,228,0,159,0,46,0,145,0,0,0,0,0,25,0,220,0,85,0,10,0,165,0,193,0,0,0,227,0,28,0,146,0,171,0,235,0,0,0,176,0,251,0,83,0,6,0,7,0,147,0,0,0,72,0,179,0,237,0,50,0,44,0,220,0,252,0,29,0,129,0,178,0,184,0,180,0,5,0,120,0,160,0,0,0,91,0,188,0,161,0,247,0,242,0,205,0,148,0,196,0,45,0,37,0,0,0,179,0,212,0,157,0,162,0,111,0,0,0,34,0,41,0,4,0,166,0,190,0,128,0,0,0,0,0,200,0,0,0,31,0,72,0,73,0,212,0,0,0,198,0,207,0,0,0,0,0,116,0,89,0,0,0,0,0,127,0,0,0,143,0,19,0,80,0,148,0,81,0,33,0,179,0,30,0,0,0,62,0,145,0,185,0,181,0,162,0,53,0,219,0,57,0,99,0,48,0,33,0,135,0,35,0,68,0,240,0,49,0,0,0,85,0,255,0,100,0,87,0,78,0,72,0,149,0,146,0,0,0,94,0,0,0,155,0,48,0,119,0,200,0,228,0,88,0,0,0,111,0,0,0,0,0,147,0,116,0,230,0,6,0,83,0,113,0,161,0,98,0,216,0,9,0,227,0,44,0,155,0,0,0,180,0,174,0,0,0,169,0,172,0,0,0,13,0,119,0,168,0,32,0,230,0,130,0,0,0,58,0,0,0,18,0,144,0,113,0,13,0,0,0,29,0,0,0,161,0,0,0,0,0,155,0,21,0,0,0,204,0,138,0,53,0,246,0,244,0,145,0,105,0,0,0,250,0,28,0,0,0,0,0,62,0,0,0,170,0,57,0,65,0,170,0,101,0,158,0,59,0,49,0,215,0,60,0,0,0,247,0,50,0,247,0,0,0,48,0,147,0,45,0,0,0,0,0,104,0,254,0,0,0,188,0,121,0,126,0,70,0,61,0,230,0,243,0,179,0,32,0,220,0,35,0,156,0,153,0,0,0,18,0,171,0,63,0,236,0,127,0,230,0,0,0,23,0,225,0,0,0,223,0,0,0,49,0,8,0,37,0,0,0,0,0,181,0,105,0,21,0,76,0,222,0,160,0,148,0,69,0,0,0,239,0,142,0,252,0,162,0,67,0,238,0,172,0,107,0,1,0,221,0,6,0,60,0,234,0,165,0,0,0,177,0,0,0,10,0,236,0,205,0,0,0,119,0,152,0,128,0,231,0,125,0,222,0,169,0,0,0,75,0,169,0,125,0,56,0,0,0,157,0,78,0,103,0,60,0,222,0,232,0,0,0,217,0,175,0,87,0,207,0,215,0,9,0,118,0,128,0,107,0,88,0,67,0,21,0,59,0,166,0,206,0,178,0,168,0,0,0,0,0,68,0,0,0,103,0,116,0,0,0,253,0,245,0,122,0,176,0,94,0,125,0,213,0,183,0,104,0,74,0,86,0,42,0,107,0,110,0,0,0,188,0,192,0,16,0,35,0,188,0,168,0,236,0,45,0,211,0,237,0,139,0,190,0,0,0,155,0,183,0,116,0,18,0,0,0,21,0,0,0,0,0,44,0,150,0,165,0,141,0,189,0,128,0,104,0,192,0,177,0,116,0,31,0);
signal scenario_full  : scenario_type := (156,31,156,30,63,31,214,31,96,31,46,31,22,31,23,31,164,31,49,31,204,31,81,31,249,31,16,31,175,31,252,31,205,31,229,31,135,31,242,31,213,31,123,31,158,31,76,31,110,31,197,31,80,31,67,31,107,31,113,31,3,31,3,30,121,31,228,31,241,31,241,30,42,31,42,30,42,29,114,31,126,31,236,31,77,31,178,31,172,31,149,31,149,30,18,31,18,30,152,31,138,31,138,30,121,31,121,30,138,31,2,31,217,31,217,30,217,29,123,31,243,31,25,31,180,31,148,31,199,31,15,31,127,31,127,30,127,29,149,31,1,31,113,31,72,31,217,31,42,31,119,31,112,31,112,30,137,31,137,30,106,31,198,31,11,31,131,31,131,30,131,29,80,31,21,31,128,31,128,30,173,31,49,31,207,31,207,30,208,31,208,30,53,31,193,31,93,31,213,31,112,31,156,31,156,31,226,31,29,31,251,31,140,31,47,31,106,31,106,30,221,31,249,31,14,31,201,31,79,31,104,31,230,31,218,31,84,31,71,31,71,30,165,31,242,31,40,31,40,30,74,31,85,31,186,31,153,31,63,31,218,31,233,31,30,31,127,31,207,31,182,31,72,31,103,31,103,30,103,29,56,31,87,31,164,31,25,31,25,30,93,31,10,31,10,30,10,29,15,31,250,31,127,31,125,31,130,31,130,30,74,31,201,31,9,31,9,30,9,29,193,31,196,31,36,31,132,31,229,31,206,31,58,31,78,31,226,31,128,31,187,31,187,30,187,29,63,31,118,31,141,31,100,31,100,30,100,29,100,28,246,31,16,31,183,31,193,31,117,31,208,31,64,31,90,31,6,31,185,31,197,31,169,31,206,31,55,31,47,31,129,31,54,31,183,31,240,31,14,31,14,30,207,31,227,31,167,31,182,31,64,31,94,31,94,30,54,31,32,31,73,31,24,31,133,31,64,31,12,31,208,31,91,31,122,31,54,31,30,31,183,31,143,31,143,30,81,31,188,31,160,31,59,31,59,30,172,31,155,31,155,30,131,31,253,31,253,30,253,29,75,31,23,31,10,31,68,31,93,31,93,30,93,29,231,31,12,31,206,31,250,31,107,31,107,30,18,31,232,31,180,31,183,31,201,31,105,31,52,31,131,31,202,31,231,31,231,30,84,31,37,31,37,30,177,31,143,31,86,31,86,30,68,31,129,31,165,31,165,30,214,31,208,31,114,31,202,31,54,31,50,31,59,31,171,31,16,31,238,31,174,31,91,31,137,31,193,31,175,31,152,31,217,31,174,31,199,31,85,31,138,31,138,30,138,29,160,31,18,31,18,30,13,31,196,31,95,31,45,31,179,31,16,31,174,31,60,31,41,31,198,31,126,31,126,30,70,31,63,31,42,31,230,31,97,31,226,31,230,31,234,31,234,30,204,31,43,31,43,30,79,31,172,31,246,31,180,31,230,31,180,31,57,31,52,31,52,30,54,31,54,30,107,31,107,30,98,31,207,31,207,30,207,29,58,31,14,31,14,30,161,31,11,31,11,30,150,31,100,31,119,31,224,31,24,31,109,31,67,31,67,30,211,31,211,30,144,31,67,31,75,31,75,30,221,31,195,31,230,31,55,31,83,31,83,30,119,31,58,31,5,31,195,31,195,30,195,29,135,31,34,31,23,31,187,31,176,31,49,31,49,30,49,29,214,31,199,31,194,31,249,31,9,31,196,31,196,30,196,29,155,31,182,31,126,31,126,30,3,31,119,31,11,31,48,31,48,30,148,31,46,31,46,30,46,29,107,31,107,30,107,29,198,31,232,31,13,31,221,31,221,30,75,31,104,31,62,31,123,31,161,31,195,31,114,31,198,31,59,31,213,31,13,31,177,31,207,31,20,31,202,31,105,31,105,30,132,31,10,31,16,31,68,31,45,31,206,31,43,31,43,30,97,31,97,30,97,29,130,31,63,31,124,31,124,30,37,31,236,31,236,30,8,31,81,31,53,31,196,31,156,31,124,31,98,31,169,31,234,31,33,31,219,31,219,30,219,31,65,31,209,31,209,30,209,29,145,31,193,31,114,31,114,30,191,31,191,30,188,31,10,31,33,31,149,31,10,31,230,31,128,31,25,31,202,31,93,31,8,31,96,31,175,31,103,31,103,30,229,31,110,31,108,31,108,30,108,29,242,31,193,31,77,31,102,31,215,31,47,31,116,31,62,31,15,31,84,31,133,31,133,30,133,29,97,31,124,31,124,30,227,31,219,31,34,31,195,31,151,31,151,30,94,31,245,31,237,31,155,31,155,30,45,31,166,31,124,31,124,30,124,29,124,28,234,31,108,31,144,31,45,31,45,30,121,31,32,31,6,31,158,31,144,31,144,30,250,31,55,31,46,31,29,31,153,31,153,30,114,31,100,31,108,31,147,31,45,31,56,31,237,31,5,31,248,31,172,31,214,31,17,31,161,31,135,31,180,31,48,31,142,31,142,30,110,31,110,30,155,31,101,31,195,31,195,30,195,29,60,31,6,31,206,31,98,31,10,31,157,31,202,31,242,31,99,31,247,31,190,31,226,31,131,31,86,31,241,31,241,30,241,29,169,31,224,31,175,31,175,31,114,31,182,31,209,31,228,31,159,31,46,31,145,31,145,30,145,29,25,31,220,31,85,31,10,31,165,31,193,31,193,30,227,31,28,31,146,31,171,31,235,31,235,30,176,31,251,31,83,31,6,31,7,31,147,31,147,30,72,31,179,31,237,31,50,31,44,31,220,31,252,31,29,31,129,31,178,31,184,31,180,31,5,31,120,31,160,31,160,30,91,31,188,31,161,31,247,31,242,31,205,31,148,31,196,31,45,31,37,31,37,30,179,31,212,31,157,31,162,31,111,31,111,30,34,31,41,31,4,31,166,31,190,31,128,31,128,30,128,29,200,31,200,30,31,31,72,31,73,31,212,31,212,30,198,31,207,31,207,30,207,29,116,31,89,31,89,30,89,29,127,31,127,30,143,31,19,31,80,31,148,31,81,31,33,31,179,31,30,31,30,30,62,31,145,31,185,31,181,31,162,31,53,31,219,31,57,31,99,31,48,31,33,31,135,31,35,31,68,31,240,31,49,31,49,30,85,31,255,31,100,31,87,31,78,31,72,31,149,31,146,31,146,30,94,31,94,30,155,31,48,31,119,31,200,31,228,31,88,31,88,30,111,31,111,30,111,29,147,31,116,31,230,31,6,31,83,31,113,31,161,31,98,31,216,31,9,31,227,31,44,31,155,31,155,30,180,31,174,31,174,30,169,31,172,31,172,30,13,31,119,31,168,31,32,31,230,31,130,31,130,30,58,31,58,30,18,31,144,31,113,31,13,31,13,30,29,31,29,30,161,31,161,30,161,29,155,31,21,31,21,30,204,31,138,31,53,31,246,31,244,31,145,31,105,31,105,30,250,31,28,31,28,30,28,29,62,31,62,30,170,31,57,31,65,31,170,31,101,31,158,31,59,31,49,31,215,31,60,31,60,30,247,31,50,31,247,31,247,30,48,31,147,31,45,31,45,30,45,29,104,31,254,31,254,30,188,31,121,31,126,31,70,31,61,31,230,31,243,31,179,31,32,31,220,31,35,31,156,31,153,31,153,30,18,31,171,31,63,31,236,31,127,31,230,31,230,30,23,31,225,31,225,30,223,31,223,30,49,31,8,31,37,31,37,30,37,29,181,31,105,31,21,31,76,31,222,31,160,31,148,31,69,31,69,30,239,31,142,31,252,31,162,31,67,31,238,31,172,31,107,31,1,31,221,31,6,31,60,31,234,31,165,31,165,30,177,31,177,30,10,31,236,31,205,31,205,30,119,31,152,31,128,31,231,31,125,31,222,31,169,31,169,30,75,31,169,31,125,31,56,31,56,30,157,31,78,31,103,31,60,31,222,31,232,31,232,30,217,31,175,31,87,31,207,31,215,31,9,31,118,31,128,31,107,31,88,31,67,31,21,31,59,31,166,31,206,31,178,31,168,31,168,30,168,29,68,31,68,30,103,31,116,31,116,30,253,31,245,31,122,31,176,31,94,31,125,31,213,31,183,31,104,31,74,31,86,31,42,31,107,31,110,31,110,30,188,31,192,31,16,31,35,31,188,31,168,31,236,31,45,31,211,31,237,31,139,31,190,31,190,30,155,31,183,31,116,31,18,31,18,30,21,31,21,30,21,29,44,31,150,31,165,31,141,31,189,31,128,31,104,31,192,31,177,31,116,31,31,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
