-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 318;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (127,0,241,0,12,0,14,0,14,0,107,0,210,0,59,0,21,0,201,0,241,0,8,0,239,0,211,0,73,0,72,0,156,0,71,0,32,0,8,0,0,0,7,0,169,0,52,0,81,0,217,0,0,0,0,0,0,0,104,0,218,0,90,0,234,0,101,0,140,0,100,0,40,0,196,0,95,0,177,0,52,0,250,0,16,0,0,0,39,0,186,0,181,0,149,0,0,0,14,0,0,0,245,0,105,0,2,0,37,0,100,0,162,0,178,0,181,0,0,0,72,0,253,0,166,0,85,0,108,0,93,0,156,0,91,0,0,0,170,0,242,0,39,0,0,0,173,0,0,0,18,0,91,0,188,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,207,0,221,0,237,0,0,0,159,0,22,0,78,0,118,0,34,0,88,0,237,0,63,0,76,0,0,0,216,0,153,0,0,0,0,0,0,0,244,0,209,0,102,0,0,0,68,0,88,0,172,0,0,0,79,0,22,0,187,0,0,0,96,0,226,0,0,0,116,0,0,0,21,0,151,0,99,0,178,0,209,0,213,0,83,0,20,0,0,0,135,0,0,0,0,0,0,0,28,0,196,0,135,0,185,0,116,0,117,0,68,0,43,0,35,0,14,0,192,0,0,0,179,0,0,0,121,0,30,0,6,0,42,0,160,0,56,0,0,0,82,0,239,0,189,0,0,0,0,0,180,0,0,0,117,0,72,0,0,0,132,0,79,0,171,0,0,0,210,0,152,0,0,0,194,0,0,0,0,0,156,0,214,0,194,0,230,0,90,0,87,0,178,0,230,0,216,0,0,0,39,0,150,0,223,0,183,0,104,0,209,0,204,0,111,0,0,0,184,0,166,0,209,0,131,0,114,0,18,0,81,0,108,0,0,0,163,0,231,0,183,0,223,0,238,0,53,0,236,0,235,0,254,0,180,0,236,0,134,0,31,0,196,0,133,0,0,0,235,0,103,0,194,0,213,0,55,0,244,0,184,0,7,0,31,0,133,0,65,0,217,0,111,0,205,0,114,0,211,0,113,0,8,0,244,0,43,0,0,0,5,0,149,0,43,0,210,0,0,0,195,0,209,0,0,0,0,0,0,0,67,0,203,0,130,0,0,0,72,0,89,0,164,0,96,0,64,0,150,0,142,0,9,0,0,0,0,0,171,0,25,0,0,0,0,0,228,0,103,0,1,0,36,0,177,0,0,0,200,0,21,0,24,0,101,0,80,0,31,0,161,0,0,0,51,0,77,0,166,0,168,0,0,0,185,0,26,0,0,0,134,0,249,0,187,0,156,0,127,0,58,0,2,0,212,0,134,0,5,0,62,0,197,0,0,0,0,0,20,0,199,0,151,0,42,0,78,0,31,0,114,0,0,0,126,0,0,0,225,0,80,0,45,0,0,0);
signal scenario_full  : scenario_type := (127,31,241,31,12,31,14,31,14,31,107,31,210,31,59,31,21,31,201,31,241,31,8,31,239,31,211,31,73,31,72,31,156,31,71,31,32,31,8,31,8,30,7,31,169,31,52,31,81,31,217,31,217,30,217,29,217,28,104,31,218,31,90,31,234,31,101,31,140,31,100,31,40,31,196,31,95,31,177,31,52,31,250,31,16,31,16,30,39,31,186,31,181,31,149,31,149,30,14,31,14,30,245,31,105,31,2,31,37,31,100,31,162,31,178,31,181,31,181,30,72,31,253,31,166,31,85,31,108,31,93,31,156,31,91,31,91,30,170,31,242,31,39,31,39,30,173,31,173,30,18,31,91,31,188,31,188,30,19,31,19,30,19,29,19,28,19,27,19,26,207,31,221,31,237,31,237,30,159,31,22,31,78,31,118,31,34,31,88,31,237,31,63,31,76,31,76,30,216,31,153,31,153,30,153,29,153,28,244,31,209,31,102,31,102,30,68,31,88,31,172,31,172,30,79,31,22,31,187,31,187,30,96,31,226,31,226,30,116,31,116,30,21,31,151,31,99,31,178,31,209,31,213,31,83,31,20,31,20,30,135,31,135,30,135,29,135,28,28,31,196,31,135,31,185,31,116,31,117,31,68,31,43,31,35,31,14,31,192,31,192,30,179,31,179,30,121,31,30,31,6,31,42,31,160,31,56,31,56,30,82,31,239,31,189,31,189,30,189,29,180,31,180,30,117,31,72,31,72,30,132,31,79,31,171,31,171,30,210,31,152,31,152,30,194,31,194,30,194,29,156,31,214,31,194,31,230,31,90,31,87,31,178,31,230,31,216,31,216,30,39,31,150,31,223,31,183,31,104,31,209,31,204,31,111,31,111,30,184,31,166,31,209,31,131,31,114,31,18,31,81,31,108,31,108,30,163,31,231,31,183,31,223,31,238,31,53,31,236,31,235,31,254,31,180,31,236,31,134,31,31,31,196,31,133,31,133,30,235,31,103,31,194,31,213,31,55,31,244,31,184,31,7,31,31,31,133,31,65,31,217,31,111,31,205,31,114,31,211,31,113,31,8,31,244,31,43,31,43,30,5,31,149,31,43,31,210,31,210,30,195,31,209,31,209,30,209,29,209,28,67,31,203,31,130,31,130,30,72,31,89,31,164,31,96,31,64,31,150,31,142,31,9,31,9,30,9,29,171,31,25,31,25,30,25,29,228,31,103,31,1,31,36,31,177,31,177,30,200,31,21,31,24,31,101,31,80,31,31,31,161,31,161,30,51,31,77,31,166,31,168,31,168,30,185,31,26,31,26,30,134,31,249,31,187,31,156,31,127,31,58,31,2,31,212,31,134,31,5,31,62,31,197,31,197,30,197,29,20,31,199,31,151,31,42,31,78,31,31,31,114,31,114,30,126,31,126,30,225,31,80,31,45,31,45,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
