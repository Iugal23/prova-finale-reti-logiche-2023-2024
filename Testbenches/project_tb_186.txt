-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 948;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (236,0,148,0,174,0,92,0,71,0,227,0,206,0,41,0,0,0,0,0,160,0,69,0,0,0,202,0,166,0,222,0,140,0,85,0,130,0,210,0,245,0,0,0,243,0,12,0,233,0,240,0,0,0,0,0,173,0,31,0,96,0,0,0,175,0,113,0,254,0,180,0,24,0,0,0,210,0,127,0,75,0,215,0,93,0,252,0,112,0,83,0,52,0,174,0,77,0,106,0,0,0,121,0,211,0,0,0,147,0,238,0,38,0,216,0,122,0,81,0,85,0,247,0,28,0,179,0,233,0,179,0,215,0,104,0,152,0,0,0,0,0,248,0,79,0,55,0,166,0,191,0,28,0,110,0,32,0,87,0,127,0,0,0,240,0,178,0,189,0,0,0,203,0,195,0,5,0,168,0,212,0,0,0,59,0,49,0,163,0,0,0,158,0,51,0,121,0,180,0,213,0,0,0,43,0,0,0,0,0,141,0,0,0,237,0,191,0,0,0,213,0,170,0,132,0,201,0,174,0,116,0,106,0,174,0,30,0,70,0,92,0,97,0,212,0,140,0,231,0,159,0,0,0,189,0,93,0,16,0,195,0,52,0,0,0,76,0,194,0,232,0,253,0,191,0,55,0,129,0,11,0,20,0,0,0,28,0,176,0,232,0,13,0,90,0,225,0,61,0,130,0,95,0,176,0,0,0,228,0,26,0,168,0,144,0,0,0,136,0,246,0,167,0,0,0,126,0,150,0,222,0,4,0,131,0,161,0,0,0,31,0,152,0,71,0,0,0,66,0,182,0,136,0,108,0,0,0,22,0,139,0,109,0,37,0,224,0,0,0,180,0,217,0,30,0,32,0,211,0,0,0,131,0,71,0,31,0,191,0,0,0,74,0,155,0,112,0,236,0,57,0,98,0,170,0,230,0,0,0,121,0,0,0,78,0,0,0,48,0,227,0,33,0,250,0,89,0,203,0,89,0,161,0,111,0,245,0,123,0,60,0,68,0,120,0,214,0,6,0,75,0,104,0,21,0,113,0,185,0,182,0,33,0,0,0,21,0,29,0,12,0,101,0,96,0,250,0,0,0,122,0,42,0,206,0,0,0,61,0,241,0,218,0,0,0,41,0,0,0,196,0,0,0,178,0,167,0,0,0,151,0,215,0,0,0,255,0,239,0,198,0,0,0,72,0,84,0,236,0,175,0,81,0,48,0,42,0,129,0,189,0,0,0,161,0,0,0,132,0,227,0,227,0,20,0,79,0,26,0,33,0,151,0,23,0,38,0,216,0,70,0,236,0,126,0,19,0,0,0,187,0,9,0,114,0,0,0,6,0,0,0,100,0,193,0,152,0,79,0,48,0,236,0,126,0,159,0,0,0,0,0,0,0,167,0,41,0,246,0,149,0,0,0,69,0,0,0,225,0,178,0,150,0,85,0,226,0,160,0,0,0,188,0,109,0,91,0,136,0,228,0,204,0,67,0,0,0,0,0,55,0,223,0,187,0,55,0,25,0,95,0,246,0,32,0,64,0,10,0,51,0,0,0,0,0,0,0,207,0,80,0,29,0,214,0,216,0,167,0,76,0,131,0,27,0,152,0,0,0,239,0,112,0,130,0,162,0,159,0,99,0,223,0,109,0,0,0,0,0,235,0,226,0,5,0,0,0,152,0,120,0,218,0,246,0,206,0,0,0,153,0,165,0,160,0,0,0,51,0,28,0,188,0,164,0,0,0,42,0,0,0,130,0,126,0,245,0,3,0,127,0,166,0,159,0,174,0,109,0,92,0,215,0,16,0,253,0,168,0,88,0,0,0,34,0,106,0,170,0,0,0,202,0,223,0,0,0,94,0,105,0,94,0,127,0,217,0,206,0,0,0,211,0,62,0,72,0,13,0,175,0,54,0,180,0,134,0,67,0,52,0,111,0,0,0,243,0,191,0,142,0,61,0,11,0,212,0,105,0,2,0,0,0,62,0,56,0,131,0,0,0,0,0,142,0,0,0,0,0,201,0,18,0,67,0,102,0,64,0,40,0,165,0,102,0,152,0,92,0,60,0,0,0,238,0,85,0,29,0,0,0,0,0,125,0,204,0,237,0,0,0,0,0,0,0,0,0,216,0,137,0,22,0,193,0,77,0,23,0,162,0,114,0,0,0,219,0,5,0,103,0,35,0,30,0,224,0,0,0,138,0,0,0,111,0,22,0,91,0,136,0,168,0,105,0,10,0,11,0,106,0,57,0,84,0,18,0,237,0,171,0,0,0,85,0,215,0,94,0,156,0,0,0,126,0,18,0,205,0,121,0,118,0,243,0,155,0,138,0,231,0,204,0,240,0,178,0,0,0,0,0,107,0,40,0,211,0,206,0,160,0,0,0,5,0,71,0,3,0,36,0,0,0,125,0,0,0,221,0,183,0,139,0,0,0,198,0,76,0,223,0,0,0,240,0,29,0,20,0,148,0,159,0,204,0,0,0,109,0,208,0,140,0,69,0,53,0,17,0,0,0,0,0,163,0,106,0,39,0,0,0,188,0,1,0,0,0,208,0,225,0,25,0,91,0,80,0,241,0,43,0,0,0,71,0,59,0,243,0,226,0,223,0,70,0,109,0,90,0,125,0,0,0,246,0,0,0,0,0,114,0,4,0,113,0,6,0,63,0,185,0,17,0,135,0,0,0,0,0,37,0,0,0,19,0,0,0,0,0,179,0,0,0,142,0,84,0,0,0,0,0,0,0,77,0,0,0,163,0,137,0,0,0,0,0,238,0,73,0,50,0,105,0,99,0,0,0,0,0,103,0,0,0,200,0,64,0,248,0,116,0,252,0,0,0,0,0,216,0,156,0,40,0,70,0,130,0,60,0,81,0,210,0,0,0,0,0,26,0,0,0,95,0,112,0,66,0,46,0,0,0,46,0,168,0,206,0,0,0,0,0,86,0,87,0,145,0,254,0,98,0,156,0,0,0,255,0,156,0,156,0,107,0,177,0,194,0,92,0,240,0,208,0,170,0,137,0,59,0,0,0,136,0,109,0,184,0,95,0,0,0,231,0,205,0,185,0,153,0,143,0,120,0,93,0,219,0,57,0,135,0,59,0,230,0,44,0,161,0,88,0,91,0,0,0,0,0,5,0,56,0,127,0,104,0,58,0,207,0,0,0,255,0,152,0,32,0,0,0,236,0,178,0,134,0,132,0,220,0,232,0,147,0,75,0,180,0,192,0,139,0,234,0,63,0,55,0,0,0,27,0,148,0,127,0,247,0,30,0,0,0,0,0,133,0,94,0,159,0,31,0,56,0,0,0,13,0,16,0,0,0,13,0,53,0,1,0,249,0,21,0,0,0,188,0,217,0,47,0,0,0,32,0,168,0,45,0,47,0,194,0,50,0,111,0,234,0,78,0,220,0,220,0,0,0,223,0,178,0,217,0,0,0,0,0,33,0,234,0,0,0,0,0,248,0,169,0,232,0,171,0,182,0,154,0,29,0,112,0,186,0,196,0,241,0,107,0,55,0,211,0,17,0,163,0,61,0,7,0,0,0,93,0,0,0,199,0,62,0,0,0,84,0,216,0,0,0,0,0,32,0,89,0,189,0,55,0,0,0,2,0,199,0,161,0,238,0,189,0,185,0,117,0,39,0,0,0,73,0,218,0,180,0,0,0,78,0,114,0,0,0,14,0,0,0,213,0,0,0,51,0,51,0,152,0,255,0,0,0,252,0,171,0,104,0,66,0,0,0,243,0,23,0,0,0,179,0,184,0,17,0,154,0,216,0,8,0,53,0,146,0,0,0,150,0,141,0,110,0,112,0,120,0,5,0,0,0,0,0,186,0,111,0,156,0,159,0,46,0,43,0,246,0,245,0,54,0,0,0,57,0,220,0,106,0,35,0,221,0,88,0,37,0,57,0,120,0,0,0,218,0,32,0,243,0,0,0,136,0,237,0,119,0,136,0,0,0,183,0,171,0,0,0,36,0,78,0,97,0,179,0,0,0,154,0,0,0,220,0,0,0,160,0,247,0,50,0,178,0,0,0,0,0,128,0,237,0,71,0,0,0,0,0,247,0,205,0,49,0,0,0,0,0,120,0,73,0,0,0,91,0,0,0,0,0,0,0,39,0,68,0,206,0,0,0,63,0,85,0,31,0,155,0,138,0,22,0,233,0,114,0,48,0,0,0,116,0,0,0,137,0,232,0,0,0,86,0,220,0,96,0,238,0,155,0,17,0,43,0,0,0,0,0,136,0,119,0,0,0,189,0,0,0,73,0);
signal scenario_full  : scenario_type := (236,31,148,31,174,31,92,31,71,31,227,31,206,31,41,31,41,30,41,29,160,31,69,31,69,30,202,31,166,31,222,31,140,31,85,31,130,31,210,31,245,31,245,30,243,31,12,31,233,31,240,31,240,30,240,29,173,31,31,31,96,31,96,30,175,31,113,31,254,31,180,31,24,31,24,30,210,31,127,31,75,31,215,31,93,31,252,31,112,31,83,31,52,31,174,31,77,31,106,31,106,30,121,31,211,31,211,30,147,31,238,31,38,31,216,31,122,31,81,31,85,31,247,31,28,31,179,31,233,31,179,31,215,31,104,31,152,31,152,30,152,29,248,31,79,31,55,31,166,31,191,31,28,31,110,31,32,31,87,31,127,31,127,30,240,31,178,31,189,31,189,30,203,31,195,31,5,31,168,31,212,31,212,30,59,31,49,31,163,31,163,30,158,31,51,31,121,31,180,31,213,31,213,30,43,31,43,30,43,29,141,31,141,30,237,31,191,31,191,30,213,31,170,31,132,31,201,31,174,31,116,31,106,31,174,31,30,31,70,31,92,31,97,31,212,31,140,31,231,31,159,31,159,30,189,31,93,31,16,31,195,31,52,31,52,30,76,31,194,31,232,31,253,31,191,31,55,31,129,31,11,31,20,31,20,30,28,31,176,31,232,31,13,31,90,31,225,31,61,31,130,31,95,31,176,31,176,30,228,31,26,31,168,31,144,31,144,30,136,31,246,31,167,31,167,30,126,31,150,31,222,31,4,31,131,31,161,31,161,30,31,31,152,31,71,31,71,30,66,31,182,31,136,31,108,31,108,30,22,31,139,31,109,31,37,31,224,31,224,30,180,31,217,31,30,31,32,31,211,31,211,30,131,31,71,31,31,31,191,31,191,30,74,31,155,31,112,31,236,31,57,31,98,31,170,31,230,31,230,30,121,31,121,30,78,31,78,30,48,31,227,31,33,31,250,31,89,31,203,31,89,31,161,31,111,31,245,31,123,31,60,31,68,31,120,31,214,31,6,31,75,31,104,31,21,31,113,31,185,31,182,31,33,31,33,30,21,31,29,31,12,31,101,31,96,31,250,31,250,30,122,31,42,31,206,31,206,30,61,31,241,31,218,31,218,30,41,31,41,30,196,31,196,30,178,31,167,31,167,30,151,31,215,31,215,30,255,31,239,31,198,31,198,30,72,31,84,31,236,31,175,31,81,31,48,31,42,31,129,31,189,31,189,30,161,31,161,30,132,31,227,31,227,31,20,31,79,31,26,31,33,31,151,31,23,31,38,31,216,31,70,31,236,31,126,31,19,31,19,30,187,31,9,31,114,31,114,30,6,31,6,30,100,31,193,31,152,31,79,31,48,31,236,31,126,31,159,31,159,30,159,29,159,28,167,31,41,31,246,31,149,31,149,30,69,31,69,30,225,31,178,31,150,31,85,31,226,31,160,31,160,30,188,31,109,31,91,31,136,31,228,31,204,31,67,31,67,30,67,29,55,31,223,31,187,31,55,31,25,31,95,31,246,31,32,31,64,31,10,31,51,31,51,30,51,29,51,28,207,31,80,31,29,31,214,31,216,31,167,31,76,31,131,31,27,31,152,31,152,30,239,31,112,31,130,31,162,31,159,31,99,31,223,31,109,31,109,30,109,29,235,31,226,31,5,31,5,30,152,31,120,31,218,31,246,31,206,31,206,30,153,31,165,31,160,31,160,30,51,31,28,31,188,31,164,31,164,30,42,31,42,30,130,31,126,31,245,31,3,31,127,31,166,31,159,31,174,31,109,31,92,31,215,31,16,31,253,31,168,31,88,31,88,30,34,31,106,31,170,31,170,30,202,31,223,31,223,30,94,31,105,31,94,31,127,31,217,31,206,31,206,30,211,31,62,31,72,31,13,31,175,31,54,31,180,31,134,31,67,31,52,31,111,31,111,30,243,31,191,31,142,31,61,31,11,31,212,31,105,31,2,31,2,30,62,31,56,31,131,31,131,30,131,29,142,31,142,30,142,29,201,31,18,31,67,31,102,31,64,31,40,31,165,31,102,31,152,31,92,31,60,31,60,30,238,31,85,31,29,31,29,30,29,29,125,31,204,31,237,31,237,30,237,29,237,28,237,27,216,31,137,31,22,31,193,31,77,31,23,31,162,31,114,31,114,30,219,31,5,31,103,31,35,31,30,31,224,31,224,30,138,31,138,30,111,31,22,31,91,31,136,31,168,31,105,31,10,31,11,31,106,31,57,31,84,31,18,31,237,31,171,31,171,30,85,31,215,31,94,31,156,31,156,30,126,31,18,31,205,31,121,31,118,31,243,31,155,31,138,31,231,31,204,31,240,31,178,31,178,30,178,29,107,31,40,31,211,31,206,31,160,31,160,30,5,31,71,31,3,31,36,31,36,30,125,31,125,30,221,31,183,31,139,31,139,30,198,31,76,31,223,31,223,30,240,31,29,31,20,31,148,31,159,31,204,31,204,30,109,31,208,31,140,31,69,31,53,31,17,31,17,30,17,29,163,31,106,31,39,31,39,30,188,31,1,31,1,30,208,31,225,31,25,31,91,31,80,31,241,31,43,31,43,30,71,31,59,31,243,31,226,31,223,31,70,31,109,31,90,31,125,31,125,30,246,31,246,30,246,29,114,31,4,31,113,31,6,31,63,31,185,31,17,31,135,31,135,30,135,29,37,31,37,30,19,31,19,30,19,29,179,31,179,30,142,31,84,31,84,30,84,29,84,28,77,31,77,30,163,31,137,31,137,30,137,29,238,31,73,31,50,31,105,31,99,31,99,30,99,29,103,31,103,30,200,31,64,31,248,31,116,31,252,31,252,30,252,29,216,31,156,31,40,31,70,31,130,31,60,31,81,31,210,31,210,30,210,29,26,31,26,30,95,31,112,31,66,31,46,31,46,30,46,31,168,31,206,31,206,30,206,29,86,31,87,31,145,31,254,31,98,31,156,31,156,30,255,31,156,31,156,31,107,31,177,31,194,31,92,31,240,31,208,31,170,31,137,31,59,31,59,30,136,31,109,31,184,31,95,31,95,30,231,31,205,31,185,31,153,31,143,31,120,31,93,31,219,31,57,31,135,31,59,31,230,31,44,31,161,31,88,31,91,31,91,30,91,29,5,31,56,31,127,31,104,31,58,31,207,31,207,30,255,31,152,31,32,31,32,30,236,31,178,31,134,31,132,31,220,31,232,31,147,31,75,31,180,31,192,31,139,31,234,31,63,31,55,31,55,30,27,31,148,31,127,31,247,31,30,31,30,30,30,29,133,31,94,31,159,31,31,31,56,31,56,30,13,31,16,31,16,30,13,31,53,31,1,31,249,31,21,31,21,30,188,31,217,31,47,31,47,30,32,31,168,31,45,31,47,31,194,31,50,31,111,31,234,31,78,31,220,31,220,31,220,30,223,31,178,31,217,31,217,30,217,29,33,31,234,31,234,30,234,29,248,31,169,31,232,31,171,31,182,31,154,31,29,31,112,31,186,31,196,31,241,31,107,31,55,31,211,31,17,31,163,31,61,31,7,31,7,30,93,31,93,30,199,31,62,31,62,30,84,31,216,31,216,30,216,29,32,31,89,31,189,31,55,31,55,30,2,31,199,31,161,31,238,31,189,31,185,31,117,31,39,31,39,30,73,31,218,31,180,31,180,30,78,31,114,31,114,30,14,31,14,30,213,31,213,30,51,31,51,31,152,31,255,31,255,30,252,31,171,31,104,31,66,31,66,30,243,31,23,31,23,30,179,31,184,31,17,31,154,31,216,31,8,31,53,31,146,31,146,30,150,31,141,31,110,31,112,31,120,31,5,31,5,30,5,29,186,31,111,31,156,31,159,31,46,31,43,31,246,31,245,31,54,31,54,30,57,31,220,31,106,31,35,31,221,31,88,31,37,31,57,31,120,31,120,30,218,31,32,31,243,31,243,30,136,31,237,31,119,31,136,31,136,30,183,31,171,31,171,30,36,31,78,31,97,31,179,31,179,30,154,31,154,30,220,31,220,30,160,31,247,31,50,31,178,31,178,30,178,29,128,31,237,31,71,31,71,30,71,29,247,31,205,31,49,31,49,30,49,29,120,31,73,31,73,30,91,31,91,30,91,29,91,28,39,31,68,31,206,31,206,30,63,31,85,31,31,31,155,31,138,31,22,31,233,31,114,31,48,31,48,30,116,31,116,30,137,31,232,31,232,30,86,31,220,31,96,31,238,31,155,31,17,31,43,31,43,30,43,29,136,31,119,31,119,30,189,31,189,30,73,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
