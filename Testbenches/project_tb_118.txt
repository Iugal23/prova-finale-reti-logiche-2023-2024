-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 968;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (250,0,0,0,97,0,87,0,7,0,244,0,246,0,60,0,146,0,0,0,13,0,113,0,0,0,0,0,65,0,237,0,31,0,50,0,0,0,86,0,98,0,17,0,7,0,67,0,248,0,0,0,170,0,45,0,185,0,64,0,179,0,116,0,0,0,0,0,163,0,105,0,183,0,0,0,47,0,232,0,0,0,104,0,139,0,0,0,157,0,0,0,85,0,195,0,177,0,0,0,99,0,183,0,0,0,0,0,102,0,126,0,0,0,185,0,0,0,68,0,100,0,180,0,249,0,187,0,83,0,235,0,91,0,95,0,10,0,193,0,60,0,62,0,0,0,252,0,223,0,35,0,132,0,157,0,239,0,0,0,73,0,26,0,0,0,177,0,4,0,0,0,140,0,110,0,3,0,207,0,169,0,189,0,250,0,209,0,180,0,201,0,240,0,0,0,61,0,38,0,154,0,0,0,225,0,139,0,227,0,0,0,247,0,113,0,198,0,71,0,189,0,113,0,28,0,160,0,122,0,230,0,230,0,64,0,0,0,164,0,83,0,0,0,139,0,247,0,245,0,233,0,227,0,68,0,255,0,19,0,47,0,0,0,72,0,249,0,60,0,0,0,213,0,124,0,36,0,234,0,229,0,173,0,143,0,0,0,166,0,111,0,102,0,22,0,119,0,77,0,93,0,132,0,16,0,152,0,138,0,192,0,120,0,137,0,181,0,27,0,190,0,188,0,109,0,222,0,238,0,196,0,159,0,163,0,244,0,86,0,151,0,157,0,0,0,195,0,107,0,0,0,136,0,250,0,126,0,243,0,69,0,76,0,192,0,148,0,80,0,0,0,31,0,2,0,7,0,16,0,45,0,42,0,0,0,151,0,58,0,255,0,62,0,211,0,207,0,59,0,11,0,143,0,62,0,7,0,51,0,0,0,255,0,203,0,127,0,0,0,43,0,124,0,0,0,0,0,200,0,209,0,92,0,100,0,235,0,0,0,0,0,249,0,177,0,121,0,0,0,149,0,0,0,7,0,200,0,0,0,0,0,255,0,0,0,185,0,60,0,0,0,0,0,0,0,246,0,6,0,189,0,0,0,0,0,148,0,174,0,100,0,36,0,0,0,77,0,122,0,2,0,69,0,4,0,243,0,0,0,141,0,15,0,126,0,42,0,64,0,0,0,168,0,87,0,135,0,60,0,30,0,117,0,39,0,92,0,139,0,15,0,235,0,35,0,3,0,38,0,93,0,132,0,130,0,55,0,41,0,122,0,236,0,107,0,0,0,96,0,166,0,202,0,96,0,245,0,0,0,168,0,195,0,186,0,107,0,169,0,0,0,0,0,0,0,169,0,56,0,136,0,0,0,163,0,19,0,112,0,56,0,169,0,159,0,57,0,252,0,34,0,86,0,246,0,239,0,223,0,230,0,0,0,246,0,129,0,242,0,0,0,151,0,127,0,118,0,217,0,34,0,0,0,106,0,197,0,237,0,141,0,148,0,216,0,198,0,0,0,163,0,171,0,118,0,0,0,0,0,122,0,65,0,218,0,252,0,239,0,79,0,72,0,92,0,139,0,215,0,89,0,124,0,39,0,104,0,0,0,182,0,0,0,0,0,18,0,203,0,177,0,116,0,60,0,140,0,0,0,119,0,51,0,0,0,206,0,0,0,0,0,0,0,153,0,178,0,0,0,52,0,116,0,2,0,15,0,137,0,153,0,195,0,139,0,0,0,65,0,0,0,7,0,193,0,0,0,168,0,93,0,203,0,101,0,214,0,34,0,148,0,0,0,0,0,0,0,226,0,234,0,153,0,0,0,153,0,193,0,174,0,233,0,109,0,33,0,187,0,204,0,0,0,0,0,243,0,141,0,234,0,131,0,137,0,0,0,0,0,137,0,0,0,136,0,0,0,94,0,116,0,28,0,0,0,253,0,44,0,181,0,8,0,190,0,0,0,16,0,24,0,234,0,0,0,130,0,0,0,0,0,133,0,209,0,0,0,105,0,237,0,203,0,40,0,154,0,151,0,237,0,41,0,110,0,28,0,0,0,205,0,196,0,218,0,56,0,85,0,204,0,57,0,127,0,0,0,0,0,159,0,226,0,107,0,57,0,115,0,155,0,74,0,0,0,57,0,0,0,110,0,16,0,26,0,0,0,54,0,105,0,4,0,2,0,135,0,215,0,194,0,254,0,69,0,0,0,46,0,0,0,60,0,0,0,89,0,177,0,129,0,142,0,150,0,43,0,128,0,72,0,180,0,131,0,154,0,10,0,146,0,193,0,0,0,172,0,0,0,0,0,0,0,65,0,99,0,115,0,35,0,172,0,150,0,31,0,123,0,191,0,170,0,55,0,146,0,123,0,0,0,231,0,67,0,214,0,217,0,36,0,131,0,41,0,105,0,49,0,134,0,177,0,146,0,0,0,126,0,0,0,205,0,0,0,96,0,196,0,0,0,194,0,137,0,64,0,0,0,0,0,222,0,148,0,109,0,243,0,102,0,25,0,94,0,242,0,154,0,186,0,216,0,40,0,54,0,0,0,230,0,71,0,99,0,240,0,50,0,83,0,22,0,0,0,0,0,3,0,110,0,40,0,0,0,210,0,119,0,153,0,202,0,93,0,97,0,0,0,215,0,0,0,111,0,0,0,29,0,236,0,16,0,147,0,136,0,0,0,50,0,189,0,60,0,112,0,159,0,76,0,0,0,30,0,66,0,177,0,0,0,0,0,0,0,154,0,212,0,36,0,177,0,63,0,68,0,229,0,205,0,0,0,4,0,135,0,155,0,184,0,228,0,56,0,238,0,3,0,121,0,118,0,190,0,165,0,208,0,0,0,133,0,1,0,228,0,250,0,181,0,238,0,0,0,0,0,13,0,0,0,252,0,96,0,0,0,55,0,254,0,155,0,22,0,0,0,12,0,141,0,0,0,183,0,0,0,4,0,140,0,0,0,223,0,176,0,248,0,53,0,40,0,168,0,255,0,188,0,158,0,29,0,135,0,101,0,48,0,230,0,75,0,0,0,243,0,253,0,0,0,64,0,0,0,69,0,104,0,200,0,45,0,38,0,245,0,185,0,19,0,195,0,0,0,160,0,19,0,118,0,99,0,179,0,220,0,52,0,118,0,151,0,153,0,229,0,82,0,254,0,188,0,179,0,26,0,183,0,226,0,14,0,33,0,179,0,0,0,101,0,6,0,155,0,149,0,137,0,238,0,21,0,166,0,73,0,150,0,0,0,44,0,21,0,0,0,58,0,157,0,225,0,0,0,124,0,2,0,23,0,0,0,175,0,0,0,151,0,209,0,111,0,111,0,0,0,0,0,0,0,55,0,0,0,212,0,9,0,0,0,32,0,119,0,173,0,29,0,0,0,181,0,124,0,204,0,0,0,182,0,117,0,171,0,0,0,222,0,0,0,83,0,52,0,77,0,38,0,9,0,133,0,171,0,80,0,230,0,96,0,0,0,223,0,0,0,246,0,184,0,22,0,0,0,0,0,74,0,0,0,0,0,179,0,0,0,176,0,0,0,196,0,234,0,40,0,146,0,206,0,117,0,6,0,206,0,255,0,28,0,94,0,0,0,0,0,53,0,75,0,201,0,62,0,0,0,7,0,214,0,94,0,0,0,131,0,7,0,30,0,74,0,27,0,223,0,64,0,184,0,209,0,157,0,227,0,255,0,0,0,194,0,73,0,0,0,224,0,0,0,230,0,195,0,0,0,0,0,126,0,173,0,85,0,80,0,193,0,9,0,38,0,38,0,80,0,67,0,0,0,186,0,252,0,183,0,0,0,246,0,163,0,21,0,133,0,214,0,22,0,56,0,125,0,13,0,138,0,0,0,37,0,46,0,239,0,112,0,59,0,41,0,16,0,5,0,226,0,80,0,162,0,249,0,168,0,0,0,0,0,25,0,78,0,73,0,0,0,48,0,94,0,117,0,121,0,0,0,91,0,104,0,0,0,64,0,112,0,221,0,116,0,112,0,88,0,0,0,7,0,48,0,207,0,17,0,241,0,0,0,146,0,250,0,241,0,146,0,112,0,0,0,102,0,73,0,0,0,117,0,0,0,221,0,0,0,15,0,19,0,193,0,240,0,192,0,37,0,0,0,0,0,61,0,0,0,213,0,149,0,102,0,37,0,0,0,2,0,124,0,238,0,0,0,60,0,0,0,253,0,26,0,28,0,37,0,160,0,195,0,191,0,111,0,151,0,0,0,168,0,219,0,19,0,47,0,18,0,228,0,212,0,158,0,0,0,54,0,178,0,216,0,215,0,203,0,210,0,73,0,114,0,225,0,141,0,240,0,126,0,0,0,187,0,124,0,47,0,0,0,0,0,203,0);
signal scenario_full  : scenario_type := (250,31,250,30,97,31,87,31,7,31,244,31,246,31,60,31,146,31,146,30,13,31,113,31,113,30,113,29,65,31,237,31,31,31,50,31,50,30,86,31,98,31,17,31,7,31,67,31,248,31,248,30,170,31,45,31,185,31,64,31,179,31,116,31,116,30,116,29,163,31,105,31,183,31,183,30,47,31,232,31,232,30,104,31,139,31,139,30,157,31,157,30,85,31,195,31,177,31,177,30,99,31,183,31,183,30,183,29,102,31,126,31,126,30,185,31,185,30,68,31,100,31,180,31,249,31,187,31,83,31,235,31,91,31,95,31,10,31,193,31,60,31,62,31,62,30,252,31,223,31,35,31,132,31,157,31,239,31,239,30,73,31,26,31,26,30,177,31,4,31,4,30,140,31,110,31,3,31,207,31,169,31,189,31,250,31,209,31,180,31,201,31,240,31,240,30,61,31,38,31,154,31,154,30,225,31,139,31,227,31,227,30,247,31,113,31,198,31,71,31,189,31,113,31,28,31,160,31,122,31,230,31,230,31,64,31,64,30,164,31,83,31,83,30,139,31,247,31,245,31,233,31,227,31,68,31,255,31,19,31,47,31,47,30,72,31,249,31,60,31,60,30,213,31,124,31,36,31,234,31,229,31,173,31,143,31,143,30,166,31,111,31,102,31,22,31,119,31,77,31,93,31,132,31,16,31,152,31,138,31,192,31,120,31,137,31,181,31,27,31,190,31,188,31,109,31,222,31,238,31,196,31,159,31,163,31,244,31,86,31,151,31,157,31,157,30,195,31,107,31,107,30,136,31,250,31,126,31,243,31,69,31,76,31,192,31,148,31,80,31,80,30,31,31,2,31,7,31,16,31,45,31,42,31,42,30,151,31,58,31,255,31,62,31,211,31,207,31,59,31,11,31,143,31,62,31,7,31,51,31,51,30,255,31,203,31,127,31,127,30,43,31,124,31,124,30,124,29,200,31,209,31,92,31,100,31,235,31,235,30,235,29,249,31,177,31,121,31,121,30,149,31,149,30,7,31,200,31,200,30,200,29,255,31,255,30,185,31,60,31,60,30,60,29,60,28,246,31,6,31,189,31,189,30,189,29,148,31,174,31,100,31,36,31,36,30,77,31,122,31,2,31,69,31,4,31,243,31,243,30,141,31,15,31,126,31,42,31,64,31,64,30,168,31,87,31,135,31,60,31,30,31,117,31,39,31,92,31,139,31,15,31,235,31,35,31,3,31,38,31,93,31,132,31,130,31,55,31,41,31,122,31,236,31,107,31,107,30,96,31,166,31,202,31,96,31,245,31,245,30,168,31,195,31,186,31,107,31,169,31,169,30,169,29,169,28,169,31,56,31,136,31,136,30,163,31,19,31,112,31,56,31,169,31,159,31,57,31,252,31,34,31,86,31,246,31,239,31,223,31,230,31,230,30,246,31,129,31,242,31,242,30,151,31,127,31,118,31,217,31,34,31,34,30,106,31,197,31,237,31,141,31,148,31,216,31,198,31,198,30,163,31,171,31,118,31,118,30,118,29,122,31,65,31,218,31,252,31,239,31,79,31,72,31,92,31,139,31,215,31,89,31,124,31,39,31,104,31,104,30,182,31,182,30,182,29,18,31,203,31,177,31,116,31,60,31,140,31,140,30,119,31,51,31,51,30,206,31,206,30,206,29,206,28,153,31,178,31,178,30,52,31,116,31,2,31,15,31,137,31,153,31,195,31,139,31,139,30,65,31,65,30,7,31,193,31,193,30,168,31,93,31,203,31,101,31,214,31,34,31,148,31,148,30,148,29,148,28,226,31,234,31,153,31,153,30,153,31,193,31,174,31,233,31,109,31,33,31,187,31,204,31,204,30,204,29,243,31,141,31,234,31,131,31,137,31,137,30,137,29,137,31,137,30,136,31,136,30,94,31,116,31,28,31,28,30,253,31,44,31,181,31,8,31,190,31,190,30,16,31,24,31,234,31,234,30,130,31,130,30,130,29,133,31,209,31,209,30,105,31,237,31,203,31,40,31,154,31,151,31,237,31,41,31,110,31,28,31,28,30,205,31,196,31,218,31,56,31,85,31,204,31,57,31,127,31,127,30,127,29,159,31,226,31,107,31,57,31,115,31,155,31,74,31,74,30,57,31,57,30,110,31,16,31,26,31,26,30,54,31,105,31,4,31,2,31,135,31,215,31,194,31,254,31,69,31,69,30,46,31,46,30,60,31,60,30,89,31,177,31,129,31,142,31,150,31,43,31,128,31,72,31,180,31,131,31,154,31,10,31,146,31,193,31,193,30,172,31,172,30,172,29,172,28,65,31,99,31,115,31,35,31,172,31,150,31,31,31,123,31,191,31,170,31,55,31,146,31,123,31,123,30,231,31,67,31,214,31,217,31,36,31,131,31,41,31,105,31,49,31,134,31,177,31,146,31,146,30,126,31,126,30,205,31,205,30,96,31,196,31,196,30,194,31,137,31,64,31,64,30,64,29,222,31,148,31,109,31,243,31,102,31,25,31,94,31,242,31,154,31,186,31,216,31,40,31,54,31,54,30,230,31,71,31,99,31,240,31,50,31,83,31,22,31,22,30,22,29,3,31,110,31,40,31,40,30,210,31,119,31,153,31,202,31,93,31,97,31,97,30,215,31,215,30,111,31,111,30,29,31,236,31,16,31,147,31,136,31,136,30,50,31,189,31,60,31,112,31,159,31,76,31,76,30,30,31,66,31,177,31,177,30,177,29,177,28,154,31,212,31,36,31,177,31,63,31,68,31,229,31,205,31,205,30,4,31,135,31,155,31,184,31,228,31,56,31,238,31,3,31,121,31,118,31,190,31,165,31,208,31,208,30,133,31,1,31,228,31,250,31,181,31,238,31,238,30,238,29,13,31,13,30,252,31,96,31,96,30,55,31,254,31,155,31,22,31,22,30,12,31,141,31,141,30,183,31,183,30,4,31,140,31,140,30,223,31,176,31,248,31,53,31,40,31,168,31,255,31,188,31,158,31,29,31,135,31,101,31,48,31,230,31,75,31,75,30,243,31,253,31,253,30,64,31,64,30,69,31,104,31,200,31,45,31,38,31,245,31,185,31,19,31,195,31,195,30,160,31,19,31,118,31,99,31,179,31,220,31,52,31,118,31,151,31,153,31,229,31,82,31,254,31,188,31,179,31,26,31,183,31,226,31,14,31,33,31,179,31,179,30,101,31,6,31,155,31,149,31,137,31,238,31,21,31,166,31,73,31,150,31,150,30,44,31,21,31,21,30,58,31,157,31,225,31,225,30,124,31,2,31,23,31,23,30,175,31,175,30,151,31,209,31,111,31,111,31,111,30,111,29,111,28,55,31,55,30,212,31,9,31,9,30,32,31,119,31,173,31,29,31,29,30,181,31,124,31,204,31,204,30,182,31,117,31,171,31,171,30,222,31,222,30,83,31,52,31,77,31,38,31,9,31,133,31,171,31,80,31,230,31,96,31,96,30,223,31,223,30,246,31,184,31,22,31,22,30,22,29,74,31,74,30,74,29,179,31,179,30,176,31,176,30,196,31,234,31,40,31,146,31,206,31,117,31,6,31,206,31,255,31,28,31,94,31,94,30,94,29,53,31,75,31,201,31,62,31,62,30,7,31,214,31,94,31,94,30,131,31,7,31,30,31,74,31,27,31,223,31,64,31,184,31,209,31,157,31,227,31,255,31,255,30,194,31,73,31,73,30,224,31,224,30,230,31,195,31,195,30,195,29,126,31,173,31,85,31,80,31,193,31,9,31,38,31,38,31,80,31,67,31,67,30,186,31,252,31,183,31,183,30,246,31,163,31,21,31,133,31,214,31,22,31,56,31,125,31,13,31,138,31,138,30,37,31,46,31,239,31,112,31,59,31,41,31,16,31,5,31,226,31,80,31,162,31,249,31,168,31,168,30,168,29,25,31,78,31,73,31,73,30,48,31,94,31,117,31,121,31,121,30,91,31,104,31,104,30,64,31,112,31,221,31,116,31,112,31,88,31,88,30,7,31,48,31,207,31,17,31,241,31,241,30,146,31,250,31,241,31,146,31,112,31,112,30,102,31,73,31,73,30,117,31,117,30,221,31,221,30,15,31,19,31,193,31,240,31,192,31,37,31,37,30,37,29,61,31,61,30,213,31,149,31,102,31,37,31,37,30,2,31,124,31,238,31,238,30,60,31,60,30,253,31,26,31,28,31,37,31,160,31,195,31,191,31,111,31,151,31,151,30,168,31,219,31,19,31,47,31,18,31,228,31,212,31,158,31,158,30,54,31,178,31,216,31,215,31,203,31,210,31,73,31,114,31,225,31,141,31,240,31,126,31,126,30,187,31,124,31,47,31,47,30,47,29,203,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
