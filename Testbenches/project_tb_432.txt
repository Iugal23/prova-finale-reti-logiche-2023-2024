-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 432;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (113,0,226,0,0,0,70,0,131,0,0,0,11,0,117,0,0,0,0,0,104,0,136,0,202,0,97,0,29,0,0,0,250,0,36,0,209,0,0,0,172,0,81,0,0,0,0,0,253,0,1,0,212,0,100,0,159,0,46,0,111,0,85,0,52,0,219,0,160,0,90,0,126,0,0,0,52,0,0,0,132,0,9,0,0,0,176,0,53,0,112,0,162,0,105,0,127,0,0,0,68,0,176,0,0,0,57,0,163,0,212,0,55,0,123,0,0,0,99,0,40,0,103,0,205,0,123,0,231,0,163,0,128,0,57,0,0,0,198,0,172,0,208,0,1,0,0,0,0,0,0,0,149,0,43,0,38,0,180,0,170,0,202,0,77,0,91,0,132,0,92,0,221,0,252,0,10,0,58,0,0,0,32,0,181,0,81,0,0,0,145,0,96,0,213,0,62,0,0,0,33,0,124,0,140,0,162,0,253,0,191,0,0,0,125,0,78,0,0,0,161,0,17,0,63,0,0,0,0,0,156,0,231,0,140,0,0,0,225,0,18,0,132,0,0,0,0,0,247,0,158,0,95,0,56,0,212,0,119,0,44,0,93,0,44,0,0,0,0,0,111,0,173,0,0,0,0,0,249,0,220,0,0,0,51,0,235,0,0,0,248,0,60,0,157,0,133,0,186,0,163,0,7,0,180,0,36,0,57,0,13,0,47,0,195,0,112,0,6,0,82,0,159,0,0,0,0,0,0,0,54,0,238,0,45,0,90,0,18,0,255,0,204,0,96,0,148,0,219,0,242,0,203,0,72,0,194,0,169,0,0,0,152,0,218,0,0,0,100,0,91,0,254,0,236,0,0,0,115,0,25,0,168,0,70,0,0,0,77,0,246,0,77,0,194,0,0,0,224,0,190,0,24,0,37,0,167,0,114,0,155,0,138,0,216,0,182,0,72,0,233,0,113,0,115,0,245,0,0,0,77,0,14,0,16,0,0,0,81,0,136,0,0,0,159,0,0,0,4,0,243,0,245,0,243,0,0,0,0,0,254,0,50,0,109,0,159,0,221,0,38,0,84,0,0,0,209,0,211,0,81,0,146,0,0,0,76,0,64,0,213,0,30,0,129,0,6,0,102,0,123,0,163,0,0,0,0,0,218,0,0,0,1,0,39,0,100,0,173,0,116,0,214,0,51,0,115,0,121,0,112,0,164,0,53,0,0,0,181,0,109,0,226,0,43,0,16,0,16,0,110,0,173,0,0,0,23,0,0,0,249,0,77,0,212,0,185,0,214,0,49,0,239,0,142,0,104,0,122,0,205,0,17,0,18,0,0,0,191,0,87,0,0,0,216,0,189,0,51,0,189,0,107,0,242,0,144,0,183,0,251,0,129,0,0,0,202,0,216,0,226,0,48,0,57,0,0,0,157,0,0,0,0,0,130,0,157,0,47,0,199,0,0,0,74,0,216,0,211,0,73,0,245,0,4,0,0,0,69,0,176,0,138,0,145,0,0,0,0,0,102,0,45,0,236,0,84,0,174,0,226,0,15,0,91,0,205,0,17,0,71,0,66,0,45,0,11,0,157,0,61,0,26,0,67,0,163,0,0,0,222,0,112,0,129,0,65,0,158,0,2,0,0,0,0,0,0,0,0,0,140,0,241,0,149,0,0,0,239,0,69,0,0,0,0,0,82,0,254,0,61,0,88,0,31,0,91,0,252,0,57,0,0,0,71,0,239,0,35,0,51,0,107,0,0,0,186,0,0,0,169,0,0,0,155,0,224,0,61,0,142,0,172,0,54,0,102,0,254,0,145,0,226,0,0,0,249,0,0,0,228,0,0,0,27,0,196,0,150,0,20,0,112,0,0,0,80,0,35,0,101,0,239,0,207,0,150,0,168,0,39,0,203,0,228,0,61,0,17,0,131,0,62,0,0,0,162,0,246,0,131,0,146,0);
signal scenario_full  : scenario_type := (113,31,226,31,226,30,70,31,131,31,131,30,11,31,117,31,117,30,117,29,104,31,136,31,202,31,97,31,29,31,29,30,250,31,36,31,209,31,209,30,172,31,81,31,81,30,81,29,253,31,1,31,212,31,100,31,159,31,46,31,111,31,85,31,52,31,219,31,160,31,90,31,126,31,126,30,52,31,52,30,132,31,9,31,9,30,176,31,53,31,112,31,162,31,105,31,127,31,127,30,68,31,176,31,176,30,57,31,163,31,212,31,55,31,123,31,123,30,99,31,40,31,103,31,205,31,123,31,231,31,163,31,128,31,57,31,57,30,198,31,172,31,208,31,1,31,1,30,1,29,1,28,149,31,43,31,38,31,180,31,170,31,202,31,77,31,91,31,132,31,92,31,221,31,252,31,10,31,58,31,58,30,32,31,181,31,81,31,81,30,145,31,96,31,213,31,62,31,62,30,33,31,124,31,140,31,162,31,253,31,191,31,191,30,125,31,78,31,78,30,161,31,17,31,63,31,63,30,63,29,156,31,231,31,140,31,140,30,225,31,18,31,132,31,132,30,132,29,247,31,158,31,95,31,56,31,212,31,119,31,44,31,93,31,44,31,44,30,44,29,111,31,173,31,173,30,173,29,249,31,220,31,220,30,51,31,235,31,235,30,248,31,60,31,157,31,133,31,186,31,163,31,7,31,180,31,36,31,57,31,13,31,47,31,195,31,112,31,6,31,82,31,159,31,159,30,159,29,159,28,54,31,238,31,45,31,90,31,18,31,255,31,204,31,96,31,148,31,219,31,242,31,203,31,72,31,194,31,169,31,169,30,152,31,218,31,218,30,100,31,91,31,254,31,236,31,236,30,115,31,25,31,168,31,70,31,70,30,77,31,246,31,77,31,194,31,194,30,224,31,190,31,24,31,37,31,167,31,114,31,155,31,138,31,216,31,182,31,72,31,233,31,113,31,115,31,245,31,245,30,77,31,14,31,16,31,16,30,81,31,136,31,136,30,159,31,159,30,4,31,243,31,245,31,243,31,243,30,243,29,254,31,50,31,109,31,159,31,221,31,38,31,84,31,84,30,209,31,211,31,81,31,146,31,146,30,76,31,64,31,213,31,30,31,129,31,6,31,102,31,123,31,163,31,163,30,163,29,218,31,218,30,1,31,39,31,100,31,173,31,116,31,214,31,51,31,115,31,121,31,112,31,164,31,53,31,53,30,181,31,109,31,226,31,43,31,16,31,16,31,110,31,173,31,173,30,23,31,23,30,249,31,77,31,212,31,185,31,214,31,49,31,239,31,142,31,104,31,122,31,205,31,17,31,18,31,18,30,191,31,87,31,87,30,216,31,189,31,51,31,189,31,107,31,242,31,144,31,183,31,251,31,129,31,129,30,202,31,216,31,226,31,48,31,57,31,57,30,157,31,157,30,157,29,130,31,157,31,47,31,199,31,199,30,74,31,216,31,211,31,73,31,245,31,4,31,4,30,69,31,176,31,138,31,145,31,145,30,145,29,102,31,45,31,236,31,84,31,174,31,226,31,15,31,91,31,205,31,17,31,71,31,66,31,45,31,11,31,157,31,61,31,26,31,67,31,163,31,163,30,222,31,112,31,129,31,65,31,158,31,2,31,2,30,2,29,2,28,2,27,140,31,241,31,149,31,149,30,239,31,69,31,69,30,69,29,82,31,254,31,61,31,88,31,31,31,91,31,252,31,57,31,57,30,71,31,239,31,35,31,51,31,107,31,107,30,186,31,186,30,169,31,169,30,155,31,224,31,61,31,142,31,172,31,54,31,102,31,254,31,145,31,226,31,226,30,249,31,249,30,228,31,228,30,27,31,196,31,150,31,20,31,112,31,112,30,80,31,35,31,101,31,239,31,207,31,150,31,168,31,39,31,203,31,228,31,61,31,17,31,131,31,62,31,62,30,162,31,246,31,131,31,146,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
