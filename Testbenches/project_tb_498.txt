-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 711;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (65,0,239,0,67,0,23,0,0,0,59,0,114,0,148,0,69,0,0,0,235,0,39,0,198,0,14,0,87,0,74,0,0,0,34,0,81,0,218,0,152,0,36,0,194,0,87,0,4,0,233,0,187,0,166,0,216,0,151,0,93,0,219,0,0,0,18,0,158,0,0,0,81,0,202,0,133,0,231,0,194,0,236,0,0,0,29,0,112,0,0,0,63,0,67,0,98,0,0,0,155,0,162,0,35,0,170,0,198,0,198,0,131,0,248,0,20,0,109,0,92,0,28,0,0,0,214,0,50,0,143,0,82,0,161,0,90,0,26,0,160,0,0,0,167,0,255,0,32,0,223,0,95,0,200,0,218,0,14,0,134,0,67,0,0,0,36,0,166,0,0,0,0,0,0,0,214,0,0,0,0,0,157,0,34,0,33,0,65,0,0,0,20,0,0,0,0,0,13,0,0,0,138,0,201,0,23,0,189,0,85,0,152,0,0,0,55,0,250,0,22,0,217,0,198,0,199,0,154,0,236,0,143,0,23,0,183,0,64,0,167,0,0,0,15,0,0,0,0,0,74,0,87,0,182,0,106,0,113,0,99,0,0,0,197,0,185,0,207,0,121,0,0,0,0,0,107,0,0,0,64,0,55,0,118,0,134,0,225,0,254,0,0,0,162,0,101,0,30,0,31,0,247,0,88,0,200,0,190,0,0,0,147,0,75,0,122,0,0,0,84,0,102,0,0,0,204,0,165,0,7,0,17,0,12,0,0,0,0,0,0,0,0,0,81,0,128,0,0,0,35,0,4,0,0,0,148,0,14,0,113,0,0,0,79,0,9,0,206,0,108,0,212,0,127,0,80,0,187,0,232,0,165,0,0,0,201,0,215,0,190,0,0,0,71,0,246,0,207,0,181,0,133,0,0,0,3,0,0,0,138,0,127,0,143,0,174,0,21,0,163,0,120,0,101,0,113,0,132,0,100,0,171,0,0,0,249,0,0,0,60,0,178,0,211,0,149,0,116,0,254,0,154,0,57,0,41,0,0,0,95,0,113,0,115,0,171,0,245,0,164,0,7,0,171,0,195,0,43,0,2,0,151,0,176,0,151,0,35,0,168,0,28,0,181,0,0,0,43,0,150,0,219,0,0,0,185,0,108,0,247,0,0,0,31,0,166,0,0,0,234,0,93,0,112,0,80,0,55,0,102,0,178,0,136,0,0,0,1,0,0,0,138,0,207,0,165,0,153,0,214,0,239,0,214,0,53,0,66,0,214,0,55,0,192,0,105,0,129,0,0,0,247,0,130,0,126,0,188,0,32,0,0,0,207,0,217,0,204,0,226,0,176,0,49,0,0,0,198,0,174,0,168,0,140,0,49,0,235,0,231,0,31,0,191,0,105,0,127,0,62,0,155,0,0,0,129,0,18,0,241,0,142,0,93,0,147,0,0,0,17,0,0,0,78,0,70,0,0,0,115,0,104,0,228,0,0,0,39,0,161,0,141,0,133,0,9,0,198,0,199,0,83,0,210,0,108,0,0,0,42,0,0,0,148,0,208,0,110,0,116,0,96,0,0,0,0,0,221,0,223,0,201,0,219,0,0,0,121,0,240,0,24,0,93,0,0,0,247,0,98,0,77,0,0,0,254,0,155,0,51,0,138,0,144,0,207,0,0,0,183,0,102,0,9,0,128,0,80,0,24,0,79,0,227,0,202,0,238,0,0,0,58,0,53,0,142,0,61,0,69,0,241,0,137,0,169,0,0,0,0,0,142,0,73,0,0,0,0,0,0,0,166,0,0,0,182,0,0,0,0,0,135,0,46,0,172,0,71,0,130,0,195,0,244,0,0,0,240,0,221,0,0,0,103,0,175,0,238,0,0,0,183,0,115,0,131,0,146,0,39,0,199,0,176,0,0,0,134,0,242,0,59,0,0,0,75,0,156,0,178,0,0,0,91,0,67,0,156,0,255,0,0,0,49,0,42,0,184,0,154,0,124,0,0,0,235,0,197,0,6,0,91,0,0,0,234,0,50,0,221,0,1,0,133,0,54,0,110,0,0,0,27,0,0,0,119,0,175,0,2,0,0,0,156,0,167,0,0,0,168,0,194,0,43,0,0,0,60,0,157,0,0,0,104,0,218,0,157,0,57,0,37,0,225,0,162,0,0,0,134,0,106,0,0,0,106,0,210,0,0,0,0,0,211,0,174,0,147,0,44,0,68,0,88,0,13,0,158,0,0,0,138,0,3,0,0,0,202,0,17,0,48,0,0,0,160,0,0,0,248,0,0,0,207,0,2,0,3,0,244,0,0,0,134,0,148,0,207,0,83,0,178,0,218,0,201,0,181,0,91,0,0,0,250,0,218,0,216,0,170,0,61,0,80,0,0,0,228,0,0,0,162,0,0,0,80,0,73,0,0,0,198,0,31,0,0,0,130,0,25,0,65,0,82,0,211,0,0,0,170,0,2,0,246,0,153,0,129,0,0,0,146,0,31,0,132,0,75,0,76,0,0,0,219,0,50,0,0,0,10,0,134,0,141,0,95,0,253,0,26,0,89,0,0,0,124,0,0,0,219,0,0,0,0,0,82,0,0,0,0,0,0,0,0,0,244,0,10,0,224,0,86,0,227,0,0,0,218,0,69,0,113,0,0,0,100,0,215,0,200,0,0,0,114,0,243,0,0,0,218,0,0,0,126,0,122,0,217,0,76,0,79,0,148,0,153,0,0,0,42,0,202,0,61,0,134,0,162,0,1,0,30,0,240,0,137,0,106,0,60,0,61,0,139,0,0,0,113,0,177,0,148,0,241,0,104,0,222,0,249,0,117,0,66,0,232,0,0,0,0,0,248,0,38,0,0,0,96,0,157,0,80,0,0,0,90,0,0,0,10,0,40,0,132,0,186,0,121,0,44,0,0,0,159,0,122,0,162,0,11,0,109,0,250,0,69,0,0,0,177,0,123,0,133,0,118,0,103,0,214,0,0,0,105,0,234,0,114,0,0,0,16,0,157,0,134,0,0,0,218,0,109,0,0,0,170,0,98,0,217,0,55,0,0,0,152,0,217,0,95,0,198,0,161,0,217,0,149,0,124,0,193,0,149,0,117,0,0,0,241,0,192,0,0,0,232,0,0,0,195,0,194,0,182,0,59,0,192,0,34,0,51,0,232,0,5,0,30,0,0,0,40,0,0,0,136,0,153,0,121,0);
signal scenario_full  : scenario_type := (65,31,239,31,67,31,23,31,23,30,59,31,114,31,148,31,69,31,69,30,235,31,39,31,198,31,14,31,87,31,74,31,74,30,34,31,81,31,218,31,152,31,36,31,194,31,87,31,4,31,233,31,187,31,166,31,216,31,151,31,93,31,219,31,219,30,18,31,158,31,158,30,81,31,202,31,133,31,231,31,194,31,236,31,236,30,29,31,112,31,112,30,63,31,67,31,98,31,98,30,155,31,162,31,35,31,170,31,198,31,198,31,131,31,248,31,20,31,109,31,92,31,28,31,28,30,214,31,50,31,143,31,82,31,161,31,90,31,26,31,160,31,160,30,167,31,255,31,32,31,223,31,95,31,200,31,218,31,14,31,134,31,67,31,67,30,36,31,166,31,166,30,166,29,166,28,214,31,214,30,214,29,157,31,34,31,33,31,65,31,65,30,20,31,20,30,20,29,13,31,13,30,138,31,201,31,23,31,189,31,85,31,152,31,152,30,55,31,250,31,22,31,217,31,198,31,199,31,154,31,236,31,143,31,23,31,183,31,64,31,167,31,167,30,15,31,15,30,15,29,74,31,87,31,182,31,106,31,113,31,99,31,99,30,197,31,185,31,207,31,121,31,121,30,121,29,107,31,107,30,64,31,55,31,118,31,134,31,225,31,254,31,254,30,162,31,101,31,30,31,31,31,247,31,88,31,200,31,190,31,190,30,147,31,75,31,122,31,122,30,84,31,102,31,102,30,204,31,165,31,7,31,17,31,12,31,12,30,12,29,12,28,12,27,81,31,128,31,128,30,35,31,4,31,4,30,148,31,14,31,113,31,113,30,79,31,9,31,206,31,108,31,212,31,127,31,80,31,187,31,232,31,165,31,165,30,201,31,215,31,190,31,190,30,71,31,246,31,207,31,181,31,133,31,133,30,3,31,3,30,138,31,127,31,143,31,174,31,21,31,163,31,120,31,101,31,113,31,132,31,100,31,171,31,171,30,249,31,249,30,60,31,178,31,211,31,149,31,116,31,254,31,154,31,57,31,41,31,41,30,95,31,113,31,115,31,171,31,245,31,164,31,7,31,171,31,195,31,43,31,2,31,151,31,176,31,151,31,35,31,168,31,28,31,181,31,181,30,43,31,150,31,219,31,219,30,185,31,108,31,247,31,247,30,31,31,166,31,166,30,234,31,93,31,112,31,80,31,55,31,102,31,178,31,136,31,136,30,1,31,1,30,138,31,207,31,165,31,153,31,214,31,239,31,214,31,53,31,66,31,214,31,55,31,192,31,105,31,129,31,129,30,247,31,130,31,126,31,188,31,32,31,32,30,207,31,217,31,204,31,226,31,176,31,49,31,49,30,198,31,174,31,168,31,140,31,49,31,235,31,231,31,31,31,191,31,105,31,127,31,62,31,155,31,155,30,129,31,18,31,241,31,142,31,93,31,147,31,147,30,17,31,17,30,78,31,70,31,70,30,115,31,104,31,228,31,228,30,39,31,161,31,141,31,133,31,9,31,198,31,199,31,83,31,210,31,108,31,108,30,42,31,42,30,148,31,208,31,110,31,116,31,96,31,96,30,96,29,221,31,223,31,201,31,219,31,219,30,121,31,240,31,24,31,93,31,93,30,247,31,98,31,77,31,77,30,254,31,155,31,51,31,138,31,144,31,207,31,207,30,183,31,102,31,9,31,128,31,80,31,24,31,79,31,227,31,202,31,238,31,238,30,58,31,53,31,142,31,61,31,69,31,241,31,137,31,169,31,169,30,169,29,142,31,73,31,73,30,73,29,73,28,166,31,166,30,182,31,182,30,182,29,135,31,46,31,172,31,71,31,130,31,195,31,244,31,244,30,240,31,221,31,221,30,103,31,175,31,238,31,238,30,183,31,115,31,131,31,146,31,39,31,199,31,176,31,176,30,134,31,242,31,59,31,59,30,75,31,156,31,178,31,178,30,91,31,67,31,156,31,255,31,255,30,49,31,42,31,184,31,154,31,124,31,124,30,235,31,197,31,6,31,91,31,91,30,234,31,50,31,221,31,1,31,133,31,54,31,110,31,110,30,27,31,27,30,119,31,175,31,2,31,2,30,156,31,167,31,167,30,168,31,194,31,43,31,43,30,60,31,157,31,157,30,104,31,218,31,157,31,57,31,37,31,225,31,162,31,162,30,134,31,106,31,106,30,106,31,210,31,210,30,210,29,211,31,174,31,147,31,44,31,68,31,88,31,13,31,158,31,158,30,138,31,3,31,3,30,202,31,17,31,48,31,48,30,160,31,160,30,248,31,248,30,207,31,2,31,3,31,244,31,244,30,134,31,148,31,207,31,83,31,178,31,218,31,201,31,181,31,91,31,91,30,250,31,218,31,216,31,170,31,61,31,80,31,80,30,228,31,228,30,162,31,162,30,80,31,73,31,73,30,198,31,31,31,31,30,130,31,25,31,65,31,82,31,211,31,211,30,170,31,2,31,246,31,153,31,129,31,129,30,146,31,31,31,132,31,75,31,76,31,76,30,219,31,50,31,50,30,10,31,134,31,141,31,95,31,253,31,26,31,89,31,89,30,124,31,124,30,219,31,219,30,219,29,82,31,82,30,82,29,82,28,82,27,244,31,10,31,224,31,86,31,227,31,227,30,218,31,69,31,113,31,113,30,100,31,215,31,200,31,200,30,114,31,243,31,243,30,218,31,218,30,126,31,122,31,217,31,76,31,79,31,148,31,153,31,153,30,42,31,202,31,61,31,134,31,162,31,1,31,30,31,240,31,137,31,106,31,60,31,61,31,139,31,139,30,113,31,177,31,148,31,241,31,104,31,222,31,249,31,117,31,66,31,232,31,232,30,232,29,248,31,38,31,38,30,96,31,157,31,80,31,80,30,90,31,90,30,10,31,40,31,132,31,186,31,121,31,44,31,44,30,159,31,122,31,162,31,11,31,109,31,250,31,69,31,69,30,177,31,123,31,133,31,118,31,103,31,214,31,214,30,105,31,234,31,114,31,114,30,16,31,157,31,134,31,134,30,218,31,109,31,109,30,170,31,98,31,217,31,55,31,55,30,152,31,217,31,95,31,198,31,161,31,217,31,149,31,124,31,193,31,149,31,117,31,117,30,241,31,192,31,192,30,232,31,232,30,195,31,194,31,182,31,59,31,192,31,34,31,51,31,232,31,5,31,30,31,30,30,40,31,40,30,136,31,153,31,121,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
