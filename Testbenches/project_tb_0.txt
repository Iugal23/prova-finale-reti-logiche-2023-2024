-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 655;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (237,0,47,0,0,0,72,0,0,0,233,0,237,0,48,0,56,0,115,0,200,0,0,0,79,0,0,0,242,0,172,0,153,0,0,0,221,0,13,0,0,0,107,0,55,0,66,0,224,0,0,0,0,0,163,0,0,0,184,0,150,0,80,0,180,0,85,0,133,0,226,0,180,0,0,0,58,0,141,0,0,0,0,0,157,0,132,0,0,0,96,0,7,0,19,0,48,0,251,0,0,0,0,0,0,0,32,0,227,0,56,0,72,0,118,0,167,0,59,0,34,0,0,0,161,0,230,0,41,0,156,0,0,0,48,0,139,0,25,0,31,0,199,0,124,0,0,0,203,0,150,0,98,0,161,0,0,0,0,0,0,0,240,0,97,0,83,0,210,0,223,0,67,0,94,0,230,0,50,0,27,0,224,0,226,0,140,0,6,0,228,0,23,0,220,0,0,0,108,0,61,0,162,0,87,0,2,0,131,0,238,0,121,0,127,0,208,0,0,0,190,0,0,0,90,0,97,0,227,0,0,0,221,0,40,0,116,0,251,0,176,0,230,0,10,0,128,0,233,0,169,0,0,0,243,0,136,0,0,0,242,0,111,0,241,0,102,0,17,0,126,0,80,0,130,0,209,0,27,0,108,0,240,0,163,0,0,0,0,0,54,0,151,0,0,0,20,0,180,0,117,0,230,0,149,0,137,0,191,0,49,0,65,0,232,0,65,0,166,0,34,0,178,0,135,0,127,0,126,0,139,0,208,0,249,0,58,0,164,0,184,0,255,0,240,0,253,0,107,0,0,0,22,0,194,0,116,0,67,0,212,0,0,0,0,0,174,0,207,0,164,0,51,0,185,0,91,0,179,0,141,0,157,0,89,0,0,0,47,0,57,0,125,0,0,0,117,0,60,0,43,0,112,0,98,0,0,0,0,0,193,0,0,0,0,0,0,0,120,0,222,0,0,0,119,0,237,0,102,0,38,0,231,0,93,0,134,0,27,0,134,0,0,0,0,0,184,0,112,0,0,0,14,0,0,0,109,0,91,0,105,0,18,0,247,0,122,0,201,0,222,0,64,0,160,0,32,0,75,0,92,0,203,0,0,0,118,0,0,0,138,0,89,0,233,0,220,0,0,0,161,0,7,0,0,0,159,0,193,0,3,0,84,0,31,0,192,0,250,0,112,0,32,0,123,0,186,0,0,0,0,0,105,0,227,0,238,0,0,0,65,0,1,0,207,0,119,0,245,0,109,0,143,0,26,0,211,0,77,0,181,0,213,0,49,0,159,0,88,0,59,0,186,0,165,0,141,0,0,0,173,0,17,0,132,0,0,0,150,0,103,0,78,0,0,0,104,0,6,0,56,0,0,0,71,0,33,0,113,0,71,0,16,0,170,0,0,0,231,0,232,0,8,0,226,0,21,0,143,0,155,0,165,0,215,0,143,0,128,0,202,0,208,0,0,0,0,0,66,0,0,0,155,0,0,0,130,0,238,0,160,0,0,0,115,0,113,0,242,0,196,0,129,0,167,0,95,0,25,0,238,0,161,0,41,0,94,0,184,0,209,0,16,0,173,0,168,0,209,0,1,0,0,0,126,0,55,0,35,0,51,0,0,0,0,0,73,0,2,0,151,0,198,0,184,0,0,0,207,0,194,0,0,0,53,0,24,0,221,0,58,0,140,0,0,0,241,0,89,0,7,0,117,0,86,0,81,0,188,0,152,0,198,0,101,0,165,0,0,0,100,0,0,0,192,0,0,0,251,0,78,0,0,0,171,0,99,0,214,0,0,0,99,0,16,0,83,0,27,0,231,0,151,0,0,0,81,0,22,0,0,0,0,0,132,0,251,0,182,0,244,0,0,0,3,0,0,0,0,0,0,0,158,0,0,0,0,0,98,0,3,0,219,0,0,0,102,0,34,0,64,0,78,0,0,0,115,0,0,0,104,0,0,0,113,0,177,0,72,0,219,0,149,0,31,0,219,0,115,0,0,0,32,0,0,0,242,0,101,0,181,0,240,0,0,0,122,0,223,0,234,0,179,0,59,0,45,0,140,0,76,0,93,0,201,0,160,0,0,0,0,0,139,0,81,0,7,0,0,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,239,0,0,0,3,0,72,0,115,0,0,0,181,0,93,0,46,0,0,0,100,0,8,0,0,0,150,0,127,0,245,0,226,0,68,0,208,0,50,0,0,0,0,0,122,0,45,0,137,0,0,0,134,0,82,0,141,0,0,0,146,0,77,0,0,0,0,0,0,0,255,0,128,0,3,0,0,0,0,0,122,0,200,0,34,0,0,0,111,0,170,0,0,0,182,0,0,0,117,0,0,0,59,0,82,0,176,0,201,0,0,0,0,0,221,0,12,0,141,0,0,0,187,0,0,0,138,0,241,0,2,0,109,0,52,0,12,0,128,0,183,0,0,0,134,0,0,0,106,0,232,0,157,0,125,0,0,0,0,0,239,0,169,0,195,0,181,0,125,0,0,0,88,0,0,0,109,0,202,0,109,0,223,0,147,0,214,0,149,0,0,0,170,0,147,0,92,0,199,0,0,0,203,0,194,0,191,0,48,0,9,0,0,0,34,0,164,0,134,0,137,0,51,0,0,0,0,0,159,0,84,0,0,0,58,0,61,0,90,0,0,0,0,0,122,0,10,0,229,0,36,0,19,0,0,0,0,0,13,0,144,0,247,0,233,0,0,0,0,0,204,0,67,0,99,0,0,0,195,0,176,0,154,0,125,0,67,0,63,0,165,0,132,0,121,0,228,0,136,0,199,0,82,0,253,0,147,0,247,0,25,0,212,0,105,0,217,0,253,0,70,0,148,0,92,0,181,0,171,0,92,0,72,0,70,0,237,0,209,0,27,0,232,0,0,0,0,0,0,0,181,0,161,0,201,0,228,0,234,0,0,0,50,0);
signal scenario_full  : scenario_type := (237,31,47,31,47,30,72,31,72,30,233,31,237,31,48,31,56,31,115,31,200,31,200,30,79,31,79,30,242,31,172,31,153,31,153,30,221,31,13,31,13,30,107,31,55,31,66,31,224,31,224,30,224,29,163,31,163,30,184,31,150,31,80,31,180,31,85,31,133,31,226,31,180,31,180,30,58,31,141,31,141,30,141,29,157,31,132,31,132,30,96,31,7,31,19,31,48,31,251,31,251,30,251,29,251,28,32,31,227,31,56,31,72,31,118,31,167,31,59,31,34,31,34,30,161,31,230,31,41,31,156,31,156,30,48,31,139,31,25,31,31,31,199,31,124,31,124,30,203,31,150,31,98,31,161,31,161,30,161,29,161,28,240,31,97,31,83,31,210,31,223,31,67,31,94,31,230,31,50,31,27,31,224,31,226,31,140,31,6,31,228,31,23,31,220,31,220,30,108,31,61,31,162,31,87,31,2,31,131,31,238,31,121,31,127,31,208,31,208,30,190,31,190,30,90,31,97,31,227,31,227,30,221,31,40,31,116,31,251,31,176,31,230,31,10,31,128,31,233,31,169,31,169,30,243,31,136,31,136,30,242,31,111,31,241,31,102,31,17,31,126,31,80,31,130,31,209,31,27,31,108,31,240,31,163,31,163,30,163,29,54,31,151,31,151,30,20,31,180,31,117,31,230,31,149,31,137,31,191,31,49,31,65,31,232,31,65,31,166,31,34,31,178,31,135,31,127,31,126,31,139,31,208,31,249,31,58,31,164,31,184,31,255,31,240,31,253,31,107,31,107,30,22,31,194,31,116,31,67,31,212,31,212,30,212,29,174,31,207,31,164,31,51,31,185,31,91,31,179,31,141,31,157,31,89,31,89,30,47,31,57,31,125,31,125,30,117,31,60,31,43,31,112,31,98,31,98,30,98,29,193,31,193,30,193,29,193,28,120,31,222,31,222,30,119,31,237,31,102,31,38,31,231,31,93,31,134,31,27,31,134,31,134,30,134,29,184,31,112,31,112,30,14,31,14,30,109,31,91,31,105,31,18,31,247,31,122,31,201,31,222,31,64,31,160,31,32,31,75,31,92,31,203,31,203,30,118,31,118,30,138,31,89,31,233,31,220,31,220,30,161,31,7,31,7,30,159,31,193,31,3,31,84,31,31,31,192,31,250,31,112,31,32,31,123,31,186,31,186,30,186,29,105,31,227,31,238,31,238,30,65,31,1,31,207,31,119,31,245,31,109,31,143,31,26,31,211,31,77,31,181,31,213,31,49,31,159,31,88,31,59,31,186,31,165,31,141,31,141,30,173,31,17,31,132,31,132,30,150,31,103,31,78,31,78,30,104,31,6,31,56,31,56,30,71,31,33,31,113,31,71,31,16,31,170,31,170,30,231,31,232,31,8,31,226,31,21,31,143,31,155,31,165,31,215,31,143,31,128,31,202,31,208,31,208,30,208,29,66,31,66,30,155,31,155,30,130,31,238,31,160,31,160,30,115,31,113,31,242,31,196,31,129,31,167,31,95,31,25,31,238,31,161,31,41,31,94,31,184,31,209,31,16,31,173,31,168,31,209,31,1,31,1,30,126,31,55,31,35,31,51,31,51,30,51,29,73,31,2,31,151,31,198,31,184,31,184,30,207,31,194,31,194,30,53,31,24,31,221,31,58,31,140,31,140,30,241,31,89,31,7,31,117,31,86,31,81,31,188,31,152,31,198,31,101,31,165,31,165,30,100,31,100,30,192,31,192,30,251,31,78,31,78,30,171,31,99,31,214,31,214,30,99,31,16,31,83,31,27,31,231,31,151,31,151,30,81,31,22,31,22,30,22,29,132,31,251,31,182,31,244,31,244,30,3,31,3,30,3,29,3,28,158,31,158,30,158,29,98,31,3,31,219,31,219,30,102,31,34,31,64,31,78,31,78,30,115,31,115,30,104,31,104,30,113,31,177,31,72,31,219,31,149,31,31,31,219,31,115,31,115,30,32,31,32,30,242,31,101,31,181,31,240,31,240,30,122,31,223,31,234,31,179,31,59,31,45,31,140,31,76,31,93,31,201,31,160,31,160,30,160,29,139,31,81,31,7,31,7,30,178,31,178,30,178,29,178,28,178,27,178,26,178,25,32,31,239,31,239,30,3,31,72,31,115,31,115,30,181,31,93,31,46,31,46,30,100,31,8,31,8,30,150,31,127,31,245,31,226,31,68,31,208,31,50,31,50,30,50,29,122,31,45,31,137,31,137,30,134,31,82,31,141,31,141,30,146,31,77,31,77,30,77,29,77,28,255,31,128,31,3,31,3,30,3,29,122,31,200,31,34,31,34,30,111,31,170,31,170,30,182,31,182,30,117,31,117,30,59,31,82,31,176,31,201,31,201,30,201,29,221,31,12,31,141,31,141,30,187,31,187,30,138,31,241,31,2,31,109,31,52,31,12,31,128,31,183,31,183,30,134,31,134,30,106,31,232,31,157,31,125,31,125,30,125,29,239,31,169,31,195,31,181,31,125,31,125,30,88,31,88,30,109,31,202,31,109,31,223,31,147,31,214,31,149,31,149,30,170,31,147,31,92,31,199,31,199,30,203,31,194,31,191,31,48,31,9,31,9,30,34,31,164,31,134,31,137,31,51,31,51,30,51,29,159,31,84,31,84,30,58,31,61,31,90,31,90,30,90,29,122,31,10,31,229,31,36,31,19,31,19,30,19,29,13,31,144,31,247,31,233,31,233,30,233,29,204,31,67,31,99,31,99,30,195,31,176,31,154,31,125,31,67,31,63,31,165,31,132,31,121,31,228,31,136,31,199,31,82,31,253,31,147,31,247,31,25,31,212,31,105,31,217,31,253,31,70,31,148,31,92,31,181,31,171,31,92,31,72,31,70,31,237,31,209,31,27,31,232,31,232,30,232,29,232,28,181,31,161,31,201,31,228,31,234,31,234,30,50,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
