-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 959;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (96,0,219,0,238,0,129,0,0,0,169,0,101,0,42,0,83,0,17,0,3,0,0,0,93,0,52,0,0,0,0,0,91,0,116,0,139,0,166,0,21,0,0,0,32,0,188,0,0,0,0,0,195,0,148,0,50,0,250,0,198,0,212,0,65,0,66,0,40,0,38,0,52,0,222,0,49,0,169,0,120,0,107,0,187,0,26,0,1,0,0,0,0,0,196,0,178,0,129,0,132,0,0,0,98,0,141,0,165,0,0,0,86,0,253,0,27,0,58,0,105,0,101,0,81,0,49,0,246,0,5,0,143,0,253,0,71,0,99,0,244,0,0,0,0,0,175,0,200,0,197,0,11,0,119,0,111,0,154,0,186,0,85,0,188,0,0,0,167,0,35,0,49,0,127,0,33,0,170,0,206,0,0,0,50,0,135,0,0,0,190,0,0,0,0,0,0,0,149,0,27,0,0,0,98,0,14,0,8,0,154,0,250,0,156,0,15,0,141,0,10,0,96,0,0,0,136,0,165,0,134,0,28,0,18,0,111,0,79,0,0,0,0,0,113,0,77,0,0,0,0,0,0,0,10,0,188,0,105,0,142,0,64,0,0,0,85,0,32,0,0,0,161,0,6,0,0,0,230,0,152,0,106,0,6,0,215,0,0,0,0,0,165,0,0,0,222,0,187,0,226,0,236,0,231,0,0,0,35,0,177,0,138,0,60,0,0,0,141,0,7,0,36,0,255,0,183,0,55,0,87,0,0,0,0,0,0,0,254,0,10,0,59,0,247,0,192,0,126,0,203,0,211,0,100,0,0,0,207,0,0,0,95,0,177,0,33,0,100,0,188,0,133,0,0,0,231,0,175,0,40,0,179,0,0,0,169,0,19,0,24,0,25,0,14,0,0,0,2,0,75,0,146,0,126,0,219,0,105,0,98,0,253,0,212,0,32,0,0,0,54,0,119,0,0,0,208,0,83,0,109,0,0,0,41,0,44,0,139,0,50,0,255,0,0,0,39,0,0,0,163,0,218,0,0,0,245,0,27,0,6,0,164,0,241,0,85,0,120,0,41,0,91,0,81,0,29,0,17,0,170,0,202,0,0,0,0,0,140,0,208,0,66,0,53,0,175,0,0,0,0,0,14,0,121,0,97,0,0,0,174,0,51,0,76,0,226,0,194,0,189,0,41,0,75,0,247,0,56,0,77,0,232,0,0,0,0,0,155,0,138,0,200,0,53,0,0,0,0,0,72,0,0,0,16,0,128,0,14,0,47,0,170,0,0,0,238,0,0,0,148,0,67,0,35,0,242,0,15,0,41,0,147,0,0,0,83,0,134,0,214,0,0,0,0,0,112,0,95,0,0,0,241,0,83,0,17,0,210,0,74,0,124,0,203,0,106,0,71,0,85,0,0,0,112,0,0,0,0,0,211,0,86,0,40,0,0,0,0,0,251,0,48,0,78,0,45,0,73,0,206,0,142,0,7,0,107,0,102,0,106,0,0,0,122,0,1,0,72,0,221,0,86,0,227,0,0,0,7,0,0,0,17,0,212,0,47,0,186,0,168,0,96,0,117,0,107,0,47,0,247,0,5,0,194,0,231,0,7,0,176,0,198,0,70,0,199,0,0,0,223,0,79,0,206,0,222,0,105,0,13,0,90,0,0,0,209,0,134,0,163,0,246,0,112,0,84,0,0,0,82,0,0,0,38,0,188,0,195,0,240,0,0,0,192,0,188,0,203,0,49,0,49,0,146,0,0,0,196,0,198,0,26,0,188,0,26,0,248,0,44,0,64,0,152,0,159,0,48,0,0,0,0,0,4,0,0,0,176,0,203,0,89,0,58,0,0,0,31,0,0,0,213,0,28,0,40,0,0,0,220,0,0,0,212,0,195,0,0,0,129,0,165,0,0,0,145,0,0,0,139,0,173,0,222,0,131,0,209,0,54,0,123,0,59,0,0,0,35,0,0,0,26,0,217,0,24,0,52,0,36,0,169,0,22,0,147,0,9,0,57,0,93,0,0,0,0,0,0,0,28,0,131,0,215,0,55,0,0,0,0,0,212,0,58,0,0,0,0,0,114,0,25,0,122,0,70,0,72,0,62,0,0,0,102,0,173,0,34,0,70,0,150,0,237,0,184,0,0,0,32,0,0,0,0,0,0,0,208,0,234,0,240,0,25,0,99,0,251,0,75,0,117,0,143,0,35,0,255,0,1,0,0,0,190,0,0,0,0,0,46,0,76,0,133,0,68,0,167,0,0,0,64,0,126,0,205,0,213,0,193,0,0,0,190,0,0,0,138,0,14,0,10,0,29,0,102,0,157,0,171,0,181,0,198,0,213,0,0,0,51,0,17,0,6,0,62,0,127,0,28,0,25,0,0,0,47,0,76,0,176,0,147,0,184,0,0,0,52,0,54,0,107,0,85,0,84,0,84,0,137,0,6,0,0,0,162,0,0,0,106,0,157,0,113,0,243,0,92,0,146,0,33,0,135,0,199,0,134,0,171,0,21,0,55,0,103,0,0,0,81,0,61,0,26,0,71,0,77,0,236,0,0,0,0,0,95,0,177,0,5,0,0,0,175,0,0,0,70,0,161,0,204,0,0,0,182,0,209,0,149,0,10,0,53,0,0,0,181,0,68,0,83,0,250,0,42,0,248,0,206,0,0,0,41,0,253,0,0,0,112,0,76,0,182,0,169,0,71,0,26,0,106,0,124,0,0,0,136,0,174,0,209,0,150,0,102,0,153,0,182,0,96,0,186,0,66,0,230,0,79,0,0,0,18,0,165,0,48,0,174,0,15,0,57,0,207,0,79,0,0,0,0,0,154,0,95,0,0,0,159,0,202,0,31,0,194,0,13,0,19,0,0,0,10,0,69,0,0,0,0,0,156,0,192,0,249,0,0,0,144,0,0,0,154,0,28,0,0,0,0,0,250,0,89,0,0,0,54,0,152,0,228,0,87,0,70,0,2,0,53,0,181,0,0,0,92,0,147,0,0,0,76,0,95,0,95,0,137,0,0,0,203,0,194,0,54,0,252,0,23,0,206,0,0,0,0,0,0,0,0,0,0,0,66,0,143,0,180,0,186,0,0,0,127,0,62,0,0,0,125,0,162,0,248,0,107,0,0,0,183,0,182,0,105,0,231,0,228,0,91,0,114,0,4,0,111,0,0,0,0,0,140,0,129,0,0,0,75,0,224,0,137,0,245,0,0,0,0,0,0,0,16,0,74,0,64,0,0,0,0,0,71,0,204,0,161,0,228,0,0,0,185,0,18,0,0,0,122,0,247,0,41,0,172,0,72,0,165,0,3,0,0,0,57,0,0,0,61,0,0,0,3,0,8,0,103,0,14,0,0,0,0,0,23,0,11,0,7,0,150,0,182,0,0,0,0,0,43,0,240,0,255,0,0,0,104,0,0,0,105,0,216,0,190,0,16,0,225,0,5,0,156,0,0,0,126,0,0,0,180,0,112,0,0,0,69,0,189,0,245,0,77,0,239,0,0,0,0,0,85,0,194,0,26,0,56,0,102,0,144,0,172,0,48,0,0,0,15,0,143,0,224,0,41,0,44,0,0,0,240,0,0,0,93,0,217,0,22,0,79,0,234,0,254,0,48,0,243,0,99,0,137,0,10,0,0,0,0,0,11,0,193,0,234,0,24,0,178,0,0,0,84,0,134,0,5,0,5,0,49,0,31,0,0,0,98,0,32,0,49,0,189,0,234,0,32,0,0,0,60,0,230,0,154,0,143,0,0,0,71,0,93,0,199,0,76,0,0,0,0,0,158,0,164,0,193,0,114,0,156,0,240,0,49,0,0,0,0,0,13,0,247,0,57,0,161,0,0,0,116,0,84,0,0,0,96,0,0,0,85,0,72,0,0,0,85,0,204,0,17,0,51,0,172,0,208,0,0,0,145,0,78,0,87,0,0,0,0,0,47,0,229,0,0,0,152,0,0,0,137,0,67,0,134,0,0,0,9,0,243,0,247,0,0,0,0,0,130,0,35,0,6,0,5,0,197,0,188,0,0,0,89,0,0,0,240,0,186,0,0,0,113,0,0,0,229,0,9,0,96,0,36,0,0,0,0,0,0,0,79,0,235,0,199,0,166,0,121,0,160,0,0,0,0,0,71,0,242,0,238,0,0,0,249,0,70,0,83,0,117,0,34,0,222,0,54,0,0,0,11,0,169,0,181,0,0,0,164,0,75,0,171,0,0,0,15,0,180,0,113,0,0,0,89,0,50,0,225,0,130,0,0,0,98,0,133,0,242,0,24,0,132,0,112,0,51,0,0,0,161,0,116,0,0,0,25,0);
signal scenario_full  : scenario_type := (96,31,219,31,238,31,129,31,129,30,169,31,101,31,42,31,83,31,17,31,3,31,3,30,93,31,52,31,52,30,52,29,91,31,116,31,139,31,166,31,21,31,21,30,32,31,188,31,188,30,188,29,195,31,148,31,50,31,250,31,198,31,212,31,65,31,66,31,40,31,38,31,52,31,222,31,49,31,169,31,120,31,107,31,187,31,26,31,1,31,1,30,1,29,196,31,178,31,129,31,132,31,132,30,98,31,141,31,165,31,165,30,86,31,253,31,27,31,58,31,105,31,101,31,81,31,49,31,246,31,5,31,143,31,253,31,71,31,99,31,244,31,244,30,244,29,175,31,200,31,197,31,11,31,119,31,111,31,154,31,186,31,85,31,188,31,188,30,167,31,35,31,49,31,127,31,33,31,170,31,206,31,206,30,50,31,135,31,135,30,190,31,190,30,190,29,190,28,149,31,27,31,27,30,98,31,14,31,8,31,154,31,250,31,156,31,15,31,141,31,10,31,96,31,96,30,136,31,165,31,134,31,28,31,18,31,111,31,79,31,79,30,79,29,113,31,77,31,77,30,77,29,77,28,10,31,188,31,105,31,142,31,64,31,64,30,85,31,32,31,32,30,161,31,6,31,6,30,230,31,152,31,106,31,6,31,215,31,215,30,215,29,165,31,165,30,222,31,187,31,226,31,236,31,231,31,231,30,35,31,177,31,138,31,60,31,60,30,141,31,7,31,36,31,255,31,183,31,55,31,87,31,87,30,87,29,87,28,254,31,10,31,59,31,247,31,192,31,126,31,203,31,211,31,100,31,100,30,207,31,207,30,95,31,177,31,33,31,100,31,188,31,133,31,133,30,231,31,175,31,40,31,179,31,179,30,169,31,19,31,24,31,25,31,14,31,14,30,2,31,75,31,146,31,126,31,219,31,105,31,98,31,253,31,212,31,32,31,32,30,54,31,119,31,119,30,208,31,83,31,109,31,109,30,41,31,44,31,139,31,50,31,255,31,255,30,39,31,39,30,163,31,218,31,218,30,245,31,27,31,6,31,164,31,241,31,85,31,120,31,41,31,91,31,81,31,29,31,17,31,170,31,202,31,202,30,202,29,140,31,208,31,66,31,53,31,175,31,175,30,175,29,14,31,121,31,97,31,97,30,174,31,51,31,76,31,226,31,194,31,189,31,41,31,75,31,247,31,56,31,77,31,232,31,232,30,232,29,155,31,138,31,200,31,53,31,53,30,53,29,72,31,72,30,16,31,128,31,14,31,47,31,170,31,170,30,238,31,238,30,148,31,67,31,35,31,242,31,15,31,41,31,147,31,147,30,83,31,134,31,214,31,214,30,214,29,112,31,95,31,95,30,241,31,83,31,17,31,210,31,74,31,124,31,203,31,106,31,71,31,85,31,85,30,112,31,112,30,112,29,211,31,86,31,40,31,40,30,40,29,251,31,48,31,78,31,45,31,73,31,206,31,142,31,7,31,107,31,102,31,106,31,106,30,122,31,1,31,72,31,221,31,86,31,227,31,227,30,7,31,7,30,17,31,212,31,47,31,186,31,168,31,96,31,117,31,107,31,47,31,247,31,5,31,194,31,231,31,7,31,176,31,198,31,70,31,199,31,199,30,223,31,79,31,206,31,222,31,105,31,13,31,90,31,90,30,209,31,134,31,163,31,246,31,112,31,84,31,84,30,82,31,82,30,38,31,188,31,195,31,240,31,240,30,192,31,188,31,203,31,49,31,49,31,146,31,146,30,196,31,198,31,26,31,188,31,26,31,248,31,44,31,64,31,152,31,159,31,48,31,48,30,48,29,4,31,4,30,176,31,203,31,89,31,58,31,58,30,31,31,31,30,213,31,28,31,40,31,40,30,220,31,220,30,212,31,195,31,195,30,129,31,165,31,165,30,145,31,145,30,139,31,173,31,222,31,131,31,209,31,54,31,123,31,59,31,59,30,35,31,35,30,26,31,217,31,24,31,52,31,36,31,169,31,22,31,147,31,9,31,57,31,93,31,93,30,93,29,93,28,28,31,131,31,215,31,55,31,55,30,55,29,212,31,58,31,58,30,58,29,114,31,25,31,122,31,70,31,72,31,62,31,62,30,102,31,173,31,34,31,70,31,150,31,237,31,184,31,184,30,32,31,32,30,32,29,32,28,208,31,234,31,240,31,25,31,99,31,251,31,75,31,117,31,143,31,35,31,255,31,1,31,1,30,190,31,190,30,190,29,46,31,76,31,133,31,68,31,167,31,167,30,64,31,126,31,205,31,213,31,193,31,193,30,190,31,190,30,138,31,14,31,10,31,29,31,102,31,157,31,171,31,181,31,198,31,213,31,213,30,51,31,17,31,6,31,62,31,127,31,28,31,25,31,25,30,47,31,76,31,176,31,147,31,184,31,184,30,52,31,54,31,107,31,85,31,84,31,84,31,137,31,6,31,6,30,162,31,162,30,106,31,157,31,113,31,243,31,92,31,146,31,33,31,135,31,199,31,134,31,171,31,21,31,55,31,103,31,103,30,81,31,61,31,26,31,71,31,77,31,236,31,236,30,236,29,95,31,177,31,5,31,5,30,175,31,175,30,70,31,161,31,204,31,204,30,182,31,209,31,149,31,10,31,53,31,53,30,181,31,68,31,83,31,250,31,42,31,248,31,206,31,206,30,41,31,253,31,253,30,112,31,76,31,182,31,169,31,71,31,26,31,106,31,124,31,124,30,136,31,174,31,209,31,150,31,102,31,153,31,182,31,96,31,186,31,66,31,230,31,79,31,79,30,18,31,165,31,48,31,174,31,15,31,57,31,207,31,79,31,79,30,79,29,154,31,95,31,95,30,159,31,202,31,31,31,194,31,13,31,19,31,19,30,10,31,69,31,69,30,69,29,156,31,192,31,249,31,249,30,144,31,144,30,154,31,28,31,28,30,28,29,250,31,89,31,89,30,54,31,152,31,228,31,87,31,70,31,2,31,53,31,181,31,181,30,92,31,147,31,147,30,76,31,95,31,95,31,137,31,137,30,203,31,194,31,54,31,252,31,23,31,206,31,206,30,206,29,206,28,206,27,206,26,66,31,143,31,180,31,186,31,186,30,127,31,62,31,62,30,125,31,162,31,248,31,107,31,107,30,183,31,182,31,105,31,231,31,228,31,91,31,114,31,4,31,111,31,111,30,111,29,140,31,129,31,129,30,75,31,224,31,137,31,245,31,245,30,245,29,245,28,16,31,74,31,64,31,64,30,64,29,71,31,204,31,161,31,228,31,228,30,185,31,18,31,18,30,122,31,247,31,41,31,172,31,72,31,165,31,3,31,3,30,57,31,57,30,61,31,61,30,3,31,8,31,103,31,14,31,14,30,14,29,23,31,11,31,7,31,150,31,182,31,182,30,182,29,43,31,240,31,255,31,255,30,104,31,104,30,105,31,216,31,190,31,16,31,225,31,5,31,156,31,156,30,126,31,126,30,180,31,112,31,112,30,69,31,189,31,245,31,77,31,239,31,239,30,239,29,85,31,194,31,26,31,56,31,102,31,144,31,172,31,48,31,48,30,15,31,143,31,224,31,41,31,44,31,44,30,240,31,240,30,93,31,217,31,22,31,79,31,234,31,254,31,48,31,243,31,99,31,137,31,10,31,10,30,10,29,11,31,193,31,234,31,24,31,178,31,178,30,84,31,134,31,5,31,5,31,49,31,31,31,31,30,98,31,32,31,49,31,189,31,234,31,32,31,32,30,60,31,230,31,154,31,143,31,143,30,71,31,93,31,199,31,76,31,76,30,76,29,158,31,164,31,193,31,114,31,156,31,240,31,49,31,49,30,49,29,13,31,247,31,57,31,161,31,161,30,116,31,84,31,84,30,96,31,96,30,85,31,72,31,72,30,85,31,204,31,17,31,51,31,172,31,208,31,208,30,145,31,78,31,87,31,87,30,87,29,47,31,229,31,229,30,152,31,152,30,137,31,67,31,134,31,134,30,9,31,243,31,247,31,247,30,247,29,130,31,35,31,6,31,5,31,197,31,188,31,188,30,89,31,89,30,240,31,186,31,186,30,113,31,113,30,229,31,9,31,96,31,36,31,36,30,36,29,36,28,79,31,235,31,199,31,166,31,121,31,160,31,160,30,160,29,71,31,242,31,238,31,238,30,249,31,70,31,83,31,117,31,34,31,222,31,54,31,54,30,11,31,169,31,181,31,181,30,164,31,75,31,171,31,171,30,15,31,180,31,113,31,113,30,89,31,50,31,225,31,130,31,130,30,98,31,133,31,242,31,24,31,132,31,112,31,51,31,51,30,161,31,116,31,116,30,25,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
