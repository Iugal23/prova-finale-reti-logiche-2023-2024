-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 877;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,204,0,93,0,82,0,189,0,145,0,0,0,24,0,226,0,173,0,197,0,194,0,54,0,247,0,21,0,0,0,173,0,125,0,0,0,82,0,161,0,199,0,35,0,247,0,0,0,181,0,58,0,37,0,0,0,151,0,0,0,134,0,0,0,6,0,67,0,50,0,139,0,255,0,0,0,173,0,226,0,0,0,120,0,150,0,0,0,145,0,0,0,66,0,184,0,19,0,57,0,172,0,227,0,53,0,214,0,0,0,190,0,34,0,0,0,0,0,0,0,138,0,180,0,38,0,237,0,0,0,0,0,34,0,28,0,174,0,0,0,123,0,51,0,0,0,78,0,34,0,70,0,0,0,237,0,87,0,72,0,90,0,77,0,139,0,230,0,0,0,252,0,126,0,107,0,0,0,32,0,70,0,34,0,27,0,156,0,148,0,8,0,93,0,208,0,57,0,60,0,43,0,0,0,88,0,71,0,0,0,152,0,8,0,107,0,251,0,0,0,107,0,0,0,72,0,118,0,211,0,0,0,0,0,201,0,80,0,76,0,161,0,26,0,0,0,178,0,182,0,253,0,40,0,30,0,16,0,72,0,0,0,0,0,117,0,0,0,80,0,123,0,0,0,86,0,226,0,167,0,243,0,2,0,181,0,224,0,0,0,42,0,33,0,0,0,93,0,0,0,198,0,105,0,196,0,250,0,83,0,0,0,14,0,169,0,0,0,35,0,43,0,194,0,110,0,143,0,0,0,0,0,98,0,156,0,102,0,0,0,180,0,0,0,207,0,89,0,124,0,101,0,0,0,0,0,176,0,70,0,0,0,28,0,66,0,48,0,71,0,18,0,94,0,0,0,251,0,65,0,36,0,42,0,208,0,212,0,62,0,132,0,0,0,199,0,51,0,247,0,195,0,114,0,252,0,114,0,218,0,103,0,0,0,68,0,163,0,211,0,0,0,68,0,29,0,0,0,196,0,0,0,240,0,196,0,206,0,191,0,236,0,212,0,28,0,20,0,166,0,208,0,0,0,251,0,51,0,7,0,8,0,0,0,0,0,66,0,95,0,240,0,155,0,0,0,212,0,235,0,47,0,242,0,119,0,0,0,119,0,47,0,52,0,167,0,214,0,81,0,89,0,52,0,146,0,17,0,21,0,83,0,244,0,0,0,113,0,88,0,130,0,70,0,0,0,206,0,115,0,112,0,7,0,243,0,33,0,68,0,208,0,0,0,212,0,0,0,200,0,59,0,0,0,169,0,96,0,6,0,145,0,175,0,77,0,0,0,115,0,50,0,86,0,38,0,94,0,39,0,192,0,138,0,67,0,8,0,142,0,119,0,172,0,0,0,0,0,220,0,12,0,0,0,152,0,0,0,144,0,55,0,47,0,166,0,56,0,201,0,10,0,44,0,177,0,119,0,3,0,254,0,210,0,120,0,236,0,0,0,12,0,56,0,69,0,0,0,60,0,74,0,103,0,46,0,108,0,58,0,204,0,0,0,115,0,185,0,123,0,0,0,207,0,0,0,92,0,96,0,0,0,81,0,49,0,24,0,0,0,142,0,0,0,75,0,0,0,161,0,118,0,2,0,53,0,162,0,224,0,0,0,0,0,202,0,41,0,0,0,152,0,0,0,9,0,146,0,148,0,120,0,117,0,133,0,0,0,60,0,0,0,221,0,202,0,174,0,210,0,40,0,194,0,128,0,0,0,241,0,52,0,223,0,185,0,180,0,252,0,15,0,42,0,230,0,0,0,204,0,122,0,53,0,129,0,153,0,0,0,154,0,198,0,0,0,0,0,36,0,107,0,206,0,58,0,0,0,22,0,0,0,31,0,161,0,22,0,175,0,43,0,106,0,208,0,0,0,88,0,116,0,69,0,89,0,25,0,6,0,131,0,15,0,105,0,84,0,54,0,227,0,35,0,19,0,0,0,250,0,226,0,178,0,163,0,19,0,230,0,130,0,129,0,0,0,186,0,39,0,105,0,80,0,0,0,200,0,129,0,0,0,215,0,61,0,0,0,4,0,0,0,0,0,121,0,0,0,0,0,0,0,0,0,207,0,161,0,121,0,240,0,214,0,62,0,0,0,0,0,252,0,105,0,37,0,90,0,124,0,207,0,193,0,23,0,196,0,240,0,0,0,0,0,204,0,64,0,247,0,220,0,0,0,0,0,51,0,237,0,212,0,163,0,162,0,239,0,219,0,0,0,15,0,115,0,90,0,125,0,239,0,235,0,0,0,241,0,0,0,0,0,166,0,0,0,120,0,0,0,0,0,100,0,228,0,41,0,0,0,208,0,140,0,0,0,31,0,0,0,188,0,197,0,0,0,5,0,19,0,142,0,86,0,56,0,6,0,196,0,0,0,238,0,103,0,0,0,73,0,56,0,0,0,241,0,0,0,73,0,0,0,0,0,113,0,94,0,0,0,13,0,0,0,209,0,126,0,105,0,0,0,0,0,0,0,55,0,38,0,252,0,126,0,0,0,63,0,41,0,0,0,131,0,180,0,36,0,15,0,198,0,104,0,0,0,146,0,125,0,0,0,55,0,116,0,224,0,170,0,9,0,60,0,89,0,166,0,0,0,237,0,0,0,137,0,29,0,0,0,145,0,22,0,83,0,0,0,220,0,106,0,200,0,142,0,112,0,74,0,0,0,94,0,87,0,0,0,0,0,0,0,0,0,68,0,141,0,3,0,123,0,210,0,67,0,217,0,0,0,232,0,246,0,69,0,57,0,0,0,219,0,239,0,94,0,197,0,126,0,121,0,0,0,107,0,234,0,30,0,197,0,0,0,209,0,0,0,192,0,146,0,247,0,123,0,234,0,228,0,115,0,4,0,99,0,53,0,197,0,240,0,37,0,110,0,39,0,118,0,111,0,206,0,99,0,179,0,189,0,0,0,64,0,120,0,160,0,50,0,129,0,70,0,104,0,57,0,136,0,127,0,25,0,5,0,85,0,218,0,179,0,0,0,0,0,0,0,187,0,186,0,245,0,42,0,57,0,120,0,101,0,0,0,0,0,0,0,0,0,142,0,234,0,0,0,129,0,228,0,18,0,0,0,0,0,119,0,0,0,22,0,188,0,80,0,66,0,61,0,0,0,111,0,33,0,174,0,26,0,84,0,0,0,75,0,7,0,158,0,204,0,97,0,172,0,153,0,129,0,252,0,204,0,204,0,191,0,196,0,28,0,229,0,0,0,0,0,243,0,0,0,0,0,0,0,202,0,0,0,64,0,143,0,0,0,32,0,56,0,135,0,57,0,0,0,0,0,207,0,243,0,5,0,69,0,124,0,69,0,0,0,37,0,106,0,215,0,125,0,167,0,157,0,0,0,173,0,116,0,0,0,83,0,0,0,36,0,0,0,234,0,130,0,162,0,135,0,0,0,79,0,85,0,82,0,180,0,149,0,153,0,228,0,224,0,0,0,109,0,103,0,0,0,181,0,146,0,189,0,5,0,193,0,140,0,214,0,80,0,135,0,22,0,0,0,2,0,96,0,189,0,126,0,171,0,49,0,207,0,0,0,42,0,85,0,130,0,170,0,90,0,253,0,176,0,191,0,0,0,98,0,51,0,0,0,157,0,208,0,57,0,93,0,0,0,0,0,0,0,16,0,39,0,146,0,47,0,134,0,157,0,22,0,163,0,126,0,135,0,254,0,216,0,59,0,0,0,146,0,145,0,0,0,95,0,229,0,147,0,13,0,222,0,137,0,84,0,75,0,160,0,242,0,0,0,74,0,40,0,111,0,78,0,103,0,131,0,232,0,61,0,0,0,90,0,252,0,178,0,242,0,224,0,0,0,128,0,241,0,83,0,121,0,32,0,0,0,195,0,225,0,0,0,0,0,10,0,147,0,239,0,138,0,232,0,0,0,247,0,144,0,0,0,0,0,3,0,0,0,41,0,34,0,0,0,172,0,205,0,84,0);
signal scenario_full  : scenario_type := (0,0,204,31,93,31,82,31,189,31,145,31,145,30,24,31,226,31,173,31,197,31,194,31,54,31,247,31,21,31,21,30,173,31,125,31,125,30,82,31,161,31,199,31,35,31,247,31,247,30,181,31,58,31,37,31,37,30,151,31,151,30,134,31,134,30,6,31,67,31,50,31,139,31,255,31,255,30,173,31,226,31,226,30,120,31,150,31,150,30,145,31,145,30,66,31,184,31,19,31,57,31,172,31,227,31,53,31,214,31,214,30,190,31,34,31,34,30,34,29,34,28,138,31,180,31,38,31,237,31,237,30,237,29,34,31,28,31,174,31,174,30,123,31,51,31,51,30,78,31,34,31,70,31,70,30,237,31,87,31,72,31,90,31,77,31,139,31,230,31,230,30,252,31,126,31,107,31,107,30,32,31,70,31,34,31,27,31,156,31,148,31,8,31,93,31,208,31,57,31,60,31,43,31,43,30,88,31,71,31,71,30,152,31,8,31,107,31,251,31,251,30,107,31,107,30,72,31,118,31,211,31,211,30,211,29,201,31,80,31,76,31,161,31,26,31,26,30,178,31,182,31,253,31,40,31,30,31,16,31,72,31,72,30,72,29,117,31,117,30,80,31,123,31,123,30,86,31,226,31,167,31,243,31,2,31,181,31,224,31,224,30,42,31,33,31,33,30,93,31,93,30,198,31,105,31,196,31,250,31,83,31,83,30,14,31,169,31,169,30,35,31,43,31,194,31,110,31,143,31,143,30,143,29,98,31,156,31,102,31,102,30,180,31,180,30,207,31,89,31,124,31,101,31,101,30,101,29,176,31,70,31,70,30,28,31,66,31,48,31,71,31,18,31,94,31,94,30,251,31,65,31,36,31,42,31,208,31,212,31,62,31,132,31,132,30,199,31,51,31,247,31,195,31,114,31,252,31,114,31,218,31,103,31,103,30,68,31,163,31,211,31,211,30,68,31,29,31,29,30,196,31,196,30,240,31,196,31,206,31,191,31,236,31,212,31,28,31,20,31,166,31,208,31,208,30,251,31,51,31,7,31,8,31,8,30,8,29,66,31,95,31,240,31,155,31,155,30,212,31,235,31,47,31,242,31,119,31,119,30,119,31,47,31,52,31,167,31,214,31,81,31,89,31,52,31,146,31,17,31,21,31,83,31,244,31,244,30,113,31,88,31,130,31,70,31,70,30,206,31,115,31,112,31,7,31,243,31,33,31,68,31,208,31,208,30,212,31,212,30,200,31,59,31,59,30,169,31,96,31,6,31,145,31,175,31,77,31,77,30,115,31,50,31,86,31,38,31,94,31,39,31,192,31,138,31,67,31,8,31,142,31,119,31,172,31,172,30,172,29,220,31,12,31,12,30,152,31,152,30,144,31,55,31,47,31,166,31,56,31,201,31,10,31,44,31,177,31,119,31,3,31,254,31,210,31,120,31,236,31,236,30,12,31,56,31,69,31,69,30,60,31,74,31,103,31,46,31,108,31,58,31,204,31,204,30,115,31,185,31,123,31,123,30,207,31,207,30,92,31,96,31,96,30,81,31,49,31,24,31,24,30,142,31,142,30,75,31,75,30,161,31,118,31,2,31,53,31,162,31,224,31,224,30,224,29,202,31,41,31,41,30,152,31,152,30,9,31,146,31,148,31,120,31,117,31,133,31,133,30,60,31,60,30,221,31,202,31,174,31,210,31,40,31,194,31,128,31,128,30,241,31,52,31,223,31,185,31,180,31,252,31,15,31,42,31,230,31,230,30,204,31,122,31,53,31,129,31,153,31,153,30,154,31,198,31,198,30,198,29,36,31,107,31,206,31,58,31,58,30,22,31,22,30,31,31,161,31,22,31,175,31,43,31,106,31,208,31,208,30,88,31,116,31,69,31,89,31,25,31,6,31,131,31,15,31,105,31,84,31,54,31,227,31,35,31,19,31,19,30,250,31,226,31,178,31,163,31,19,31,230,31,130,31,129,31,129,30,186,31,39,31,105,31,80,31,80,30,200,31,129,31,129,30,215,31,61,31,61,30,4,31,4,30,4,29,121,31,121,30,121,29,121,28,121,27,207,31,161,31,121,31,240,31,214,31,62,31,62,30,62,29,252,31,105,31,37,31,90,31,124,31,207,31,193,31,23,31,196,31,240,31,240,30,240,29,204,31,64,31,247,31,220,31,220,30,220,29,51,31,237,31,212,31,163,31,162,31,239,31,219,31,219,30,15,31,115,31,90,31,125,31,239,31,235,31,235,30,241,31,241,30,241,29,166,31,166,30,120,31,120,30,120,29,100,31,228,31,41,31,41,30,208,31,140,31,140,30,31,31,31,30,188,31,197,31,197,30,5,31,19,31,142,31,86,31,56,31,6,31,196,31,196,30,238,31,103,31,103,30,73,31,56,31,56,30,241,31,241,30,73,31,73,30,73,29,113,31,94,31,94,30,13,31,13,30,209,31,126,31,105,31,105,30,105,29,105,28,55,31,38,31,252,31,126,31,126,30,63,31,41,31,41,30,131,31,180,31,36,31,15,31,198,31,104,31,104,30,146,31,125,31,125,30,55,31,116,31,224,31,170,31,9,31,60,31,89,31,166,31,166,30,237,31,237,30,137,31,29,31,29,30,145,31,22,31,83,31,83,30,220,31,106,31,200,31,142,31,112,31,74,31,74,30,94,31,87,31,87,30,87,29,87,28,87,27,68,31,141,31,3,31,123,31,210,31,67,31,217,31,217,30,232,31,246,31,69,31,57,31,57,30,219,31,239,31,94,31,197,31,126,31,121,31,121,30,107,31,234,31,30,31,197,31,197,30,209,31,209,30,192,31,146,31,247,31,123,31,234,31,228,31,115,31,4,31,99,31,53,31,197,31,240,31,37,31,110,31,39,31,118,31,111,31,206,31,99,31,179,31,189,31,189,30,64,31,120,31,160,31,50,31,129,31,70,31,104,31,57,31,136,31,127,31,25,31,5,31,85,31,218,31,179,31,179,30,179,29,179,28,187,31,186,31,245,31,42,31,57,31,120,31,101,31,101,30,101,29,101,28,101,27,142,31,234,31,234,30,129,31,228,31,18,31,18,30,18,29,119,31,119,30,22,31,188,31,80,31,66,31,61,31,61,30,111,31,33,31,174,31,26,31,84,31,84,30,75,31,7,31,158,31,204,31,97,31,172,31,153,31,129,31,252,31,204,31,204,31,191,31,196,31,28,31,229,31,229,30,229,29,243,31,243,30,243,29,243,28,202,31,202,30,64,31,143,31,143,30,32,31,56,31,135,31,57,31,57,30,57,29,207,31,243,31,5,31,69,31,124,31,69,31,69,30,37,31,106,31,215,31,125,31,167,31,157,31,157,30,173,31,116,31,116,30,83,31,83,30,36,31,36,30,234,31,130,31,162,31,135,31,135,30,79,31,85,31,82,31,180,31,149,31,153,31,228,31,224,31,224,30,109,31,103,31,103,30,181,31,146,31,189,31,5,31,193,31,140,31,214,31,80,31,135,31,22,31,22,30,2,31,96,31,189,31,126,31,171,31,49,31,207,31,207,30,42,31,85,31,130,31,170,31,90,31,253,31,176,31,191,31,191,30,98,31,51,31,51,30,157,31,208,31,57,31,93,31,93,30,93,29,93,28,16,31,39,31,146,31,47,31,134,31,157,31,22,31,163,31,126,31,135,31,254,31,216,31,59,31,59,30,146,31,145,31,145,30,95,31,229,31,147,31,13,31,222,31,137,31,84,31,75,31,160,31,242,31,242,30,74,31,40,31,111,31,78,31,103,31,131,31,232,31,61,31,61,30,90,31,252,31,178,31,242,31,224,31,224,30,128,31,241,31,83,31,121,31,32,31,32,30,195,31,225,31,225,30,225,29,10,31,147,31,239,31,138,31,232,31,232,30,247,31,144,31,144,30,144,29,3,31,3,30,41,31,34,31,34,30,172,31,205,31,84,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
