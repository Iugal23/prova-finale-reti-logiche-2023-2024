-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 535;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (20,0,0,0,142,0,207,0,220,0,220,0,81,0,220,0,39,0,29,0,241,0,0,0,29,0,34,0,134,0,194,0,144,0,0,0,89,0,0,0,128,0,238,0,7,0,0,0,15,0,146,0,0,0,238,0,192,0,59,0,161,0,120,0,4,0,151,0,0,0,179,0,145,0,64,0,185,0,118,0,32,0,241,0,123,0,160,0,0,0,84,0,43,0,34,0,254,0,71,0,28,0,115,0,216,0,148,0,249,0,157,0,0,0,39,0,45,0,29,0,68,0,202,0,228,0,161,0,0,0,240,0,138,0,167,0,237,0,0,0,52,0,154,0,72,0,0,0,223,0,0,0,65,0,146,0,0,0,73,0,84,0,158,0,55,0,0,0,99,0,201,0,0,0,241,0,214,0,152,0,73,0,8,0,212,0,254,0,217,0,84,0,2,0,114,0,253,0,252,0,208,0,45,0,0,0,40,0,227,0,174,0,138,0,213,0,212,0,121,0,74,0,29,0,110,0,150,0,148,0,0,0,188,0,133,0,0,0,16,0,159,0,102,0,0,0,81,0,0,0,19,0,218,0,198,0,254,0,0,0,37,0,216,0,161,0,0,0,209,0,94,0,0,0,0,0,203,0,114,0,70,0,209,0,227,0,218,0,71,0,160,0,75,0,156,0,231,0,136,0,80,0,0,0,131,0,62,0,118,0,191,0,14,0,103,0,228,0,15,0,95,0,0,0,0,0,49,0,213,0,85,0,73,0,0,0,17,0,253,0,210,0,160,0,170,0,74,0,67,0,99,0,21,0,143,0,225,0,207,0,94,0,97,0,0,0,0,0,182,0,206,0,66,0,222,0,86,0,202,0,135,0,0,0,246,0,211,0,122,0,0,0,129,0,78,0,0,0,134,0,0,0,245,0,147,0,0,0,233,0,178,0,49,0,144,0,106,0,41,0,65,0,200,0,123,0,165,0,63,0,0,0,55,0,139,0,240,0,0,0,34,0,0,0,139,0,0,0,19,0,105,0,49,0,105,0,37,0,150,0,155,0,40,0,142,0,19,0,0,0,75,0,0,0,215,0,106,0,169,0,102,0,130,0,160,0,190,0,160,0,51,0,0,0,0,0,116,0,208,0,203,0,161,0,0,0,180,0,63,0,17,0,0,0,239,0,101,0,164,0,0,0,0,0,121,0,225,0,2,0,85,0,1,0,210,0,239,0,21,0,0,0,196,0,0,0,126,0,57,0,29,0,0,0,72,0,192,0,102,0,255,0,74,0,92,0,136,0,53,0,0,0,0,0,0,0,190,0,164,0,213,0,61,0,188,0,164,0,120,0,241,0,28,0,214,0,79,0,251,0,116,0,140,0,0,0,75,0,0,0,88,0,242,0,9,0,34,0,0,0,110,0,193,0,85,0,0,0,0,0,4,0,215,0,187,0,52,0,165,0,70,0,158,0,54,0,92,0,113,0,73,0,54,0,0,0,248,0,114,0,181,0,0,0,154,0,87,0,3,0,154,0,121,0,0,0,242,0,83,0,145,0,135,0,101,0,6,0,37,0,212,0,202,0,241,0,131,0,86,0,21,0,105,0,0,0,237,0,94,0,14,0,209,0,201,0,0,0,114,0,90,0,0,0,23,0,93,0,152,0,4,0,120,0,149,0,21,0,17,0,150,0,117,0,3,0,254,0,46,0,0,0,66,0,0,0,189,0,16,0,107,0,222,0,205,0,193,0,0,0,235,0,52,0,115,0,114,0,90,0,83,0,0,0,0,0,58,0,220,0,109,0,12,0,0,0,45,0,0,0,85,0,126,0,176,0,142,0,78,0,159,0,14,0,0,0,0,0,84,0,18,0,93,0,240,0,24,0,0,0,18,0,170,0,0,0,72,0,62,0,249,0,184,0,210,0,33,0,252,0,13,0,205,0,187,0,131,0,65,0,172,0,227,0,157,0,205,0,59,0,63,0,16,0,14,0,239,0,44,0,150,0,41,0,220,0,248,0,0,0,0,0,203,0,0,0,52,0,125,0,0,0,75,0,98,0,80,0,177,0,0,0,195,0,16,0,206,0,134,0,204,0,191,0,0,0,51,0,152,0,204,0,127,0,144,0,93,0,54,0,55,0,144,0,0,0,94,0,185,0,217,0,156,0,79,0,0,0,96,0,74,0,0,0,230,0,46,0,124,0,186,0,103,0,176,0,0,0,153,0,0,0,101,0,29,0,156,0,0,0,160,0,254,0,25,0,175,0,75,0,54,0,242,0,60,0,169,0,171,0,0,0,37,0,0,0,169,0,156,0,179,0,212,0,230,0,124,0,74,0,148,0,158,0,207,0,44,0,0,0,5,0,154,0,246,0,10,0,148,0,101,0,54,0,106,0,0,0,208,0,49,0,36,0,0,0,244,0,153,0);
signal scenario_full  : scenario_type := (20,31,20,30,142,31,207,31,220,31,220,31,81,31,220,31,39,31,29,31,241,31,241,30,29,31,34,31,134,31,194,31,144,31,144,30,89,31,89,30,128,31,238,31,7,31,7,30,15,31,146,31,146,30,238,31,192,31,59,31,161,31,120,31,4,31,151,31,151,30,179,31,145,31,64,31,185,31,118,31,32,31,241,31,123,31,160,31,160,30,84,31,43,31,34,31,254,31,71,31,28,31,115,31,216,31,148,31,249,31,157,31,157,30,39,31,45,31,29,31,68,31,202,31,228,31,161,31,161,30,240,31,138,31,167,31,237,31,237,30,52,31,154,31,72,31,72,30,223,31,223,30,65,31,146,31,146,30,73,31,84,31,158,31,55,31,55,30,99,31,201,31,201,30,241,31,214,31,152,31,73,31,8,31,212,31,254,31,217,31,84,31,2,31,114,31,253,31,252,31,208,31,45,31,45,30,40,31,227,31,174,31,138,31,213,31,212,31,121,31,74,31,29,31,110,31,150,31,148,31,148,30,188,31,133,31,133,30,16,31,159,31,102,31,102,30,81,31,81,30,19,31,218,31,198,31,254,31,254,30,37,31,216,31,161,31,161,30,209,31,94,31,94,30,94,29,203,31,114,31,70,31,209,31,227,31,218,31,71,31,160,31,75,31,156,31,231,31,136,31,80,31,80,30,131,31,62,31,118,31,191,31,14,31,103,31,228,31,15,31,95,31,95,30,95,29,49,31,213,31,85,31,73,31,73,30,17,31,253,31,210,31,160,31,170,31,74,31,67,31,99,31,21,31,143,31,225,31,207,31,94,31,97,31,97,30,97,29,182,31,206,31,66,31,222,31,86,31,202,31,135,31,135,30,246,31,211,31,122,31,122,30,129,31,78,31,78,30,134,31,134,30,245,31,147,31,147,30,233,31,178,31,49,31,144,31,106,31,41,31,65,31,200,31,123,31,165,31,63,31,63,30,55,31,139,31,240,31,240,30,34,31,34,30,139,31,139,30,19,31,105,31,49,31,105,31,37,31,150,31,155,31,40,31,142,31,19,31,19,30,75,31,75,30,215,31,106,31,169,31,102,31,130,31,160,31,190,31,160,31,51,31,51,30,51,29,116,31,208,31,203,31,161,31,161,30,180,31,63,31,17,31,17,30,239,31,101,31,164,31,164,30,164,29,121,31,225,31,2,31,85,31,1,31,210,31,239,31,21,31,21,30,196,31,196,30,126,31,57,31,29,31,29,30,72,31,192,31,102,31,255,31,74,31,92,31,136,31,53,31,53,30,53,29,53,28,190,31,164,31,213,31,61,31,188,31,164,31,120,31,241,31,28,31,214,31,79,31,251,31,116,31,140,31,140,30,75,31,75,30,88,31,242,31,9,31,34,31,34,30,110,31,193,31,85,31,85,30,85,29,4,31,215,31,187,31,52,31,165,31,70,31,158,31,54,31,92,31,113,31,73,31,54,31,54,30,248,31,114,31,181,31,181,30,154,31,87,31,3,31,154,31,121,31,121,30,242,31,83,31,145,31,135,31,101,31,6,31,37,31,212,31,202,31,241,31,131,31,86,31,21,31,105,31,105,30,237,31,94,31,14,31,209,31,201,31,201,30,114,31,90,31,90,30,23,31,93,31,152,31,4,31,120,31,149,31,21,31,17,31,150,31,117,31,3,31,254,31,46,31,46,30,66,31,66,30,189,31,16,31,107,31,222,31,205,31,193,31,193,30,235,31,52,31,115,31,114,31,90,31,83,31,83,30,83,29,58,31,220,31,109,31,12,31,12,30,45,31,45,30,85,31,126,31,176,31,142,31,78,31,159,31,14,31,14,30,14,29,84,31,18,31,93,31,240,31,24,31,24,30,18,31,170,31,170,30,72,31,62,31,249,31,184,31,210,31,33,31,252,31,13,31,205,31,187,31,131,31,65,31,172,31,227,31,157,31,205,31,59,31,63,31,16,31,14,31,239,31,44,31,150,31,41,31,220,31,248,31,248,30,248,29,203,31,203,30,52,31,125,31,125,30,75,31,98,31,80,31,177,31,177,30,195,31,16,31,206,31,134,31,204,31,191,31,191,30,51,31,152,31,204,31,127,31,144,31,93,31,54,31,55,31,144,31,144,30,94,31,185,31,217,31,156,31,79,31,79,30,96,31,74,31,74,30,230,31,46,31,124,31,186,31,103,31,176,31,176,30,153,31,153,30,101,31,29,31,156,31,156,30,160,31,254,31,25,31,175,31,75,31,54,31,242,31,60,31,169,31,171,31,171,30,37,31,37,30,169,31,156,31,179,31,212,31,230,31,124,31,74,31,148,31,158,31,207,31,44,31,44,30,5,31,154,31,246,31,10,31,148,31,101,31,54,31,106,31,106,30,208,31,49,31,36,31,36,30,244,31,153,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
