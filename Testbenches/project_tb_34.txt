-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 864;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (129,0,231,0,0,0,77,0,38,0,0,0,162,0,0,0,215,0,0,0,89,0,148,0,12,0,148,0,58,0,70,0,161,0,66,0,0,0,147,0,100,0,0,0,48,0,0,0,0,0,99,0,85,0,186,0,117,0,0,0,98,0,206,0,19,0,71,0,167,0,94,0,0,0,95,0,150,0,174,0,151,0,51,0,4,0,0,0,133,0,175,0,69,0,0,0,0,0,205,0,213,0,174,0,250,0,36,0,87,0,247,0,0,0,0,0,112,0,108,0,30,0,205,0,150,0,236,0,0,0,0,0,69,0,252,0,35,0,129,0,252,0,251,0,0,0,41,0,181,0,0,0,0,0,194,0,0,0,148,0,0,0,223,0,206,0,188,0,177,0,72,0,250,0,50,0,36,0,232,0,47,0,103,0,53,0,154,0,124,0,55,0,14,0,108,0,228,0,239,0,87,0,78,0,0,0,221,0,0,0,55,0,84,0,169,0,0,0,63,0,219,0,75,0,0,0,72,0,179,0,99,0,118,0,24,0,7,0,83,0,69,0,5,0,213,0,0,0,0,0,216,0,237,0,163,0,186,0,233,0,0,0,0,0,233,0,11,0,82,0,29,0,218,0,222,0,202,0,178,0,248,0,89,0,177,0,210,0,186,0,179,0,87,0,253,0,65,0,238,0,235,0,0,0,239,0,0,0,2,0,67,0,0,0,8,0,183,0,147,0,82,0,0,0,99,0,37,0,129,0,38,0,86,0,133,0,0,0,0,0,89,0,234,0,1,0,210,0,0,0,71,0,184,0,42,0,194,0,167,0,217,0,83,0,165,0,0,0,243,0,131,0,180,0,0,0,185,0,163,0,99,0,141,0,20,0,215,0,133,0,170,0,74,0,46,0,69,0,190,0,89,0,193,0,117,0,28,0,0,0,168,0,192,0,0,0,232,0,0,0,230,0,88,0,185,0,70,0,0,0,0,0,5,0,0,0,100,0,243,0,32,0,66,0,111,0,195,0,40,0,29,0,0,0,206,0,0,0,0,0,250,0,131,0,213,0,81,0,24,0,1,0,213,0,240,0,0,0,130,0,0,0,2,0,36,0,124,0,65,0,0,0,220,0,29,0,242,0,84,0,32,0,123,0,185,0,25,0,177,0,185,0,159,0,101,0,102,0,0,0,187,0,242,0,9,0,196,0,43,0,120,0,196,0,230,0,106,0,38,0,117,0,179,0,37,0,220,0,169,0,218,0,199,0,122,0,16,0,104,0,51,0,2,0,234,0,22,0,89,0,24,0,68,0,250,0,148,0,147,0,5,0,185,0,3,0,101,0,78,0,57,0,148,0,156,0,136,0,0,0,93,0,122,0,0,0,90,0,185,0,78,0,46,0,184,0,0,0,79,0,0,0,0,0,70,0,232,0,68,0,0,0,0,0,0,0,90,0,85,0,251,0,94,0,250,0,0,0,0,0,0,0,0,0,102,0,221,0,143,0,255,0,196,0,83,0,142,0,191,0,0,0,217,0,0,0,153,0,239,0,19,0,146,0,136,0,98,0,50,0,0,0,61,0,61,0,0,0,201,0,140,0,0,0,121,0,52,0,110,0,0,0,32,0,0,0,0,0,0,0,43,0,82,0,0,0,64,0,38,0,76,0,3,0,207,0,112,0,106,0,124,0,82,0,34,0,231,0,37,0,11,0,203,0,216,0,19,0,71,0,252,0,122,0,202,0,0,0,0,0,7,0,158,0,186,0,198,0,0,0,49,0,2,0,138,0,83,0,120,0,169,0,77,0,183,0,0,0,0,0,14,0,208,0,129,0,142,0,105,0,202,0,56,0,249,0,229,0,18,0,123,0,240,0,92,0,48,0,0,0,67,0,93,0,235,0,219,0,0,0,227,0,184,0,25,0,22,0,0,0,0,0,104,0,212,0,0,0,29,0,209,0,172,0,0,0,239,0,139,0,7,0,232,0,162,0,192,0,0,0,140,0,103,0,0,0,231,0,29,0,134,0,198,0,208,0,86,0,210,0,32,0,0,0,162,0,211,0,161,0,229,0,11,0,106,0,0,0,117,0,29,0,254,0,83,0,0,0,74,0,61,0,0,0,0,0,241,0,126,0,202,0,76,0,69,0,0,0,9,0,206,0,217,0,174,0,0,0,9,0,248,0,152,0,160,0,218,0,115,0,200,0,237,0,133,0,146,0,124,0,92,0,128,0,0,0,251,0,215,0,19,0,1,0,119,0,164,0,209,0,48,0,0,0,205,0,69,0,129,0,252,0,0,0,0,0,47,0,0,0,115,0,0,0,255,0,57,0,0,0,57,0,121,0,102,0,154,0,110,0,244,0,201,0,117,0,216,0,0,0,62,0,185,0,172,0,68,0,74,0,165,0,30,0,56,0,0,0,15,0,190,0,5,0,224,0,199,0,2,0,82,0,143,0,231,0,10,0,40,0,159,0,218,0,83,0,7,0,121,0,189,0,0,0,172,0,156,0,37,0,0,0,54,0,196,0,161,0,0,0,210,0,45,0,122,0,85,0,103,0,220,0,148,0,182,0,123,0,103,0,0,0,0,0,251,0,160,0,90,0,166,0,61,0,252,0,168,0,31,0,12,0,227,0,39,0,25,0,40,0,88,0,221,0,0,0,250,0,12,0,88,0,135,0,163,0,0,0,0,0,21,0,141,0,0,0,1,0,23,0,0,0,0,0,46,0,79,0,86,0,143,0,51,0,35,0,237,0,3,0,0,0,30,0,174,0,129,0,131,0,220,0,0,0,98,0,0,0,176,0,244,0,57,0,48,0,203,0,116,0,95,0,133,0,84,0,221,0,22,0,106,0,1,0,18,0,186,0,182,0,0,0,120,0,219,0,123,0,230,0,233,0,57,0,150,0,155,0,81,0,0,0,226,0,253,0,103,0,167,0,215,0,132,0,195,0,0,0,24,0,255,0,70,0,104,0,0,0,237,0,0,0,158,0,0,0,0,0,106,0,0,0,18,0,136,0,30,0,147,0,156,0,169,0,138,0,221,0,159,0,178,0,0,0,60,0,0,0,231,0,75,0,0,0,101,0,0,0,52,0,12,0,25,0,139,0,10,0,186,0,147,0,63,0,112,0,51,0,73,0,183,0,45,0,236,0,0,0,202,0,4,0,46,0,183,0,106,0,0,0,6,0,19,0,194,0,0,0,217,0,0,0,81,0,0,0,76,0,62,0,111,0,0,0,233,0,171,0,0,0,4,0,98,0,174,0,0,0,60,0,254,0,0,0,187,0,121,0,180,0,0,0,0,0,217,0,66,0,93,0,117,0,221,0,152,0,142,0,129,0,94,0,0,0,248,0,0,0,155,0,16,0,99,0,232,0,0,0,188,0,220,0,237,0,26,0,147,0,207,0,31,0,172,0,179,0,83,0,0,0,195,0,221,0,109,0,129,0,205,0,107,0,168,0,169,0,253,0,174,0,0,0,102,0,64,0,144,0,250,0,143,0,203,0,240,0,0,0,85,0,205,0,226,0,44,0,190,0,134,0,78,0,78,0,145,0,84,0,244,0,0,0,0,0,29,0,148,0,107,0,228,0,251,0,11,0,18,0,95,0,0,0,0,0,69,0,76,0,66,0,239,0,236,0,18,0,226,0,253,0,0,0,35,0,21,0,134,0,80,0,203,0,4,0,2,0,139,0,229,0,0,0,249,0,251,0,56,0,198,0,233,0,242,0,159,0,146,0,0,0,191,0,193,0,215,0,30,0,0,0,124,0,66,0,222,0,204,0,215,0,204,0,28,0,68,0,234,0,28,0,0,0,94,0,103,0,26,0,125,0,50,0,0,0,182,0,238,0,184,0,129,0,193,0,197,0,77,0,46,0,213,0,232,0,208,0,133,0);
signal scenario_full  : scenario_type := (129,31,231,31,231,30,77,31,38,31,38,30,162,31,162,30,215,31,215,30,89,31,148,31,12,31,148,31,58,31,70,31,161,31,66,31,66,30,147,31,100,31,100,30,48,31,48,30,48,29,99,31,85,31,186,31,117,31,117,30,98,31,206,31,19,31,71,31,167,31,94,31,94,30,95,31,150,31,174,31,151,31,51,31,4,31,4,30,133,31,175,31,69,31,69,30,69,29,205,31,213,31,174,31,250,31,36,31,87,31,247,31,247,30,247,29,112,31,108,31,30,31,205,31,150,31,236,31,236,30,236,29,69,31,252,31,35,31,129,31,252,31,251,31,251,30,41,31,181,31,181,30,181,29,194,31,194,30,148,31,148,30,223,31,206,31,188,31,177,31,72,31,250,31,50,31,36,31,232,31,47,31,103,31,53,31,154,31,124,31,55,31,14,31,108,31,228,31,239,31,87,31,78,31,78,30,221,31,221,30,55,31,84,31,169,31,169,30,63,31,219,31,75,31,75,30,72,31,179,31,99,31,118,31,24,31,7,31,83,31,69,31,5,31,213,31,213,30,213,29,216,31,237,31,163,31,186,31,233,31,233,30,233,29,233,31,11,31,82,31,29,31,218,31,222,31,202,31,178,31,248,31,89,31,177,31,210,31,186,31,179,31,87,31,253,31,65,31,238,31,235,31,235,30,239,31,239,30,2,31,67,31,67,30,8,31,183,31,147,31,82,31,82,30,99,31,37,31,129,31,38,31,86,31,133,31,133,30,133,29,89,31,234,31,1,31,210,31,210,30,71,31,184,31,42,31,194,31,167,31,217,31,83,31,165,31,165,30,243,31,131,31,180,31,180,30,185,31,163,31,99,31,141,31,20,31,215,31,133,31,170,31,74,31,46,31,69,31,190,31,89,31,193,31,117,31,28,31,28,30,168,31,192,31,192,30,232,31,232,30,230,31,88,31,185,31,70,31,70,30,70,29,5,31,5,30,100,31,243,31,32,31,66,31,111,31,195,31,40,31,29,31,29,30,206,31,206,30,206,29,250,31,131,31,213,31,81,31,24,31,1,31,213,31,240,31,240,30,130,31,130,30,2,31,36,31,124,31,65,31,65,30,220,31,29,31,242,31,84,31,32,31,123,31,185,31,25,31,177,31,185,31,159,31,101,31,102,31,102,30,187,31,242,31,9,31,196,31,43,31,120,31,196,31,230,31,106,31,38,31,117,31,179,31,37,31,220,31,169,31,218,31,199,31,122,31,16,31,104,31,51,31,2,31,234,31,22,31,89,31,24,31,68,31,250,31,148,31,147,31,5,31,185,31,3,31,101,31,78,31,57,31,148,31,156,31,136,31,136,30,93,31,122,31,122,30,90,31,185,31,78,31,46,31,184,31,184,30,79,31,79,30,79,29,70,31,232,31,68,31,68,30,68,29,68,28,90,31,85,31,251,31,94,31,250,31,250,30,250,29,250,28,250,27,102,31,221,31,143,31,255,31,196,31,83,31,142,31,191,31,191,30,217,31,217,30,153,31,239,31,19,31,146,31,136,31,98,31,50,31,50,30,61,31,61,31,61,30,201,31,140,31,140,30,121,31,52,31,110,31,110,30,32,31,32,30,32,29,32,28,43,31,82,31,82,30,64,31,38,31,76,31,3,31,207,31,112,31,106,31,124,31,82,31,34,31,231,31,37,31,11,31,203,31,216,31,19,31,71,31,252,31,122,31,202,31,202,30,202,29,7,31,158,31,186,31,198,31,198,30,49,31,2,31,138,31,83,31,120,31,169,31,77,31,183,31,183,30,183,29,14,31,208,31,129,31,142,31,105,31,202,31,56,31,249,31,229,31,18,31,123,31,240,31,92,31,48,31,48,30,67,31,93,31,235,31,219,31,219,30,227,31,184,31,25,31,22,31,22,30,22,29,104,31,212,31,212,30,29,31,209,31,172,31,172,30,239,31,139,31,7,31,232,31,162,31,192,31,192,30,140,31,103,31,103,30,231,31,29,31,134,31,198,31,208,31,86,31,210,31,32,31,32,30,162,31,211,31,161,31,229,31,11,31,106,31,106,30,117,31,29,31,254,31,83,31,83,30,74,31,61,31,61,30,61,29,241,31,126,31,202,31,76,31,69,31,69,30,9,31,206,31,217,31,174,31,174,30,9,31,248,31,152,31,160,31,218,31,115,31,200,31,237,31,133,31,146,31,124,31,92,31,128,31,128,30,251,31,215,31,19,31,1,31,119,31,164,31,209,31,48,31,48,30,205,31,69,31,129,31,252,31,252,30,252,29,47,31,47,30,115,31,115,30,255,31,57,31,57,30,57,31,121,31,102,31,154,31,110,31,244,31,201,31,117,31,216,31,216,30,62,31,185,31,172,31,68,31,74,31,165,31,30,31,56,31,56,30,15,31,190,31,5,31,224,31,199,31,2,31,82,31,143,31,231,31,10,31,40,31,159,31,218,31,83,31,7,31,121,31,189,31,189,30,172,31,156,31,37,31,37,30,54,31,196,31,161,31,161,30,210,31,45,31,122,31,85,31,103,31,220,31,148,31,182,31,123,31,103,31,103,30,103,29,251,31,160,31,90,31,166,31,61,31,252,31,168,31,31,31,12,31,227,31,39,31,25,31,40,31,88,31,221,31,221,30,250,31,12,31,88,31,135,31,163,31,163,30,163,29,21,31,141,31,141,30,1,31,23,31,23,30,23,29,46,31,79,31,86,31,143,31,51,31,35,31,237,31,3,31,3,30,30,31,174,31,129,31,131,31,220,31,220,30,98,31,98,30,176,31,244,31,57,31,48,31,203,31,116,31,95,31,133,31,84,31,221,31,22,31,106,31,1,31,18,31,186,31,182,31,182,30,120,31,219,31,123,31,230,31,233,31,57,31,150,31,155,31,81,31,81,30,226,31,253,31,103,31,167,31,215,31,132,31,195,31,195,30,24,31,255,31,70,31,104,31,104,30,237,31,237,30,158,31,158,30,158,29,106,31,106,30,18,31,136,31,30,31,147,31,156,31,169,31,138,31,221,31,159,31,178,31,178,30,60,31,60,30,231,31,75,31,75,30,101,31,101,30,52,31,12,31,25,31,139,31,10,31,186,31,147,31,63,31,112,31,51,31,73,31,183,31,45,31,236,31,236,30,202,31,4,31,46,31,183,31,106,31,106,30,6,31,19,31,194,31,194,30,217,31,217,30,81,31,81,30,76,31,62,31,111,31,111,30,233,31,171,31,171,30,4,31,98,31,174,31,174,30,60,31,254,31,254,30,187,31,121,31,180,31,180,30,180,29,217,31,66,31,93,31,117,31,221,31,152,31,142,31,129,31,94,31,94,30,248,31,248,30,155,31,16,31,99,31,232,31,232,30,188,31,220,31,237,31,26,31,147,31,207,31,31,31,172,31,179,31,83,31,83,30,195,31,221,31,109,31,129,31,205,31,107,31,168,31,169,31,253,31,174,31,174,30,102,31,64,31,144,31,250,31,143,31,203,31,240,31,240,30,85,31,205,31,226,31,44,31,190,31,134,31,78,31,78,31,145,31,84,31,244,31,244,30,244,29,29,31,148,31,107,31,228,31,251,31,11,31,18,31,95,31,95,30,95,29,69,31,76,31,66,31,239,31,236,31,18,31,226,31,253,31,253,30,35,31,21,31,134,31,80,31,203,31,4,31,2,31,139,31,229,31,229,30,249,31,251,31,56,31,198,31,233,31,242,31,159,31,146,31,146,30,191,31,193,31,215,31,30,31,30,30,124,31,66,31,222,31,204,31,215,31,204,31,28,31,68,31,234,31,28,31,28,30,94,31,103,31,26,31,125,31,50,31,50,30,182,31,238,31,184,31,129,31,193,31,197,31,77,31,46,31,213,31,232,31,208,31,133,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
