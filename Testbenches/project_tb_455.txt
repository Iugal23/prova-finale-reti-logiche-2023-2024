-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 358;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (124,0,85,0,93,0,42,0,175,0,56,0,181,0,86,0,7,0,130,0,66,0,241,0,207,0,125,0,249,0,0,0,117,0,252,0,116,0,57,0,230,0,42,0,7,0,93,0,212,0,150,0,231,0,0,0,82,0,251,0,217,0,0,0,25,0,0,0,0,0,56,0,39,0,156,0,179,0,105,0,189,0,166,0,21,0,136,0,242,0,139,0,220,0,40,0,161,0,181,0,137,0,45,0,4,0,4,0,202,0,144,0,38,0,152,0,36,0,0,0,56,0,78,0,133,0,198,0,14,0,0,0,61,0,137,0,211,0,239,0,226,0,79,0,122,0,0,0,0,0,71,0,217,0,103,0,0,0,0,0,110,0,0,0,0,0,0,0,181,0,230,0,25,0,79,0,218,0,93,0,103,0,186,0,181,0,244,0,175,0,209,0,140,0,124,0,119,0,102,0,191,0,0,0,50,0,195,0,74,0,229,0,231,0,75,0,0,0,1,0,226,0,0,0,233,0,94,0,227,0,163,0,17,0,53,0,135,0,54,0,187,0,137,0,0,0,41,0,128,0,22,0,136,0,98,0,0,0,49,0,149,0,58,0,129,0,72,0,145,0,0,0,9,0,117,0,166,0,160,0,0,0,0,0,31,0,0,0,154,0,49,0,195,0,0,0,2,0,100,0,67,0,14,0,0,0,237,0,99,0,0,0,35,0,45,0,0,0,209,0,0,0,62,0,90,0,0,0,6,0,0,0,0,0,153,0,87,0,100,0,23,0,132,0,76,0,247,0,131,0,35,0,0,0,0,0,36,0,230,0,69,0,68,0,79,0,52,0,145,0,201,0,19,0,91,0,122,0,11,0,52,0,0,0,0,0,159,0,245,0,73,0,244,0,0,0,0,0,144,0,60,0,227,0,98,0,139,0,218,0,91,0,30,0,34,0,0,0,0,0,0,0,127,0,163,0,185,0,0,0,211,0,4,0,41,0,194,0,12,0,0,0,0,0,254,0,0,0,216,0,71,0,201,0,0,0,216,0,0,0,0,0,90,0,194,0,56,0,66,0,185,0,0,0,246,0,76,0,0,0,0,0,0,0,25,0,0,0,235,0,109,0,59,0,243,0,0,0,0,0,199,0,25,0,0,0,171,0,226,0,90,0,240,0,85,0,0,0,38,0,97,0,0,0,72,0,99,0,112,0,0,0,0,0,196,0,83,0,0,0,0,0,249,0,0,0,147,0,157,0,69,0,172,0,67,0,37,0,143,0,0,0,164,0,0,0,69,0,159,0,0,0,78,0,34,0,121,0,0,0,153,0,121,0,0,0,184,0,149,0,22,0,236,0,0,0,0,0,217,0,239,0,7,0,85,0,195,0,121,0,64,0,0,0,0,0,200,0,252,0,83,0,159,0,254,0,216,0,30,0,4,0,132,0,26,0,147,0,151,0,55,0,226,0,224,0,0,0,213,0,97,0,44,0,139,0,51,0,120,0,136,0,21,0,29,0,185,0,22,0,77,0,186,0,220,0,135,0,232,0,185,0,233,0,24,0,0,0,227,0,111,0,40,0,68,0,80,0,42,0,75,0,124,0,0,0,98,0,0,0,180,0,97,0,65,0);
signal scenario_full  : scenario_type := (124,31,85,31,93,31,42,31,175,31,56,31,181,31,86,31,7,31,130,31,66,31,241,31,207,31,125,31,249,31,249,30,117,31,252,31,116,31,57,31,230,31,42,31,7,31,93,31,212,31,150,31,231,31,231,30,82,31,251,31,217,31,217,30,25,31,25,30,25,29,56,31,39,31,156,31,179,31,105,31,189,31,166,31,21,31,136,31,242,31,139,31,220,31,40,31,161,31,181,31,137,31,45,31,4,31,4,31,202,31,144,31,38,31,152,31,36,31,36,30,56,31,78,31,133,31,198,31,14,31,14,30,61,31,137,31,211,31,239,31,226,31,79,31,122,31,122,30,122,29,71,31,217,31,103,31,103,30,103,29,110,31,110,30,110,29,110,28,181,31,230,31,25,31,79,31,218,31,93,31,103,31,186,31,181,31,244,31,175,31,209,31,140,31,124,31,119,31,102,31,191,31,191,30,50,31,195,31,74,31,229,31,231,31,75,31,75,30,1,31,226,31,226,30,233,31,94,31,227,31,163,31,17,31,53,31,135,31,54,31,187,31,137,31,137,30,41,31,128,31,22,31,136,31,98,31,98,30,49,31,149,31,58,31,129,31,72,31,145,31,145,30,9,31,117,31,166,31,160,31,160,30,160,29,31,31,31,30,154,31,49,31,195,31,195,30,2,31,100,31,67,31,14,31,14,30,237,31,99,31,99,30,35,31,45,31,45,30,209,31,209,30,62,31,90,31,90,30,6,31,6,30,6,29,153,31,87,31,100,31,23,31,132,31,76,31,247,31,131,31,35,31,35,30,35,29,36,31,230,31,69,31,68,31,79,31,52,31,145,31,201,31,19,31,91,31,122,31,11,31,52,31,52,30,52,29,159,31,245,31,73,31,244,31,244,30,244,29,144,31,60,31,227,31,98,31,139,31,218,31,91,31,30,31,34,31,34,30,34,29,34,28,127,31,163,31,185,31,185,30,211,31,4,31,41,31,194,31,12,31,12,30,12,29,254,31,254,30,216,31,71,31,201,31,201,30,216,31,216,30,216,29,90,31,194,31,56,31,66,31,185,31,185,30,246,31,76,31,76,30,76,29,76,28,25,31,25,30,235,31,109,31,59,31,243,31,243,30,243,29,199,31,25,31,25,30,171,31,226,31,90,31,240,31,85,31,85,30,38,31,97,31,97,30,72,31,99,31,112,31,112,30,112,29,196,31,83,31,83,30,83,29,249,31,249,30,147,31,157,31,69,31,172,31,67,31,37,31,143,31,143,30,164,31,164,30,69,31,159,31,159,30,78,31,34,31,121,31,121,30,153,31,121,31,121,30,184,31,149,31,22,31,236,31,236,30,236,29,217,31,239,31,7,31,85,31,195,31,121,31,64,31,64,30,64,29,200,31,252,31,83,31,159,31,254,31,216,31,30,31,4,31,132,31,26,31,147,31,151,31,55,31,226,31,224,31,224,30,213,31,97,31,44,31,139,31,51,31,120,31,136,31,21,31,29,31,185,31,22,31,77,31,186,31,220,31,135,31,232,31,185,31,233,31,24,31,24,30,227,31,111,31,40,31,68,31,80,31,42,31,75,31,124,31,124,30,98,31,98,30,180,31,97,31,65,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
