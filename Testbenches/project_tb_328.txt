-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 153;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (53,0,53,0,0,0,177,0,178,0,0,0,67,0,126,0,73,0,83,0,24,0,0,0,0,0,103,0,186,0,136,0,245,0,0,0,0,0,58,0,247,0,62,0,124,0,39,0,41,0,10,0,130,0,218,0,2,0,0,0,31,0,59,0,142,0,237,0,149,0,188,0,73,0,44,0,132,0,150,0,58,0,44,0,138,0,52,0,129,0,0,0,173,0,0,0,25,0,224,0,228,0,38,0,178,0,0,0,0,0,14,0,182,0,139,0,148,0,168,0,31,0,86,0,176,0,92,0,206,0,17,0,245,0,118,0,0,0,179,0,245,0,115,0,0,0,9,0,0,0,109,0,0,0,107,0,156,0,0,0,213,0,14,0,211,0,232,0,53,0,255,0,83,0,73,0,25,0,122,0,84,0,122,0,0,0,77,0,219,0,82,0,183,0,167,0,44,0,0,0,116,0,71,0,63,0,209,0,0,0,8,0,0,0,57,0,34,0,64,0,97,0,33,0,252,0,14,0,0,0,0,0,129,0,39,0,164,0,95,0,31,0,48,0,35,0,163,0,0,0,24,0,124,0,240,0,0,0,222,0,96,0,68,0,30,0,51,0,206,0,188,0,247,0,68,0,26,0,84,0,0,0,52,0,196,0,14,0,138,0,123,0,35,0,83,0,115,0,0,0,0,0,120,0,0,0);
signal scenario_full  : scenario_type := (53,31,53,31,53,30,177,31,178,31,178,30,67,31,126,31,73,31,83,31,24,31,24,30,24,29,103,31,186,31,136,31,245,31,245,30,245,29,58,31,247,31,62,31,124,31,39,31,41,31,10,31,130,31,218,31,2,31,2,30,31,31,59,31,142,31,237,31,149,31,188,31,73,31,44,31,132,31,150,31,58,31,44,31,138,31,52,31,129,31,129,30,173,31,173,30,25,31,224,31,228,31,38,31,178,31,178,30,178,29,14,31,182,31,139,31,148,31,168,31,31,31,86,31,176,31,92,31,206,31,17,31,245,31,118,31,118,30,179,31,245,31,115,31,115,30,9,31,9,30,109,31,109,30,107,31,156,31,156,30,213,31,14,31,211,31,232,31,53,31,255,31,83,31,73,31,25,31,122,31,84,31,122,31,122,30,77,31,219,31,82,31,183,31,167,31,44,31,44,30,116,31,71,31,63,31,209,31,209,30,8,31,8,30,57,31,34,31,64,31,97,31,33,31,252,31,14,31,14,30,14,29,129,31,39,31,164,31,95,31,31,31,48,31,35,31,163,31,163,30,24,31,124,31,240,31,240,30,222,31,96,31,68,31,30,31,51,31,206,31,188,31,247,31,68,31,26,31,84,31,84,30,52,31,196,31,14,31,138,31,123,31,35,31,83,31,115,31,115,30,115,29,120,31,120,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
