-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 613;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (239,0,229,0,254,0,142,0,131,0,124,0,0,0,27,0,195,0,139,0,168,0,185,0,9,0,0,0,0,0,141,0,89,0,0,0,73,0,216,0,103,0,38,0,73,0,177,0,136,0,0,0,214,0,107,0,1,0,205,0,196,0,13,0,137,0,54,0,0,0,213,0,145,0,20,0,0,0,12,0,156,0,158,0,140,0,0,0,242,0,78,0,176,0,68,0,139,0,214,0,194,0,158,0,124,0,139,0,0,0,0,0,176,0,207,0,167,0,249,0,183,0,0,0,0,0,241,0,214,0,203,0,67,0,197,0,142,0,52,0,79,0,173,0,0,0,9,0,92,0,176,0,255,0,36,0,207,0,37,0,47,0,104,0,35,0,38,0,0,0,187,0,167,0,0,0,26,0,192,0,221,0,66,0,0,0,0,0,83,0,175,0,0,0,68,0,2,0,173,0,76,0,147,0,9,0,90,0,5,0,34,0,89,0,0,0,225,0,180,0,21,0,76,0,125,0,0,0,126,0,0,0,197,0,0,0,209,0,241,0,167,0,13,0,0,0,130,0,181,0,220,0,114,0,77,0,159,0,77,0,9,0,183,0,119,0,138,0,186,0,176,0,94,0,129,0,104,0,66,0,0,0,0,0,0,0,11,0,0,0,187,0,0,0,112,0,129,0,172,0,0,0,0,0,250,0,117,0,60,0,235,0,225,0,32,0,0,0,63,0,97,0,155,0,120,0,0,0,68,0,90,0,209,0,192,0,0,0,0,0,242,0,215,0,164,0,24,0,0,0,0,0,60,0,186,0,231,0,117,0,151,0,133,0,105,0,98,0,216,0,17,0,187,0,0,0,0,0,0,0,147,0,247,0,138,0,0,0,0,0,76,0,72,0,11,0,39,0,0,0,83,0,111,0,0,0,75,0,203,0,39,0,197,0,232,0,189,0,173,0,99,0,0,0,5,0,0,0,0,0,5,0,241,0,124,0,0,0,70,0,18,0,0,0,127,0,0,0,239,0,72,0,194,0,18,0,189,0,33,0,172,0,0,0,170,0,99,0,164,0,35,0,27,0,0,0,250,0,19,0,212,0,134,0,152,0,226,0,30,0,124,0,122,0,148,0,173,0,0,0,134,0,225,0,196,0,173,0,140,0,45,0,159,0,84,0,44,0,253,0,151,0,64,0,191,0,188,0,0,0,0,0,183,0,67,0,107,0,35,0,213,0,112,0,215,0,83,0,149,0,250,0,100,0,119,0,31,0,9,0,19,0,242,0,0,0,176,0,33,0,213,0,132,0,166,0,186,0,198,0,220,0,164,0,166,0,221,0,94,0,137,0,218,0,21,0,238,0,217,0,20,0,253,0,0,0,155,0,162,0,211,0,0,0,0,0,75,0,169,0,0,0,0,0,247,0,36,0,230,0,224,0,73,0,0,0,126,0,153,0,59,0,230,0,249,0,0,0,94,0,124,0,218,0,0,0,243,0,114,0,89,0,37,0,150,0,111,0,138,0,134,0,72,0,0,0,174,0,97,0,201,0,0,0,0,0,198,0,142,0,132,0,0,0,106,0,60,0,0,0,19,0,220,0,109,0,158,0,0,0,213,0,0,0,0,0,157,0,12,0,186,0,0,0,106,0,5,0,0,0,175,0,57,0,253,0,95,0,12,0,139,0,159,0,127,0,53,0,118,0,0,0,181,0,0,0,217,0,173,0,16,0,0,0,165,0,0,0,0,0,238,0,232,0,137,0,173,0,96,0,244,0,179,0,52,0,39,0,127,0,12,0,223,0,191,0,0,0,0,0,0,0,0,0,220,0,0,0,0,0,29,0,171,0,0,0,53,0,207,0,224,0,235,0,69,0,0,0,0,0,69,0,65,0,0,0,253,0,139,0,0,0,0,0,115,0,241,0,68,0,127,0,28,0,125,0,235,0,161,0,55,0,165,0,63,0,230,0,97,0,249,0,222,0,65,0,173,0,34,0,7,0,145,0,162,0,147,0,195,0,219,0,87,0,0,0,88,0,240,0,0,0,248,0,84,0,129,0,0,0,140,0,222,0,240,0,53,0,250,0,43,0,101,0,210,0,88,0,182,0,0,0,94,0,0,0,135,0,222,0,0,0,202,0,150,0,26,0,235,0,240,0,162,0,120,0,228,0,230,0,19,0,25,0,0,0,87,0,207,0,104,0,45,0,0,0,189,0,0,0,32,0,77,0,0,0,189,0,11,0,154,0,0,0,144,0,228,0,185,0,24,0,56,0,230,0,167,0,136,0,231,0,28,0,93,0,197,0,195,0,98,0,240,0,45,0,0,0,254,0,149,0,98,0,0,0,29,0,5,0,80,0,157,0,62,0,54,0,8,0,0,0,153,0,97,0,150,0,59,0,169,0,0,0,121,0,110,0,117,0,246,0,0,0,244,0,131,0,88,0,0,0,147,0,11,0,0,0,132,0,45,0,0,0,160,0,127,0,240,0,121,0,0,0,0,0,139,0,0,0,98,0,173,0,19,0,158,0,39,0,19,0,234,0,8,0,251,0,82,0,147,0,0,0,158,0,13,0,0,0,0,0,174,0,119,0,139,0,60,0,111,0,157,0,32,0,0,0,194,0,0,0,174,0,170,0,98,0,0,0,123,0,227,0,128,0,102,0,184,0,0,0,30,0,0,0,204,0,223,0,56,0,0,0,82,0,0,0,58,0,199,0,0,0,254,0,53,0,0,0,144,0,22,0,36,0,168,0,0,0,0,0,23,0,102,0);
signal scenario_full  : scenario_type := (239,31,229,31,254,31,142,31,131,31,124,31,124,30,27,31,195,31,139,31,168,31,185,31,9,31,9,30,9,29,141,31,89,31,89,30,73,31,216,31,103,31,38,31,73,31,177,31,136,31,136,30,214,31,107,31,1,31,205,31,196,31,13,31,137,31,54,31,54,30,213,31,145,31,20,31,20,30,12,31,156,31,158,31,140,31,140,30,242,31,78,31,176,31,68,31,139,31,214,31,194,31,158,31,124,31,139,31,139,30,139,29,176,31,207,31,167,31,249,31,183,31,183,30,183,29,241,31,214,31,203,31,67,31,197,31,142,31,52,31,79,31,173,31,173,30,9,31,92,31,176,31,255,31,36,31,207,31,37,31,47,31,104,31,35,31,38,31,38,30,187,31,167,31,167,30,26,31,192,31,221,31,66,31,66,30,66,29,83,31,175,31,175,30,68,31,2,31,173,31,76,31,147,31,9,31,90,31,5,31,34,31,89,31,89,30,225,31,180,31,21,31,76,31,125,31,125,30,126,31,126,30,197,31,197,30,209,31,241,31,167,31,13,31,13,30,130,31,181,31,220,31,114,31,77,31,159,31,77,31,9,31,183,31,119,31,138,31,186,31,176,31,94,31,129,31,104,31,66,31,66,30,66,29,66,28,11,31,11,30,187,31,187,30,112,31,129,31,172,31,172,30,172,29,250,31,117,31,60,31,235,31,225,31,32,31,32,30,63,31,97,31,155,31,120,31,120,30,68,31,90,31,209,31,192,31,192,30,192,29,242,31,215,31,164,31,24,31,24,30,24,29,60,31,186,31,231,31,117,31,151,31,133,31,105,31,98,31,216,31,17,31,187,31,187,30,187,29,187,28,147,31,247,31,138,31,138,30,138,29,76,31,72,31,11,31,39,31,39,30,83,31,111,31,111,30,75,31,203,31,39,31,197,31,232,31,189,31,173,31,99,31,99,30,5,31,5,30,5,29,5,31,241,31,124,31,124,30,70,31,18,31,18,30,127,31,127,30,239,31,72,31,194,31,18,31,189,31,33,31,172,31,172,30,170,31,99,31,164,31,35,31,27,31,27,30,250,31,19,31,212,31,134,31,152,31,226,31,30,31,124,31,122,31,148,31,173,31,173,30,134,31,225,31,196,31,173,31,140,31,45,31,159,31,84,31,44,31,253,31,151,31,64,31,191,31,188,31,188,30,188,29,183,31,67,31,107,31,35,31,213,31,112,31,215,31,83,31,149,31,250,31,100,31,119,31,31,31,9,31,19,31,242,31,242,30,176,31,33,31,213,31,132,31,166,31,186,31,198,31,220,31,164,31,166,31,221,31,94,31,137,31,218,31,21,31,238,31,217,31,20,31,253,31,253,30,155,31,162,31,211,31,211,30,211,29,75,31,169,31,169,30,169,29,247,31,36,31,230,31,224,31,73,31,73,30,126,31,153,31,59,31,230,31,249,31,249,30,94,31,124,31,218,31,218,30,243,31,114,31,89,31,37,31,150,31,111,31,138,31,134,31,72,31,72,30,174,31,97,31,201,31,201,30,201,29,198,31,142,31,132,31,132,30,106,31,60,31,60,30,19,31,220,31,109,31,158,31,158,30,213,31,213,30,213,29,157,31,12,31,186,31,186,30,106,31,5,31,5,30,175,31,57,31,253,31,95,31,12,31,139,31,159,31,127,31,53,31,118,31,118,30,181,31,181,30,217,31,173,31,16,31,16,30,165,31,165,30,165,29,238,31,232,31,137,31,173,31,96,31,244,31,179,31,52,31,39,31,127,31,12,31,223,31,191,31,191,30,191,29,191,28,191,27,220,31,220,30,220,29,29,31,171,31,171,30,53,31,207,31,224,31,235,31,69,31,69,30,69,29,69,31,65,31,65,30,253,31,139,31,139,30,139,29,115,31,241,31,68,31,127,31,28,31,125,31,235,31,161,31,55,31,165,31,63,31,230,31,97,31,249,31,222,31,65,31,173,31,34,31,7,31,145,31,162,31,147,31,195,31,219,31,87,31,87,30,88,31,240,31,240,30,248,31,84,31,129,31,129,30,140,31,222,31,240,31,53,31,250,31,43,31,101,31,210,31,88,31,182,31,182,30,94,31,94,30,135,31,222,31,222,30,202,31,150,31,26,31,235,31,240,31,162,31,120,31,228,31,230,31,19,31,25,31,25,30,87,31,207,31,104,31,45,31,45,30,189,31,189,30,32,31,77,31,77,30,189,31,11,31,154,31,154,30,144,31,228,31,185,31,24,31,56,31,230,31,167,31,136,31,231,31,28,31,93,31,197,31,195,31,98,31,240,31,45,31,45,30,254,31,149,31,98,31,98,30,29,31,5,31,80,31,157,31,62,31,54,31,8,31,8,30,153,31,97,31,150,31,59,31,169,31,169,30,121,31,110,31,117,31,246,31,246,30,244,31,131,31,88,31,88,30,147,31,11,31,11,30,132,31,45,31,45,30,160,31,127,31,240,31,121,31,121,30,121,29,139,31,139,30,98,31,173,31,19,31,158,31,39,31,19,31,234,31,8,31,251,31,82,31,147,31,147,30,158,31,13,31,13,30,13,29,174,31,119,31,139,31,60,31,111,31,157,31,32,31,32,30,194,31,194,30,174,31,170,31,98,31,98,30,123,31,227,31,128,31,102,31,184,31,184,30,30,31,30,30,204,31,223,31,56,31,56,30,82,31,82,30,58,31,199,31,199,30,254,31,53,31,53,30,144,31,22,31,36,31,168,31,168,30,168,29,23,31,102,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
