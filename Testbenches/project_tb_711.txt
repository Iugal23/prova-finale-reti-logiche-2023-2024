-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 683;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (198,0,7,0,187,0,68,0,0,0,79,0,178,0,64,0,164,0,254,0,99,0,0,0,20,0,0,0,128,0,133,0,39,0,249,0,109,0,0,0,15,0,0,0,206,0,182,0,196,0,203,0,157,0,0,0,97,0,0,0,131,0,217,0,0,0,0,0,192,0,0,0,47,0,123,0,99,0,24,0,65,0,122,0,223,0,32,0,0,0,90,0,233,0,145,0,81,0,140,0,0,0,118,0,0,0,38,0,88,0,81,0,0,0,13,0,162,0,79,0,91,0,0,0,202,0,145,0,70,0,96,0,17,0,223,0,0,0,188,0,0,0,189,0,0,0,181,0,63,0,167,0,63,0,138,0,0,0,0,0,137,0,199,0,0,0,52,0,0,0,41,0,48,0,208,0,171,0,101,0,79,0,15,0,54,0,122,0,0,0,100,0,244,0,174,0,180,0,212,0,209,0,183,0,0,0,0,0,0,0,179,0,73,0,183,0,157,0,0,0,0,0,3,0,0,0,0,0,196,0,0,0,183,0,150,0,36,0,94,0,0,0,174,0,230,0,27,0,189,0,208,0,116,0,239,0,27,0,196,0,134,0,61,0,141,0,104,0,0,0,79,0,150,0,0,0,78,0,229,0,0,0,86,0,5,0,0,0,211,0,142,0,70,0,112,0,19,0,165,0,153,0,35,0,75,0,8,0,160,0,39,0,84,0,174,0,32,0,129,0,78,0,0,0,126,0,0,0,0,0,93,0,193,0,123,0,80,0,234,0,97,0,236,0,170,0,182,0,79,0,0,0,41,0,64,0,245,0,131,0,159,0,0,0,135,0,27,0,0,0,135,0,0,0,0,0,0,0,48,0,2,0,67,0,0,0,32,0,174,0,107,0,140,0,98,0,18,0,0,0,0,0,0,0,227,0,217,0,223,0,182,0,20,0,247,0,16,0,4,0,0,0,0,0,186,0,9,0,181,0,117,0,127,0,105,0,139,0,219,0,100,0,101,0,172,0,173,0,169,0,136,0,153,0,0,0,147,0,47,0,0,0,0,0,183,0,56,0,116,0,108,0,0,0,63,0,31,0,0,0,0,0,0,0,0,0,0,0,188,0,92,0,55,0,102,0,89,0,124,0,245,0,4,0,209,0,77,0,236,0,68,0,239,0,159,0,13,0,0,0,0,0,172,0,118,0,0,0,0,0,14,0,215,0,39,0,178,0,0,0,2,0,71,0,71,0,38,0,67,0,69,0,26,0,0,0,27,0,241,0,109,0,18,0,0,0,178,0,209,0,137,0,0,0,155,0,36,0,0,0,137,0,189,0,93,0,154,0,68,0,16,0,2,0,224,0,222,0,163,0,0,0,17,0,62,0,0,0,0,0,0,0,0,0,37,0,249,0,0,0,156,0,75,0,122,0,2,0,0,0,35,0,210,0,56,0,147,0,0,0,190,0,165,0,0,0,10,0,0,0,119,0,5,0,123,0,236,0,35,0,67,0,82,0,123,0,0,0,61,0,207,0,0,0,113,0,100,0,0,0,231,0,143,0,212,0,113,0,232,0,168,0,36,0,0,0,124,0,52,0,151,0,251,0,143,0,74,0,19,0,0,0,0,0,155,0,216,0,191,0,61,0,165,0,0,0,246,0,232,0,20,0,18,0,241,0,219,0,44,0,71,0,0,0,65,0,172,0,162,0,0,0,240,0,248,0,206,0,233,0,194,0,178,0,20,0,167,0,200,0,22,0,38,0,0,0,97,0,147,0,0,0,171,0,111,0,137,0,78,0,0,0,202,0,0,0,170,0,245,0,130,0,15,0,18,0,116,0,67,0,219,0,0,0,0,0,165,0,0,0,0,0,0,0,222,0,13,0,0,0,113,0,64,0,11,0,68,0,27,0,172,0,191,0,14,0,38,0,144,0,0,0,56,0,151,0,0,0,165,0,32,0,210,0,0,0,87,0,16,0,81,0,215,0,10,0,207,0,212,0,239,0,126,0,0,0,236,0,0,0,3,0,157,0,133,0,243,0,159,0,0,0,16,0,163,0,179,0,0,0,0,0,6,0,0,0,0,0,189,0,151,0,30,0,0,0,219,0,5,0,0,0,93,0,67,0,197,0,189,0,0,0,201,0,34,0,137,0,105,0,58,0,164,0,0,0,61,0,250,0,164,0,116,0,63,0,0,0,176,0,49,0,179,0,182,0,0,0,111,0,0,0,26,0,187,0,153,0,108,0,126,0,137,0,208,0,100,0,0,0,193,0,247,0,216,0,131,0,99,0,244,0,103,0,86,0,233,0,0,0,171,0,245,0,40,0,29,0,214,0,2,0,75,0,137,0,83,0,189,0,152,0,196,0,0,0,197,0,166,0,0,0,162,0,0,0,206,0,66,0,168,0,170,0,242,0,0,0,174,0,62,0,37,0,98,0,58,0,0,0,77,0,0,0,0,0,192,0,27,0,0,0,212,0,217,0,160,0,96,0,207,0,216,0,189,0,92,0,117,0,55,0,245,0,175,0,61,0,194,0,12,0,145,0,39,0,0,0,100,0,40,0,152,0,202,0,137,0,215,0,0,0,141,0,0,0,237,0,36,0,179,0,0,0,11,0,16,0,33,0,190,0,115,0,69,0,12,0,36,0,246,0,104,0,119,0,123,0,135,0,32,0,1,0,241,0,202,0,26,0,0,0,0,0,46,0,131,0,31,0,32,0,210,0,6,0,168,0,0,0,76,0,87,0,3,0,206,0,0,0,4,0,214,0,0,0,56,0,130,0,27,0,192,0,25,0,0,0,109,0,200,0,83,0,90,0,147,0,34,0,234,0,81,0,41,0,4,0,113,0,0,0,215,0,7,0,79,0,249,0,52,0,38,0,0,0,0,0,9,0,48,0,182,0,61,0,203,0,39,0,253,0,155,0,247,0,124,0,24,0,179,0,153,0,145,0,0,0,207,0,225,0,156,0,202,0,103,0,192,0,194,0,243,0,186,0,86,0,0,0,96,0,17,0,64,0,154,0,0,0,18,0,46,0,246,0,198,0,13,0,224,0,69,0,244,0,208,0,0,0,151,0,0,0,235,0);
signal scenario_full  : scenario_type := (198,31,7,31,187,31,68,31,68,30,79,31,178,31,64,31,164,31,254,31,99,31,99,30,20,31,20,30,128,31,133,31,39,31,249,31,109,31,109,30,15,31,15,30,206,31,182,31,196,31,203,31,157,31,157,30,97,31,97,30,131,31,217,31,217,30,217,29,192,31,192,30,47,31,123,31,99,31,24,31,65,31,122,31,223,31,32,31,32,30,90,31,233,31,145,31,81,31,140,31,140,30,118,31,118,30,38,31,88,31,81,31,81,30,13,31,162,31,79,31,91,31,91,30,202,31,145,31,70,31,96,31,17,31,223,31,223,30,188,31,188,30,189,31,189,30,181,31,63,31,167,31,63,31,138,31,138,30,138,29,137,31,199,31,199,30,52,31,52,30,41,31,48,31,208,31,171,31,101,31,79,31,15,31,54,31,122,31,122,30,100,31,244,31,174,31,180,31,212,31,209,31,183,31,183,30,183,29,183,28,179,31,73,31,183,31,157,31,157,30,157,29,3,31,3,30,3,29,196,31,196,30,183,31,150,31,36,31,94,31,94,30,174,31,230,31,27,31,189,31,208,31,116,31,239,31,27,31,196,31,134,31,61,31,141,31,104,31,104,30,79,31,150,31,150,30,78,31,229,31,229,30,86,31,5,31,5,30,211,31,142,31,70,31,112,31,19,31,165,31,153,31,35,31,75,31,8,31,160,31,39,31,84,31,174,31,32,31,129,31,78,31,78,30,126,31,126,30,126,29,93,31,193,31,123,31,80,31,234,31,97,31,236,31,170,31,182,31,79,31,79,30,41,31,64,31,245,31,131,31,159,31,159,30,135,31,27,31,27,30,135,31,135,30,135,29,135,28,48,31,2,31,67,31,67,30,32,31,174,31,107,31,140,31,98,31,18,31,18,30,18,29,18,28,227,31,217,31,223,31,182,31,20,31,247,31,16,31,4,31,4,30,4,29,186,31,9,31,181,31,117,31,127,31,105,31,139,31,219,31,100,31,101,31,172,31,173,31,169,31,136,31,153,31,153,30,147,31,47,31,47,30,47,29,183,31,56,31,116,31,108,31,108,30,63,31,31,31,31,30,31,29,31,28,31,27,31,26,188,31,92,31,55,31,102,31,89,31,124,31,245,31,4,31,209,31,77,31,236,31,68,31,239,31,159,31,13,31,13,30,13,29,172,31,118,31,118,30,118,29,14,31,215,31,39,31,178,31,178,30,2,31,71,31,71,31,38,31,67,31,69,31,26,31,26,30,27,31,241,31,109,31,18,31,18,30,178,31,209,31,137,31,137,30,155,31,36,31,36,30,137,31,189,31,93,31,154,31,68,31,16,31,2,31,224,31,222,31,163,31,163,30,17,31,62,31,62,30,62,29,62,28,62,27,37,31,249,31,249,30,156,31,75,31,122,31,2,31,2,30,35,31,210,31,56,31,147,31,147,30,190,31,165,31,165,30,10,31,10,30,119,31,5,31,123,31,236,31,35,31,67,31,82,31,123,31,123,30,61,31,207,31,207,30,113,31,100,31,100,30,231,31,143,31,212,31,113,31,232,31,168,31,36,31,36,30,124,31,52,31,151,31,251,31,143,31,74,31,19,31,19,30,19,29,155,31,216,31,191,31,61,31,165,31,165,30,246,31,232,31,20,31,18,31,241,31,219,31,44,31,71,31,71,30,65,31,172,31,162,31,162,30,240,31,248,31,206,31,233,31,194,31,178,31,20,31,167,31,200,31,22,31,38,31,38,30,97,31,147,31,147,30,171,31,111,31,137,31,78,31,78,30,202,31,202,30,170,31,245,31,130,31,15,31,18,31,116,31,67,31,219,31,219,30,219,29,165,31,165,30,165,29,165,28,222,31,13,31,13,30,113,31,64,31,11,31,68,31,27,31,172,31,191,31,14,31,38,31,144,31,144,30,56,31,151,31,151,30,165,31,32,31,210,31,210,30,87,31,16,31,81,31,215,31,10,31,207,31,212,31,239,31,126,31,126,30,236,31,236,30,3,31,157,31,133,31,243,31,159,31,159,30,16,31,163,31,179,31,179,30,179,29,6,31,6,30,6,29,189,31,151,31,30,31,30,30,219,31,5,31,5,30,93,31,67,31,197,31,189,31,189,30,201,31,34,31,137,31,105,31,58,31,164,31,164,30,61,31,250,31,164,31,116,31,63,31,63,30,176,31,49,31,179,31,182,31,182,30,111,31,111,30,26,31,187,31,153,31,108,31,126,31,137,31,208,31,100,31,100,30,193,31,247,31,216,31,131,31,99,31,244,31,103,31,86,31,233,31,233,30,171,31,245,31,40,31,29,31,214,31,2,31,75,31,137,31,83,31,189,31,152,31,196,31,196,30,197,31,166,31,166,30,162,31,162,30,206,31,66,31,168,31,170,31,242,31,242,30,174,31,62,31,37,31,98,31,58,31,58,30,77,31,77,30,77,29,192,31,27,31,27,30,212,31,217,31,160,31,96,31,207,31,216,31,189,31,92,31,117,31,55,31,245,31,175,31,61,31,194,31,12,31,145,31,39,31,39,30,100,31,40,31,152,31,202,31,137,31,215,31,215,30,141,31,141,30,237,31,36,31,179,31,179,30,11,31,16,31,33,31,190,31,115,31,69,31,12,31,36,31,246,31,104,31,119,31,123,31,135,31,32,31,1,31,241,31,202,31,26,31,26,30,26,29,46,31,131,31,31,31,32,31,210,31,6,31,168,31,168,30,76,31,87,31,3,31,206,31,206,30,4,31,214,31,214,30,56,31,130,31,27,31,192,31,25,31,25,30,109,31,200,31,83,31,90,31,147,31,34,31,234,31,81,31,41,31,4,31,113,31,113,30,215,31,7,31,79,31,249,31,52,31,38,31,38,30,38,29,9,31,48,31,182,31,61,31,203,31,39,31,253,31,155,31,247,31,124,31,24,31,179,31,153,31,145,31,145,30,207,31,225,31,156,31,202,31,103,31,192,31,194,31,243,31,186,31,86,31,86,30,96,31,17,31,64,31,154,31,154,30,18,31,46,31,246,31,198,31,13,31,224,31,69,31,244,31,208,31,208,30,151,31,151,30,235,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
