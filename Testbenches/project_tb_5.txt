-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 760;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (215,0,0,0,0,0,0,0,112,0,252,0,125,0,98,0,252,0,254,0,189,0,69,0,0,0,141,0,202,0,0,0,97,0,205,0,135,0,167,0,48,0,205,0,51,0,217,0,248,0,38,0,14,0,79,0,162,0,245,0,7,0,83,0,0,0,205,0,0,0,157,0,185,0,0,0,171,0,112,0,72,0,49,0,172,0,109,0,0,0,0,0,100,0,154,0,219,0,11,0,121,0,0,0,0,0,0,0,22,0,0,0,181,0,0,0,133,0,0,0,126,0,0,0,82,0,82,0,0,0,3,0,70,0,62,0,45,0,5,0,189,0,18,0,247,0,62,0,0,0,80,0,141,0,78,0,0,0,36,0,0,0,223,0,0,0,59,0,41,0,0,0,118,0,0,0,173,0,22,0,0,0,99,0,31,0,178,0,0,0,209,0,252,0,35,0,218,0,0,0,144,0,0,0,77,0,47,0,77,0,18,0,130,0,0,0,235,0,75,0,0,0,129,0,107,0,181,0,218,0,108,0,0,0,0,0,234,0,0,0,226,0,109,0,194,0,43,0,148,0,132,0,179,0,91,0,0,0,241,0,174,0,1,0,0,0,65,0,59,0,198,0,0,0,172,0,65,0,234,0,0,0,83,0,6,0,42,0,98,0,0,0,151,0,181,0,153,0,230,0,214,0,191,0,105,0,81,0,0,0,167,0,43,0,115,0,240,0,90,0,84,0,128,0,142,0,0,0,23,0,87,0,0,0,70,0,117,0,95,0,152,0,0,0,85,0,252,0,160,0,0,0,144,0,197,0,139,0,137,0,0,0,106,0,0,0,112,0,129,0,158,0,34,0,0,0,171,0,235,0,127,0,168,0,36,0,52,0,171,0,0,0,210,0,163,0,83,0,0,0,29,0,216,0,198,0,217,0,105,0,15,0,99,0,0,0,0,0,165,0,0,0,212,0,127,0,206,0,211,0,179,0,230,0,188,0,174,0,118,0,189,0,0,0,231,0,24,0,21,0,0,0,226,0,143,0,31,0,226,0,9,0,55,0,207,0,138,0,0,0,103,0,82,0,135,0,0,0,123,0,177,0,83,0,0,0,0,0,151,0,0,0,137,0,116,0,51,0,173,0,210,0,26,0,109,0,131,0,3,0,21,0,12,0,56,0,0,0,0,0,173,0,33,0,69,0,0,0,88,0,94,0,26,0,0,0,220,0,75,0,164,0,116,0,187,0,243,0,0,0,0,0,14,0,209,0,61,0,224,0,27,0,136,0,132,0,72,0,216,0,0,0,97,0,0,0,0,0,104,0,0,0,21,0,183,0,128,0,0,0,193,0,68,0,177,0,141,0,0,0,237,0,206,0,60,0,223,0,88,0,116,0,0,0,121,0,0,0,71,0,33,0,15,0,0,0,78,0,43,0,74,0,169,0,252,0,85,0,0,0,198,0,43,0,122,0,71,0,7,0,174,0,90,0,91,0,252,0,117,0,65,0,217,0,143,0,139,0,174,0,250,0,99,0,0,0,180,0,161,0,0,0,0,0,0,0,17,0,205,0,182,0,83,0,214,0,48,0,13,0,69,0,0,0,35,0,0,0,105,0,246,0,0,0,71,0,120,0,96,0,0,0,38,0,0,0,233,0,245,0,0,0,110,0,118,0,136,0,141,0,0,0,99,0,248,0,59,0,132,0,79,0,0,0,86,0,0,0,0,0,98,0,148,0,85,0,147,0,98,0,124,0,130,0,162,0,123,0,160,0,98,0,250,0,243,0,36,0,30,0,0,0,227,0,0,0,111,0,0,0,0,0,151,0,166,0,24,0,119,0,0,0,210,0,35,0,39,0,57,0,113,0,0,0,0,0,250,0,0,0,108,0,211,0,237,0,0,0,83,0,0,0,131,0,0,0,47,0,197,0,144,0,11,0,197,0,192,0,0,0,128,0,169,0,0,0,92,0,229,0,158,0,0,0,246,0,185,0,32,0,2,0,0,0,205,0,178,0,0,0,254,0,226,0,158,0,58,0,88,0,0,0,121,0,88,0,124,0,0,0,10,0,110,0,233,0,184,0,0,0,57,0,54,0,169,0,0,0,211,0,0,0,160,0,69,0,49,0,134,0,37,0,20,0,0,0,171,0,0,0,242,0,58,0,184,0,100,0,0,0,8,0,160,0,0,0,69,0,220,0,101,0,0,0,214,0,130,0,14,0,106,0,23,0,24,0,55,0,106,0,121,0,12,0,0,0,112,0,152,0,179,0,50,0,239,0,0,0,194,0,148,0,169,0,11,0,0,0,0,0,121,0,0,0,107,0,0,0,140,0,0,0,0,0,91,0,0,0,226,0,0,0,0,0,160,0,33,0,84,0,55,0,0,0,8,0,155,0,208,0,146,0,142,0,28,0,95,0,0,0,211,0,30,0,0,0,0,0,48,0,23,0,234,0,129,0,212,0,26,0,21,0,182,0,8,0,48,0,220,0,0,0,47,0,127,0,173,0,25,0,175,0,181,0,0,0,0,0,234,0,137,0,180,0,0,0,0,0,0,0,85,0,114,0,152,0,67,0,220,0,31,0,118,0,101,0,110,0,237,0,182,0,9,0,35,0,10,0,248,0,129,0,166,0,84,0,236,0,29,0,0,0,1,0,128,0,234,0,169,0,202,0,74,0,83,0,234,0,188,0,26,0,171,0,44,0,250,0,0,0,205,0,127,0,0,0,0,0,0,0,21,0,197,0,31,0,26,0,0,0,124,0,2,0,136,0,170,0,0,0,42,0,161,0,31,0,0,0,59,0,29,0,104,0,213,0,77,0,23,0,0,0,56,0,218,0,68,0,165,0,139,0,50,0,64,0,143,0,32,0,115,0,32,0,173,0,38,0,221,0,0,0,7,0,0,0,0,0,0,0,5,0,17,0,80,0,118,0,0,0,113,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,74,0,1,0,135,0,0,0,82,0,206,0,56,0,0,0,220,0,193,0,0,0,0,0,0,0,139,0,221,0,23,0,88,0,173,0,124,0,199,0,226,0,162,0,91,0,130,0,77,0,0,0,111,0,50,0,0,0,79,0,221,0,149,0,193,0,93,0,128,0,96,0,165,0,0,0,233,0,0,0,253,0,25,0,235,0,59,0,179,0,219,0,155,0,144,0,74,0,225,0,17,0,0,0,154,0,0,0,71,0,9,0,107,0,219,0,68,0,0,0,81,0,186,0,238,0,0,0,62,0,183,0,40,0,211,0,63,0,98,0,0,0,124,0,88,0,128,0,181,0,0,0,0,0,149,0,32,0,244,0,116,0,46,0,0,0,182,0,28,0,196,0,53,0,159,0,0,0,83,0,225,0,230,0,50,0,87,0,0,0,216,0,101,0,0,0,203,0,181,0,55,0,135,0);
signal scenario_full  : scenario_type := (215,31,215,30,215,29,215,28,112,31,252,31,125,31,98,31,252,31,254,31,189,31,69,31,69,30,141,31,202,31,202,30,97,31,205,31,135,31,167,31,48,31,205,31,51,31,217,31,248,31,38,31,14,31,79,31,162,31,245,31,7,31,83,31,83,30,205,31,205,30,157,31,185,31,185,30,171,31,112,31,72,31,49,31,172,31,109,31,109,30,109,29,100,31,154,31,219,31,11,31,121,31,121,30,121,29,121,28,22,31,22,30,181,31,181,30,133,31,133,30,126,31,126,30,82,31,82,31,82,30,3,31,70,31,62,31,45,31,5,31,189,31,18,31,247,31,62,31,62,30,80,31,141,31,78,31,78,30,36,31,36,30,223,31,223,30,59,31,41,31,41,30,118,31,118,30,173,31,22,31,22,30,99,31,31,31,178,31,178,30,209,31,252,31,35,31,218,31,218,30,144,31,144,30,77,31,47,31,77,31,18,31,130,31,130,30,235,31,75,31,75,30,129,31,107,31,181,31,218,31,108,31,108,30,108,29,234,31,234,30,226,31,109,31,194,31,43,31,148,31,132,31,179,31,91,31,91,30,241,31,174,31,1,31,1,30,65,31,59,31,198,31,198,30,172,31,65,31,234,31,234,30,83,31,6,31,42,31,98,31,98,30,151,31,181,31,153,31,230,31,214,31,191,31,105,31,81,31,81,30,167,31,43,31,115,31,240,31,90,31,84,31,128,31,142,31,142,30,23,31,87,31,87,30,70,31,117,31,95,31,152,31,152,30,85,31,252,31,160,31,160,30,144,31,197,31,139,31,137,31,137,30,106,31,106,30,112,31,129,31,158,31,34,31,34,30,171,31,235,31,127,31,168,31,36,31,52,31,171,31,171,30,210,31,163,31,83,31,83,30,29,31,216,31,198,31,217,31,105,31,15,31,99,31,99,30,99,29,165,31,165,30,212,31,127,31,206,31,211,31,179,31,230,31,188,31,174,31,118,31,189,31,189,30,231,31,24,31,21,31,21,30,226,31,143,31,31,31,226,31,9,31,55,31,207,31,138,31,138,30,103,31,82,31,135,31,135,30,123,31,177,31,83,31,83,30,83,29,151,31,151,30,137,31,116,31,51,31,173,31,210,31,26,31,109,31,131,31,3,31,21,31,12,31,56,31,56,30,56,29,173,31,33,31,69,31,69,30,88,31,94,31,26,31,26,30,220,31,75,31,164,31,116,31,187,31,243,31,243,30,243,29,14,31,209,31,61,31,224,31,27,31,136,31,132,31,72,31,216,31,216,30,97,31,97,30,97,29,104,31,104,30,21,31,183,31,128,31,128,30,193,31,68,31,177,31,141,31,141,30,237,31,206,31,60,31,223,31,88,31,116,31,116,30,121,31,121,30,71,31,33,31,15,31,15,30,78,31,43,31,74,31,169,31,252,31,85,31,85,30,198,31,43,31,122,31,71,31,7,31,174,31,90,31,91,31,252,31,117,31,65,31,217,31,143,31,139,31,174,31,250,31,99,31,99,30,180,31,161,31,161,30,161,29,161,28,17,31,205,31,182,31,83,31,214,31,48,31,13,31,69,31,69,30,35,31,35,30,105,31,246,31,246,30,71,31,120,31,96,31,96,30,38,31,38,30,233,31,245,31,245,30,110,31,118,31,136,31,141,31,141,30,99,31,248,31,59,31,132,31,79,31,79,30,86,31,86,30,86,29,98,31,148,31,85,31,147,31,98,31,124,31,130,31,162,31,123,31,160,31,98,31,250,31,243,31,36,31,30,31,30,30,227,31,227,30,111,31,111,30,111,29,151,31,166,31,24,31,119,31,119,30,210,31,35,31,39,31,57,31,113,31,113,30,113,29,250,31,250,30,108,31,211,31,237,31,237,30,83,31,83,30,131,31,131,30,47,31,197,31,144,31,11,31,197,31,192,31,192,30,128,31,169,31,169,30,92,31,229,31,158,31,158,30,246,31,185,31,32,31,2,31,2,30,205,31,178,31,178,30,254,31,226,31,158,31,58,31,88,31,88,30,121,31,88,31,124,31,124,30,10,31,110,31,233,31,184,31,184,30,57,31,54,31,169,31,169,30,211,31,211,30,160,31,69,31,49,31,134,31,37,31,20,31,20,30,171,31,171,30,242,31,58,31,184,31,100,31,100,30,8,31,160,31,160,30,69,31,220,31,101,31,101,30,214,31,130,31,14,31,106,31,23,31,24,31,55,31,106,31,121,31,12,31,12,30,112,31,152,31,179,31,50,31,239,31,239,30,194,31,148,31,169,31,11,31,11,30,11,29,121,31,121,30,107,31,107,30,140,31,140,30,140,29,91,31,91,30,226,31,226,30,226,29,160,31,33,31,84,31,55,31,55,30,8,31,155,31,208,31,146,31,142,31,28,31,95,31,95,30,211,31,30,31,30,30,30,29,48,31,23,31,234,31,129,31,212,31,26,31,21,31,182,31,8,31,48,31,220,31,220,30,47,31,127,31,173,31,25,31,175,31,181,31,181,30,181,29,234,31,137,31,180,31,180,30,180,29,180,28,85,31,114,31,152,31,67,31,220,31,31,31,118,31,101,31,110,31,237,31,182,31,9,31,35,31,10,31,248,31,129,31,166,31,84,31,236,31,29,31,29,30,1,31,128,31,234,31,169,31,202,31,74,31,83,31,234,31,188,31,26,31,171,31,44,31,250,31,250,30,205,31,127,31,127,30,127,29,127,28,21,31,197,31,31,31,26,31,26,30,124,31,2,31,136,31,170,31,170,30,42,31,161,31,31,31,31,30,59,31,29,31,104,31,213,31,77,31,23,31,23,30,56,31,218,31,68,31,165,31,139,31,50,31,64,31,143,31,32,31,115,31,32,31,173,31,38,31,221,31,221,30,7,31,7,30,7,29,7,28,5,31,17,31,80,31,118,31,118,30,113,31,113,30,113,29,113,28,55,31,55,30,55,29,55,28,74,31,1,31,135,31,135,30,82,31,206,31,56,31,56,30,220,31,193,31,193,30,193,29,193,28,139,31,221,31,23,31,88,31,173,31,124,31,199,31,226,31,162,31,91,31,130,31,77,31,77,30,111,31,50,31,50,30,79,31,221,31,149,31,193,31,93,31,128,31,96,31,165,31,165,30,233,31,233,30,253,31,25,31,235,31,59,31,179,31,219,31,155,31,144,31,74,31,225,31,17,31,17,30,154,31,154,30,71,31,9,31,107,31,219,31,68,31,68,30,81,31,186,31,238,31,238,30,62,31,183,31,40,31,211,31,63,31,98,31,98,30,124,31,88,31,128,31,181,31,181,30,181,29,149,31,32,31,244,31,116,31,46,31,46,30,182,31,28,31,196,31,53,31,159,31,159,30,83,31,225,31,230,31,50,31,87,31,87,30,216,31,101,31,101,30,203,31,181,31,55,31,135,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
