-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 693;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,98,0,68,0,219,0,215,0,204,0,11,0,203,0,160,0,188,0,142,0,126,0,128,0,220,0,124,0,0,0,0,0,153,0,246,0,108,0,75,0,8,0,88,0,136,0,0,0,163,0,33,0,149,0,0,0,142,0,5,0,56,0,0,0,0,0,81,0,5,0,22,0,167,0,13,0,92,0,0,0,204,0,0,0,5,0,124,0,12,0,0,0,231,0,90,0,69,0,113,0,149,0,74,0,127,0,131,0,177,0,73,0,82,0,65,0,0,0,0,0,0,0,30,0,138,0,121,0,58,0,158,0,130,0,97,0,0,0,62,0,0,0,92,0,207,0,58,0,167,0,0,0,29,0,5,0,5,0,38,0,140,0,213,0,228,0,0,0,151,0,121,0,250,0,151,0,18,0,0,0,0,0,179,0,120,0,154,0,235,0,170,0,142,0,231,0,254,0,223,0,0,0,16,0,224,0,27,0,181,0,204,0,219,0,9,0,192,0,182,0,12,0,47,0,18,0,214,0,0,0,0,0,206,0,106,0,211,0,124,0,0,0,20,0,125,0,1,0,60,0,0,0,43,0,30,0,153,0,254,0,97,0,0,0,163,0,176,0,0,0,178,0,181,0,175,0,221,0,176,0,0,0,104,0,0,0,224,0,171,0,194,0,126,0,0,0,9,0,149,0,246,0,122,0,36,0,85,0,64,0,43,0,0,0,91,0,114,0,193,0,0,0,142,0,221,0,137,0,0,0,27,0,101,0,175,0,234,0,172,0,0,0,197,0,85,0,36,0,236,0,0,0,172,0,120,0,31,0,0,0,237,0,0,0,255,0,243,0,0,0,51,0,21,0,76,0,135,0,158,0,158,0,83,0,173,0,111,0,163,0,128,0,44,0,222,0,0,0,74,0,119,0,235,0,122,0,166,0,0,0,201,0,24,0,192,0,192,0,0,0,234,0,209,0,60,0,130,0,2,0,109,0,99,0,2,0,198,0,33,0,114,0,202,0,65,0,80,0,71,0,34,0,158,0,106,0,127,0,104,0,0,0,140,0,91,0,0,0,0,0,192,0,159,0,174,0,156,0,100,0,0,0,56,0,135,0,234,0,217,0,228,0,79,0,236,0,244,0,221,0,39,0,68,0,89,0,0,0,0,0,231,0,28,0,177,0,215,0,0,0,78,0,98,0,66,0,106,0,0,0,164,0,121,0,157,0,142,0,165,0,0,0,35,0,200,0,251,0,0,0,175,0,192,0,93,0,177,0,70,0,194,0,229,0,59,0,6,0,19,0,0,0,184,0,158,0,100,0,0,0,0,0,0,0,88,0,80,0,35,0,224,0,194,0,159,0,236,0,0,0,135,0,78,0,207,0,76,0,0,0,0,0,67,0,248,0,110,0,181,0,218,0,0,0,190,0,85,0,24,0,58,0,0,0,3,0,0,0,94,0,146,0,36,0,0,0,176,0,0,0,69,0,184,0,1,0,138,0,128,0,0,0,83,0,225,0,250,0,219,0,181,0,203,0,242,0,175,0,114,0,108,0,82,0,146,0,214,0,0,0,0,0,120,0,180,0,0,0,15,0,43,0,0,0,251,0,152,0,68,0,0,0,185,0,168,0,157,0,168,0,181,0,157,0,0,0,152,0,74,0,24,0,0,0,0,0,112,0,0,0,0,0,62,0,61,0,93,0,43,0,101,0,43,0,66,0,81,0,189,0,146,0,137,0,24,0,162,0,205,0,181,0,140,0,194,0,0,0,56,0,53,0,82,0,157,0,122,0,184,0,221,0,106,0,110,0,18,0,195,0,43,0,253,0,184,0,159,0,59,0,160,0,135,0,122,0,41,0,233,0,227,0,0,0,0,0,52,0,173,0,192,0,20,0,147,0,0,0,80,0,35,0,185,0,63,0,108,0,167,0,0,0,0,0,221,0,245,0,0,0,0,0,0,0,6,0,39,0,113,0,232,0,31,0,62,0,99,0,0,0,58,0,131,0,32,0,209,0,168,0,114,0,238,0,205,0,200,0,0,0,0,0,0,0,0,0,99,0,11,0,200,0,81,0,0,0,237,0,187,0,216,0,250,0,225,0,232,0,206,0,12,0,212,0,70,0,125,0,59,0,194,0,25,0,133,0,162,0,233,0,84,0,0,0,205,0,169,0,132,0,152,0,102,0,81,0,222,0,145,0,0,0,230,0,227,0,123,0,251,0,103,0,0,0,219,0,0,0,0,0,0,0,14,0,61,0,89,0,0,0,225,0,207,0,249,0,59,0,129,0,142,0,0,0,100,0,189,0,111,0,4,0,0,0,107,0,55,0,121,0,97,0,77,0,214,0,61,0,102,0,110,0,179,0,0,0,250,0,236,0,40,0,17,0,168,0,89,0,0,0,202,0,47,0,240,0,0,0,107,0,0,0,220,0,136,0,105,0,118,0,108,0,17,0,157,0,0,0,172,0,34,0,35,0,132,0,50,0,72,0,126,0,66,0,177,0,0,0,230,0,60,0,0,0,0,0,109,0,157,0,67,0,40,0,126,0,150,0,0,0,141,0,235,0,36,0,121,0,252,0,238,0,225,0,0,0,0,0,44,0,52,0,0,0,109,0,170,0,168,0,115,0,44,0,0,0,35,0,251,0,0,0,0,0,2,0,150,0,126,0,0,0,51,0,83,0,31,0,0,0,246,0,152,0,245,0,104,0,221,0,45,0,112,0,0,0,193,0,64,0,140,0,133,0,91,0,0,0,255,0,136,0,235,0,0,0,252,0,124,0,219,0,0,0,185,0,0,0,172,0,0,0,30,0,129,0,58,0,21,0,151,0,21,0,22,0,48,0,232,0,73,0,37,0,0,0,0,0,0,0,96,0,0,0,222,0,0,0,150,0,0,0,211,0,173,0,12,0,41,0,177,0,0,0,141,0,66,0,158,0,0,0,116,0,132,0,68,0,195,0,18,0,79,0,119,0,0,0,220,0,0,0,74,0,147,0,47,0,126,0,108,0,43,0,181,0,132,0,12,0,7,0,0,0,172,0,253,0,179,0,220,0,92,0,132,0,100,0,0,0,73,0,237,0,50,0,212,0,211,0,179,0,162,0,114,0,143,0,0,0,60,0,168,0);
signal scenario_full  : scenario_type := (0,0,98,31,68,31,219,31,215,31,204,31,11,31,203,31,160,31,188,31,142,31,126,31,128,31,220,31,124,31,124,30,124,29,153,31,246,31,108,31,75,31,8,31,88,31,136,31,136,30,163,31,33,31,149,31,149,30,142,31,5,31,56,31,56,30,56,29,81,31,5,31,22,31,167,31,13,31,92,31,92,30,204,31,204,30,5,31,124,31,12,31,12,30,231,31,90,31,69,31,113,31,149,31,74,31,127,31,131,31,177,31,73,31,82,31,65,31,65,30,65,29,65,28,30,31,138,31,121,31,58,31,158,31,130,31,97,31,97,30,62,31,62,30,92,31,207,31,58,31,167,31,167,30,29,31,5,31,5,31,38,31,140,31,213,31,228,31,228,30,151,31,121,31,250,31,151,31,18,31,18,30,18,29,179,31,120,31,154,31,235,31,170,31,142,31,231,31,254,31,223,31,223,30,16,31,224,31,27,31,181,31,204,31,219,31,9,31,192,31,182,31,12,31,47,31,18,31,214,31,214,30,214,29,206,31,106,31,211,31,124,31,124,30,20,31,125,31,1,31,60,31,60,30,43,31,30,31,153,31,254,31,97,31,97,30,163,31,176,31,176,30,178,31,181,31,175,31,221,31,176,31,176,30,104,31,104,30,224,31,171,31,194,31,126,31,126,30,9,31,149,31,246,31,122,31,36,31,85,31,64,31,43,31,43,30,91,31,114,31,193,31,193,30,142,31,221,31,137,31,137,30,27,31,101,31,175,31,234,31,172,31,172,30,197,31,85,31,36,31,236,31,236,30,172,31,120,31,31,31,31,30,237,31,237,30,255,31,243,31,243,30,51,31,21,31,76,31,135,31,158,31,158,31,83,31,173,31,111,31,163,31,128,31,44,31,222,31,222,30,74,31,119,31,235,31,122,31,166,31,166,30,201,31,24,31,192,31,192,31,192,30,234,31,209,31,60,31,130,31,2,31,109,31,99,31,2,31,198,31,33,31,114,31,202,31,65,31,80,31,71,31,34,31,158,31,106,31,127,31,104,31,104,30,140,31,91,31,91,30,91,29,192,31,159,31,174,31,156,31,100,31,100,30,56,31,135,31,234,31,217,31,228,31,79,31,236,31,244,31,221,31,39,31,68,31,89,31,89,30,89,29,231,31,28,31,177,31,215,31,215,30,78,31,98,31,66,31,106,31,106,30,164,31,121,31,157,31,142,31,165,31,165,30,35,31,200,31,251,31,251,30,175,31,192,31,93,31,177,31,70,31,194,31,229,31,59,31,6,31,19,31,19,30,184,31,158,31,100,31,100,30,100,29,100,28,88,31,80,31,35,31,224,31,194,31,159,31,236,31,236,30,135,31,78,31,207,31,76,31,76,30,76,29,67,31,248,31,110,31,181,31,218,31,218,30,190,31,85,31,24,31,58,31,58,30,3,31,3,30,94,31,146,31,36,31,36,30,176,31,176,30,69,31,184,31,1,31,138,31,128,31,128,30,83,31,225,31,250,31,219,31,181,31,203,31,242,31,175,31,114,31,108,31,82,31,146,31,214,31,214,30,214,29,120,31,180,31,180,30,15,31,43,31,43,30,251,31,152,31,68,31,68,30,185,31,168,31,157,31,168,31,181,31,157,31,157,30,152,31,74,31,24,31,24,30,24,29,112,31,112,30,112,29,62,31,61,31,93,31,43,31,101,31,43,31,66,31,81,31,189,31,146,31,137,31,24,31,162,31,205,31,181,31,140,31,194,31,194,30,56,31,53,31,82,31,157,31,122,31,184,31,221,31,106,31,110,31,18,31,195,31,43,31,253,31,184,31,159,31,59,31,160,31,135,31,122,31,41,31,233,31,227,31,227,30,227,29,52,31,173,31,192,31,20,31,147,31,147,30,80,31,35,31,185,31,63,31,108,31,167,31,167,30,167,29,221,31,245,31,245,30,245,29,245,28,6,31,39,31,113,31,232,31,31,31,62,31,99,31,99,30,58,31,131,31,32,31,209,31,168,31,114,31,238,31,205,31,200,31,200,30,200,29,200,28,200,27,99,31,11,31,200,31,81,31,81,30,237,31,187,31,216,31,250,31,225,31,232,31,206,31,12,31,212,31,70,31,125,31,59,31,194,31,25,31,133,31,162,31,233,31,84,31,84,30,205,31,169,31,132,31,152,31,102,31,81,31,222,31,145,31,145,30,230,31,227,31,123,31,251,31,103,31,103,30,219,31,219,30,219,29,219,28,14,31,61,31,89,31,89,30,225,31,207,31,249,31,59,31,129,31,142,31,142,30,100,31,189,31,111,31,4,31,4,30,107,31,55,31,121,31,97,31,77,31,214,31,61,31,102,31,110,31,179,31,179,30,250,31,236,31,40,31,17,31,168,31,89,31,89,30,202,31,47,31,240,31,240,30,107,31,107,30,220,31,136,31,105,31,118,31,108,31,17,31,157,31,157,30,172,31,34,31,35,31,132,31,50,31,72,31,126,31,66,31,177,31,177,30,230,31,60,31,60,30,60,29,109,31,157,31,67,31,40,31,126,31,150,31,150,30,141,31,235,31,36,31,121,31,252,31,238,31,225,31,225,30,225,29,44,31,52,31,52,30,109,31,170,31,168,31,115,31,44,31,44,30,35,31,251,31,251,30,251,29,2,31,150,31,126,31,126,30,51,31,83,31,31,31,31,30,246,31,152,31,245,31,104,31,221,31,45,31,112,31,112,30,193,31,64,31,140,31,133,31,91,31,91,30,255,31,136,31,235,31,235,30,252,31,124,31,219,31,219,30,185,31,185,30,172,31,172,30,30,31,129,31,58,31,21,31,151,31,21,31,22,31,48,31,232,31,73,31,37,31,37,30,37,29,37,28,96,31,96,30,222,31,222,30,150,31,150,30,211,31,173,31,12,31,41,31,177,31,177,30,141,31,66,31,158,31,158,30,116,31,132,31,68,31,195,31,18,31,79,31,119,31,119,30,220,31,220,30,74,31,147,31,47,31,126,31,108,31,43,31,181,31,132,31,12,31,7,31,7,30,172,31,253,31,179,31,220,31,92,31,132,31,100,31,100,30,73,31,237,31,50,31,212,31,211,31,179,31,162,31,114,31,143,31,143,30,60,31,168,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
