-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 971;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (22,0,0,0,106,0,202,0,14,0,103,0,239,0,22,0,47,0,0,0,201,0,135,0,238,0,0,0,116,0,206,0,31,0,0,0,0,0,247,0,0,0,222,0,204,0,195,0,154,0,163,0,107,0,234,0,174,0,120,0,134,0,183,0,152,0,0,0,123,0,131,0,146,0,89,0,145,0,162,0,221,0,194,0,0,0,231,0,255,0,227,0,202,0,126,0,56,0,136,0,190,0,203,0,65,0,144,0,0,0,71,0,23,0,0,0,55,0,167,0,33,0,195,0,0,0,215,0,95,0,128,0,191,0,202,0,0,0,0,0,6,0,179,0,241,0,0,0,30,0,248,0,164,0,0,0,17,0,153,0,0,0,147,0,0,0,234,0,0,0,154,0,207,0,226,0,0,0,0,0,224,0,83,0,118,0,0,0,10,0,31,0,0,0,36,0,172,0,113,0,97,0,49,0,0,0,196,0,0,0,177,0,54,0,202,0,0,0,0,0,0,0,57,0,28,0,66,0,0,0,244,0,107,0,0,0,0,0,168,0,0,0,230,0,79,0,0,0,146,0,161,0,0,0,219,0,93,0,85,0,154,0,148,0,39,0,149,0,105,0,39,0,28,0,83,0,169,0,73,0,89,0,245,0,0,0,0,0,255,0,222,0,232,0,158,0,189,0,222,0,65,0,0,0,233,0,128,0,49,0,236,0,33,0,0,0,53,0,0,0,3,0,198,0,0,0,228,0,196,0,205,0,229,0,64,0,162,0,0,0,125,0,62,0,180,0,0,0,110,0,106,0,0,0,210,0,0,0,61,0,150,0,196,0,225,0,251,0,115,0,0,0,233,0,75,0,226,0,76,0,213,0,223,0,0,0,10,0,145,0,15,0,96,0,31,0,11,0,10,0,105,0,245,0,0,0,0,0,186,0,171,0,222,0,148,0,75,0,51,0,247,0,32,0,226,0,216,0,0,0,67,0,238,0,0,0,222,0,152,0,82,0,53,0,0,0,184,0,109,0,161,0,0,0,95,0,136,0,233,0,113,0,44,0,234,0,0,0,173,0,183,0,5,0,0,0,171,0,106,0,0,0,230,0,32,0,172,0,0,0,93,0,0,0,35,0,0,0,105,0,93,0,0,0,23,0,120,0,76,0,190,0,0,0,98,0,0,0,149,0,0,0,0,0,147,0,0,0,167,0,102,0,183,0,34,0,0,0,9,0,134,0,161,0,48,0,0,0,225,0,235,0,152,0,15,0,172,0,53,0,89,0,93,0,35,0,34,0,0,0,187,0,209,0,0,0,136,0,0,0,166,0,0,0,97,0,192,0,0,0,31,0,0,0,0,0,100,0,0,0,134,0,212,0,12,0,0,0,235,0,20,0,226,0,0,0,117,0,141,0,55,0,234,0,107,0,182,0,36,0,64,0,57,0,56,0,66,0,76,0,61,0,199,0,52,0,0,0,236,0,116,0,17,0,193,0,253,0,44,0,234,0,0,0,18,0,0,0,215,0,154,0,0,0,104,0,59,0,102,0,0,0,0,0,67,0,141,0,245,0,66,0,65,0,98,0,124,0,0,0,0,0,148,0,7,0,233,0,188,0,19,0,0,0,195,0,254,0,81,0,40,0,50,0,60,0,183,0,11,0,19,0,47,0,0,0,203,0,0,0,243,0,238,0,202,0,0,0,3,0,176,0,127,0,69,0,147,0,0,0,146,0,95,0,0,0,6,0,183,0,0,0,77,0,183,0,0,0,0,0,84,0,132,0,73,0,0,0,0,0,0,0,5,0,66,0,100,0,138,0,208,0,218,0,177,0,175,0,3,0,213,0,166,0,23,0,126,0,219,0,82,0,245,0,62,0,0,0,0,0,210,0,130,0,18,0,184,0,185,0,101,0,113,0,151,0,95,0,147,0,0,0,0,0,212,0,184,0,15,0,250,0,152,0,65,0,0,0,105,0,168,0,68,0,76,0,0,0,64,0,174,0,157,0,223,0,0,0,174,0,0,0,46,0,112,0,0,0,64,0,79,0,76,0,2,0,25,0,0,0,247,0,212,0,0,0,0,0,81,0,132,0,164,0,126,0,34,0,0,0,165,0,66,0,134,0,25,0,63,0,0,0,201,0,0,0,240,0,2,0,0,0,32,0,132,0,232,0,0,0,67,0,250,0,130,0,106,0,84,0,250,0,41,0,240,0,196,0,195,0,132,0,93,0,138,0,122,0,198,0,0,0,226,0,135,0,55,0,8,0,52,0,0,0,80,0,152,0,252,0,3,0,0,0,217,0,166,0,166,0,202,0,0,0,102,0,0,0,158,0,72,0,0,0,171,0,189,0,0,0,252,0,0,0,114,0,198,0,243,0,122,0,105,0,217,0,204,0,0,0,7,0,180,0,15,0,0,0,22,0,228,0,70,0,137,0,0,0,149,0,0,0,162,0,230,0,0,0,0,0,31,0,166,0,82,0,95,0,147,0,118,0,145,0,0,0,126,0,113,0,185,0,0,0,0,0,137,0,216,0,0,0,144,0,105,0,212,0,0,0,115,0,128,0,236,0,196,0,243,0,51,0,118,0,79,0,78,0,99,0,49,0,92,0,98,0,8,0,63,0,0,0,104,0,168,0,116,0,98,0,86,0,117,0,225,0,178,0,106,0,209,0,134,0,0,0,49,0,161,0,232,0,0,0,188,0,0,0,0,0,54,0,0,0,155,0,0,0,51,0,139,0,34,0,5,0,69,0,23,0,106,0,83,0,0,0,206,0,118,0,169,0,131,0,139,0,6,0,49,0,210,0,141,0,0,0,202,0,5,0,0,0,18,0,124,0,217,0,0,0,225,0,0,0,216,0,249,0,194,0,7,0,130,0,16,0,227,0,184,0,172,0,178,0,223,0,36,0,17,0,37,0,136,0,98,0,12,0,153,0,234,0,125,0,242,0,233,0,225,0,73,0,164,0,206,0,2,0,185,0,59,0,178,0,125,0,154,0,75,0,0,0,141,0,162,0,113,0,56,0,0,0,201,0,28,0,127,0,0,0,10,0,64,0,156,0,75,0,41,0,59,0,206,0,0,0,5,0,0,0,0,0,2,0,0,0,251,0,147,0,26,0,134,0,231,0,0,0,146,0,32,0,0,0,136,0,202,0,195,0,20,0,14,0,11,0,96,0,25,0,163,0,199,0,75,0,57,0,217,0,49,0,236,0,12,0,190,0,212,0,50,0,25,0,193,0,77,0,88,0,170,0,171,0,151,0,207,0,145,0,0,0,242,0,178,0,119,0,31,0,32,0,172,0,0,0,244,0,189,0,190,0,2,0,145,0,0,0,0,0,141,0,209,0,246,0,208,0,139,0,169,0,59,0,95,0,0,0,0,0,0,0,171,0,27,0,166,0,246,0,245,0,70,0,239,0,179,0,213,0,0,0,183,0,156,0,0,0,0,0,160,0,226,0,34,0,99,0,165,0,172,0,0,0,0,0,215,0,243,0,0,0,0,0,178,0,228,0,144,0,169,0,167,0,0,0,151,0,143,0,142,0,125,0,64,0,8,0,45,0,169,0,58,0,0,0,102,0,75,0,151,0,107,0,85,0,233,0,55,0,248,0,123,0,0,0,19,0,180,0,184,0,137,0,0,0,28,0,125,0,133,0,231,0,0,0,117,0,0,0,201,0,246,0,81,0,53,0,251,0,41,0,39,0,0,0,117,0,85,0,224,0,35,0,0,0,70,0,180,0,30,0,36,0,130,0,0,0,219,0,0,0,52,0,0,0,189,0,112,0,187,0,185,0,198,0,190,0,49,0,141,0,123,0,105,0,84,0,0,0,151,0,203,0,195,0,201,0,128,0,0,0,53,0,123,0,70,0,13,0,209,0,114,0,0,0,48,0,132,0,141,0,203,0,7,0,251,0,178,0,45,0,51,0,25,0,196,0,130,0,183,0,55,0,238,0,219,0,180,0,27,0,38,0,58,0,162,0,250,0,156,0,235,0,180,0,55,0,212,0,78,0,14,0,229,0,142,0,87,0,243,0,15,0,4,0,0,0,31,0,220,0,0,0,179,0,93,0,171,0,229,0,64,0,226,0,249,0,226,0,108,0,0,0,0,0,0,0,4,0,234,0,21,0,0,0,15,0,138,0,151,0,221,0,34,0,86,0,224,0,0,0,0,0,167,0,202,0,240,0,116,0,0,0,0,0,248,0,0,0,187,0,81,0,249,0,15,0,72,0,244,0,177,0,0,0,170,0,105,0,252,0,44,0,169,0,198,0,107,0,0,0,251,0,106,0,222,0,5,0,0,0,6,0,89,0,175,0,195,0,3,0,198,0,31,0,60,0,193,0,164,0,46,0,73,0,0,0,82,0,220,0);
signal scenario_full  : scenario_type := (22,31,22,30,106,31,202,31,14,31,103,31,239,31,22,31,47,31,47,30,201,31,135,31,238,31,238,30,116,31,206,31,31,31,31,30,31,29,247,31,247,30,222,31,204,31,195,31,154,31,163,31,107,31,234,31,174,31,120,31,134,31,183,31,152,31,152,30,123,31,131,31,146,31,89,31,145,31,162,31,221,31,194,31,194,30,231,31,255,31,227,31,202,31,126,31,56,31,136,31,190,31,203,31,65,31,144,31,144,30,71,31,23,31,23,30,55,31,167,31,33,31,195,31,195,30,215,31,95,31,128,31,191,31,202,31,202,30,202,29,6,31,179,31,241,31,241,30,30,31,248,31,164,31,164,30,17,31,153,31,153,30,147,31,147,30,234,31,234,30,154,31,207,31,226,31,226,30,226,29,224,31,83,31,118,31,118,30,10,31,31,31,31,30,36,31,172,31,113,31,97,31,49,31,49,30,196,31,196,30,177,31,54,31,202,31,202,30,202,29,202,28,57,31,28,31,66,31,66,30,244,31,107,31,107,30,107,29,168,31,168,30,230,31,79,31,79,30,146,31,161,31,161,30,219,31,93,31,85,31,154,31,148,31,39,31,149,31,105,31,39,31,28,31,83,31,169,31,73,31,89,31,245,31,245,30,245,29,255,31,222,31,232,31,158,31,189,31,222,31,65,31,65,30,233,31,128,31,49,31,236,31,33,31,33,30,53,31,53,30,3,31,198,31,198,30,228,31,196,31,205,31,229,31,64,31,162,31,162,30,125,31,62,31,180,31,180,30,110,31,106,31,106,30,210,31,210,30,61,31,150,31,196,31,225,31,251,31,115,31,115,30,233,31,75,31,226,31,76,31,213,31,223,31,223,30,10,31,145,31,15,31,96,31,31,31,11,31,10,31,105,31,245,31,245,30,245,29,186,31,171,31,222,31,148,31,75,31,51,31,247,31,32,31,226,31,216,31,216,30,67,31,238,31,238,30,222,31,152,31,82,31,53,31,53,30,184,31,109,31,161,31,161,30,95,31,136,31,233,31,113,31,44,31,234,31,234,30,173,31,183,31,5,31,5,30,171,31,106,31,106,30,230,31,32,31,172,31,172,30,93,31,93,30,35,31,35,30,105,31,93,31,93,30,23,31,120,31,76,31,190,31,190,30,98,31,98,30,149,31,149,30,149,29,147,31,147,30,167,31,102,31,183,31,34,31,34,30,9,31,134,31,161,31,48,31,48,30,225,31,235,31,152,31,15,31,172,31,53,31,89,31,93,31,35,31,34,31,34,30,187,31,209,31,209,30,136,31,136,30,166,31,166,30,97,31,192,31,192,30,31,31,31,30,31,29,100,31,100,30,134,31,212,31,12,31,12,30,235,31,20,31,226,31,226,30,117,31,141,31,55,31,234,31,107,31,182,31,36,31,64,31,57,31,56,31,66,31,76,31,61,31,199,31,52,31,52,30,236,31,116,31,17,31,193,31,253,31,44,31,234,31,234,30,18,31,18,30,215,31,154,31,154,30,104,31,59,31,102,31,102,30,102,29,67,31,141,31,245,31,66,31,65,31,98,31,124,31,124,30,124,29,148,31,7,31,233,31,188,31,19,31,19,30,195,31,254,31,81,31,40,31,50,31,60,31,183,31,11,31,19,31,47,31,47,30,203,31,203,30,243,31,238,31,202,31,202,30,3,31,176,31,127,31,69,31,147,31,147,30,146,31,95,31,95,30,6,31,183,31,183,30,77,31,183,31,183,30,183,29,84,31,132,31,73,31,73,30,73,29,73,28,5,31,66,31,100,31,138,31,208,31,218,31,177,31,175,31,3,31,213,31,166,31,23,31,126,31,219,31,82,31,245,31,62,31,62,30,62,29,210,31,130,31,18,31,184,31,185,31,101,31,113,31,151,31,95,31,147,31,147,30,147,29,212,31,184,31,15,31,250,31,152,31,65,31,65,30,105,31,168,31,68,31,76,31,76,30,64,31,174,31,157,31,223,31,223,30,174,31,174,30,46,31,112,31,112,30,64,31,79,31,76,31,2,31,25,31,25,30,247,31,212,31,212,30,212,29,81,31,132,31,164,31,126,31,34,31,34,30,165,31,66,31,134,31,25,31,63,31,63,30,201,31,201,30,240,31,2,31,2,30,32,31,132,31,232,31,232,30,67,31,250,31,130,31,106,31,84,31,250,31,41,31,240,31,196,31,195,31,132,31,93,31,138,31,122,31,198,31,198,30,226,31,135,31,55,31,8,31,52,31,52,30,80,31,152,31,252,31,3,31,3,30,217,31,166,31,166,31,202,31,202,30,102,31,102,30,158,31,72,31,72,30,171,31,189,31,189,30,252,31,252,30,114,31,198,31,243,31,122,31,105,31,217,31,204,31,204,30,7,31,180,31,15,31,15,30,22,31,228,31,70,31,137,31,137,30,149,31,149,30,162,31,230,31,230,30,230,29,31,31,166,31,82,31,95,31,147,31,118,31,145,31,145,30,126,31,113,31,185,31,185,30,185,29,137,31,216,31,216,30,144,31,105,31,212,31,212,30,115,31,128,31,236,31,196,31,243,31,51,31,118,31,79,31,78,31,99,31,49,31,92,31,98,31,8,31,63,31,63,30,104,31,168,31,116,31,98,31,86,31,117,31,225,31,178,31,106,31,209,31,134,31,134,30,49,31,161,31,232,31,232,30,188,31,188,30,188,29,54,31,54,30,155,31,155,30,51,31,139,31,34,31,5,31,69,31,23,31,106,31,83,31,83,30,206,31,118,31,169,31,131,31,139,31,6,31,49,31,210,31,141,31,141,30,202,31,5,31,5,30,18,31,124,31,217,31,217,30,225,31,225,30,216,31,249,31,194,31,7,31,130,31,16,31,227,31,184,31,172,31,178,31,223,31,36,31,17,31,37,31,136,31,98,31,12,31,153,31,234,31,125,31,242,31,233,31,225,31,73,31,164,31,206,31,2,31,185,31,59,31,178,31,125,31,154,31,75,31,75,30,141,31,162,31,113,31,56,31,56,30,201,31,28,31,127,31,127,30,10,31,64,31,156,31,75,31,41,31,59,31,206,31,206,30,5,31,5,30,5,29,2,31,2,30,251,31,147,31,26,31,134,31,231,31,231,30,146,31,32,31,32,30,136,31,202,31,195,31,20,31,14,31,11,31,96,31,25,31,163,31,199,31,75,31,57,31,217,31,49,31,236,31,12,31,190,31,212,31,50,31,25,31,193,31,77,31,88,31,170,31,171,31,151,31,207,31,145,31,145,30,242,31,178,31,119,31,31,31,32,31,172,31,172,30,244,31,189,31,190,31,2,31,145,31,145,30,145,29,141,31,209,31,246,31,208,31,139,31,169,31,59,31,95,31,95,30,95,29,95,28,171,31,27,31,166,31,246,31,245,31,70,31,239,31,179,31,213,31,213,30,183,31,156,31,156,30,156,29,160,31,226,31,34,31,99,31,165,31,172,31,172,30,172,29,215,31,243,31,243,30,243,29,178,31,228,31,144,31,169,31,167,31,167,30,151,31,143,31,142,31,125,31,64,31,8,31,45,31,169,31,58,31,58,30,102,31,75,31,151,31,107,31,85,31,233,31,55,31,248,31,123,31,123,30,19,31,180,31,184,31,137,31,137,30,28,31,125,31,133,31,231,31,231,30,117,31,117,30,201,31,246,31,81,31,53,31,251,31,41,31,39,31,39,30,117,31,85,31,224,31,35,31,35,30,70,31,180,31,30,31,36,31,130,31,130,30,219,31,219,30,52,31,52,30,189,31,112,31,187,31,185,31,198,31,190,31,49,31,141,31,123,31,105,31,84,31,84,30,151,31,203,31,195,31,201,31,128,31,128,30,53,31,123,31,70,31,13,31,209,31,114,31,114,30,48,31,132,31,141,31,203,31,7,31,251,31,178,31,45,31,51,31,25,31,196,31,130,31,183,31,55,31,238,31,219,31,180,31,27,31,38,31,58,31,162,31,250,31,156,31,235,31,180,31,55,31,212,31,78,31,14,31,229,31,142,31,87,31,243,31,15,31,4,31,4,30,31,31,220,31,220,30,179,31,93,31,171,31,229,31,64,31,226,31,249,31,226,31,108,31,108,30,108,29,108,28,4,31,234,31,21,31,21,30,15,31,138,31,151,31,221,31,34,31,86,31,224,31,224,30,224,29,167,31,202,31,240,31,116,31,116,30,116,29,248,31,248,30,187,31,81,31,249,31,15,31,72,31,244,31,177,31,177,30,170,31,105,31,252,31,44,31,169,31,198,31,107,31,107,30,251,31,106,31,222,31,5,31,5,30,6,31,89,31,175,31,195,31,3,31,198,31,31,31,60,31,193,31,164,31,46,31,73,31,73,30,82,31,220,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
