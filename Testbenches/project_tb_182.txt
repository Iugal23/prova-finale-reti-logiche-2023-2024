-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 550;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,20,0,76,0,176,0,179,0,105,0,130,0,127,0,114,0,140,0,6,0,129,0,0,0,0,0,221,0,88,0,37,0,60,0,200,0,89,0,241,0,0,0,216,0,28,0,237,0,218,0,121,0,49,0,0,0,249,0,124,0,162,0,245,0,193,0,159,0,150,0,90,0,192,0,198,0,159,0,235,0,180,0,0,0,127,0,118,0,0,0,63,0,176,0,96,0,154,0,0,0,107,0,0,0,0,0,251,0,65,0,150,0,42,0,177,0,139,0,68,0,134,0,2,0,157,0,48,0,154,0,247,0,92,0,233,0,0,0,58,0,51,0,199,0,179,0,230,0,128,0,0,0,132,0,0,0,64,0,0,0,141,0,196,0,0,0,163,0,211,0,187,0,237,0,93,0,22,0,99,0,81,0,14,0,121,0,44,0,127,0,192,0,64,0,255,0,0,0,0,0,89,0,0,0,49,0,0,0,0,0,99,0,0,0,91,0,86,0,0,0,58,0,42,0,29,0,14,0,245,0,222,0,218,0,187,0,0,0,205,0,0,0,0,0,19,0,156,0,0,0,59,0,117,0,0,0,0,0,92,0,10,0,187,0,46,0,192,0,87,0,220,0,183,0,210,0,64,0,137,0,37,0,138,0,0,0,0,0,8,0,20,0,141,0,101,0,0,0,103,0,24,0,247,0,0,0,167,0,43,0,191,0,0,0,247,0,6,0,48,0,8,0,0,0,231,0,44,0,248,0,3,0,126,0,89,0,126,0,0,0,84,0,214,0,217,0,206,0,162,0,0,0,2,0,247,0,82,0,229,0,71,0,74,0,131,0,34,0,192,0,182,0,211,0,62,0,148,0,197,0,167,0,12,0,201,0,65,0,88,0,238,0,149,0,219,0,0,0,0,0,0,0,128,0,234,0,108,0,40,0,0,0,252,0,54,0,245,0,40,0,219,0,112,0,189,0,141,0,164,0,149,0,137,0,169,0,0,0,0,0,230,0,239,0,29,0,0,0,0,0,0,0,181,0,0,0,0,0,0,0,0,0,48,0,106,0,63,0,182,0,78,0,180,0,218,0,0,0,17,0,84,0,157,0,56,0,180,0,0,0,93,0,118,0,0,0,44,0,247,0,252,0,225,0,143,0,0,0,4,0,112,0,61,0,246,0,59,0,219,0,250,0,160,0,222,0,243,0,135,0,198,0,93,0,214,0,0,0,0,0,104,0,0,0,0,0,197,0,132,0,28,0,138,0,203,0,203,0,113,0,0,0,45,0,216,0,56,0,125,0,53,0,0,0,244,0,128,0,156,0,82,0,211,0,10,0,0,0,52,0,0,0,0,0,82,0,149,0,17,0,0,0,61,0,235,0,82,0,183,0,48,0,3,0,0,0,236,0,0,0,44,0,138,0,43,0,206,0,65,0,0,0,0,0,190,0,247,0,40,0,148,0,105,0,162,0,0,0,212,0,99,0,151,0,174,0,188,0,123,0,192,0,205,0,163,0,85,0,73,0,143,0,72,0,0,0,221,0,221,0,0,0,86,0,169,0,0,0,250,0,241,0,29,0,0,0,204,0,6,0,136,0,250,0,165,0,0,0,202,0,0,0,2,0,25,0,55,0,120,0,237,0,89,0,228,0,223,0,35,0,26,0,167,0,82,0,165,0,0,0,157,0,237,0,184,0,83,0,106,0,33,0,122,0,58,0,99,0,236,0,185,0,91,0,112,0,94,0,0,0,0,0,36,0,41,0,194,0,134,0,87,0,187,0,0,0,212,0,0,0,204,0,108,0,32,0,5,0,87,0,107,0,72,0,109,0,106,0,0,0,75,0,76,0,26,0,3,0,172,0,127,0,80,0,58,0,46,0,217,0,146,0,187,0,160,0,118,0,151,0,78,0,219,0,0,0,231,0,123,0,0,0,44,0,143,0,36,0,30,0,153,0,36,0,86,0,121,0,80,0,204,0,193,0,135,0,55,0,49,0,0,0,99,0,80,0,229,0,194,0,162,0,45,0,41,0,36,0,101,0,180,0,185,0,43,0,92,0,38,0,210,0,46,0,207,0,3,0,104,0,13,0,110,0,196,0,166,0,39,0,195,0,137,0,10,0,0,0,225,0,244,0,129,0,30,0,9,0,0,0,121,0,70,0,119,0,116,0,19,0,224,0,222,0,0,0,0,0,228,0,0,0,53,0,29,0,0,0,0,0,0,0,21,0,124,0,37,0,203,0,101,0,135,0,163,0,179,0,240,0,61,0,0,0,217,0,191,0,181,0,208,0,0,0,0,0,24,0,240,0,248,0,193,0,41,0,78,0,28,0,219,0,233,0,204,0,64,0,0,0,0,0,227,0,204,0,129,0,2,0,29,0,199,0,224,0,95,0,0,0,207,0,206,0,195,0,0,0,92,0,168,0,0,0,198,0,173,0,44,0,174,0,173,0,115,0,91,0,0,0,73,0,44,0,0,0,0,0);
signal scenario_full  : scenario_type := (0,0,20,31,76,31,176,31,179,31,105,31,130,31,127,31,114,31,140,31,6,31,129,31,129,30,129,29,221,31,88,31,37,31,60,31,200,31,89,31,241,31,241,30,216,31,28,31,237,31,218,31,121,31,49,31,49,30,249,31,124,31,162,31,245,31,193,31,159,31,150,31,90,31,192,31,198,31,159,31,235,31,180,31,180,30,127,31,118,31,118,30,63,31,176,31,96,31,154,31,154,30,107,31,107,30,107,29,251,31,65,31,150,31,42,31,177,31,139,31,68,31,134,31,2,31,157,31,48,31,154,31,247,31,92,31,233,31,233,30,58,31,51,31,199,31,179,31,230,31,128,31,128,30,132,31,132,30,64,31,64,30,141,31,196,31,196,30,163,31,211,31,187,31,237,31,93,31,22,31,99,31,81,31,14,31,121,31,44,31,127,31,192,31,64,31,255,31,255,30,255,29,89,31,89,30,49,31,49,30,49,29,99,31,99,30,91,31,86,31,86,30,58,31,42,31,29,31,14,31,245,31,222,31,218,31,187,31,187,30,205,31,205,30,205,29,19,31,156,31,156,30,59,31,117,31,117,30,117,29,92,31,10,31,187,31,46,31,192,31,87,31,220,31,183,31,210,31,64,31,137,31,37,31,138,31,138,30,138,29,8,31,20,31,141,31,101,31,101,30,103,31,24,31,247,31,247,30,167,31,43,31,191,31,191,30,247,31,6,31,48,31,8,31,8,30,231,31,44,31,248,31,3,31,126,31,89,31,126,31,126,30,84,31,214,31,217,31,206,31,162,31,162,30,2,31,247,31,82,31,229,31,71,31,74,31,131,31,34,31,192,31,182,31,211,31,62,31,148,31,197,31,167,31,12,31,201,31,65,31,88,31,238,31,149,31,219,31,219,30,219,29,219,28,128,31,234,31,108,31,40,31,40,30,252,31,54,31,245,31,40,31,219,31,112,31,189,31,141,31,164,31,149,31,137,31,169,31,169,30,169,29,230,31,239,31,29,31,29,30,29,29,29,28,181,31,181,30,181,29,181,28,181,27,48,31,106,31,63,31,182,31,78,31,180,31,218,31,218,30,17,31,84,31,157,31,56,31,180,31,180,30,93,31,118,31,118,30,44,31,247,31,252,31,225,31,143,31,143,30,4,31,112,31,61,31,246,31,59,31,219,31,250,31,160,31,222,31,243,31,135,31,198,31,93,31,214,31,214,30,214,29,104,31,104,30,104,29,197,31,132,31,28,31,138,31,203,31,203,31,113,31,113,30,45,31,216,31,56,31,125,31,53,31,53,30,244,31,128,31,156,31,82,31,211,31,10,31,10,30,52,31,52,30,52,29,82,31,149,31,17,31,17,30,61,31,235,31,82,31,183,31,48,31,3,31,3,30,236,31,236,30,44,31,138,31,43,31,206,31,65,31,65,30,65,29,190,31,247,31,40,31,148,31,105,31,162,31,162,30,212,31,99,31,151,31,174,31,188,31,123,31,192,31,205,31,163,31,85,31,73,31,143,31,72,31,72,30,221,31,221,31,221,30,86,31,169,31,169,30,250,31,241,31,29,31,29,30,204,31,6,31,136,31,250,31,165,31,165,30,202,31,202,30,2,31,25,31,55,31,120,31,237,31,89,31,228,31,223,31,35,31,26,31,167,31,82,31,165,31,165,30,157,31,237,31,184,31,83,31,106,31,33,31,122,31,58,31,99,31,236,31,185,31,91,31,112,31,94,31,94,30,94,29,36,31,41,31,194,31,134,31,87,31,187,31,187,30,212,31,212,30,204,31,108,31,32,31,5,31,87,31,107,31,72,31,109,31,106,31,106,30,75,31,76,31,26,31,3,31,172,31,127,31,80,31,58,31,46,31,217,31,146,31,187,31,160,31,118,31,151,31,78,31,219,31,219,30,231,31,123,31,123,30,44,31,143,31,36,31,30,31,153,31,36,31,86,31,121,31,80,31,204,31,193,31,135,31,55,31,49,31,49,30,99,31,80,31,229,31,194,31,162,31,45,31,41,31,36,31,101,31,180,31,185,31,43,31,92,31,38,31,210,31,46,31,207,31,3,31,104,31,13,31,110,31,196,31,166,31,39,31,195,31,137,31,10,31,10,30,225,31,244,31,129,31,30,31,9,31,9,30,121,31,70,31,119,31,116,31,19,31,224,31,222,31,222,30,222,29,228,31,228,30,53,31,29,31,29,30,29,29,29,28,21,31,124,31,37,31,203,31,101,31,135,31,163,31,179,31,240,31,61,31,61,30,217,31,191,31,181,31,208,31,208,30,208,29,24,31,240,31,248,31,193,31,41,31,78,31,28,31,219,31,233,31,204,31,64,31,64,30,64,29,227,31,204,31,129,31,2,31,29,31,199,31,224,31,95,31,95,30,207,31,206,31,195,31,195,30,92,31,168,31,168,30,198,31,173,31,44,31,174,31,173,31,115,31,91,31,91,30,73,31,44,31,44,30,44,29);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
