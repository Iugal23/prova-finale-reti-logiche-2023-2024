-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 964;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (171,0,0,0,232,0,0,0,99,0,0,0,81,0,200,0,19,0,128,0,241,0,0,0,0,0,33,0,0,0,60,0,45,0,211,0,35,0,0,0,65,0,50,0,0,0,216,0,0,0,177,0,177,0,80,0,0,0,67,0,202,0,7,0,52,0,239,0,24,0,30,0,249,0,189,0,125,0,171,0,195,0,252,0,229,0,0,0,81,0,191,0,203,0,46,0,226,0,77,0,103,0,244,0,25,0,219,0,183,0,51,0,206,0,21,0,213,0,61,0,169,0,136,0,241,0,0,0,55,0,72,0,0,0,42,0,0,0,254,0,0,0,87,0,218,0,20,0,0,0,159,0,18,0,242,0,143,0,113,0,0,0,0,0,49,0,255,0,54,0,138,0,49,0,29,0,131,0,0,0,0,0,119,0,137,0,195,0,48,0,223,0,0,0,33,0,147,0,18,0,0,0,224,0,157,0,0,0,100,0,0,0,151,0,21,0,89,0,0,0,192,0,22,0,7,0,93,0,174,0,229,0,107,0,181,0,154,0,7,0,126,0,252,0,62,0,0,0,120,0,17,0,0,0,138,0,50,0,158,0,167,0,63,0,224,0,134,0,0,0,15,0,141,0,121,0,101,0,170,0,9,0,251,0,166,0,165,0,238,0,0,0,0,0,209,0,252,0,173,0,237,0,0,0,153,0,147,0,130,0,0,0,146,0,192,0,0,0,242,0,63,0,191,0,66,0,156,0,68,0,162,0,0,0,138,0,0,0,23,0,26,0,154,0,31,0,246,0,223,0,162,0,76,0,29,0,111,0,101,0,48,0,0,0,180,0,180,0,0,0,199,0,107,0,78,0,64,0,176,0,118,0,138,0,0,0,200,0,78,0,0,0,40,0,190,0,119,0,0,0,202,0,76,0,252,0,165,0,0,0,245,0,141,0,19,0,209,0,175,0,8,0,0,0,27,0,10,0,204,0,0,0,202,0,0,0,0,0,0,0,251,0,95,0,104,0,170,0,4,0,33,0,0,0,227,0,0,0,142,0,127,0,71,0,55,0,28,0,218,0,52,0,83,0,106,0,18,0,0,0,225,0,191,0,0,0,95,0,0,0,79,0,85,0,28,0,182,0,3,0,94,0,223,0,105,0,75,0,0,0,161,0,248,0,0,0,140,0,177,0,44,0,79,0,20,0,129,0,126,0,192,0,0,0,22,0,241,0,240,0,14,0,47,0,171,0,0,0,237,0,196,0,0,0,68,0,169,0,33,0,165,0,160,0,61,0,166,0,234,0,206,0,0,0,0,0,77,0,116,0,254,0,0,0,0,0,89,0,116,0,193,0,83,0,45,0,59,0,183,0,140,0,206,0,17,0,233,0,0,0,240,0,0,0,0,0,235,0,137,0,211,0,236,0,194,0,132,0,147,0,223,0,73,0,22,0,80,0,225,0,0,0,7,0,0,0,131,0,138,0,231,0,123,0,35,0,132,0,135,0,195,0,179,0,100,0,250,0,125,0,85,0,235,0,178,0,32,0,239,0,109,0,0,0,234,0,11,0,149,0,167,0,177,0,145,0,127,0,253,0,7,0,10,0,26,0,206,0,161,0,181,0,104,0,236,0,78,0,73,0,0,0,155,0,47,0,253,0,62,0,49,0,34,0,72,0,0,0,241,0,205,0,0,0,250,0,155,0,105,0,46,0,0,0,0,0,74,0,227,0,148,0,0,0,138,0,0,0,188,0,0,0,205,0,204,0,147,0,210,0,0,0,237,0,208,0,232,0,57,0,0,0,0,0,97,0,0,0,65,0,134,0,131,0,172,0,187,0,17,0,219,0,223,0,0,0,78,0,90,0,0,0,157,0,0,0,62,0,41,0,104,0,65,0,240,0,21,0,98,0,126,0,0,0,37,0,231,0,11,0,18,0,177,0,65,0,140,0,29,0,0,0,246,0,49,0,0,0,0,0,34,0,111,0,88,0,193,0,69,0,10,0,255,0,111,0,21,0,241,0,98,0,57,0,22,0,0,0,25,0,76,0,0,0,205,0,152,0,204,0,0,0,104,0,0,0,119,0,40,0,233,0,0,0,141,0,95,0,49,0,225,0,123,0,226,0,78,0,36,0,0,0,72,0,92,0,0,0,254,0,23,0,0,0,141,0,0,0,239,0,0,0,143,0,155,0,213,0,153,0,194,0,0,0,74,0,222,0,31,0,217,0,248,0,0,0,192,0,176,0,253,0,0,0,137,0,19,0,219,0,18,0,137,0,27,0,0,0,39,0,87,0,35,0,0,0,101,0,247,0,0,0,114,0,120,0,244,0,140,0,133,0,20,0,186,0,215,0,7,0,212,0,0,0,200,0,185,0,83,0,204,0,198,0,0,0,169,0,0,0,193,0,166,0,186,0,51,0,79,0,41,0,186,0,37,0,43,0,200,0,74,0,213,0,115,0,143,0,170,0,0,0,1,0,159,0,0,0,209,0,0,0,0,0,149,0,204,0,106,0,9,0,183,0,6,0,70,0,0,0,134,0,151,0,163,0,131,0,30,0,23,0,0,0,76,0,86,0,52,0,105,0,0,0,18,0,22,0,0,0,192,0,186,0,81,0,139,0,83,0,1,0,109,0,237,0,65,0,142,0,0,0,215,0,1,0,0,0,67,0,209,0,216,0,0,0,0,0,28,0,223,0,130,0,0,0,76,0,219,0,0,0,0,0,112,0,30,0,115,0,176,0,87,0,96,0,84,0,216,0,196,0,54,0,48,0,115,0,120,0,86,0,127,0,142,0,220,0,42,0,40,0,208,0,0,0,44,0,0,0,0,0,43,0,66,0,0,0,159,0,57,0,150,0,120,0,70,0,151,0,0,0,26,0,9,0,15,0,0,0,205,0,0,0,0,0,92,0,94,0,139,0,180,0,179,0,84,0,24,0,88,0,179,0,0,0,15,0,125,0,211,0,203,0,2,0,0,0,188,0,97,0,0,0,20,0,194,0,0,0,216,0,151,0,94,0,0,0,199,0,231,0,148,0,0,0,132,0,101,0,27,0,0,0,184,0,108,0,55,0,142,0,195,0,128,0,182,0,0,0,3,0,2,0,10,0,189,0,181,0,184,0,195,0,107,0,0,0,208,0,0,0,68,0,116,0,218,0,150,0,0,0,90,0,1,0,56,0,0,0,85,0,144,0,0,0,166,0,40,0,234,0,188,0,5,0,214,0,0,0,241,0,107,0,7,0,227,0,34,0,44,0,96,0,226,0,80,0,167,0,233,0,0,0,63,0,51,0,110,0,0,0,229,0,150,0,185,0,108,0,0,0,18,0,71,0,48,0,52,0,0,0,137,0,134,0,52,0,201,0,50,0,73,0,192,0,14,0,227,0,0,0,66,0,182,0,97,0,240,0,62,0,143,0,92,0,33,0,0,0,25,0,90,0,192,0,70,0,52,0,57,0,191,0,0,0,72,0,143,0,109,0,208,0,144,0,137,0,112,0,17,0,171,0,171,0,171,0,0,0,235,0,140,0,36,0,206,0,45,0,204,0,248,0,143,0,0,0,0,0,109,0,36,0,61,0,95,0,137,0,131,0,48,0,223,0,161,0,251,0,146,0,30,0,13,0,165,0,0,0,218,0,30,0,64,0,0,0,190,0,3,0,72,0,214,0,223,0,199,0,0,0,208,0,0,0,112,0,2,0,210,0,0,0,240,0,253,0,112,0,69,0,213,0,111,0,83,0,12,0,93,0,109,0,170,0,244,0,183,0,12,0,145,0,0,0,18,0,119,0,135,0,234,0,136,0,159,0,106,0,0,0,0,0,14,0,57,0,9,0,207,0,0,0,36,0,228,0,43,0,138,0,241,0,0,0,0,0,0,0,225,0,161,0,25,0,218,0,132,0,32,0,153,0,48,0,83,0,0,0,9,0,233,0,0,0,0,0,119,0,17,0,28,0,13,0,93,0,248,0,0,0,0,0,15,0,164,0,0,0,116,0,0,0,0,0,247,0,0,0,129,0,188,0,0,0,161,0,28,0,146,0,171,0,1,0,159,0,0,0,9,0,146,0,0,0,222,0,182,0,214,0,0,0,100,0,0,0,126,0,26,0,184,0,232,0,157,0,95,0,0,0,48,0,0,0,186,0,157,0,14,0,140,0,0,0,33,0,54,0,61,0,191,0,91,0,19,0,123,0,0,0,19,0,20,0,244,0,228,0,103,0,0,0,0,0,36,0,111,0,0,0,246,0,4,0,222,0,23,0,0,0,79,0,0,0,242,0,215,0,0,0,124,0,0,0,0,0,243,0,65,0,175,0,165,0,232,0,14,0,244,0,0,0,79,0,25,0);
signal scenario_full  : scenario_type := (171,31,171,30,232,31,232,30,99,31,99,30,81,31,200,31,19,31,128,31,241,31,241,30,241,29,33,31,33,30,60,31,45,31,211,31,35,31,35,30,65,31,50,31,50,30,216,31,216,30,177,31,177,31,80,31,80,30,67,31,202,31,7,31,52,31,239,31,24,31,30,31,249,31,189,31,125,31,171,31,195,31,252,31,229,31,229,30,81,31,191,31,203,31,46,31,226,31,77,31,103,31,244,31,25,31,219,31,183,31,51,31,206,31,21,31,213,31,61,31,169,31,136,31,241,31,241,30,55,31,72,31,72,30,42,31,42,30,254,31,254,30,87,31,218,31,20,31,20,30,159,31,18,31,242,31,143,31,113,31,113,30,113,29,49,31,255,31,54,31,138,31,49,31,29,31,131,31,131,30,131,29,119,31,137,31,195,31,48,31,223,31,223,30,33,31,147,31,18,31,18,30,224,31,157,31,157,30,100,31,100,30,151,31,21,31,89,31,89,30,192,31,22,31,7,31,93,31,174,31,229,31,107,31,181,31,154,31,7,31,126,31,252,31,62,31,62,30,120,31,17,31,17,30,138,31,50,31,158,31,167,31,63,31,224,31,134,31,134,30,15,31,141,31,121,31,101,31,170,31,9,31,251,31,166,31,165,31,238,31,238,30,238,29,209,31,252,31,173,31,237,31,237,30,153,31,147,31,130,31,130,30,146,31,192,31,192,30,242,31,63,31,191,31,66,31,156,31,68,31,162,31,162,30,138,31,138,30,23,31,26,31,154,31,31,31,246,31,223,31,162,31,76,31,29,31,111,31,101,31,48,31,48,30,180,31,180,31,180,30,199,31,107,31,78,31,64,31,176,31,118,31,138,31,138,30,200,31,78,31,78,30,40,31,190,31,119,31,119,30,202,31,76,31,252,31,165,31,165,30,245,31,141,31,19,31,209,31,175,31,8,31,8,30,27,31,10,31,204,31,204,30,202,31,202,30,202,29,202,28,251,31,95,31,104,31,170,31,4,31,33,31,33,30,227,31,227,30,142,31,127,31,71,31,55,31,28,31,218,31,52,31,83,31,106,31,18,31,18,30,225,31,191,31,191,30,95,31,95,30,79,31,85,31,28,31,182,31,3,31,94,31,223,31,105,31,75,31,75,30,161,31,248,31,248,30,140,31,177,31,44,31,79,31,20,31,129,31,126,31,192,31,192,30,22,31,241,31,240,31,14,31,47,31,171,31,171,30,237,31,196,31,196,30,68,31,169,31,33,31,165,31,160,31,61,31,166,31,234,31,206,31,206,30,206,29,77,31,116,31,254,31,254,30,254,29,89,31,116,31,193,31,83,31,45,31,59,31,183,31,140,31,206,31,17,31,233,31,233,30,240,31,240,30,240,29,235,31,137,31,211,31,236,31,194,31,132,31,147,31,223,31,73,31,22,31,80,31,225,31,225,30,7,31,7,30,131,31,138,31,231,31,123,31,35,31,132,31,135,31,195,31,179,31,100,31,250,31,125,31,85,31,235,31,178,31,32,31,239,31,109,31,109,30,234,31,11,31,149,31,167,31,177,31,145,31,127,31,253,31,7,31,10,31,26,31,206,31,161,31,181,31,104,31,236,31,78,31,73,31,73,30,155,31,47,31,253,31,62,31,49,31,34,31,72,31,72,30,241,31,205,31,205,30,250,31,155,31,105,31,46,31,46,30,46,29,74,31,227,31,148,31,148,30,138,31,138,30,188,31,188,30,205,31,204,31,147,31,210,31,210,30,237,31,208,31,232,31,57,31,57,30,57,29,97,31,97,30,65,31,134,31,131,31,172,31,187,31,17,31,219,31,223,31,223,30,78,31,90,31,90,30,157,31,157,30,62,31,41,31,104,31,65,31,240,31,21,31,98,31,126,31,126,30,37,31,231,31,11,31,18,31,177,31,65,31,140,31,29,31,29,30,246,31,49,31,49,30,49,29,34,31,111,31,88,31,193,31,69,31,10,31,255,31,111,31,21,31,241,31,98,31,57,31,22,31,22,30,25,31,76,31,76,30,205,31,152,31,204,31,204,30,104,31,104,30,119,31,40,31,233,31,233,30,141,31,95,31,49,31,225,31,123,31,226,31,78,31,36,31,36,30,72,31,92,31,92,30,254,31,23,31,23,30,141,31,141,30,239,31,239,30,143,31,155,31,213,31,153,31,194,31,194,30,74,31,222,31,31,31,217,31,248,31,248,30,192,31,176,31,253,31,253,30,137,31,19,31,219,31,18,31,137,31,27,31,27,30,39,31,87,31,35,31,35,30,101,31,247,31,247,30,114,31,120,31,244,31,140,31,133,31,20,31,186,31,215,31,7,31,212,31,212,30,200,31,185,31,83,31,204,31,198,31,198,30,169,31,169,30,193,31,166,31,186,31,51,31,79,31,41,31,186,31,37,31,43,31,200,31,74,31,213,31,115,31,143,31,170,31,170,30,1,31,159,31,159,30,209,31,209,30,209,29,149,31,204,31,106,31,9,31,183,31,6,31,70,31,70,30,134,31,151,31,163,31,131,31,30,31,23,31,23,30,76,31,86,31,52,31,105,31,105,30,18,31,22,31,22,30,192,31,186,31,81,31,139,31,83,31,1,31,109,31,237,31,65,31,142,31,142,30,215,31,1,31,1,30,67,31,209,31,216,31,216,30,216,29,28,31,223,31,130,31,130,30,76,31,219,31,219,30,219,29,112,31,30,31,115,31,176,31,87,31,96,31,84,31,216,31,196,31,54,31,48,31,115,31,120,31,86,31,127,31,142,31,220,31,42,31,40,31,208,31,208,30,44,31,44,30,44,29,43,31,66,31,66,30,159,31,57,31,150,31,120,31,70,31,151,31,151,30,26,31,9,31,15,31,15,30,205,31,205,30,205,29,92,31,94,31,139,31,180,31,179,31,84,31,24,31,88,31,179,31,179,30,15,31,125,31,211,31,203,31,2,31,2,30,188,31,97,31,97,30,20,31,194,31,194,30,216,31,151,31,94,31,94,30,199,31,231,31,148,31,148,30,132,31,101,31,27,31,27,30,184,31,108,31,55,31,142,31,195,31,128,31,182,31,182,30,3,31,2,31,10,31,189,31,181,31,184,31,195,31,107,31,107,30,208,31,208,30,68,31,116,31,218,31,150,31,150,30,90,31,1,31,56,31,56,30,85,31,144,31,144,30,166,31,40,31,234,31,188,31,5,31,214,31,214,30,241,31,107,31,7,31,227,31,34,31,44,31,96,31,226,31,80,31,167,31,233,31,233,30,63,31,51,31,110,31,110,30,229,31,150,31,185,31,108,31,108,30,18,31,71,31,48,31,52,31,52,30,137,31,134,31,52,31,201,31,50,31,73,31,192,31,14,31,227,31,227,30,66,31,182,31,97,31,240,31,62,31,143,31,92,31,33,31,33,30,25,31,90,31,192,31,70,31,52,31,57,31,191,31,191,30,72,31,143,31,109,31,208,31,144,31,137,31,112,31,17,31,171,31,171,31,171,31,171,30,235,31,140,31,36,31,206,31,45,31,204,31,248,31,143,31,143,30,143,29,109,31,36,31,61,31,95,31,137,31,131,31,48,31,223,31,161,31,251,31,146,31,30,31,13,31,165,31,165,30,218,31,30,31,64,31,64,30,190,31,3,31,72,31,214,31,223,31,199,31,199,30,208,31,208,30,112,31,2,31,210,31,210,30,240,31,253,31,112,31,69,31,213,31,111,31,83,31,12,31,93,31,109,31,170,31,244,31,183,31,12,31,145,31,145,30,18,31,119,31,135,31,234,31,136,31,159,31,106,31,106,30,106,29,14,31,57,31,9,31,207,31,207,30,36,31,228,31,43,31,138,31,241,31,241,30,241,29,241,28,225,31,161,31,25,31,218,31,132,31,32,31,153,31,48,31,83,31,83,30,9,31,233,31,233,30,233,29,119,31,17,31,28,31,13,31,93,31,248,31,248,30,248,29,15,31,164,31,164,30,116,31,116,30,116,29,247,31,247,30,129,31,188,31,188,30,161,31,28,31,146,31,171,31,1,31,159,31,159,30,9,31,146,31,146,30,222,31,182,31,214,31,214,30,100,31,100,30,126,31,26,31,184,31,232,31,157,31,95,31,95,30,48,31,48,30,186,31,157,31,14,31,140,31,140,30,33,31,54,31,61,31,191,31,91,31,19,31,123,31,123,30,19,31,20,31,244,31,228,31,103,31,103,30,103,29,36,31,111,31,111,30,246,31,4,31,222,31,23,31,23,30,79,31,79,30,242,31,215,31,215,30,124,31,124,30,124,29,243,31,65,31,175,31,165,31,232,31,14,31,244,31,244,30,79,31,25,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
