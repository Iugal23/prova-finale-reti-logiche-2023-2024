-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 798;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (121,0,19,0,232,0,220,0,0,0,55,0,0,0,20,0,35,0,153,0,140,0,0,0,1,0,137,0,138,0,202,0,28,0,147,0,0,0,183,0,126,0,236,0,96,0,0,0,129,0,129,0,171,0,39,0,159,0,246,0,0,0,210,0,255,0,226,0,0,0,203,0,113,0,0,0,146,0,138,0,0,0,231,0,157,0,132,0,86,0,194,0,149,0,210,0,241,0,0,0,68,0,0,0,0,0,144,0,95,0,0,0,71,0,0,0,132,0,0,0,222,0,246,0,0,0,5,0,55,0,0,0,206,0,255,0,82,0,0,0,234,0,0,0,68,0,156,0,91,0,75,0,115,0,38,0,0,0,112,0,253,0,92,0,158,0,31,0,133,0,36,0,8,0,1,0,162,0,21,0,92,0,2,0,110,0,95,0,180,0,209,0,122,0,192,0,0,0,163,0,69,0,246,0,79,0,150,0,17,0,224,0,49,0,0,0,0,0,202,0,0,0,49,0,166,0,63,0,119,0,50,0,91,0,202,0,136,0,178,0,139,0,219,0,244,0,85,0,139,0,154,0,154,0,181,0,250,0,127,0,106,0,42,0,19,0,15,0,172,0,81,0,58,0,32,0,0,0,163,0,136,0,156,0,172,0,171,0,112,0,46,0,206,0,30,0,249,0,21,0,34,0,14,0,207,0,40,0,75,0,60,0,0,0,213,0,126,0,0,0,0,0,178,0,0,0,205,0,7,0,226,0,18,0,255,0,1,0,186,0,0,0,140,0,0,0,108,0,2,0,163,0,5,0,56,0,191,0,0,0,88,0,24,0,138,0,0,0,248,0,134,0,38,0,184,0,80,0,97,0,0,0,146,0,119,0,16,0,0,0,0,0,86,0,128,0,62,0,196,0,0,0,87,0,208,0,0,0,156,0,149,0,0,0,0,0,205,0,0,0,127,0,232,0,106,0,25,0,224,0,135,0,19,0,253,0,25,0,0,0,99,0,62,0,1,0,25,0,0,0,208,0,0,0,211,0,211,0,27,0,191,0,183,0,11,0,32,0,0,0,175,0,173,0,63,0,0,0,105,0,207,0,247,0,166,0,215,0,121,0,32,0,106,0,45,0,248,0,64,0,196,0,210,0,168,0,148,0,194,0,121,0,0,0,13,0,250,0,0,0,183,0,115,0,0,0,162,0,161,0,172,0,187,0,0,0,243,0,152,0,0,0,172,0,60,0,0,0,0,0,93,0,110,0,5,0,73,0,78,0,200,0,17,0,109,0,203,0,0,0,148,0,118,0,237,0,161,0,20,0,10,0,243,0,178,0,223,0,85,0,89,0,95,0,48,0,160,0,0,0,168,0,69,0,0,0,67,0,53,0,222,0,77,0,37,0,115,0,195,0,0,0,240,0,0,0,0,0,235,0,78,0,46,0,179,0,0,0,0,0,67,0,222,0,178,0,161,0,147,0,32,0,93,0,195,0,205,0,0,0,246,0,0,0,195,0,7,0,85,0,0,0,0,0,202,0,150,0,79,0,230,0,78,0,0,0,0,0,0,0,0,0,102,0,0,0,187,0,135,0,187,0,0,0,237,0,15,0,151,0,161,0,250,0,174,0,240,0,127,0,78,0,199,0,251,0,27,0,0,0,180,0,40,0,231,0,121,0,237,0,226,0,231,0,51,0,27,0,0,0,0,0,0,0,7,0,80,0,232,0,73,0,42,0,87,0,64,0,0,0,166,0,7,0,172,0,233,0,42,0,92,0,87,0,113,0,143,0,126,0,243,0,189,0,67,0,203,0,204,0,197,0,221,0,172,0,175,0,141,0,51,0,0,0,154,0,34,0,219,0,203,0,88,0,183,0,87,0,0,0,207,0,120,0,57,0,48,0,48,0,27,0,166,0,99,0,205,0,0,0,133,0,37,0,216,0,56,0,105,0,177,0,250,0,13,0,22,0,0,0,152,0,148,0,91,0,43,0,28,0,155,0,0,0,167,0,180,0,184,0,16,0,230,0,5,0,13,0,185,0,113,0,140,0,33,0,219,0,61,0,120,0,242,0,0,0,171,0,0,0,123,0,5,0,0,0,16,0,234,0,78,0,122,0,117,0,176,0,114,0,160,0,60,0,113,0,251,0,55,0,100,0,31,0,75,0,192,0,0,0,254,0,88,0,90,0,64,0,11,0,143,0,233,0,173,0,85,0,169,0,0,0,143,0,56,0,17,0,107,0,41,0,0,0,177,0,145,0,0,0,197,0,94,0,225,0,237,0,0,0,3,0,5,0,0,0,0,0,83,0,145,0,173,0,120,0,77,0,127,0,116,0,39,0,0,0,113,0,131,0,158,0,161,0,108,0,150,0,0,0,0,0,217,0,152,0,137,0,52,0,0,0,222,0,58,0,0,0,236,0,140,0,0,0,105,0,119,0,103,0,189,0,64,0,65,0,120,0,227,0,0,0,202,0,74,0,117,0,65,0,242,0,69,0,96,0,88,0,172,0,0,0,107,0,216,0,48,0,30,0,34,0,161,0,60,0,0,0,0,0,0,0,144,0,85,0,218,0,254,0,72,0,66,0,41,0,0,0,234,0,45,0,54,0,0,0,0,0,0,0,251,0,143,0,0,0,185,0,173,0,0,0,149,0,233,0,173,0,130,0,8,0,9,0,40,0,190,0,154,0,0,0,0,0,163,0,91,0,23,0,157,0,52,0,121,0,193,0,190,0,142,0,182,0,0,0,22,0,0,0,238,0,172,0,0,0,193,0,163,0,223,0,10,0,245,0,168,0,153,0,164,0,79,0,0,0,86,0,0,0,0,0,242,0,175,0,0,0,190,0,69,0,59,0,0,0,0,0,54,0,28,0,64,0,153,0,155,0,24,0,77,0,12,0,109,0,26,0,36,0,240,0,220,0,75,0,28,0,6,0,0,0,80,0,151,0,235,0,214,0,244,0,0,0,186,0,0,0,1,0,145,0,0,0,0,0,93,0,0,0,0,0,207,0,116,0,62,0,0,0,22,0,0,0,127,0,179,0,224,0,235,0,38,0,180,0,74,0,137,0,36,0,189,0,49,0,200,0,228,0,166,0,17,0,141,0,63,0,7,0,110,0,87,0,230,0,1,0,209,0,192,0,233,0,0,0,106,0,65,0,69,0,38,0,137,0,0,0,0,0,0,0,0,0,66,0,0,0,78,0,85,0,39,0,52,0,0,0,184,0,0,0,0,0,152,0,190,0,28,0,188,0,157,0,20,0,0,0,67,0,108,0,12,0,237,0,0,0,199,0,0,0,37,0,203,0,36,0,90,0,88,0,72,0,243,0,107,0,7,0,206,0,0,0,133,0,0,0,0,0,145,0,0,0,0,0,87,0,0,0,38,0,0,0,124,0,0,0,0,0,46,0,211,0,165,0,72,0,150,0,41,0,54,0,131,0,198,0,41,0,3,0,160,0,203,0,254,0,0,0,246,0,193,0,18,0,75,0,204,0,0,0,14,0,37,0,15,0,208,0,65,0,0,0,0,0,170,0,21,0,8,0,240,0,40,0,237,0,223,0,223,0,0,0,0,0,182,0,38,0,0,0,97,0,253,0);
signal scenario_full  : scenario_type := (121,31,19,31,232,31,220,31,220,30,55,31,55,30,20,31,35,31,153,31,140,31,140,30,1,31,137,31,138,31,202,31,28,31,147,31,147,30,183,31,126,31,236,31,96,31,96,30,129,31,129,31,171,31,39,31,159,31,246,31,246,30,210,31,255,31,226,31,226,30,203,31,113,31,113,30,146,31,138,31,138,30,231,31,157,31,132,31,86,31,194,31,149,31,210,31,241,31,241,30,68,31,68,30,68,29,144,31,95,31,95,30,71,31,71,30,132,31,132,30,222,31,246,31,246,30,5,31,55,31,55,30,206,31,255,31,82,31,82,30,234,31,234,30,68,31,156,31,91,31,75,31,115,31,38,31,38,30,112,31,253,31,92,31,158,31,31,31,133,31,36,31,8,31,1,31,162,31,21,31,92,31,2,31,110,31,95,31,180,31,209,31,122,31,192,31,192,30,163,31,69,31,246,31,79,31,150,31,17,31,224,31,49,31,49,30,49,29,202,31,202,30,49,31,166,31,63,31,119,31,50,31,91,31,202,31,136,31,178,31,139,31,219,31,244,31,85,31,139,31,154,31,154,31,181,31,250,31,127,31,106,31,42,31,19,31,15,31,172,31,81,31,58,31,32,31,32,30,163,31,136,31,156,31,172,31,171,31,112,31,46,31,206,31,30,31,249,31,21,31,34,31,14,31,207,31,40,31,75,31,60,31,60,30,213,31,126,31,126,30,126,29,178,31,178,30,205,31,7,31,226,31,18,31,255,31,1,31,186,31,186,30,140,31,140,30,108,31,2,31,163,31,5,31,56,31,191,31,191,30,88,31,24,31,138,31,138,30,248,31,134,31,38,31,184,31,80,31,97,31,97,30,146,31,119,31,16,31,16,30,16,29,86,31,128,31,62,31,196,31,196,30,87,31,208,31,208,30,156,31,149,31,149,30,149,29,205,31,205,30,127,31,232,31,106,31,25,31,224,31,135,31,19,31,253,31,25,31,25,30,99,31,62,31,1,31,25,31,25,30,208,31,208,30,211,31,211,31,27,31,191,31,183,31,11,31,32,31,32,30,175,31,173,31,63,31,63,30,105,31,207,31,247,31,166,31,215,31,121,31,32,31,106,31,45,31,248,31,64,31,196,31,210,31,168,31,148,31,194,31,121,31,121,30,13,31,250,31,250,30,183,31,115,31,115,30,162,31,161,31,172,31,187,31,187,30,243,31,152,31,152,30,172,31,60,31,60,30,60,29,93,31,110,31,5,31,73,31,78,31,200,31,17,31,109,31,203,31,203,30,148,31,118,31,237,31,161,31,20,31,10,31,243,31,178,31,223,31,85,31,89,31,95,31,48,31,160,31,160,30,168,31,69,31,69,30,67,31,53,31,222,31,77,31,37,31,115,31,195,31,195,30,240,31,240,30,240,29,235,31,78,31,46,31,179,31,179,30,179,29,67,31,222,31,178,31,161,31,147,31,32,31,93,31,195,31,205,31,205,30,246,31,246,30,195,31,7,31,85,31,85,30,85,29,202,31,150,31,79,31,230,31,78,31,78,30,78,29,78,28,78,27,102,31,102,30,187,31,135,31,187,31,187,30,237,31,15,31,151,31,161,31,250,31,174,31,240,31,127,31,78,31,199,31,251,31,27,31,27,30,180,31,40,31,231,31,121,31,237,31,226,31,231,31,51,31,27,31,27,30,27,29,27,28,7,31,80,31,232,31,73,31,42,31,87,31,64,31,64,30,166,31,7,31,172,31,233,31,42,31,92,31,87,31,113,31,143,31,126,31,243,31,189,31,67,31,203,31,204,31,197,31,221,31,172,31,175,31,141,31,51,31,51,30,154,31,34,31,219,31,203,31,88,31,183,31,87,31,87,30,207,31,120,31,57,31,48,31,48,31,27,31,166,31,99,31,205,31,205,30,133,31,37,31,216,31,56,31,105,31,177,31,250,31,13,31,22,31,22,30,152,31,148,31,91,31,43,31,28,31,155,31,155,30,167,31,180,31,184,31,16,31,230,31,5,31,13,31,185,31,113,31,140,31,33,31,219,31,61,31,120,31,242,31,242,30,171,31,171,30,123,31,5,31,5,30,16,31,234,31,78,31,122,31,117,31,176,31,114,31,160,31,60,31,113,31,251,31,55,31,100,31,31,31,75,31,192,31,192,30,254,31,88,31,90,31,64,31,11,31,143,31,233,31,173,31,85,31,169,31,169,30,143,31,56,31,17,31,107,31,41,31,41,30,177,31,145,31,145,30,197,31,94,31,225,31,237,31,237,30,3,31,5,31,5,30,5,29,83,31,145,31,173,31,120,31,77,31,127,31,116,31,39,31,39,30,113,31,131,31,158,31,161,31,108,31,150,31,150,30,150,29,217,31,152,31,137,31,52,31,52,30,222,31,58,31,58,30,236,31,140,31,140,30,105,31,119,31,103,31,189,31,64,31,65,31,120,31,227,31,227,30,202,31,74,31,117,31,65,31,242,31,69,31,96,31,88,31,172,31,172,30,107,31,216,31,48,31,30,31,34,31,161,31,60,31,60,30,60,29,60,28,144,31,85,31,218,31,254,31,72,31,66,31,41,31,41,30,234,31,45,31,54,31,54,30,54,29,54,28,251,31,143,31,143,30,185,31,173,31,173,30,149,31,233,31,173,31,130,31,8,31,9,31,40,31,190,31,154,31,154,30,154,29,163,31,91,31,23,31,157,31,52,31,121,31,193,31,190,31,142,31,182,31,182,30,22,31,22,30,238,31,172,31,172,30,193,31,163,31,223,31,10,31,245,31,168,31,153,31,164,31,79,31,79,30,86,31,86,30,86,29,242,31,175,31,175,30,190,31,69,31,59,31,59,30,59,29,54,31,28,31,64,31,153,31,155,31,24,31,77,31,12,31,109,31,26,31,36,31,240,31,220,31,75,31,28,31,6,31,6,30,80,31,151,31,235,31,214,31,244,31,244,30,186,31,186,30,1,31,145,31,145,30,145,29,93,31,93,30,93,29,207,31,116,31,62,31,62,30,22,31,22,30,127,31,179,31,224,31,235,31,38,31,180,31,74,31,137,31,36,31,189,31,49,31,200,31,228,31,166,31,17,31,141,31,63,31,7,31,110,31,87,31,230,31,1,31,209,31,192,31,233,31,233,30,106,31,65,31,69,31,38,31,137,31,137,30,137,29,137,28,137,27,66,31,66,30,78,31,85,31,39,31,52,31,52,30,184,31,184,30,184,29,152,31,190,31,28,31,188,31,157,31,20,31,20,30,67,31,108,31,12,31,237,31,237,30,199,31,199,30,37,31,203,31,36,31,90,31,88,31,72,31,243,31,107,31,7,31,206,31,206,30,133,31,133,30,133,29,145,31,145,30,145,29,87,31,87,30,38,31,38,30,124,31,124,30,124,29,46,31,211,31,165,31,72,31,150,31,41,31,54,31,131,31,198,31,41,31,3,31,160,31,203,31,254,31,254,30,246,31,193,31,18,31,75,31,204,31,204,30,14,31,37,31,15,31,208,31,65,31,65,30,65,29,170,31,21,31,8,31,240,31,40,31,237,31,223,31,223,31,223,30,223,29,182,31,38,31,38,30,97,31,253,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
