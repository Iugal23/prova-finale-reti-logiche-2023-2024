-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 637;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (91,0,67,0,153,0,56,0,51,0,0,0,158,0,188,0,249,0,166,0,45,0,65,0,0,0,231,0,22,0,36,0,242,0,165,0,129,0,117,0,1,0,99,0,43,0,65,0,202,0,89,0,47,0,229,0,242,0,41,0,219,0,128,0,0,0,0,0,231,0,7,0,83,0,183,0,1,0,10,0,90,0,105,0,0,0,123,0,219,0,38,0,220,0,43,0,65,0,0,0,182,0,147,0,251,0,31,0,0,0,193,0,202,0,97,0,0,0,117,0,145,0,16,0,136,0,150,0,108,0,7,0,20,0,237,0,178,0,247,0,254,0,174,0,246,0,151,0,22,0,243,0,75,0,240,0,146,0,151,0,74,0,181,0,183,0,176,0,240,0,134,0,47,0,130,0,47,0,149,0,186,0,139,0,137,0,56,0,244,0,37,0,157,0,52,0,170,0,3,0,0,0,5,0,210,0,2,0,53,0,95,0,190,0,254,0,163,0,8,0,0,0,142,0,92,0,144,0,0,0,67,0,246,0,195,0,67,0,236,0,171,0,0,0,179,0,62,0,0,0,188,0,11,0,0,0,250,0,0,0,141,0,183,0,63,0,122,0,41,0,69,0,8,0,41,0,0,0,34,0,123,0,74,0,0,0,127,0,160,0,205,0,0,0,184,0,20,0,136,0,87,0,0,0,71,0,0,0,54,0,230,0,44,0,140,0,0,0,12,0,140,0,195,0,93,0,0,0,24,0,89,0,14,0,232,0,59,0,40,0,61,0,0,0,64,0,108,0,16,0,0,0,0,0,68,0,213,0,12,0,66,0,43,0,0,0,143,0,45,0,60,0,173,0,0,0,0,0,102,0,49,0,0,0,168,0,187,0,210,0,0,0,164,0,0,0,0,0,5,0,134,0,54,0,48,0,151,0,26,0,195,0,52,0,0,0,215,0,98,0,33,0,55,0,23,0,81,0,0,0,157,0,0,0,198,0,219,0,121,0,0,0,150,0,31,0,176,0,209,0,220,0,0,0,212,0,180,0,55,0,155,0,40,0,238,0,0,0,0,0,227,0,0,0,203,0,207,0,101,0,91,0,55,0,0,0,0,0,189,0,118,0,100,0,235,0,80,0,0,0,78,0,0,0,0,0,30,0,129,0,55,0,223,0,249,0,58,0,81,0,242,0,252,0,100,0,62,0,62,0,109,0,207,0,111,0,51,0,68,0,160,0,208,0,66,0,126,0,81,0,1,0,188,0,254,0,177,0,162,0,3,0,127,0,0,0,226,0,186,0,212,0,0,0,251,0,37,0,253,0,66,0,69,0,252,0,184,0,84,0,81,0,7,0,0,0,189,0,46,0,157,0,238,0,0,0,0,0,154,0,16,0,238,0,112,0,5,0,86,0,41,0,8,0,238,0,197,0,157,0,103,0,224,0,67,0,116,0,0,0,0,0,94,0,254,0,210,0,44,0,169,0,33,0,179,0,126,0,149,0,0,0,204,0,242,0,102,0,109,0,0,0,0,0,46,0,154,0,0,0,185,0,39,0,166,0,63,0,0,0,0,0,75,0,216,0,30,0,216,0,0,0,0,0,28,0,158,0,233,0,70,0,3,0,0,0,0,0,218,0,214,0,95,0,184,0,22,0,19,0,75,0,63,0,0,0,47,0,12,0,0,0,0,0,5,0,211,0,171,0,122,0,186,0,112,0,17,0,144,0,0,0,212,0,243,0,220,0,156,0,116,0,201,0,18,0,0,0,225,0,245,0,111,0,9,0,237,0,81,0,85,0,128,0,30,0,28,0,127,0,152,0,122,0,0,0,211,0,54,0,0,0,0,0,48,0,82,0,153,0,41,0,0,0,184,0,19,0,143,0,153,0,63,0,209,0,134,0,0,0,0,0,245,0,153,0,204,0,255,0,178,0,58,0,224,0,0,0,64,0,0,0,0,0,176,0,48,0,173,0,83,0,193,0,46,0,56,0,68,0,21,0,98,0,208,0,0,0,45,0,63,0,0,0,172,0,0,0,142,0,113,0,83,0,187,0,23,0,98,0,99,0,2,0,21,0,0,0,212,0,237,0,186,0,93,0,63,0,28,0,130,0,124,0,46,0,116,0,0,0,0,0,237,0,0,0,144,0,182,0,0,0,162,0,14,0,161,0,34,0,115,0,68,0,52,0,253,0,12,0,46,0,85,0,23,0,204,0,225,0,180,0,178,0,0,0,215,0,70,0,54,0,142,0,158,0,202,0,0,0,225,0,246,0,8,0,170,0,149,0,0,0,8,0,96,0,219,0,224,0,0,0,0,0,0,0,174,0,124,0,147,0,173,0,58,0,216,0,11,0,201,0,0,0,238,0,59,0,120,0,13,0,158,0,91,0,101,0,33,0,173,0,25,0,167,0,168,0,221,0,0,0,0,0,234,0,2,0,0,0,0,0,34,0,92,0,222,0,203,0,0,0,0,0,164,0,9,0,0,0,0,0,0,0,0,0,73,0,186,0,3,0,113,0,192,0,89,0,24,0,0,0,228,0,118,0,166,0,174,0,63,0,93,0,66,0,152,0,169,0,63,0,97,0,236,0,0,0,160,0,8,0,99,0,0,0,0,0,154,0,81,0,184,0,0,0,96,0,254,0,130,0,0,0,45,0,65,0,166,0,130,0,251,0,58,0,207,0,152,0,164,0,11,0,210,0,219,0,0,0,99,0,204,0,0,0,222,0,253,0,120,0,213,0,125,0,171,0,30,0,0,0,65,0,101,0,248,0,82,0,175,0,34,0,191,0,151,0,75,0,66,0,167,0,198,0,58,0,0,0,103,0,23,0,102,0,89,0,226,0,0,0,4,0,175,0,156,0,124,0,126,0,0,0);
signal scenario_full  : scenario_type := (91,31,67,31,153,31,56,31,51,31,51,30,158,31,188,31,249,31,166,31,45,31,65,31,65,30,231,31,22,31,36,31,242,31,165,31,129,31,117,31,1,31,99,31,43,31,65,31,202,31,89,31,47,31,229,31,242,31,41,31,219,31,128,31,128,30,128,29,231,31,7,31,83,31,183,31,1,31,10,31,90,31,105,31,105,30,123,31,219,31,38,31,220,31,43,31,65,31,65,30,182,31,147,31,251,31,31,31,31,30,193,31,202,31,97,31,97,30,117,31,145,31,16,31,136,31,150,31,108,31,7,31,20,31,237,31,178,31,247,31,254,31,174,31,246,31,151,31,22,31,243,31,75,31,240,31,146,31,151,31,74,31,181,31,183,31,176,31,240,31,134,31,47,31,130,31,47,31,149,31,186,31,139,31,137,31,56,31,244,31,37,31,157,31,52,31,170,31,3,31,3,30,5,31,210,31,2,31,53,31,95,31,190,31,254,31,163,31,8,31,8,30,142,31,92,31,144,31,144,30,67,31,246,31,195,31,67,31,236,31,171,31,171,30,179,31,62,31,62,30,188,31,11,31,11,30,250,31,250,30,141,31,183,31,63,31,122,31,41,31,69,31,8,31,41,31,41,30,34,31,123,31,74,31,74,30,127,31,160,31,205,31,205,30,184,31,20,31,136,31,87,31,87,30,71,31,71,30,54,31,230,31,44,31,140,31,140,30,12,31,140,31,195,31,93,31,93,30,24,31,89,31,14,31,232,31,59,31,40,31,61,31,61,30,64,31,108,31,16,31,16,30,16,29,68,31,213,31,12,31,66,31,43,31,43,30,143,31,45,31,60,31,173,31,173,30,173,29,102,31,49,31,49,30,168,31,187,31,210,31,210,30,164,31,164,30,164,29,5,31,134,31,54,31,48,31,151,31,26,31,195,31,52,31,52,30,215,31,98,31,33,31,55,31,23,31,81,31,81,30,157,31,157,30,198,31,219,31,121,31,121,30,150,31,31,31,176,31,209,31,220,31,220,30,212,31,180,31,55,31,155,31,40,31,238,31,238,30,238,29,227,31,227,30,203,31,207,31,101,31,91,31,55,31,55,30,55,29,189,31,118,31,100,31,235,31,80,31,80,30,78,31,78,30,78,29,30,31,129,31,55,31,223,31,249,31,58,31,81,31,242,31,252,31,100,31,62,31,62,31,109,31,207,31,111,31,51,31,68,31,160,31,208,31,66,31,126,31,81,31,1,31,188,31,254,31,177,31,162,31,3,31,127,31,127,30,226,31,186,31,212,31,212,30,251,31,37,31,253,31,66,31,69,31,252,31,184,31,84,31,81,31,7,31,7,30,189,31,46,31,157,31,238,31,238,30,238,29,154,31,16,31,238,31,112,31,5,31,86,31,41,31,8,31,238,31,197,31,157,31,103,31,224,31,67,31,116,31,116,30,116,29,94,31,254,31,210,31,44,31,169,31,33,31,179,31,126,31,149,31,149,30,204,31,242,31,102,31,109,31,109,30,109,29,46,31,154,31,154,30,185,31,39,31,166,31,63,31,63,30,63,29,75,31,216,31,30,31,216,31,216,30,216,29,28,31,158,31,233,31,70,31,3,31,3,30,3,29,218,31,214,31,95,31,184,31,22,31,19,31,75,31,63,31,63,30,47,31,12,31,12,30,12,29,5,31,211,31,171,31,122,31,186,31,112,31,17,31,144,31,144,30,212,31,243,31,220,31,156,31,116,31,201,31,18,31,18,30,225,31,245,31,111,31,9,31,237,31,81,31,85,31,128,31,30,31,28,31,127,31,152,31,122,31,122,30,211,31,54,31,54,30,54,29,48,31,82,31,153,31,41,31,41,30,184,31,19,31,143,31,153,31,63,31,209,31,134,31,134,30,134,29,245,31,153,31,204,31,255,31,178,31,58,31,224,31,224,30,64,31,64,30,64,29,176,31,48,31,173,31,83,31,193,31,46,31,56,31,68,31,21,31,98,31,208,31,208,30,45,31,63,31,63,30,172,31,172,30,142,31,113,31,83,31,187,31,23,31,98,31,99,31,2,31,21,31,21,30,212,31,237,31,186,31,93,31,63,31,28,31,130,31,124,31,46,31,116,31,116,30,116,29,237,31,237,30,144,31,182,31,182,30,162,31,14,31,161,31,34,31,115,31,68,31,52,31,253,31,12,31,46,31,85,31,23,31,204,31,225,31,180,31,178,31,178,30,215,31,70,31,54,31,142,31,158,31,202,31,202,30,225,31,246,31,8,31,170,31,149,31,149,30,8,31,96,31,219,31,224,31,224,30,224,29,224,28,174,31,124,31,147,31,173,31,58,31,216,31,11,31,201,31,201,30,238,31,59,31,120,31,13,31,158,31,91,31,101,31,33,31,173,31,25,31,167,31,168,31,221,31,221,30,221,29,234,31,2,31,2,30,2,29,34,31,92,31,222,31,203,31,203,30,203,29,164,31,9,31,9,30,9,29,9,28,9,27,73,31,186,31,3,31,113,31,192,31,89,31,24,31,24,30,228,31,118,31,166,31,174,31,63,31,93,31,66,31,152,31,169,31,63,31,97,31,236,31,236,30,160,31,8,31,99,31,99,30,99,29,154,31,81,31,184,31,184,30,96,31,254,31,130,31,130,30,45,31,65,31,166,31,130,31,251,31,58,31,207,31,152,31,164,31,11,31,210,31,219,31,219,30,99,31,204,31,204,30,222,31,253,31,120,31,213,31,125,31,171,31,30,31,30,30,65,31,101,31,248,31,82,31,175,31,34,31,191,31,151,31,75,31,66,31,167,31,198,31,58,31,58,30,103,31,23,31,102,31,89,31,226,31,226,30,4,31,175,31,156,31,124,31,126,31,126,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
