-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 788;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,25,0,0,0,135,0,118,0,135,0,100,0,179,0,136,0,18,0,0,0,0,0,188,0,70,0,173,0,30,0,180,0,122,0,100,0,0,0,172,0,90,0,57,0,0,0,82,0,158,0,180,0,49,0,236,0,43,0,0,0,202,0,189,0,131,0,230,0,51,0,138,0,0,0,228,0,176,0,27,0,0,0,173,0,0,0,213,0,0,0,221,0,72,0,62,0,0,0,160,0,177,0,0,0,111,0,87,0,113,0,207,0,252,0,233,0,73,0,253,0,191,0,108,0,90,0,0,0,145,0,233,0,145,0,232,0,21,0,108,0,212,0,126,0,0,0,129,0,225,0,255,0,1,0,241,0,66,0,235,0,225,0,45,0,206,0,0,0,111,0,122,0,90,0,164,0,0,0,239,0,22,0,224,0,247,0,0,0,152,0,82,0,124,0,120,0,235,0,0,0,222,0,0,0,127,0,86,0,142,0,65,0,115,0,151,0,72,0,51,0,16,0,0,0,73,0,7,0,129,0,0,0,0,0,60,0,146,0,0,0,200,0,75,0,241,0,58,0,0,0,151,0,5,0,160,0,165,0,0,0,237,0,116,0,171,0,251,0,0,0,52,0,84,0,213,0,0,0,139,0,70,0,28,0,244,0,204,0,91,0,242,0,178,0,57,0,128,0,0,0,193,0,3,0,73,0,211,0,66,0,51,0,0,0,1,0,215,0,250,0,103,0,238,0,105,0,0,0,0,0,115,0,0,0,17,0,197,0,0,0,66,0,23,0,36,0,1,0,206,0,66,0,220,0,136,0,203,0,231,0,50,0,0,0,60,0,63,0,0,0,8,0,0,0,247,0,236,0,156,0,0,0,107,0,31,0,15,0,110,0,42,0,0,0,122,0,214,0,43,0,14,0,158,0,247,0,4,0,24,0,95,0,198,0,3,0,16,0,37,0,0,0,68,0,0,0,0,0,65,0,0,0,59,0,156,0,200,0,0,0,45,0,0,0,13,0,0,0,0,0,193,0,0,0,24,0,251,0,84,0,38,0,0,0,0,0,51,0,43,0,103,0,0,0,0,0,101,0,0,0,0,0,109,0,0,0,126,0,178,0,199,0,0,0,237,0,0,0,216,0,158,0,10,0,21,0,0,0,222,0,60,0,51,0,28,0,202,0,188,0,0,0,0,0,0,0,130,0,0,0,243,0,141,0,0,0,70,0,29,0,59,0,248,0,140,0,44,0,188,0,50,0,97,0,111,0,0,0,127,0,224,0,0,0,156,0,253,0,0,0,197,0,130,0,93,0,161,0,225,0,184,0,0,0,19,0,145,0,188,0,70,0,0,0,130,0,0,0,21,0,218,0,90,0,8,0,161,0,28,0,0,0,23,0,2,0,97,0,59,0,50,0,238,0,125,0,199,0,174,0,250,0,96,0,132,0,114,0,16,0,187,0,110,0,0,0,225,0,148,0,34,0,19,0,254,0,42,0,193,0,179,0,0,0,189,0,57,0,159,0,231,0,168,0,0,0,72,0,0,0,169,0,200,0,21,0,75,0,221,0,203,0,158,0,115,0,164,0,0,0,193,0,106,0,0,0,240,0,251,0,99,0,0,0,0,0,198,0,84,0,165,0,198,0,71,0,123,0,219,0,0,0,83,0,213,0,200,0,52,0,117,0,181,0,142,0,87,0,239,0,137,0,39,0,248,0,232,0,225,0,191,0,36,0,191,0,129,0,103,0,184,0,134,0,235,0,115,0,175,0,0,0,0,0,193,0,110,0,20,0,36,0,99,0,210,0,41,0,220,0,183,0,17,0,204,0,241,0,145,0,0,0,233,0,144,0,102,0,183,0,121,0,158,0,36,0,152,0,241,0,128,0,87,0,85,0,116,0,172,0,146,0,39,0,245,0,178,0,63,0,0,0,211,0,38,0,117,0,121,0,219,0,5,0,104,0,249,0,252,0,83,0,7,0,11,0,0,0,220,0,194,0,224,0,246,0,223,0,221,0,0,0,135,0,173,0,58,0,129,0,207,0,0,0,0,0,74,0,11,0,84,0,181,0,0,0,95,0,170,0,34,0,0,0,0,0,177,0,50,0,0,0,213,0,7,0,63,0,23,0,137,0,106,0,190,0,31,0,100,0,0,0,156,0,0,0,130,0,228,0,72,0,79,0,199,0,184,0,143,0,6,0,3,0,47,0,0,0,149,0,13,0,5,0,245,0,80,0,0,0,0,0,2,0,141,0,0,0,3,0,21,0,111,0,229,0,194,0,56,0,253,0,0,0,0,0,56,0,62,0,213,0,45,0,0,0,52,0,0,0,96,0,227,0,62,0,210,0,27,0,87,0,77,0,246,0,0,0,0,0,253,0,122,0,18,0,0,0,110,0,44,0,83,0,0,0,199,0,122,0,189,0,193,0,0,0,183,0,54,0,0,0,230,0,62,0,203,0,237,0,86,0,197,0,218,0,194,0,95,0,54,0,0,0,196,0,96,0,118,0,69,0,0,0,0,0,0,0,214,0,170,0,0,0,244,0,107,0,242,0,0,0,129,0,0,0,73,0,157,0,0,0,235,0,0,0,229,0,251,0,0,0,244,0,0,0,227,0,47,0,253,0,0,0,58,0,200,0,154,0,72,0,196,0,64,0,211,0,228,0,0,0,112,0,138,0,165,0,139,0,0,0,0,0,0,0,0,0,156,0,167,0,19,0,69,0,155,0,80,0,232,0,234,0,209,0,52,0,146,0,238,0,175,0,0,0,222,0,0,0,69,0,189,0,138,0,0,0,82,0,0,0,131,0,189,0,0,0,175,0,0,0,0,0,0,0,20,0,72,0,0,0,0,0,7,0,97,0,216,0,65,0,152,0,0,0,155,0,39,0,35,0,99,0,149,0,17,0,25,0,240,0,0,0,0,0,0,0,165,0,212,0,139,0,174,0,0,0,82,0,187,0,249,0,123,0,143,0,0,0,0,0,173,0,0,0,12,0,0,0,178,0,0,0,199,0,99,0,179,0,147,0,149,0,0,0,26,0,102,0,184,0,58,0,103,0,220,0,12,0,28,0,133,0,100,0,239,0,59,0,0,0,76,0,0,0,0,0,163,0,17,0,68,0,0,0,95,0,235,0,201,0,0,0,63,0,71,0,0,0,96,0,0,0,156,0,0,0,77,0,172,0,192,0,22,0,0,0,198,0,175,0,65,0,199,0,105,0,67,0,207,0,100,0,0,0,197,0,226,0,209,0,225,0,125,0,197,0,110,0,248,0,214,0,141,0,0,0,82,0,205,0,195,0,77,0,28,0,230,0,166,0,0,0,46,0,49,0,48,0,0,0,20,0,215,0,0,0,0,0,0,0,189,0,167,0,141,0,106,0,65,0,0,0,176,0,18,0,23,0,131,0,250,0,74,0,67,0,238,0,205,0,92,0,238,0,109,0,73,0,134,0,127,0,0,0,0,0,4,0,0,0,214,0,3,0,16,0,104,0,228,0,194,0,58,0,196,0,0,0,97,0,0,0,25,0,184,0,0,0,164,0,40,0);
signal scenario_full  : scenario_type := (0,0,25,31,25,30,135,31,118,31,135,31,100,31,179,31,136,31,18,31,18,30,18,29,188,31,70,31,173,31,30,31,180,31,122,31,100,31,100,30,172,31,90,31,57,31,57,30,82,31,158,31,180,31,49,31,236,31,43,31,43,30,202,31,189,31,131,31,230,31,51,31,138,31,138,30,228,31,176,31,27,31,27,30,173,31,173,30,213,31,213,30,221,31,72,31,62,31,62,30,160,31,177,31,177,30,111,31,87,31,113,31,207,31,252,31,233,31,73,31,253,31,191,31,108,31,90,31,90,30,145,31,233,31,145,31,232,31,21,31,108,31,212,31,126,31,126,30,129,31,225,31,255,31,1,31,241,31,66,31,235,31,225,31,45,31,206,31,206,30,111,31,122,31,90,31,164,31,164,30,239,31,22,31,224,31,247,31,247,30,152,31,82,31,124,31,120,31,235,31,235,30,222,31,222,30,127,31,86,31,142,31,65,31,115,31,151,31,72,31,51,31,16,31,16,30,73,31,7,31,129,31,129,30,129,29,60,31,146,31,146,30,200,31,75,31,241,31,58,31,58,30,151,31,5,31,160,31,165,31,165,30,237,31,116,31,171,31,251,31,251,30,52,31,84,31,213,31,213,30,139,31,70,31,28,31,244,31,204,31,91,31,242,31,178,31,57,31,128,31,128,30,193,31,3,31,73,31,211,31,66,31,51,31,51,30,1,31,215,31,250,31,103,31,238,31,105,31,105,30,105,29,115,31,115,30,17,31,197,31,197,30,66,31,23,31,36,31,1,31,206,31,66,31,220,31,136,31,203,31,231,31,50,31,50,30,60,31,63,31,63,30,8,31,8,30,247,31,236,31,156,31,156,30,107,31,31,31,15,31,110,31,42,31,42,30,122,31,214,31,43,31,14,31,158,31,247,31,4,31,24,31,95,31,198,31,3,31,16,31,37,31,37,30,68,31,68,30,68,29,65,31,65,30,59,31,156,31,200,31,200,30,45,31,45,30,13,31,13,30,13,29,193,31,193,30,24,31,251,31,84,31,38,31,38,30,38,29,51,31,43,31,103,31,103,30,103,29,101,31,101,30,101,29,109,31,109,30,126,31,178,31,199,31,199,30,237,31,237,30,216,31,158,31,10,31,21,31,21,30,222,31,60,31,51,31,28,31,202,31,188,31,188,30,188,29,188,28,130,31,130,30,243,31,141,31,141,30,70,31,29,31,59,31,248,31,140,31,44,31,188,31,50,31,97,31,111,31,111,30,127,31,224,31,224,30,156,31,253,31,253,30,197,31,130,31,93,31,161,31,225,31,184,31,184,30,19,31,145,31,188,31,70,31,70,30,130,31,130,30,21,31,218,31,90,31,8,31,161,31,28,31,28,30,23,31,2,31,97,31,59,31,50,31,238,31,125,31,199,31,174,31,250,31,96,31,132,31,114,31,16,31,187,31,110,31,110,30,225,31,148,31,34,31,19,31,254,31,42,31,193,31,179,31,179,30,189,31,57,31,159,31,231,31,168,31,168,30,72,31,72,30,169,31,200,31,21,31,75,31,221,31,203,31,158,31,115,31,164,31,164,30,193,31,106,31,106,30,240,31,251,31,99,31,99,30,99,29,198,31,84,31,165,31,198,31,71,31,123,31,219,31,219,30,83,31,213,31,200,31,52,31,117,31,181,31,142,31,87,31,239,31,137,31,39,31,248,31,232,31,225,31,191,31,36,31,191,31,129,31,103,31,184,31,134,31,235,31,115,31,175,31,175,30,175,29,193,31,110,31,20,31,36,31,99,31,210,31,41,31,220,31,183,31,17,31,204,31,241,31,145,31,145,30,233,31,144,31,102,31,183,31,121,31,158,31,36,31,152,31,241,31,128,31,87,31,85,31,116,31,172,31,146,31,39,31,245,31,178,31,63,31,63,30,211,31,38,31,117,31,121,31,219,31,5,31,104,31,249,31,252,31,83,31,7,31,11,31,11,30,220,31,194,31,224,31,246,31,223,31,221,31,221,30,135,31,173,31,58,31,129,31,207,31,207,30,207,29,74,31,11,31,84,31,181,31,181,30,95,31,170,31,34,31,34,30,34,29,177,31,50,31,50,30,213,31,7,31,63,31,23,31,137,31,106,31,190,31,31,31,100,31,100,30,156,31,156,30,130,31,228,31,72,31,79,31,199,31,184,31,143,31,6,31,3,31,47,31,47,30,149,31,13,31,5,31,245,31,80,31,80,30,80,29,2,31,141,31,141,30,3,31,21,31,111,31,229,31,194,31,56,31,253,31,253,30,253,29,56,31,62,31,213,31,45,31,45,30,52,31,52,30,96,31,227,31,62,31,210,31,27,31,87,31,77,31,246,31,246,30,246,29,253,31,122,31,18,31,18,30,110,31,44,31,83,31,83,30,199,31,122,31,189,31,193,31,193,30,183,31,54,31,54,30,230,31,62,31,203,31,237,31,86,31,197,31,218,31,194,31,95,31,54,31,54,30,196,31,96,31,118,31,69,31,69,30,69,29,69,28,214,31,170,31,170,30,244,31,107,31,242,31,242,30,129,31,129,30,73,31,157,31,157,30,235,31,235,30,229,31,251,31,251,30,244,31,244,30,227,31,47,31,253,31,253,30,58,31,200,31,154,31,72,31,196,31,64,31,211,31,228,31,228,30,112,31,138,31,165,31,139,31,139,30,139,29,139,28,139,27,156,31,167,31,19,31,69,31,155,31,80,31,232,31,234,31,209,31,52,31,146,31,238,31,175,31,175,30,222,31,222,30,69,31,189,31,138,31,138,30,82,31,82,30,131,31,189,31,189,30,175,31,175,30,175,29,175,28,20,31,72,31,72,30,72,29,7,31,97,31,216,31,65,31,152,31,152,30,155,31,39,31,35,31,99,31,149,31,17,31,25,31,240,31,240,30,240,29,240,28,165,31,212,31,139,31,174,31,174,30,82,31,187,31,249,31,123,31,143,31,143,30,143,29,173,31,173,30,12,31,12,30,178,31,178,30,199,31,99,31,179,31,147,31,149,31,149,30,26,31,102,31,184,31,58,31,103,31,220,31,12,31,28,31,133,31,100,31,239,31,59,31,59,30,76,31,76,30,76,29,163,31,17,31,68,31,68,30,95,31,235,31,201,31,201,30,63,31,71,31,71,30,96,31,96,30,156,31,156,30,77,31,172,31,192,31,22,31,22,30,198,31,175,31,65,31,199,31,105,31,67,31,207,31,100,31,100,30,197,31,226,31,209,31,225,31,125,31,197,31,110,31,248,31,214,31,141,31,141,30,82,31,205,31,195,31,77,31,28,31,230,31,166,31,166,30,46,31,49,31,48,31,48,30,20,31,215,31,215,30,215,29,215,28,189,31,167,31,141,31,106,31,65,31,65,30,176,31,18,31,23,31,131,31,250,31,74,31,67,31,238,31,205,31,92,31,238,31,109,31,73,31,134,31,127,31,127,30,127,29,4,31,4,30,214,31,3,31,16,31,104,31,228,31,194,31,58,31,196,31,196,30,97,31,97,30,25,31,184,31,184,30,164,31,40,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
