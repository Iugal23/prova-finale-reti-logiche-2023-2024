-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 241;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (52,0,250,0,163,0,192,0,61,0,0,0,199,0,218,0,0,0,44,0,21,0,240,0,0,0,11,0,232,0,7,0,235,0,157,0,97,0,17,0,212,0,204,0,202,0,33,0,0,0,58,0,250,0,34,0,214,0,0,0,81,0,36,0,10,0,34,0,5,0,0,0,30,0,0,0,0,0,167,0,216,0,132,0,60,0,0,0,0,0,247,0,3,0,0,0,0,0,30,0,109,0,140,0,106,0,250,0,152,0,0,0,0,0,69,0,0,0,23,0,151,0,48,0,0,0,48,0,26,0,41,0,0,0,65,0,0,0,173,0,245,0,229,0,0,0,2,0,112,0,0,0,241,0,0,0,96,0,90,0,40,0,68,0,32,0,36,0,172,0,219,0,164,0,147,0,12,0,99,0,34,0,0,0,141,0,0,0,115,0,217,0,69,0,16,0,107,0,253,0,46,0,0,0,13,0,214,0,219,0,49,0,157,0,0,0,130,0,148,0,176,0,81,0,191,0,204,0,26,0,0,0,81,0,117,0,241,0,115,0,0,0,240,0,64,0,143,0,236,0,0,0,203,0,64,0,92,0,61,0,164,0,200,0,0,0,77,0,206,0,143,0,54,0,236,0,146,0,0,0,198,0,161,0,235,0,161,0,184,0,0,0,191,0,45,0,11,0,29,0,72,0,106,0,217,0,0,0,180,0,36,0,203,0,0,0,21,0,96,0,83,0,222,0,15,0,39,0,67,0,57,0,251,0,240,0,42,0,175,0,40,0,119,0,0,0,79,0,48,0,80,0,12,0,0,0,53,0,138,0,71,0,47,0,0,0,84,0,140,0,100,0,224,0,47,0,0,0,27,0,40,0,0,0,197,0,227,0,20,0,0,0,91,0,55,0,207,0,223,0,143,0,121,0,43,0,147,0,115,0,170,0,54,0,55,0,34,0,26,0,0,0,185,0,0,0,0,0,0,0,31,0,0,0,195,0,0,0,2,0,0,0,50,0,176,0,71,0,204,0,81,0,203,0,0,0,0,0,156,0,156,0,193,0,199,0,70,0,0,0,175,0,132,0,187,0,43,0,231,0,25,0);
signal scenario_full  : scenario_type := (52,31,250,31,163,31,192,31,61,31,61,30,199,31,218,31,218,30,44,31,21,31,240,31,240,30,11,31,232,31,7,31,235,31,157,31,97,31,17,31,212,31,204,31,202,31,33,31,33,30,58,31,250,31,34,31,214,31,214,30,81,31,36,31,10,31,34,31,5,31,5,30,30,31,30,30,30,29,167,31,216,31,132,31,60,31,60,30,60,29,247,31,3,31,3,30,3,29,30,31,109,31,140,31,106,31,250,31,152,31,152,30,152,29,69,31,69,30,23,31,151,31,48,31,48,30,48,31,26,31,41,31,41,30,65,31,65,30,173,31,245,31,229,31,229,30,2,31,112,31,112,30,241,31,241,30,96,31,90,31,40,31,68,31,32,31,36,31,172,31,219,31,164,31,147,31,12,31,99,31,34,31,34,30,141,31,141,30,115,31,217,31,69,31,16,31,107,31,253,31,46,31,46,30,13,31,214,31,219,31,49,31,157,31,157,30,130,31,148,31,176,31,81,31,191,31,204,31,26,31,26,30,81,31,117,31,241,31,115,31,115,30,240,31,64,31,143,31,236,31,236,30,203,31,64,31,92,31,61,31,164,31,200,31,200,30,77,31,206,31,143,31,54,31,236,31,146,31,146,30,198,31,161,31,235,31,161,31,184,31,184,30,191,31,45,31,11,31,29,31,72,31,106,31,217,31,217,30,180,31,36,31,203,31,203,30,21,31,96,31,83,31,222,31,15,31,39,31,67,31,57,31,251,31,240,31,42,31,175,31,40,31,119,31,119,30,79,31,48,31,80,31,12,31,12,30,53,31,138,31,71,31,47,31,47,30,84,31,140,31,100,31,224,31,47,31,47,30,27,31,40,31,40,30,197,31,227,31,20,31,20,30,91,31,55,31,207,31,223,31,143,31,121,31,43,31,147,31,115,31,170,31,54,31,55,31,34,31,26,31,26,30,185,31,185,30,185,29,185,28,31,31,31,30,195,31,195,30,2,31,2,30,50,31,176,31,71,31,204,31,81,31,203,31,203,30,203,29,156,31,156,31,193,31,199,31,70,31,70,30,175,31,132,31,187,31,43,31,231,31,25,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
