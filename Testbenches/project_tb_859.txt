-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 395;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (234,0,5,0,7,0,1,0,243,0,115,0,167,0,246,0,0,0,60,0,19,0,243,0,0,0,99,0,134,0,51,0,221,0,0,0,0,0,191,0,218,0,218,0,0,0,132,0,221,0,213,0,165,0,167,0,156,0,85,0,228,0,0,0,43,0,21,0,202,0,191,0,193,0,217,0,117,0,226,0,157,0,247,0,8,0,235,0,132,0,166,0,72,0,87,0,77,0,66,0,0,0,230,0,82,0,0,0,0,0,174,0,29,0,0,0,20,0,44,0,139,0,141,0,175,0,7,0,57,0,75,0,224,0,136,0,1,0,198,0,167,0,5,0,96,0,200,0,199,0,131,0,180,0,240,0,0,0,0,0,0,0,191,0,225,0,2,0,110,0,12,0,0,0,0,0,132,0,23,0,0,0,0,0,211,0,0,0,167,0,66,0,0,0,89,0,0,0,130,0,17,0,61,0,245,0,0,0,215,0,250,0,0,0,229,0,0,0,37,0,138,0,169,0,79,0,37,0,225,0,202,0,64,0,19,0,0,0,31,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,73,0,168,0,111,0,0,0,88,0,0,0,113,0,166,0,0,0,135,0,215,0,242,0,0,0,240,0,141,0,83,0,0,0,80,0,67,0,0,0,21,0,201,0,168,0,103,0,183,0,226,0,81,0,18,0,0,0,0,0,0,0,119,0,175,0,70,0,112,0,178,0,136,0,0,0,120,0,204,0,173,0,58,0,102,0,190,0,48,0,226,0,0,0,214,0,0,0,206,0,102,0,87,0,210,0,173,0,144,0,0,0,180,0,240,0,212,0,206,0,8,0,244,0,146,0,49,0,3,0,19,0,240,0,17,0,80,0,0,0,225,0,37,0,238,0,55,0,243,0,208,0,0,0,4,0,161,0,75,0,16,0,0,0,85,0,103,0,233,0,92,0,173,0,249,0,106,0,0,0,0,0,182,0,102,0,246,0,84,0,0,0,18,0,65,0,69,0,230,0,0,0,7,0,168,0,187,0,154,0,48,0,195,0,175,0,215,0,247,0,0,0,0,0,117,0,30,0,99,0,178,0,202,0,160,0,0,0,77,0,0,0,80,0,155,0,34,0,0,0,32,0,209,0,32,0,0,0,111,0,125,0,57,0,28,0,0,0,120,0,94,0,226,0,0,0,0,0,0,0,23,0,185,0,0,0,2,0,0,0,41,0,198,0,0,0,103,0,0,0,33,0,108,0,71,0,184,0,44,0,70,0,126,0,0,0,30,0,173,0,0,0,76,0,122,0,110,0,44,0,0,0,154,0,42,0,232,0,0,0,11,0,113,0,238,0,149,0,163,0,212,0,0,0,247,0,36,0,249,0,138,0,132,0,0,0,241,0,64,0,178,0,100,0,225,0,215,0,0,0,166,0,243,0,30,0,98,0,61,0,134,0,35,0,239,0,187,0,0,0,0,0,158,0,150,0,108,0,53,0,119,0,25,0,165,0,12,0,197,0,119,0,79,0,117,0,36,0,221,0,1,0,4,0,147,0,16,0,15,0,134,0,16,0,79,0,201,0,4,0,5,0,223,0,75,0,46,0,133,0,206,0,80,0,165,0,0,0,93,0,98,0,21,0,72,0,252,0,188,0,186,0,187,0,249,0,230,0,133,0,112,0,20,0,211,0,0,0,65,0,203,0,195,0,245,0,154,0,246,0,1,0,93,0,249,0,103,0,90,0,177,0,127,0,111,0,75,0,105,0,28,0,0,0,205,0);
signal scenario_full  : scenario_type := (234,31,5,31,7,31,1,31,243,31,115,31,167,31,246,31,246,30,60,31,19,31,243,31,243,30,99,31,134,31,51,31,221,31,221,30,221,29,191,31,218,31,218,31,218,30,132,31,221,31,213,31,165,31,167,31,156,31,85,31,228,31,228,30,43,31,21,31,202,31,191,31,193,31,217,31,117,31,226,31,157,31,247,31,8,31,235,31,132,31,166,31,72,31,87,31,77,31,66,31,66,30,230,31,82,31,82,30,82,29,174,31,29,31,29,30,20,31,44,31,139,31,141,31,175,31,7,31,57,31,75,31,224,31,136,31,1,31,198,31,167,31,5,31,96,31,200,31,199,31,131,31,180,31,240,31,240,30,240,29,240,28,191,31,225,31,2,31,110,31,12,31,12,30,12,29,132,31,23,31,23,30,23,29,211,31,211,30,167,31,66,31,66,30,89,31,89,30,130,31,17,31,61,31,245,31,245,30,215,31,250,31,250,30,229,31,229,30,37,31,138,31,169,31,79,31,37,31,225,31,202,31,64,31,19,31,19,30,31,31,232,31,232,30,232,29,232,28,232,27,232,26,232,25,73,31,168,31,111,31,111,30,88,31,88,30,113,31,166,31,166,30,135,31,215,31,242,31,242,30,240,31,141,31,83,31,83,30,80,31,67,31,67,30,21,31,201,31,168,31,103,31,183,31,226,31,81,31,18,31,18,30,18,29,18,28,119,31,175,31,70,31,112,31,178,31,136,31,136,30,120,31,204,31,173,31,58,31,102,31,190,31,48,31,226,31,226,30,214,31,214,30,206,31,102,31,87,31,210,31,173,31,144,31,144,30,180,31,240,31,212,31,206,31,8,31,244,31,146,31,49,31,3,31,19,31,240,31,17,31,80,31,80,30,225,31,37,31,238,31,55,31,243,31,208,31,208,30,4,31,161,31,75,31,16,31,16,30,85,31,103,31,233,31,92,31,173,31,249,31,106,31,106,30,106,29,182,31,102,31,246,31,84,31,84,30,18,31,65,31,69,31,230,31,230,30,7,31,168,31,187,31,154,31,48,31,195,31,175,31,215,31,247,31,247,30,247,29,117,31,30,31,99,31,178,31,202,31,160,31,160,30,77,31,77,30,80,31,155,31,34,31,34,30,32,31,209,31,32,31,32,30,111,31,125,31,57,31,28,31,28,30,120,31,94,31,226,31,226,30,226,29,226,28,23,31,185,31,185,30,2,31,2,30,41,31,198,31,198,30,103,31,103,30,33,31,108,31,71,31,184,31,44,31,70,31,126,31,126,30,30,31,173,31,173,30,76,31,122,31,110,31,44,31,44,30,154,31,42,31,232,31,232,30,11,31,113,31,238,31,149,31,163,31,212,31,212,30,247,31,36,31,249,31,138,31,132,31,132,30,241,31,64,31,178,31,100,31,225,31,215,31,215,30,166,31,243,31,30,31,98,31,61,31,134,31,35,31,239,31,187,31,187,30,187,29,158,31,150,31,108,31,53,31,119,31,25,31,165,31,12,31,197,31,119,31,79,31,117,31,36,31,221,31,1,31,4,31,147,31,16,31,15,31,134,31,16,31,79,31,201,31,4,31,5,31,223,31,75,31,46,31,133,31,206,31,80,31,165,31,165,30,93,31,98,31,21,31,72,31,252,31,188,31,186,31,187,31,249,31,230,31,133,31,112,31,20,31,211,31,211,30,65,31,203,31,195,31,245,31,154,31,246,31,1,31,93,31,249,31,103,31,90,31,177,31,127,31,111,31,75,31,105,31,28,31,28,30,205,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
