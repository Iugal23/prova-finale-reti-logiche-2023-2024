-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 451;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (142,0,0,0,139,0,216,0,44,0,179,0,240,0,94,0,69,0,125,0,242,0,48,0,75,0,0,0,185,0,47,0,0,0,132,0,113,0,164,0,35,0,189,0,222,0,0,0,0,0,53,0,7,0,0,0,16,0,45,0,125,0,0,0,167,0,0,0,202,0,122,0,82,0,230,0,209,0,244,0,50,0,54,0,0,0,0,0,33,0,228,0,204,0,0,0,0,0,184,0,0,0,8,0,35,0,151,0,212,0,84,0,102,0,0,0,251,0,130,0,0,0,159,0,184,0,0,0,58,0,0,0,123,0,117,0,252,0,15,0,215,0,168,0,21,0,199,0,90,0,0,0,115,0,207,0,10,0,228,0,4,0,65,0,0,0,0,0,64,0,211,0,3,0,10,0,176,0,91,0,17,0,0,0,145,0,0,0,0,0,212,0,102,0,245,0,0,0,0,0,79,0,212,0,0,0,230,0,12,0,233,0,30,0,201,0,150,0,131,0,161,0,120,0,140,0,97,0,0,0,66,0,79,0,56,0,245,0,202,0,0,0,239,0,82,0,0,0,85,0,104,0,215,0,59,0,217,0,189,0,24,0,128,0,164,0,179,0,123,0,61,0,90,0,72,0,207,0,136,0,0,0,102,0,114,0,192,0,44,0,164,0,185,0,23,0,97,0,2,0,0,0,62,0,41,0,250,0,0,0,0,0,167,0,59,0,78,0,112,0,206,0,136,0,200,0,150,0,39,0,149,0,0,0,99,0,49,0,241,0,138,0,156,0,89,0,109,0,104,0,24,0,170,0,171,0,0,0,59,0,119,0,245,0,163,0,175,0,250,0,251,0,0,0,159,0,238,0,133,0,0,0,132,0,1,0,176,0,69,0,179,0,0,0,167,0,191,0,184,0,130,0,171,0,7,0,236,0,144,0,0,0,53,0,248,0,0,0,0,0,77,0,135,0,131,0,133,0,67,0,0,0,233,0,161,0,205,0,0,0,4,0,17,0,229,0,125,0,170,0,89,0,255,0,162,0,47,0,146,0,77,0,212,0,225,0,88,0,56,0,135,0,159,0,217,0,133,0,50,0,253,0,131,0,105,0,0,0,237,0,213,0,250,0,128,0,197,0,180,0,0,0,0,0,54,0,215,0,108,0,0,0,130,0,208,0,125,0,217,0,0,0,0,0,182,0,0,0,0,0,234,0,243,0,0,0,109,0,70,0,49,0,0,0,28,0,54,0,36,0,0,0,56,0,241,0,229,0,17,0,107,0,228,0,167,0,106,0,203,0,52,0,171,0,240,0,121,0,0,0,254,0,0,0,0,0,0,0,211,0,251,0,78,0,163,0,73,0,217,0,225,0,114,0,201,0,127,0,84,0,163,0,0,0,0,0,147,0,220,0,203,0,86,0,25,0,222,0,0,0,214,0,211,0,92,0,215,0,173,0,242,0,11,0,171,0,35,0,255,0,0,0,224,0,104,0,108,0,67,0,75,0,189,0,4,0,130,0,156,0,6,0,0,0,57,0,0,0,126,0,155,0,76,0,248,0,217,0,166,0,31,0,0,0,122,0,176,0,26,0,122,0,236,0,228,0,194,0,205,0,190,0,249,0,122,0,90,0,0,0,85,0,0,0,0,0,233,0,109,0,35,0,218,0,0,0,217,0,0,0,97,0,29,0,125,0,131,0,0,0,252,0,228,0,190,0,0,0,122,0,156,0,197,0,0,0,218,0,252,0,226,0,21,0,234,0,0,0,240,0,85,0,27,0,0,0,0,0,0,0,17,0,0,0,0,0,81,0,26,0,234,0,128,0,88,0,48,0,102,0,0,0,77,0,41,0,125,0,12,0,170,0,131,0,214,0,0,0,0,0,89,0,236,0,209,0,43,0,93,0,0,0,193,0,58,0,0,0,2,0,75,0,145,0,105,0,34,0,235,0,65,0,52,0,0,0,225,0,148,0,238,0,142,0,0,0,120,0,55,0,12,0,0,0,207,0,113,0,139,0,79,0,51,0,164,0,59,0,0,0,0,0);
signal scenario_full  : scenario_type := (142,31,142,30,139,31,216,31,44,31,179,31,240,31,94,31,69,31,125,31,242,31,48,31,75,31,75,30,185,31,47,31,47,30,132,31,113,31,164,31,35,31,189,31,222,31,222,30,222,29,53,31,7,31,7,30,16,31,45,31,125,31,125,30,167,31,167,30,202,31,122,31,82,31,230,31,209,31,244,31,50,31,54,31,54,30,54,29,33,31,228,31,204,31,204,30,204,29,184,31,184,30,8,31,35,31,151,31,212,31,84,31,102,31,102,30,251,31,130,31,130,30,159,31,184,31,184,30,58,31,58,30,123,31,117,31,252,31,15,31,215,31,168,31,21,31,199,31,90,31,90,30,115,31,207,31,10,31,228,31,4,31,65,31,65,30,65,29,64,31,211,31,3,31,10,31,176,31,91,31,17,31,17,30,145,31,145,30,145,29,212,31,102,31,245,31,245,30,245,29,79,31,212,31,212,30,230,31,12,31,233,31,30,31,201,31,150,31,131,31,161,31,120,31,140,31,97,31,97,30,66,31,79,31,56,31,245,31,202,31,202,30,239,31,82,31,82,30,85,31,104,31,215,31,59,31,217,31,189,31,24,31,128,31,164,31,179,31,123,31,61,31,90,31,72,31,207,31,136,31,136,30,102,31,114,31,192,31,44,31,164,31,185,31,23,31,97,31,2,31,2,30,62,31,41,31,250,31,250,30,250,29,167,31,59,31,78,31,112,31,206,31,136,31,200,31,150,31,39,31,149,31,149,30,99,31,49,31,241,31,138,31,156,31,89,31,109,31,104,31,24,31,170,31,171,31,171,30,59,31,119,31,245,31,163,31,175,31,250,31,251,31,251,30,159,31,238,31,133,31,133,30,132,31,1,31,176,31,69,31,179,31,179,30,167,31,191,31,184,31,130,31,171,31,7,31,236,31,144,31,144,30,53,31,248,31,248,30,248,29,77,31,135,31,131,31,133,31,67,31,67,30,233,31,161,31,205,31,205,30,4,31,17,31,229,31,125,31,170,31,89,31,255,31,162,31,47,31,146,31,77,31,212,31,225,31,88,31,56,31,135,31,159,31,217,31,133,31,50,31,253,31,131,31,105,31,105,30,237,31,213,31,250,31,128,31,197,31,180,31,180,30,180,29,54,31,215,31,108,31,108,30,130,31,208,31,125,31,217,31,217,30,217,29,182,31,182,30,182,29,234,31,243,31,243,30,109,31,70,31,49,31,49,30,28,31,54,31,36,31,36,30,56,31,241,31,229,31,17,31,107,31,228,31,167,31,106,31,203,31,52,31,171,31,240,31,121,31,121,30,254,31,254,30,254,29,254,28,211,31,251,31,78,31,163,31,73,31,217,31,225,31,114,31,201,31,127,31,84,31,163,31,163,30,163,29,147,31,220,31,203,31,86,31,25,31,222,31,222,30,214,31,211,31,92,31,215,31,173,31,242,31,11,31,171,31,35,31,255,31,255,30,224,31,104,31,108,31,67,31,75,31,189,31,4,31,130,31,156,31,6,31,6,30,57,31,57,30,126,31,155,31,76,31,248,31,217,31,166,31,31,31,31,30,122,31,176,31,26,31,122,31,236,31,228,31,194,31,205,31,190,31,249,31,122,31,90,31,90,30,85,31,85,30,85,29,233,31,109,31,35,31,218,31,218,30,217,31,217,30,97,31,29,31,125,31,131,31,131,30,252,31,228,31,190,31,190,30,122,31,156,31,197,31,197,30,218,31,252,31,226,31,21,31,234,31,234,30,240,31,85,31,27,31,27,30,27,29,27,28,17,31,17,30,17,29,81,31,26,31,234,31,128,31,88,31,48,31,102,31,102,30,77,31,41,31,125,31,12,31,170,31,131,31,214,31,214,30,214,29,89,31,236,31,209,31,43,31,93,31,93,30,193,31,58,31,58,30,2,31,75,31,145,31,105,31,34,31,235,31,65,31,52,31,52,30,225,31,148,31,238,31,142,31,142,30,120,31,55,31,12,31,12,30,207,31,113,31,139,31,79,31,51,31,164,31,59,31,59,30,59,29);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
