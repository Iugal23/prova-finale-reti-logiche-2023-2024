-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 773;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (235,0,52,0,0,0,45,0,82,0,119,0,14,0,149,0,59,0,0,0,0,0,111,0,0,0,212,0,0,0,4,0,251,0,3,0,37,0,166,0,198,0,238,0,221,0,11,0,252,0,255,0,234,0,26,0,0,0,59,0,85,0,237,0,150,0,42,0,128,0,125,0,0,0,92,0,254,0,126,0,0,0,0,0,182,0,82,0,0,0,155,0,70,0,40,0,30,0,0,0,0,0,105,0,0,0,118,0,0,0,0,0,83,0,0,0,26,0,187,0,215,0,154,0,40,0,0,0,0,0,204,0,49,0,0,0,12,0,0,0,102,0,181,0,0,0,198,0,193,0,42,0,41,0,44,0,189,0,0,0,17,0,184,0,253,0,220,0,63,0,22,0,228,0,0,0,254,0,0,0,121,0,148,0,232,0,237,0,16,0,211,0,0,0,208,0,165,0,0,0,182,0,87,0,61,0,0,0,6,0,200,0,0,0,116,0,109,0,229,0,202,0,126,0,128,0,180,0,83,0,0,0,216,0,43,0,0,0,0,0,160,0,7,0,149,0,0,0,8,0,247,0,239,0,5,0,171,0,14,0,130,0,246,0,0,0,219,0,0,0,67,0,110,0,103,0,0,0,89,0,0,0,113,0,230,0,208,0,217,0,53,0,0,0,9,0,171,0,103,0,188,0,109,0,172,0,159,0,102,0,33,0,211,0,32,0,26,0,155,0,0,0,149,0,155,0,31,0,177,0,109,0,74,0,35,0,0,0,60,0,0,0,86,0,0,0,121,0,177,0,106,0,236,0,18,0,108,0,0,0,179,0,190,0,108,0,164,0,0,0,224,0,113,0,206,0,0,0,0,0,24,0,80,0,94,0,226,0,98,0,0,0,69,0,8,0,137,0,19,0,2,0,241,0,68,0,170,0,0,0,48,0,35,0,27,0,203,0,82,0,0,0,98,0,69,0,197,0,157,0,9,0,222,0,0,0,0,0,56,0,170,0,253,0,211,0,0,0,252,0,122,0,6,0,175,0,212,0,97,0,213,0,0,0,248,0,117,0,93,0,201,0,0,0,134,0,0,0,0,0,129,0,129,0,0,0,19,0,76,0,185,0,215,0,69,0,163,0,236,0,115,0,200,0,6,0,103,0,129,0,100,0,215,0,11,0,47,0,0,0,219,0,165,0,0,0,161,0,82,0,112,0,0,0,0,0,0,0,0,0,84,0,0,0,166,0,0,0,158,0,65,0,30,0,239,0,117,0,69,0,87,0,0,0,212,0,200,0,191,0,142,0,91,0,217,0,156,0,201,0,22,0,140,0,71,0,164,0,45,0,58,0,26,0,109,0,117,0,159,0,46,0,0,0,173,0,240,0,206,0,16,0,129,0,126,0,235,0,107,0,245,0,77,0,0,0,0,0,56,0,255,0,0,0,0,0,224,0,231,0,0,0,197,0,183,0,175,0,69,0,144,0,13,0,0,0,208,0,104,0,77,0,235,0,191,0,252,0,179,0,163,0,66,0,187,0,80,0,89,0,80,0,100,0,251,0,228,0,0,0,184,0,203,0,0,0,98,0,247,0,241,0,84,0,250,0,84,0,253,0,113,0,158,0,245,0,135,0,104,0,210,0,84,0,215,0,79,0,158,0,101,0,0,0,30,0,228,0,228,0,135,0,64,0,70,0,104,0,171,0,0,0,184,0,235,0,143,0,251,0,248,0,183,0,77,0,88,0,215,0,35,0,0,0,235,0,234,0,0,0,176,0,183,0,109,0,235,0,136,0,0,0,0,0,175,0,9,0,247,0,214,0,22,0,0,0,131,0,74,0,124,0,0,0,54,0,143,0,181,0,157,0,162,0,155,0,0,0,213,0,32,0,221,0,176,0,2,0,143,0,0,0,229,0,145,0,190,0,0,0,197,0,0,0,0,0,38,0,140,0,157,0,136,0,95,0,150,0,0,0,94,0,0,0,173,0,0,0,88,0,241,0,93,0,252,0,2,0,13,0,115,0,126,0,147,0,217,0,197,0,107,0,240,0,117,0,6,0,238,0,84,0,82,0,232,0,185,0,122,0,0,0,220,0,237,0,131,0,0,0,37,0,113,0,37,0,139,0,132,0,127,0,201,0,233,0,199,0,0,0,111,0,145,0,66,0,178,0,61,0,224,0,169,0,148,0,0,0,0,0,62,0,0,0,125,0,181,0,98,0,225,0,0,0,250,0,42,0,240,0,253,0,216,0,244,0,46,0,75,0,0,0,228,0,0,0,0,0,34,0,236,0,98,0,214,0,230,0,145,0,50,0,34,0,80,0,202,0,156,0,7,0,229,0,45,0,0,0,147,0,0,0,145,0,81,0,46,0,225,0,0,0,0,0,148,0,0,0,225,0,0,0,0,0,69,0,187,0,38,0,35,0,196,0,29,0,251,0,31,0,97,0,19,0,145,0,223,0,8,0,242,0,13,0,232,0,93,0,52,0,212,0,99,0,100,0,2,0,36,0,192,0,162,0,181,0,153,0,0,0,0,0,243,0,83,0,0,0,0,0,0,0,153,0,105,0,248,0,121,0,151,0,46,0,224,0,54,0,233,0,0,0,98,0,245,0,69,0,88,0,165,0,0,0,212,0,158,0,227,0,69,0,91,0,2,0,250,0,151,0,177,0,23,0,152,0,0,0,131,0,225,0,14,0,0,0,123,0,124,0,205,0,156,0,141,0,192,0,66,0,0,0,153,0,0,0,57,0,178,0,93,0,217,0,238,0,126,0,0,0,26,0,0,0,144,0,136,0,1,0,187,0,0,0,77,0,0,0,203,0,15,0,194,0,221,0,167,0,156,0,167,0,72,0,0,0,52,0,0,0,255,0,141,0,0,0,92,0,180,0,252,0,0,0,49,0,36,0,248,0,220,0,54,0,198,0,101,0,246,0,0,0,111,0,97,0,0,0,240,0,98,0,122,0,78,0,53,0,0,0,49,0,0,0,141,0,26,0,152,0,141,0,226,0,193,0,57,0,0,0,255,0,44,0,110,0,156,0,241,0,252,0,250,0,197,0,0,0,245,0,1,0,12,0,161,0,162,0,237,0,186,0,0,0,102,0,74,0,235,0,91,0,213,0,0,0,88,0,145,0,225,0,154,0,122,0,153,0,53,0,248,0,145,0,211,0,169,0,216,0,124,0,212,0,164,0,128,0,177,0,244,0,105,0,43,0,213,0,132,0,0,0,24,0,172,0,79,0,226,0,80,0,60,0,2,0,45,0,242,0,3,0,5,0,26,0,0,0,32,0,240,0,179,0,8,0,250,0,20,0,202,0,87,0,62,0,242,0,245,0,46,0,228,0,206,0,115,0,184,0,20,0,231,0,209,0,43,0,0,0,194,0,0,0,5,0,37,0,160,0,84,0,117,0,93,0,0,0,0,0,155,0,132,0,146,0,119,0,41,0,97,0,11,0,0,0,56,0,0,0,72,0,83,0,145,0);
signal scenario_full  : scenario_type := (235,31,52,31,52,30,45,31,82,31,119,31,14,31,149,31,59,31,59,30,59,29,111,31,111,30,212,31,212,30,4,31,251,31,3,31,37,31,166,31,198,31,238,31,221,31,11,31,252,31,255,31,234,31,26,31,26,30,59,31,85,31,237,31,150,31,42,31,128,31,125,31,125,30,92,31,254,31,126,31,126,30,126,29,182,31,82,31,82,30,155,31,70,31,40,31,30,31,30,30,30,29,105,31,105,30,118,31,118,30,118,29,83,31,83,30,26,31,187,31,215,31,154,31,40,31,40,30,40,29,204,31,49,31,49,30,12,31,12,30,102,31,181,31,181,30,198,31,193,31,42,31,41,31,44,31,189,31,189,30,17,31,184,31,253,31,220,31,63,31,22,31,228,31,228,30,254,31,254,30,121,31,148,31,232,31,237,31,16,31,211,31,211,30,208,31,165,31,165,30,182,31,87,31,61,31,61,30,6,31,200,31,200,30,116,31,109,31,229,31,202,31,126,31,128,31,180,31,83,31,83,30,216,31,43,31,43,30,43,29,160,31,7,31,149,31,149,30,8,31,247,31,239,31,5,31,171,31,14,31,130,31,246,31,246,30,219,31,219,30,67,31,110,31,103,31,103,30,89,31,89,30,113,31,230,31,208,31,217,31,53,31,53,30,9,31,171,31,103,31,188,31,109,31,172,31,159,31,102,31,33,31,211,31,32,31,26,31,155,31,155,30,149,31,155,31,31,31,177,31,109,31,74,31,35,31,35,30,60,31,60,30,86,31,86,30,121,31,177,31,106,31,236,31,18,31,108,31,108,30,179,31,190,31,108,31,164,31,164,30,224,31,113,31,206,31,206,30,206,29,24,31,80,31,94,31,226,31,98,31,98,30,69,31,8,31,137,31,19,31,2,31,241,31,68,31,170,31,170,30,48,31,35,31,27,31,203,31,82,31,82,30,98,31,69,31,197,31,157,31,9,31,222,31,222,30,222,29,56,31,170,31,253,31,211,31,211,30,252,31,122,31,6,31,175,31,212,31,97,31,213,31,213,30,248,31,117,31,93,31,201,31,201,30,134,31,134,30,134,29,129,31,129,31,129,30,19,31,76,31,185,31,215,31,69,31,163,31,236,31,115,31,200,31,6,31,103,31,129,31,100,31,215,31,11,31,47,31,47,30,219,31,165,31,165,30,161,31,82,31,112,31,112,30,112,29,112,28,112,27,84,31,84,30,166,31,166,30,158,31,65,31,30,31,239,31,117,31,69,31,87,31,87,30,212,31,200,31,191,31,142,31,91,31,217,31,156,31,201,31,22,31,140,31,71,31,164,31,45,31,58,31,26,31,109,31,117,31,159,31,46,31,46,30,173,31,240,31,206,31,16,31,129,31,126,31,235,31,107,31,245,31,77,31,77,30,77,29,56,31,255,31,255,30,255,29,224,31,231,31,231,30,197,31,183,31,175,31,69,31,144,31,13,31,13,30,208,31,104,31,77,31,235,31,191,31,252,31,179,31,163,31,66,31,187,31,80,31,89,31,80,31,100,31,251,31,228,31,228,30,184,31,203,31,203,30,98,31,247,31,241,31,84,31,250,31,84,31,253,31,113,31,158,31,245,31,135,31,104,31,210,31,84,31,215,31,79,31,158,31,101,31,101,30,30,31,228,31,228,31,135,31,64,31,70,31,104,31,171,31,171,30,184,31,235,31,143,31,251,31,248,31,183,31,77,31,88,31,215,31,35,31,35,30,235,31,234,31,234,30,176,31,183,31,109,31,235,31,136,31,136,30,136,29,175,31,9,31,247,31,214,31,22,31,22,30,131,31,74,31,124,31,124,30,54,31,143,31,181,31,157,31,162,31,155,31,155,30,213,31,32,31,221,31,176,31,2,31,143,31,143,30,229,31,145,31,190,31,190,30,197,31,197,30,197,29,38,31,140,31,157,31,136,31,95,31,150,31,150,30,94,31,94,30,173,31,173,30,88,31,241,31,93,31,252,31,2,31,13,31,115,31,126,31,147,31,217,31,197,31,107,31,240,31,117,31,6,31,238,31,84,31,82,31,232,31,185,31,122,31,122,30,220,31,237,31,131,31,131,30,37,31,113,31,37,31,139,31,132,31,127,31,201,31,233,31,199,31,199,30,111,31,145,31,66,31,178,31,61,31,224,31,169,31,148,31,148,30,148,29,62,31,62,30,125,31,181,31,98,31,225,31,225,30,250,31,42,31,240,31,253,31,216,31,244,31,46,31,75,31,75,30,228,31,228,30,228,29,34,31,236,31,98,31,214,31,230,31,145,31,50,31,34,31,80,31,202,31,156,31,7,31,229,31,45,31,45,30,147,31,147,30,145,31,81,31,46,31,225,31,225,30,225,29,148,31,148,30,225,31,225,30,225,29,69,31,187,31,38,31,35,31,196,31,29,31,251,31,31,31,97,31,19,31,145,31,223,31,8,31,242,31,13,31,232,31,93,31,52,31,212,31,99,31,100,31,2,31,36,31,192,31,162,31,181,31,153,31,153,30,153,29,243,31,83,31,83,30,83,29,83,28,153,31,105,31,248,31,121,31,151,31,46,31,224,31,54,31,233,31,233,30,98,31,245,31,69,31,88,31,165,31,165,30,212,31,158,31,227,31,69,31,91,31,2,31,250,31,151,31,177,31,23,31,152,31,152,30,131,31,225,31,14,31,14,30,123,31,124,31,205,31,156,31,141,31,192,31,66,31,66,30,153,31,153,30,57,31,178,31,93,31,217,31,238,31,126,31,126,30,26,31,26,30,144,31,136,31,1,31,187,31,187,30,77,31,77,30,203,31,15,31,194,31,221,31,167,31,156,31,167,31,72,31,72,30,52,31,52,30,255,31,141,31,141,30,92,31,180,31,252,31,252,30,49,31,36,31,248,31,220,31,54,31,198,31,101,31,246,31,246,30,111,31,97,31,97,30,240,31,98,31,122,31,78,31,53,31,53,30,49,31,49,30,141,31,26,31,152,31,141,31,226,31,193,31,57,31,57,30,255,31,44,31,110,31,156,31,241,31,252,31,250,31,197,31,197,30,245,31,1,31,12,31,161,31,162,31,237,31,186,31,186,30,102,31,74,31,235,31,91,31,213,31,213,30,88,31,145,31,225,31,154,31,122,31,153,31,53,31,248,31,145,31,211,31,169,31,216,31,124,31,212,31,164,31,128,31,177,31,244,31,105,31,43,31,213,31,132,31,132,30,24,31,172,31,79,31,226,31,80,31,60,31,2,31,45,31,242,31,3,31,5,31,26,31,26,30,32,31,240,31,179,31,8,31,250,31,20,31,202,31,87,31,62,31,242,31,245,31,46,31,228,31,206,31,115,31,184,31,20,31,231,31,209,31,43,31,43,30,194,31,194,30,5,31,37,31,160,31,84,31,117,31,93,31,93,30,93,29,155,31,132,31,146,31,119,31,41,31,97,31,11,31,11,30,56,31,56,30,72,31,83,31,145,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
