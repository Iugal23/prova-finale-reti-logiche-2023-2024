-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 666;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (20,0,29,0,51,0,210,0,226,0,223,0,202,0,127,0,37,0,0,0,133,0,149,0,25,0,5,0,115,0,0,0,171,0,236,0,231,0,240,0,46,0,196,0,90,0,0,0,63,0,65,0,167,0,110,0,233,0,109,0,141,0,115,0,122,0,167,0,55,0,117,0,233,0,147,0,170,0,0,0,64,0,64,0,0,0,234,0,146,0,195,0,0,0,0,0,0,0,125,0,127,0,0,0,33,0,151,0,169,0,0,0,92,0,0,0,241,0,228,0,228,0,195,0,0,0,159,0,172,0,89,0,5,0,35,0,242,0,205,0,31,0,102,0,0,0,60,0,39,0,68,0,87,0,4,0,76,0,254,0,0,0,187,0,49,0,47,0,135,0,0,0,0,0,0,0,130,0,135,0,239,0,0,0,112,0,219,0,244,0,89,0,167,0,0,0,0,0,109,0,120,0,0,0,0,0,129,0,27,0,0,0,41,0,227,0,21,0,59,0,0,0,152,0,228,0,110,0,83,0,0,0,107,0,0,0,31,0,187,0,40,0,38,0,185,0,24,0,30,0,64,0,169,0,232,0,0,0,228,0,243,0,54,0,224,0,222,0,134,0,156,0,8,0,52,0,97,0,135,0,8,0,130,0,29,0,218,0,131,0,211,0,119,0,68,0,96,0,0,0,162,0,19,0,33,0,96,0,222,0,0,0,251,0,154,0,36,0,219,0,242,0,1,0,250,0,50,0,240,0,174,0,113,0,191,0,146,0,0,0,106,0,32,0,100,0,218,0,104,0,47,0,0,0,173,0,59,0,137,0,22,0,187,0,27,0,142,0,24,0,142,0,0,0,208,0,145,0,66,0,107,0,204,0,0,0,194,0,49,0,0,0,222,0,188,0,0,0,195,0,131,0,0,0,85,0,160,0,150,0,153,0,0,0,13,0,130,0,214,0,127,0,66,0,0,0,92,0,59,0,28,0,125,0,0,0,88,0,242,0,23,0,77,0,112,0,137,0,182,0,234,0,131,0,0,0,0,0,54,0,95,0,0,0,0,0,0,0,86,0,0,0,102,0,250,0,76,0,79,0,0,0,159,0,0,0,243,0,74,0,0,0,254,0,0,0,70,0,0,0,0,0,177,0,160,0,175,0,118,0,205,0,225,0,229,0,61,0,178,0,122,0,54,0,80,0,175,0,187,0,218,0,206,0,0,0,0,0,245,0,0,0,223,0,190,0,0,0,0,0,0,0,238,0,163,0,0,0,58,0,145,0,184,0,51,0,0,0,242,0,145,0,20,0,129,0,56,0,0,0,64,0,85,0,104,0,248,0,155,0,85,0,85,0,239,0,165,0,31,0,57,0,113,0,42,0,240,0,250,0,5,0,241,0,130,0,76,0,52,0,62,0,0,0,89,0,214,0,99,0,154,0,0,0,37,0,0,0,236,0,0,0,10,0,250,0,93,0,61,0,253,0,146,0,224,0,236,0,42,0,97,0,0,0,101,0,172,0,85,0,199,0,105,0,165,0,255,0,246,0,0,0,147,0,44,0,73,0,127,0,0,0,235,0,48,0,6,0,206,0,0,0,90,0,42,0,59,0,0,0,182,0,85,0,62,0,140,0,0,0,241,0,12,0,88,0,9,0,0,0,89,0,0,0,213,0,91,0,16,0,13,0,0,0,251,0,0,0,0,0,0,0,43,0,134,0,0,0,33,0,207,0,234,0,5,0,74,0,219,0,184,0,108,0,37,0,67,0,0,0,33,0,21,0,204,0,223,0,176,0,232,0,234,0,113,0,0,0,101,0,246,0,254,0,16,0,142,0,0,0,65,0,94,0,0,0,200,0,3,0,0,0,150,0,200,0,0,0,235,0,1,0,174,0,66,0,62,0,202,0,99,0,130,0,29,0,91,0,0,0,153,0,2,0,83,0,132,0,156,0,255,0,0,0,200,0,238,0,208,0,125,0,0,0,0,0,218,0,220,0,2,0,90,0,0,0,179,0,105,0,192,0,0,0,180,0,229,0,141,0,114,0,12,0,0,0,174,0,227,0,122,0,19,0,239,0,89,0,0,0,172,0,0,0,2,0,95,0,225,0,136,0,179,0,196,0,127,0,0,0,69,0,151,0,149,0,32,0,0,0,26,0,235,0,22,0,172,0,11,0,96,0,23,0,158,0,0,0,245,0,145,0,248,0,218,0,182,0,187,0,71,0,224,0,107,0,189,0,142,0,0,0,76,0,84,0,109,0,23,0,0,0,0,0,142,0,111,0,21,0,131,0,188,0,0,0,0,0,104,0,0,0,0,0,82,0,214,0,0,0,242,0,247,0,209,0,45,0,89,0,0,0,53,0,0,0,172,0,126,0,156,0,158,0,206,0,171,0,97,0,101,0,26,0,249,0,215,0,57,0,249,0,0,0,166,0,218,0,16,0,176,0,64,0,168,0,105,0,216,0,0,0,64,0,0,0,51,0,41,0,69,0,0,0,0,0,115,0,191,0,227,0,0,0,240,0,235,0,54,0,69,0,0,0,5,0,42,0,138,0,71,0,133,0,29,0,0,0,46,0,33,0,21,0,57,0,0,0,0,0,0,0,0,0,204,0,172,0,203,0,64,0,147,0,26,0,12,0,157,0,111,0,112,0,59,0,127,0,0,0,0,0,253,0,7,0,218,0,220,0,0,0,72,0,133,0,247,0,209,0,103,0,63,0,179,0,196,0,216,0,86,0,187,0,119,0,46,0,41,0,0,0,238,0,110,0,119,0,195,0,246,0,0,0,56,0,53,0,0,0,221,0,236,0,203,0,82,0,86,0,137,0,0,0,0,0,136,0,131,0,0,0,77,0,41,0,29,0,191,0,173,0,177,0,160,0,199,0,181,0,98,0,0,0,2,0,0,0,233,0,193,0,0,0,0,0,108,0,107,0,99,0,154,0,11,0,20,0,0,0,140,0,0,0,0,0,190,0,178,0,0,0,0,0,177,0,0,0,181,0,10,0);
signal scenario_full  : scenario_type := (20,31,29,31,51,31,210,31,226,31,223,31,202,31,127,31,37,31,37,30,133,31,149,31,25,31,5,31,115,31,115,30,171,31,236,31,231,31,240,31,46,31,196,31,90,31,90,30,63,31,65,31,167,31,110,31,233,31,109,31,141,31,115,31,122,31,167,31,55,31,117,31,233,31,147,31,170,31,170,30,64,31,64,31,64,30,234,31,146,31,195,31,195,30,195,29,195,28,125,31,127,31,127,30,33,31,151,31,169,31,169,30,92,31,92,30,241,31,228,31,228,31,195,31,195,30,159,31,172,31,89,31,5,31,35,31,242,31,205,31,31,31,102,31,102,30,60,31,39,31,68,31,87,31,4,31,76,31,254,31,254,30,187,31,49,31,47,31,135,31,135,30,135,29,135,28,130,31,135,31,239,31,239,30,112,31,219,31,244,31,89,31,167,31,167,30,167,29,109,31,120,31,120,30,120,29,129,31,27,31,27,30,41,31,227,31,21,31,59,31,59,30,152,31,228,31,110,31,83,31,83,30,107,31,107,30,31,31,187,31,40,31,38,31,185,31,24,31,30,31,64,31,169,31,232,31,232,30,228,31,243,31,54,31,224,31,222,31,134,31,156,31,8,31,52,31,97,31,135,31,8,31,130,31,29,31,218,31,131,31,211,31,119,31,68,31,96,31,96,30,162,31,19,31,33,31,96,31,222,31,222,30,251,31,154,31,36,31,219,31,242,31,1,31,250,31,50,31,240,31,174,31,113,31,191,31,146,31,146,30,106,31,32,31,100,31,218,31,104,31,47,31,47,30,173,31,59,31,137,31,22,31,187,31,27,31,142,31,24,31,142,31,142,30,208,31,145,31,66,31,107,31,204,31,204,30,194,31,49,31,49,30,222,31,188,31,188,30,195,31,131,31,131,30,85,31,160,31,150,31,153,31,153,30,13,31,130,31,214,31,127,31,66,31,66,30,92,31,59,31,28,31,125,31,125,30,88,31,242,31,23,31,77,31,112,31,137,31,182,31,234,31,131,31,131,30,131,29,54,31,95,31,95,30,95,29,95,28,86,31,86,30,102,31,250,31,76,31,79,31,79,30,159,31,159,30,243,31,74,31,74,30,254,31,254,30,70,31,70,30,70,29,177,31,160,31,175,31,118,31,205,31,225,31,229,31,61,31,178,31,122,31,54,31,80,31,175,31,187,31,218,31,206,31,206,30,206,29,245,31,245,30,223,31,190,31,190,30,190,29,190,28,238,31,163,31,163,30,58,31,145,31,184,31,51,31,51,30,242,31,145,31,20,31,129,31,56,31,56,30,64,31,85,31,104,31,248,31,155,31,85,31,85,31,239,31,165,31,31,31,57,31,113,31,42,31,240,31,250,31,5,31,241,31,130,31,76,31,52,31,62,31,62,30,89,31,214,31,99,31,154,31,154,30,37,31,37,30,236,31,236,30,10,31,250,31,93,31,61,31,253,31,146,31,224,31,236,31,42,31,97,31,97,30,101,31,172,31,85,31,199,31,105,31,165,31,255,31,246,31,246,30,147,31,44,31,73,31,127,31,127,30,235,31,48,31,6,31,206,31,206,30,90,31,42,31,59,31,59,30,182,31,85,31,62,31,140,31,140,30,241,31,12,31,88,31,9,31,9,30,89,31,89,30,213,31,91,31,16,31,13,31,13,30,251,31,251,30,251,29,251,28,43,31,134,31,134,30,33,31,207,31,234,31,5,31,74,31,219,31,184,31,108,31,37,31,67,31,67,30,33,31,21,31,204,31,223,31,176,31,232,31,234,31,113,31,113,30,101,31,246,31,254,31,16,31,142,31,142,30,65,31,94,31,94,30,200,31,3,31,3,30,150,31,200,31,200,30,235,31,1,31,174,31,66,31,62,31,202,31,99,31,130,31,29,31,91,31,91,30,153,31,2,31,83,31,132,31,156,31,255,31,255,30,200,31,238,31,208,31,125,31,125,30,125,29,218,31,220,31,2,31,90,31,90,30,179,31,105,31,192,31,192,30,180,31,229,31,141,31,114,31,12,31,12,30,174,31,227,31,122,31,19,31,239,31,89,31,89,30,172,31,172,30,2,31,95,31,225,31,136,31,179,31,196,31,127,31,127,30,69,31,151,31,149,31,32,31,32,30,26,31,235,31,22,31,172,31,11,31,96,31,23,31,158,31,158,30,245,31,145,31,248,31,218,31,182,31,187,31,71,31,224,31,107,31,189,31,142,31,142,30,76,31,84,31,109,31,23,31,23,30,23,29,142,31,111,31,21,31,131,31,188,31,188,30,188,29,104,31,104,30,104,29,82,31,214,31,214,30,242,31,247,31,209,31,45,31,89,31,89,30,53,31,53,30,172,31,126,31,156,31,158,31,206,31,171,31,97,31,101,31,26,31,249,31,215,31,57,31,249,31,249,30,166,31,218,31,16,31,176,31,64,31,168,31,105,31,216,31,216,30,64,31,64,30,51,31,41,31,69,31,69,30,69,29,115,31,191,31,227,31,227,30,240,31,235,31,54,31,69,31,69,30,5,31,42,31,138,31,71,31,133,31,29,31,29,30,46,31,33,31,21,31,57,31,57,30,57,29,57,28,57,27,204,31,172,31,203,31,64,31,147,31,26,31,12,31,157,31,111,31,112,31,59,31,127,31,127,30,127,29,253,31,7,31,218,31,220,31,220,30,72,31,133,31,247,31,209,31,103,31,63,31,179,31,196,31,216,31,86,31,187,31,119,31,46,31,41,31,41,30,238,31,110,31,119,31,195,31,246,31,246,30,56,31,53,31,53,30,221,31,236,31,203,31,82,31,86,31,137,31,137,30,137,29,136,31,131,31,131,30,77,31,41,31,29,31,191,31,173,31,177,31,160,31,199,31,181,31,98,31,98,30,2,31,2,30,233,31,193,31,193,30,193,29,108,31,107,31,99,31,154,31,11,31,20,31,20,30,140,31,140,30,140,29,190,31,178,31,178,30,178,29,177,31,177,30,181,31,10,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
