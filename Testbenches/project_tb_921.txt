-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 953;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (147,0,233,0,222,0,29,0,172,0,198,0,56,0,115,0,245,0,0,0,75,0,229,0,158,0,67,0,0,0,249,0,64,0,139,0,98,0,7,0,0,0,135,0,165,0,91,0,133,0,40,0,171,0,0,0,0,0,174,0,0,0,21,0,253,0,190,0,131,0,16,0,24,0,239,0,162,0,196,0,0,0,77,0,0,0,255,0,32,0,218,0,230,0,197,0,0,0,216,0,204,0,0,0,57,0,19,0,128,0,0,0,15,0,0,0,253,0,71,0,236,0,178,0,0,0,0,0,247,0,37,0,57,0,156,0,7,0,131,0,0,0,107,0,152,0,0,0,0,0,162,0,129,0,62,0,78,0,192,0,7,0,96,0,0,0,82,0,0,0,129,0,12,0,0,0,0,0,146,0,161,0,0,0,229,0,230,0,0,0,0,0,45,0,222,0,245,0,0,0,93,0,145,0,15,0,0,0,254,0,26,0,46,0,0,0,105,0,175,0,109,0,57,0,0,0,240,0,230,0,96,0,0,0,177,0,143,0,83,0,82,0,184,0,101,0,203,0,20,0,183,0,0,0,0,0,233,0,179,0,221,0,48,0,0,0,119,0,19,0,146,0,8,0,238,0,157,0,88,0,124,0,149,0,236,0,242,0,165,0,252,0,192,0,154,0,146,0,250,0,171,0,106,0,161,0,0,0,0,0,239,0,138,0,248,0,193,0,213,0,126,0,18,0,0,0,0,0,190,0,0,0,179,0,0,0,0,0,80,0,0,0,149,0,36,0,183,0,0,0,80,0,0,0,155,0,116,0,0,0,0,0,171,0,229,0,36,0,78,0,83,0,89,0,75,0,24,0,71,0,0,0,71,0,91,0,0,0,56,0,0,0,0,0,2,0,0,0,231,0,175,0,217,0,92,0,229,0,92,0,179,0,0,0,70,0,174,0,29,0,116,0,170,0,177,0,237,0,70,0,132,0,128,0,21,0,19,0,0,0,88,0,78,0,211,0,63,0,110,0,24,0,14,0,0,0,13,0,155,0,89,0,0,0,51,0,0,0,205,0,175,0,0,0,193,0,20,0,0,0,195,0,18,0,136,0,0,0,29,0,101,0,42,0,0,0,239,0,72,0,128,0,107,0,186,0,0,0,0,0,127,0,130,0,115,0,88,0,128,0,165,0,91,0,224,0,142,0,200,0,152,0,155,0,73,0,163,0,0,0,248,0,249,0,229,0,196,0,0,0,0,0,83,0,191,0,0,0,229,0,0,0,32,0,0,0,103,0,100,0,137,0,76,0,240,0,72,0,248,0,32,0,125,0,0,0,106,0,239,0,0,0,128,0,36,0,31,0,0,0,18,0,37,0,0,0,135,0,185,0,79,0,20,0,204,0,206,0,64,0,116,0,0,0,80,0,177,0,43,0,48,0,165,0,131,0,59,0,141,0,169,0,25,0,52,0,61,0,178,0,0,0,18,0,240,0,101,0,31,0,0,0,162,0,212,0,174,0,159,0,113,0,206,0,115,0,117,0,131,0,153,0,6,0,196,0,0,0,182,0,137,0,164,0,208,0,38,0,68,0,0,0,19,0,79,0,0,0,119,0,0,0,0,0,108,0,0,0,172,0,146,0,167,0,166,0,12,0,192,0,0,0,209,0,187,0,59,0,0,0,0,0,96,0,0,0,17,0,0,0,234,0,0,0,29,0,135,0,206,0,29,0,0,0,159,0,0,0,0,0,232,0,99,0,245,0,34,0,178,0,0,0,110,0,24,0,161,0,178,0,41,0,47,0,83,0,188,0,255,0,26,0,0,0,251,0,164,0,227,0,162,0,0,0,125,0,73,0,109,0,182,0,249,0,59,0,245,0,71,0,176,0,102,0,78,0,0,0,100,0,173,0,0,0,124,0,229,0,0,0,122,0,0,0,0,0,21,0,82,0,14,0,139,0,182,0,0,0,203,0,228,0,0,0,39,0,0,0,223,0,61,0,1,0,173,0,0,0,170,0,97,0,0,0,57,0,58,0,169,0,0,0,195,0,0,0,27,0,211,0,6,0,250,0,50,0,224,0,113,0,113,0,153,0,118,0,234,0,213,0,0,0,141,0,241,0,95,0,0,0,193,0,177,0,78,0,222,0,171,0,130,0,0,0,87,0,0,0,0,0,148,0,0,0,110,0,0,0,134,0,223,0,169,0,117,0,0,0,156,0,188,0,149,0,76,0,148,0,181,0,13,0,83,0,2,0,171,0,250,0,118,0,245,0,203,0,67,0,169,0,78,0,0,0,229,0,65,0,215,0,0,0,64,0,38,0,177,0,73,0,54,0,186,0,124,0,112,0,246,0,216,0,0,0,0,0,218,0,0,0,115,0,0,0,128,0,119,0,62,0,219,0,0,0,0,0,119,0,0,0,0,0,99,0,38,0,146,0,127,0,89,0,134,0,71,0,131,0,107,0,30,0,208,0,172,0,127,0,248,0,0,0,195,0,51,0,250,0,241,0,184,0,246,0,102,0,232,0,238,0,0,0,122,0,0,0,0,0,250,0,131,0,3,0,179,0,228,0,161,0,154,0,223,0,71,0,190,0,198,0,102,0,212,0,0,0,244,0,0,0,0,0,142,0,176,0,246,0,0,0,108,0,39,0,225,0,229,0,31,0,188,0,0,0,175,0,118,0,0,0,0,0,150,0,151,0,0,0,104,0,54,0,0,0,100,0,55,0,92,0,223,0,89,0,241,0,45,0,124,0,172,0,47,0,0,0,0,0,231,0,0,0,27,0,63,0,105,0,0,0,192,0,109,0,214,0,0,0,0,0,17,0,124,0,4,0,140,0,0,0,181,0,84,0,212,0,153,0,0,0,0,0,53,0,14,0,206,0,93,0,0,0,197,0,0,0,0,0,70,0,166,0,227,0,0,0,211,0,164,0,0,0,212,0,253,0,195,0,174,0,0,0,84,0,178,0,25,0,234,0,92,0,175,0,0,0,248,0,68,0,0,0,128,0,25,0,135,0,45,0,0,0,207,0,225,0,0,0,124,0,163,0,184,0,21,0,33,0,49,0,37,0,0,0,248,0,233,0,158,0,0,0,0,0,155,0,25,0,140,0,84,0,233,0,56,0,234,0,176,0,64,0,115,0,203,0,44,0,50,0,197,0,0,0,122,0,145,0,183,0,63,0,115,0,0,0,0,0,164,0,102,0,16,0,70,0,136,0,190,0,0,0,159,0,1,0,218,0,187,0,169,0,201,0,45,0,77,0,180,0,45,0,0,0,0,0,0,0,1,0,196,0,27,0,0,0,68,0,101,0,184,0,203,0,246,0,0,0,48,0,65,0,0,0,39,0,147,0,25,0,223,0,137,0,84,0,0,0,166,0,88,0,0,0,0,0,0,0,0,0,113,0,67,0,53,0,243,0,165,0,2,0,0,0,247,0,0,0,156,0,0,0,130,0,178,0,0,0,87,0,0,0,60,0,103,0,49,0,24,0,0,0,123,0,0,0,65,0,42,0,65,0,200,0,236,0,77,0,33,0,0,0,0,0,203,0,19,0,94,0,0,0,80,0,115,0,0,0,2,0,122,0,126,0,81,0,230,0,235,0,51,0,204,0,162,0,54,0,87,0,91,0,103,0,15,0,182,0,188,0,0,0,98,0,79,0,107,0,161,0,226,0,122,0,169,0,219,0,67,0,139,0,19,0,251,0,9,0,65,0,0,0,0,0,0,0,190,0,166,0,62,0,142,0,157,0,73,0,119,0,169,0,52,0,229,0,0,0,146,0,117,0,142,0,2,0,246,0,54,0,24,0,93,0,67,0,65,0,197,0,204,0,3,0,0,0,162,0,193,0,102,0,253,0,118,0,162,0,0,0,106,0,44,0,59,0,221,0,194,0,63,0,88,0,242,0,15,0,80,0,138,0,141,0,0,0,115,0,0,0,252,0,156,0,160,0,0,0,212,0,82,0,201,0,63,0,110,0,172,0,0,0,60,0,9,0,0,0,25,0,48,0,144,0,255,0,143,0,41,0,0,0,112,0,93,0,34,0,140,0,41,0,0,0,216,0,0,0,132,0,136,0,88,0,96,0,42,0,67,0,253,0,155,0,0,0,27,0,66,0,234,0,121,0,243,0,116,0,209,0,253,0,216,0,156,0,88,0,118,0,0,0,249,0,105,0,245,0,176,0,184,0,125,0,137,0,170,0,26,0,245,0,140,0,190,0,132,0,124,0,169,0,193,0,170,0,236,0,211,0,232,0,21,0,0,0,55,0,0,0,128,0,147,0,137,0);
signal scenario_full  : scenario_type := (147,31,233,31,222,31,29,31,172,31,198,31,56,31,115,31,245,31,245,30,75,31,229,31,158,31,67,31,67,30,249,31,64,31,139,31,98,31,7,31,7,30,135,31,165,31,91,31,133,31,40,31,171,31,171,30,171,29,174,31,174,30,21,31,253,31,190,31,131,31,16,31,24,31,239,31,162,31,196,31,196,30,77,31,77,30,255,31,32,31,218,31,230,31,197,31,197,30,216,31,204,31,204,30,57,31,19,31,128,31,128,30,15,31,15,30,253,31,71,31,236,31,178,31,178,30,178,29,247,31,37,31,57,31,156,31,7,31,131,31,131,30,107,31,152,31,152,30,152,29,162,31,129,31,62,31,78,31,192,31,7,31,96,31,96,30,82,31,82,30,129,31,12,31,12,30,12,29,146,31,161,31,161,30,229,31,230,31,230,30,230,29,45,31,222,31,245,31,245,30,93,31,145,31,15,31,15,30,254,31,26,31,46,31,46,30,105,31,175,31,109,31,57,31,57,30,240,31,230,31,96,31,96,30,177,31,143,31,83,31,82,31,184,31,101,31,203,31,20,31,183,31,183,30,183,29,233,31,179,31,221,31,48,31,48,30,119,31,19,31,146,31,8,31,238,31,157,31,88,31,124,31,149,31,236,31,242,31,165,31,252,31,192,31,154,31,146,31,250,31,171,31,106,31,161,31,161,30,161,29,239,31,138,31,248,31,193,31,213,31,126,31,18,31,18,30,18,29,190,31,190,30,179,31,179,30,179,29,80,31,80,30,149,31,36,31,183,31,183,30,80,31,80,30,155,31,116,31,116,30,116,29,171,31,229,31,36,31,78,31,83,31,89,31,75,31,24,31,71,31,71,30,71,31,91,31,91,30,56,31,56,30,56,29,2,31,2,30,231,31,175,31,217,31,92,31,229,31,92,31,179,31,179,30,70,31,174,31,29,31,116,31,170,31,177,31,237,31,70,31,132,31,128,31,21,31,19,31,19,30,88,31,78,31,211,31,63,31,110,31,24,31,14,31,14,30,13,31,155,31,89,31,89,30,51,31,51,30,205,31,175,31,175,30,193,31,20,31,20,30,195,31,18,31,136,31,136,30,29,31,101,31,42,31,42,30,239,31,72,31,128,31,107,31,186,31,186,30,186,29,127,31,130,31,115,31,88,31,128,31,165,31,91,31,224,31,142,31,200,31,152,31,155,31,73,31,163,31,163,30,248,31,249,31,229,31,196,31,196,30,196,29,83,31,191,31,191,30,229,31,229,30,32,31,32,30,103,31,100,31,137,31,76,31,240,31,72,31,248,31,32,31,125,31,125,30,106,31,239,31,239,30,128,31,36,31,31,31,31,30,18,31,37,31,37,30,135,31,185,31,79,31,20,31,204,31,206,31,64,31,116,31,116,30,80,31,177,31,43,31,48,31,165,31,131,31,59,31,141,31,169,31,25,31,52,31,61,31,178,31,178,30,18,31,240,31,101,31,31,31,31,30,162,31,212,31,174,31,159,31,113,31,206,31,115,31,117,31,131,31,153,31,6,31,196,31,196,30,182,31,137,31,164,31,208,31,38,31,68,31,68,30,19,31,79,31,79,30,119,31,119,30,119,29,108,31,108,30,172,31,146,31,167,31,166,31,12,31,192,31,192,30,209,31,187,31,59,31,59,30,59,29,96,31,96,30,17,31,17,30,234,31,234,30,29,31,135,31,206,31,29,31,29,30,159,31,159,30,159,29,232,31,99,31,245,31,34,31,178,31,178,30,110,31,24,31,161,31,178,31,41,31,47,31,83,31,188,31,255,31,26,31,26,30,251,31,164,31,227,31,162,31,162,30,125,31,73,31,109,31,182,31,249,31,59,31,245,31,71,31,176,31,102,31,78,31,78,30,100,31,173,31,173,30,124,31,229,31,229,30,122,31,122,30,122,29,21,31,82,31,14,31,139,31,182,31,182,30,203,31,228,31,228,30,39,31,39,30,223,31,61,31,1,31,173,31,173,30,170,31,97,31,97,30,57,31,58,31,169,31,169,30,195,31,195,30,27,31,211,31,6,31,250,31,50,31,224,31,113,31,113,31,153,31,118,31,234,31,213,31,213,30,141,31,241,31,95,31,95,30,193,31,177,31,78,31,222,31,171,31,130,31,130,30,87,31,87,30,87,29,148,31,148,30,110,31,110,30,134,31,223,31,169,31,117,31,117,30,156,31,188,31,149,31,76,31,148,31,181,31,13,31,83,31,2,31,171,31,250,31,118,31,245,31,203,31,67,31,169,31,78,31,78,30,229,31,65,31,215,31,215,30,64,31,38,31,177,31,73,31,54,31,186,31,124,31,112,31,246,31,216,31,216,30,216,29,218,31,218,30,115,31,115,30,128,31,119,31,62,31,219,31,219,30,219,29,119,31,119,30,119,29,99,31,38,31,146,31,127,31,89,31,134,31,71,31,131,31,107,31,30,31,208,31,172,31,127,31,248,31,248,30,195,31,51,31,250,31,241,31,184,31,246,31,102,31,232,31,238,31,238,30,122,31,122,30,122,29,250,31,131,31,3,31,179,31,228,31,161,31,154,31,223,31,71,31,190,31,198,31,102,31,212,31,212,30,244,31,244,30,244,29,142,31,176,31,246,31,246,30,108,31,39,31,225,31,229,31,31,31,188,31,188,30,175,31,118,31,118,30,118,29,150,31,151,31,151,30,104,31,54,31,54,30,100,31,55,31,92,31,223,31,89,31,241,31,45,31,124,31,172,31,47,31,47,30,47,29,231,31,231,30,27,31,63,31,105,31,105,30,192,31,109,31,214,31,214,30,214,29,17,31,124,31,4,31,140,31,140,30,181,31,84,31,212,31,153,31,153,30,153,29,53,31,14,31,206,31,93,31,93,30,197,31,197,30,197,29,70,31,166,31,227,31,227,30,211,31,164,31,164,30,212,31,253,31,195,31,174,31,174,30,84,31,178,31,25,31,234,31,92,31,175,31,175,30,248,31,68,31,68,30,128,31,25,31,135,31,45,31,45,30,207,31,225,31,225,30,124,31,163,31,184,31,21,31,33,31,49,31,37,31,37,30,248,31,233,31,158,31,158,30,158,29,155,31,25,31,140,31,84,31,233,31,56,31,234,31,176,31,64,31,115,31,203,31,44,31,50,31,197,31,197,30,122,31,145,31,183,31,63,31,115,31,115,30,115,29,164,31,102,31,16,31,70,31,136,31,190,31,190,30,159,31,1,31,218,31,187,31,169,31,201,31,45,31,77,31,180,31,45,31,45,30,45,29,45,28,1,31,196,31,27,31,27,30,68,31,101,31,184,31,203,31,246,31,246,30,48,31,65,31,65,30,39,31,147,31,25,31,223,31,137,31,84,31,84,30,166,31,88,31,88,30,88,29,88,28,88,27,113,31,67,31,53,31,243,31,165,31,2,31,2,30,247,31,247,30,156,31,156,30,130,31,178,31,178,30,87,31,87,30,60,31,103,31,49,31,24,31,24,30,123,31,123,30,65,31,42,31,65,31,200,31,236,31,77,31,33,31,33,30,33,29,203,31,19,31,94,31,94,30,80,31,115,31,115,30,2,31,122,31,126,31,81,31,230,31,235,31,51,31,204,31,162,31,54,31,87,31,91,31,103,31,15,31,182,31,188,31,188,30,98,31,79,31,107,31,161,31,226,31,122,31,169,31,219,31,67,31,139,31,19,31,251,31,9,31,65,31,65,30,65,29,65,28,190,31,166,31,62,31,142,31,157,31,73,31,119,31,169,31,52,31,229,31,229,30,146,31,117,31,142,31,2,31,246,31,54,31,24,31,93,31,67,31,65,31,197,31,204,31,3,31,3,30,162,31,193,31,102,31,253,31,118,31,162,31,162,30,106,31,44,31,59,31,221,31,194,31,63,31,88,31,242,31,15,31,80,31,138,31,141,31,141,30,115,31,115,30,252,31,156,31,160,31,160,30,212,31,82,31,201,31,63,31,110,31,172,31,172,30,60,31,9,31,9,30,25,31,48,31,144,31,255,31,143,31,41,31,41,30,112,31,93,31,34,31,140,31,41,31,41,30,216,31,216,30,132,31,136,31,88,31,96,31,42,31,67,31,253,31,155,31,155,30,27,31,66,31,234,31,121,31,243,31,116,31,209,31,253,31,216,31,156,31,88,31,118,31,118,30,249,31,105,31,245,31,176,31,184,31,125,31,137,31,170,31,26,31,245,31,140,31,190,31,132,31,124,31,169,31,193,31,170,31,236,31,211,31,232,31,21,31,21,30,55,31,55,30,128,31,147,31,137,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
