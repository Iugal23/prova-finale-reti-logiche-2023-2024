-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 834;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (104,0,160,0,111,0,241,0,0,0,0,0,126,0,133,0,0,0,71,0,0,0,118,0,179,0,145,0,254,0,77,0,33,0,56,0,216,0,254,0,113,0,0,0,0,0,235,0,158,0,0,0,67,0,25,0,0,0,29,0,156,0,0,0,103,0,97,0,101,0,16,0,160,0,8,0,190,0,27,0,119,0,120,0,43,0,113,0,166,0,208,0,60,0,0,0,115,0,253,0,6,0,119,0,249,0,198,0,151,0,31,0,100,0,243,0,207,0,0,0,249,0,185,0,107,0,0,0,0,0,173,0,0,0,187,0,145,0,29,0,0,0,142,0,30,0,146,0,4,0,224,0,159,0,167,0,183,0,136,0,53,0,0,0,197,0,0,0,59,0,159,0,13,0,231,0,0,0,93,0,155,0,0,0,0,0,125,0,180,0,30,0,27,0,25,0,162,0,36,0,148,0,18,0,207,0,199,0,59,0,0,0,188,0,0,0,99,0,30,0,121,0,0,0,45,0,237,0,232,0,0,0,0,0,50,0,73,0,0,0,53,0,210,0,157,0,35,0,34,0,232,0,124,0,77,0,107,0,104,0,200,0,100,0,46,0,243,0,33,0,221,0,0,0,33,0,13,0,222,0,148,0,190,0,211,0,0,0,102,0,0,0,251,0,0,0,0,0,115,0,133,0,108,0,181,0,222,0,229,0,196,0,67,0,66,0,230,0,231,0,74,0,4,0,90,0,40,0,230,0,218,0,95,0,0,0,0,0,172,0,70,0,75,0,21,0,0,0,177,0,14,0,221,0,232,0,211,0,245,0,207,0,117,0,149,0,97,0,117,0,0,0,61,0,0,0,203,0,109,0,7,0,61,0,87,0,39,0,250,0,38,0,184,0,158,0,105,0,19,0,0,0,152,0,15,0,0,0,0,0,76,0,139,0,0,0,169,0,5,0,212,0,118,0,160,0,208,0,0,0,0,0,176,0,0,0,0,0,26,0,35,0,206,0,45,0,223,0,203,0,174,0,143,0,56,0,95,0,104,0,248,0,50,0,118,0,129,0,250,0,180,0,191,0,0,0,144,0,22,0,76,0,0,0,0,0,190,0,75,0,82,0,0,0,240,0,0,0,239,0,0,0,4,0,131,0,31,0,0,0,0,0,173,0,41,0,233,0,3,0,12,0,158,0,92,0,158,0,100,0,170,0,0,0,147,0,44,0,0,0,178,0,198,0,184,0,15,0,0,0,195,0,124,0,223,0,0,0,232,0,238,0,12,0,0,0,174,0,240,0,164,0,235,0,98,0,157,0,2,0,52,0,197,0,230,0,213,0,50,0,144,0,77,0,89,0,0,0,75,0,158,0,79,0,154,0,33,0,183,0,6,0,249,0,244,0,22,0,193,0,215,0,23,0,0,0,210,0,156,0,27,0,81,0,90,0,0,0,35,0,118,0,0,0,0,0,49,0,191,0,23,0,0,0,76,0,37,0,188,0,106,0,97,0,234,0,254,0,106,0,52,0,132,0,164,0,56,0,0,0,0,0,0,0,48,0,184,0,84,0,108,0,58,0,42,0,111,0,8,0,190,0,0,0,94,0,51,0,105,0,0,0,72,0,255,0,0,0,108,0,120,0,203,0,38,0,45,0,205,0,29,0,87,0,0,0,111,0,0,0,3,0,23,0,0,0,0,0,76,0,197,0,113,0,197,0,21,0,195,0,164,0,185,0,42,0,46,0,0,0,138,0,142,0,230,0,186,0,0,0,208,0,220,0,24,0,0,0,78,0,233,0,150,0,173,0,177,0,93,0,151,0,116,0,54,0,208,0,24,0,0,0,142,0,226,0,88,0,223,0,29,0,87,0,227,0,172,0,0,0,196,0,195,0,246,0,134,0,18,0,0,0,229,0,221,0,169,0,0,0,178,0,186,0,235,0,252,0,138,0,223,0,0,0,31,0,0,0,18,0,195,0,0,0,86,0,207,0,0,0,36,0,49,0,189,0,134,0,0,0,73,0,51,0,156,0,193,0,26,0,0,0,7,0,76,0,160,0,247,0,74,0,34,0,43,0,0,0,149,0,152,0,0,0,43,0,109,0,0,0,216,0,86,0,73,0,74,0,61,0,0,0,84,0,109,0,247,0,108,0,137,0,55,0,185,0,0,0,0,0,0,0,211,0,0,0,14,0,59,0,204,0,194,0,204,0,249,0,214,0,150,0,81,0,94,0,117,0,11,0,0,0,160,0,45,0,15,0,82,0,126,0,164,0,38,0,3,0,0,0,103,0,188,0,238,0,242,0,0,0,204,0,75,0,225,0,25,0,29,0,210,0,209,0,0,0,0,0,0,0,160,0,0,0,72,0,235,0,236,0,155,0,123,0,170,0,72,0,18,0,237,0,198,0,201,0,0,0,0,0,17,0,199,0,75,0,231,0,0,0,185,0,85,0,192,0,0,0,72,0,136,0,248,0,204,0,204,0,60,0,181,0,62,0,187,0,138,0,234,0,0,0,115,0,174,0,0,0,208,0,231,0,115,0,75,0,238,0,49,0,5,0,101,0,167,0,234,0,134,0,227,0,27,0,172,0,60,0,0,0,239,0,65,0,0,0,251,0,113,0,100,0,4,0,164,0,116,0,180,0,115,0,101,0,117,0,36,0,0,0,213,0,139,0,149,0,235,0,0,0,161,0,126,0,118,0,195,0,132,0,63,0,115,0,150,0,19,0,135,0,0,0,0,0,0,0,31,0,84,0,227,0,134,0,88,0,0,0,67,0,109,0,241,0,140,0,210,0,235,0,95,0,58,0,142,0,231,0,228,0,88,0,0,0,0,0,9,0,101,0,0,0,137,0,173,0,0,0,0,0,233,0,25,0,20,0,137,0,0,0,0,0,248,0,210,0,114,0,137,0,55,0,213,0,183,0,44,0,173,0,183,0,20,0,212,0,93,0,179,0,231,0,181,0,162,0,0,0,0,0,217,0,106,0,83,0,174,0,0,0,0,0,0,0,50,0,134,0,93,0,143,0,255,0,111,0,0,0,117,0,82,0,118,0,58,0,187,0,128,0,142,0,23,0,95,0,244,0,47,0,0,0,40,0,193,0,225,0,0,0,10,0,137,0,197,0,116,0,95,0,129,0,0,0,201,0,0,0,104,0,0,0,30,0,32,0,245,0,177,0,119,0,115,0,196,0,61,0,216,0,22,0,0,0,217,0,233,0,187,0,9,0,38,0,253,0,200,0,0,0,106,0,57,0,171,0,0,0,37,0,197,0,83,0,0,0,143,0,172,0,0,0,221,0,0,0,211,0,17,0,234,0,250,0,236,0,0,0,158,0,0,0,24,0,0,0,247,0,92,0,255,0,0,0,209,0,232,0,13,0,186,0,241,0,37,0,15,0,99,0,203,0,0,0,251,0,117,0,27,0,153,0,103,0,67,0,150,0,131,0,122,0,0,0,0,0,201,0,51,0,255,0,87,0,0,0,207,0,11,0,236,0,0,0,223,0,209,0,21,0,115,0,83,0,116,0,53,0,7,0,204,0,224,0,43,0,0,0,156,0,193,0,181,0,247,0,6,0,181,0,12,0,151,0,170,0,0,0,210,0,210,0,81,0,107,0,0,0,179,0,66,0,198,0,45,0,0,0,195,0,6,0,0,0,53,0,135,0,227,0,4,0,125,0,107,0,0,0,142,0,98,0,141,0,29,0,18,0,240,0,38,0,47,0,210,0,29,0,128,0,118,0,0,0,185,0,89,0);
signal scenario_full  : scenario_type := (104,31,160,31,111,31,241,31,241,30,241,29,126,31,133,31,133,30,71,31,71,30,118,31,179,31,145,31,254,31,77,31,33,31,56,31,216,31,254,31,113,31,113,30,113,29,235,31,158,31,158,30,67,31,25,31,25,30,29,31,156,31,156,30,103,31,97,31,101,31,16,31,160,31,8,31,190,31,27,31,119,31,120,31,43,31,113,31,166,31,208,31,60,31,60,30,115,31,253,31,6,31,119,31,249,31,198,31,151,31,31,31,100,31,243,31,207,31,207,30,249,31,185,31,107,31,107,30,107,29,173,31,173,30,187,31,145,31,29,31,29,30,142,31,30,31,146,31,4,31,224,31,159,31,167,31,183,31,136,31,53,31,53,30,197,31,197,30,59,31,159,31,13,31,231,31,231,30,93,31,155,31,155,30,155,29,125,31,180,31,30,31,27,31,25,31,162,31,36,31,148,31,18,31,207,31,199,31,59,31,59,30,188,31,188,30,99,31,30,31,121,31,121,30,45,31,237,31,232,31,232,30,232,29,50,31,73,31,73,30,53,31,210,31,157,31,35,31,34,31,232,31,124,31,77,31,107,31,104,31,200,31,100,31,46,31,243,31,33,31,221,31,221,30,33,31,13,31,222,31,148,31,190,31,211,31,211,30,102,31,102,30,251,31,251,30,251,29,115,31,133,31,108,31,181,31,222,31,229,31,196,31,67,31,66,31,230,31,231,31,74,31,4,31,90,31,40,31,230,31,218,31,95,31,95,30,95,29,172,31,70,31,75,31,21,31,21,30,177,31,14,31,221,31,232,31,211,31,245,31,207,31,117,31,149,31,97,31,117,31,117,30,61,31,61,30,203,31,109,31,7,31,61,31,87,31,39,31,250,31,38,31,184,31,158,31,105,31,19,31,19,30,152,31,15,31,15,30,15,29,76,31,139,31,139,30,169,31,5,31,212,31,118,31,160,31,208,31,208,30,208,29,176,31,176,30,176,29,26,31,35,31,206,31,45,31,223,31,203,31,174,31,143,31,56,31,95,31,104,31,248,31,50,31,118,31,129,31,250,31,180,31,191,31,191,30,144,31,22,31,76,31,76,30,76,29,190,31,75,31,82,31,82,30,240,31,240,30,239,31,239,30,4,31,131,31,31,31,31,30,31,29,173,31,41,31,233,31,3,31,12,31,158,31,92,31,158,31,100,31,170,31,170,30,147,31,44,31,44,30,178,31,198,31,184,31,15,31,15,30,195,31,124,31,223,31,223,30,232,31,238,31,12,31,12,30,174,31,240,31,164,31,235,31,98,31,157,31,2,31,52,31,197,31,230,31,213,31,50,31,144,31,77,31,89,31,89,30,75,31,158,31,79,31,154,31,33,31,183,31,6,31,249,31,244,31,22,31,193,31,215,31,23,31,23,30,210,31,156,31,27,31,81,31,90,31,90,30,35,31,118,31,118,30,118,29,49,31,191,31,23,31,23,30,76,31,37,31,188,31,106,31,97,31,234,31,254,31,106,31,52,31,132,31,164,31,56,31,56,30,56,29,56,28,48,31,184,31,84,31,108,31,58,31,42,31,111,31,8,31,190,31,190,30,94,31,51,31,105,31,105,30,72,31,255,31,255,30,108,31,120,31,203,31,38,31,45,31,205,31,29,31,87,31,87,30,111,31,111,30,3,31,23,31,23,30,23,29,76,31,197,31,113,31,197,31,21,31,195,31,164,31,185,31,42,31,46,31,46,30,138,31,142,31,230,31,186,31,186,30,208,31,220,31,24,31,24,30,78,31,233,31,150,31,173,31,177,31,93,31,151,31,116,31,54,31,208,31,24,31,24,30,142,31,226,31,88,31,223,31,29,31,87,31,227,31,172,31,172,30,196,31,195,31,246,31,134,31,18,31,18,30,229,31,221,31,169,31,169,30,178,31,186,31,235,31,252,31,138,31,223,31,223,30,31,31,31,30,18,31,195,31,195,30,86,31,207,31,207,30,36,31,49,31,189,31,134,31,134,30,73,31,51,31,156,31,193,31,26,31,26,30,7,31,76,31,160,31,247,31,74,31,34,31,43,31,43,30,149,31,152,31,152,30,43,31,109,31,109,30,216,31,86,31,73,31,74,31,61,31,61,30,84,31,109,31,247,31,108,31,137,31,55,31,185,31,185,30,185,29,185,28,211,31,211,30,14,31,59,31,204,31,194,31,204,31,249,31,214,31,150,31,81,31,94,31,117,31,11,31,11,30,160,31,45,31,15,31,82,31,126,31,164,31,38,31,3,31,3,30,103,31,188,31,238,31,242,31,242,30,204,31,75,31,225,31,25,31,29,31,210,31,209,31,209,30,209,29,209,28,160,31,160,30,72,31,235,31,236,31,155,31,123,31,170,31,72,31,18,31,237,31,198,31,201,31,201,30,201,29,17,31,199,31,75,31,231,31,231,30,185,31,85,31,192,31,192,30,72,31,136,31,248,31,204,31,204,31,60,31,181,31,62,31,187,31,138,31,234,31,234,30,115,31,174,31,174,30,208,31,231,31,115,31,75,31,238,31,49,31,5,31,101,31,167,31,234,31,134,31,227,31,27,31,172,31,60,31,60,30,239,31,65,31,65,30,251,31,113,31,100,31,4,31,164,31,116,31,180,31,115,31,101,31,117,31,36,31,36,30,213,31,139,31,149,31,235,31,235,30,161,31,126,31,118,31,195,31,132,31,63,31,115,31,150,31,19,31,135,31,135,30,135,29,135,28,31,31,84,31,227,31,134,31,88,31,88,30,67,31,109,31,241,31,140,31,210,31,235,31,95,31,58,31,142,31,231,31,228,31,88,31,88,30,88,29,9,31,101,31,101,30,137,31,173,31,173,30,173,29,233,31,25,31,20,31,137,31,137,30,137,29,248,31,210,31,114,31,137,31,55,31,213,31,183,31,44,31,173,31,183,31,20,31,212,31,93,31,179,31,231,31,181,31,162,31,162,30,162,29,217,31,106,31,83,31,174,31,174,30,174,29,174,28,50,31,134,31,93,31,143,31,255,31,111,31,111,30,117,31,82,31,118,31,58,31,187,31,128,31,142,31,23,31,95,31,244,31,47,31,47,30,40,31,193,31,225,31,225,30,10,31,137,31,197,31,116,31,95,31,129,31,129,30,201,31,201,30,104,31,104,30,30,31,32,31,245,31,177,31,119,31,115,31,196,31,61,31,216,31,22,31,22,30,217,31,233,31,187,31,9,31,38,31,253,31,200,31,200,30,106,31,57,31,171,31,171,30,37,31,197,31,83,31,83,30,143,31,172,31,172,30,221,31,221,30,211,31,17,31,234,31,250,31,236,31,236,30,158,31,158,30,24,31,24,30,247,31,92,31,255,31,255,30,209,31,232,31,13,31,186,31,241,31,37,31,15,31,99,31,203,31,203,30,251,31,117,31,27,31,153,31,103,31,67,31,150,31,131,31,122,31,122,30,122,29,201,31,51,31,255,31,87,31,87,30,207,31,11,31,236,31,236,30,223,31,209,31,21,31,115,31,83,31,116,31,53,31,7,31,204,31,224,31,43,31,43,30,156,31,193,31,181,31,247,31,6,31,181,31,12,31,151,31,170,31,170,30,210,31,210,31,81,31,107,31,107,30,179,31,66,31,198,31,45,31,45,30,195,31,6,31,6,30,53,31,135,31,227,31,4,31,125,31,107,31,107,30,142,31,98,31,141,31,29,31,18,31,240,31,38,31,47,31,210,31,29,31,128,31,118,31,118,30,185,31,89,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
