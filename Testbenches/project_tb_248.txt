-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 443;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,48,0,13,0,251,0,123,0,184,0,194,0,95,0,225,0,0,0,141,0,191,0,118,0,36,0,19,0,207,0,0,0,25,0,76,0,0,0,240,0,150,0,152,0,232,0,170,0,124,0,194,0,65,0,158,0,145,0,217,0,122,0,255,0,0,0,149,0,49,0,147,0,0,0,167,0,83,0,94,0,39,0,188,0,39,0,113,0,0,0,255,0,177,0,220,0,0,0,170,0,164,0,45,0,146,0,4,0,217,0,160,0,0,0,31,0,78,0,175,0,0,0,84,0,10,0,46,0,244,0,0,0,249,0,202,0,239,0,7,0,220,0,243,0,99,0,156,0,0,0,107,0,175,0,152,0,0,0,59,0,197,0,137,0,171,0,29,0,90,0,28,0,36,0,17,0,10,0,36,0,0,0,95,0,90,0,136,0,129,0,212,0,89,0,24,0,196,0,167,0,0,0,43,0,114,0,153,0,101,0,168,0,4,0,199,0,247,0,52,0,0,0,205,0,0,0,218,0,116,0,195,0,0,0,0,0,245,0,127,0,80,0,51,0,115,0,209,0,0,0,144,0,204,0,211,0,43,0,53,0,89,0,50,0,82,0,0,0,28,0,246,0,207,0,224,0,0,0,248,0,133,0,0,0,104,0,219,0,241,0,7,0,0,0,236,0,74,0,131,0,175,0,243,0,225,0,0,0,10,0,213,0,2,0,5,0,51,0,6,0,200,0,85,0,0,0,0,0,0,0,227,0,245,0,185,0,50,0,174,0,0,0,0,0,75,0,0,0,79,0,199,0,167,0,175,0,3,0,186,0,226,0,54,0,81,0,26,0,0,0,25,0,49,0,0,0,206,0,171,0,18,0,0,0,237,0,0,0,103,0,48,0,146,0,121,0,1,0,130,0,132,0,29,0,201,0,178,0,0,0,38,0,147,0,117,0,204,0,250,0,24,0,67,0,0,0,86,0,0,0,39,0,0,0,59,0,128,0,176,0,142,0,115,0,114,0,23,0,115,0,226,0,0,0,0,0,216,0,254,0,188,0,0,0,0,0,181,0,122,0,169,0,213,0,0,0,255,0,172,0,164,0,218,0,187,0,0,0,235,0,0,0,143,0,0,0,152,0,0,0,17,0,0,0,180,0,144,0,7,0,191,0,246,0,57,0,211,0,218,0,131,0,0,0,34,0,70,0,84,0,184,0,175,0,29,0,243,0,58,0,130,0,0,0,195,0,207,0,0,0,102,0,110,0,209,0,91,0,185,0,251,0,244,0,225,0,0,0,20,0,208,0,0,0,216,0,204,0,42,0,0,0,0,0,243,0,153,0,121,0,0,0,0,0,107,0,91,0,88,0,221,0,30,0,70,0,0,0,164,0,0,0,28,0,72,0,110,0,213,0,105,0,26,0,241,0,0,0,240,0,142,0,33,0,137,0,214,0,176,0,174,0,207,0,214,0,0,0,120,0,228,0,244,0,0,0,200,0,247,0,163,0,246,0,83,0,0,0,173,0,39,0,5,0,189,0,95,0,150,0,252,0,0,0,102,0,0,0,83,0,199,0,192,0,173,0,172,0,1,0,231,0,19,0,5,0,107,0,83,0,228,0,193,0,56,0,243,0,148,0,0,0,176,0,51,0,214,0,152,0,65,0,125,0,104,0,81,0,103,0,233,0,117,0,197,0,89,0,198,0,175,0,0,0,111,0,24,0,86,0,139,0,119,0,15,0,188,0,0,0,14,0,135,0,2,0,0,0,105,0,33,0,155,0,0,0,183,0,50,0,214,0,172,0,83,0,82,0,162,0,0,0,119,0,89,0,12,0,17,0,221,0,191,0,227,0,0,0,58,0,168,0,43,0,169,0,43,0,183,0,0,0,189,0,0,0,42,0,0,0,11,0,0,0,146,0,0,0,62,0,8,0,57,0,50,0,248,0,235,0,0,0,227,0,0,0,14,0,193,0,156,0,17,0,45,0,28,0,189,0,189,0,65,0);
signal scenario_full  : scenario_type := (0,0,48,31,13,31,251,31,123,31,184,31,194,31,95,31,225,31,225,30,141,31,191,31,118,31,36,31,19,31,207,31,207,30,25,31,76,31,76,30,240,31,150,31,152,31,232,31,170,31,124,31,194,31,65,31,158,31,145,31,217,31,122,31,255,31,255,30,149,31,49,31,147,31,147,30,167,31,83,31,94,31,39,31,188,31,39,31,113,31,113,30,255,31,177,31,220,31,220,30,170,31,164,31,45,31,146,31,4,31,217,31,160,31,160,30,31,31,78,31,175,31,175,30,84,31,10,31,46,31,244,31,244,30,249,31,202,31,239,31,7,31,220,31,243,31,99,31,156,31,156,30,107,31,175,31,152,31,152,30,59,31,197,31,137,31,171,31,29,31,90,31,28,31,36,31,17,31,10,31,36,31,36,30,95,31,90,31,136,31,129,31,212,31,89,31,24,31,196,31,167,31,167,30,43,31,114,31,153,31,101,31,168,31,4,31,199,31,247,31,52,31,52,30,205,31,205,30,218,31,116,31,195,31,195,30,195,29,245,31,127,31,80,31,51,31,115,31,209,31,209,30,144,31,204,31,211,31,43,31,53,31,89,31,50,31,82,31,82,30,28,31,246,31,207,31,224,31,224,30,248,31,133,31,133,30,104,31,219,31,241,31,7,31,7,30,236,31,74,31,131,31,175,31,243,31,225,31,225,30,10,31,213,31,2,31,5,31,51,31,6,31,200,31,85,31,85,30,85,29,85,28,227,31,245,31,185,31,50,31,174,31,174,30,174,29,75,31,75,30,79,31,199,31,167,31,175,31,3,31,186,31,226,31,54,31,81,31,26,31,26,30,25,31,49,31,49,30,206,31,171,31,18,31,18,30,237,31,237,30,103,31,48,31,146,31,121,31,1,31,130,31,132,31,29,31,201,31,178,31,178,30,38,31,147,31,117,31,204,31,250,31,24,31,67,31,67,30,86,31,86,30,39,31,39,30,59,31,128,31,176,31,142,31,115,31,114,31,23,31,115,31,226,31,226,30,226,29,216,31,254,31,188,31,188,30,188,29,181,31,122,31,169,31,213,31,213,30,255,31,172,31,164,31,218,31,187,31,187,30,235,31,235,30,143,31,143,30,152,31,152,30,17,31,17,30,180,31,144,31,7,31,191,31,246,31,57,31,211,31,218,31,131,31,131,30,34,31,70,31,84,31,184,31,175,31,29,31,243,31,58,31,130,31,130,30,195,31,207,31,207,30,102,31,110,31,209,31,91,31,185,31,251,31,244,31,225,31,225,30,20,31,208,31,208,30,216,31,204,31,42,31,42,30,42,29,243,31,153,31,121,31,121,30,121,29,107,31,91,31,88,31,221,31,30,31,70,31,70,30,164,31,164,30,28,31,72,31,110,31,213,31,105,31,26,31,241,31,241,30,240,31,142,31,33,31,137,31,214,31,176,31,174,31,207,31,214,31,214,30,120,31,228,31,244,31,244,30,200,31,247,31,163,31,246,31,83,31,83,30,173,31,39,31,5,31,189,31,95,31,150,31,252,31,252,30,102,31,102,30,83,31,199,31,192,31,173,31,172,31,1,31,231,31,19,31,5,31,107,31,83,31,228,31,193,31,56,31,243,31,148,31,148,30,176,31,51,31,214,31,152,31,65,31,125,31,104,31,81,31,103,31,233,31,117,31,197,31,89,31,198,31,175,31,175,30,111,31,24,31,86,31,139,31,119,31,15,31,188,31,188,30,14,31,135,31,2,31,2,30,105,31,33,31,155,31,155,30,183,31,50,31,214,31,172,31,83,31,82,31,162,31,162,30,119,31,89,31,12,31,17,31,221,31,191,31,227,31,227,30,58,31,168,31,43,31,169,31,43,31,183,31,183,30,189,31,189,30,42,31,42,30,11,31,11,30,146,31,146,30,62,31,8,31,57,31,50,31,248,31,235,31,235,30,227,31,227,30,14,31,193,31,156,31,17,31,45,31,28,31,189,31,189,31,65,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
