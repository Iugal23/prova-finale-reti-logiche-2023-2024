-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 861;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (171,0,0,0,0,0,0,0,235,0,210,0,168,0,59,0,42,0,125,0,53,0,5,0,95,0,0,0,0,0,0,0,0,0,229,0,213,0,0,0,118,0,17,0,105,0,5,0,218,0,135,0,247,0,170,0,0,0,0,0,121,0,108,0,156,0,105,0,186,0,128,0,136,0,180,0,211,0,196,0,22,0,225,0,14,0,0,0,196,0,149,0,0,0,241,0,206,0,65,0,185,0,0,0,45,0,159,0,127,0,21,0,231,0,84,0,0,0,165,0,252,0,201,0,234,0,18,0,137,0,0,0,96,0,163,0,124,0,140,0,67,0,0,0,120,0,20,0,125,0,0,0,142,0,29,0,186,0,146,0,9,0,156,0,0,0,44,0,162,0,0,0,20,0,0,0,81,0,180,0,164,0,97,0,98,0,40,0,37,0,136,0,195,0,237,0,33,0,229,0,109,0,72,0,130,0,77,0,211,0,190,0,15,0,247,0,212,0,254,0,180,0,43,0,251,0,103,0,197,0,58,0,14,0,64,0,121,0,45,0,0,0,0,0,22,0,111,0,103,0,0,0,203,0,71,0,200,0,231,0,7,0,0,0,252,0,155,0,119,0,209,0,63,0,173,0,245,0,62,0,62,0,153,0,36,0,0,0,50,0,14,0,92,0,103,0,203,0,225,0,122,0,52,0,175,0,83,0,0,0,153,0,76,0,40,0,211,0,227,0,197,0,9,0,242,0,83,0,164,0,43,0,0,0,155,0,191,0,0,0,5,0,71,0,0,0,197,0,0,0,0,0,82,0,68,0,161,0,234,0,246,0,89,0,51,0,0,0,27,0,211,0,76,0,0,0,248,0,0,0,50,0,104,0,0,0,0,0,47,0,234,0,8,0,2,0,253,0,0,0,138,0,0,0,35,0,14,0,192,0,238,0,0,0,97,0,33,0,176,0,146,0,253,0,0,0,132,0,0,0,0,0,241,0,43,0,103,0,181,0,0,0,28,0,89,0,143,0,23,0,142,0,229,0,204,0,8,0,0,0,167,0,0,0,68,0,0,0,39,0,0,0,93,0,187,0,16,0,0,0,158,0,0,0,11,0,52,0,238,0,0,0,206,0,38,0,236,0,77,0,0,0,223,0,124,0,204,0,0,0,199,0,129,0,78,0,82,0,0,0,202,0,181,0,101,0,159,0,169,0,41,0,88,0,251,0,179,0,221,0,82,0,0,0,177,0,0,0,81,0,147,0,225,0,37,0,71,0,168,0,102,0,18,0,0,0,197,0,155,0,211,0,96,0,139,0,57,0,0,0,214,0,98,0,118,0,184,0,67,0,163,0,6,0,160,0,0,0,189,0,192,0,18,0,169,0,92,0,252,0,134,0,111,0,2,0,0,0,91,0,107,0,115,0,34,0,76,0,213,0,112,0,0,0,0,0,198,0,111,0,183,0,112,0,148,0,0,0,235,0,103,0,92,0,37,0,191,0,143,0,0,0,219,0,60,0,79,0,21,0,0,0,0,0,245,0,49,0,212,0,199,0,180,0,233,0,100,0,63,0,57,0,142,0,163,0,186,0,139,0,99,0,202,0,124,0,66,0,0,0,251,0,84,0,0,0,118,0,210,0,0,0,0,0,131,0,1,0,0,0,170,0,223,0,0,0,123,0,246,0,181,0,43,0,137,0,97,0,43,0,193,0,191,0,61,0,156,0,215,0,223,0,66,0,97,0,94,0,8,0,48,0,0,0,59,0,22,0,192,0,0,0,0,0,79,0,0,0,0,0,0,0,26,0,35,0,62,0,0,0,0,0,59,0,0,0,225,0,0,0,0,0,0,0,104,0,0,0,195,0,170,0,16,0,184,0,18,0,181,0,138,0,170,0,0,0,0,0,34,0,165,0,143,0,3,0,111,0,0,0,0,0,108,0,50,0,0,0,27,0,0,0,138,0,21,0,7,0,79,0,68,0,176,0,6,0,219,0,0,0,96,0,0,0,151,0,159,0,130,0,212,0,93,0,225,0,167,0,92,0,125,0,249,0,0,0,70,0,62,0,154,0,92,0,48,0,174,0,179,0,35,0,15,0,126,0,30,0,209,0,30,0,154,0,127,0,71,0,130,0,26,0,88,0,0,0,35,0,179,0,26,0,140,0,47,0,183,0,70,0,35,0,168,0,174,0,156,0,171,0,101,0,0,0,161,0,238,0,0,0,97,0,139,0,69,0,115,0,115,0,194,0,83,0,198,0,239,0,206,0,119,0,241,0,0,0,239,0,120,0,35,0,0,0,40,0,174,0,72,0,193,0,114,0,0,0,79,0,0,0,251,0,221,0,127,0,145,0,170,0,74,0,173,0,141,0,41,0,192,0,199,0,27,0,125,0,111,0,0,0,149,0,159,0,161,0,0,0,39,0,11,0,54,0,234,0,92,0,186,0,0,0,0,0,145,0,95,0,14,0,122,0,0,0,129,0,89,0,51,0,158,0,0,0,123,0,29,0,250,0,32,0,95,0,73,0,21,0,22,0,191,0,70,0,12,0,67,0,0,0,0,0,93,0,5,0,50,0,246,0,21,0,167,0,132,0,249,0,222,0,26,0,177,0,0,0,0,0,41,0,114,0,194,0,66,0,0,0,249,0,212,0,0,0,0,0,238,0,0,0,80,0,164,0,200,0,205,0,27,0,0,0,133,0,66,0,132,0,93,0,0,0,147,0,126,0,154,0,134,0,71,0,134,0,56,0,66,0,249,0,247,0,131,0,104,0,51,0,0,0,92,0,86,0,0,0,170,0,219,0,237,0,240,0,39,0,0,0,0,0,212,0,213,0,231,0,180,0,0,0,64,0,0,0,0,0,0,0,189,0,175,0,23,0,218,0,227,0,0,0,7,0,83,0,163,0,215,0,100,0,0,0,0,0,0,0,90,0,150,0,0,0,13,0,226,0,0,0,27,0,99,0,170,0,207,0,120,0,47,0,120,0,103,0,80,0,217,0,9,0,99,0,208,0,35,0,17,0,159,0,0,0,0,0,130,0,162,0,0,0,25,0,118,0,35,0,221,0,50,0,101,0,79,0,107,0,146,0,150,0,66,0,37,0,139,0,0,0,0,0,241,0,185,0,59,0,155,0,66,0,232,0,21,0,140,0,0,0,91,0,15,0,2,0,0,0,238,0,182,0,254,0,0,0,0,0,122,0,166,0,253,0,61,0,111,0,15,0,92,0,0,0,242,0,250,0,0,0,240,0,160,0,0,0,145,0,212,0,133,0,174,0,215,0,137,0,240,0,146,0,85,0,0,0,0,0,134,0,106,0,194,0,212,0,137,0,1,0,229,0,163,0,0,0,172,0,43,0,228,0,0,0,84,0,240,0,224,0,42,0,18,0,78,0,99,0,241,0,229,0,210,0,0,0,150,0,183,0,115,0,231,0,0,0,23,0,200,0,93,0,16,0,254,0,106,0,152,0,212,0,238,0,0,0,132,0,67,0,52,0,246,0,141,0,41,0,0,0,60,0,2,0,60,0,163,0,42,0,207,0,56,0,0,0,13,0,7,0,232,0,108,0,133,0,162,0,52,0,151,0,184,0,130,0,101,0,0,0,191,0,125,0,98,0,0,0,119,0,0,0,253,0,0,0,48,0,233,0,136,0,31,0,36,0,97,0,68,0,38,0,99,0,0,0,138,0,102,0,0,0,0,0,96,0,218,0,155,0,251,0,71,0,118,0,146,0,172,0,188,0,169,0,146,0,0,0,54,0,51,0,191,0,143,0,29,0,137,0,172,0,103,0,0,0,90,0,244,0,124,0,139,0,55,0,0,0,64,0,227,0,57,0,0,0,0,0,111,0,249,0,234,0,20,0,12,0,0,0,228,0,191,0);
signal scenario_full  : scenario_type := (171,31,171,30,171,29,171,28,235,31,210,31,168,31,59,31,42,31,125,31,53,31,5,31,95,31,95,30,95,29,95,28,95,27,229,31,213,31,213,30,118,31,17,31,105,31,5,31,218,31,135,31,247,31,170,31,170,30,170,29,121,31,108,31,156,31,105,31,186,31,128,31,136,31,180,31,211,31,196,31,22,31,225,31,14,31,14,30,196,31,149,31,149,30,241,31,206,31,65,31,185,31,185,30,45,31,159,31,127,31,21,31,231,31,84,31,84,30,165,31,252,31,201,31,234,31,18,31,137,31,137,30,96,31,163,31,124,31,140,31,67,31,67,30,120,31,20,31,125,31,125,30,142,31,29,31,186,31,146,31,9,31,156,31,156,30,44,31,162,31,162,30,20,31,20,30,81,31,180,31,164,31,97,31,98,31,40,31,37,31,136,31,195,31,237,31,33,31,229,31,109,31,72,31,130,31,77,31,211,31,190,31,15,31,247,31,212,31,254,31,180,31,43,31,251,31,103,31,197,31,58,31,14,31,64,31,121,31,45,31,45,30,45,29,22,31,111,31,103,31,103,30,203,31,71,31,200,31,231,31,7,31,7,30,252,31,155,31,119,31,209,31,63,31,173,31,245,31,62,31,62,31,153,31,36,31,36,30,50,31,14,31,92,31,103,31,203,31,225,31,122,31,52,31,175,31,83,31,83,30,153,31,76,31,40,31,211,31,227,31,197,31,9,31,242,31,83,31,164,31,43,31,43,30,155,31,191,31,191,30,5,31,71,31,71,30,197,31,197,30,197,29,82,31,68,31,161,31,234,31,246,31,89,31,51,31,51,30,27,31,211,31,76,31,76,30,248,31,248,30,50,31,104,31,104,30,104,29,47,31,234,31,8,31,2,31,253,31,253,30,138,31,138,30,35,31,14,31,192,31,238,31,238,30,97,31,33,31,176,31,146,31,253,31,253,30,132,31,132,30,132,29,241,31,43,31,103,31,181,31,181,30,28,31,89,31,143,31,23,31,142,31,229,31,204,31,8,31,8,30,167,31,167,30,68,31,68,30,39,31,39,30,93,31,187,31,16,31,16,30,158,31,158,30,11,31,52,31,238,31,238,30,206,31,38,31,236,31,77,31,77,30,223,31,124,31,204,31,204,30,199,31,129,31,78,31,82,31,82,30,202,31,181,31,101,31,159,31,169,31,41,31,88,31,251,31,179,31,221,31,82,31,82,30,177,31,177,30,81,31,147,31,225,31,37,31,71,31,168,31,102,31,18,31,18,30,197,31,155,31,211,31,96,31,139,31,57,31,57,30,214,31,98,31,118,31,184,31,67,31,163,31,6,31,160,31,160,30,189,31,192,31,18,31,169,31,92,31,252,31,134,31,111,31,2,31,2,30,91,31,107,31,115,31,34,31,76,31,213,31,112,31,112,30,112,29,198,31,111,31,183,31,112,31,148,31,148,30,235,31,103,31,92,31,37,31,191,31,143,31,143,30,219,31,60,31,79,31,21,31,21,30,21,29,245,31,49,31,212,31,199,31,180,31,233,31,100,31,63,31,57,31,142,31,163,31,186,31,139,31,99,31,202,31,124,31,66,31,66,30,251,31,84,31,84,30,118,31,210,31,210,30,210,29,131,31,1,31,1,30,170,31,223,31,223,30,123,31,246,31,181,31,43,31,137,31,97,31,43,31,193,31,191,31,61,31,156,31,215,31,223,31,66,31,97,31,94,31,8,31,48,31,48,30,59,31,22,31,192,31,192,30,192,29,79,31,79,30,79,29,79,28,26,31,35,31,62,31,62,30,62,29,59,31,59,30,225,31,225,30,225,29,225,28,104,31,104,30,195,31,170,31,16,31,184,31,18,31,181,31,138,31,170,31,170,30,170,29,34,31,165,31,143,31,3,31,111,31,111,30,111,29,108,31,50,31,50,30,27,31,27,30,138,31,21,31,7,31,79,31,68,31,176,31,6,31,219,31,219,30,96,31,96,30,151,31,159,31,130,31,212,31,93,31,225,31,167,31,92,31,125,31,249,31,249,30,70,31,62,31,154,31,92,31,48,31,174,31,179,31,35,31,15,31,126,31,30,31,209,31,30,31,154,31,127,31,71,31,130,31,26,31,88,31,88,30,35,31,179,31,26,31,140,31,47,31,183,31,70,31,35,31,168,31,174,31,156,31,171,31,101,31,101,30,161,31,238,31,238,30,97,31,139,31,69,31,115,31,115,31,194,31,83,31,198,31,239,31,206,31,119,31,241,31,241,30,239,31,120,31,35,31,35,30,40,31,174,31,72,31,193,31,114,31,114,30,79,31,79,30,251,31,221,31,127,31,145,31,170,31,74,31,173,31,141,31,41,31,192,31,199,31,27,31,125,31,111,31,111,30,149,31,159,31,161,31,161,30,39,31,11,31,54,31,234,31,92,31,186,31,186,30,186,29,145,31,95,31,14,31,122,31,122,30,129,31,89,31,51,31,158,31,158,30,123,31,29,31,250,31,32,31,95,31,73,31,21,31,22,31,191,31,70,31,12,31,67,31,67,30,67,29,93,31,5,31,50,31,246,31,21,31,167,31,132,31,249,31,222,31,26,31,177,31,177,30,177,29,41,31,114,31,194,31,66,31,66,30,249,31,212,31,212,30,212,29,238,31,238,30,80,31,164,31,200,31,205,31,27,31,27,30,133,31,66,31,132,31,93,31,93,30,147,31,126,31,154,31,134,31,71,31,134,31,56,31,66,31,249,31,247,31,131,31,104,31,51,31,51,30,92,31,86,31,86,30,170,31,219,31,237,31,240,31,39,31,39,30,39,29,212,31,213,31,231,31,180,31,180,30,64,31,64,30,64,29,64,28,189,31,175,31,23,31,218,31,227,31,227,30,7,31,83,31,163,31,215,31,100,31,100,30,100,29,100,28,90,31,150,31,150,30,13,31,226,31,226,30,27,31,99,31,170,31,207,31,120,31,47,31,120,31,103,31,80,31,217,31,9,31,99,31,208,31,35,31,17,31,159,31,159,30,159,29,130,31,162,31,162,30,25,31,118,31,35,31,221,31,50,31,101,31,79,31,107,31,146,31,150,31,66,31,37,31,139,31,139,30,139,29,241,31,185,31,59,31,155,31,66,31,232,31,21,31,140,31,140,30,91,31,15,31,2,31,2,30,238,31,182,31,254,31,254,30,254,29,122,31,166,31,253,31,61,31,111,31,15,31,92,31,92,30,242,31,250,31,250,30,240,31,160,31,160,30,145,31,212,31,133,31,174,31,215,31,137,31,240,31,146,31,85,31,85,30,85,29,134,31,106,31,194,31,212,31,137,31,1,31,229,31,163,31,163,30,172,31,43,31,228,31,228,30,84,31,240,31,224,31,42,31,18,31,78,31,99,31,241,31,229,31,210,31,210,30,150,31,183,31,115,31,231,31,231,30,23,31,200,31,93,31,16,31,254,31,106,31,152,31,212,31,238,31,238,30,132,31,67,31,52,31,246,31,141,31,41,31,41,30,60,31,2,31,60,31,163,31,42,31,207,31,56,31,56,30,13,31,7,31,232,31,108,31,133,31,162,31,52,31,151,31,184,31,130,31,101,31,101,30,191,31,125,31,98,31,98,30,119,31,119,30,253,31,253,30,48,31,233,31,136,31,31,31,36,31,97,31,68,31,38,31,99,31,99,30,138,31,102,31,102,30,102,29,96,31,218,31,155,31,251,31,71,31,118,31,146,31,172,31,188,31,169,31,146,31,146,30,54,31,51,31,191,31,143,31,29,31,137,31,172,31,103,31,103,30,90,31,244,31,124,31,139,31,55,31,55,30,64,31,227,31,57,31,57,30,57,29,111,31,249,31,234,31,20,31,12,31,12,30,228,31,191,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
