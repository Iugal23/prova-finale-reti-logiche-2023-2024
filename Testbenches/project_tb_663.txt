-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 862;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (181,0,210,0,210,0,0,0,166,0,16,0,0,0,0,0,51,0,29,0,115,0,89,0,214,0,63,0,0,0,0,0,15,0,206,0,77,0,45,0,165,0,44,0,149,0,232,0,75,0,34,0,67,0,140,0,0,0,27,0,214,0,50,0,87,0,67,0,99,0,0,0,163,0,2,0,0,0,23,0,155,0,131,0,0,0,152,0,178,0,55,0,200,0,0,0,91,0,226,0,117,0,20,0,164,0,0,0,0,0,232,0,202,0,0,0,224,0,139,0,69,0,37,0,251,0,0,0,173,0,148,0,158,0,231,0,204,0,209,0,0,0,235,0,123,0,68,0,227,0,0,0,152,0,181,0,0,0,0,0,8,0,22,0,56,0,0,0,0,0,223,0,75,0,126,0,0,0,40,0,159,0,128,0,210,0,0,0,0,0,177,0,89,0,2,0,0,0,37,0,202,0,160,0,198,0,207,0,174,0,44,0,211,0,20,0,149,0,0,0,0,0,0,0,197,0,211,0,119,0,55,0,175,0,18,0,0,0,43,0,92,0,36,0,143,0,200,0,16,0,219,0,24,0,109,0,149,0,221,0,43,0,121,0,164,0,100,0,65,0,0,0,188,0,0,0,57,0,141,0,82,0,42,0,132,0,46,0,254,0,252,0,226,0,229,0,41,0,0,0,0,0,222,0,35,0,255,0,193,0,17,0,250,0,202,0,199,0,0,0,131,0,158,0,133,0,32,0,82,0,67,0,63,0,227,0,148,0,240,0,151,0,98,0,0,0,171,0,158,0,223,0,0,0,127,0,216,0,64,0,160,0,0,0,3,0,85,0,231,0,195,0,192,0,6,0,143,0,147,0,0,0,133,0,165,0,103,0,98,0,50,0,73,0,0,0,96,0,24,0,206,0,65,0,142,0,11,0,200,0,159,0,73,0,235,0,242,0,71,0,85,0,0,0,0,0,138,0,123,0,63,0,125,0,0,0,46,0,3,0,135,0,196,0,13,0,171,0,0,0,23,0,218,0,0,0,62,0,113,0,0,0,237,0,152,0,93,0,59,0,0,0,188,0,151,0,190,0,199,0,111,0,0,0,162,0,197,0,12,0,77,0,225,0,15,0,195,0,85,0,7,0,161,0,217,0,100,0,242,0,0,0,221,0,239,0,94,0,198,0,0,0,27,0,155,0,138,0,204,0,181,0,180,0,22,0,44,0,113,0,20,0,0,0,136,0,95,0,42,0,88,0,31,0,6,0,113,0,9,0,168,0,0,0,153,0,246,0,0,0,115,0,0,0,0,0,224,0,0,0,131,0,6,0,70,0,0,0,34,0,27,0,0,0,37,0,0,0,246,0,113,0,153,0,105,0,0,0,227,0,70,0,244,0,0,0,143,0,0,0,38,0,254,0,192,0,181,0,80,0,249,0,215,0,205,0,58,0,195,0,97,0,114,0,139,0,14,0,0,0,40,0,26,0,0,0,60,0,117,0,109,0,182,0,47,0,182,0,0,0,0,0,0,0,0,0,114,0,225,0,105,0,92,0,124,0,9,0,160,0,82,0,64,0,179,0,2,0,8,0,58,0,41,0,0,0,239,0,222,0,15,0,54,0,174,0,57,0,20,0,175,0,36,0,179,0,200,0,191,0,51,0,0,0,249,0,72,0,39,0,0,0,0,0,133,0,254,0,71,0,174,0,138,0,138,0,6,0,93,0,0,0,222,0,14,0,6,0,242,0,225,0,129,0,177,0,172,0,220,0,0,0,158,0,205,0,46,0,39,0,119,0,250,0,65,0,116,0,0,0,19,0,192,0,81,0,249,0,0,0,59,0,122,0,133,0,0,0,50,0,249,0,0,0,0,0,49,0,212,0,84,0,0,0,37,0,250,0,26,0,21,0,0,0,139,0,56,0,208,0,20,0,179,0,253,0,0,0,89,0,4,0,207,0,22,0,83,0,0,0,24,0,207,0,0,0,66,0,228,0,171,0,0,0,0,0,28,0,162,0,0,0,157,0,177,0,240,0,104,0,245,0,187,0,0,0,76,0,63,0,137,0,204,0,65,0,192,0,0,0,144,0,59,0,187,0,118,0,8,0,191,0,161,0,103,0,0,0,171,0,128,0,58,0,9,0,89,0,61,0,0,0,242,0,202,0,152,0,69,0,252,0,29,0,19,0,205,0,0,0,215,0,206,0,98,0,116,0,74,0,194,0,225,0,0,0,57,0,155,0,156,0,206,0,114,0,0,0,0,0,212,0,227,0,64,0,0,0,46,0,221,0,10,0,123,0,178,0,169,0,84,0,216,0,54,0,73,0,0,0,46,0,97,0,229,0,18,0,244,0,196,0,91,0,116,0,0,0,118,0,144,0,199,0,164,0,115,0,55,0,208,0,172,0,108,0,0,0,35,0,59,0,47,0,244,0,146,0,0,0,0,0,0,0,0,0,44,0,0,0,171,0,209,0,180,0,116,0,249,0,7,0,61,0,0,0,0,0,0,0,0,0,0,0,0,0,197,0,39,0,83,0,0,0,253,0,0,0,30,0,88,0,138,0,1,0,131,0,60,0,196,0,169,0,0,0,0,0,132,0,226,0,162,0,253,0,0,0,219,0,4,0,212,0,62,0,201,0,230,0,0,0,0,0,255,0,32,0,149,0,190,0,139,0,94,0,0,0,191,0,43,0,55,0,0,0,133,0,0,0,129,0,0,0,110,0,179,0,59,0,0,0,0,0,46,0,54,0,60,0,0,0,0,0,60,0,31,0,170,0,33,0,226,0,0,0,0,0,244,0,240,0,166,0,71,0,16,0,0,0,0,0,0,0,192,0,59,0,0,0,198,0,195,0,181,0,0,0,89,0,17,0,0,0,14,0,251,0,104,0,179,0,216,0,37,0,0,0,249,0,0,0,48,0,236,0,118,0,0,0,0,0,0,0,235,0,245,0,9,0,24,0,10,0,0,0,0,0,0,0,180,0,142,0,0,0,241,0,134,0,158,0,152,0,0,0,0,0,0,0,0,0,103,0,219,0,160,0,189,0,36,0,62,0,56,0,0,0,240,0,0,0,164,0,22,0,68,0,0,0,56,0,225,0,93,0,23,0,64,0,130,0,0,0,24,0,13,0,167,0,244,0,155,0,83,0,0,0,102,0,0,0,158,0,187,0,157,0,120,0,152,0,108,0,224,0,58,0,21,0,146,0,143,0,110,0,18,0,147,0,96,0,51,0,36,0,75,0,53,0,163,0,66,0,27,0,153,0,0,0,93,0,122,0,212,0,1,0,1,0,69,0,80,0,96,0,44,0,108,0,92,0,247,0,110,0,108,0,242,0,83,0,30,0,209,0,239,0,176,0,6,0,42,0,54,0,100,0,0,0,0,0,0,0,216,0,47,0,44,0,40,0,0,0,0,0,49,0,66,0,0,0,198,0,173,0,135,0,221,0,238,0,0,0,0,0,157,0,144,0,69,0,239,0,94,0,85,0,166,0,0,0,214,0,227,0,0,0,248,0,109,0,2,0,63,0,80,0,221,0,0,0,0,0,97,0,76,0,0,0,238,0,130,0,146,0,206,0,180,0,0,0,76,0,21,0,84,0,137,0,226,0,203,0,237,0,194,0,7,0,0,0,205,0,57,0,71,0,10,0,72,0,22,0,210,0,163,0,17,0,114,0,163,0,44,0,220,0,0,0,250,0,59,0,180,0,77,0,54,0,186,0,153,0,209,0,31,0,186,0,26,0,13,0,67,0,187,0,0,0,40,0,24,0,0,0,8,0,229,0,0,0,203,0,145,0,0,0,127,0,0,0,228,0,158,0,0,0,170,0,100,0,77,0,73,0,46,0,0,0,136,0,177,0,142,0,251,0,0,0,85,0,169,0);
signal scenario_full  : scenario_type := (181,31,210,31,210,31,210,30,166,31,16,31,16,30,16,29,51,31,29,31,115,31,89,31,214,31,63,31,63,30,63,29,15,31,206,31,77,31,45,31,165,31,44,31,149,31,232,31,75,31,34,31,67,31,140,31,140,30,27,31,214,31,50,31,87,31,67,31,99,31,99,30,163,31,2,31,2,30,23,31,155,31,131,31,131,30,152,31,178,31,55,31,200,31,200,30,91,31,226,31,117,31,20,31,164,31,164,30,164,29,232,31,202,31,202,30,224,31,139,31,69,31,37,31,251,31,251,30,173,31,148,31,158,31,231,31,204,31,209,31,209,30,235,31,123,31,68,31,227,31,227,30,152,31,181,31,181,30,181,29,8,31,22,31,56,31,56,30,56,29,223,31,75,31,126,31,126,30,40,31,159,31,128,31,210,31,210,30,210,29,177,31,89,31,2,31,2,30,37,31,202,31,160,31,198,31,207,31,174,31,44,31,211,31,20,31,149,31,149,30,149,29,149,28,197,31,211,31,119,31,55,31,175,31,18,31,18,30,43,31,92,31,36,31,143,31,200,31,16,31,219,31,24,31,109,31,149,31,221,31,43,31,121,31,164,31,100,31,65,31,65,30,188,31,188,30,57,31,141,31,82,31,42,31,132,31,46,31,254,31,252,31,226,31,229,31,41,31,41,30,41,29,222,31,35,31,255,31,193,31,17,31,250,31,202,31,199,31,199,30,131,31,158,31,133,31,32,31,82,31,67,31,63,31,227,31,148,31,240,31,151,31,98,31,98,30,171,31,158,31,223,31,223,30,127,31,216,31,64,31,160,31,160,30,3,31,85,31,231,31,195,31,192,31,6,31,143,31,147,31,147,30,133,31,165,31,103,31,98,31,50,31,73,31,73,30,96,31,24,31,206,31,65,31,142,31,11,31,200,31,159,31,73,31,235,31,242,31,71,31,85,31,85,30,85,29,138,31,123,31,63,31,125,31,125,30,46,31,3,31,135,31,196,31,13,31,171,31,171,30,23,31,218,31,218,30,62,31,113,31,113,30,237,31,152,31,93,31,59,31,59,30,188,31,151,31,190,31,199,31,111,31,111,30,162,31,197,31,12,31,77,31,225,31,15,31,195,31,85,31,7,31,161,31,217,31,100,31,242,31,242,30,221,31,239,31,94,31,198,31,198,30,27,31,155,31,138,31,204,31,181,31,180,31,22,31,44,31,113,31,20,31,20,30,136,31,95,31,42,31,88,31,31,31,6,31,113,31,9,31,168,31,168,30,153,31,246,31,246,30,115,31,115,30,115,29,224,31,224,30,131,31,6,31,70,31,70,30,34,31,27,31,27,30,37,31,37,30,246,31,113,31,153,31,105,31,105,30,227,31,70,31,244,31,244,30,143,31,143,30,38,31,254,31,192,31,181,31,80,31,249,31,215,31,205,31,58,31,195,31,97,31,114,31,139,31,14,31,14,30,40,31,26,31,26,30,60,31,117,31,109,31,182,31,47,31,182,31,182,30,182,29,182,28,182,27,114,31,225,31,105,31,92,31,124,31,9,31,160,31,82,31,64,31,179,31,2,31,8,31,58,31,41,31,41,30,239,31,222,31,15,31,54,31,174,31,57,31,20,31,175,31,36,31,179,31,200,31,191,31,51,31,51,30,249,31,72,31,39,31,39,30,39,29,133,31,254,31,71,31,174,31,138,31,138,31,6,31,93,31,93,30,222,31,14,31,6,31,242,31,225,31,129,31,177,31,172,31,220,31,220,30,158,31,205,31,46,31,39,31,119,31,250,31,65,31,116,31,116,30,19,31,192,31,81,31,249,31,249,30,59,31,122,31,133,31,133,30,50,31,249,31,249,30,249,29,49,31,212,31,84,31,84,30,37,31,250,31,26,31,21,31,21,30,139,31,56,31,208,31,20,31,179,31,253,31,253,30,89,31,4,31,207,31,22,31,83,31,83,30,24,31,207,31,207,30,66,31,228,31,171,31,171,30,171,29,28,31,162,31,162,30,157,31,177,31,240,31,104,31,245,31,187,31,187,30,76,31,63,31,137,31,204,31,65,31,192,31,192,30,144,31,59,31,187,31,118,31,8,31,191,31,161,31,103,31,103,30,171,31,128,31,58,31,9,31,89,31,61,31,61,30,242,31,202,31,152,31,69,31,252,31,29,31,19,31,205,31,205,30,215,31,206,31,98,31,116,31,74,31,194,31,225,31,225,30,57,31,155,31,156,31,206,31,114,31,114,30,114,29,212,31,227,31,64,31,64,30,46,31,221,31,10,31,123,31,178,31,169,31,84,31,216,31,54,31,73,31,73,30,46,31,97,31,229,31,18,31,244,31,196,31,91,31,116,31,116,30,118,31,144,31,199,31,164,31,115,31,55,31,208,31,172,31,108,31,108,30,35,31,59,31,47,31,244,31,146,31,146,30,146,29,146,28,146,27,44,31,44,30,171,31,209,31,180,31,116,31,249,31,7,31,61,31,61,30,61,29,61,28,61,27,61,26,61,25,197,31,39,31,83,31,83,30,253,31,253,30,30,31,88,31,138,31,1,31,131,31,60,31,196,31,169,31,169,30,169,29,132,31,226,31,162,31,253,31,253,30,219,31,4,31,212,31,62,31,201,31,230,31,230,30,230,29,255,31,32,31,149,31,190,31,139,31,94,31,94,30,191,31,43,31,55,31,55,30,133,31,133,30,129,31,129,30,110,31,179,31,59,31,59,30,59,29,46,31,54,31,60,31,60,30,60,29,60,31,31,31,170,31,33,31,226,31,226,30,226,29,244,31,240,31,166,31,71,31,16,31,16,30,16,29,16,28,192,31,59,31,59,30,198,31,195,31,181,31,181,30,89,31,17,31,17,30,14,31,251,31,104,31,179,31,216,31,37,31,37,30,249,31,249,30,48,31,236,31,118,31,118,30,118,29,118,28,235,31,245,31,9,31,24,31,10,31,10,30,10,29,10,28,180,31,142,31,142,30,241,31,134,31,158,31,152,31,152,30,152,29,152,28,152,27,103,31,219,31,160,31,189,31,36,31,62,31,56,31,56,30,240,31,240,30,164,31,22,31,68,31,68,30,56,31,225,31,93,31,23,31,64,31,130,31,130,30,24,31,13,31,167,31,244,31,155,31,83,31,83,30,102,31,102,30,158,31,187,31,157,31,120,31,152,31,108,31,224,31,58,31,21,31,146,31,143,31,110,31,18,31,147,31,96,31,51,31,36,31,75,31,53,31,163,31,66,31,27,31,153,31,153,30,93,31,122,31,212,31,1,31,1,31,69,31,80,31,96,31,44,31,108,31,92,31,247,31,110,31,108,31,242,31,83,31,30,31,209,31,239,31,176,31,6,31,42,31,54,31,100,31,100,30,100,29,100,28,216,31,47,31,44,31,40,31,40,30,40,29,49,31,66,31,66,30,198,31,173,31,135,31,221,31,238,31,238,30,238,29,157,31,144,31,69,31,239,31,94,31,85,31,166,31,166,30,214,31,227,31,227,30,248,31,109,31,2,31,63,31,80,31,221,31,221,30,221,29,97,31,76,31,76,30,238,31,130,31,146,31,206,31,180,31,180,30,76,31,21,31,84,31,137,31,226,31,203,31,237,31,194,31,7,31,7,30,205,31,57,31,71,31,10,31,72,31,22,31,210,31,163,31,17,31,114,31,163,31,44,31,220,31,220,30,250,31,59,31,180,31,77,31,54,31,186,31,153,31,209,31,31,31,186,31,26,31,13,31,67,31,187,31,187,30,40,31,24,31,24,30,8,31,229,31,229,30,203,31,145,31,145,30,127,31,127,30,228,31,158,31,158,30,170,31,100,31,77,31,73,31,46,31,46,30,136,31,177,31,142,31,251,31,251,30,85,31,169,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
