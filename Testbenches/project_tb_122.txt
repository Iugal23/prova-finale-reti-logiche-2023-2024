-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 457;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (88,0,111,0,0,0,251,0,63,0,31,0,130,0,75,0,17,0,186,0,0,0,102,0,165,0,186,0,0,0,130,0,0,0,226,0,196,0,102,0,169,0,13,0,253,0,162,0,14,0,0,0,0,0,139,0,48,0,2,0,175,0,145,0,211,0,151,0,155,0,87,0,3,0,15,0,37,0,23,0,0,0,0,0,0,0,133,0,186,0,139,0,0,0,141,0,114,0,253,0,235,0,153,0,0,0,0,0,231,0,227,0,46,0,138,0,229,0,21,0,226,0,0,0,96,0,227,0,0,0,176,0,233,0,29,0,123,0,54,0,90,0,134,0,0,0,0,0,133,0,178,0,50,0,122,0,49,0,0,0,87,0,97,0,0,0,32,0,157,0,164,0,0,0,20,0,168,0,202,0,191,0,102,0,0,0,25,0,0,0,120,0,162,0,96,0,10,0,11,0,0,0,195,0,0,0,250,0,0,0,48,0,231,0,75,0,0,0,75,0,106,0,92,0,78,0,212,0,31,0,0,0,91,0,115,0,150,0,48,0,196,0,251,0,146,0,180,0,0,0,163,0,0,0,198,0,120,0,154,0,0,0,143,0,0,0,193,0,78,0,157,0,21,0,163,0,84,0,129,0,0,0,0,0,101,0,47,0,56,0,54,0,66,0,0,0,200,0,34,0,26,0,50,0,12,0,103,0,87,0,94,0,0,0,0,0,88,0,39,0,95,0,52,0,44,0,71,0,102,0,198,0,187,0,82,0,220,0,11,0,16,0,57,0,15,0,39,0,223,0,0,0,247,0,44,0,73,0,153,0,26,0,40,0,109,0,72,0,102,0,223,0,60,0,157,0,4,0,213,0,252,0,176,0,203,0,85,0,90,0,0,0,155,0,212,0,0,0,134,0,166,0,243,0,93,0,157,0,223,0,245,0,151,0,160,0,83,0,106,0,162,0,122,0,6,0,71,0,0,0,102,0,249,0,142,0,56,0,58,0,210,0,0,0,143,0,96,0,0,0,17,0,111,0,0,0,1,0,166,0,79,0,0,0,37,0,119,0,162,0,4,0,0,0,180,0,58,0,4,0,173,0,223,0,114,0,108,0,143,0,55,0,203,0,109,0,183,0,127,0,55,0,43,0,139,0,139,0,0,0,32,0,86,0,8,0,158,0,0,0,35,0,159,0,231,0,104,0,0,0,0,0,235,0,136,0,18,0,70,0,225,0,150,0,0,0,154,0,18,0,0,0,0,0,196,0,121,0,0,0,42,0,0,0,230,0,93,0,48,0,166,0,139,0,206,0,175,0,0,0,49,0,86,0,225,0,0,0,0,0,14,0,120,0,152,0,0,0,20,0,164,0,196,0,230,0,0,0,206,0,172,0,67,0,22,0,146,0,32,0,229,0,149,0,65,0,0,0,28,0,31,0,8,0,0,0,195,0,25,0,182,0,229,0,156,0,212,0,146,0,0,0,206,0,122,0,93,0,253,0,161,0,16,0,24,0,105,0,198,0,164,0,155,0,86,0,115,0,168,0,122,0,62,0,93,0,136,0,0,0,8,0,208,0,199,0,0,0,135,0,183,0,204,0,191,0,107,0,53,0,72,0,123,0,0,0,207,0,232,0,0,0,249,0,88,0,0,0,83,0,0,0,0,0,126,0,133,0,123,0,179,0,0,0,146,0,124,0,239,0,0,0,41,0,0,0,0,0,214,0,0,0,215,0,93,0,27,0,249,0,0,0,0,0,229,0,244,0,39,0,181,0,0,0,41,0,140,0,14,0,123,0,127,0,192,0,210,0,171,0,108,0,234,0,149,0,123,0,107,0,134,0,110,0,143,0,203,0,19,0,0,0,37,0,96,0,200,0,108,0,100,0,0,0,24,0,45,0,106,0,193,0,70,0,132,0,0,0,170,0,35,0,0,0,119,0,97,0,120,0,53,0,143,0,97,0,0,0,154,0,26,0,176,0,48,0,188,0,194,0,230,0,244,0,0,0,13,0,150,0,13,0,0,0,240,0,0,0,123,0,134,0,113,0,72,0,250,0,92,0,0,0,15,0);
signal scenario_full  : scenario_type := (88,31,111,31,111,30,251,31,63,31,31,31,130,31,75,31,17,31,186,31,186,30,102,31,165,31,186,31,186,30,130,31,130,30,226,31,196,31,102,31,169,31,13,31,253,31,162,31,14,31,14,30,14,29,139,31,48,31,2,31,175,31,145,31,211,31,151,31,155,31,87,31,3,31,15,31,37,31,23,31,23,30,23,29,23,28,133,31,186,31,139,31,139,30,141,31,114,31,253,31,235,31,153,31,153,30,153,29,231,31,227,31,46,31,138,31,229,31,21,31,226,31,226,30,96,31,227,31,227,30,176,31,233,31,29,31,123,31,54,31,90,31,134,31,134,30,134,29,133,31,178,31,50,31,122,31,49,31,49,30,87,31,97,31,97,30,32,31,157,31,164,31,164,30,20,31,168,31,202,31,191,31,102,31,102,30,25,31,25,30,120,31,162,31,96,31,10,31,11,31,11,30,195,31,195,30,250,31,250,30,48,31,231,31,75,31,75,30,75,31,106,31,92,31,78,31,212,31,31,31,31,30,91,31,115,31,150,31,48,31,196,31,251,31,146,31,180,31,180,30,163,31,163,30,198,31,120,31,154,31,154,30,143,31,143,30,193,31,78,31,157,31,21,31,163,31,84,31,129,31,129,30,129,29,101,31,47,31,56,31,54,31,66,31,66,30,200,31,34,31,26,31,50,31,12,31,103,31,87,31,94,31,94,30,94,29,88,31,39,31,95,31,52,31,44,31,71,31,102,31,198,31,187,31,82,31,220,31,11,31,16,31,57,31,15,31,39,31,223,31,223,30,247,31,44,31,73,31,153,31,26,31,40,31,109,31,72,31,102,31,223,31,60,31,157,31,4,31,213,31,252,31,176,31,203,31,85,31,90,31,90,30,155,31,212,31,212,30,134,31,166,31,243,31,93,31,157,31,223,31,245,31,151,31,160,31,83,31,106,31,162,31,122,31,6,31,71,31,71,30,102,31,249,31,142,31,56,31,58,31,210,31,210,30,143,31,96,31,96,30,17,31,111,31,111,30,1,31,166,31,79,31,79,30,37,31,119,31,162,31,4,31,4,30,180,31,58,31,4,31,173,31,223,31,114,31,108,31,143,31,55,31,203,31,109,31,183,31,127,31,55,31,43,31,139,31,139,31,139,30,32,31,86,31,8,31,158,31,158,30,35,31,159,31,231,31,104,31,104,30,104,29,235,31,136,31,18,31,70,31,225,31,150,31,150,30,154,31,18,31,18,30,18,29,196,31,121,31,121,30,42,31,42,30,230,31,93,31,48,31,166,31,139,31,206,31,175,31,175,30,49,31,86,31,225,31,225,30,225,29,14,31,120,31,152,31,152,30,20,31,164,31,196,31,230,31,230,30,206,31,172,31,67,31,22,31,146,31,32,31,229,31,149,31,65,31,65,30,28,31,31,31,8,31,8,30,195,31,25,31,182,31,229,31,156,31,212,31,146,31,146,30,206,31,122,31,93,31,253,31,161,31,16,31,24,31,105,31,198,31,164,31,155,31,86,31,115,31,168,31,122,31,62,31,93,31,136,31,136,30,8,31,208,31,199,31,199,30,135,31,183,31,204,31,191,31,107,31,53,31,72,31,123,31,123,30,207,31,232,31,232,30,249,31,88,31,88,30,83,31,83,30,83,29,126,31,133,31,123,31,179,31,179,30,146,31,124,31,239,31,239,30,41,31,41,30,41,29,214,31,214,30,215,31,93,31,27,31,249,31,249,30,249,29,229,31,244,31,39,31,181,31,181,30,41,31,140,31,14,31,123,31,127,31,192,31,210,31,171,31,108,31,234,31,149,31,123,31,107,31,134,31,110,31,143,31,203,31,19,31,19,30,37,31,96,31,200,31,108,31,100,31,100,30,24,31,45,31,106,31,193,31,70,31,132,31,132,30,170,31,35,31,35,30,119,31,97,31,120,31,53,31,143,31,97,31,97,30,154,31,26,31,176,31,48,31,188,31,194,31,230,31,244,31,244,30,13,31,150,31,13,31,13,30,240,31,240,30,123,31,134,31,113,31,72,31,250,31,92,31,92,30,15,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
