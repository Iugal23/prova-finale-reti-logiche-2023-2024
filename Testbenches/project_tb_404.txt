-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 1009;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (234,0,128,0,181,0,44,0,159,0,179,0,235,0,223,0,34,0,122,0,3,0,0,0,160,0,180,0,0,0,153,0,224,0,65,0,250,0,4,0,0,0,115,0,76,0,59,0,212,0,90,0,184,0,164,0,191,0,68,0,68,0,210,0,0,0,0,0,134,0,19,0,1,0,95,0,123,0,0,0,182,0,243,0,131,0,177,0,76,0,240,0,29,0,50,0,0,0,33,0,0,0,196,0,213,0,0,0,148,0,0,0,0,0,64,0,0,0,99,0,0,0,0,0,185,0,49,0,105,0,197,0,0,0,0,0,0,0,0,0,91,0,23,0,187,0,188,0,53,0,103,0,199,0,94,0,0,0,0,0,3,0,246,0,203,0,0,0,121,0,232,0,40,0,199,0,0,0,19,0,106,0,0,0,145,0,0,0,96,0,12,0,0,0,192,0,23,0,0,0,99,0,79,0,198,0,112,0,126,0,246,0,64,0,0,0,0,0,8,0,40,0,111,0,19,0,160,0,229,0,65,0,197,0,138,0,217,0,0,0,0,0,0,0,180,0,192,0,195,0,5,0,124,0,68,0,161,0,105,0,0,0,105,0,175,0,116,0,125,0,141,0,0,0,0,0,162,0,212,0,95,0,149,0,0,0,236,0,205,0,64,0,4,0,241,0,229,0,24,0,136,0,228,0,155,0,49,0,141,0,159,0,171,0,36,0,15,0,0,0,175,0,240,0,221,0,235,0,0,0,206,0,86,0,216,0,222,0,33,0,69,0,0,0,46,0,0,0,124,0,13,0,197,0,0,0,140,0,129,0,150,0,75,0,217,0,222,0,0,0,195,0,188,0,0,0,0,0,159,0,89,0,104,0,185,0,0,0,12,0,170,0,77,0,78,0,18,0,50,0,161,0,0,0,89,0,240,0,206,0,0,0,137,0,0,0,0,0,185,0,70,0,0,0,196,0,119,0,100,0,58,0,0,0,166,0,153,0,239,0,7,0,230,0,111,0,204,0,77,0,202,0,92,0,0,0,136,0,224,0,0,0,30,0,96,0,0,0,0,0,2,0,0,0,161,0,101,0,186,0,82,0,173,0,179,0,0,0,191,0,183,0,66,0,108,0,151,0,86,0,10,0,189,0,198,0,0,0,210,0,15,0,162,0,62,0,0,0,161,0,226,0,108,0,141,0,199,0,183,0,0,0,81,0,41,0,177,0,0,0,118,0,0,0,80,0,78,0,0,0,31,0,209,0,92,0,58,0,123,0,29,0,84,0,20,0,176,0,193,0,167,0,184,0,224,0,221,0,151,0,92,0,19,0,153,0,49,0,124,0,0,0,98,0,85,0,148,0,78,0,214,0,227,0,0,0,0,0,50,0,0,0,170,0,237,0,28,0,221,0,221,0,90,0,243,0,0,0,64,0,17,0,24,0,36,0,25,0,0,0,0,0,222,0,35,0,25,0,0,0,30,0,95,0,17,0,58,0,3,0,0,0,116,0,101,0,209,0,38,0,46,0,174,0,50,0,114,0,49,0,158,0,54,0,98,0,0,0,227,0,177,0,77,0,56,0,133,0,141,0,112,0,84,0,0,0,51,0,130,0,203,0,30,0,159,0,59,0,164,0,113,0,228,0,131,0,156,0,137,0,60,0,6,0,192,0,228,0,46,0,51,0,251,0,142,0,196,0,88,0,228,0,27,0,0,0,33,0,247,0,88,0,153,0,0,0,117,0,23,0,121,0,0,0,236,0,0,0,0,0,216,0,56,0,46,0,118,0,0,0,146,0,37,0,220,0,217,0,207,0,156,0,10,0,229,0,67,0,0,0,147,0,120,0,114,0,0,0,172,0,0,0,143,0,65,0,36,0,249,0,55,0,255,0,166,0,0,0,88,0,22,0,149,0,97,0,177,0,0,0,209,0,6,0,221,0,0,0,246,0,208,0,160,0,0,0,0,0,58,0,0,0,148,0,86,0,0,0,188,0,163,0,8,0,61,0,169,0,142,0,67,0,155,0,246,0,0,0,32,0,48,0,0,0,96,0,197,0,139,0,232,0,66,0,157,0,11,0,0,0,21,0,122,0,63,0,245,0,0,0,45,0,16,0,96,0,211,0,0,0,113,0,0,0,0,0,58,0,94,0,0,0,49,0,246,0,239,0,0,0,43,0,151,0,215,0,201,0,121,0,0,0,246,0,222,0,65,0,117,0,38,0,120,0,158,0,0,0,100,0,126,0,0,0,179,0,9,0,0,0,153,0,94,0,215,0,9,0,206,0,255,0,254,0,0,0,42,0,218,0,7,0,182,0,41,0,172,0,0,0,108,0,112,0,209,0,123,0,230,0,3,0,209,0,10,0,0,0,0,0,35,0,31,0,175,0,138,0,0,0,215,0,52,0,44,0,225,0,0,0,40,0,22,0,0,0,119,0,60,0,119,0,40,0,82,0,209,0,53,0,0,0,115,0,0,0,0,0,180,0,29,0,238,0,71,0,132,0,209,0,163,0,211,0,82,0,6,0,0,0,150,0,114,0,227,0,74,0,61,0,199,0,160,0,157,0,20,0,0,0,70,0,0,0,0,0,144,0,9,0,254,0,59,0,149,0,77,0,225,0,0,0,85,0,129,0,203,0,43,0,140,0,0,0,198,0,104,0,45,0,249,0,90,0,0,0,214,0,95,0,26,0,54,0,151,0,83,0,114,0,61,0,70,0,116,0,2,0,33,0,0,0,186,0,194,0,111,0,158,0,0,0,151,0,0,0,47,0,250,0,37,0,251,0,83,0,176,0,0,0,243,0,222,0,0,0,238,0,241,0,190,0,0,0,99,0,0,0,0,0,30,0,101,0,0,0,169,0,174,0,73,0,0,0,108,0,154,0,45,0,237,0,200,0,0,0,142,0,97,0,63,0,43,0,0,0,0,0,134,0,177,0,35,0,148,0,184,0,233,0,172,0,22,0,0,0,111,0,34,0,155,0,121,0,44,0,0,0,218,0,0,0,245,0,0,0,0,0,153,0,101,0,221,0,20,0,153,0,248,0,181,0,115,0,114,0,4,0,0,0,0,0,85,0,0,0,128,0,104,0,39,0,51,0,149,0,125,0,0,0,0,0,103,0,163,0,0,0,224,0,38,0,13,0,234,0,0,0,224,0,244,0,244,0,169,0,83,0,149,0,227,0,0,0,0,0,140,0,123,0,184,0,7,0,47,0,216,0,177,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,133,0,0,0,0,0,15,0,246,0,222,0,0,0,152,0,93,0,157,0,62,0,152,0,68,0,137,0,81,0,8,0,82,0,252,0,112,0,79,0,103,0,211,0,128,0,142,0,0,0,55,0,76,0,14,0,252,0,0,0,40,0,0,0,158,0,46,0,117,0,49,0,134,0,0,0,208,0,143,0,132,0,0,0,7,0,0,0,177,0,233,0,0,0,52,0,0,0,54,0,199,0,171,0,0,0,145,0,72,0,249,0,0,0,55,0,163,0,0,0,0,0,108,0,100,0,55,0,194,0,2,0,65,0,10,0,196,0,0,0,74,0,40,0,0,0,237,0,118,0,3,0,64,0,0,0,126,0,220,0,117,0,101,0,0,0,0,0,0,0,62,0,0,0,102,0,103,0,244,0,178,0,4,0,97,0,16,0,0,0,9,0,0,0,220,0,213,0,66,0,32,0,187,0,1,0,0,0,0,0,249,0,221,0,255,0,170,0,7,0,175,0,180,0,190,0,213,0,49,0,0,0,238,0,241,0,230,0,0,0,170,0,0,0,86,0,221,0,174,0,204,0,7,0,0,0,235,0,57,0,81,0,0,0,155,0,137,0,0,0,180,0,223,0,19,0,58,0,184,0,66,0,33,0,128,0,0,0,0,0,254,0,229,0,117,0,173,0,87,0,5,0,117,0,100,0,101,0,0,0,146,0,68,0,0,0,0,0,35,0,167,0,55,0,232,0,113,0,80,0,119,0,0,0,59,0,83,0,152,0,238,0,252,0,141,0,146,0,150,0,121,0,141,0,25,0,0,0,192,0,19,0,0,0,231,0,23,0,209,0,171,0,6,0,20,0,97,0,224,0,38,0,254,0,0,0,0,0,172,0,211,0,0,0,40,0,0,0,0,0,251,0,0,0,138,0,248,0,79,0,0,0,46,0,92,0,20,0,168,0,55,0,68,0,92,0,65,0,0,0,49,0,149,0,222,0,212,0,81,0,94,0,90,0,246,0,253,0,0,0,73,0,34,0,0,0,0,0,179,0,134,0,200,0,223,0,247,0,129,0,54,0,47,0,89,0,193,0,45,0,45,0,0,0,0,0,146,0,0,0,64,0,0,0,0,0,124,0,236,0,0,0,232,0,230,0,172,0,0,0,203,0,0,0,131,0,246,0,255,0,4,0,67,0,232,0,0,0,53,0,56,0,61,0,0,0,252,0,62,0,53,0,139,0,212,0,189,0,75,0,187,0,131,0,133,0,133,0,0,0,38,0,119,0,55,0,69,0,104,0,0,0,70,0);
signal scenario_full  : scenario_type := (234,31,128,31,181,31,44,31,159,31,179,31,235,31,223,31,34,31,122,31,3,31,3,30,160,31,180,31,180,30,153,31,224,31,65,31,250,31,4,31,4,30,115,31,76,31,59,31,212,31,90,31,184,31,164,31,191,31,68,31,68,31,210,31,210,30,210,29,134,31,19,31,1,31,95,31,123,31,123,30,182,31,243,31,131,31,177,31,76,31,240,31,29,31,50,31,50,30,33,31,33,30,196,31,213,31,213,30,148,31,148,30,148,29,64,31,64,30,99,31,99,30,99,29,185,31,49,31,105,31,197,31,197,30,197,29,197,28,197,27,91,31,23,31,187,31,188,31,53,31,103,31,199,31,94,31,94,30,94,29,3,31,246,31,203,31,203,30,121,31,232,31,40,31,199,31,199,30,19,31,106,31,106,30,145,31,145,30,96,31,12,31,12,30,192,31,23,31,23,30,99,31,79,31,198,31,112,31,126,31,246,31,64,31,64,30,64,29,8,31,40,31,111,31,19,31,160,31,229,31,65,31,197,31,138,31,217,31,217,30,217,29,217,28,180,31,192,31,195,31,5,31,124,31,68,31,161,31,105,31,105,30,105,31,175,31,116,31,125,31,141,31,141,30,141,29,162,31,212,31,95,31,149,31,149,30,236,31,205,31,64,31,4,31,241,31,229,31,24,31,136,31,228,31,155,31,49,31,141,31,159,31,171,31,36,31,15,31,15,30,175,31,240,31,221,31,235,31,235,30,206,31,86,31,216,31,222,31,33,31,69,31,69,30,46,31,46,30,124,31,13,31,197,31,197,30,140,31,129,31,150,31,75,31,217,31,222,31,222,30,195,31,188,31,188,30,188,29,159,31,89,31,104,31,185,31,185,30,12,31,170,31,77,31,78,31,18,31,50,31,161,31,161,30,89,31,240,31,206,31,206,30,137,31,137,30,137,29,185,31,70,31,70,30,196,31,119,31,100,31,58,31,58,30,166,31,153,31,239,31,7,31,230,31,111,31,204,31,77,31,202,31,92,31,92,30,136,31,224,31,224,30,30,31,96,31,96,30,96,29,2,31,2,30,161,31,101,31,186,31,82,31,173,31,179,31,179,30,191,31,183,31,66,31,108,31,151,31,86,31,10,31,189,31,198,31,198,30,210,31,15,31,162,31,62,31,62,30,161,31,226,31,108,31,141,31,199,31,183,31,183,30,81,31,41,31,177,31,177,30,118,31,118,30,80,31,78,31,78,30,31,31,209,31,92,31,58,31,123,31,29,31,84,31,20,31,176,31,193,31,167,31,184,31,224,31,221,31,151,31,92,31,19,31,153,31,49,31,124,31,124,30,98,31,85,31,148,31,78,31,214,31,227,31,227,30,227,29,50,31,50,30,170,31,237,31,28,31,221,31,221,31,90,31,243,31,243,30,64,31,17,31,24,31,36,31,25,31,25,30,25,29,222,31,35,31,25,31,25,30,30,31,95,31,17,31,58,31,3,31,3,30,116,31,101,31,209,31,38,31,46,31,174,31,50,31,114,31,49,31,158,31,54,31,98,31,98,30,227,31,177,31,77,31,56,31,133,31,141,31,112,31,84,31,84,30,51,31,130,31,203,31,30,31,159,31,59,31,164,31,113,31,228,31,131,31,156,31,137,31,60,31,6,31,192,31,228,31,46,31,51,31,251,31,142,31,196,31,88,31,228,31,27,31,27,30,33,31,247,31,88,31,153,31,153,30,117,31,23,31,121,31,121,30,236,31,236,30,236,29,216,31,56,31,46,31,118,31,118,30,146,31,37,31,220,31,217,31,207,31,156,31,10,31,229,31,67,31,67,30,147,31,120,31,114,31,114,30,172,31,172,30,143,31,65,31,36,31,249,31,55,31,255,31,166,31,166,30,88,31,22,31,149,31,97,31,177,31,177,30,209,31,6,31,221,31,221,30,246,31,208,31,160,31,160,30,160,29,58,31,58,30,148,31,86,31,86,30,188,31,163,31,8,31,61,31,169,31,142,31,67,31,155,31,246,31,246,30,32,31,48,31,48,30,96,31,197,31,139,31,232,31,66,31,157,31,11,31,11,30,21,31,122,31,63,31,245,31,245,30,45,31,16,31,96,31,211,31,211,30,113,31,113,30,113,29,58,31,94,31,94,30,49,31,246,31,239,31,239,30,43,31,151,31,215,31,201,31,121,31,121,30,246,31,222,31,65,31,117,31,38,31,120,31,158,31,158,30,100,31,126,31,126,30,179,31,9,31,9,30,153,31,94,31,215,31,9,31,206,31,255,31,254,31,254,30,42,31,218,31,7,31,182,31,41,31,172,31,172,30,108,31,112,31,209,31,123,31,230,31,3,31,209,31,10,31,10,30,10,29,35,31,31,31,175,31,138,31,138,30,215,31,52,31,44,31,225,31,225,30,40,31,22,31,22,30,119,31,60,31,119,31,40,31,82,31,209,31,53,31,53,30,115,31,115,30,115,29,180,31,29,31,238,31,71,31,132,31,209,31,163,31,211,31,82,31,6,31,6,30,150,31,114,31,227,31,74,31,61,31,199,31,160,31,157,31,20,31,20,30,70,31,70,30,70,29,144,31,9,31,254,31,59,31,149,31,77,31,225,31,225,30,85,31,129,31,203,31,43,31,140,31,140,30,198,31,104,31,45,31,249,31,90,31,90,30,214,31,95,31,26,31,54,31,151,31,83,31,114,31,61,31,70,31,116,31,2,31,33,31,33,30,186,31,194,31,111,31,158,31,158,30,151,31,151,30,47,31,250,31,37,31,251,31,83,31,176,31,176,30,243,31,222,31,222,30,238,31,241,31,190,31,190,30,99,31,99,30,99,29,30,31,101,31,101,30,169,31,174,31,73,31,73,30,108,31,154,31,45,31,237,31,200,31,200,30,142,31,97,31,63,31,43,31,43,30,43,29,134,31,177,31,35,31,148,31,184,31,233,31,172,31,22,31,22,30,111,31,34,31,155,31,121,31,44,31,44,30,218,31,218,30,245,31,245,30,245,29,153,31,101,31,221,31,20,31,153,31,248,31,181,31,115,31,114,31,4,31,4,30,4,29,85,31,85,30,128,31,104,31,39,31,51,31,149,31,125,31,125,30,125,29,103,31,163,31,163,30,224,31,38,31,13,31,234,31,234,30,224,31,244,31,244,31,169,31,83,31,149,31,227,31,227,30,227,29,140,31,123,31,184,31,7,31,47,31,216,31,177,31,2,31,2,30,2,29,2,28,2,27,2,26,2,25,133,31,133,30,133,29,15,31,246,31,222,31,222,30,152,31,93,31,157,31,62,31,152,31,68,31,137,31,81,31,8,31,82,31,252,31,112,31,79,31,103,31,211,31,128,31,142,31,142,30,55,31,76,31,14,31,252,31,252,30,40,31,40,30,158,31,46,31,117,31,49,31,134,31,134,30,208,31,143,31,132,31,132,30,7,31,7,30,177,31,233,31,233,30,52,31,52,30,54,31,199,31,171,31,171,30,145,31,72,31,249,31,249,30,55,31,163,31,163,30,163,29,108,31,100,31,55,31,194,31,2,31,65,31,10,31,196,31,196,30,74,31,40,31,40,30,237,31,118,31,3,31,64,31,64,30,126,31,220,31,117,31,101,31,101,30,101,29,101,28,62,31,62,30,102,31,103,31,244,31,178,31,4,31,97,31,16,31,16,30,9,31,9,30,220,31,213,31,66,31,32,31,187,31,1,31,1,30,1,29,249,31,221,31,255,31,170,31,7,31,175,31,180,31,190,31,213,31,49,31,49,30,238,31,241,31,230,31,230,30,170,31,170,30,86,31,221,31,174,31,204,31,7,31,7,30,235,31,57,31,81,31,81,30,155,31,137,31,137,30,180,31,223,31,19,31,58,31,184,31,66,31,33,31,128,31,128,30,128,29,254,31,229,31,117,31,173,31,87,31,5,31,117,31,100,31,101,31,101,30,146,31,68,31,68,30,68,29,35,31,167,31,55,31,232,31,113,31,80,31,119,31,119,30,59,31,83,31,152,31,238,31,252,31,141,31,146,31,150,31,121,31,141,31,25,31,25,30,192,31,19,31,19,30,231,31,23,31,209,31,171,31,6,31,20,31,97,31,224,31,38,31,254,31,254,30,254,29,172,31,211,31,211,30,40,31,40,30,40,29,251,31,251,30,138,31,248,31,79,31,79,30,46,31,92,31,20,31,168,31,55,31,68,31,92,31,65,31,65,30,49,31,149,31,222,31,212,31,81,31,94,31,90,31,246,31,253,31,253,30,73,31,34,31,34,30,34,29,179,31,134,31,200,31,223,31,247,31,129,31,54,31,47,31,89,31,193,31,45,31,45,31,45,30,45,29,146,31,146,30,64,31,64,30,64,29,124,31,236,31,236,30,232,31,230,31,172,31,172,30,203,31,203,30,131,31,246,31,255,31,4,31,67,31,232,31,232,30,53,31,56,31,61,31,61,30,252,31,62,31,53,31,139,31,212,31,189,31,75,31,187,31,131,31,133,31,133,31,133,30,38,31,119,31,55,31,69,31,104,31,104,30,70,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
