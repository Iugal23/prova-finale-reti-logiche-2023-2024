-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 899;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (219,0,0,0,53,0,39,0,0,0,178,0,196,0,142,0,12,0,190,0,177,0,148,0,239,0,177,0,11,0,0,0,219,0,0,0,80,0,86,0,197,0,90,0,0,0,33,0,104,0,142,0,177,0,0,0,227,0,68,0,50,0,248,0,41,0,0,0,105,0,0,0,0,0,36,0,60,0,111,0,9,0,188,0,49,0,219,0,200,0,204,0,65,0,154,0,215,0,0,0,69,0,214,0,177,0,46,0,59,0,0,0,123,0,0,0,88,0,15,0,0,0,134,0,19,0,6,0,45,0,3,0,122,0,252,0,99,0,0,0,92,0,222,0,0,0,113,0,80,0,247,0,4,0,72,0,190,0,76,0,2,0,0,0,240,0,175,0,8,0,18,0,143,0,48,0,51,0,49,0,170,0,106,0,14,0,26,0,25,0,204,0,54,0,84,0,0,0,63,0,0,0,216,0,75,0,0,0,15,0,4,0,65,0,244,0,53,0,202,0,2,0,58,0,37,0,0,0,0,0,160,0,165,0,111,0,122,0,0,0,130,0,0,0,105,0,240,0,104,0,165,0,12,0,231,0,222,0,208,0,112,0,0,0,0,0,150,0,80,0,192,0,62,0,0,0,86,0,192,0,0,0,138,0,0,0,34,0,0,0,0,0,209,0,235,0,0,0,0,0,64,0,0,0,50,0,0,0,91,0,0,0,158,0,0,0,85,0,122,0,185,0,205,0,66,0,220,0,0,0,0,0,53,0,158,0,44,0,222,0,0,0,200,0,0,0,158,0,200,0,177,0,253,0,32,0,252,0,3,0,141,0,0,0,148,0,0,0,0,0,0,0,25,0,183,0,45,0,0,0,111,0,213,0,62,0,49,0,32,0,86,0,191,0,210,0,0,0,180,0,117,0,119,0,0,0,51,0,85,0,147,0,102,0,0,0,56,0,66,0,71,0,0,0,0,0,186,0,10,0,131,0,0,0,17,0,0,0,29,0,58,0,52,0,103,0,224,0,0,0,165,0,176,0,0,0,0,0,201,0,201,0,203,0,147,0,173,0,143,0,57,0,207,0,0,0,212,0,0,0,0,0,0,0,217,0,198,0,165,0,76,0,223,0,131,0,69,0,199,0,0,0,0,0,144,0,0,0,58,0,0,0,195,0,209,0,1,0,0,0,0,0,0,0,24,0,252,0,180,0,232,0,0,0,0,0,106,0,0,0,249,0,5,0,0,0,2,0,241,0,0,0,206,0,0,0,0,0,127,0,62,0,184,0,31,0,228,0,133,0,3,0,252,0,242,0,130,0,244,0,165,0,88,0,36,0,0,0,0,0,185,0,0,0,43,0,3,0,162,0,37,0,145,0,192,0,29,0,202,0,37,0,0,0,0,0,141,0,57,0,230,0,238,0,0,0,242,0,40,0,180,0,197,0,43,0,0,0,136,0,87,0,0,0,0,0,0,0,42,0,157,0,0,0,226,0,114,0,145,0,213,0,245,0,0,0,138,0,216,0,67,0,115,0,0,0,53,0,105,0,21,0,206,0,0,0,243,0,98,0,231,0,0,0,0,0,154,0,0,0,96,0,20,0,140,0,155,0,45,0,124,0,57,0,37,0,0,0,0,0,200,0,128,0,16,0,236,0,92,0,48,0,56,0,143,0,145,0,61,0,0,0,118,0,0,0,213,0,152,0,129,0,155,0,98,0,0,0,0,0,158,0,147,0,105,0,18,0,0,0,0,0,129,0,0,0,190,0,24,0,61,0,196,0,0,0,220,0,103,0,0,0,185,0,0,0,157,0,236,0,57,0,131,0,0,0,42,0,180,0,123,0,168,0,18,0,33,0,0,0,145,0,0,0,12,0,0,0,236,0,199,0,76,0,229,0,158,0,22,0,79,0,181,0,67,0,146,0,249,0,168,0,5,0,172,0,73,0,0,0,1,0,79,0,232,0,98,0,43,0,69,0,87,0,173,0,110,0,103,0,142,0,0,0,237,0,0,0,125,0,38,0,134,0,231,0,205,0,235,0,56,0,0,0,194,0,205,0,124,0,54,0,36,0,36,0,228,0,97,0,9,0,28,0,137,0,47,0,0,0,32,0,71,0,137,0,134,0,254,0,0,0,191,0,198,0,40,0,34,0,139,0,166,0,150,0,200,0,205,0,169,0,221,0,0,0,0,0,0,0,103,0,204,0,0,0,189,0,164,0,111,0,150,0,140,0,16,0,78,0,0,0,0,0,130,0,59,0,94,0,107,0,0,0,99,0,226,0,170,0,111,0,111,0,108,0,119,0,162,0,251,0,2,0,178,0,173,0,154,0,0,0,26,0,79,0,123,0,244,0,0,0,81,0,0,0,201,0,191,0,241,0,81,0,51,0,37,0,47,0,186,0,30,0,218,0,196,0,192,0,0,0,201,0,122,0,0,0,5,0,220,0,213,0,202,0,0,0,0,0,52,0,159,0,235,0,0,0,61,0,0,0,122,0,136,0,64,0,123,0,211,0,20,0,69,0,240,0,74,0,0,0,55,0,221,0,164,0,47,0,17,0,126,0,0,0,195,0,177,0,130,0,65,0,0,0,116,0,164,0,7,0,225,0,202,0,88,0,202,0,225,0,188,0,196,0,94,0,172,0,0,0,240,0,92,0,171,0,231,0,0,0,245,0,30,0,72,0,87,0,133,0,128,0,110,0,0,0,223,0,0,0,0,0,137,0,156,0,17,0,184,0,46,0,85,0,65,0,235,0,189,0,31,0,13,0,36,0,0,0,45,0,24,0,0,0,92,0,211,0,0,0,0,0,11,0,0,0,41,0,190,0,146,0,0,0,170,0,0,0,86,0,114,0,128,0,0,0,3,0,0,0,157,0,23,0,23,0,203,0,55,0,180,0,28,0,164,0,234,0,150,0,168,0,0,0,118,0,0,0,0,0,0,0,16,0,9,0,30,0,22,0,204,0,21,0,202,0,189,0,66,0,243,0,191,0,241,0,21,0,43,0,0,0,76,0,178,0,48,0,188,0,200,0,149,0,148,0,0,0,115,0,141,0,0,0,195,0,232,0,112,0,164,0,215,0,247,0,0,0,183,0,174,0,70,0,248,0,23,0,196,0,103,0,38,0,0,0,152,0,135,0,0,0,107,0,228,0,40,0,8,0,0,0,3,0,0,0,75,0,83,0,168,0,0,0,20,0,0,0,0,0,192,0,253,0,86,0,3,0,103,0,35,0,173,0,136,0,16,0,169,0,133,0,143,0,158,0,111,0,30,0,174,0,127,0,78,0,55,0,0,0,225,0,255,0,200,0,32,0,44,0,0,0,164,0,83,0,0,0,47,0,152,0,225,0,139,0,128,0,0,0,152,0,109,0,0,0,239,0,115,0,0,0,0,0,178,0,251,0,129,0,0,0,173,0,0,0,243,0,0,0,249,0,49,0,176,0,213,0,0,0,121,0,0,0,0,0,0,0,167,0,121,0,121,0,253,0,15,0,74,0,12,0,93,0,23,0,53,0,99,0,229,0,0,0,0,0,108,0,92,0,0,0,226,0,96,0,237,0,61,0,76,0,142,0,0,0,227,0,109,0,0,0,66,0,19,0,211,0,251,0,175,0,0,0,165,0,219,0,83,0,0,0,0,0,6,0,48,0,0,0,169,0,246,0,0,0,31,0,53,0,202,0,208,0,201,0,221,0,168,0,36,0,188,0,87,0,203,0,8,0,199,0,177,0,0,0,254,0,129,0,102,0,0,0,170,0,0,0,220,0,104,0,233,0,13,0,178,0,159,0,26,0,185,0,2,0,168,0,248,0,175,0,0,0,6,0,86,0,104,0,0,0,42,0,222,0,213,0,0,0,146,0,202,0,0,0,197,0,43,0,182,0,29,0,177,0,37,0,227,0,171,0,238,0,238,0,23,0,129,0,220,0,177,0,143,0,55,0,201,0,125,0,70,0,0,0,0,0,82,0,83,0,101,0,0,0,0,0,250,0,54,0,106,0,58,0,164,0,52,0,246,0,54,0,193,0,78,0,248,0,254,0,226,0,239,0);
signal scenario_full  : scenario_type := (219,31,219,30,53,31,39,31,39,30,178,31,196,31,142,31,12,31,190,31,177,31,148,31,239,31,177,31,11,31,11,30,219,31,219,30,80,31,86,31,197,31,90,31,90,30,33,31,104,31,142,31,177,31,177,30,227,31,68,31,50,31,248,31,41,31,41,30,105,31,105,30,105,29,36,31,60,31,111,31,9,31,188,31,49,31,219,31,200,31,204,31,65,31,154,31,215,31,215,30,69,31,214,31,177,31,46,31,59,31,59,30,123,31,123,30,88,31,15,31,15,30,134,31,19,31,6,31,45,31,3,31,122,31,252,31,99,31,99,30,92,31,222,31,222,30,113,31,80,31,247,31,4,31,72,31,190,31,76,31,2,31,2,30,240,31,175,31,8,31,18,31,143,31,48,31,51,31,49,31,170,31,106,31,14,31,26,31,25,31,204,31,54,31,84,31,84,30,63,31,63,30,216,31,75,31,75,30,15,31,4,31,65,31,244,31,53,31,202,31,2,31,58,31,37,31,37,30,37,29,160,31,165,31,111,31,122,31,122,30,130,31,130,30,105,31,240,31,104,31,165,31,12,31,231,31,222,31,208,31,112,31,112,30,112,29,150,31,80,31,192,31,62,31,62,30,86,31,192,31,192,30,138,31,138,30,34,31,34,30,34,29,209,31,235,31,235,30,235,29,64,31,64,30,50,31,50,30,91,31,91,30,158,31,158,30,85,31,122,31,185,31,205,31,66,31,220,31,220,30,220,29,53,31,158,31,44,31,222,31,222,30,200,31,200,30,158,31,200,31,177,31,253,31,32,31,252,31,3,31,141,31,141,30,148,31,148,30,148,29,148,28,25,31,183,31,45,31,45,30,111,31,213,31,62,31,49,31,32,31,86,31,191,31,210,31,210,30,180,31,117,31,119,31,119,30,51,31,85,31,147,31,102,31,102,30,56,31,66,31,71,31,71,30,71,29,186,31,10,31,131,31,131,30,17,31,17,30,29,31,58,31,52,31,103,31,224,31,224,30,165,31,176,31,176,30,176,29,201,31,201,31,203,31,147,31,173,31,143,31,57,31,207,31,207,30,212,31,212,30,212,29,212,28,217,31,198,31,165,31,76,31,223,31,131,31,69,31,199,31,199,30,199,29,144,31,144,30,58,31,58,30,195,31,209,31,1,31,1,30,1,29,1,28,24,31,252,31,180,31,232,31,232,30,232,29,106,31,106,30,249,31,5,31,5,30,2,31,241,31,241,30,206,31,206,30,206,29,127,31,62,31,184,31,31,31,228,31,133,31,3,31,252,31,242,31,130,31,244,31,165,31,88,31,36,31,36,30,36,29,185,31,185,30,43,31,3,31,162,31,37,31,145,31,192,31,29,31,202,31,37,31,37,30,37,29,141,31,57,31,230,31,238,31,238,30,242,31,40,31,180,31,197,31,43,31,43,30,136,31,87,31,87,30,87,29,87,28,42,31,157,31,157,30,226,31,114,31,145,31,213,31,245,31,245,30,138,31,216,31,67,31,115,31,115,30,53,31,105,31,21,31,206,31,206,30,243,31,98,31,231,31,231,30,231,29,154,31,154,30,96,31,20,31,140,31,155,31,45,31,124,31,57,31,37,31,37,30,37,29,200,31,128,31,16,31,236,31,92,31,48,31,56,31,143,31,145,31,61,31,61,30,118,31,118,30,213,31,152,31,129,31,155,31,98,31,98,30,98,29,158,31,147,31,105,31,18,31,18,30,18,29,129,31,129,30,190,31,24,31,61,31,196,31,196,30,220,31,103,31,103,30,185,31,185,30,157,31,236,31,57,31,131,31,131,30,42,31,180,31,123,31,168,31,18,31,33,31,33,30,145,31,145,30,12,31,12,30,236,31,199,31,76,31,229,31,158,31,22,31,79,31,181,31,67,31,146,31,249,31,168,31,5,31,172,31,73,31,73,30,1,31,79,31,232,31,98,31,43,31,69,31,87,31,173,31,110,31,103,31,142,31,142,30,237,31,237,30,125,31,38,31,134,31,231,31,205,31,235,31,56,31,56,30,194,31,205,31,124,31,54,31,36,31,36,31,228,31,97,31,9,31,28,31,137,31,47,31,47,30,32,31,71,31,137,31,134,31,254,31,254,30,191,31,198,31,40,31,34,31,139,31,166,31,150,31,200,31,205,31,169,31,221,31,221,30,221,29,221,28,103,31,204,31,204,30,189,31,164,31,111,31,150,31,140,31,16,31,78,31,78,30,78,29,130,31,59,31,94,31,107,31,107,30,99,31,226,31,170,31,111,31,111,31,108,31,119,31,162,31,251,31,2,31,178,31,173,31,154,31,154,30,26,31,79,31,123,31,244,31,244,30,81,31,81,30,201,31,191,31,241,31,81,31,51,31,37,31,47,31,186,31,30,31,218,31,196,31,192,31,192,30,201,31,122,31,122,30,5,31,220,31,213,31,202,31,202,30,202,29,52,31,159,31,235,31,235,30,61,31,61,30,122,31,136,31,64,31,123,31,211,31,20,31,69,31,240,31,74,31,74,30,55,31,221,31,164,31,47,31,17,31,126,31,126,30,195,31,177,31,130,31,65,31,65,30,116,31,164,31,7,31,225,31,202,31,88,31,202,31,225,31,188,31,196,31,94,31,172,31,172,30,240,31,92,31,171,31,231,31,231,30,245,31,30,31,72,31,87,31,133,31,128,31,110,31,110,30,223,31,223,30,223,29,137,31,156,31,17,31,184,31,46,31,85,31,65,31,235,31,189,31,31,31,13,31,36,31,36,30,45,31,24,31,24,30,92,31,211,31,211,30,211,29,11,31,11,30,41,31,190,31,146,31,146,30,170,31,170,30,86,31,114,31,128,31,128,30,3,31,3,30,157,31,23,31,23,31,203,31,55,31,180,31,28,31,164,31,234,31,150,31,168,31,168,30,118,31,118,30,118,29,118,28,16,31,9,31,30,31,22,31,204,31,21,31,202,31,189,31,66,31,243,31,191,31,241,31,21,31,43,31,43,30,76,31,178,31,48,31,188,31,200,31,149,31,148,31,148,30,115,31,141,31,141,30,195,31,232,31,112,31,164,31,215,31,247,31,247,30,183,31,174,31,70,31,248,31,23,31,196,31,103,31,38,31,38,30,152,31,135,31,135,30,107,31,228,31,40,31,8,31,8,30,3,31,3,30,75,31,83,31,168,31,168,30,20,31,20,30,20,29,192,31,253,31,86,31,3,31,103,31,35,31,173,31,136,31,16,31,169,31,133,31,143,31,158,31,111,31,30,31,174,31,127,31,78,31,55,31,55,30,225,31,255,31,200,31,32,31,44,31,44,30,164,31,83,31,83,30,47,31,152,31,225,31,139,31,128,31,128,30,152,31,109,31,109,30,239,31,115,31,115,30,115,29,178,31,251,31,129,31,129,30,173,31,173,30,243,31,243,30,249,31,49,31,176,31,213,31,213,30,121,31,121,30,121,29,121,28,167,31,121,31,121,31,253,31,15,31,74,31,12,31,93,31,23,31,53,31,99,31,229,31,229,30,229,29,108,31,92,31,92,30,226,31,96,31,237,31,61,31,76,31,142,31,142,30,227,31,109,31,109,30,66,31,19,31,211,31,251,31,175,31,175,30,165,31,219,31,83,31,83,30,83,29,6,31,48,31,48,30,169,31,246,31,246,30,31,31,53,31,202,31,208,31,201,31,221,31,168,31,36,31,188,31,87,31,203,31,8,31,199,31,177,31,177,30,254,31,129,31,102,31,102,30,170,31,170,30,220,31,104,31,233,31,13,31,178,31,159,31,26,31,185,31,2,31,168,31,248,31,175,31,175,30,6,31,86,31,104,31,104,30,42,31,222,31,213,31,213,30,146,31,202,31,202,30,197,31,43,31,182,31,29,31,177,31,37,31,227,31,171,31,238,31,238,31,23,31,129,31,220,31,177,31,143,31,55,31,201,31,125,31,70,31,70,30,70,29,82,31,83,31,101,31,101,30,101,29,250,31,54,31,106,31,58,31,164,31,52,31,246,31,54,31,193,31,78,31,248,31,254,31,226,31,239,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
