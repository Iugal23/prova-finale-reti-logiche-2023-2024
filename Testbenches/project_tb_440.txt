-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 682;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (9,0,140,0,135,0,17,0,21,0,0,0,49,0,95,0,152,0,61,0,137,0,9,0,127,0,84,0,7,0,248,0,0,0,138,0,58,0,99,0,207,0,127,0,214,0,72,0,0,0,161,0,193,0,208,0,227,0,0,0,35,0,161,0,92,0,200,0,0,0,167,0,0,0,133,0,30,0,0,0,0,0,191,0,190,0,51,0,184,0,61,0,81,0,87,0,119,0,0,0,21,0,114,0,0,0,105,0,82,0,181,0,39,0,218,0,0,0,103,0,66,0,86,0,150,0,55,0,20,0,130,0,39,0,0,0,0,0,88,0,0,0,253,0,251,0,0,0,246,0,0,0,1,0,60,0,202,0,187,0,74,0,158,0,163,0,0,0,0,0,0,0,164,0,0,0,185,0,242,0,0,0,154,0,228,0,0,0,50,0,21,0,0,0,202,0,201,0,5,0,184,0,57,0,0,0,25,0,0,0,157,0,234,0,33,0,0,0,0,0,17,0,0,0,157,0,24,0,100,0,49,0,231,0,132,0,253,0,94,0,249,0,240,0,0,0,143,0,0,0,4,0,0,0,47,0,46,0,127,0,245,0,248,0,0,0,160,0,207,0,77,0,85,0,243,0,105,0,0,0,92,0,0,0,101,0,127,0,0,0,191,0,43,0,98,0,166,0,91,0,0,0,235,0,183,0,5,0,165,0,0,0,217,0,115,0,205,0,122,0,135,0,93,0,98,0,15,0,144,0,35,0,212,0,35,0,0,0,39,0,17,0,85,0,199,0,255,0,0,0,115,0,100,0,0,0,0,0,60,0,0,0,68,0,0,0,67,0,39,0,100,0,52,0,114,0,201,0,243,0,216,0,183,0,53,0,248,0,218,0,117,0,246,0,221,0,195,0,249,0,168,0,230,0,18,0,233,0,189,0,0,0,66,0,0,0,133,0,193,0,39,0,136,0,241,0,0,0,252,0,52,0,163,0,210,0,77,0,119,0,37,0,130,0,213,0,115,0,110,0,247,0,156,0,224,0,41,0,208,0,202,0,73,0,0,0,87,0,242,0,7,0,74,0,183,0,110,0,242,0,221,0,64,0,16,0,83,0,69,0,250,0,30,0,0,0,171,0,46,0,82,0,141,0,0,0,0,0,229,0,163,0,0,0,36,0,252,0,0,0,113,0,0,0,54,0,205,0,54,0,0,0,0,0,115,0,27,0,0,0,196,0,82,0,0,0,240,0,0,0,115,0,29,0,101,0,69,0,126,0,62,0,232,0,132,0,97,0,52,0,15,0,0,0,9,0,95,0,213,0,219,0,0,0,214,0,1,0,138,0,1,0,165,0,58,0,217,0,149,0,0,0,201,0,136,0,206,0,251,0,132,0,0,0,246,0,89,0,0,0,222,0,0,0,40,0,183,0,221,0,138,0,0,0,230,0,167,0,19,0,1,0,50,0,12,0,184,0,88,0,31,0,147,0,250,0,0,0,149,0,0,0,160,0,4,0,55,0,15,0,106,0,177,0,108,0,18,0,0,0,0,0,85,0,0,0,248,0,194,0,91,0,76,0,151,0,143,0,0,0,73,0,0,0,87,0,106,0,55,0,111,0,208,0,170,0,144,0,214,0,30,0,51,0,139,0,151,0,159,0,147,0,32,0,0,0,48,0,0,0,0,0,251,0,218,0,0,0,0,0,92,0,115,0,136,0,0,0,189,0,54,0,15,0,200,0,201,0,0,0,37,0,160,0,236,0,104,0,113,0,0,0,167,0,184,0,253,0,244,0,109,0,9,0,0,0,181,0,135,0,146,0,2,0,187,0,0,0,52,0,82,0,140,0,47,0,124,0,99,0,185,0,23,0,249,0,192,0,0,0,0,0,0,0,253,0,0,0,142,0,110,0,13,0,0,0,69,0,205,0,0,0,0,0,80,0,8,0,0,0,0,0,172,0,7,0,9,0,57,0,138,0,0,0,49,0,185,0,75,0,244,0,50,0,93,0,0,0,219,0,0,0,125,0,88,0,131,0,0,0,33,0,0,0,107,0,161,0,0,0,201,0,0,0,138,0,18,0,12,0,162,0,0,0,71,0,72,0,97,0,168,0,203,0,200,0,111,0,13,0,149,0,212,0,145,0,75,0,85,0,0,0,183,0,221,0,29,0,70,0,4,0,0,0,223,0,127,0,181,0,0,0,156,0,146,0,0,0,75,0,168,0,55,0,133,0,0,0,226,0,0,0,0,0,90,0,0,0,174,0,1,0,18,0,23,0,144,0,0,0,205,0,0,0,250,0,99,0,0,0,0,0,58,0,0,0,214,0,250,0,97,0,147,0,79,0,208,0,187,0,158,0,0,0,111,0,0,0,200,0,77,0,58,0,9,0,103,0,0,0,0,0,144,0,162,0,92,0,9,0,0,0,215,0,78,0,190,0,182,0,85,0,171,0,153,0,242,0,238,0,199,0,83,0,250,0,30,0,9,0,0,0,73,0,67,0,0,0,0,0,116,0,80,0,130,0,205,0,31,0,224,0,57,0,39,0,150,0,102,0,210,0,0,0,224,0,145,0,197,0,0,0,238,0,161,0,51,0,0,0,92,0,225,0,186,0,245,0,39,0,248,0,234,0,239,0,97,0,0,0,120,0,34,0,152,0,181,0,0,0,193,0,29,0,0,0,193,0,0,0,19,0,79,0,0,0,150,0,148,0,0,0,66,0,223,0,0,0,65,0,225,0,251,0,53,0,173,0,87,0,160,0,53,0,183,0,85,0,0,0,241,0,114,0,178,0,0,0,78,0,222,0,10,0,45,0,144,0,255,0,231,0,170,0,110,0,16,0,7,0,0,0,211,0,174,0,217,0,47,0,0,0,0,0,242,0,18,0,233,0,211,0,108,0,57,0,70,0,82,0,248,0,48,0,173,0,101,0,42,0,245,0,109,0,167,0,143,0,2,0,253,0,31,0,125,0,0,0,124,0,182,0,165,0,222,0,179,0,44,0,133,0,172,0,101,0,42,0,8,0,111,0,0,0,20,0,168,0,39,0,76,0,18,0,0,0,203,0,243,0,207,0,137,0);
signal scenario_full  : scenario_type := (9,31,140,31,135,31,17,31,21,31,21,30,49,31,95,31,152,31,61,31,137,31,9,31,127,31,84,31,7,31,248,31,248,30,138,31,58,31,99,31,207,31,127,31,214,31,72,31,72,30,161,31,193,31,208,31,227,31,227,30,35,31,161,31,92,31,200,31,200,30,167,31,167,30,133,31,30,31,30,30,30,29,191,31,190,31,51,31,184,31,61,31,81,31,87,31,119,31,119,30,21,31,114,31,114,30,105,31,82,31,181,31,39,31,218,31,218,30,103,31,66,31,86,31,150,31,55,31,20,31,130,31,39,31,39,30,39,29,88,31,88,30,253,31,251,31,251,30,246,31,246,30,1,31,60,31,202,31,187,31,74,31,158,31,163,31,163,30,163,29,163,28,164,31,164,30,185,31,242,31,242,30,154,31,228,31,228,30,50,31,21,31,21,30,202,31,201,31,5,31,184,31,57,31,57,30,25,31,25,30,157,31,234,31,33,31,33,30,33,29,17,31,17,30,157,31,24,31,100,31,49,31,231,31,132,31,253,31,94,31,249,31,240,31,240,30,143,31,143,30,4,31,4,30,47,31,46,31,127,31,245,31,248,31,248,30,160,31,207,31,77,31,85,31,243,31,105,31,105,30,92,31,92,30,101,31,127,31,127,30,191,31,43,31,98,31,166,31,91,31,91,30,235,31,183,31,5,31,165,31,165,30,217,31,115,31,205,31,122,31,135,31,93,31,98,31,15,31,144,31,35,31,212,31,35,31,35,30,39,31,17,31,85,31,199,31,255,31,255,30,115,31,100,31,100,30,100,29,60,31,60,30,68,31,68,30,67,31,39,31,100,31,52,31,114,31,201,31,243,31,216,31,183,31,53,31,248,31,218,31,117,31,246,31,221,31,195,31,249,31,168,31,230,31,18,31,233,31,189,31,189,30,66,31,66,30,133,31,193,31,39,31,136,31,241,31,241,30,252,31,52,31,163,31,210,31,77,31,119,31,37,31,130,31,213,31,115,31,110,31,247,31,156,31,224,31,41,31,208,31,202,31,73,31,73,30,87,31,242,31,7,31,74,31,183,31,110,31,242,31,221,31,64,31,16,31,83,31,69,31,250,31,30,31,30,30,171,31,46,31,82,31,141,31,141,30,141,29,229,31,163,31,163,30,36,31,252,31,252,30,113,31,113,30,54,31,205,31,54,31,54,30,54,29,115,31,27,31,27,30,196,31,82,31,82,30,240,31,240,30,115,31,29,31,101,31,69,31,126,31,62,31,232,31,132,31,97,31,52,31,15,31,15,30,9,31,95,31,213,31,219,31,219,30,214,31,1,31,138,31,1,31,165,31,58,31,217,31,149,31,149,30,201,31,136,31,206,31,251,31,132,31,132,30,246,31,89,31,89,30,222,31,222,30,40,31,183,31,221,31,138,31,138,30,230,31,167,31,19,31,1,31,50,31,12,31,184,31,88,31,31,31,147,31,250,31,250,30,149,31,149,30,160,31,4,31,55,31,15,31,106,31,177,31,108,31,18,31,18,30,18,29,85,31,85,30,248,31,194,31,91,31,76,31,151,31,143,31,143,30,73,31,73,30,87,31,106,31,55,31,111,31,208,31,170,31,144,31,214,31,30,31,51,31,139,31,151,31,159,31,147,31,32,31,32,30,48,31,48,30,48,29,251,31,218,31,218,30,218,29,92,31,115,31,136,31,136,30,189,31,54,31,15,31,200,31,201,31,201,30,37,31,160,31,236,31,104,31,113,31,113,30,167,31,184,31,253,31,244,31,109,31,9,31,9,30,181,31,135,31,146,31,2,31,187,31,187,30,52,31,82,31,140,31,47,31,124,31,99,31,185,31,23,31,249,31,192,31,192,30,192,29,192,28,253,31,253,30,142,31,110,31,13,31,13,30,69,31,205,31,205,30,205,29,80,31,8,31,8,30,8,29,172,31,7,31,9,31,57,31,138,31,138,30,49,31,185,31,75,31,244,31,50,31,93,31,93,30,219,31,219,30,125,31,88,31,131,31,131,30,33,31,33,30,107,31,161,31,161,30,201,31,201,30,138,31,18,31,12,31,162,31,162,30,71,31,72,31,97,31,168,31,203,31,200,31,111,31,13,31,149,31,212,31,145,31,75,31,85,31,85,30,183,31,221,31,29,31,70,31,4,31,4,30,223,31,127,31,181,31,181,30,156,31,146,31,146,30,75,31,168,31,55,31,133,31,133,30,226,31,226,30,226,29,90,31,90,30,174,31,1,31,18,31,23,31,144,31,144,30,205,31,205,30,250,31,99,31,99,30,99,29,58,31,58,30,214,31,250,31,97,31,147,31,79,31,208,31,187,31,158,31,158,30,111,31,111,30,200,31,77,31,58,31,9,31,103,31,103,30,103,29,144,31,162,31,92,31,9,31,9,30,215,31,78,31,190,31,182,31,85,31,171,31,153,31,242,31,238,31,199,31,83,31,250,31,30,31,9,31,9,30,73,31,67,31,67,30,67,29,116,31,80,31,130,31,205,31,31,31,224,31,57,31,39,31,150,31,102,31,210,31,210,30,224,31,145,31,197,31,197,30,238,31,161,31,51,31,51,30,92,31,225,31,186,31,245,31,39,31,248,31,234,31,239,31,97,31,97,30,120,31,34,31,152,31,181,31,181,30,193,31,29,31,29,30,193,31,193,30,19,31,79,31,79,30,150,31,148,31,148,30,66,31,223,31,223,30,65,31,225,31,251,31,53,31,173,31,87,31,160,31,53,31,183,31,85,31,85,30,241,31,114,31,178,31,178,30,78,31,222,31,10,31,45,31,144,31,255,31,231,31,170,31,110,31,16,31,7,31,7,30,211,31,174,31,217,31,47,31,47,30,47,29,242,31,18,31,233,31,211,31,108,31,57,31,70,31,82,31,248,31,48,31,173,31,101,31,42,31,245,31,109,31,167,31,143,31,2,31,253,31,31,31,125,31,125,30,124,31,182,31,165,31,222,31,179,31,44,31,133,31,172,31,101,31,42,31,8,31,111,31,111,30,20,31,168,31,39,31,76,31,18,31,18,30,203,31,243,31,207,31,137,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
