-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 941;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (255,0,94,0,52,0,178,0,86,0,45,0,62,0,192,0,0,0,61,0,0,0,123,0,0,0,229,0,0,0,0,0,73,0,167,0,100,0,154,0,136,0,158,0,100,0,181,0,23,0,98,0,57,0,40,0,188,0,181,0,22,0,29,0,141,0,0,0,228,0,253,0,141,0,159,0,92,0,0,0,0,0,114,0,0,0,1,0,115,0,202,0,20,0,14,0,147,0,44,0,8,0,21,0,105,0,126,0,72,0,19,0,187,0,25,0,130,0,198,0,233,0,98,0,141,0,225,0,0,0,134,0,135,0,0,0,65,0,233,0,35,0,97,0,196,0,56,0,82,0,38,0,0,0,132,0,191,0,197,0,194,0,169,0,0,0,188,0,119,0,124,0,0,0,0,0,89,0,202,0,50,0,107,0,101,0,0,0,198,0,20,0,0,0,171,0,0,0,49,0,12,0,0,0,0,0,96,0,25,0,0,0,0,0,234,0,0,0,54,0,0,0,94,0,119,0,0,0,0,0,152,0,189,0,0,0,125,0,0,0,74,0,156,0,195,0,16,0,133,0,241,0,0,0,203,0,190,0,178,0,0,0,9,0,0,0,141,0,92,0,130,0,28,0,197,0,225,0,220,0,97,0,240,0,250,0,0,0,230,0,0,0,7,0,64,0,187,0,0,0,241,0,23,0,0,0,211,0,64,0,31,0,60,0,55,0,0,0,167,0,198,0,210,0,219,0,0,0,251,0,89,0,0,0,108,0,43,0,67,0,88,0,22,0,15,0,0,0,193,0,14,0,201,0,93,0,35,0,6,0,127,0,139,0,161,0,35,0,0,0,109,0,11,0,236,0,82,0,0,0,189,0,219,0,23,0,159,0,243,0,254,0,0,0,72,0,161,0,83,0,0,0,122,0,61,0,147,0,7,0,161,0,98,0,210,0,114,0,172,0,80,0,101,0,250,0,0,0,0,0,192,0,118,0,106,0,0,0,209,0,41,0,1,0,0,0,222,0,2,0,160,0,181,0,229,0,12,0,194,0,133,0,63,0,222,0,69,0,212,0,155,0,0,0,44,0,183,0,93,0,166,0,39,0,0,0,196,0,65,0,152,0,171,0,93,0,0,0,0,0,0,0,48,0,231,0,0,0,23,0,68,0,0,0,0,0,0,0,15,0,205,0,12,0,254,0,248,0,36,0,189,0,121,0,28,0,213,0,152,0,35,0,27,0,18,0,73,0,229,0,0,0,220,0,56,0,131,0,154,0,235,0,0,0,231,0,246,0,157,0,129,0,90,0,226,0,0,0,149,0,202,0,210,0,173,0,243,0,239,0,10,0,38,0,107,0,90,0,219,0,42,0,254,0,0,0,0,0,3,0,182,0,0,0,69,0,37,0,183,0,0,0,96,0,131,0,129,0,0,0,103,0,86,0,51,0,194,0,51,0,164,0,146,0,134,0,252,0,0,0,103,0,130,0,0,0,0,0,80,0,127,0,220,0,203,0,110,0,0,0,93,0,59,0,254,0,239,0,16,0,150,0,38,0,0,0,0,0,216,0,0,0,235,0,36,0,203,0,49,0,0,0,91,0,126,0,181,0,231,0,0,0,0,0,218,0,58,0,194,0,252,0,80,0,47,0,0,0,140,0,0,0,248,0,0,0,171,0,168,0,161,0,0,0,141,0,0,0,247,0,0,0,0,0,159,0,131,0,234,0,179,0,81,0,171,0,0,0,82,0,95,0,0,0,29,0,101,0,149,0,195,0,0,0,25,0,100,0,33,0,235,0,0,0,26,0,235,0,0,0,0,0,90,0,173,0,173,0,194,0,51,0,0,0,113,0,140,0,0,0,183,0,0,0,238,0,0,0,83,0,197,0,195,0,0,0,38,0,0,0,172,0,200,0,0,0,74,0,152,0,153,0,166,0,147,0,0,0,202,0,161,0,175,0,248,0,0,0,145,0,182,0,240,0,80,0,12,0,11,0,0,0,30,0,0,0,161,0,132,0,250,0,231,0,79,0,112,0,0,0,34,0,0,0,0,0,165,0,194,0,226,0,118,0,27,0,62,0,195,0,109,0,108,0,28,0,89,0,195,0,0,0,119,0,58,0,14,0,171,0,205,0,0,0,148,0,0,0,52,0,191,0,207,0,0,0,69,0,44,0,39,0,0,0,233,0,47,0,198,0,160,0,50,0,247,0,138,0,136,0,157,0,241,0,130,0,148,0,244,0,14,0,0,0,0,0,218,0,7,0,142,0,184,0,41,0,108,0,89,0,141,0,179,0,14,0,15,0,101,0,226,0,19,0,0,0,42,0,0,0,101,0,200,0,174,0,220,0,42,0,207,0,12,0,108,0,36,0,0,0,106,0,0,0,83,0,0,0,0,0,0,0,245,0,140,0,150,0,13,0,201,0,164,0,0,0,206,0,65,0,0,0,72,0,209,0,16,0,61,0,89,0,186,0,0,0,175,0,0,0,0,0,0,0,40,0,157,0,0,0,223,0,0,0,115,0,0,0,227,0,0,0,0,0,155,0,0,0,60,0,142,0,0,0,0,0,152,0,26,0,12,0,9,0,38,0,143,0,203,0,0,0,0,0,136,0,105,0,127,0,151,0,0,0,187,0,102,0,69,0,0,0,161,0,191,0,0,0,53,0,143,0,118,0,123,0,173,0,108,0,172,0,5,0,109,0,0,0,17,0,133,0,192,0,54,0,144,0,89,0,124,0,4,0,102,0,244,0,88,0,0,0,209,0,228,0,89,0,239,0,255,0,0,0,183,0,124,0,95,0,115,0,176,0,254,0,168,0,127,0,241,0,117,0,252,0,152,0,215,0,0,0,0,0,166,0,160,0,162,0,12,0,39,0,27,0,35,0,206,0,27,0,160,0,247,0,246,0,150,0,0,0,0,0,6,0,0,0,23,0,114,0,39,0,84,0,2,0,0,0,0,0,202,0,104,0,228,0,146,0,0,0,245,0,136,0,219,0,185,0,63,0,0,0,188,0,230,0,56,0,0,0,0,0,222,0,133,0,0,0,27,0,52,0,0,0,141,0,0,0,52,0,136,0,55,0,46,0,145,0,0,0,35,0,0,0,133,0,0,0,168,0,151,0,0,0,146,0,160,0,164,0,45,0,174,0,0,0,26,0,232,0,68,0,254,0,7,0,100,0,23,0,135,0,183,0,25,0,128,0,207,0,121,0,81,0,54,0,6,0,31,0,49,0,0,0,0,0,181,0,214,0,117,0,213,0,117,0,92,0,176,0,65,0,91,0,0,0,170,0,0,0,188,0,36,0,154,0,195,0,120,0,0,0,37,0,61,0,0,0,172,0,209,0,95,0,63,0,235,0,0,0,0,0,0,0,106,0,116,0,158,0,19,0,0,0,96,0,141,0,66,0,254,0,38,0,65,0,213,0,249,0,97,0,67,0,11,0,134,0,62,0,11,0,167,0,0,0,120,0,12,0,145,0,0,0,174,0,15,0,195,0,0,0,195,0,49,0,159,0,132,0,0,0,177,0,0,0,31,0,197,0,223,0,0,0,110,0,102,0,204,0,20,0,91,0,244,0,129,0,48,0,124,0,0,0,199,0,0,0,28,0,122,0,235,0,137,0,241,0,115,0,239,0,113,0,27,0,145,0,167,0,163,0,58,0,0,0,7,0,110,0,100,0,56,0,175,0,137,0,118,0,32,0,39,0,111,0,39,0,20,0,18,0,215,0,0,0,0,0,0,0,156,0,239,0,36,0,0,0,0,0,143,0,0,0,195,0,16,0,228,0,250,0,105,0,35,0,158,0,21,0,151,0,200,0,73,0,248,0,123,0,120,0,137,0,9,0,49,0,35,0,237,0,71,0,0,0,35,0,217,0,197,0,0,0,244,0,103,0,220,0,83,0,42,0,154,0,56,0,239,0,185,0,0,0,0,0,70,0,44,0,46,0,162,0,0,0,105,0,137,0,208,0,2,0,24,0,162,0,208,0,23,0,0,0,62,0,222,0,0,0,176,0,0,0,133,0,0,0,254,0,0,0,248,0,8,0,4,0,0,0,46,0,65,0,153,0,137,0,74,0,0,0,69,0,22,0,107,0,5,0,229,0,120,0,155,0,0,0,43,0,80,0,94,0,104,0,0,0,117,0,113,0,0,0,253,0,99,0,0,0,71,0,121,0,205,0,92,0,0,0,27,0,178,0,248,0,155,0,169,0,79,0,38,0,0,0,252,0,214,0);
signal scenario_full  : scenario_type := (255,31,94,31,52,31,178,31,86,31,45,31,62,31,192,31,192,30,61,31,61,30,123,31,123,30,229,31,229,30,229,29,73,31,167,31,100,31,154,31,136,31,158,31,100,31,181,31,23,31,98,31,57,31,40,31,188,31,181,31,22,31,29,31,141,31,141,30,228,31,253,31,141,31,159,31,92,31,92,30,92,29,114,31,114,30,1,31,115,31,202,31,20,31,14,31,147,31,44,31,8,31,21,31,105,31,126,31,72,31,19,31,187,31,25,31,130,31,198,31,233,31,98,31,141,31,225,31,225,30,134,31,135,31,135,30,65,31,233,31,35,31,97,31,196,31,56,31,82,31,38,31,38,30,132,31,191,31,197,31,194,31,169,31,169,30,188,31,119,31,124,31,124,30,124,29,89,31,202,31,50,31,107,31,101,31,101,30,198,31,20,31,20,30,171,31,171,30,49,31,12,31,12,30,12,29,96,31,25,31,25,30,25,29,234,31,234,30,54,31,54,30,94,31,119,31,119,30,119,29,152,31,189,31,189,30,125,31,125,30,74,31,156,31,195,31,16,31,133,31,241,31,241,30,203,31,190,31,178,31,178,30,9,31,9,30,141,31,92,31,130,31,28,31,197,31,225,31,220,31,97,31,240,31,250,31,250,30,230,31,230,30,7,31,64,31,187,31,187,30,241,31,23,31,23,30,211,31,64,31,31,31,60,31,55,31,55,30,167,31,198,31,210,31,219,31,219,30,251,31,89,31,89,30,108,31,43,31,67,31,88,31,22,31,15,31,15,30,193,31,14,31,201,31,93,31,35,31,6,31,127,31,139,31,161,31,35,31,35,30,109,31,11,31,236,31,82,31,82,30,189,31,219,31,23,31,159,31,243,31,254,31,254,30,72,31,161,31,83,31,83,30,122,31,61,31,147,31,7,31,161,31,98,31,210,31,114,31,172,31,80,31,101,31,250,31,250,30,250,29,192,31,118,31,106,31,106,30,209,31,41,31,1,31,1,30,222,31,2,31,160,31,181,31,229,31,12,31,194,31,133,31,63,31,222,31,69,31,212,31,155,31,155,30,44,31,183,31,93,31,166,31,39,31,39,30,196,31,65,31,152,31,171,31,93,31,93,30,93,29,93,28,48,31,231,31,231,30,23,31,68,31,68,30,68,29,68,28,15,31,205,31,12,31,254,31,248,31,36,31,189,31,121,31,28,31,213,31,152,31,35,31,27,31,18,31,73,31,229,31,229,30,220,31,56,31,131,31,154,31,235,31,235,30,231,31,246,31,157,31,129,31,90,31,226,31,226,30,149,31,202,31,210,31,173,31,243,31,239,31,10,31,38,31,107,31,90,31,219,31,42,31,254,31,254,30,254,29,3,31,182,31,182,30,69,31,37,31,183,31,183,30,96,31,131,31,129,31,129,30,103,31,86,31,51,31,194,31,51,31,164,31,146,31,134,31,252,31,252,30,103,31,130,31,130,30,130,29,80,31,127,31,220,31,203,31,110,31,110,30,93,31,59,31,254,31,239,31,16,31,150,31,38,31,38,30,38,29,216,31,216,30,235,31,36,31,203,31,49,31,49,30,91,31,126,31,181,31,231,31,231,30,231,29,218,31,58,31,194,31,252,31,80,31,47,31,47,30,140,31,140,30,248,31,248,30,171,31,168,31,161,31,161,30,141,31,141,30,247,31,247,30,247,29,159,31,131,31,234,31,179,31,81,31,171,31,171,30,82,31,95,31,95,30,29,31,101,31,149,31,195,31,195,30,25,31,100,31,33,31,235,31,235,30,26,31,235,31,235,30,235,29,90,31,173,31,173,31,194,31,51,31,51,30,113,31,140,31,140,30,183,31,183,30,238,31,238,30,83,31,197,31,195,31,195,30,38,31,38,30,172,31,200,31,200,30,74,31,152,31,153,31,166,31,147,31,147,30,202,31,161,31,175,31,248,31,248,30,145,31,182,31,240,31,80,31,12,31,11,31,11,30,30,31,30,30,161,31,132,31,250,31,231,31,79,31,112,31,112,30,34,31,34,30,34,29,165,31,194,31,226,31,118,31,27,31,62,31,195,31,109,31,108,31,28,31,89,31,195,31,195,30,119,31,58,31,14,31,171,31,205,31,205,30,148,31,148,30,52,31,191,31,207,31,207,30,69,31,44,31,39,31,39,30,233,31,47,31,198,31,160,31,50,31,247,31,138,31,136,31,157,31,241,31,130,31,148,31,244,31,14,31,14,30,14,29,218,31,7,31,142,31,184,31,41,31,108,31,89,31,141,31,179,31,14,31,15,31,101,31,226,31,19,31,19,30,42,31,42,30,101,31,200,31,174,31,220,31,42,31,207,31,12,31,108,31,36,31,36,30,106,31,106,30,83,31,83,30,83,29,83,28,245,31,140,31,150,31,13,31,201,31,164,31,164,30,206,31,65,31,65,30,72,31,209,31,16,31,61,31,89,31,186,31,186,30,175,31,175,30,175,29,175,28,40,31,157,31,157,30,223,31,223,30,115,31,115,30,227,31,227,30,227,29,155,31,155,30,60,31,142,31,142,30,142,29,152,31,26,31,12,31,9,31,38,31,143,31,203,31,203,30,203,29,136,31,105,31,127,31,151,31,151,30,187,31,102,31,69,31,69,30,161,31,191,31,191,30,53,31,143,31,118,31,123,31,173,31,108,31,172,31,5,31,109,31,109,30,17,31,133,31,192,31,54,31,144,31,89,31,124,31,4,31,102,31,244,31,88,31,88,30,209,31,228,31,89,31,239,31,255,31,255,30,183,31,124,31,95,31,115,31,176,31,254,31,168,31,127,31,241,31,117,31,252,31,152,31,215,31,215,30,215,29,166,31,160,31,162,31,12,31,39,31,27,31,35,31,206,31,27,31,160,31,247,31,246,31,150,31,150,30,150,29,6,31,6,30,23,31,114,31,39,31,84,31,2,31,2,30,2,29,202,31,104,31,228,31,146,31,146,30,245,31,136,31,219,31,185,31,63,31,63,30,188,31,230,31,56,31,56,30,56,29,222,31,133,31,133,30,27,31,52,31,52,30,141,31,141,30,52,31,136,31,55,31,46,31,145,31,145,30,35,31,35,30,133,31,133,30,168,31,151,31,151,30,146,31,160,31,164,31,45,31,174,31,174,30,26,31,232,31,68,31,254,31,7,31,100,31,23,31,135,31,183,31,25,31,128,31,207,31,121,31,81,31,54,31,6,31,31,31,49,31,49,30,49,29,181,31,214,31,117,31,213,31,117,31,92,31,176,31,65,31,91,31,91,30,170,31,170,30,188,31,36,31,154,31,195,31,120,31,120,30,37,31,61,31,61,30,172,31,209,31,95,31,63,31,235,31,235,30,235,29,235,28,106,31,116,31,158,31,19,31,19,30,96,31,141,31,66,31,254,31,38,31,65,31,213,31,249,31,97,31,67,31,11,31,134,31,62,31,11,31,167,31,167,30,120,31,12,31,145,31,145,30,174,31,15,31,195,31,195,30,195,31,49,31,159,31,132,31,132,30,177,31,177,30,31,31,197,31,223,31,223,30,110,31,102,31,204,31,20,31,91,31,244,31,129,31,48,31,124,31,124,30,199,31,199,30,28,31,122,31,235,31,137,31,241,31,115,31,239,31,113,31,27,31,145,31,167,31,163,31,58,31,58,30,7,31,110,31,100,31,56,31,175,31,137,31,118,31,32,31,39,31,111,31,39,31,20,31,18,31,215,31,215,30,215,29,215,28,156,31,239,31,36,31,36,30,36,29,143,31,143,30,195,31,16,31,228,31,250,31,105,31,35,31,158,31,21,31,151,31,200,31,73,31,248,31,123,31,120,31,137,31,9,31,49,31,35,31,237,31,71,31,71,30,35,31,217,31,197,31,197,30,244,31,103,31,220,31,83,31,42,31,154,31,56,31,239,31,185,31,185,30,185,29,70,31,44,31,46,31,162,31,162,30,105,31,137,31,208,31,2,31,24,31,162,31,208,31,23,31,23,30,62,31,222,31,222,30,176,31,176,30,133,31,133,30,254,31,254,30,248,31,8,31,4,31,4,30,46,31,65,31,153,31,137,31,74,31,74,30,69,31,22,31,107,31,5,31,229,31,120,31,155,31,155,30,43,31,80,31,94,31,104,31,104,30,117,31,113,31,113,30,253,31,99,31,99,30,71,31,121,31,205,31,92,31,92,30,27,31,178,31,248,31,155,31,169,31,79,31,38,31,38,30,252,31,214,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
