-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 994;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (97,0,0,0,83,0,17,0,164,0,50,0,102,0,183,0,23,0,0,0,16,0,14,0,51,0,126,0,19,0,81,0,220,0,0,0,138,0,140,0,139,0,112,0,49,0,58,0,0,0,46,0,107,0,65,0,154,0,0,0,34,0,159,0,181,0,233,0,57,0,0,0,0,0,190,0,185,0,240,0,134,0,150,0,152,0,0,0,112,0,50,0,0,0,151,0,123,0,129,0,222,0,98,0,115,0,93,0,0,0,0,0,0,0,179,0,221,0,32,0,216,0,155,0,0,0,0,0,211,0,235,0,162,0,31,0,161,0,84,0,0,0,70,0,75,0,0,0,9,0,81,0,189,0,24,0,44,0,245,0,82,0,169,0,230,0,63,0,239,0,74,0,120,0,0,0,31,0,35,0,3,0,0,0,60,0,0,0,145,0,133,0,138,0,147,0,18,0,195,0,186,0,129,0,104,0,15,0,0,0,2,0,32,0,251,0,17,0,233,0,0,0,48,0,218,0,0,0,187,0,2,0,0,0,147,0,128,0,97,0,76,0,124,0,0,0,0,0,134,0,171,0,177,0,71,0,175,0,201,0,111,0,222,0,169,0,132,0,0,0,62,0,0,0,143,0,186,0,186,0,25,0,171,0,94,0,85,0,0,0,39,0,47,0,217,0,25,0,104,0,29,0,120,0,191,0,185,0,41,0,181,0,245,0,213,0,188,0,249,0,251,0,10,0,0,0,57,0,181,0,15,0,59,0,61,0,127,0,242,0,227,0,82,0,0,0,44,0,174,0,137,0,249,0,0,0,39,0,0,0,0,0,147,0,2,0,180,0,0,0,0,0,185,0,235,0,146,0,202,0,158,0,152,0,202,0,74,0,66,0,142,0,85,0,45,0,73,0,0,0,0,0,50,0,0,0,0,0,79,0,130,0,14,0,0,0,89,0,126,0,222,0,142,0,48,0,86,0,114,0,168,0,205,0,221,0,174,0,179,0,94,0,165,0,198,0,158,0,0,0,54,0,51,0,40,0,217,0,248,0,156,0,0,0,101,0,9,0,90,0,241,0,27,0,57,0,29,0,37,0,187,0,46,0,198,0,0,0,0,0,0,0,27,0,29,0,211,0,222,0,144,0,0,0,155,0,112,0,224,0,75,0,14,0,254,0,0,0,43,0,51,0,104,0,60,0,219,0,132,0,119,0,150,0,189,0,11,0,106,0,190,0,0,0,0,0,210,0,180,0,0,0,199,0,140,0,43,0,29,0,250,0,0,0,247,0,122,0,60,0,167,0,189,0,19,0,0,0,112,0,104,0,194,0,137,0,0,0,114,0,102,0,103,0,91,0,199,0,10,0,214,0,136,0,0,0,0,0,207,0,143,0,105,0,0,0,177,0,250,0,8,0,239,0,182,0,103,0,49,0,0,0,89,0,0,0,197,0,0,0,193,0,0,0,0,0,94,0,226,0,62,0,41,0,74,0,177,0,90,0,129,0,130,0,222,0,124,0,156,0,223,0,154,0,0,0,142,0,240,0,167,0,20,0,201,0,43,0,29,0,0,0,141,0,0,0,35,0,33,0,77,0,21,0,10,0,121,0,0,0,70,0,62,0,118,0,64,0,0,0,0,0,27,0,171,0,0,0,189,0,0,0,237,0,25,0,107,0,66,0,82,0,0,0,44,0,23,0,84,0,0,0,47,0,33,0,159,0,56,0,36,0,144,0,66,0,0,0,0,0,222,0,0,0,0,0,254,0,0,0,222,0,204,0,189,0,78,0,165,0,215,0,25,0,0,0,0,0,99,0,82,0,150,0,181,0,205,0,71,0,103,0,173,0,0,0,142,0,138,0,190,0,203,0,237,0,32,0,0,0,6,0,214,0,41,0,247,0,128,0,35,0,124,0,121,0,50,0,125,0,75,0,0,0,0,0,0,0,206,0,108,0,35,0,16,0,0,0,6,0,229,0,0,0,204,0,60,0,44,0,224,0,165,0,177,0,222,0,0,0,50,0,0,0,227,0,128,0,138,0,128,0,0,0,130,0,65,0,204,0,75,0,41,0,119,0,0,0,0,0,68,0,0,0,111,0,58,0,150,0,31,0,125,0,0,0,222,0,202,0,0,0,157,0,250,0,237,0,72,0,227,0,20,0,0,0,7,0,135,0,144,0,0,0,12,0,89,0,21,0,6,0,6,0,173,0,0,0,4,0,115,0,204,0,253,0,67,0,138,0,122,0,30,0,67,0,177,0,175,0,42,0,169,0,0,0,134,0,0,0,173,0,0,0,25,0,206,0,201,0,74,0,24,0,74,0,227,0,0,0,33,0,136,0,220,0,175,0,46,0,152,0,0,0,20,0,125,0,0,0,233,0,64,0,28,0,136,0,13,0,35,0,88,0,0,0,232,0,117,0,0,0,253,0,35,0,177,0,83,0,15,0,128,0,0,0,82,0,85,0,211,0,249,0,219,0,162,0,235,0,58,0,136,0,76,0,211,0,0,0,212,0,0,0,246,0,118,0,0,0,201,0,1,0,90,0,160,0,41,0,0,0,50,0,135,0,128,0,228,0,0,0,46,0,14,0,9,0,0,0,163,0,0,0,90,0,167,0,19,0,184,0,128,0,231,0,238,0,84,0,24,0,58,0,43,0,109,0,114,0,0,0,0,0,248,0,0,0,135,0,124,0,38,0,0,0,180,0,215,0,114,0,30,0,164,0,38,0,0,0,0,0,105,0,176,0,109,0,104,0,41,0,28,0,161,0,56,0,15,0,211,0,0,0,121,0,251,0,48,0,88,0,3,0,207,0,70,0,154,0,159,0,130,0,209,0,93,0,0,0,90,0,59,0,80,0,1,0,244,0,189,0,73,0,107,0,240,0,63,0,107,0,173,0,219,0,21,0,27,0,135,0,157,0,0,0,211,0,135,0,134,0,194,0,61,0,115,0,0,0,202,0,106,0,0,0,18,0,0,0,60,0,246,0,236,0,110,0,226,0,167,0,209,0,196,0,0,0,225,0,185,0,177,0,0,0,243,0,63,0,125,0,0,0,34,0,17,0,0,0,235,0,61,0,46,0,0,0,191,0,77,0,214,0,199,0,210,0,127,0,0,0,214,0,13,0,83,0,238,0,199,0,69,0,130,0,159,0,198,0,11,0,121,0,137,0,20,0,192,0,202,0,126,0,194,0,193,0,215,0,0,0,3,0,219,0,203,0,199,0,203,0,135,0,121,0,0,0,0,0,148,0,26,0,82,0,0,0,0,0,176,0,32,0,182,0,186,0,149,0,0,0,204,0,0,0,218,0,165,0,49,0,195,0,0,0,156,0,187,0,50,0,41,0,50,0,103,0,0,0,0,0,15,0,196,0,0,0,54,0,55,0,54,0,166,0,85,0,215,0,55,0,154,0,42,0,14,0,228,0,37,0,255,0,241,0,20,0,215,0,122,0,0,0,253,0,245,0,0,0,119,0,39,0,43,0,0,0,238,0,139,0,224,0,230,0,51,0,242,0,216,0,209,0,0,0,189,0,231,0,5,0,137,0,103,0,35,0,106,0,56,0,58,0,233,0,0,0,0,0,46,0,122,0,0,0,110,0,140,0,22,0,58,0,86,0,186,0,79,0,0,0,21,0,160,0,14,0,166,0,168,0,8,0,127,0,235,0,0,0,0,0,0,0,78,0,40,0,56,0,109,0,217,0,56,0,0,0,95,0,209,0,0,0,0,0,110,0,0,0,0,0,18,0,155,0,129,0,143,0,183,0,58,0,70,0,165,0,77,0,0,0,140,0,131,0,197,0,219,0,11,0,0,0,204,0,0,0,109,0,76,0,89,0,192,0,41,0,180,0,101,0,144,0,188,0,0,0,188,0,38,0,0,0,34,0,0,0,66,0,16,0,146,0,77,0,185,0,0,0,172,0,0,0,219,0,78,0,41,0,189,0,91,0,248,0,0,0,248,0,12,0,0,0,204,0,147,0,129,0,148,0,0,0,184,0,228,0,3,0,4,0,115,0,51,0,124,0,2,0,216,0,0,0,49,0,138,0,0,0,111,0,18,0,142,0,141,0,148,0,62,0,55,0,0,0,0,0,0,0,0,0,191,0,0,0,61,0,90,0,196,0,52,0,150,0,0,0,0,0,242,0,83,0,136,0,43,0,135,0,104,0,173,0,121,0,254,0,0,0,175,0,71,0,0,0,158,0,21,0,124,0,194,0,85,0,42,0,19,0,0,0,49,0,121,0,200,0,43,0,49,0,169,0,34,0,0,0,199,0,38,0,0,0,84,0,215,0,0,0,180,0,184,0,158,0,125,0,44,0,0,0,160,0,98,0,123,0,92,0,189,0,0,0,228,0,210,0,0,0,69,0,0,0,0,0,160,0,0,0,0,0,10,0,94,0,39,0,62,0,243,0,247,0,10,0,130,0,0,0,157,0,224,0,229,0,131,0,170,0,148,0,72,0,0,0,132,0);
signal scenario_full  : scenario_type := (97,31,97,30,83,31,17,31,164,31,50,31,102,31,183,31,23,31,23,30,16,31,14,31,51,31,126,31,19,31,81,31,220,31,220,30,138,31,140,31,139,31,112,31,49,31,58,31,58,30,46,31,107,31,65,31,154,31,154,30,34,31,159,31,181,31,233,31,57,31,57,30,57,29,190,31,185,31,240,31,134,31,150,31,152,31,152,30,112,31,50,31,50,30,151,31,123,31,129,31,222,31,98,31,115,31,93,31,93,30,93,29,93,28,179,31,221,31,32,31,216,31,155,31,155,30,155,29,211,31,235,31,162,31,31,31,161,31,84,31,84,30,70,31,75,31,75,30,9,31,81,31,189,31,24,31,44,31,245,31,82,31,169,31,230,31,63,31,239,31,74,31,120,31,120,30,31,31,35,31,3,31,3,30,60,31,60,30,145,31,133,31,138,31,147,31,18,31,195,31,186,31,129,31,104,31,15,31,15,30,2,31,32,31,251,31,17,31,233,31,233,30,48,31,218,31,218,30,187,31,2,31,2,30,147,31,128,31,97,31,76,31,124,31,124,30,124,29,134,31,171,31,177,31,71,31,175,31,201,31,111,31,222,31,169,31,132,31,132,30,62,31,62,30,143,31,186,31,186,31,25,31,171,31,94,31,85,31,85,30,39,31,47,31,217,31,25,31,104,31,29,31,120,31,191,31,185,31,41,31,181,31,245,31,213,31,188,31,249,31,251,31,10,31,10,30,57,31,181,31,15,31,59,31,61,31,127,31,242,31,227,31,82,31,82,30,44,31,174,31,137,31,249,31,249,30,39,31,39,30,39,29,147,31,2,31,180,31,180,30,180,29,185,31,235,31,146,31,202,31,158,31,152,31,202,31,74,31,66,31,142,31,85,31,45,31,73,31,73,30,73,29,50,31,50,30,50,29,79,31,130,31,14,31,14,30,89,31,126,31,222,31,142,31,48,31,86,31,114,31,168,31,205,31,221,31,174,31,179,31,94,31,165,31,198,31,158,31,158,30,54,31,51,31,40,31,217,31,248,31,156,31,156,30,101,31,9,31,90,31,241,31,27,31,57,31,29,31,37,31,187,31,46,31,198,31,198,30,198,29,198,28,27,31,29,31,211,31,222,31,144,31,144,30,155,31,112,31,224,31,75,31,14,31,254,31,254,30,43,31,51,31,104,31,60,31,219,31,132,31,119,31,150,31,189,31,11,31,106,31,190,31,190,30,190,29,210,31,180,31,180,30,199,31,140,31,43,31,29,31,250,31,250,30,247,31,122,31,60,31,167,31,189,31,19,31,19,30,112,31,104,31,194,31,137,31,137,30,114,31,102,31,103,31,91,31,199,31,10,31,214,31,136,31,136,30,136,29,207,31,143,31,105,31,105,30,177,31,250,31,8,31,239,31,182,31,103,31,49,31,49,30,89,31,89,30,197,31,197,30,193,31,193,30,193,29,94,31,226,31,62,31,41,31,74,31,177,31,90,31,129,31,130,31,222,31,124,31,156,31,223,31,154,31,154,30,142,31,240,31,167,31,20,31,201,31,43,31,29,31,29,30,141,31,141,30,35,31,33,31,77,31,21,31,10,31,121,31,121,30,70,31,62,31,118,31,64,31,64,30,64,29,27,31,171,31,171,30,189,31,189,30,237,31,25,31,107,31,66,31,82,31,82,30,44,31,23,31,84,31,84,30,47,31,33,31,159,31,56,31,36,31,144,31,66,31,66,30,66,29,222,31,222,30,222,29,254,31,254,30,222,31,204,31,189,31,78,31,165,31,215,31,25,31,25,30,25,29,99,31,82,31,150,31,181,31,205,31,71,31,103,31,173,31,173,30,142,31,138,31,190,31,203,31,237,31,32,31,32,30,6,31,214,31,41,31,247,31,128,31,35,31,124,31,121,31,50,31,125,31,75,31,75,30,75,29,75,28,206,31,108,31,35,31,16,31,16,30,6,31,229,31,229,30,204,31,60,31,44,31,224,31,165,31,177,31,222,31,222,30,50,31,50,30,227,31,128,31,138,31,128,31,128,30,130,31,65,31,204,31,75,31,41,31,119,31,119,30,119,29,68,31,68,30,111,31,58,31,150,31,31,31,125,31,125,30,222,31,202,31,202,30,157,31,250,31,237,31,72,31,227,31,20,31,20,30,7,31,135,31,144,31,144,30,12,31,89,31,21,31,6,31,6,31,173,31,173,30,4,31,115,31,204,31,253,31,67,31,138,31,122,31,30,31,67,31,177,31,175,31,42,31,169,31,169,30,134,31,134,30,173,31,173,30,25,31,206,31,201,31,74,31,24,31,74,31,227,31,227,30,33,31,136,31,220,31,175,31,46,31,152,31,152,30,20,31,125,31,125,30,233,31,64,31,28,31,136,31,13,31,35,31,88,31,88,30,232,31,117,31,117,30,253,31,35,31,177,31,83,31,15,31,128,31,128,30,82,31,85,31,211,31,249,31,219,31,162,31,235,31,58,31,136,31,76,31,211,31,211,30,212,31,212,30,246,31,118,31,118,30,201,31,1,31,90,31,160,31,41,31,41,30,50,31,135,31,128,31,228,31,228,30,46,31,14,31,9,31,9,30,163,31,163,30,90,31,167,31,19,31,184,31,128,31,231,31,238,31,84,31,24,31,58,31,43,31,109,31,114,31,114,30,114,29,248,31,248,30,135,31,124,31,38,31,38,30,180,31,215,31,114,31,30,31,164,31,38,31,38,30,38,29,105,31,176,31,109,31,104,31,41,31,28,31,161,31,56,31,15,31,211,31,211,30,121,31,251,31,48,31,88,31,3,31,207,31,70,31,154,31,159,31,130,31,209,31,93,31,93,30,90,31,59,31,80,31,1,31,244,31,189,31,73,31,107,31,240,31,63,31,107,31,173,31,219,31,21,31,27,31,135,31,157,31,157,30,211,31,135,31,134,31,194,31,61,31,115,31,115,30,202,31,106,31,106,30,18,31,18,30,60,31,246,31,236,31,110,31,226,31,167,31,209,31,196,31,196,30,225,31,185,31,177,31,177,30,243,31,63,31,125,31,125,30,34,31,17,31,17,30,235,31,61,31,46,31,46,30,191,31,77,31,214,31,199,31,210,31,127,31,127,30,214,31,13,31,83,31,238,31,199,31,69,31,130,31,159,31,198,31,11,31,121,31,137,31,20,31,192,31,202,31,126,31,194,31,193,31,215,31,215,30,3,31,219,31,203,31,199,31,203,31,135,31,121,31,121,30,121,29,148,31,26,31,82,31,82,30,82,29,176,31,32,31,182,31,186,31,149,31,149,30,204,31,204,30,218,31,165,31,49,31,195,31,195,30,156,31,187,31,50,31,41,31,50,31,103,31,103,30,103,29,15,31,196,31,196,30,54,31,55,31,54,31,166,31,85,31,215,31,55,31,154,31,42,31,14,31,228,31,37,31,255,31,241,31,20,31,215,31,122,31,122,30,253,31,245,31,245,30,119,31,39,31,43,31,43,30,238,31,139,31,224,31,230,31,51,31,242,31,216,31,209,31,209,30,189,31,231,31,5,31,137,31,103,31,35,31,106,31,56,31,58,31,233,31,233,30,233,29,46,31,122,31,122,30,110,31,140,31,22,31,58,31,86,31,186,31,79,31,79,30,21,31,160,31,14,31,166,31,168,31,8,31,127,31,235,31,235,30,235,29,235,28,78,31,40,31,56,31,109,31,217,31,56,31,56,30,95,31,209,31,209,30,209,29,110,31,110,30,110,29,18,31,155,31,129,31,143,31,183,31,58,31,70,31,165,31,77,31,77,30,140,31,131,31,197,31,219,31,11,31,11,30,204,31,204,30,109,31,76,31,89,31,192,31,41,31,180,31,101,31,144,31,188,31,188,30,188,31,38,31,38,30,34,31,34,30,66,31,16,31,146,31,77,31,185,31,185,30,172,31,172,30,219,31,78,31,41,31,189,31,91,31,248,31,248,30,248,31,12,31,12,30,204,31,147,31,129,31,148,31,148,30,184,31,228,31,3,31,4,31,115,31,51,31,124,31,2,31,216,31,216,30,49,31,138,31,138,30,111,31,18,31,142,31,141,31,148,31,62,31,55,31,55,30,55,29,55,28,55,27,191,31,191,30,61,31,90,31,196,31,52,31,150,31,150,30,150,29,242,31,83,31,136,31,43,31,135,31,104,31,173,31,121,31,254,31,254,30,175,31,71,31,71,30,158,31,21,31,124,31,194,31,85,31,42,31,19,31,19,30,49,31,121,31,200,31,43,31,49,31,169,31,34,31,34,30,199,31,38,31,38,30,84,31,215,31,215,30,180,31,184,31,158,31,125,31,44,31,44,30,160,31,98,31,123,31,92,31,189,31,189,30,228,31,210,31,210,30,69,31,69,30,69,29,160,31,160,30,160,29,10,31,94,31,39,31,62,31,243,31,247,31,10,31,130,31,130,30,157,31,224,31,229,31,131,31,170,31,148,31,72,31,72,30,132,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
