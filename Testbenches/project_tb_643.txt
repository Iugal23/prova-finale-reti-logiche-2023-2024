-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 835;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (136,0,150,0,0,0,9,0,190,0,83,0,111,0,0,0,0,0,225,0,37,0,30,0,91,0,0,0,248,0,89,0,0,0,0,0,66,0,24,0,0,0,0,0,0,0,94,0,0,0,70,0,55,0,80,0,0,0,99,0,0,0,0,0,120,0,0,0,69,0,140,0,28,0,244,0,80,0,197,0,74,0,202,0,80,0,207,0,0,0,142,0,0,0,226,0,12,0,179,0,0,0,191,0,214,0,57,0,68,0,20,0,4,0,138,0,103,0,0,0,0,0,162,0,56,0,85,0,0,0,44,0,74,0,158,0,196,0,117,0,17,0,248,0,224,0,28,0,214,0,179,0,106,0,222,0,245,0,221,0,0,0,173,0,81,0,139,0,72,0,1,0,0,0,0,0,117,0,0,0,200,0,245,0,25,0,206,0,44,0,0,0,0,0,153,0,30,0,0,0,109,0,0,0,76,0,181,0,181,0,250,0,0,0,123,0,0,0,0,0,68,0,230,0,3,0,4,0,127,0,208,0,175,0,0,0,190,0,76,0,0,0,241,0,233,0,0,0,200,0,169,0,44,0,0,0,194,0,121,0,253,0,101,0,176,0,124,0,84,0,193,0,0,0,195,0,0,0,57,0,251,0,97,0,236,0,0,0,58,0,152,0,212,0,0,0,0,0,16,0,3,0,100,0,140,0,0,0,85,0,0,0,0,0,12,0,2,0,168,0,0,0,25,0,32,0,0,0,138,0,197,0,95,0,125,0,110,0,0,0,207,0,204,0,0,0,86,0,0,0,0,0,0,0,135,0,178,0,0,0,76,0,242,0,59,0,169,0,36,0,0,0,134,0,21,0,61,0,130,0,233,0,2,0,37,0,250,0,180,0,225,0,48,0,58,0,110,0,86,0,80,0,0,0,179,0,254,0,0,0,14,0,74,0,0,0,26,0,0,0,135,0,137,0,243,0,171,0,30,0,118,0,171,0,19,0,214,0,226,0,138,0,23,0,227,0,192,0,209,0,183,0,183,0,31,0,94,0,0,0,0,0,140,0,235,0,71,0,30,0,0,0,3,0,149,0,210,0,115,0,41,0,116,0,174,0,74,0,66,0,54,0,253,0,142,0,14,0,217,0,253,0,0,0,183,0,186,0,123,0,31,0,201,0,116,0,102,0,49,0,75,0,130,0,0,0,0,0,211,0,23,0,90,0,52,0,0,0,147,0,100,0,45,0,141,0,30,0,15,0,68,0,162,0,52,0,0,0,86,0,0,0,0,0,178,0,83,0,217,0,100,0,105,0,173,0,196,0,103,0,218,0,225,0,0,0,0,0,159,0,7,0,251,0,0,0,105,0,0,0,78,0,76,0,208,0,141,0,250,0,34,0,153,0,243,0,214,0,68,0,104,0,0,0,83,0,171,0,211,0,235,0,70,0,247,0,50,0,44,0,57,0,246,0,0,0,218,0,169,0,0,0,223,0,73,0,9,0,173,0,217,0,237,0,0,0,126,0,0,0,172,0,76,0,216,0,0,0,110,0,0,0,135,0,16,0,184,0,69,0,117,0,0,0,0,0,0,0,154,0,0,0,154,0,218,0,131,0,135,0,252,0,30,0,64,0,72,0,0,0,101,0,210,0,116,0,0,0,120,0,156,0,180,0,30,0,169,0,188,0,91,0,231,0,248,0,246,0,36,0,47,0,209,0,239,0,107,0,0,0,0,0,25,0,122,0,191,0,86,0,189,0,133,0,0,0,172,0,91,0,199,0,51,0,61,0,196,0,180,0,161,0,76,0,25,0,222,0,162,0,109,0,0,0,85,0,144,0,0,0,228,0,107,0,126,0,10,0,0,0,173,0,127,0,155,0,0,0,0,0,18,0,0,0,0,0,93,0,0,0,145,0,107,0,89,0,191,0,164,0,139,0,125,0,128,0,191,0,0,0,74,0,230,0,107,0,69,0,48,0,151,0,26,0,83,0,0,0,70,0,234,0,0,0,89,0,227,0,196,0,207,0,40,0,0,0,171,0,59,0,151,0,0,0,0,0,76,0,200,0,118,0,0,0,0,0,104,0,187,0,212,0,195,0,0,0,81,0,189,0,235,0,114,0,239,0,67,0,170,0,0,0,118,0,154,0,159,0,43,0,57,0,30,0,0,0,239,0,204,0,214,0,23,0,150,0,198,0,61,0,0,0,3,0,227,0,153,0,231,0,28,0,204,0,114,0,182,0,143,0,188,0,35,0,85,0,0,0,143,0,214,0,145,0,58,0,0,0,128,0,231,0,0,0,189,0,0,0,185,0,29,0,114,0,98,0,89,0,94,0,96,0,0,0,35,0,0,0,59,0,202,0,0,0,0,0,59,0,118,0,105,0,56,0,227,0,20,0,116,0,9,0,0,0,195,0,66,0,146,0,62,0,31,0,208,0,209,0,238,0,165,0,83,0,0,0,62,0,209,0,240,0,41,0,64,0,168,0,0,0,0,0,33,0,21,0,0,0,253,0,121,0,194,0,0,0,232,0,245,0,0,0,82,0,0,0,48,0,209,0,104,0,0,0,0,0,207,0,17,0,0,0,0,0,160,0,101,0,0,0,139,0,177,0,0,0,0,0,67,0,86,0,0,0,0,0,154,0,254,0,133,0,206,0,138,0,157,0,0,0,23,0,0,0,236,0,134,0,0,0,246,0,0,0,24,0,215,0,194,0,0,0,144,0,179,0,205,0,112,0,0,0,0,0,0,0,47,0,148,0,151,0,195,0,93,0,241,0,0,0,0,0,47,0,99,0,92,0,150,0,2,0,146,0,210,0,233,0,255,0,162,0,15,0,0,0,254,0,15,0,198,0,216,0,39,0,121,0,0,0,71,0,83,0,180,0,9,0,0,0,182,0,164,0,0,0,0,0,225,0,0,0,146,0,251,0,58,0,157,0,15,0,0,0,161,0,177,0,0,0,167,0,113,0,0,0,191,0,253,0,196,0,32,0,217,0,55,0,196,0,207,0,187,0,244,0,28,0,121,0,0,0,167,0,244,0,0,0,0,0,198,0,140,0,0,0,169,0,224,0,24,0,128,0,105,0,180,0,0,0,0,0,41,0,126,0,0,0,0,0,0,0,193,0,172,0,0,0,105,0,180,0,23,0,87,0,0,0,250,0,164,0,106,0,167,0,148,0,0,0,10,0,199,0,221,0,0,0,126,0,82,0,231,0,108,0,229,0,64,0,196,0,41,0,137,0,200,0,254,0,0,0,163,0,35,0,147,0,0,0,179,0,91,0,128,0,251,0,98,0,120,0,55,0,115,0,70,0,0,0,151,0,45,0,104,0,84,0,158,0,0,0,149,0,121,0,120,0,192,0,194,0,98,0,163,0,171,0,10,0,194,0,91,0,0,0,0,0,219,0,34,0,225,0,239,0,84,0,236,0,253,0,170,0,240,0,0,0,0,0,0,0,60,0,243,0,223,0,87,0,0,0,0,0,0,0,232,0,167,0,0,0,177,0,45,0,0,0,0,0,151,0,199,0,15,0,0,0,184,0,215,0,127,0,178,0,0,0,179,0,228,0,0,0,0,0,117,0,0,0,0,0,77,0,21,0,232,0,125,0,70,0,0,0,148,0,28,0,217,0,23,0,0,0,236,0,0,0,107,0,26,0,22,0,211,0,147,0,8,0,0,0,242,0,0,0,132,0,0,0,125,0,252,0,103,0,0,0,0,0,108,0,0,0,139,0,7,0,153,0,146,0,59,0,197,0,172,0,249,0);
signal scenario_full  : scenario_type := (136,31,150,31,150,30,9,31,190,31,83,31,111,31,111,30,111,29,225,31,37,31,30,31,91,31,91,30,248,31,89,31,89,30,89,29,66,31,24,31,24,30,24,29,24,28,94,31,94,30,70,31,55,31,80,31,80,30,99,31,99,30,99,29,120,31,120,30,69,31,140,31,28,31,244,31,80,31,197,31,74,31,202,31,80,31,207,31,207,30,142,31,142,30,226,31,12,31,179,31,179,30,191,31,214,31,57,31,68,31,20,31,4,31,138,31,103,31,103,30,103,29,162,31,56,31,85,31,85,30,44,31,74,31,158,31,196,31,117,31,17,31,248,31,224,31,28,31,214,31,179,31,106,31,222,31,245,31,221,31,221,30,173,31,81,31,139,31,72,31,1,31,1,30,1,29,117,31,117,30,200,31,245,31,25,31,206,31,44,31,44,30,44,29,153,31,30,31,30,30,109,31,109,30,76,31,181,31,181,31,250,31,250,30,123,31,123,30,123,29,68,31,230,31,3,31,4,31,127,31,208,31,175,31,175,30,190,31,76,31,76,30,241,31,233,31,233,30,200,31,169,31,44,31,44,30,194,31,121,31,253,31,101,31,176,31,124,31,84,31,193,31,193,30,195,31,195,30,57,31,251,31,97,31,236,31,236,30,58,31,152,31,212,31,212,30,212,29,16,31,3,31,100,31,140,31,140,30,85,31,85,30,85,29,12,31,2,31,168,31,168,30,25,31,32,31,32,30,138,31,197,31,95,31,125,31,110,31,110,30,207,31,204,31,204,30,86,31,86,30,86,29,86,28,135,31,178,31,178,30,76,31,242,31,59,31,169,31,36,31,36,30,134,31,21,31,61,31,130,31,233,31,2,31,37,31,250,31,180,31,225,31,48,31,58,31,110,31,86,31,80,31,80,30,179,31,254,31,254,30,14,31,74,31,74,30,26,31,26,30,135,31,137,31,243,31,171,31,30,31,118,31,171,31,19,31,214,31,226,31,138,31,23,31,227,31,192,31,209,31,183,31,183,31,31,31,94,31,94,30,94,29,140,31,235,31,71,31,30,31,30,30,3,31,149,31,210,31,115,31,41,31,116,31,174,31,74,31,66,31,54,31,253,31,142,31,14,31,217,31,253,31,253,30,183,31,186,31,123,31,31,31,201,31,116,31,102,31,49,31,75,31,130,31,130,30,130,29,211,31,23,31,90,31,52,31,52,30,147,31,100,31,45,31,141,31,30,31,15,31,68,31,162,31,52,31,52,30,86,31,86,30,86,29,178,31,83,31,217,31,100,31,105,31,173,31,196,31,103,31,218,31,225,31,225,30,225,29,159,31,7,31,251,31,251,30,105,31,105,30,78,31,76,31,208,31,141,31,250,31,34,31,153,31,243,31,214,31,68,31,104,31,104,30,83,31,171,31,211,31,235,31,70,31,247,31,50,31,44,31,57,31,246,31,246,30,218,31,169,31,169,30,223,31,73,31,9,31,173,31,217,31,237,31,237,30,126,31,126,30,172,31,76,31,216,31,216,30,110,31,110,30,135,31,16,31,184,31,69,31,117,31,117,30,117,29,117,28,154,31,154,30,154,31,218,31,131,31,135,31,252,31,30,31,64,31,72,31,72,30,101,31,210,31,116,31,116,30,120,31,156,31,180,31,30,31,169,31,188,31,91,31,231,31,248,31,246,31,36,31,47,31,209,31,239,31,107,31,107,30,107,29,25,31,122,31,191,31,86,31,189,31,133,31,133,30,172,31,91,31,199,31,51,31,61,31,196,31,180,31,161,31,76,31,25,31,222,31,162,31,109,31,109,30,85,31,144,31,144,30,228,31,107,31,126,31,10,31,10,30,173,31,127,31,155,31,155,30,155,29,18,31,18,30,18,29,93,31,93,30,145,31,107,31,89,31,191,31,164,31,139,31,125,31,128,31,191,31,191,30,74,31,230,31,107,31,69,31,48,31,151,31,26,31,83,31,83,30,70,31,234,31,234,30,89,31,227,31,196,31,207,31,40,31,40,30,171,31,59,31,151,31,151,30,151,29,76,31,200,31,118,31,118,30,118,29,104,31,187,31,212,31,195,31,195,30,81,31,189,31,235,31,114,31,239,31,67,31,170,31,170,30,118,31,154,31,159,31,43,31,57,31,30,31,30,30,239,31,204,31,214,31,23,31,150,31,198,31,61,31,61,30,3,31,227,31,153,31,231,31,28,31,204,31,114,31,182,31,143,31,188,31,35,31,85,31,85,30,143,31,214,31,145,31,58,31,58,30,128,31,231,31,231,30,189,31,189,30,185,31,29,31,114,31,98,31,89,31,94,31,96,31,96,30,35,31,35,30,59,31,202,31,202,30,202,29,59,31,118,31,105,31,56,31,227,31,20,31,116,31,9,31,9,30,195,31,66,31,146,31,62,31,31,31,208,31,209,31,238,31,165,31,83,31,83,30,62,31,209,31,240,31,41,31,64,31,168,31,168,30,168,29,33,31,21,31,21,30,253,31,121,31,194,31,194,30,232,31,245,31,245,30,82,31,82,30,48,31,209,31,104,31,104,30,104,29,207,31,17,31,17,30,17,29,160,31,101,31,101,30,139,31,177,31,177,30,177,29,67,31,86,31,86,30,86,29,154,31,254,31,133,31,206,31,138,31,157,31,157,30,23,31,23,30,236,31,134,31,134,30,246,31,246,30,24,31,215,31,194,31,194,30,144,31,179,31,205,31,112,31,112,30,112,29,112,28,47,31,148,31,151,31,195,31,93,31,241,31,241,30,241,29,47,31,99,31,92,31,150,31,2,31,146,31,210,31,233,31,255,31,162,31,15,31,15,30,254,31,15,31,198,31,216,31,39,31,121,31,121,30,71,31,83,31,180,31,9,31,9,30,182,31,164,31,164,30,164,29,225,31,225,30,146,31,251,31,58,31,157,31,15,31,15,30,161,31,177,31,177,30,167,31,113,31,113,30,191,31,253,31,196,31,32,31,217,31,55,31,196,31,207,31,187,31,244,31,28,31,121,31,121,30,167,31,244,31,244,30,244,29,198,31,140,31,140,30,169,31,224,31,24,31,128,31,105,31,180,31,180,30,180,29,41,31,126,31,126,30,126,29,126,28,193,31,172,31,172,30,105,31,180,31,23,31,87,31,87,30,250,31,164,31,106,31,167,31,148,31,148,30,10,31,199,31,221,31,221,30,126,31,82,31,231,31,108,31,229,31,64,31,196,31,41,31,137,31,200,31,254,31,254,30,163,31,35,31,147,31,147,30,179,31,91,31,128,31,251,31,98,31,120,31,55,31,115,31,70,31,70,30,151,31,45,31,104,31,84,31,158,31,158,30,149,31,121,31,120,31,192,31,194,31,98,31,163,31,171,31,10,31,194,31,91,31,91,30,91,29,219,31,34,31,225,31,239,31,84,31,236,31,253,31,170,31,240,31,240,30,240,29,240,28,60,31,243,31,223,31,87,31,87,30,87,29,87,28,232,31,167,31,167,30,177,31,45,31,45,30,45,29,151,31,199,31,15,31,15,30,184,31,215,31,127,31,178,31,178,30,179,31,228,31,228,30,228,29,117,31,117,30,117,29,77,31,21,31,232,31,125,31,70,31,70,30,148,31,28,31,217,31,23,31,23,30,236,31,236,30,107,31,26,31,22,31,211,31,147,31,8,31,8,30,242,31,242,30,132,31,132,30,125,31,252,31,103,31,103,30,103,29,108,31,108,30,139,31,7,31,153,31,146,31,59,31,197,31,172,31,249,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
