-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 940;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (31,0,85,0,151,0,145,0,0,0,0,0,0,0,12,0,208,0,205,0,98,0,92,0,85,0,193,0,224,0,68,0,225,0,188,0,0,0,163,0,0,0,0,0,82,0,0,0,31,0,22,0,166,0,249,0,0,0,18,0,0,0,96,0,0,0,0,0,97,0,66,0,191,0,173,0,252,0,32,0,52,0,177,0,248,0,89,0,130,0,0,0,151,0,5,0,199,0,202,0,128,0,0,0,73,0,229,0,124,0,135,0,220,0,241,0,0,0,105,0,157,0,231,0,129,0,242,0,137,0,140,0,143,0,254,0,23,0,157,0,251,0,0,0,109,0,0,0,208,0,0,0,0,0,201,0,8,0,129,0,97,0,234,0,43,0,255,0,66,0,74,0,0,0,113,0,142,0,11,0,226,0,26,0,130,0,134,0,228,0,98,0,109,0,211,0,23,0,93,0,52,0,0,0,111,0,160,0,43,0,97,0,238,0,148,0,0,0,0,0,0,0,253,0,0,0,0,0,0,0,215,0,136,0,0,0,57,0,228,0,136,0,203,0,241,0,45,0,137,0,172,0,240,0,242,0,9,0,218,0,0,0,0,0,12,0,115,0,148,0,27,0,63,0,6,0,136,0,0,0,35,0,162,0,99,0,247,0,113,0,0,0,0,0,82,0,70,0,244,0,11,0,94,0,0,0,0,0,198,0,0,0,95,0,3,0,104,0,154,0,111,0,154,0,0,0,0,0,25,0,0,0,190,0,239,0,165,0,217,0,0,0,191,0,149,0,209,0,36,0,207,0,38,0,36,0,80,0,0,0,0,0,254,0,52,0,65,0,92,0,137,0,203,0,230,0,159,0,226,0,217,0,154,0,6,0,43,0,179,0,179,0,80,0,3,0,88,0,230,0,0,0,138,0,110,0,244,0,103,0,84,0,77,0,0,0,219,0,61,0,131,0,0,0,8,0,65,0,225,0,79,0,243,0,139,0,210,0,11,0,121,0,49,0,0,0,169,0,26,0,42,0,4,0,165,0,20,0,222,0,161,0,52,0,0,0,41,0,0,0,0,0,0,0,64,0,0,0,14,0,193,0,190,0,0,0,60,0,0,0,66,0,166,0,45,0,94,0,108,0,171,0,94,0,0,0,0,0,109,0,225,0,226,0,0,0,35,0,54,0,159,0,0,0,64,0,248,0,39,0,130,0,0,0,20,0,201,0,55,0,156,0,0,0,225,0,68,0,216,0,134,0,29,0,93,0,0,0,7,0,0,0,106,0,190,0,7,0,15,0,128,0,240,0,227,0,11,0,9,0,26,0,237,0,239,0,205,0,189,0,73,0,53,0,229,0,196,0,220,0,15,0,193,0,0,0,138,0,56,0,41,0,254,0,7,0,66,0,64,0,0,0,26,0,0,0,236,0,123,0,170,0,35,0,221,0,34,0,180,0,111,0,107,0,31,0,206,0,178,0,31,0,195,0,80,0,29,0,194,0,0,0,35,0,0,0,0,0,248,0,2,0,190,0,7,0,240,0,19,0,0,0,170,0,27,0,140,0,244,0,0,0,77,0,119,0,27,0,166,0,161,0,74,0,156,0,139,0,210,0,62,0,0,0,244,0,250,0,144,0,105,0,3,0,67,0,116,0,0,0,216,0,56,0,225,0,239,0,103,0,171,0,0,0,0,0,18,0,0,0,57,0,112,0,142,0,7,0,236,0,184,0,71,0,83,0,96,0,236,0,0,0,91,0,69,0,243,0,114,0,44,0,129,0,20,0,101,0,241,0,86,0,0,0,46,0,30,0,178,0,25,0,78,0,173,0,19,0,187,0,91,0,0,0,110,0,11,0,99,0,93,0,167,0,62,0,0,0,28,0,125,0,182,0,32,0,90,0,211,0,178,0,0,0,0,0,36,0,74,0,122,0,245,0,50,0,18,0,0,0,255,0,52,0,197,0,133,0,42,0,186,0,5,0,245,0,144,0,91,0,0,0,251,0,13,0,26,0,0,0,230,0,232,0,172,0,0,0,137,0,0,0,234,0,38,0,0,0,22,0,26,0,0,0,128,0,137,0,214,0,198,0,151,0,236,0,0,0,16,0,72,0,0,0,84,0,150,0,29,0,246,0,182,0,0,0,230,0,212,0,136,0,117,0,60,0,0,0,0,0,0,0,255,0,90,0,90,0,115,0,0,0,0,0,251,0,171,0,66,0,111,0,163,0,116,0,0,0,239,0,90,0,32,0,121,0,16,0,240,0,81,0,96,0,74,0,213,0,30,0,61,0,0,0,254,0,0,0,0,0,187,0,93,0,159,0,110,0,0,0,0,0,209,0,164,0,214,0,14,0,0,0,89,0,92,0,0,0,79,0,120,0,0,0,0,0,200,0,125,0,0,0,214,0,255,0,8,0,67,0,22,0,0,0,234,0,38,0,146,0,155,0,0,0,2,0,112,0,0,0,197,0,0,0,8,0,69,0,1,0,57,0,119,0,206,0,40,0,0,0,231,0,246,0,184,0,107,0,173,0,99,0,0,0,16,0,164,0,132,0,113,0,189,0,226,0,217,0,242,0,48,0,220,0,0,0,0,0,16,0,0,0,0,0,41,0,130,0,0,0,215,0,121,0,117,0,222,0,236,0,54,0,129,0,0,0,113,0,198,0,0,0,41,0,0,0,10,0,196,0,59,0,0,0,74,0,28,0,73,0,47,0,47,0,0,0,255,0,16,0,0,0,228,0,131,0,103,0,0,0,229,0,222,0,0,0,0,0,254,0,24,0,180,0,0,0,0,0,20,0,52,0,0,0,174,0,179,0,0,0,232,0,161,0,224,0,130,0,52,0,0,0,24,0,163,0,204,0,108,0,208,0,33,0,113,0,0,0,47,0,61,0,0,0,39,0,174,0,28,0,148,0,169,0,45,0,208,0,103,0,0,0,105,0,35,0,0,0,118,0,77,0,0,0,62,0,35,0,82,0,48,0,99,0,51,0,218,0,0,0,42,0,233,0,0,0,47,0,31,0,0,0,39,0,0,0,161,0,9,0,66,0,34,0,0,0,70,0,203,0,97,0,98,0,84,0,233,0,130,0,43,0,74,0,119,0,173,0,229,0,0,0,170,0,226,0,226,0,30,0,234,0,0,0,80,0,163,0,40,0,36,0,0,0,173,0,0,0,36,0,212,0,94,0,0,0,174,0,215,0,0,0,0,0,0,0,4,0,7,0,136,0,60,0,11,0,244,0,82,0,38,0,102,0,185,0,132,0,88,0,240,0,173,0,68,0,103,0,0,0,0,0,9,0,232,0,117,0,161,0,166,0,29,0,238,0,191,0,190,0,95,0,175,0,209,0,47,0,101,0,0,0,0,0,231,0,216,0,38,0,224,0,175,0,2,0,145,0,55,0,130,0,64,0,0,0,24,0,52,0,154,0,100,0,255,0,195,0,157,0,24,0,0,0,220,0,230,0,141,0,71,0,99,0,129,0,0,0,56,0,84,0,0,0,248,0,0,0,224,0,150,0,0,0,120,0,96,0,17,0,104,0,106,0,58,0,43,0,0,0,64,0,74,0,106,0,160,0,30,0,209,0,248,0,0,0,25,0,121,0,104,0,44,0,244,0,0,0,179,0,0,0,97,0,66,0,0,0,120,0,0,0,116,0,170,0,143,0,75,0,91,0,0,0,211,0,181,0,227,0,18,0,179,0,0,0,164,0,23,0,0,0,75,0,143,0,69,0,0,0,16,0,214,0,20,0,179,0,202,0,0,0,0,0,179,0,129,0,62,0,197,0,132,0,0,0,36,0,0,0,111,0,95,0,7,0,103,0,120,0,0,0,155,0,0,0,35,0,155,0,64,0,0,0,2,0,189,0,66,0,169,0,120,0,148,0,24,0,90,0,192,0,0,0,86,0,33,0,7,0,212,0,211,0,22,0,46,0,161,0,145,0,57,0,0,0,133,0,184,0,129,0,0,0,119,0,161,0,150,0,138,0,127,0,0,0,0,0,120,0,0,0,34,0,0,0,116,0,0,0,27,0,144,0,119,0,0,0,2,0,0,0,166,0,168,0,0,0,172,0,0,0,0,0,169,0,105,0,22,0,13,0,28,0,96,0,0,0,118,0,26,0,200,0,163,0,194,0,44,0,217,0,199,0,247,0,237,0,0,0,132,0,61,0,170,0,34,0,0,0,0,0,146,0,159,0,63,0,0,0,123,0,197,0,0,0,0,0,102,0);
signal scenario_full  : scenario_type := (31,31,85,31,151,31,145,31,145,30,145,29,145,28,12,31,208,31,205,31,98,31,92,31,85,31,193,31,224,31,68,31,225,31,188,31,188,30,163,31,163,30,163,29,82,31,82,30,31,31,22,31,166,31,249,31,249,30,18,31,18,30,96,31,96,30,96,29,97,31,66,31,191,31,173,31,252,31,32,31,52,31,177,31,248,31,89,31,130,31,130,30,151,31,5,31,199,31,202,31,128,31,128,30,73,31,229,31,124,31,135,31,220,31,241,31,241,30,105,31,157,31,231,31,129,31,242,31,137,31,140,31,143,31,254,31,23,31,157,31,251,31,251,30,109,31,109,30,208,31,208,30,208,29,201,31,8,31,129,31,97,31,234,31,43,31,255,31,66,31,74,31,74,30,113,31,142,31,11,31,226,31,26,31,130,31,134,31,228,31,98,31,109,31,211,31,23,31,93,31,52,31,52,30,111,31,160,31,43,31,97,31,238,31,148,31,148,30,148,29,148,28,253,31,253,30,253,29,253,28,215,31,136,31,136,30,57,31,228,31,136,31,203,31,241,31,45,31,137,31,172,31,240,31,242,31,9,31,218,31,218,30,218,29,12,31,115,31,148,31,27,31,63,31,6,31,136,31,136,30,35,31,162,31,99,31,247,31,113,31,113,30,113,29,82,31,70,31,244,31,11,31,94,31,94,30,94,29,198,31,198,30,95,31,3,31,104,31,154,31,111,31,154,31,154,30,154,29,25,31,25,30,190,31,239,31,165,31,217,31,217,30,191,31,149,31,209,31,36,31,207,31,38,31,36,31,80,31,80,30,80,29,254,31,52,31,65,31,92,31,137,31,203,31,230,31,159,31,226,31,217,31,154,31,6,31,43,31,179,31,179,31,80,31,3,31,88,31,230,31,230,30,138,31,110,31,244,31,103,31,84,31,77,31,77,30,219,31,61,31,131,31,131,30,8,31,65,31,225,31,79,31,243,31,139,31,210,31,11,31,121,31,49,31,49,30,169,31,26,31,42,31,4,31,165,31,20,31,222,31,161,31,52,31,52,30,41,31,41,30,41,29,41,28,64,31,64,30,14,31,193,31,190,31,190,30,60,31,60,30,66,31,166,31,45,31,94,31,108,31,171,31,94,31,94,30,94,29,109,31,225,31,226,31,226,30,35,31,54,31,159,31,159,30,64,31,248,31,39,31,130,31,130,30,20,31,201,31,55,31,156,31,156,30,225,31,68,31,216,31,134,31,29,31,93,31,93,30,7,31,7,30,106,31,190,31,7,31,15,31,128,31,240,31,227,31,11,31,9,31,26,31,237,31,239,31,205,31,189,31,73,31,53,31,229,31,196,31,220,31,15,31,193,31,193,30,138,31,56,31,41,31,254,31,7,31,66,31,64,31,64,30,26,31,26,30,236,31,123,31,170,31,35,31,221,31,34,31,180,31,111,31,107,31,31,31,206,31,178,31,31,31,195,31,80,31,29,31,194,31,194,30,35,31,35,30,35,29,248,31,2,31,190,31,7,31,240,31,19,31,19,30,170,31,27,31,140,31,244,31,244,30,77,31,119,31,27,31,166,31,161,31,74,31,156,31,139,31,210,31,62,31,62,30,244,31,250,31,144,31,105,31,3,31,67,31,116,31,116,30,216,31,56,31,225,31,239,31,103,31,171,31,171,30,171,29,18,31,18,30,57,31,112,31,142,31,7,31,236,31,184,31,71,31,83,31,96,31,236,31,236,30,91,31,69,31,243,31,114,31,44,31,129,31,20,31,101,31,241,31,86,31,86,30,46,31,30,31,178,31,25,31,78,31,173,31,19,31,187,31,91,31,91,30,110,31,11,31,99,31,93,31,167,31,62,31,62,30,28,31,125,31,182,31,32,31,90,31,211,31,178,31,178,30,178,29,36,31,74,31,122,31,245,31,50,31,18,31,18,30,255,31,52,31,197,31,133,31,42,31,186,31,5,31,245,31,144,31,91,31,91,30,251,31,13,31,26,31,26,30,230,31,232,31,172,31,172,30,137,31,137,30,234,31,38,31,38,30,22,31,26,31,26,30,128,31,137,31,214,31,198,31,151,31,236,31,236,30,16,31,72,31,72,30,84,31,150,31,29,31,246,31,182,31,182,30,230,31,212,31,136,31,117,31,60,31,60,30,60,29,60,28,255,31,90,31,90,31,115,31,115,30,115,29,251,31,171,31,66,31,111,31,163,31,116,31,116,30,239,31,90,31,32,31,121,31,16,31,240,31,81,31,96,31,74,31,213,31,30,31,61,31,61,30,254,31,254,30,254,29,187,31,93,31,159,31,110,31,110,30,110,29,209,31,164,31,214,31,14,31,14,30,89,31,92,31,92,30,79,31,120,31,120,30,120,29,200,31,125,31,125,30,214,31,255,31,8,31,67,31,22,31,22,30,234,31,38,31,146,31,155,31,155,30,2,31,112,31,112,30,197,31,197,30,8,31,69,31,1,31,57,31,119,31,206,31,40,31,40,30,231,31,246,31,184,31,107,31,173,31,99,31,99,30,16,31,164,31,132,31,113,31,189,31,226,31,217,31,242,31,48,31,220,31,220,30,220,29,16,31,16,30,16,29,41,31,130,31,130,30,215,31,121,31,117,31,222,31,236,31,54,31,129,31,129,30,113,31,198,31,198,30,41,31,41,30,10,31,196,31,59,31,59,30,74,31,28,31,73,31,47,31,47,31,47,30,255,31,16,31,16,30,228,31,131,31,103,31,103,30,229,31,222,31,222,30,222,29,254,31,24,31,180,31,180,30,180,29,20,31,52,31,52,30,174,31,179,31,179,30,232,31,161,31,224,31,130,31,52,31,52,30,24,31,163,31,204,31,108,31,208,31,33,31,113,31,113,30,47,31,61,31,61,30,39,31,174,31,28,31,148,31,169,31,45,31,208,31,103,31,103,30,105,31,35,31,35,30,118,31,77,31,77,30,62,31,35,31,82,31,48,31,99,31,51,31,218,31,218,30,42,31,233,31,233,30,47,31,31,31,31,30,39,31,39,30,161,31,9,31,66,31,34,31,34,30,70,31,203,31,97,31,98,31,84,31,233,31,130,31,43,31,74,31,119,31,173,31,229,31,229,30,170,31,226,31,226,31,30,31,234,31,234,30,80,31,163,31,40,31,36,31,36,30,173,31,173,30,36,31,212,31,94,31,94,30,174,31,215,31,215,30,215,29,215,28,4,31,7,31,136,31,60,31,11,31,244,31,82,31,38,31,102,31,185,31,132,31,88,31,240,31,173,31,68,31,103,31,103,30,103,29,9,31,232,31,117,31,161,31,166,31,29,31,238,31,191,31,190,31,95,31,175,31,209,31,47,31,101,31,101,30,101,29,231,31,216,31,38,31,224,31,175,31,2,31,145,31,55,31,130,31,64,31,64,30,24,31,52,31,154,31,100,31,255,31,195,31,157,31,24,31,24,30,220,31,230,31,141,31,71,31,99,31,129,31,129,30,56,31,84,31,84,30,248,31,248,30,224,31,150,31,150,30,120,31,96,31,17,31,104,31,106,31,58,31,43,31,43,30,64,31,74,31,106,31,160,31,30,31,209,31,248,31,248,30,25,31,121,31,104,31,44,31,244,31,244,30,179,31,179,30,97,31,66,31,66,30,120,31,120,30,116,31,170,31,143,31,75,31,91,31,91,30,211,31,181,31,227,31,18,31,179,31,179,30,164,31,23,31,23,30,75,31,143,31,69,31,69,30,16,31,214,31,20,31,179,31,202,31,202,30,202,29,179,31,129,31,62,31,197,31,132,31,132,30,36,31,36,30,111,31,95,31,7,31,103,31,120,31,120,30,155,31,155,30,35,31,155,31,64,31,64,30,2,31,189,31,66,31,169,31,120,31,148,31,24,31,90,31,192,31,192,30,86,31,33,31,7,31,212,31,211,31,22,31,46,31,161,31,145,31,57,31,57,30,133,31,184,31,129,31,129,30,119,31,161,31,150,31,138,31,127,31,127,30,127,29,120,31,120,30,34,31,34,30,116,31,116,30,27,31,144,31,119,31,119,30,2,31,2,30,166,31,168,31,168,30,172,31,172,30,172,29,169,31,105,31,22,31,13,31,28,31,96,31,96,30,118,31,26,31,200,31,163,31,194,31,44,31,217,31,199,31,247,31,237,31,237,30,132,31,61,31,170,31,34,31,34,30,34,29,146,31,159,31,63,31,63,30,123,31,197,31,197,30,197,29,102,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
