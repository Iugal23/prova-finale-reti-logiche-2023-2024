-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 971;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (172,0,112,0,60,0,243,0,238,0,197,0,52,0,33,0,54,0,47,0,99,0,166,0,119,0,127,0,250,0,16,0,178,0,159,0,0,0,252,0,44,0,234,0,37,0,0,0,253,0,90,0,0,0,23,0,195,0,0,0,39,0,0,0,0,0,248,0,0,0,87,0,0,0,80,0,211,0,162,0,0,0,180,0,10,0,212,0,205,0,43,0,0,0,232,0,148,0,26,0,22,0,162,0,220,0,0,0,108,0,40,0,196,0,0,0,130,0,162,0,101,0,152,0,99,0,83,0,25,0,182,0,73,0,24,0,246,0,159,0,0,0,0,0,0,0,68,0,197,0,37,0,231,0,20,0,6,0,227,0,96,0,55,0,253,0,254,0,184,0,105,0,0,0,215,0,20,0,90,0,103,0,91,0,203,0,1,0,186,0,100,0,40,0,100,0,0,0,0,0,7,0,138,0,227,0,0,0,137,0,111,0,0,0,253,0,101,0,0,0,154,0,0,0,0,0,72,0,225,0,38,0,83,0,0,0,0,0,158,0,189,0,47,0,231,0,186,0,82,0,115,0,150,0,158,0,57,0,65,0,63,0,190,0,0,0,216,0,254,0,0,0,162,0,74,0,210,0,181,0,142,0,94,0,69,0,236,0,199,0,109,0,92,0,154,0,2,0,154,0,255,0,118,0,92,0,171,0,0,0,165,0,26,0,13,0,93,0,242,0,201,0,78,0,0,0,37,0,203,0,205,0,0,0,215,0,0,0,209,0,0,0,219,0,225,0,16,0,123,0,19,0,179,0,248,0,133,0,181,0,44,0,171,0,202,0,94,0,0,0,249,0,66,0,0,0,0,0,27,0,7,0,110,0,8,0,109,0,9,0,217,0,141,0,0,0,0,0,95,0,151,0,135,0,173,0,103,0,46,0,0,0,223,0,23,0,0,0,250,0,0,0,0,0,17,0,2,0,6,0,14,0,137,0,223,0,163,0,132,0,137,0,199,0,158,0,220,0,249,0,128,0,250,0,232,0,187,0,197,0,126,0,173,0,112,0,99,0,0,0,66,0,0,0,0,0,99,0,0,0,97,0,20,0,182,0,191,0,154,0,71,0,0,0,48,0,152,0,202,0,118,0,0,0,203,0,184,0,135,0,127,0,169,0,0,0,77,0,0,0,193,0,0,0,138,0,64,0,44,0,73,0,138,0,178,0,54,0,41,0,0,0,99,0,178,0,86,0,16,0,67,0,124,0,165,0,92,0,227,0,245,0,102,0,1,0,0,0,127,0,32,0,21,0,47,0,0,0,80,0,65,0,62,0,0,0,24,0,14,0,46,0,63,0,41,0,187,0,173,0,43,0,73,0,110,0,127,0,191,0,0,0,234,0,212,0,99,0,36,0,117,0,32,0,40,0,172,0,0,0,29,0,59,0,194,0,222,0,0,0,115,0,121,0,169,0,232,0,118,0,0,0,74,0,80,0,243,0,0,0,0,0,251,0,147,0,0,0,0,0,151,0,154,0,172,0,16,0,71,0,0,0,253,0,29,0,100,0,137,0,223,0,105,0,70,0,237,0,0,0,199,0,245,0,32,0,81,0,15,0,95,0,58,0,31,0,71,0,71,0,40,0,254,0,165,0,77,0,64,0,219,0,0,0,0,0,94,0,0,0,147,0,142,0,75,0,142,0,207,0,44,0,0,0,130,0,148,0,137,0,139,0,13,0,141,0,63,0,0,0,118,0,100,0,188,0,212,0,0,0,255,0,28,0,32,0,0,0,139,0,103,0,146,0,206,0,161,0,46,0,60,0,108,0,242,0,80,0,56,0,0,0,148,0,84,0,92,0,87,0,61,0,137,0,165,0,143,0,87,0,214,0,0,0,139,0,123,0,39,0,246,0,75,0,73,0,241,0,49,0,0,0,56,0,85,0,108,0,31,0,23,0,162,0,181,0,165,0,28,0,59,0,196,0,93,0,166,0,220,0,154,0,0,0,154,0,115,0,55,0,81,0,176,0,0,0,183,0,154,0,140,0,100,0,93,0,12,0,227,0,239,0,51,0,140,0,16,0,200,0,0,0,3,0,150,0,100,0,12,0,54,0,0,0,144,0,59,0,107,0,0,0,68,0,0,0,164,0,0,0,162,0,25,0,0,0,91,0,0,0,186,0,4,0,206,0,107,0,0,0,0,0,103,0,42,0,100,0,219,0,103,0,0,0,123,0,0,0,83,0,139,0,238,0,146,0,77,0,222,0,104,0,11,0,142,0,1,0,25,0,98,0,91,0,139,0,28,0,0,0,181,0,6,0,132,0,104,0,9,0,25,0,58,0,137,0,23,0,235,0,88,0,152,0,153,0,155,0,12,0,69,0,0,0,16,0,5,0,3,0,22,0,107,0,72,0,30,0,0,0,0,0,0,0,0,0,164,0,156,0,208,0,225,0,112,0,85,0,199,0,165,0,61,0,30,0,255,0,0,0,0,0,97,0,194,0,142,0,162,0,0,0,181,0,146,0,134,0,0,0,242,0,63,0,193,0,16,0,2,0,197,0,247,0,232,0,205,0,70,0,65,0,31,0,15,0,51,0,169,0,252,0,100,0,216,0,0,0,0,0,115,0,93,0,224,0,35,0,65,0,86,0,0,0,18,0,115,0,13,0,144,0,163,0,82,0,0,0,100,0,121,0,56,0,8,0,122,0,0,0,201,0,8,0,111,0,243,0,237,0,30,0,174,0,41,0,145,0,39,0,0,0,1,0,0,0,0,0,218,0,34,0,15,0,191,0,139,0,249,0,251,0,123,0,0,0,231,0,0,0,67,0,0,0,0,0,12,0,146,0,131,0,132,0,29,0,241,0,36,0,0,0,0,0,209,0,254,0,197,0,8,0,3,0,150,0,192,0,241,0,89,0,112,0,0,0,207,0,0,0,95,0,87,0,109,0,1,0,18,0,109,0,35,0,53,0,243,0,151,0,174,0,1,0,222,0,39,0,179,0,26,0,217,0,98,0,94,0,179,0,0,0,177,0,137,0,197,0,49,0,227,0,219,0,37,0,0,0,184,0,0,0,97,0,0,0,130,0,246,0,237,0,171,0,243,0,34,0,200,0,240,0,27,0,0,0,0,0,153,0,153,0,198,0,175,0,240,0,128,0,0,0,230,0,0,0,172,0,35,0,79,0,251,0,0,0,143,0,146,0,181,0,27,0,226,0,0,0,92,0,169,0,129,0,75,0,23,0,78,0,53,0,184,0,18,0,92,0,84,0,10,0,194,0,91,0,235,0,187,0,128,0,123,0,98,0,59,0,66,0,238,0,4,0,178,0,103,0,53,0,68,0,36,0,6,0,174,0,214,0,0,0,221,0,204,0,0,0,198,0,18,0,241,0,214,0,21,0,122,0,194,0,225,0,15,0,180,0,67,0,112,0,30,0,0,0,92,0,4,0,118,0,59,0,165,0,197,0,38,0,174,0,8,0,150,0,172,0,140,0,0,0,0,0,27,0,0,0,0,0,0,0,155,0,0,0,0,0,0,0,216,0,6,0,0,0,65,0,235,0,0,0,137,0,31,0,125,0,31,0,0,0,1,0,0,0,0,0,26,0,133,0,0,0,170,0,101,0,0,0,43,0,57,0,0,0,27,0,230,0,229,0,53,0,151,0,68,0,35,0,119,0,35,0,84,0,1,0,0,0,80,0,17,0,231,0,64,0,80,0,124,0,163,0,143,0,233,0,0,0,244,0,206,0,47,0,0,0,0,0,225,0,121,0,58,0,40,0,152,0,0,0,94,0,119,0,0,0,119,0,156,0,206,0,204,0,208,0,47,0,0,0,0,0,118,0,22,0,166,0,38,0,131,0,102,0,169,0,81,0,0,0,0,0,0,0,0,0,24,0,0,0,62,0,87,0,99,0,94,0,0,0,194,0,190,0,0,0,119,0,57,0,44,0,203,0,41,0,74,0,121,0,0,0,144,0,250,0,123,0,73,0,155,0,195,0,231,0,0,0,108,0,108,0,108,0,200,0,160,0,8,0,75,0,11,0,243,0,117,0,21,0,153,0,133,0,1,0,160,0,0,0,194,0,79,0,0,0,210,0,0,0,215,0,91,0,22,0,0,0,0,0,186,0,44,0,50,0,238,0,67,0,0,0,0,0,0,0,50,0,0,0,124,0,157,0,175,0,0,0,0,0,0,0,163,0,0,0,147,0,55,0,1,0,0,0,71,0,141,0,16,0,206,0,0,0,38,0,0,0,134,0,110,0,74,0,103,0,162,0,204,0,198,0,120,0,128,0,100,0,0,0,218,0,15,0,1,0,66,0,0,0,198,0,9,0,121,0,183,0,0,0,229,0,138,0,89,0,70,0,146,0);
signal scenario_full  : scenario_type := (172,31,112,31,60,31,243,31,238,31,197,31,52,31,33,31,54,31,47,31,99,31,166,31,119,31,127,31,250,31,16,31,178,31,159,31,159,30,252,31,44,31,234,31,37,31,37,30,253,31,90,31,90,30,23,31,195,31,195,30,39,31,39,30,39,29,248,31,248,30,87,31,87,30,80,31,211,31,162,31,162,30,180,31,10,31,212,31,205,31,43,31,43,30,232,31,148,31,26,31,22,31,162,31,220,31,220,30,108,31,40,31,196,31,196,30,130,31,162,31,101,31,152,31,99,31,83,31,25,31,182,31,73,31,24,31,246,31,159,31,159,30,159,29,159,28,68,31,197,31,37,31,231,31,20,31,6,31,227,31,96,31,55,31,253,31,254,31,184,31,105,31,105,30,215,31,20,31,90,31,103,31,91,31,203,31,1,31,186,31,100,31,40,31,100,31,100,30,100,29,7,31,138,31,227,31,227,30,137,31,111,31,111,30,253,31,101,31,101,30,154,31,154,30,154,29,72,31,225,31,38,31,83,31,83,30,83,29,158,31,189,31,47,31,231,31,186,31,82,31,115,31,150,31,158,31,57,31,65,31,63,31,190,31,190,30,216,31,254,31,254,30,162,31,74,31,210,31,181,31,142,31,94,31,69,31,236,31,199,31,109,31,92,31,154,31,2,31,154,31,255,31,118,31,92,31,171,31,171,30,165,31,26,31,13,31,93,31,242,31,201,31,78,31,78,30,37,31,203,31,205,31,205,30,215,31,215,30,209,31,209,30,219,31,225,31,16,31,123,31,19,31,179,31,248,31,133,31,181,31,44,31,171,31,202,31,94,31,94,30,249,31,66,31,66,30,66,29,27,31,7,31,110,31,8,31,109,31,9,31,217,31,141,31,141,30,141,29,95,31,151,31,135,31,173,31,103,31,46,31,46,30,223,31,23,31,23,30,250,31,250,30,250,29,17,31,2,31,6,31,14,31,137,31,223,31,163,31,132,31,137,31,199,31,158,31,220,31,249,31,128,31,250,31,232,31,187,31,197,31,126,31,173,31,112,31,99,31,99,30,66,31,66,30,66,29,99,31,99,30,97,31,20,31,182,31,191,31,154,31,71,31,71,30,48,31,152,31,202,31,118,31,118,30,203,31,184,31,135,31,127,31,169,31,169,30,77,31,77,30,193,31,193,30,138,31,64,31,44,31,73,31,138,31,178,31,54,31,41,31,41,30,99,31,178,31,86,31,16,31,67,31,124,31,165,31,92,31,227,31,245,31,102,31,1,31,1,30,127,31,32,31,21,31,47,31,47,30,80,31,65,31,62,31,62,30,24,31,14,31,46,31,63,31,41,31,187,31,173,31,43,31,73,31,110,31,127,31,191,31,191,30,234,31,212,31,99,31,36,31,117,31,32,31,40,31,172,31,172,30,29,31,59,31,194,31,222,31,222,30,115,31,121,31,169,31,232,31,118,31,118,30,74,31,80,31,243,31,243,30,243,29,251,31,147,31,147,30,147,29,151,31,154,31,172,31,16,31,71,31,71,30,253,31,29,31,100,31,137,31,223,31,105,31,70,31,237,31,237,30,199,31,245,31,32,31,81,31,15,31,95,31,58,31,31,31,71,31,71,31,40,31,254,31,165,31,77,31,64,31,219,31,219,30,219,29,94,31,94,30,147,31,142,31,75,31,142,31,207,31,44,31,44,30,130,31,148,31,137,31,139,31,13,31,141,31,63,31,63,30,118,31,100,31,188,31,212,31,212,30,255,31,28,31,32,31,32,30,139,31,103,31,146,31,206,31,161,31,46,31,60,31,108,31,242,31,80,31,56,31,56,30,148,31,84,31,92,31,87,31,61,31,137,31,165,31,143,31,87,31,214,31,214,30,139,31,123,31,39,31,246,31,75,31,73,31,241,31,49,31,49,30,56,31,85,31,108,31,31,31,23,31,162,31,181,31,165,31,28,31,59,31,196,31,93,31,166,31,220,31,154,31,154,30,154,31,115,31,55,31,81,31,176,31,176,30,183,31,154,31,140,31,100,31,93,31,12,31,227,31,239,31,51,31,140,31,16,31,200,31,200,30,3,31,150,31,100,31,12,31,54,31,54,30,144,31,59,31,107,31,107,30,68,31,68,30,164,31,164,30,162,31,25,31,25,30,91,31,91,30,186,31,4,31,206,31,107,31,107,30,107,29,103,31,42,31,100,31,219,31,103,31,103,30,123,31,123,30,83,31,139,31,238,31,146,31,77,31,222,31,104,31,11,31,142,31,1,31,25,31,98,31,91,31,139,31,28,31,28,30,181,31,6,31,132,31,104,31,9,31,25,31,58,31,137,31,23,31,235,31,88,31,152,31,153,31,155,31,12,31,69,31,69,30,16,31,5,31,3,31,22,31,107,31,72,31,30,31,30,30,30,29,30,28,30,27,164,31,156,31,208,31,225,31,112,31,85,31,199,31,165,31,61,31,30,31,255,31,255,30,255,29,97,31,194,31,142,31,162,31,162,30,181,31,146,31,134,31,134,30,242,31,63,31,193,31,16,31,2,31,197,31,247,31,232,31,205,31,70,31,65,31,31,31,15,31,51,31,169,31,252,31,100,31,216,31,216,30,216,29,115,31,93,31,224,31,35,31,65,31,86,31,86,30,18,31,115,31,13,31,144,31,163,31,82,31,82,30,100,31,121,31,56,31,8,31,122,31,122,30,201,31,8,31,111,31,243,31,237,31,30,31,174,31,41,31,145,31,39,31,39,30,1,31,1,30,1,29,218,31,34,31,15,31,191,31,139,31,249,31,251,31,123,31,123,30,231,31,231,30,67,31,67,30,67,29,12,31,146,31,131,31,132,31,29,31,241,31,36,31,36,30,36,29,209,31,254,31,197,31,8,31,3,31,150,31,192,31,241,31,89,31,112,31,112,30,207,31,207,30,95,31,87,31,109,31,1,31,18,31,109,31,35,31,53,31,243,31,151,31,174,31,1,31,222,31,39,31,179,31,26,31,217,31,98,31,94,31,179,31,179,30,177,31,137,31,197,31,49,31,227,31,219,31,37,31,37,30,184,31,184,30,97,31,97,30,130,31,246,31,237,31,171,31,243,31,34,31,200,31,240,31,27,31,27,30,27,29,153,31,153,31,198,31,175,31,240,31,128,31,128,30,230,31,230,30,172,31,35,31,79,31,251,31,251,30,143,31,146,31,181,31,27,31,226,31,226,30,92,31,169,31,129,31,75,31,23,31,78,31,53,31,184,31,18,31,92,31,84,31,10,31,194,31,91,31,235,31,187,31,128,31,123,31,98,31,59,31,66,31,238,31,4,31,178,31,103,31,53,31,68,31,36,31,6,31,174,31,214,31,214,30,221,31,204,31,204,30,198,31,18,31,241,31,214,31,21,31,122,31,194,31,225,31,15,31,180,31,67,31,112,31,30,31,30,30,92,31,4,31,118,31,59,31,165,31,197,31,38,31,174,31,8,31,150,31,172,31,140,31,140,30,140,29,27,31,27,30,27,29,27,28,155,31,155,30,155,29,155,28,216,31,6,31,6,30,65,31,235,31,235,30,137,31,31,31,125,31,31,31,31,30,1,31,1,30,1,29,26,31,133,31,133,30,170,31,101,31,101,30,43,31,57,31,57,30,27,31,230,31,229,31,53,31,151,31,68,31,35,31,119,31,35,31,84,31,1,31,1,30,80,31,17,31,231,31,64,31,80,31,124,31,163,31,143,31,233,31,233,30,244,31,206,31,47,31,47,30,47,29,225,31,121,31,58,31,40,31,152,31,152,30,94,31,119,31,119,30,119,31,156,31,206,31,204,31,208,31,47,31,47,30,47,29,118,31,22,31,166,31,38,31,131,31,102,31,169,31,81,31,81,30,81,29,81,28,81,27,24,31,24,30,62,31,87,31,99,31,94,31,94,30,194,31,190,31,190,30,119,31,57,31,44,31,203,31,41,31,74,31,121,31,121,30,144,31,250,31,123,31,73,31,155,31,195,31,231,31,231,30,108,31,108,31,108,31,200,31,160,31,8,31,75,31,11,31,243,31,117,31,21,31,153,31,133,31,1,31,160,31,160,30,194,31,79,31,79,30,210,31,210,30,215,31,91,31,22,31,22,30,22,29,186,31,44,31,50,31,238,31,67,31,67,30,67,29,67,28,50,31,50,30,124,31,157,31,175,31,175,30,175,29,175,28,163,31,163,30,147,31,55,31,1,31,1,30,71,31,141,31,16,31,206,31,206,30,38,31,38,30,134,31,110,31,74,31,103,31,162,31,204,31,198,31,120,31,128,31,100,31,100,30,218,31,15,31,1,31,66,31,66,30,198,31,9,31,121,31,183,31,183,30,229,31,138,31,89,31,70,31,146,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
