-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 522;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (10,0,0,0,0,0,244,0,0,0,151,0,0,0,250,0,162,0,214,0,253,0,27,0,0,0,225,0,41,0,123,0,42,0,112,0,56,0,141,0,220,0,172,0,167,0,78,0,231,0,101,0,0,0,205,0,7,0,156,0,16,0,0,0,252,0,91,0,44,0,0,0,0,0,129,0,203,0,165,0,154,0,17,0,0,0,62,0,6,0,141,0,79,0,87,0,0,0,74,0,86,0,160,0,25,0,0,0,150,0,197,0,69,0,228,0,0,0,133,0,0,0,11,0,129,0,55,0,220,0,200,0,0,0,0,0,0,0,29,0,0,0,207,0,135,0,111,0,23,0,85,0,72,0,30,0,26,0,113,0,95,0,15,0,210,0,201,0,0,0,4,0,163,0,2,0,0,0,151,0,146,0,59,0,252,0,108,0,158,0,143,0,0,0,180,0,43,0,144,0,24,0,153,0,191,0,148,0,54,0,194,0,72,0,103,0,192,0,0,0,131,0,124,0,189,0,163,0,125,0,0,0,172,0,125,0,64,0,175,0,0,0,111,0,0,0,144,0,19,0,0,0,97,0,85,0,44,0,162,0,180,0,0,0,0,0,115,0,188,0,0,0,182,0,199,0,0,0,178,0,14,0,17,0,17,0,159,0,231,0,25,0,0,0,13,0,193,0,87,0,0,0,183,0,200,0,123,0,151,0,154,0,67,0,98,0,64,0,0,0,171,0,87,0,0,0,96,0,84,0,0,0,0,0,90,0,99,0,123,0,156,0,144,0,11,0,220,0,121,0,0,0,67,0,19,0,136,0,187,0,168,0,158,0,1,0,112,0,0,0,163,0,212,0,141,0,209,0,117,0,33,0,173,0,0,0,0,0,154,0,166,0,47,0,107,0,0,0,6,0,246,0,0,0,233,0,223,0,232,0,232,0,0,0,0,0,193,0,201,0,179,0,99,0,0,0,0,0,199,0,207,0,119,0,172,0,71,0,250,0,0,0,10,0,0,0,0,0,176,0,0,0,179,0,0,0,253,0,182,0,55,0,252,0,24,0,36,0,107,0,62,0,176,0,172,0,46,0,182,0,0,0,249,0,241,0,105,0,199,0,250,0,103,0,134,0,9,0,0,0,171,0,27,0,255,0,163,0,148,0,134,0,69,0,114,0,129,0,179,0,171,0,214,0,77,0,130,0,61,0,55,0,154,0,60,0,12,0,0,0,164,0,135,0,107,0,20,0,0,0,63,0,226,0,0,0,22,0,0,0,99,0,113,0,251,0,239,0,210,0,160,0,0,0,0,0,127,0,107,0,0,0,178,0,231,0,171,0,0,0,98,0,111,0,156,0,116,0,16,0,50,0,138,0,188,0,46,0,178,0,99,0,0,0,69,0,181,0,0,0,5,0,239,0,242,0,0,0,7,0,76,0,2,0,135,0,220,0,179,0,0,0,48,0,0,0,56,0,183,0,56,0,197,0,254,0,0,0,100,0,89,0,0,0,212,0,145,0,0,0,240,0,94,0,41,0,5,0,0,0,65,0,63,0,165,0,0,0,90,0,0,0,0,0,185,0,0,0,48,0,0,0,23,0,251,0,72,0,82,0,0,0,139,0,0,0,58,0,0,0,0,0,112,0,153,0,166,0,234,0,7,0,0,0,218,0,120,0,180,0,239,0,151,0,54,0,101,0,80,0,135,0,221,0,0,0,245,0,121,0,49,0,222,0,0,0,211,0,0,0,12,0,24,0,0,0,0,0,99,0,25,0,0,0,74,0,0,0,221,0,47,0,19,0,0,0,55,0,76,0,142,0,15,0,36,0,194,0,208,0,43,0,99,0,0,0,0,0,0,0,112,0,134,0,207,0,20,0,12,0,255,0,73,0,61,0,179,0,178,0,0,0,191,0,143,0,190,0,34,0,52,0,10,0,43,0,0,0,145,0,174,0,141,0,6,0,0,0,0,0,8,0,124,0,187,0,99,0,132,0,22,0,151,0,158,0,153,0,51,0,70,0,211,0,205,0,103,0,231,0,82,0,145,0,10,0,50,0,189,0,213,0,0,0,216,0,110,0,0,0,157,0,84,0,157,0,137,0,34,0,21,0,0,0,0,0,179,0,176,0,0,0,36,0,71,0,0,0,0,0,206,0,254,0,96,0,210,0,215,0,237,0,250,0,0,0,208,0,158,0,86,0,0,0,60,0,129,0,0,0,0,0,0,0,75,0,255,0,29,0,33,0,116,0,167,0,11,0,63,0,90,0,0,0,150,0,129,0,11,0,45,0,0,0,151,0,0,0,14,0,231,0,187,0,98,0,0,0,0,0,138,0,252,0,44,0,62,0,28,0,37,0,0,0);
signal scenario_full  : scenario_type := (10,31,10,30,10,29,244,31,244,30,151,31,151,30,250,31,162,31,214,31,253,31,27,31,27,30,225,31,41,31,123,31,42,31,112,31,56,31,141,31,220,31,172,31,167,31,78,31,231,31,101,31,101,30,205,31,7,31,156,31,16,31,16,30,252,31,91,31,44,31,44,30,44,29,129,31,203,31,165,31,154,31,17,31,17,30,62,31,6,31,141,31,79,31,87,31,87,30,74,31,86,31,160,31,25,31,25,30,150,31,197,31,69,31,228,31,228,30,133,31,133,30,11,31,129,31,55,31,220,31,200,31,200,30,200,29,200,28,29,31,29,30,207,31,135,31,111,31,23,31,85,31,72,31,30,31,26,31,113,31,95,31,15,31,210,31,201,31,201,30,4,31,163,31,2,31,2,30,151,31,146,31,59,31,252,31,108,31,158,31,143,31,143,30,180,31,43,31,144,31,24,31,153,31,191,31,148,31,54,31,194,31,72,31,103,31,192,31,192,30,131,31,124,31,189,31,163,31,125,31,125,30,172,31,125,31,64,31,175,31,175,30,111,31,111,30,144,31,19,31,19,30,97,31,85,31,44,31,162,31,180,31,180,30,180,29,115,31,188,31,188,30,182,31,199,31,199,30,178,31,14,31,17,31,17,31,159,31,231,31,25,31,25,30,13,31,193,31,87,31,87,30,183,31,200,31,123,31,151,31,154,31,67,31,98,31,64,31,64,30,171,31,87,31,87,30,96,31,84,31,84,30,84,29,90,31,99,31,123,31,156,31,144,31,11,31,220,31,121,31,121,30,67,31,19,31,136,31,187,31,168,31,158,31,1,31,112,31,112,30,163,31,212,31,141,31,209,31,117,31,33,31,173,31,173,30,173,29,154,31,166,31,47,31,107,31,107,30,6,31,246,31,246,30,233,31,223,31,232,31,232,31,232,30,232,29,193,31,201,31,179,31,99,31,99,30,99,29,199,31,207,31,119,31,172,31,71,31,250,31,250,30,10,31,10,30,10,29,176,31,176,30,179,31,179,30,253,31,182,31,55,31,252,31,24,31,36,31,107,31,62,31,176,31,172,31,46,31,182,31,182,30,249,31,241,31,105,31,199,31,250,31,103,31,134,31,9,31,9,30,171,31,27,31,255,31,163,31,148,31,134,31,69,31,114,31,129,31,179,31,171,31,214,31,77,31,130,31,61,31,55,31,154,31,60,31,12,31,12,30,164,31,135,31,107,31,20,31,20,30,63,31,226,31,226,30,22,31,22,30,99,31,113,31,251,31,239,31,210,31,160,31,160,30,160,29,127,31,107,31,107,30,178,31,231,31,171,31,171,30,98,31,111,31,156,31,116,31,16,31,50,31,138,31,188,31,46,31,178,31,99,31,99,30,69,31,181,31,181,30,5,31,239,31,242,31,242,30,7,31,76,31,2,31,135,31,220,31,179,31,179,30,48,31,48,30,56,31,183,31,56,31,197,31,254,31,254,30,100,31,89,31,89,30,212,31,145,31,145,30,240,31,94,31,41,31,5,31,5,30,65,31,63,31,165,31,165,30,90,31,90,30,90,29,185,31,185,30,48,31,48,30,23,31,251,31,72,31,82,31,82,30,139,31,139,30,58,31,58,30,58,29,112,31,153,31,166,31,234,31,7,31,7,30,218,31,120,31,180,31,239,31,151,31,54,31,101,31,80,31,135,31,221,31,221,30,245,31,121,31,49,31,222,31,222,30,211,31,211,30,12,31,24,31,24,30,24,29,99,31,25,31,25,30,74,31,74,30,221,31,47,31,19,31,19,30,55,31,76,31,142,31,15,31,36,31,194,31,208,31,43,31,99,31,99,30,99,29,99,28,112,31,134,31,207,31,20,31,12,31,255,31,73,31,61,31,179,31,178,31,178,30,191,31,143,31,190,31,34,31,52,31,10,31,43,31,43,30,145,31,174,31,141,31,6,31,6,30,6,29,8,31,124,31,187,31,99,31,132,31,22,31,151,31,158,31,153,31,51,31,70,31,211,31,205,31,103,31,231,31,82,31,145,31,10,31,50,31,189,31,213,31,213,30,216,31,110,31,110,30,157,31,84,31,157,31,137,31,34,31,21,31,21,30,21,29,179,31,176,31,176,30,36,31,71,31,71,30,71,29,206,31,254,31,96,31,210,31,215,31,237,31,250,31,250,30,208,31,158,31,86,31,86,30,60,31,129,31,129,30,129,29,129,28,75,31,255,31,29,31,33,31,116,31,167,31,11,31,63,31,90,31,90,30,150,31,129,31,11,31,45,31,45,30,151,31,151,30,14,31,231,31,187,31,98,31,98,30,98,29,138,31,252,31,44,31,62,31,28,31,37,31,37,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
