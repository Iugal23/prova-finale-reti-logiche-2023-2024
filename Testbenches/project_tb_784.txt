-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 937;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (8,0,145,0,0,0,211,0,31,0,105,0,240,0,99,0,226,0,203,0,0,0,171,0,117,0,0,0,81,0,164,0,0,0,0,0,226,0,75,0,0,0,202,0,232,0,21,0,70,0,98,0,182,0,185,0,152,0,2,0,32,0,4,0,150,0,0,0,16,0,8,0,87,0,0,0,187,0,184,0,225,0,34,0,105,0,240,0,0,0,150,0,152,0,207,0,190,0,228,0,172,0,0,0,145,0,177,0,168,0,0,0,23,0,145,0,137,0,158,0,202,0,14,0,0,0,29,0,0,0,0,0,211,0,202,0,108,0,109,0,0,0,194,0,0,0,0,0,0,0,229,0,190,0,201,0,225,0,12,0,212,0,251,0,237,0,35,0,84,0,201,0,5,0,245,0,194,0,183,0,117,0,196,0,4,0,165,0,0,0,14,0,195,0,132,0,0,0,160,0,0,0,121,0,13,0,150,0,0,0,220,0,26,0,242,0,126,0,0,0,128,0,0,0,203,0,205,0,160,0,0,0,0,0,96,0,0,0,131,0,70,0,135,0,27,0,0,0,113,0,125,0,209,0,0,0,0,0,127,0,244,0,11,0,243,0,58,0,219,0,232,0,87,0,82,0,0,0,118,0,189,0,192,0,98,0,20,0,29,0,99,0,176,0,0,0,223,0,179,0,53,0,129,0,230,0,0,0,0,0,16,0,53,0,20,0,48,0,30,0,68,0,63,0,208,0,128,0,9,0,52,0,0,0,226,0,182,0,165,0,209,0,23,0,0,0,0,0,88,0,46,0,246,0,175,0,9,0,0,0,61,0,0,0,0,0,162,0,247,0,220,0,251,0,36,0,147,0,0,0,141,0,5,0,0,0,44,0,198,0,0,0,0,0,0,0,183,0,109,0,0,0,231,0,8,0,26,0,9,0,24,0,138,0,0,0,241,0,88,0,165,0,235,0,153,0,202,0,211,0,30,0,205,0,84,0,121,0,253,0,23,0,9,0,165,0,0,0,27,0,115,0,66,0,95,0,138,0,113,0,107,0,123,0,23,0,93,0,125,0,0,0,0,0,186,0,7,0,108,0,206,0,48,0,130,0,53,0,237,0,45,0,197,0,235,0,229,0,113,0,33,0,0,0,149,0,244,0,34,0,0,0,20,0,99,0,246,0,118,0,200,0,47,0,106,0,185,0,0,0,0,0,172,0,95,0,26,0,145,0,253,0,0,0,18,0,41,0,98,0,166,0,38,0,0,0,163,0,0,0,249,0,81,0,136,0,177,0,200,0,0,0,209,0,74,0,32,0,180,0,0,0,47,0,202,0,19,0,0,0,254,0,59,0,42,0,0,0,127,0,54,0,0,0,0,0,93,0,47,0,128,0,166,0,0,0,74,0,0,0,132,0,138,0,146,0,7,0,0,0,151,0,0,0,0,0,187,0,1,0,51,0,187,0,0,0,97,0,241,0,0,0,28,0,23,0,37,0,0,0,154,0,227,0,0,0,173,0,196,0,57,0,154,0,0,0,127,0,0,0,3,0,67,0,168,0,151,0,200,0,73,0,0,0,163,0,197,0,207,0,0,0,245,0,45,0,71,0,178,0,0,0,33,0,127,0,64,0,216,0,0,0,209,0,195,0,34,0,59,0,224,0,103,0,48,0,253,0,184,0,195,0,0,0,77,0,172,0,248,0,99,0,177,0,198,0,95,0,234,0,0,0,0,0,152,0,115,0,171,0,95,0,166,0,193,0,251,0,197,0,0,0,131,0,81,0,50,0,59,0,119,0,132,0,142,0,234,0,0,0,0,0,158,0,213,0,71,0,0,0,0,0,117,0,65,0,0,0,72,0,81,0,93,0,85,0,0,0,243,0,194,0,29,0,110,0,222,0,34,0,44,0,140,0,75,0,241,0,0,0,107,0,222,0,29,0,73,0,155,0,0,0,52,0,0,0,64,0,1,0,123,0,121,0,233,0,57,0,53,0,53,0,122,0,0,0,0,0,209,0,179,0,103,0,0,0,217,0,0,0,57,0,248,0,0,0,146,0,175,0,0,0,44,0,254,0,68,0,217,0,184,0,97,0,117,0,0,0,100,0,238,0,100,0,163,0,134,0,175,0,105,0,84,0,252,0,0,0,0,0,30,0,0,0,238,0,67,0,66,0,163,0,249,0,9,0,27,0,89,0,112,0,116,0,0,0,93,0,63,0,67,0,117,0,167,0,0,0,0,0,75,0,254,0,187,0,0,0,178,0,134,0,0,0,141,0,54,0,221,0,140,0,29,0,237,0,236,0,174,0,0,0,0,0,116,0,12,0,0,0,101,0,55,0,250,0,32,0,184,0,173,0,32,0,115,0,227,0,30,0,115,0,0,0,195,0,105,0,151,0,91,0,46,0,238,0,143,0,172,0,183,0,0,0,207,0,115,0,0,0,0,0,96,0,161,0,74,0,92,0,110,0,101,0,0,0,12,0,200,0,184,0,250,0,46,0,0,0,0,0,0,0,110,0,220,0,130,0,120,0,182,0,0,0,0,0,139,0,222,0,0,0,12,0,29,0,0,0,0,0,139,0,87,0,82,0,191,0,0,0,5,0,84,0,0,0,20,0,57,0,229,0,184,0,188,0,0,0,253,0,0,0,76,0,185,0,177,0,65,0,151,0,65,0,0,0,0,0,18,0,0,0,150,0,81,0,141,0,175,0,0,0,0,0,229,0,95,0,29,0,50,0,67,0,176,0,118,0,212,0,9,0,176,0,193,0,41,0,97,0,196,0,179,0,135,0,61,0,250,0,21,0,172,0,193,0,0,0,233,0,244,0,246,0,188,0,233,0,56,0,23,0,19,0,100,0,74,0,0,0,134,0,10,0,0,0,0,0,156,0,194,0,0,0,0,0,0,0,184,0,102,0,198,0,191,0,219,0,76,0,0,0,10,0,104,0,0,0,0,0,55,0,207,0,111,0,168,0,53,0,0,0,0,0,0,0,70,0,182,0,0,0,78,0,0,0,59,0,0,0,132,0,236,0,39,0,84,0,65,0,32,0,196,0,86,0,102,0,0,0,67,0,44,0,0,0,67,0,0,0,57,0,190,0,129,0,185,0,37,0,21,0,61,0,129,0,204,0,1,0,78,0,184,0,157,0,54,0,24,0,0,0,165,0,134,0,179,0,108,0,44,0,0,0,114,0,231,0,145,0,152,0,210,0,224,0,117,0,195,0,136,0,228,0,92,0,121,0,131,0,0,0,247,0,43,0,109,0,26,0,0,0,182,0,0,0,233,0,149,0,0,0,61,0,0,0,242,0,251,0,26,0,190,0,236,0,203,0,109,0,0,0,219,0,144,0,231,0,49,0,49,0,197,0,225,0,34,0,25,0,98,0,121,0,117,0,54,0,95,0,221,0,37,0,189,0,244,0,0,0,180,0,105,0,123,0,99,0,52,0,253,0,78,0,89,0,151,0,151,0,254,0,0,0,16,0,67,0,0,0,253,0,214,0,77,0,208,0,201,0,0,0,168,0,33,0,39,0,194,0,181,0,127,0,0,0,136,0,72,0,0,0,15,0,0,0,83,0,209,0,53,0,252,0,179,0,38,0,88,0,0,0,129,0,132,0,186,0,0,0,132,0,53,0,212,0,0,0,211,0,0,0,34,0,150,0,164,0,96,0,246,0,0,0,0,0,0,0,121,0,62,0,73,0,0,0,203,0,250,0,67,0,74,0,0,0,104,0,224,0,109,0,234,0,0,0,29,0,122,0,10,0,58,0,111,0,32,0,227,0,239,0,208,0,15,0,0,0,20,0,240,0,212,0,186,0,211,0,0,0,0,0,0,0,0,0,175,0,233,0,154,0,54,0,108,0,0,0,229,0,0,0,169,0,48,0,222,0,96,0,242,0,176,0,222,0,0,0,0,0,169,0,0,0,93,0,165,0,114,0,138,0,107,0,0,0,0,0,44,0,63,0,56,0,36,0,117,0,224,0,86,0,74,0,0,0,85,0,3,0,159,0,163,0,15,0,240,0,110,0,108,0,123,0,179,0,203,0,29,0,0,0,204,0,157,0,0,0,85,0,202,0,173,0,74,0,173,0,232,0,0,0,54,0,23,0,108,0,0,0,24,0,192,0,132,0,10,0,0,0,131,0,87,0,70,0,83,0,88,0,152,0,158,0,160,0,6,0,0,0,0,0,0,0,212,0,69,0,255,0,0,0,87,0);
signal scenario_full  : scenario_type := (8,31,145,31,145,30,211,31,31,31,105,31,240,31,99,31,226,31,203,31,203,30,171,31,117,31,117,30,81,31,164,31,164,30,164,29,226,31,75,31,75,30,202,31,232,31,21,31,70,31,98,31,182,31,185,31,152,31,2,31,32,31,4,31,150,31,150,30,16,31,8,31,87,31,87,30,187,31,184,31,225,31,34,31,105,31,240,31,240,30,150,31,152,31,207,31,190,31,228,31,172,31,172,30,145,31,177,31,168,31,168,30,23,31,145,31,137,31,158,31,202,31,14,31,14,30,29,31,29,30,29,29,211,31,202,31,108,31,109,31,109,30,194,31,194,30,194,29,194,28,229,31,190,31,201,31,225,31,12,31,212,31,251,31,237,31,35,31,84,31,201,31,5,31,245,31,194,31,183,31,117,31,196,31,4,31,165,31,165,30,14,31,195,31,132,31,132,30,160,31,160,30,121,31,13,31,150,31,150,30,220,31,26,31,242,31,126,31,126,30,128,31,128,30,203,31,205,31,160,31,160,30,160,29,96,31,96,30,131,31,70,31,135,31,27,31,27,30,113,31,125,31,209,31,209,30,209,29,127,31,244,31,11,31,243,31,58,31,219,31,232,31,87,31,82,31,82,30,118,31,189,31,192,31,98,31,20,31,29,31,99,31,176,31,176,30,223,31,179,31,53,31,129,31,230,31,230,30,230,29,16,31,53,31,20,31,48,31,30,31,68,31,63,31,208,31,128,31,9,31,52,31,52,30,226,31,182,31,165,31,209,31,23,31,23,30,23,29,88,31,46,31,246,31,175,31,9,31,9,30,61,31,61,30,61,29,162,31,247,31,220,31,251,31,36,31,147,31,147,30,141,31,5,31,5,30,44,31,198,31,198,30,198,29,198,28,183,31,109,31,109,30,231,31,8,31,26,31,9,31,24,31,138,31,138,30,241,31,88,31,165,31,235,31,153,31,202,31,211,31,30,31,205,31,84,31,121,31,253,31,23,31,9,31,165,31,165,30,27,31,115,31,66,31,95,31,138,31,113,31,107,31,123,31,23,31,93,31,125,31,125,30,125,29,186,31,7,31,108,31,206,31,48,31,130,31,53,31,237,31,45,31,197,31,235,31,229,31,113,31,33,31,33,30,149,31,244,31,34,31,34,30,20,31,99,31,246,31,118,31,200,31,47,31,106,31,185,31,185,30,185,29,172,31,95,31,26,31,145,31,253,31,253,30,18,31,41,31,98,31,166,31,38,31,38,30,163,31,163,30,249,31,81,31,136,31,177,31,200,31,200,30,209,31,74,31,32,31,180,31,180,30,47,31,202,31,19,31,19,30,254,31,59,31,42,31,42,30,127,31,54,31,54,30,54,29,93,31,47,31,128,31,166,31,166,30,74,31,74,30,132,31,138,31,146,31,7,31,7,30,151,31,151,30,151,29,187,31,1,31,51,31,187,31,187,30,97,31,241,31,241,30,28,31,23,31,37,31,37,30,154,31,227,31,227,30,173,31,196,31,57,31,154,31,154,30,127,31,127,30,3,31,67,31,168,31,151,31,200,31,73,31,73,30,163,31,197,31,207,31,207,30,245,31,45,31,71,31,178,31,178,30,33,31,127,31,64,31,216,31,216,30,209,31,195,31,34,31,59,31,224,31,103,31,48,31,253,31,184,31,195,31,195,30,77,31,172,31,248,31,99,31,177,31,198,31,95,31,234,31,234,30,234,29,152,31,115,31,171,31,95,31,166,31,193,31,251,31,197,31,197,30,131,31,81,31,50,31,59,31,119,31,132,31,142,31,234,31,234,30,234,29,158,31,213,31,71,31,71,30,71,29,117,31,65,31,65,30,72,31,81,31,93,31,85,31,85,30,243,31,194,31,29,31,110,31,222,31,34,31,44,31,140,31,75,31,241,31,241,30,107,31,222,31,29,31,73,31,155,31,155,30,52,31,52,30,64,31,1,31,123,31,121,31,233,31,57,31,53,31,53,31,122,31,122,30,122,29,209,31,179,31,103,31,103,30,217,31,217,30,57,31,248,31,248,30,146,31,175,31,175,30,44,31,254,31,68,31,217,31,184,31,97,31,117,31,117,30,100,31,238,31,100,31,163,31,134,31,175,31,105,31,84,31,252,31,252,30,252,29,30,31,30,30,238,31,67,31,66,31,163,31,249,31,9,31,27,31,89,31,112,31,116,31,116,30,93,31,63,31,67,31,117,31,167,31,167,30,167,29,75,31,254,31,187,31,187,30,178,31,134,31,134,30,141,31,54,31,221,31,140,31,29,31,237,31,236,31,174,31,174,30,174,29,116,31,12,31,12,30,101,31,55,31,250,31,32,31,184,31,173,31,32,31,115,31,227,31,30,31,115,31,115,30,195,31,105,31,151,31,91,31,46,31,238,31,143,31,172,31,183,31,183,30,207,31,115,31,115,30,115,29,96,31,161,31,74,31,92,31,110,31,101,31,101,30,12,31,200,31,184,31,250,31,46,31,46,30,46,29,46,28,110,31,220,31,130,31,120,31,182,31,182,30,182,29,139,31,222,31,222,30,12,31,29,31,29,30,29,29,139,31,87,31,82,31,191,31,191,30,5,31,84,31,84,30,20,31,57,31,229,31,184,31,188,31,188,30,253,31,253,30,76,31,185,31,177,31,65,31,151,31,65,31,65,30,65,29,18,31,18,30,150,31,81,31,141,31,175,31,175,30,175,29,229,31,95,31,29,31,50,31,67,31,176,31,118,31,212,31,9,31,176,31,193,31,41,31,97,31,196,31,179,31,135,31,61,31,250,31,21,31,172,31,193,31,193,30,233,31,244,31,246,31,188,31,233,31,56,31,23,31,19,31,100,31,74,31,74,30,134,31,10,31,10,30,10,29,156,31,194,31,194,30,194,29,194,28,184,31,102,31,198,31,191,31,219,31,76,31,76,30,10,31,104,31,104,30,104,29,55,31,207,31,111,31,168,31,53,31,53,30,53,29,53,28,70,31,182,31,182,30,78,31,78,30,59,31,59,30,132,31,236,31,39,31,84,31,65,31,32,31,196,31,86,31,102,31,102,30,67,31,44,31,44,30,67,31,67,30,57,31,190,31,129,31,185,31,37,31,21,31,61,31,129,31,204,31,1,31,78,31,184,31,157,31,54,31,24,31,24,30,165,31,134,31,179,31,108,31,44,31,44,30,114,31,231,31,145,31,152,31,210,31,224,31,117,31,195,31,136,31,228,31,92,31,121,31,131,31,131,30,247,31,43,31,109,31,26,31,26,30,182,31,182,30,233,31,149,31,149,30,61,31,61,30,242,31,251,31,26,31,190,31,236,31,203,31,109,31,109,30,219,31,144,31,231,31,49,31,49,31,197,31,225,31,34,31,25,31,98,31,121,31,117,31,54,31,95,31,221,31,37,31,189,31,244,31,244,30,180,31,105,31,123,31,99,31,52,31,253,31,78,31,89,31,151,31,151,31,254,31,254,30,16,31,67,31,67,30,253,31,214,31,77,31,208,31,201,31,201,30,168,31,33,31,39,31,194,31,181,31,127,31,127,30,136,31,72,31,72,30,15,31,15,30,83,31,209,31,53,31,252,31,179,31,38,31,88,31,88,30,129,31,132,31,186,31,186,30,132,31,53,31,212,31,212,30,211,31,211,30,34,31,150,31,164,31,96,31,246,31,246,30,246,29,246,28,121,31,62,31,73,31,73,30,203,31,250,31,67,31,74,31,74,30,104,31,224,31,109,31,234,31,234,30,29,31,122,31,10,31,58,31,111,31,32,31,227,31,239,31,208,31,15,31,15,30,20,31,240,31,212,31,186,31,211,31,211,30,211,29,211,28,211,27,175,31,233,31,154,31,54,31,108,31,108,30,229,31,229,30,169,31,48,31,222,31,96,31,242,31,176,31,222,31,222,30,222,29,169,31,169,30,93,31,165,31,114,31,138,31,107,31,107,30,107,29,44,31,63,31,56,31,36,31,117,31,224,31,86,31,74,31,74,30,85,31,3,31,159,31,163,31,15,31,240,31,110,31,108,31,123,31,179,31,203,31,29,31,29,30,204,31,157,31,157,30,85,31,202,31,173,31,74,31,173,31,232,31,232,30,54,31,23,31,108,31,108,30,24,31,192,31,132,31,10,31,10,30,131,31,87,31,70,31,83,31,88,31,152,31,158,31,160,31,6,31,6,30,6,29,6,28,212,31,69,31,255,31,255,30,87,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
