-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 638;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (8,0,178,0,32,0,46,0,0,0,84,0,187,0,201,0,98,0,142,0,108,0,106,0,17,0,84,0,51,0,70,0,192,0,81,0,243,0,174,0,0,0,176,0,128,0,77,0,179,0,250,0,0,0,0,0,159,0,137,0,0,0,20,0,0,0,81,0,154,0,47,0,56,0,0,0,184,0,0,0,230,0,115,0,150,0,199,0,7,0,197,0,0,0,0,0,169,0,4,0,0,0,0,0,105,0,0,0,0,0,41,0,213,0,227,0,148,0,65,0,152,0,173,0,127,0,0,0,82,0,129,0,0,0,202,0,125,0,236,0,19,0,0,0,108,0,122,0,48,0,82,0,0,0,14,0,78,0,0,0,32,0,227,0,126,0,212,0,0,0,0,0,0,0,49,0,21,0,224,0,153,0,168,0,152,0,59,0,0,0,0,0,8,0,188,0,24,0,23,0,98,0,122,0,214,0,252,0,109,0,0,0,0,0,117,0,61,0,216,0,181,0,53,0,210,0,0,0,104,0,119,0,0,0,222,0,4,0,51,0,173,0,0,0,143,0,242,0,38,0,188,0,149,0,0,0,0,0,136,0,21,0,0,0,24,0,62,0,37,0,163,0,162,0,184,0,33,0,248,0,64,0,0,0,66,0,100,0,248,0,61,0,8,0,210,0,247,0,0,0,131,0,198,0,217,0,80,0,52,0,212,0,0,0,233,0,211,0,138,0,134,0,161,0,89,0,132,0,152,0,161,0,97,0,115,0,153,0,72,0,254,0,53,0,101,0,0,0,103,0,0,0,19,0,114,0,198,0,143,0,56,0,0,0,0,0,105,0,94,0,0,0,45,0,55,0,173,0,0,0,89,0,6,0,7,0,113,0,131,0,114,0,43,0,95,0,0,0,0,0,223,0,91,0,150,0,155,0,28,0,71,0,0,0,204,0,0,0,160,0,136,0,180,0,94,0,47,0,9,0,114,0,61,0,0,0,152,0,63,0,174,0,52,0,81,0,197,0,19,0,129,0,66,0,187,0,0,0,163,0,147,0,133,0,210,0,224,0,11,0,0,0,0,0,103,0,99,0,23,0,0,0,0,0,48,0,245,0,194,0,169,0,0,0,174,0,150,0,54,0,33,0,19,0,48,0,231,0,0,0,78,0,189,0,201,0,137,0,0,0,45,0,190,0,0,0,222,0,17,0,140,0,41,0,226,0,52,0,0,0,103,0,253,0,112,0,45,0,144,0,109,0,242,0,41,0,160,0,138,0,134,0,136,0,94,0,27,0,50,0,144,0,185,0,0,0,129,0,255,0,249,0,174,0,48,0,77,0,185,0,0,0,152,0,4,0,49,0,226,0,138,0,134,0,197,0,233,0,37,0,238,0,100,0,230,0,246,0,0,0,32,0,248,0,220,0,204,0,0,0,198,0,98,0,27,0,250,0,0,0,41,0,183,0,0,0,54,0,154,0,170,0,0,0,202,0,0,0,0,0,234,0,0,0,156,0,74,0,197,0,246,0,0,0,241,0,102,0,94,0,0,0,0,0,2,0,247,0,94,0,16,0,0,0,25,0,72,0,0,0,250,0,0,0,48,0,188,0,113,0,134,0,103,0,16,0,41,0,110,0,252,0,134,0,181,0,247,0,68,0,4,0,80,0,15,0,218,0,98,0,212,0,86,0,177,0,75,0,20,0,186,0,67,0,89,0,0,0,150,0,0,0,138,0,176,0,0,0,0,0,185,0,65,0,52,0,90,0,128,0,29,0,0,0,0,0,80,0,120,0,249,0,0,0,195,0,141,0,76,0,0,0,0,0,87,0,248,0,37,0,201,0,212,0,225,0,0,0,213,0,217,0,0,0,176,0,58,0,46,0,50,0,0,0,42,0,141,0,254,0,215,0,74,0,161,0,63,0,137,0,0,0,64,0,119,0,0,0,230,0,14,0,77,0,123,0,0,0,249,0,0,0,0,0,182,0,198,0,212,0,192,0,0,0,0,0,221,0,31,0,140,0,97,0,15,0,80,0,70,0,204,0,242,0,0,0,17,0,217,0,114,0,21,0,26,0,114,0,81,0,133,0,171,0,0,0,151,0,194,0,14,0,156,0,25,0,205,0,176,0,142,0,111,0,181,0,245,0,218,0,0,0,0,0,13,0,122,0,128,0,0,0,0,0,126,0,236,0,211,0,0,0,87,0,0,0,175,0,140,0,0,0,245,0,0,0,86,0,14,0,156,0,190,0,119,0,98,0,160,0,15,0,98,0,95,0,1,0,250,0,100,0,232,0,82,0,120,0,123,0,0,0,9,0,177,0,0,0,123,0,232,0,124,0,112,0,195,0,13,0,44,0,2,0,0,0,0,0,152,0,82,0,237,0,99,0,0,0,0,0,24,0,194,0,97,0,19,0,108,0,152,0,128,0,13,0,124,0,237,0,7,0,4,0,5,0,253,0,104,0,63,0,170,0,66,0,123,0,85,0,0,0,10,0,97,0,241,0,47,0,202,0,223,0,227,0,121,0,246,0,109,0,241,0,187,0,255,0,203,0,127,0,66,0,162,0,0,0,76,0,119,0,0,0,86,0,62,0,197,0,185,0,153,0,63,0,176,0,231,0,123,0,60,0,23,0,220,0,50,0,154,0,30,0,167,0,10,0,205,0,0,0,160,0,233,0,34,0,138,0,71,0,139,0,103,0,192,0,0,0,147,0,173,0,0,0,78,0,139,0,43,0,0,0,225,0,235,0,117,0,0,0,147,0,197,0,235,0,225,0,9,0,7,0,242,0,84,0,207,0,7,0,134,0,28,0,56,0,0,0,61,0,24,0,65,0,222,0,202,0,213,0,0,0,169,0,42,0,14,0,73,0,127,0,47,0);
signal scenario_full  : scenario_type := (8,31,178,31,32,31,46,31,46,30,84,31,187,31,201,31,98,31,142,31,108,31,106,31,17,31,84,31,51,31,70,31,192,31,81,31,243,31,174,31,174,30,176,31,128,31,77,31,179,31,250,31,250,30,250,29,159,31,137,31,137,30,20,31,20,30,81,31,154,31,47,31,56,31,56,30,184,31,184,30,230,31,115,31,150,31,199,31,7,31,197,31,197,30,197,29,169,31,4,31,4,30,4,29,105,31,105,30,105,29,41,31,213,31,227,31,148,31,65,31,152,31,173,31,127,31,127,30,82,31,129,31,129,30,202,31,125,31,236,31,19,31,19,30,108,31,122,31,48,31,82,31,82,30,14,31,78,31,78,30,32,31,227,31,126,31,212,31,212,30,212,29,212,28,49,31,21,31,224,31,153,31,168,31,152,31,59,31,59,30,59,29,8,31,188,31,24,31,23,31,98,31,122,31,214,31,252,31,109,31,109,30,109,29,117,31,61,31,216,31,181,31,53,31,210,31,210,30,104,31,119,31,119,30,222,31,4,31,51,31,173,31,173,30,143,31,242,31,38,31,188,31,149,31,149,30,149,29,136,31,21,31,21,30,24,31,62,31,37,31,163,31,162,31,184,31,33,31,248,31,64,31,64,30,66,31,100,31,248,31,61,31,8,31,210,31,247,31,247,30,131,31,198,31,217,31,80,31,52,31,212,31,212,30,233,31,211,31,138,31,134,31,161,31,89,31,132,31,152,31,161,31,97,31,115,31,153,31,72,31,254,31,53,31,101,31,101,30,103,31,103,30,19,31,114,31,198,31,143,31,56,31,56,30,56,29,105,31,94,31,94,30,45,31,55,31,173,31,173,30,89,31,6,31,7,31,113,31,131,31,114,31,43,31,95,31,95,30,95,29,223,31,91,31,150,31,155,31,28,31,71,31,71,30,204,31,204,30,160,31,136,31,180,31,94,31,47,31,9,31,114,31,61,31,61,30,152,31,63,31,174,31,52,31,81,31,197,31,19,31,129,31,66,31,187,31,187,30,163,31,147,31,133,31,210,31,224,31,11,31,11,30,11,29,103,31,99,31,23,31,23,30,23,29,48,31,245,31,194,31,169,31,169,30,174,31,150,31,54,31,33,31,19,31,48,31,231,31,231,30,78,31,189,31,201,31,137,31,137,30,45,31,190,31,190,30,222,31,17,31,140,31,41,31,226,31,52,31,52,30,103,31,253,31,112,31,45,31,144,31,109,31,242,31,41,31,160,31,138,31,134,31,136,31,94,31,27,31,50,31,144,31,185,31,185,30,129,31,255,31,249,31,174,31,48,31,77,31,185,31,185,30,152,31,4,31,49,31,226,31,138,31,134,31,197,31,233,31,37,31,238,31,100,31,230,31,246,31,246,30,32,31,248,31,220,31,204,31,204,30,198,31,98,31,27,31,250,31,250,30,41,31,183,31,183,30,54,31,154,31,170,31,170,30,202,31,202,30,202,29,234,31,234,30,156,31,74,31,197,31,246,31,246,30,241,31,102,31,94,31,94,30,94,29,2,31,247,31,94,31,16,31,16,30,25,31,72,31,72,30,250,31,250,30,48,31,188,31,113,31,134,31,103,31,16,31,41,31,110,31,252,31,134,31,181,31,247,31,68,31,4,31,80,31,15,31,218,31,98,31,212,31,86,31,177,31,75,31,20,31,186,31,67,31,89,31,89,30,150,31,150,30,138,31,176,31,176,30,176,29,185,31,65,31,52,31,90,31,128,31,29,31,29,30,29,29,80,31,120,31,249,31,249,30,195,31,141,31,76,31,76,30,76,29,87,31,248,31,37,31,201,31,212,31,225,31,225,30,213,31,217,31,217,30,176,31,58,31,46,31,50,31,50,30,42,31,141,31,254,31,215,31,74,31,161,31,63,31,137,31,137,30,64,31,119,31,119,30,230,31,14,31,77,31,123,31,123,30,249,31,249,30,249,29,182,31,198,31,212,31,192,31,192,30,192,29,221,31,31,31,140,31,97,31,15,31,80,31,70,31,204,31,242,31,242,30,17,31,217,31,114,31,21,31,26,31,114,31,81,31,133,31,171,31,171,30,151,31,194,31,14,31,156,31,25,31,205,31,176,31,142,31,111,31,181,31,245,31,218,31,218,30,218,29,13,31,122,31,128,31,128,30,128,29,126,31,236,31,211,31,211,30,87,31,87,30,175,31,140,31,140,30,245,31,245,30,86,31,14,31,156,31,190,31,119,31,98,31,160,31,15,31,98,31,95,31,1,31,250,31,100,31,232,31,82,31,120,31,123,31,123,30,9,31,177,31,177,30,123,31,232,31,124,31,112,31,195,31,13,31,44,31,2,31,2,30,2,29,152,31,82,31,237,31,99,31,99,30,99,29,24,31,194,31,97,31,19,31,108,31,152,31,128,31,13,31,124,31,237,31,7,31,4,31,5,31,253,31,104,31,63,31,170,31,66,31,123,31,85,31,85,30,10,31,97,31,241,31,47,31,202,31,223,31,227,31,121,31,246,31,109,31,241,31,187,31,255,31,203,31,127,31,66,31,162,31,162,30,76,31,119,31,119,30,86,31,62,31,197,31,185,31,153,31,63,31,176,31,231,31,123,31,60,31,23,31,220,31,50,31,154,31,30,31,167,31,10,31,205,31,205,30,160,31,233,31,34,31,138,31,71,31,139,31,103,31,192,31,192,30,147,31,173,31,173,30,78,31,139,31,43,31,43,30,225,31,235,31,117,31,117,30,147,31,197,31,235,31,225,31,9,31,7,31,242,31,84,31,207,31,7,31,134,31,28,31,56,31,56,30,61,31,24,31,65,31,222,31,202,31,213,31,213,30,169,31,42,31,14,31,73,31,127,31,47,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
