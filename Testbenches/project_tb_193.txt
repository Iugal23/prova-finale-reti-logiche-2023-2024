-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 522;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (109,0,0,0,0,0,93,0,89,0,0,0,0,0,54,0,12,0,103,0,251,0,217,0,77,0,0,0,236,0,56,0,101,0,129,0,74,0,72,0,207,0,4,0,146,0,4,0,102,0,252,0,203,0,252,0,196,0,190,0,62,0,0,0,30,0,201,0,22,0,255,0,183,0,3,0,0,0,186,0,0,0,0,0,115,0,146,0,177,0,0,0,173,0,105,0,0,0,231,0,174,0,0,0,213,0,188,0,137,0,70,0,232,0,242,0,249,0,0,0,163,0,58,0,140,0,33,0,103,0,23,0,17,0,165,0,117,0,103,0,72,0,119,0,230,0,6,0,249,0,183,0,222,0,193,0,202,0,0,0,223,0,0,0,0,0,194,0,54,0,63,0,0,0,167,0,130,0,165,0,235,0,0,0,133,0,108,0,248,0,228,0,189,0,0,0,204,0,241,0,105,0,93,0,151,0,0,0,170,0,156,0,122,0,125,0,92,0,234,0,0,0,24,0,171,0,73,0,0,0,75,0,102,0,17,0,66,0,181,0,165,0,187,0,170,0,162,0,140,0,174,0,53,0,241,0,111,0,94,0,67,0,187,0,1,0,100,0,95,0,53,0,0,0,125,0,0,0,198,0,189,0,231,0,180,0,123,0,96,0,4,0,51,0,0,0,19,0,0,0,75,0,0,0,229,0,0,0,13,0,242,0,0,0,46,0,27,0,78,0,0,0,70,0,58,0,44,0,169,0,221,0,255,0,58,0,0,0,6,0,54,0,121,0,203,0,36,0,226,0,0,0,246,0,126,0,248,0,0,0,66,0,197,0,17,0,0,0,0,0,0,0,118,0,191,0,125,0,17,0,161,0,0,0,41,0,110,0,188,0,218,0,204,0,0,0,135,0,71,0,237,0,172,0,174,0,10,0,25,0,227,0,165,0,0,0,124,0,115,0,173,0,5,0,53,0,7,0,0,0,195,0,253,0,147,0,90,0,82,0,223,0,76,0,146,0,222,0,108,0,255,0,115,0,9,0,190,0,173,0,197,0,105,0,168,0,214,0,0,0,181,0,0,0,170,0,158,0,150,0,144,0,171,0,50,0,29,0,231,0,162,0,79,0,99,0,56,0,188,0,0,0,141,0,42,0,117,0,36,0,0,0,202,0,0,0,0,0,193,0,6,0,205,0,160,0,206,0,102,0,227,0,32,0,168,0,174,0,0,0,181,0,221,0,206,0,0,0,19,0,98,0,22,0,0,0,0,0,183,0,102,0,186,0,0,0,61,0,0,0,225,0,234,0,0,0,0,0,0,0,0,0,78,0,0,0,61,0,0,0,248,0,127,0,0,0,33,0,176,0,6,0,94,0,248,0,88,0,138,0,207,0,0,0,252,0,0,0,0,0,14,0,219,0,157,0,42,0,167,0,0,0,118,0,3,0,64,0,5,0,0,0,145,0,199,0,0,0,0,0,114,0,201,0,37,0,209,0,201,0,54,0,0,0,175,0,231,0,159,0,206,0,0,0,63,0,119,0,95,0,113,0,23,0,73,0,91,0,108,0,21,0,42,0,21,0,4,0,187,0,115,0,0,0,117,0,0,0,0,0,50,0,41,0,11,0,50,0,54,0,0,0,103,0,22,0,204,0,139,0,25,0,45,0,130,0,68,0,0,0,220,0,156,0,138,0,173,0,0,0,227,0,180,0,0,0,248,0,119,0,0,0,231,0,168,0,227,0,0,0,112,0,0,0,147,0,0,0,213,0,52,0,42,0,0,0,0,0,225,0,217,0,85,0,0,0,240,0,29,0,73,0,253,0,18,0,5,0,45,0,58,0,42,0,14,0,117,0,89,0,242,0,215,0,171,0,27,0,232,0,6,0,33,0,30,0,5,0,222,0,235,0,76,0,0,0,80,0,68,0,0,0,0,0,121,0,187,0,0,0,220,0,0,0,233,0,108,0,173,0,152,0,242,0,87,0,153,0,166,0,72,0,89,0,68,0,41,0,49,0,0,0,218,0,0,0,223,0,25,0,60,0,117,0,151,0,69,0,16,0,104,0,27,0,0,0,163,0,82,0,0,0,232,0,0,0,74,0,0,0,117,0,233,0,0,0,243,0,19,0,0,0,219,0,118,0,9,0,246,0,0,0,0,0,96,0,17,0,57,0,3,0,206,0,73,0,0,0,100,0,197,0,255,0,99,0,40,0,96,0,56,0,192,0,0,0,140,0,100,0,42,0,28,0,0,0,243,0,156,0,0,0,205,0,50,0,31,0,50,0,82,0,49,0,55,0,48,0,0,0,172,0,13,0,203,0,238,0,0,0,222,0,0,0,219,0,71,0,174,0,234,0,109,0);
signal scenario_full  : scenario_type := (109,31,109,30,109,29,93,31,89,31,89,30,89,29,54,31,12,31,103,31,251,31,217,31,77,31,77,30,236,31,56,31,101,31,129,31,74,31,72,31,207,31,4,31,146,31,4,31,102,31,252,31,203,31,252,31,196,31,190,31,62,31,62,30,30,31,201,31,22,31,255,31,183,31,3,31,3,30,186,31,186,30,186,29,115,31,146,31,177,31,177,30,173,31,105,31,105,30,231,31,174,31,174,30,213,31,188,31,137,31,70,31,232,31,242,31,249,31,249,30,163,31,58,31,140,31,33,31,103,31,23,31,17,31,165,31,117,31,103,31,72,31,119,31,230,31,6,31,249,31,183,31,222,31,193,31,202,31,202,30,223,31,223,30,223,29,194,31,54,31,63,31,63,30,167,31,130,31,165,31,235,31,235,30,133,31,108,31,248,31,228,31,189,31,189,30,204,31,241,31,105,31,93,31,151,31,151,30,170,31,156,31,122,31,125,31,92,31,234,31,234,30,24,31,171,31,73,31,73,30,75,31,102,31,17,31,66,31,181,31,165,31,187,31,170,31,162,31,140,31,174,31,53,31,241,31,111,31,94,31,67,31,187,31,1,31,100,31,95,31,53,31,53,30,125,31,125,30,198,31,189,31,231,31,180,31,123,31,96,31,4,31,51,31,51,30,19,31,19,30,75,31,75,30,229,31,229,30,13,31,242,31,242,30,46,31,27,31,78,31,78,30,70,31,58,31,44,31,169,31,221,31,255,31,58,31,58,30,6,31,54,31,121,31,203,31,36,31,226,31,226,30,246,31,126,31,248,31,248,30,66,31,197,31,17,31,17,30,17,29,17,28,118,31,191,31,125,31,17,31,161,31,161,30,41,31,110,31,188,31,218,31,204,31,204,30,135,31,71,31,237,31,172,31,174,31,10,31,25,31,227,31,165,31,165,30,124,31,115,31,173,31,5,31,53,31,7,31,7,30,195,31,253,31,147,31,90,31,82,31,223,31,76,31,146,31,222,31,108,31,255,31,115,31,9,31,190,31,173,31,197,31,105,31,168,31,214,31,214,30,181,31,181,30,170,31,158,31,150,31,144,31,171,31,50,31,29,31,231,31,162,31,79,31,99,31,56,31,188,31,188,30,141,31,42,31,117,31,36,31,36,30,202,31,202,30,202,29,193,31,6,31,205,31,160,31,206,31,102,31,227,31,32,31,168,31,174,31,174,30,181,31,221,31,206,31,206,30,19,31,98,31,22,31,22,30,22,29,183,31,102,31,186,31,186,30,61,31,61,30,225,31,234,31,234,30,234,29,234,28,234,27,78,31,78,30,61,31,61,30,248,31,127,31,127,30,33,31,176,31,6,31,94,31,248,31,88,31,138,31,207,31,207,30,252,31,252,30,252,29,14,31,219,31,157,31,42,31,167,31,167,30,118,31,3,31,64,31,5,31,5,30,145,31,199,31,199,30,199,29,114,31,201,31,37,31,209,31,201,31,54,31,54,30,175,31,231,31,159,31,206,31,206,30,63,31,119,31,95,31,113,31,23,31,73,31,91,31,108,31,21,31,42,31,21,31,4,31,187,31,115,31,115,30,117,31,117,30,117,29,50,31,41,31,11,31,50,31,54,31,54,30,103,31,22,31,204,31,139,31,25,31,45,31,130,31,68,31,68,30,220,31,156,31,138,31,173,31,173,30,227,31,180,31,180,30,248,31,119,31,119,30,231,31,168,31,227,31,227,30,112,31,112,30,147,31,147,30,213,31,52,31,42,31,42,30,42,29,225,31,217,31,85,31,85,30,240,31,29,31,73,31,253,31,18,31,5,31,45,31,58,31,42,31,14,31,117,31,89,31,242,31,215,31,171,31,27,31,232,31,6,31,33,31,30,31,5,31,222,31,235,31,76,31,76,30,80,31,68,31,68,30,68,29,121,31,187,31,187,30,220,31,220,30,233,31,108,31,173,31,152,31,242,31,87,31,153,31,166,31,72,31,89,31,68,31,41,31,49,31,49,30,218,31,218,30,223,31,25,31,60,31,117,31,151,31,69,31,16,31,104,31,27,31,27,30,163,31,82,31,82,30,232,31,232,30,74,31,74,30,117,31,233,31,233,30,243,31,19,31,19,30,219,31,118,31,9,31,246,31,246,30,246,29,96,31,17,31,57,31,3,31,206,31,73,31,73,30,100,31,197,31,255,31,99,31,40,31,96,31,56,31,192,31,192,30,140,31,100,31,42,31,28,31,28,30,243,31,156,31,156,30,205,31,50,31,31,31,50,31,82,31,49,31,55,31,48,31,48,30,172,31,13,31,203,31,238,31,238,30,222,31,222,30,219,31,71,31,174,31,234,31,109,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
