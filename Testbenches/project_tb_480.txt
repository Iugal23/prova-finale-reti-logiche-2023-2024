-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 387;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,106,0,185,0,238,0,0,0,121,0,0,0,12,0,191,0,209,0,129,0,170,0,219,0,212,0,234,0,36,0,168,0,233,0,83,0,131,0,79,0,16,0,30,0,224,0,197,0,158,0,40,0,100,0,0,0,159,0,74,0,169,0,37,0,51,0,225,0,39,0,0,0,59,0,145,0,245,0,0,0,247,0,34,0,23,0,136,0,155,0,180,0,0,0,67,0,235,0,112,0,67,0,101,0,188,0,48,0,67,0,127,0,232,0,39,0,143,0,251,0,127,0,148,0,0,0,58,0,30,0,204,0,7,0,250,0,194,0,22,0,180,0,91,0,142,0,199,0,205,0,68,0,142,0,0,0,107,0,168,0,185,0,18,0,157,0,122,0,176,0,0,0,145,0,199,0,0,0,0,0,0,0,239,0,156,0,118,0,196,0,0,0,67,0,85,0,232,0,0,0,85,0,0,0,38,0,83,0,40,0,249,0,182,0,72,0,0,0,222,0,62,0,130,0,22,0,0,0,117,0,182,0,0,0,0,0,74,0,83,0,129,0,136,0,112,0,0,0,32,0,0,0,56,0,38,0,251,0,160,0,29,0,38,0,217,0,202,0,230,0,89,0,122,0,20,0,196,0,0,0,203,0,0,0,201,0,0,0,140,0,155,0,240,0,184,0,101,0,5,0,194,0,0,0,224,0,193,0,0,0,28,0,219,0,45,0,18,0,0,0,229,0,27,0,0,0,1,0,0,0,199,0,46,0,159,0,122,0,0,0,124,0,0,0,250,0,99,0,200,0,167,0,72,0,21,0,40,0,192,0,121,0,225,0,156,0,0,0,60,0,212,0,255,0,112,0,95,0,206,0,237,0,155,0,67,0,179,0,0,0,54,0,128,0,0,0,3,0,0,0,229,0,200,0,0,0,0,0,24,0,98,0,81,0,147,0,76,0,16,0,184,0,199,0,148,0,221,0,67,0,0,0,132,0,68,0,12,0,0,0,135,0,108,0,59,0,0,0,242,0,8,0,230,0,0,0,0,0,146,0,105,0,225,0,187,0,215,0,0,0,190,0,163,0,215,0,0,0,125,0,241,0,174,0,70,0,115,0,238,0,187,0,131,0,120,0,135,0,14,0,144,0,111,0,54,0,148,0,0,0,147,0,197,0,58,0,49,0,219,0,189,0,51,0,144,0,107,0,104,0,68,0,155,0,48,0,65,0,188,0,188,0,6,0,233,0,245,0,11,0,71,0,113,0,232,0,17,0,108,0,6,0,107,0,224,0,79,0,97,0,0,0,3,0,215,0,94,0,190,0,4,0,0,0,0,0,254,0,192,0,0,0,0,0,79,0,0,0,79,0,40,0,251,0,51,0,190,0,28,0,192,0,0,0,0,0,41,0,78,0,0,0,103,0,2,0,181,0,177,0,71,0,203,0,176,0,234,0,230,0,0,0,3,0,255,0,0,0,182,0,109,0,174,0,50,0,251,0,0,0,134,0,0,0,39,0,58,0,133,0,72,0,8,0,129,0,0,0,0,0,246,0,66,0,134,0,184,0,62,0,125,0,74,0,206,0,163,0,64,0,0,0,0,0,20,0,238,0,0,0,106,0,18,0,15,0,0,0,195,0,202,0,110,0,214,0,251,0,84,0,121,0,178,0,148,0,181,0,173,0,31,0,0,0,0,0,50,0,0,0,108,0,210,0,155,0,111,0,245,0,229,0,190,0,22,0,201,0,0,0,178,0);
signal scenario_full  : scenario_type := (0,0,106,31,185,31,238,31,238,30,121,31,121,30,12,31,191,31,209,31,129,31,170,31,219,31,212,31,234,31,36,31,168,31,233,31,83,31,131,31,79,31,16,31,30,31,224,31,197,31,158,31,40,31,100,31,100,30,159,31,74,31,169,31,37,31,51,31,225,31,39,31,39,30,59,31,145,31,245,31,245,30,247,31,34,31,23,31,136,31,155,31,180,31,180,30,67,31,235,31,112,31,67,31,101,31,188,31,48,31,67,31,127,31,232,31,39,31,143,31,251,31,127,31,148,31,148,30,58,31,30,31,204,31,7,31,250,31,194,31,22,31,180,31,91,31,142,31,199,31,205,31,68,31,142,31,142,30,107,31,168,31,185,31,18,31,157,31,122,31,176,31,176,30,145,31,199,31,199,30,199,29,199,28,239,31,156,31,118,31,196,31,196,30,67,31,85,31,232,31,232,30,85,31,85,30,38,31,83,31,40,31,249,31,182,31,72,31,72,30,222,31,62,31,130,31,22,31,22,30,117,31,182,31,182,30,182,29,74,31,83,31,129,31,136,31,112,31,112,30,32,31,32,30,56,31,38,31,251,31,160,31,29,31,38,31,217,31,202,31,230,31,89,31,122,31,20,31,196,31,196,30,203,31,203,30,201,31,201,30,140,31,155,31,240,31,184,31,101,31,5,31,194,31,194,30,224,31,193,31,193,30,28,31,219,31,45,31,18,31,18,30,229,31,27,31,27,30,1,31,1,30,199,31,46,31,159,31,122,31,122,30,124,31,124,30,250,31,99,31,200,31,167,31,72,31,21,31,40,31,192,31,121,31,225,31,156,31,156,30,60,31,212,31,255,31,112,31,95,31,206,31,237,31,155,31,67,31,179,31,179,30,54,31,128,31,128,30,3,31,3,30,229,31,200,31,200,30,200,29,24,31,98,31,81,31,147,31,76,31,16,31,184,31,199,31,148,31,221,31,67,31,67,30,132,31,68,31,12,31,12,30,135,31,108,31,59,31,59,30,242,31,8,31,230,31,230,30,230,29,146,31,105,31,225,31,187,31,215,31,215,30,190,31,163,31,215,31,215,30,125,31,241,31,174,31,70,31,115,31,238,31,187,31,131,31,120,31,135,31,14,31,144,31,111,31,54,31,148,31,148,30,147,31,197,31,58,31,49,31,219,31,189,31,51,31,144,31,107,31,104,31,68,31,155,31,48,31,65,31,188,31,188,31,6,31,233,31,245,31,11,31,71,31,113,31,232,31,17,31,108,31,6,31,107,31,224,31,79,31,97,31,97,30,3,31,215,31,94,31,190,31,4,31,4,30,4,29,254,31,192,31,192,30,192,29,79,31,79,30,79,31,40,31,251,31,51,31,190,31,28,31,192,31,192,30,192,29,41,31,78,31,78,30,103,31,2,31,181,31,177,31,71,31,203,31,176,31,234,31,230,31,230,30,3,31,255,31,255,30,182,31,109,31,174,31,50,31,251,31,251,30,134,31,134,30,39,31,58,31,133,31,72,31,8,31,129,31,129,30,129,29,246,31,66,31,134,31,184,31,62,31,125,31,74,31,206,31,163,31,64,31,64,30,64,29,20,31,238,31,238,30,106,31,18,31,15,31,15,30,195,31,202,31,110,31,214,31,251,31,84,31,121,31,178,31,148,31,181,31,173,31,31,31,31,30,31,29,50,31,50,30,108,31,210,31,155,31,111,31,245,31,229,31,190,31,22,31,201,31,201,30,178,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
