-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 880;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (109,0,0,0,72,0,28,0,44,0,49,0,188,0,110,0,212,0,119,0,79,0,0,0,0,0,40,0,134,0,0,0,31,0,0,0,19,0,0,0,207,0,198,0,79,0,0,0,132,0,144,0,11,0,49,0,30,0,0,0,238,0,92,0,140,0,91,0,0,0,234,0,179,0,128,0,0,0,118,0,244,0,221,0,43,0,173,0,47,0,111,0,99,0,16,0,43,0,0,0,0,0,0,0,91,0,0,0,76,0,101,0,162,0,99,0,68,0,248,0,0,0,238,0,22,0,65,0,19,0,0,0,247,0,208,0,228,0,36,0,137,0,118,0,171,0,174,0,0,0,45,0,0,0,0,0,26,0,166,0,248,0,0,0,0,0,141,0,0,0,0,0,0,0,180,0,0,0,155,0,0,0,229,0,238,0,233,0,15,0,70,0,15,0,180,0,218,0,178,0,218,0,158,0,71,0,139,0,185,0,0,0,0,0,50,0,163,0,0,0,242,0,12,0,0,0,233,0,22,0,0,0,123,0,163,0,70,0,217,0,141,0,149,0,206,0,0,0,0,0,19,0,0,0,129,0,179,0,0,0,142,0,158,0,100,0,0,0,193,0,0,0,130,0,251,0,222,0,146,0,132,0,60,0,21,0,100,0,16,0,22,0,9,0,0,0,147,0,189,0,249,0,190,0,71,0,64,0,13,0,74,0,203,0,194,0,97,0,130,0,0,0,0,0,34,0,238,0,200,0,44,0,246,0,0,0,65,0,127,0,246,0,188,0,192,0,59,0,46,0,180,0,0,0,0,0,62,0,147,0,202,0,110,0,112,0,0,0,0,0,0,0,0,0,226,0,32,0,14,0,64,0,174,0,144,0,0,0,194,0,43,0,7,0,176,0,13,0,0,0,84,0,105,0,252,0,85,0,72,0,189,0,188,0,116,0,165,0,205,0,225,0,223,0,205,0,109,0,235,0,244,0,51,0,177,0,0,0,217,0,0,0,175,0,0,0,50,0,0,0,83,0,164,0,246,0,106,0,0,0,26,0,0,0,0,0,238,0,103,0,224,0,165,0,0,0,239,0,226,0,103,0,48,0,193,0,199,0,33,0,235,0,246,0,187,0,173,0,16,0,254,0,42,0,201,0,115,0,45,0,0,0,121,0,0,0,10,0,93,0,24,0,128,0,101,0,139,0,43,0,102,0,0,0,190,0,0,0,47,0,0,0,231,0,72,0,47,0,117,0,180,0,93,0,0,0,163,0,118,0,145,0,252,0,127,0,0,0,120,0,239,0,75,0,182,0,0,0,238,0,38,0,28,0,0,0,143,0,58,0,0,0,12,0,246,0,10,0,227,0,167,0,131,0,114,0,38,0,129,0,193,0,0,0,0,0,0,0,116,0,151,0,94,0,188,0,201,0,0,0,0,0,185,0,122,0,111,0,0,0,0,0,125,0,3,0,0,0,116,0,0,0,219,0,208,0,0,0,165,0,164,0,95,0,11,0,11,0,0,0,13,0,34,0,50,0,68,0,224,0,127,0,118,0,119,0,0,0,161,0,6,0,44,0,61,0,197,0,6,0,32,0,0,0,0,0,159,0,214,0,28,0,123,0,43,0,38,0,137,0,138,0,225,0,157,0,49,0,0,0,33,0,0,0,88,0,8,0,0,0,6,0,188,0,108,0,37,0,166,0,26,0,0,0,12,0,242,0,31,0,89,0,132,0,0,0,161,0,210,0,111,0,0,0,181,0,148,0,195,0,106,0,13,0,238,0,143,0,151,0,47,0,9,0,128,0,1,0,0,0,55,0,0,0,150,0,0,0,235,0,0,0,0,0,0,0,82,0,57,0,170,0,82,0,224,0,0,0,103,0,0,0,67,0,171,0,154,0,16,0,0,0,0,0,11,0,128,0,0,0,0,0,101,0,242,0,27,0,129,0,71,0,107,0,3,0,0,0,187,0,137,0,125,0,54,0,209,0,0,0,114,0,0,0,220,0,7,0,176,0,41,0,157,0,120,0,0,0,0,0,123,0,189,0,172,0,232,0,56,0,60,0,160,0,11,0,146,0,242,0,179,0,87,0,66,0,42,0,33,0,112,0,140,0,6,0,174,0,246,0,87,0,0,0,60,0,0,0,168,0,216,0,218,0,0,0,184,0,173,0,0,0,0,0,58,0,21,0,148,0,72,0,0,0,54,0,58,0,0,0,148,0,156,0,25,0,0,0,233,0,159,0,42,0,147,0,176,0,167,0,245,0,0,0,13,0,1,0,0,0,0,0,7,0,165,0,0,0,65,0,79,0,214,0,174,0,103,0,153,0,0,0,0,0,10,0,231,0,163,0,0,0,100,0,59,0,16,0,0,0,20,0,134,0,157,0,0,0,6,0,109,0,0,0,138,0,242,0,0,0,18,0,202,0,0,0,29,0,128,0,179,0,110,0,80,0,164,0,196,0,57,0,169,0,76,0,0,0,64,0,23,0,27,0,166,0,148,0,20,0,105,0,220,0,15,0,191,0,203,0,192,0,59,0,39,0,152,0,52,0,144,0,62,0,49,0,0,0,0,0,43,0,235,0,0,0,241,0,53,0,41,0,0,0,95,0,18,0,183,0,137,0,17,0,29,0,100,0,115,0,185,0,39,0,175,0,107,0,177,0,227,0,0,0,132,0,87,0,74,0,251,0,235,0,45,0,237,0,195,0,141,0,103,0,107,0,0,0,84,0,215,0,5,0,151,0,200,0,73,0,121,0,0,0,0,0,0,0,202,0,0,0,204,0,79,0,0,0,212,0,212,0,95,0,113,0,170,0,63,0,197,0,242,0,125,0,110,0,0,0,0,0,0,0,0,0,0,0,174,0,235,0,0,0,158,0,0,0,0,0,0,0,101,0,188,0,56,0,0,0,208,0,28,0,39,0,89,0,43,0,242,0,40,0,200,0,152,0,91,0,40,0,68,0,246,0,250,0,0,0,114,0,30,0,0,0,194,0,113,0,193,0,140,0,76,0,252,0,203,0,72,0,121,0,159,0,96,0,132,0,161,0,118,0,0,0,38,0,155,0,160,0,0,0,79,0,0,0,0,0,94,0,201,0,0,0,0,0,0,0,220,0,190,0,21,0,236,0,129,0,223,0,223,0,0,0,197,0,241,0,195,0,213,0,238,0,165,0,164,0,0,0,50,0,0,0,0,0,9,0,43,0,0,0,92,0,241,0,210,0,0,0,32,0,0,0,88,0,0,0,112,0,210,0,138,0,0,0,247,0,11,0,96,0,0,0,0,0,0,0,164,0,107,0,240,0,179,0,125,0,69,0,0,0,0,0,246,0,169,0,7,0,137,0,27,0,228,0,22,0,106,0,36,0,247,0,202,0,73,0,9,0,149,0,16,0,229,0,232,0,157,0,0,0,223,0,132,0,0,0,210,0,242,0,100,0,71,0,197,0,61,0,167,0,207,0,122,0,30,0,109,0,233,0,232,0,57,0,148,0,231,0,138,0,100,0,86,0,0,0,184,0,32,0,245,0,105,0,170,0,188,0,0,0,67,0,130,0,78,0,161,0,234,0,217,0,0,0,81,0,178,0,187,0,113,0,114,0,253,0,40,0,1,0,255,0,135,0,0,0,0,0,126,0,57,0,106,0,0,0,248,0,114,0,213,0,164,0,0,0,46,0,0,0,161,0,29,0,0,0,159,0,0,0,0,0,26,0,103,0,193,0,166,0,67,0,144,0,44,0,52,0,35,0,14,0,94,0,212,0,0,0,244,0,22,0,0,0,37,0,0,0,211,0,171,0,28,0,0,0,3,0,212,0,95,0,0,0,232,0,150,0,167,0,0,0,166,0,242,0,163,0,0,0,117,0,116,0,62,0,244,0,48,0,227,0,0,0,36,0,82,0,208,0,0,0,137,0,76,0,14,0,255,0,138,0,243,0,195,0,144,0,70,0,0,0,149,0,136,0);
signal scenario_full  : scenario_type := (109,31,109,30,72,31,28,31,44,31,49,31,188,31,110,31,212,31,119,31,79,31,79,30,79,29,40,31,134,31,134,30,31,31,31,30,19,31,19,30,207,31,198,31,79,31,79,30,132,31,144,31,11,31,49,31,30,31,30,30,238,31,92,31,140,31,91,31,91,30,234,31,179,31,128,31,128,30,118,31,244,31,221,31,43,31,173,31,47,31,111,31,99,31,16,31,43,31,43,30,43,29,43,28,91,31,91,30,76,31,101,31,162,31,99,31,68,31,248,31,248,30,238,31,22,31,65,31,19,31,19,30,247,31,208,31,228,31,36,31,137,31,118,31,171,31,174,31,174,30,45,31,45,30,45,29,26,31,166,31,248,31,248,30,248,29,141,31,141,30,141,29,141,28,180,31,180,30,155,31,155,30,229,31,238,31,233,31,15,31,70,31,15,31,180,31,218,31,178,31,218,31,158,31,71,31,139,31,185,31,185,30,185,29,50,31,163,31,163,30,242,31,12,31,12,30,233,31,22,31,22,30,123,31,163,31,70,31,217,31,141,31,149,31,206,31,206,30,206,29,19,31,19,30,129,31,179,31,179,30,142,31,158,31,100,31,100,30,193,31,193,30,130,31,251,31,222,31,146,31,132,31,60,31,21,31,100,31,16,31,22,31,9,31,9,30,147,31,189,31,249,31,190,31,71,31,64,31,13,31,74,31,203,31,194,31,97,31,130,31,130,30,130,29,34,31,238,31,200,31,44,31,246,31,246,30,65,31,127,31,246,31,188,31,192,31,59,31,46,31,180,31,180,30,180,29,62,31,147,31,202,31,110,31,112,31,112,30,112,29,112,28,112,27,226,31,32,31,14,31,64,31,174,31,144,31,144,30,194,31,43,31,7,31,176,31,13,31,13,30,84,31,105,31,252,31,85,31,72,31,189,31,188,31,116,31,165,31,205,31,225,31,223,31,205,31,109,31,235,31,244,31,51,31,177,31,177,30,217,31,217,30,175,31,175,30,50,31,50,30,83,31,164,31,246,31,106,31,106,30,26,31,26,30,26,29,238,31,103,31,224,31,165,31,165,30,239,31,226,31,103,31,48,31,193,31,199,31,33,31,235,31,246,31,187,31,173,31,16,31,254,31,42,31,201,31,115,31,45,31,45,30,121,31,121,30,10,31,93,31,24,31,128,31,101,31,139,31,43,31,102,31,102,30,190,31,190,30,47,31,47,30,231,31,72,31,47,31,117,31,180,31,93,31,93,30,163,31,118,31,145,31,252,31,127,31,127,30,120,31,239,31,75,31,182,31,182,30,238,31,38,31,28,31,28,30,143,31,58,31,58,30,12,31,246,31,10,31,227,31,167,31,131,31,114,31,38,31,129,31,193,31,193,30,193,29,193,28,116,31,151,31,94,31,188,31,201,31,201,30,201,29,185,31,122,31,111,31,111,30,111,29,125,31,3,31,3,30,116,31,116,30,219,31,208,31,208,30,165,31,164,31,95,31,11,31,11,31,11,30,13,31,34,31,50,31,68,31,224,31,127,31,118,31,119,31,119,30,161,31,6,31,44,31,61,31,197,31,6,31,32,31,32,30,32,29,159,31,214,31,28,31,123,31,43,31,38,31,137,31,138,31,225,31,157,31,49,31,49,30,33,31,33,30,88,31,8,31,8,30,6,31,188,31,108,31,37,31,166,31,26,31,26,30,12,31,242,31,31,31,89,31,132,31,132,30,161,31,210,31,111,31,111,30,181,31,148,31,195,31,106,31,13,31,238,31,143,31,151,31,47,31,9,31,128,31,1,31,1,30,55,31,55,30,150,31,150,30,235,31,235,30,235,29,235,28,82,31,57,31,170,31,82,31,224,31,224,30,103,31,103,30,67,31,171,31,154,31,16,31,16,30,16,29,11,31,128,31,128,30,128,29,101,31,242,31,27,31,129,31,71,31,107,31,3,31,3,30,187,31,137,31,125,31,54,31,209,31,209,30,114,31,114,30,220,31,7,31,176,31,41,31,157,31,120,31,120,30,120,29,123,31,189,31,172,31,232,31,56,31,60,31,160,31,11,31,146,31,242,31,179,31,87,31,66,31,42,31,33,31,112,31,140,31,6,31,174,31,246,31,87,31,87,30,60,31,60,30,168,31,216,31,218,31,218,30,184,31,173,31,173,30,173,29,58,31,21,31,148,31,72,31,72,30,54,31,58,31,58,30,148,31,156,31,25,31,25,30,233,31,159,31,42,31,147,31,176,31,167,31,245,31,245,30,13,31,1,31,1,30,1,29,7,31,165,31,165,30,65,31,79,31,214,31,174,31,103,31,153,31,153,30,153,29,10,31,231,31,163,31,163,30,100,31,59,31,16,31,16,30,20,31,134,31,157,31,157,30,6,31,109,31,109,30,138,31,242,31,242,30,18,31,202,31,202,30,29,31,128,31,179,31,110,31,80,31,164,31,196,31,57,31,169,31,76,31,76,30,64,31,23,31,27,31,166,31,148,31,20,31,105,31,220,31,15,31,191,31,203,31,192,31,59,31,39,31,152,31,52,31,144,31,62,31,49,31,49,30,49,29,43,31,235,31,235,30,241,31,53,31,41,31,41,30,95,31,18,31,183,31,137,31,17,31,29,31,100,31,115,31,185,31,39,31,175,31,107,31,177,31,227,31,227,30,132,31,87,31,74,31,251,31,235,31,45,31,237,31,195,31,141,31,103,31,107,31,107,30,84,31,215,31,5,31,151,31,200,31,73,31,121,31,121,30,121,29,121,28,202,31,202,30,204,31,79,31,79,30,212,31,212,31,95,31,113,31,170,31,63,31,197,31,242,31,125,31,110,31,110,30,110,29,110,28,110,27,110,26,174,31,235,31,235,30,158,31,158,30,158,29,158,28,101,31,188,31,56,31,56,30,208,31,28,31,39,31,89,31,43,31,242,31,40,31,200,31,152,31,91,31,40,31,68,31,246,31,250,31,250,30,114,31,30,31,30,30,194,31,113,31,193,31,140,31,76,31,252,31,203,31,72,31,121,31,159,31,96,31,132,31,161,31,118,31,118,30,38,31,155,31,160,31,160,30,79,31,79,30,79,29,94,31,201,31,201,30,201,29,201,28,220,31,190,31,21,31,236,31,129,31,223,31,223,31,223,30,197,31,241,31,195,31,213,31,238,31,165,31,164,31,164,30,50,31,50,30,50,29,9,31,43,31,43,30,92,31,241,31,210,31,210,30,32,31,32,30,88,31,88,30,112,31,210,31,138,31,138,30,247,31,11,31,96,31,96,30,96,29,96,28,164,31,107,31,240,31,179,31,125,31,69,31,69,30,69,29,246,31,169,31,7,31,137,31,27,31,228,31,22,31,106,31,36,31,247,31,202,31,73,31,9,31,149,31,16,31,229,31,232,31,157,31,157,30,223,31,132,31,132,30,210,31,242,31,100,31,71,31,197,31,61,31,167,31,207,31,122,31,30,31,109,31,233,31,232,31,57,31,148,31,231,31,138,31,100,31,86,31,86,30,184,31,32,31,245,31,105,31,170,31,188,31,188,30,67,31,130,31,78,31,161,31,234,31,217,31,217,30,81,31,178,31,187,31,113,31,114,31,253,31,40,31,1,31,255,31,135,31,135,30,135,29,126,31,57,31,106,31,106,30,248,31,114,31,213,31,164,31,164,30,46,31,46,30,161,31,29,31,29,30,159,31,159,30,159,29,26,31,103,31,193,31,166,31,67,31,144,31,44,31,52,31,35,31,14,31,94,31,212,31,212,30,244,31,22,31,22,30,37,31,37,30,211,31,171,31,28,31,28,30,3,31,212,31,95,31,95,30,232,31,150,31,167,31,167,30,166,31,242,31,163,31,163,30,117,31,116,31,62,31,244,31,48,31,227,31,227,30,36,31,82,31,208,31,208,30,137,31,76,31,14,31,255,31,138,31,243,31,195,31,144,31,70,31,70,30,149,31,136,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
