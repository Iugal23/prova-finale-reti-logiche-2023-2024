-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 871;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (3,0,244,0,0,0,102,0,14,0,123,0,0,0,177,0,6,0,0,0,0,0,0,0,159,0,0,0,101,0,0,0,205,0,0,0,224,0,86,0,243,0,0,0,0,0,124,0,73,0,0,0,24,0,176,0,0,0,121,0,177,0,77,0,125,0,240,0,29,0,112,0,0,0,217,0,160,0,247,0,226,0,116,0,86,0,60,0,238,0,154,0,181,0,45,0,255,0,0,0,0,0,0,0,13,0,26,0,86,0,0,0,125,0,191,0,239,0,0,0,213,0,184,0,155,0,0,0,160,0,0,0,119,0,62,0,237,0,20,0,39,0,166,0,210,0,176,0,159,0,96,0,207,0,29,0,132,0,54,0,234,0,150,0,167,0,202,0,223,0,232,0,234,0,9,0,205,0,109,0,0,0,0,0,0,0,160,0,21,0,0,0,97,0,199,0,169,0,139,0,226,0,254,0,33,0,11,0,199,0,189,0,194,0,131,0,14,0,33,0,170,0,0,0,76,0,199,0,0,0,143,0,230,0,40,0,0,0,134,0,144,0,16,0,37,0,0,0,0,0,212,0,0,0,152,0,29,0,0,0,215,0,0,0,0,0,202,0,5,0,0,0,32,0,18,0,213,0,0,0,54,0,67,0,0,0,133,0,155,0,99,0,244,0,0,0,23,0,181,0,0,0,34,0,70,0,0,0,62,0,0,0,76,0,141,0,150,0,183,0,121,0,220,0,45,0,0,0,10,0,52,0,213,0,0,0,179,0,30,0,96,0,42,0,142,0,49,0,118,0,0,0,250,0,0,0,166,0,125,0,111,0,165,0,0,0,32,0,106,0,232,0,254,0,196,0,0,0,233,0,145,0,67,0,0,0,164,0,0,0,246,0,98,0,180,0,49,0,150,0,0,0,222,0,82,0,0,0,186,0,5,0,83,0,0,0,215,0,154,0,127,0,247,0,189,0,145,0,254,0,209,0,82,0,194,0,39,0,0,0,0,0,71,0,41,0,243,0,1,0,241,0,112,0,13,0,26,0,200,0,118,0,179,0,0,0,136,0,182,0,47,0,89,0,191,0,226,0,199,0,0,0,153,0,28,0,128,0,0,0,0,0,84,0,0,0,179,0,38,0,115,0,31,0,0,0,36,0,32,0,50,0,210,0,0,0,0,0,170,0,46,0,214,0,199,0,21,0,165,0,90,0,208,0,212,0,89,0,100,0,131,0,25,0,4,0,221,0,0,0,35,0,0,0,210,0,1,0,0,0,65,0,0,0,80,0,35,0,78,0,20,0,19,0,187,0,222,0,236,0,40,0,239,0,6,0,240,0,104,0,213,0,187,0,141,0,112,0,0,0,240,0,112,0,91,0,212,0,249,0,0,0,152,0,0,0,0,0,240,0,39,0,174,0,0,0,137,0,0,0,33,0,0,0,34,0,172,0,193,0,81,0,119,0,230,0,99,0,59,0,0,0,143,0,0,0,55,0,149,0,0,0,211,0,233,0,12,0,0,0,148,0,0,0,238,0,80,0,36,0,144,0,96,0,0,0,68,0,140,0,0,0,133,0,2,0,0,0,2,0,103,0,166,0,172,0,233,0,0,0,55,0,53,0,109,0,22,0,121,0,33,0,0,0,36,0,229,0,45,0,242,0,74,0,155,0,115,0,0,0,37,0,0,0,0,0,242,0,202,0,0,0,89,0,97,0,231,0,163,0,0,0,110,0,152,0,107,0,193,0,200,0,230,0,12,0,29,0,0,0,33,0,159,0,0,0,60,0,0,0,185,0,200,0,217,0,120,0,104,0,139,0,6,0,218,0,138,0,173,0,98,0,195,0,40,0,210,0,0,0,0,0,0,0,186,0,233,0,4,0,88,0,72,0,202,0,127,0,219,0,229,0,0,0,86,0,142,0,0,0,37,0,143,0,81,0,22,0,186,0,224,0,25,0,0,0,181,0,197,0,217,0,0,0,0,0,230,0,229,0,150,0,100,0,128,0,0,0,151,0,197,0,204,0,150,0,7,0,29,0,97,0,123,0,25,0,179,0,247,0,54,0,184,0,51,0,243,0,213,0,243,0,44,0,210,0,225,0,97,0,0,0,206,0,61,0,111,0,25,0,109,0,190,0,246,0,0,0,0,0,174,0,14,0,14,0,0,0,47,0,8,0,90,0,0,0,92,0,0,0,204,0,225,0,29,0,131,0,239,0,0,0,138,0,0,0,45,0,1,0,171,0,113,0,24,0,70,0,0,0,0,0,196,0,120,0,0,0,77,0,63,0,69,0,67,0,206,0,85,0,167,0,0,0,233,0,182,0,113,0,0,0,36,0,121,0,38,0,53,0,23,0,0,0,104,0,36,0,144,0,8,0,0,0,23,0,56,0,0,0,214,0,167,0,0,0,69,0,245,0,0,0,24,0,125,0,23,0,102,0,196,0,137,0,224,0,214,0,56,0,46,0,0,0,105,0,165,0,152,0,0,0,0,0,0,0,243,0,0,0,86,0,42,0,66,0,123,0,176,0,166,0,78,0,94,0,101,0,237,0,101,0,155,0,130,0,48,0,94,0,247,0,160,0,249,0,120,0,235,0,0,0,246,0,246,0,53,0,84,0,137,0,103,0,133,0,0,0,80,0,231,0,115,0,14,0,121,0,121,0,0,0,68,0,180,0,110,0,109,0,115,0,128,0,125,0,161,0,139,0,0,0,139,0,198,0,120,0,0,0,253,0,83,0,129,0,122,0,168,0,215,0,220,0,69,0,0,0,146,0,114,0,0,0,0,0,32,0,235,0,132,0,6,0,172,0,0,0,160,0,159,0,124,0,62,0,0,0,127,0,0,0,117,0,0,0,0,0,48,0,0,0,251,0,143,0,141,0,189,0,141,0,79,0,92,0,0,0,238,0,0,0,138,0,166,0,126,0,213,0,0,0,114,0,144,0,206,0,221,0,47,0,196,0,32,0,161,0,239,0,132,0,228,0,0,0,43,0,0,0,0,0,0,0,98,0,108,0,87,0,249,0,149,0,15,0,247,0,158,0,183,0,0,0,169,0,86,0,169,0,142,0,0,0,132,0,96,0,0,0,3,0,203,0,161,0,54,0,0,0,218,0,139,0,228,0,163,0,71,0,0,0,40,0,179,0,191,0,0,0,179,0,0,0,173,0,0,0,39,0,0,0,254,0,138,0,180,0,0,0,178,0,195,0,115,0,39,0,234,0,210,0,55,0,129,0,209,0,34,0,64,0,0,0,14,0,111,0,20,0,156,0,0,0,217,0,92,0,0,0,239,0,0,0,195,0,24,0,0,0,125,0,0,0,0,0,105,0,120,0,0,0,102,0,175,0,79,0,92,0,0,0,13,0,116,0,78,0,0,0,164,0,216,0,28,0,21,0,180,0,94,0,102,0,139,0,0,0,104,0,0,0,15,0,242,0,163,0,76,0,52,0,138,0,25,0,63,0,108,0,84,0,60,0,144,0,213,0,51,0,127,0,203,0,0,0,122,0,34,0,0,0,186,0,247,0,66,0,0,0,219,0,0,0,108,0,132,0,48,0,74,0,0,0,207,0,63,0,121,0,19,0,0,0,0,0,0,0,110,0,180,0,4,0,212,0,46,0,201,0,0,0,0,0,138,0,185,0,62,0,93,0,251,0,204,0,224,0,140,0,170,0,180,0,88,0,89,0,11,0,160,0,241,0,94,0,75,0,137,0,44,0,0,0,156,0,162,0,229,0,184,0,0,0,237,0,253,0,163,0,48,0,235,0,152,0,144,0,100,0,0,0,46,0,124,0,55,0,0,0,83,0,182,0,175,0,88,0,168,0,23,0,85,0,197,0,114,0,115,0,194,0,201,0,113,0,173,0,56,0,207,0,0,0,32,0,180,0,0,0,77,0,240,0,0,0,65,0,183,0,0,0);
signal scenario_full  : scenario_type := (3,31,244,31,244,30,102,31,14,31,123,31,123,30,177,31,6,31,6,30,6,29,6,28,159,31,159,30,101,31,101,30,205,31,205,30,224,31,86,31,243,31,243,30,243,29,124,31,73,31,73,30,24,31,176,31,176,30,121,31,177,31,77,31,125,31,240,31,29,31,112,31,112,30,217,31,160,31,247,31,226,31,116,31,86,31,60,31,238,31,154,31,181,31,45,31,255,31,255,30,255,29,255,28,13,31,26,31,86,31,86,30,125,31,191,31,239,31,239,30,213,31,184,31,155,31,155,30,160,31,160,30,119,31,62,31,237,31,20,31,39,31,166,31,210,31,176,31,159,31,96,31,207,31,29,31,132,31,54,31,234,31,150,31,167,31,202,31,223,31,232,31,234,31,9,31,205,31,109,31,109,30,109,29,109,28,160,31,21,31,21,30,97,31,199,31,169,31,139,31,226,31,254,31,33,31,11,31,199,31,189,31,194,31,131,31,14,31,33,31,170,31,170,30,76,31,199,31,199,30,143,31,230,31,40,31,40,30,134,31,144,31,16,31,37,31,37,30,37,29,212,31,212,30,152,31,29,31,29,30,215,31,215,30,215,29,202,31,5,31,5,30,32,31,18,31,213,31,213,30,54,31,67,31,67,30,133,31,155,31,99,31,244,31,244,30,23,31,181,31,181,30,34,31,70,31,70,30,62,31,62,30,76,31,141,31,150,31,183,31,121,31,220,31,45,31,45,30,10,31,52,31,213,31,213,30,179,31,30,31,96,31,42,31,142,31,49,31,118,31,118,30,250,31,250,30,166,31,125,31,111,31,165,31,165,30,32,31,106,31,232,31,254,31,196,31,196,30,233,31,145,31,67,31,67,30,164,31,164,30,246,31,98,31,180,31,49,31,150,31,150,30,222,31,82,31,82,30,186,31,5,31,83,31,83,30,215,31,154,31,127,31,247,31,189,31,145,31,254,31,209,31,82,31,194,31,39,31,39,30,39,29,71,31,41,31,243,31,1,31,241,31,112,31,13,31,26,31,200,31,118,31,179,31,179,30,136,31,182,31,47,31,89,31,191,31,226,31,199,31,199,30,153,31,28,31,128,31,128,30,128,29,84,31,84,30,179,31,38,31,115,31,31,31,31,30,36,31,32,31,50,31,210,31,210,30,210,29,170,31,46,31,214,31,199,31,21,31,165,31,90,31,208,31,212,31,89,31,100,31,131,31,25,31,4,31,221,31,221,30,35,31,35,30,210,31,1,31,1,30,65,31,65,30,80,31,35,31,78,31,20,31,19,31,187,31,222,31,236,31,40,31,239,31,6,31,240,31,104,31,213,31,187,31,141,31,112,31,112,30,240,31,112,31,91,31,212,31,249,31,249,30,152,31,152,30,152,29,240,31,39,31,174,31,174,30,137,31,137,30,33,31,33,30,34,31,172,31,193,31,81,31,119,31,230,31,99,31,59,31,59,30,143,31,143,30,55,31,149,31,149,30,211,31,233,31,12,31,12,30,148,31,148,30,238,31,80,31,36,31,144,31,96,31,96,30,68,31,140,31,140,30,133,31,2,31,2,30,2,31,103,31,166,31,172,31,233,31,233,30,55,31,53,31,109,31,22,31,121,31,33,31,33,30,36,31,229,31,45,31,242,31,74,31,155,31,115,31,115,30,37,31,37,30,37,29,242,31,202,31,202,30,89,31,97,31,231,31,163,31,163,30,110,31,152,31,107,31,193,31,200,31,230,31,12,31,29,31,29,30,33,31,159,31,159,30,60,31,60,30,185,31,200,31,217,31,120,31,104,31,139,31,6,31,218,31,138,31,173,31,98,31,195,31,40,31,210,31,210,30,210,29,210,28,186,31,233,31,4,31,88,31,72,31,202,31,127,31,219,31,229,31,229,30,86,31,142,31,142,30,37,31,143,31,81,31,22,31,186,31,224,31,25,31,25,30,181,31,197,31,217,31,217,30,217,29,230,31,229,31,150,31,100,31,128,31,128,30,151,31,197,31,204,31,150,31,7,31,29,31,97,31,123,31,25,31,179,31,247,31,54,31,184,31,51,31,243,31,213,31,243,31,44,31,210,31,225,31,97,31,97,30,206,31,61,31,111,31,25,31,109,31,190,31,246,31,246,30,246,29,174,31,14,31,14,31,14,30,47,31,8,31,90,31,90,30,92,31,92,30,204,31,225,31,29,31,131,31,239,31,239,30,138,31,138,30,45,31,1,31,171,31,113,31,24,31,70,31,70,30,70,29,196,31,120,31,120,30,77,31,63,31,69,31,67,31,206,31,85,31,167,31,167,30,233,31,182,31,113,31,113,30,36,31,121,31,38,31,53,31,23,31,23,30,104,31,36,31,144,31,8,31,8,30,23,31,56,31,56,30,214,31,167,31,167,30,69,31,245,31,245,30,24,31,125,31,23,31,102,31,196,31,137,31,224,31,214,31,56,31,46,31,46,30,105,31,165,31,152,31,152,30,152,29,152,28,243,31,243,30,86,31,42,31,66,31,123,31,176,31,166,31,78,31,94,31,101,31,237,31,101,31,155,31,130,31,48,31,94,31,247,31,160,31,249,31,120,31,235,31,235,30,246,31,246,31,53,31,84,31,137,31,103,31,133,31,133,30,80,31,231,31,115,31,14,31,121,31,121,31,121,30,68,31,180,31,110,31,109,31,115,31,128,31,125,31,161,31,139,31,139,30,139,31,198,31,120,31,120,30,253,31,83,31,129,31,122,31,168,31,215,31,220,31,69,31,69,30,146,31,114,31,114,30,114,29,32,31,235,31,132,31,6,31,172,31,172,30,160,31,159,31,124,31,62,31,62,30,127,31,127,30,117,31,117,30,117,29,48,31,48,30,251,31,143,31,141,31,189,31,141,31,79,31,92,31,92,30,238,31,238,30,138,31,166,31,126,31,213,31,213,30,114,31,144,31,206,31,221,31,47,31,196,31,32,31,161,31,239,31,132,31,228,31,228,30,43,31,43,30,43,29,43,28,98,31,108,31,87,31,249,31,149,31,15,31,247,31,158,31,183,31,183,30,169,31,86,31,169,31,142,31,142,30,132,31,96,31,96,30,3,31,203,31,161,31,54,31,54,30,218,31,139,31,228,31,163,31,71,31,71,30,40,31,179,31,191,31,191,30,179,31,179,30,173,31,173,30,39,31,39,30,254,31,138,31,180,31,180,30,178,31,195,31,115,31,39,31,234,31,210,31,55,31,129,31,209,31,34,31,64,31,64,30,14,31,111,31,20,31,156,31,156,30,217,31,92,31,92,30,239,31,239,30,195,31,24,31,24,30,125,31,125,30,125,29,105,31,120,31,120,30,102,31,175,31,79,31,92,31,92,30,13,31,116,31,78,31,78,30,164,31,216,31,28,31,21,31,180,31,94,31,102,31,139,31,139,30,104,31,104,30,15,31,242,31,163,31,76,31,52,31,138,31,25,31,63,31,108,31,84,31,60,31,144,31,213,31,51,31,127,31,203,31,203,30,122,31,34,31,34,30,186,31,247,31,66,31,66,30,219,31,219,30,108,31,132,31,48,31,74,31,74,30,207,31,63,31,121,31,19,31,19,30,19,29,19,28,110,31,180,31,4,31,212,31,46,31,201,31,201,30,201,29,138,31,185,31,62,31,93,31,251,31,204,31,224,31,140,31,170,31,180,31,88,31,89,31,11,31,160,31,241,31,94,31,75,31,137,31,44,31,44,30,156,31,162,31,229,31,184,31,184,30,237,31,253,31,163,31,48,31,235,31,152,31,144,31,100,31,100,30,46,31,124,31,55,31,55,30,83,31,182,31,175,31,88,31,168,31,23,31,85,31,197,31,114,31,115,31,194,31,201,31,113,31,173,31,56,31,207,31,207,30,32,31,180,31,180,30,77,31,240,31,240,30,65,31,183,31,183,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
