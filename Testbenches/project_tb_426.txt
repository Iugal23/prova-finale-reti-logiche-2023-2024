-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 1016;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (90,0,31,0,0,0,58,0,20,0,45,0,186,0,252,0,126,0,53,0,131,0,189,0,219,0,0,0,87,0,54,0,0,0,0,0,0,0,171,0,122,0,194,0,233,0,0,0,0,0,0,0,0,0,13,0,209,0,0,0,71,0,123,0,198,0,223,0,183,0,0,0,159,0,155,0,93,0,0,0,193,0,101,0,253,0,7,0,151,0,19,0,0,0,138,0,168,0,241,0,9,0,0,0,0,0,147,0,135,0,132,0,170,0,182,0,108,0,125,0,0,0,213,0,204,0,120,0,93,0,0,0,149,0,0,0,65,0,7,0,122,0,0,0,191,0,165,0,5,0,123,0,152,0,74,0,237,0,0,0,122,0,79,0,53,0,233,0,56,0,23,0,93,0,181,0,44,0,1,0,0,0,229,0,119,0,0,0,85,0,0,0,195,0,93,0,130,0,171,0,186,0,83,0,32,0,0,0,0,0,161,0,146,0,149,0,74,0,57,0,0,0,248,0,78,0,163,0,13,0,207,0,0,0,203,0,0,0,183,0,182,0,10,0,91,0,0,0,52,0,195,0,58,0,0,0,87,0,24,0,0,0,165,0,0,0,166,0,84,0,226,0,21,0,0,0,64,0,217,0,96,0,4,0,0,0,0,0,128,0,124,0,0,0,18,0,112,0,0,0,176,0,118,0,0,0,0,0,132,0,123,0,99,0,244,0,198,0,0,0,238,0,0,0,0,0,195,0,0,0,46,0,86,0,98,0,35,0,138,0,125,0,0,0,0,0,120,0,227,0,99,0,215,0,124,0,85,0,221,0,0,0,143,0,0,0,182,0,55,0,248,0,70,0,122,0,192,0,180,0,174,0,82,0,0,0,207,0,227,0,0,0,53,0,223,0,227,0,146,0,104,0,180,0,232,0,28,0,0,0,246,0,167,0,192,0,238,0,35,0,157,0,226,0,166,0,128,0,121,0,0,0,210,0,48,0,190,0,0,0,78,0,220,0,93,0,123,0,227,0,237,0,148,0,151,0,252,0,0,0,176,0,91,0,156,0,119,0,151,0,213,0,204,0,167,0,144,0,0,0,252,0,0,0,0,0,0,0,0,0,117,0,0,0,107,0,165,0,94,0,237,0,92,0,98,0,0,0,171,0,246,0,207,0,161,0,160,0,217,0,204,0,0,0,1,0,58,0,67,0,8,0,224,0,92,0,204,0,59,0,0,0,131,0,136,0,182,0,90,0,109,0,179,0,0,0,8,0,0,0,102,0,228,0,198,0,0,0,198,0,158,0,0,0,35,0,41,0,157,0,0,0,0,0,48,0,9,0,149,0,0,0,17,0,0,0,20,0,0,0,0,0,78,0,33,0,80,0,107,0,223,0,170,0,180,0,168,0,0,0,213,0,235,0,99,0,90,0,80,0,0,0,155,0,0,0,35,0,0,0,81,0,152,0,0,0,101,0,0,0,212,0,207,0,88,0,203,0,196,0,72,0,67,0,191,0,0,0,0,0,25,0,5,0,200,0,0,0,72,0,123,0,0,0,0,0,52,0,72,0,0,0,243,0,28,0,45,0,251,0,98,0,88,0,224,0,33,0,207,0,0,0,134,0,38,0,0,0,88,0,233,0,0,0,85,0,232,0,0,0,34,0,6,0,169,0,182,0,77,0,140,0,105,0,198,0,90,0,13,0,157,0,144,0,205,0,13,0,134,0,231,0,146,0,84,0,166,0,116,0,140,0,0,0,118,0,23,0,58,0,161,0,31,0,35,0,0,0,168,0,0,0,0,0,68,0,244,0,79,0,43,0,0,0,180,0,42,0,243,0,42,0,18,0,0,0,130,0,159,0,139,0,6,0,139,0,76,0,22,0,0,0,248,0,0,0,125,0,38,0,98,0,0,0,230,0,220,0,93,0,141,0,218,0,0,0,0,0,0,0,108,0,10,0,17,0,109,0,170,0,125,0,84,0,41,0,201,0,151,0,55,0,245,0,192,0,0,0,0,0,168,0,0,0,0,0,69,0,13,0,0,0,5,0,14,0,160,0,0,0,178,0,87,0,150,0,2,0,98,0,233,0,156,0,143,0,131,0,58,0,241,0,0,0,0,0,148,0,49,0,76,0,94,0,22,0,7,0,0,0,0,0,0,0,252,0,194,0,5,0,62,0,108,0,0,0,38,0,142,0,0,0,108,0,235,0,125,0,133,0,213,0,47,0,205,0,15,0,255,0,3,0,127,0,238,0,122,0,75,0,217,0,51,0,133,0,157,0,0,0,164,0,160,0,90,0,0,0,190,0,100,0,0,0,223,0,130,0,78,0,0,0,236,0,49,0,109,0,76,0,71,0,172,0,0,0,0,0,58,0,105,0,0,0,56,0,244,0,64,0,208,0,0,0,8,0,176,0,178,0,99,0,125,0,88,0,29,0,251,0,181,0,78,0,93,0,45,0,0,0,213,0,10,0,9,0,59,0,54,0,132,0,29,0,64,0,16,0,0,0,119,0,49,0,114,0,86,0,121,0,2,0,0,0,3,0,58,0,205,0,239,0,56,0,127,0,0,0,0,0,91,0,125,0,0,0,0,0,0,0,248,0,234,0,100,0,141,0,0,0,42,0,57,0,165,0,38,0,0,0,162,0,149,0,0,0,60,0,231,0,106,0,172,0,0,0,68,0,192,0,0,0,206,0,200,0,0,0,245,0,160,0,9,0,221,0,88,0,198,0,89,0,152,0,51,0,93,0,149,0,134,0,208,0,0,0,122,0,114,0,88,0,244,0,0,0,200,0,127,0,205,0,52,0,112,0,230,0,71,0,0,0,158,0,216,0,126,0,232,0,0,0,203,0,140,0,64,0,76,0,227,0,0,0,202,0,154,0,0,0,41,0,8,0,0,0,205,0,147,0,201,0,233,0,49,0,106,0,0,0,149,0,31,0,93,0,125,0,195,0,27,0,0,0,203,0,198,0,176,0,77,0,223,0,170,0,76,0,170,0,238,0,248,0,167,0,56,0,178,0,254,0,15,0,209,0,0,0,221,0,154,0,123,0,0,0,0,0,111,0,167,0,252,0,199,0,213,0,52,0,74,0,106,0,0,0,145,0,0,0,80,0,127,0,173,0,0,0,25,0,74,0,215,0,0,0,165,0,75,0,20,0,157,0,19,0,35,0,0,0,149,0,219,0,0,0,0,0,247,0,30,0,225,0,164,0,31,0,84,0,0,0,68,0,185,0,6,0,118,0,90,0,131,0,0,0,0,0,0,0,198,0,145,0,219,0,0,0,130,0,76,0,243,0,0,0,0,0,129,0,235,0,208,0,32,0,98,0,82,0,159,0,0,0,157,0,88,0,43,0,183,0,238,0,217,0,32,0,194,0,48,0,61,0,87,0,173,0,0,0,176,0,0,0,14,0,89,0,114,0,60,0,142,0,68,0,82,0,0,0,76,0,111,0,67,0,175,0,0,0,27,0,15,0,244,0,127,0,20,0,192,0,96,0,121,0,0,0,254,0,101,0,63,0,0,0,0,0,96,0,118,0,26,0,75,0,129,0,0,0,0,0,126,0,0,0,29,0,0,0,181,0,0,0,220,0,179,0,0,0,229,0,48,0,211,0,176,0,174,0,91,0,215,0,15,0,48,0,241,0,175,0,0,0,251,0,0,0,160,0,224,0,82,0,152,0,214,0,29,0,0,0,0,0,194,0,75,0,25,0,80,0,48,0,0,0,0,0,0,0,156,0,0,0,0,0,155,0,142,0,170,0,167,0,97,0,98,0,183,0,62,0,161,0,139,0,112,0,0,0,0,0,145,0,0,0,129,0,0,0,44,0,0,0,10,0,213,0,0,0,53,0,77,0,135,0,75,0,166,0,106,0,39,0,60,0,77,0,138,0,100,0,42,0,0,0,115,0,0,0,145,0,1,0,249,0,0,0,102,0,1,0,219,0,46,0,23,0,70,0,0,0,0,0,197,0,42,0,0,0,0,0,185,0,148,0,22,0,116,0,43,0,99,0,0,0,0,0,87,0,0,0,6,0,18,0,203,0,22,0,179,0,0,0,0,0,122,0,23,0,143,0,150,0,67,0,233,0,115,0,64,0,120,0,184,0,225,0,88,0,5,0,0,0,16,0,0,0,151,0,218,0,131,0,0,0,97,0,208,0,184,0,0,0,196,0,0,0,185,0,34,0,238,0,56,0,177,0,95,0,159,0,61,0,115,0,118,0,164,0,14,0,158,0,221,0,166,0,0,0,38,0,47,0,0,0,0,0,0,0,73,0,155,0,94,0,0,0,71,0,120,0,71,0,234,0,51,0,169,0,202,0,33,0,128,0,94,0,105,0,0,0,207,0,0,0,196,0,56,0,188,0,124,0,124,0,0,0,0,0,0,0,223,0,235,0,179,0,12,0,145,0,255,0,59,0,92,0,0,0,175,0,166,0,34,0,48,0,190,0,145,0,121,0,164,0,130,0,203,0,0,0,136,0,89,0,53,0,0,0,79,0,97,0,30,0,63,0,98,0,123,0,60,0,149,0,23,0,251,0,25,0,0,0,242,0,3,0,234,0,140,0);
signal scenario_full  : scenario_type := (90,31,31,31,31,30,58,31,20,31,45,31,186,31,252,31,126,31,53,31,131,31,189,31,219,31,219,30,87,31,54,31,54,30,54,29,54,28,171,31,122,31,194,31,233,31,233,30,233,29,233,28,233,27,13,31,209,31,209,30,71,31,123,31,198,31,223,31,183,31,183,30,159,31,155,31,93,31,93,30,193,31,101,31,253,31,7,31,151,31,19,31,19,30,138,31,168,31,241,31,9,31,9,30,9,29,147,31,135,31,132,31,170,31,182,31,108,31,125,31,125,30,213,31,204,31,120,31,93,31,93,30,149,31,149,30,65,31,7,31,122,31,122,30,191,31,165,31,5,31,123,31,152,31,74,31,237,31,237,30,122,31,79,31,53,31,233,31,56,31,23,31,93,31,181,31,44,31,1,31,1,30,229,31,119,31,119,30,85,31,85,30,195,31,93,31,130,31,171,31,186,31,83,31,32,31,32,30,32,29,161,31,146,31,149,31,74,31,57,31,57,30,248,31,78,31,163,31,13,31,207,31,207,30,203,31,203,30,183,31,182,31,10,31,91,31,91,30,52,31,195,31,58,31,58,30,87,31,24,31,24,30,165,31,165,30,166,31,84,31,226,31,21,31,21,30,64,31,217,31,96,31,4,31,4,30,4,29,128,31,124,31,124,30,18,31,112,31,112,30,176,31,118,31,118,30,118,29,132,31,123,31,99,31,244,31,198,31,198,30,238,31,238,30,238,29,195,31,195,30,46,31,86,31,98,31,35,31,138,31,125,31,125,30,125,29,120,31,227,31,99,31,215,31,124,31,85,31,221,31,221,30,143,31,143,30,182,31,55,31,248,31,70,31,122,31,192,31,180,31,174,31,82,31,82,30,207,31,227,31,227,30,53,31,223,31,227,31,146,31,104,31,180,31,232,31,28,31,28,30,246,31,167,31,192,31,238,31,35,31,157,31,226,31,166,31,128,31,121,31,121,30,210,31,48,31,190,31,190,30,78,31,220,31,93,31,123,31,227,31,237,31,148,31,151,31,252,31,252,30,176,31,91,31,156,31,119,31,151,31,213,31,204,31,167,31,144,31,144,30,252,31,252,30,252,29,252,28,252,27,117,31,117,30,107,31,165,31,94,31,237,31,92,31,98,31,98,30,171,31,246,31,207,31,161,31,160,31,217,31,204,31,204,30,1,31,58,31,67,31,8,31,224,31,92,31,204,31,59,31,59,30,131,31,136,31,182,31,90,31,109,31,179,31,179,30,8,31,8,30,102,31,228,31,198,31,198,30,198,31,158,31,158,30,35,31,41,31,157,31,157,30,157,29,48,31,9,31,149,31,149,30,17,31,17,30,20,31,20,30,20,29,78,31,33,31,80,31,107,31,223,31,170,31,180,31,168,31,168,30,213,31,235,31,99,31,90,31,80,31,80,30,155,31,155,30,35,31,35,30,81,31,152,31,152,30,101,31,101,30,212,31,207,31,88,31,203,31,196,31,72,31,67,31,191,31,191,30,191,29,25,31,5,31,200,31,200,30,72,31,123,31,123,30,123,29,52,31,72,31,72,30,243,31,28,31,45,31,251,31,98,31,88,31,224,31,33,31,207,31,207,30,134,31,38,31,38,30,88,31,233,31,233,30,85,31,232,31,232,30,34,31,6,31,169,31,182,31,77,31,140,31,105,31,198,31,90,31,13,31,157,31,144,31,205,31,13,31,134,31,231,31,146,31,84,31,166,31,116,31,140,31,140,30,118,31,23,31,58,31,161,31,31,31,35,31,35,30,168,31,168,30,168,29,68,31,244,31,79,31,43,31,43,30,180,31,42,31,243,31,42,31,18,31,18,30,130,31,159,31,139,31,6,31,139,31,76,31,22,31,22,30,248,31,248,30,125,31,38,31,98,31,98,30,230,31,220,31,93,31,141,31,218,31,218,30,218,29,218,28,108,31,10,31,17,31,109,31,170,31,125,31,84,31,41,31,201,31,151,31,55,31,245,31,192,31,192,30,192,29,168,31,168,30,168,29,69,31,13,31,13,30,5,31,14,31,160,31,160,30,178,31,87,31,150,31,2,31,98,31,233,31,156,31,143,31,131,31,58,31,241,31,241,30,241,29,148,31,49,31,76,31,94,31,22,31,7,31,7,30,7,29,7,28,252,31,194,31,5,31,62,31,108,31,108,30,38,31,142,31,142,30,108,31,235,31,125,31,133,31,213,31,47,31,205,31,15,31,255,31,3,31,127,31,238,31,122,31,75,31,217,31,51,31,133,31,157,31,157,30,164,31,160,31,90,31,90,30,190,31,100,31,100,30,223,31,130,31,78,31,78,30,236,31,49,31,109,31,76,31,71,31,172,31,172,30,172,29,58,31,105,31,105,30,56,31,244,31,64,31,208,31,208,30,8,31,176,31,178,31,99,31,125,31,88,31,29,31,251,31,181,31,78,31,93,31,45,31,45,30,213,31,10,31,9,31,59,31,54,31,132,31,29,31,64,31,16,31,16,30,119,31,49,31,114,31,86,31,121,31,2,31,2,30,3,31,58,31,205,31,239,31,56,31,127,31,127,30,127,29,91,31,125,31,125,30,125,29,125,28,248,31,234,31,100,31,141,31,141,30,42,31,57,31,165,31,38,31,38,30,162,31,149,31,149,30,60,31,231,31,106,31,172,31,172,30,68,31,192,31,192,30,206,31,200,31,200,30,245,31,160,31,9,31,221,31,88,31,198,31,89,31,152,31,51,31,93,31,149,31,134,31,208,31,208,30,122,31,114,31,88,31,244,31,244,30,200,31,127,31,205,31,52,31,112,31,230,31,71,31,71,30,158,31,216,31,126,31,232,31,232,30,203,31,140,31,64,31,76,31,227,31,227,30,202,31,154,31,154,30,41,31,8,31,8,30,205,31,147,31,201,31,233,31,49,31,106,31,106,30,149,31,31,31,93,31,125,31,195,31,27,31,27,30,203,31,198,31,176,31,77,31,223,31,170,31,76,31,170,31,238,31,248,31,167,31,56,31,178,31,254,31,15,31,209,31,209,30,221,31,154,31,123,31,123,30,123,29,111,31,167,31,252,31,199,31,213,31,52,31,74,31,106,31,106,30,145,31,145,30,80,31,127,31,173,31,173,30,25,31,74,31,215,31,215,30,165,31,75,31,20,31,157,31,19,31,35,31,35,30,149,31,219,31,219,30,219,29,247,31,30,31,225,31,164,31,31,31,84,31,84,30,68,31,185,31,6,31,118,31,90,31,131,31,131,30,131,29,131,28,198,31,145,31,219,31,219,30,130,31,76,31,243,31,243,30,243,29,129,31,235,31,208,31,32,31,98,31,82,31,159,31,159,30,157,31,88,31,43,31,183,31,238,31,217,31,32,31,194,31,48,31,61,31,87,31,173,31,173,30,176,31,176,30,14,31,89,31,114,31,60,31,142,31,68,31,82,31,82,30,76,31,111,31,67,31,175,31,175,30,27,31,15,31,244,31,127,31,20,31,192,31,96,31,121,31,121,30,254,31,101,31,63,31,63,30,63,29,96,31,118,31,26,31,75,31,129,31,129,30,129,29,126,31,126,30,29,31,29,30,181,31,181,30,220,31,179,31,179,30,229,31,48,31,211,31,176,31,174,31,91,31,215,31,15,31,48,31,241,31,175,31,175,30,251,31,251,30,160,31,224,31,82,31,152,31,214,31,29,31,29,30,29,29,194,31,75,31,25,31,80,31,48,31,48,30,48,29,48,28,156,31,156,30,156,29,155,31,142,31,170,31,167,31,97,31,98,31,183,31,62,31,161,31,139,31,112,31,112,30,112,29,145,31,145,30,129,31,129,30,44,31,44,30,10,31,213,31,213,30,53,31,77,31,135,31,75,31,166,31,106,31,39,31,60,31,77,31,138,31,100,31,42,31,42,30,115,31,115,30,145,31,1,31,249,31,249,30,102,31,1,31,219,31,46,31,23,31,70,31,70,30,70,29,197,31,42,31,42,30,42,29,185,31,148,31,22,31,116,31,43,31,99,31,99,30,99,29,87,31,87,30,6,31,18,31,203,31,22,31,179,31,179,30,179,29,122,31,23,31,143,31,150,31,67,31,233,31,115,31,64,31,120,31,184,31,225,31,88,31,5,31,5,30,16,31,16,30,151,31,218,31,131,31,131,30,97,31,208,31,184,31,184,30,196,31,196,30,185,31,34,31,238,31,56,31,177,31,95,31,159,31,61,31,115,31,118,31,164,31,14,31,158,31,221,31,166,31,166,30,38,31,47,31,47,30,47,29,47,28,73,31,155,31,94,31,94,30,71,31,120,31,71,31,234,31,51,31,169,31,202,31,33,31,128,31,94,31,105,31,105,30,207,31,207,30,196,31,56,31,188,31,124,31,124,31,124,30,124,29,124,28,223,31,235,31,179,31,12,31,145,31,255,31,59,31,92,31,92,30,175,31,166,31,34,31,48,31,190,31,145,31,121,31,164,31,130,31,203,31,203,30,136,31,89,31,53,31,53,30,79,31,97,31,30,31,63,31,98,31,123,31,60,31,149,31,23,31,251,31,25,31,25,30,242,31,3,31,234,31,140,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
