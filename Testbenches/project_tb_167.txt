-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 522;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (88,0,28,0,178,0,0,0,0,0,169,0,0,0,84,0,109,0,83,0,45,0,57,0,242,0,0,0,234,0,0,0,158,0,104,0,0,0,174,0,0,0,120,0,0,0,44,0,110,0,0,0,123,0,133,0,134,0,24,0,209,0,222,0,241,0,0,0,243,0,35,0,139,0,187,0,106,0,206,0,141,0,182,0,115,0,36,0,0,0,205,0,0,0,242,0,43,0,47,0,150,0,229,0,200,0,76,0,167,0,188,0,224,0,242,0,182,0,209,0,90,0,154,0,0,0,231,0,81,0,210,0,26,0,0,0,197,0,48,0,205,0,55,0,0,0,68,0,175,0,168,0,110,0,141,0,0,0,116,0,242,0,0,0,194,0,0,0,42,0,183,0,156,0,194,0,75,0,174,0,27,0,0,0,37,0,55,0,70,0,0,0,139,0,165,0,102,0,251,0,20,0,94,0,0,0,179,0,145,0,0,0,204,0,198,0,55,0,112,0,216,0,56,0,206,0,0,0,115,0,236,0,218,0,252,0,182,0,0,0,0,0,0,0,0,0,87,0,219,0,138,0,116,0,100,0,223,0,93,0,33,0,0,0,0,0,0,0,19,0,245,0,251,0,186,0,0,0,39,0,46,0,124,0,36,0,214,0,35,0,195,0,142,0,196,0,172,0,0,0,0,0,49,0,206,0,95,0,0,0,0,0,33,0,41,0,0,0,0,0,117,0,254,0,225,0,240,0,21,0,163,0,142,0,107,0,194,0,160,0,0,0,173,0,11,0,143,0,140,0,149,0,162,0,0,0,213,0,0,0,21,0,91,0,11,0,0,0,0,0,98,0,187,0,32,0,160,0,15,0,100,0,23,0,115,0,86,0,200,0,163,0,180,0,140,0,118,0,212,0,6,0,0,0,0,0,196,0,232,0,0,0,74,0,12,0,0,0,0,0,0,0,163,0,0,0,190,0,189,0,252,0,58,0,78,0,247,0,0,0,25,0,69,0,11,0,42,0,233,0,164,0,8,0,172,0,0,0,200,0,178,0,186,0,194,0,50,0,63,0,0,0,182,0,76,0,164,0,73,0,237,0,0,0,196,0,207,0,0,0,249,0,242,0,101,0,226,0,142,0,181,0,227,0,54,0,224,0,142,0,215,0,131,0,35,0,205,0,127,0,251,0,184,0,0,0,48,0,102,0,0,0,211,0,91,0,93,0,0,0,156,0,214,0,212,0,60,0,0,0,103,0,0,0,29,0,0,0,129,0,52,0,163,0,0,0,3,0,0,0,79,0,144,0,154,0,176,0,189,0,181,0,126,0,91,0,124,0,25,0,13,0,0,0,5,0,0,0,92,0,113,0,30,0,247,0,77,0,205,0,91,0,100,0,134,0,8,0,0,0,0,0,143,0,143,0,0,0,85,0,78,0,229,0,122,0,208,0,0,0,0,0,50,0,195,0,250,0,93,0,176,0,28,0,161,0,173,0,190,0,216,0,241,0,146,0,103,0,106,0,116,0,194,0,225,0,85,0,100,0,200,0,53,0,0,0,0,0,84,0,0,0,0,0,99,0,160,0,135,0,85,0,62,0,0,0,221,0,16,0,94,0,0,0,212,0,103,0,0,0,244,0,136,0,0,0,247,0,140,0,223,0,238,0,0,0,138,0,42,0,0,0,0,0,0,0,100,0,237,0,58,0,96,0,175,0,0,0,125,0,111,0,0,0,112,0,75,0,0,0,250,0,107,0,225,0,192,0,86,0,5,0,211,0,206,0,94,0,139,0,178,0,0,0,0,0,158,0,67,0,0,0,0,0,166,0,41,0,160,0,159,0,216,0,149,0,58,0,13,0,0,0,0,0,0,0,197,0,68,0,170,0,113,0,190,0,0,0,0,0,0,0,207,0,0,0,46,0,114,0,146,0,23,0,240,0,220,0,238,0,152,0,0,0,236,0,95,0,14,0,0,0,126,0,0,0,0,0,75,0,57,0,251,0,48,0,0,0,45,0,204,0,125,0,0,0,210,0,117,0,189,0,0,0,195,0,165,0,22,0,162,0,188,0,0,0,62,0,175,0,100,0,82,0,89,0,219,0,0,0,9,0,105,0,99,0,238,0,47,0,240,0,239,0,148,0,153,0,5,0,175,0,97,0,0,0,56,0,95,0,99,0,0,0,92,0,109,0,168,0,0,0,80,0,200,0,185,0,201,0,192,0,70,0,0,0,16,0,113,0,100,0,144,0,47,0,221,0,162,0,205,0,0,0,148,0,39,0,0,0,96,0,0,0,247,0,0,0,0,0,48,0,87,0,142,0,25,0,0,0,130,0,207,0,0,0,0,0,123,0,0,0,0,0);
signal scenario_full  : scenario_type := (88,31,28,31,178,31,178,30,178,29,169,31,169,30,84,31,109,31,83,31,45,31,57,31,242,31,242,30,234,31,234,30,158,31,104,31,104,30,174,31,174,30,120,31,120,30,44,31,110,31,110,30,123,31,133,31,134,31,24,31,209,31,222,31,241,31,241,30,243,31,35,31,139,31,187,31,106,31,206,31,141,31,182,31,115,31,36,31,36,30,205,31,205,30,242,31,43,31,47,31,150,31,229,31,200,31,76,31,167,31,188,31,224,31,242,31,182,31,209,31,90,31,154,31,154,30,231,31,81,31,210,31,26,31,26,30,197,31,48,31,205,31,55,31,55,30,68,31,175,31,168,31,110,31,141,31,141,30,116,31,242,31,242,30,194,31,194,30,42,31,183,31,156,31,194,31,75,31,174,31,27,31,27,30,37,31,55,31,70,31,70,30,139,31,165,31,102,31,251,31,20,31,94,31,94,30,179,31,145,31,145,30,204,31,198,31,55,31,112,31,216,31,56,31,206,31,206,30,115,31,236,31,218,31,252,31,182,31,182,30,182,29,182,28,182,27,87,31,219,31,138,31,116,31,100,31,223,31,93,31,33,31,33,30,33,29,33,28,19,31,245,31,251,31,186,31,186,30,39,31,46,31,124,31,36,31,214,31,35,31,195,31,142,31,196,31,172,31,172,30,172,29,49,31,206,31,95,31,95,30,95,29,33,31,41,31,41,30,41,29,117,31,254,31,225,31,240,31,21,31,163,31,142,31,107,31,194,31,160,31,160,30,173,31,11,31,143,31,140,31,149,31,162,31,162,30,213,31,213,30,21,31,91,31,11,31,11,30,11,29,98,31,187,31,32,31,160,31,15,31,100,31,23,31,115,31,86,31,200,31,163,31,180,31,140,31,118,31,212,31,6,31,6,30,6,29,196,31,232,31,232,30,74,31,12,31,12,30,12,29,12,28,163,31,163,30,190,31,189,31,252,31,58,31,78,31,247,31,247,30,25,31,69,31,11,31,42,31,233,31,164,31,8,31,172,31,172,30,200,31,178,31,186,31,194,31,50,31,63,31,63,30,182,31,76,31,164,31,73,31,237,31,237,30,196,31,207,31,207,30,249,31,242,31,101,31,226,31,142,31,181,31,227,31,54,31,224,31,142,31,215,31,131,31,35,31,205,31,127,31,251,31,184,31,184,30,48,31,102,31,102,30,211,31,91,31,93,31,93,30,156,31,214,31,212,31,60,31,60,30,103,31,103,30,29,31,29,30,129,31,52,31,163,31,163,30,3,31,3,30,79,31,144,31,154,31,176,31,189,31,181,31,126,31,91,31,124,31,25,31,13,31,13,30,5,31,5,30,92,31,113,31,30,31,247,31,77,31,205,31,91,31,100,31,134,31,8,31,8,30,8,29,143,31,143,31,143,30,85,31,78,31,229,31,122,31,208,31,208,30,208,29,50,31,195,31,250,31,93,31,176,31,28,31,161,31,173,31,190,31,216,31,241,31,146,31,103,31,106,31,116,31,194,31,225,31,85,31,100,31,200,31,53,31,53,30,53,29,84,31,84,30,84,29,99,31,160,31,135,31,85,31,62,31,62,30,221,31,16,31,94,31,94,30,212,31,103,31,103,30,244,31,136,31,136,30,247,31,140,31,223,31,238,31,238,30,138,31,42,31,42,30,42,29,42,28,100,31,237,31,58,31,96,31,175,31,175,30,125,31,111,31,111,30,112,31,75,31,75,30,250,31,107,31,225,31,192,31,86,31,5,31,211,31,206,31,94,31,139,31,178,31,178,30,178,29,158,31,67,31,67,30,67,29,166,31,41,31,160,31,159,31,216,31,149,31,58,31,13,31,13,30,13,29,13,28,197,31,68,31,170,31,113,31,190,31,190,30,190,29,190,28,207,31,207,30,46,31,114,31,146,31,23,31,240,31,220,31,238,31,152,31,152,30,236,31,95,31,14,31,14,30,126,31,126,30,126,29,75,31,57,31,251,31,48,31,48,30,45,31,204,31,125,31,125,30,210,31,117,31,189,31,189,30,195,31,165,31,22,31,162,31,188,31,188,30,62,31,175,31,100,31,82,31,89,31,219,31,219,30,9,31,105,31,99,31,238,31,47,31,240,31,239,31,148,31,153,31,5,31,175,31,97,31,97,30,56,31,95,31,99,31,99,30,92,31,109,31,168,31,168,30,80,31,200,31,185,31,201,31,192,31,70,31,70,30,16,31,113,31,100,31,144,31,47,31,221,31,162,31,205,31,205,30,148,31,39,31,39,30,96,31,96,30,247,31,247,30,247,29,48,31,87,31,142,31,25,31,25,30,130,31,207,31,207,30,207,29,123,31,123,30,123,29);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
