-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 771;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,46,0,104,0,183,0,233,0,18,0,214,0,0,0,0,0,245,0,178,0,145,0,208,0,211,0,78,0,31,0,62,0,0,0,145,0,208,0,236,0,110,0,0,0,138,0,250,0,109,0,37,0,140,0,0,0,8,0,0,0,113,0,244,0,134,0,106,0,56,0,133,0,121,0,18,0,238,0,0,0,0,0,193,0,0,0,63,0,222,0,162,0,116,0,30,0,201,0,23,0,48,0,86,0,8,0,53,0,139,0,0,0,191,0,11,0,71,0,58,0,165,0,0,0,39,0,94,0,231,0,42,0,212,0,3,0,26,0,190,0,99,0,210,0,181,0,79,0,127,0,63,0,127,0,133,0,0,0,230,0,99,0,189,0,221,0,209,0,249,0,1,0,29,0,72,0,71,0,168,0,49,0,0,0,169,0,95,0,203,0,46,0,4,0,0,0,0,0,88,0,41,0,71,0,200,0,149,0,63,0,198,0,244,0,144,0,0,0,203,0,39,0,134,0,0,0,0,0,0,0,17,0,0,0,0,0,45,0,204,0,240,0,188,0,79,0,134,0,221,0,0,0,138,0,108,0,253,0,179,0,119,0,158,0,0,0,219,0,221,0,140,0,107,0,7,0,178,0,0,0,72,0,87,0,0,0,205,0,48,0,0,0,22,0,14,0,44,0,250,0,167,0,144,0,146,0,225,0,91,0,0,0,0,0,0,0,162,0,183,0,171,0,0,0,19,0,0,0,70,0,33,0,93,0,254,0,199,0,128,0,139,0,228,0,170,0,97,0,0,0,0,0,117,0,0,0,56,0,0,0,0,0,0,0,0,0,215,0,12,0,247,0,32,0,124,0,42,0,0,0,0,0,236,0,228,0,187,0,41,0,199,0,46,0,219,0,0,0,241,0,228,0,0,0,0,0,189,0,168,0,36,0,37,0,1,0,0,0,160,0,0,0,223,0,185,0,244,0,204,0,124,0,119,0,109,0,218,0,65,0,134,0,165,0,253,0,179,0,115,0,124,0,114,0,14,0,15,0,76,0,117,0,0,0,253,0,0,0,0,0,240,0,168,0,0,0,18,0,10,0,65,0,96,0,229,0,0,0,231,0,176,0,50,0,245,0,57,0,51,0,252,0,33,0,0,0,248,0,186,0,61,0,0,0,0,0,80,0,0,0,17,0,160,0,199,0,220,0,123,0,57,0,189,0,185,0,96,0,10,0,54,0,204,0,159,0,146,0,185,0,192,0,230,0,0,0,137,0,0,0,47,0,0,0,0,0,244,0,210,0,0,0,0,0,0,0,115,0,0,0,231,0,0,0,0,0,105,0,4,0,167,0,160,0,0,0,128,0,250,0,129,0,0,0,0,0,11,0,209,0,110,0,194,0,0,0,247,0,86,0,248,0,139,0,218,0,0,0,93,0,197,0,32,0,41,0,225,0,113,0,90,0,89,0,253,0,0,0,241,0,36,0,0,0,55,0,235,0,250,0,168,0,0,0,81,0,230,0,228,0,0,0,234,0,171,0,44,0,202,0,0,0,0,0,29,0,0,0,126,0,221,0,226,0,143,0,0,0,0,0,0,0,159,0,19,0,208,0,0,0,45,0,227,0,0,0,114,0,182,0,187,0,233,0,148,0,79,0,35,0,206,0,216,0,176,0,165,0,111,0,0,0,196,0,136,0,86,0,6,0,223,0,161,0,150,0,0,0,0,0,73,0,162,0,23,0,0,0,0,0,0,0,183,0,76,0,50,0,0,0,104,0,223,0,162,0,43,0,116,0,246,0,34,0,214,0,0,0,20,0,0,0,7,0,8,0,213,0,239,0,105,0,145,0,184,0,130,0,0,0,86,0,77,0,196,0,193,0,0,0,0,0,141,0,0,0,242,0,118,0,0,0,151,0,213,0,0,0,80,0,0,0,139,0,224,0,51,0,158,0,12,0,154,0,213,0,34,0,152,0,125,0,55,0,120,0,232,0,50,0,104,0,0,0,215,0,0,0,0,0,0,0,0,0,125,0,30,0,7,0,2,0,171,0,110,0,107,0,249,0,135,0,33,0,14,0,131,0,131,0,82,0,164,0,0,0,219,0,172,0,187,0,83,0,177,0,213,0,173,0,11,0,0,0,54,0,0,0,0,0,159,0,5,0,0,0,0,0,28,0,174,0,24,0,127,0,113,0,94,0,0,0,61,0,103,0,0,0,144,0,0,0,0,0,0,0,0,0,192,0,239,0,5,0,0,0,150,0,184,0,103,0,67,0,0,0,62,0,138,0,215,0,53,0,178,0,137,0,0,0,111,0,248,0,71,0,255,0,124,0,248,0,87,0,46,0,206,0,191,0,139,0,149,0,251,0,0,0,0,0,186,0,164,0,74,0,110,0,43,0,0,0,134,0,0,0,131,0,128,0,199,0,113,0,232,0,194,0,58,0,43,0,0,0,177,0,152,0,124,0,45,0,111,0,44,0,0,0,147,0,215,0,70,0,32,0,233,0,0,0,0,0,0,0,0,0,226,0,0,0,134,0,6,0,166,0,243,0,0,0,95,0,12,0,15,0,239,0,131,0,0,0,205,0,68,0,41,0,36,0,103,0,88,0,174,0,232,0,157,0,0,0,182,0,83,0,32,0,0,0,0,0,165,0,228,0,123,0,0,0,162,0,187,0,93,0,194,0,0,0,148,0,0,0,43,0,49,0,121,0,230,0,235,0,78,0,95,0,0,0,12,0,141,0,160,0,15,0,8,0,163,0,79,0,0,0,121,0,154,0,0,0,40,0,63,0,201,0,0,0,47,0,2,0,249,0,80,0,233,0,205,0,158,0,0,0,0,0,103,0,243,0,138,0,0,0,51,0,188,0,203,0,192,0,167,0,137,0,26,0,227,0,67,0,71,0,107,0,157,0,0,0,242,0,0,0,212,0,100,0,17,0,0,0,43,0,0,0,190,0,0,0,84,0,91,0,250,0,206,0,5,0,0,0,159,0,106,0,169,0,0,0,186,0,188,0,190,0,192,0,123,0,49,0,0,0,0,0,31,0,109,0,142,0,128,0,253,0,160,0,40,0,5,0,0,0,79,0,80,0,85,0,61,0,154,0,235,0,148,0,219,0,5,0,0,0,0,0,1,0,102,0,252,0,201,0,0,0,111,0,46,0,240,0,6,0,128,0,167,0,67,0,186,0,0,0,44,0,240,0,61,0,21,0,224,0,235,0,245,0,170,0,0,0,186,0,0,0,65,0,151,0,0,0,168,0,0,0,0,0,0,0,80,0,0,0,88,0,55,0,209,0,96,0,181,0,174,0,99,0,103,0,132,0,225,0,0,0,114,0,0,0,180,0,0,0,0,0,64,0,123,0,0,0,51,0,138,0,33,0,180,0,0,0,210,0,55,0,57,0,10,0,71,0,235,0,0,0,26,0,102,0,176,0,25,0,178,0,178,0,107,0,127,0,0,0,0,0,220,0);
signal scenario_full  : scenario_type := (0,0,46,31,104,31,183,31,233,31,18,31,214,31,214,30,214,29,245,31,178,31,145,31,208,31,211,31,78,31,31,31,62,31,62,30,145,31,208,31,236,31,110,31,110,30,138,31,250,31,109,31,37,31,140,31,140,30,8,31,8,30,113,31,244,31,134,31,106,31,56,31,133,31,121,31,18,31,238,31,238,30,238,29,193,31,193,30,63,31,222,31,162,31,116,31,30,31,201,31,23,31,48,31,86,31,8,31,53,31,139,31,139,30,191,31,11,31,71,31,58,31,165,31,165,30,39,31,94,31,231,31,42,31,212,31,3,31,26,31,190,31,99,31,210,31,181,31,79,31,127,31,63,31,127,31,133,31,133,30,230,31,99,31,189,31,221,31,209,31,249,31,1,31,29,31,72,31,71,31,168,31,49,31,49,30,169,31,95,31,203,31,46,31,4,31,4,30,4,29,88,31,41,31,71,31,200,31,149,31,63,31,198,31,244,31,144,31,144,30,203,31,39,31,134,31,134,30,134,29,134,28,17,31,17,30,17,29,45,31,204,31,240,31,188,31,79,31,134,31,221,31,221,30,138,31,108,31,253,31,179,31,119,31,158,31,158,30,219,31,221,31,140,31,107,31,7,31,178,31,178,30,72,31,87,31,87,30,205,31,48,31,48,30,22,31,14,31,44,31,250,31,167,31,144,31,146,31,225,31,91,31,91,30,91,29,91,28,162,31,183,31,171,31,171,30,19,31,19,30,70,31,33,31,93,31,254,31,199,31,128,31,139,31,228,31,170,31,97,31,97,30,97,29,117,31,117,30,56,31,56,30,56,29,56,28,56,27,215,31,12,31,247,31,32,31,124,31,42,31,42,30,42,29,236,31,228,31,187,31,41,31,199,31,46,31,219,31,219,30,241,31,228,31,228,30,228,29,189,31,168,31,36,31,37,31,1,31,1,30,160,31,160,30,223,31,185,31,244,31,204,31,124,31,119,31,109,31,218,31,65,31,134,31,165,31,253,31,179,31,115,31,124,31,114,31,14,31,15,31,76,31,117,31,117,30,253,31,253,30,253,29,240,31,168,31,168,30,18,31,10,31,65,31,96,31,229,31,229,30,231,31,176,31,50,31,245,31,57,31,51,31,252,31,33,31,33,30,248,31,186,31,61,31,61,30,61,29,80,31,80,30,17,31,160,31,199,31,220,31,123,31,57,31,189,31,185,31,96,31,10,31,54,31,204,31,159,31,146,31,185,31,192,31,230,31,230,30,137,31,137,30,47,31,47,30,47,29,244,31,210,31,210,30,210,29,210,28,115,31,115,30,231,31,231,30,231,29,105,31,4,31,167,31,160,31,160,30,128,31,250,31,129,31,129,30,129,29,11,31,209,31,110,31,194,31,194,30,247,31,86,31,248,31,139,31,218,31,218,30,93,31,197,31,32,31,41,31,225,31,113,31,90,31,89,31,253,31,253,30,241,31,36,31,36,30,55,31,235,31,250,31,168,31,168,30,81,31,230,31,228,31,228,30,234,31,171,31,44,31,202,31,202,30,202,29,29,31,29,30,126,31,221,31,226,31,143,31,143,30,143,29,143,28,159,31,19,31,208,31,208,30,45,31,227,31,227,30,114,31,182,31,187,31,233,31,148,31,79,31,35,31,206,31,216,31,176,31,165,31,111,31,111,30,196,31,136,31,86,31,6,31,223,31,161,31,150,31,150,30,150,29,73,31,162,31,23,31,23,30,23,29,23,28,183,31,76,31,50,31,50,30,104,31,223,31,162,31,43,31,116,31,246,31,34,31,214,31,214,30,20,31,20,30,7,31,8,31,213,31,239,31,105,31,145,31,184,31,130,31,130,30,86,31,77,31,196,31,193,31,193,30,193,29,141,31,141,30,242,31,118,31,118,30,151,31,213,31,213,30,80,31,80,30,139,31,224,31,51,31,158,31,12,31,154,31,213,31,34,31,152,31,125,31,55,31,120,31,232,31,50,31,104,31,104,30,215,31,215,30,215,29,215,28,215,27,125,31,30,31,7,31,2,31,171,31,110,31,107,31,249,31,135,31,33,31,14,31,131,31,131,31,82,31,164,31,164,30,219,31,172,31,187,31,83,31,177,31,213,31,173,31,11,31,11,30,54,31,54,30,54,29,159,31,5,31,5,30,5,29,28,31,174,31,24,31,127,31,113,31,94,31,94,30,61,31,103,31,103,30,144,31,144,30,144,29,144,28,144,27,192,31,239,31,5,31,5,30,150,31,184,31,103,31,67,31,67,30,62,31,138,31,215,31,53,31,178,31,137,31,137,30,111,31,248,31,71,31,255,31,124,31,248,31,87,31,46,31,206,31,191,31,139,31,149,31,251,31,251,30,251,29,186,31,164,31,74,31,110,31,43,31,43,30,134,31,134,30,131,31,128,31,199,31,113,31,232,31,194,31,58,31,43,31,43,30,177,31,152,31,124,31,45,31,111,31,44,31,44,30,147,31,215,31,70,31,32,31,233,31,233,30,233,29,233,28,233,27,226,31,226,30,134,31,6,31,166,31,243,31,243,30,95,31,12,31,15,31,239,31,131,31,131,30,205,31,68,31,41,31,36,31,103,31,88,31,174,31,232,31,157,31,157,30,182,31,83,31,32,31,32,30,32,29,165,31,228,31,123,31,123,30,162,31,187,31,93,31,194,31,194,30,148,31,148,30,43,31,49,31,121,31,230,31,235,31,78,31,95,31,95,30,12,31,141,31,160,31,15,31,8,31,163,31,79,31,79,30,121,31,154,31,154,30,40,31,63,31,201,31,201,30,47,31,2,31,249,31,80,31,233,31,205,31,158,31,158,30,158,29,103,31,243,31,138,31,138,30,51,31,188,31,203,31,192,31,167,31,137,31,26,31,227,31,67,31,71,31,107,31,157,31,157,30,242,31,242,30,212,31,100,31,17,31,17,30,43,31,43,30,190,31,190,30,84,31,91,31,250,31,206,31,5,31,5,30,159,31,106,31,169,31,169,30,186,31,188,31,190,31,192,31,123,31,49,31,49,30,49,29,31,31,109,31,142,31,128,31,253,31,160,31,40,31,5,31,5,30,79,31,80,31,85,31,61,31,154,31,235,31,148,31,219,31,5,31,5,30,5,29,1,31,102,31,252,31,201,31,201,30,111,31,46,31,240,31,6,31,128,31,167,31,67,31,186,31,186,30,44,31,240,31,61,31,21,31,224,31,235,31,245,31,170,31,170,30,186,31,186,30,65,31,151,31,151,30,168,31,168,30,168,29,168,28,80,31,80,30,88,31,55,31,209,31,96,31,181,31,174,31,99,31,103,31,132,31,225,31,225,30,114,31,114,30,180,31,180,30,180,29,64,31,123,31,123,30,51,31,138,31,33,31,180,31,180,30,210,31,55,31,57,31,10,31,71,31,235,31,235,30,26,31,102,31,176,31,25,31,178,31,178,31,107,31,127,31,127,30,127,29,220,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
