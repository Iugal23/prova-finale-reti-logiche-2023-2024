-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 219;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (200,0,169,0,184,0,121,0,107,0,234,0,0,0,216,0,100,0,202,0,192,0,252,0,225,0,146,0,235,0,0,0,209,0,159,0,0,0,238,0,9,0,44,0,9,0,37,0,151,0,235,0,167,0,0,0,145,0,85,0,234,0,182,0,0,0,211,0,52,0,29,0,9,0,77,0,151,0,248,0,84,0,228,0,1,0,0,0,96,0,160,0,31,0,46,0,0,0,133,0,98,0,129,0,37,0,217,0,116,0,39,0,33,0,138,0,217,0,239,0,116,0,95,0,168,0,232,0,0,0,0,0,41,0,149,0,0,0,0,0,220,0,131,0,0,0,71,0,100,0,0,0,183,0,89,0,220,0,157,0,101,0,93,0,199,0,65,0,0,0,124,0,0,0,21,0,98,0,0,0,149,0,121,0,3,0,100,0,144,0,0,0,156,0,114,0,31,0,163,0,7,0,48,0,161,0,17,0,95,0,186,0,0,0,192,0,22,0,78,0,212,0,233,0,57,0,0,0,0,0,78,0,66,0,70,0,245,0,151,0,34,0,216,0,164,0,73,0,204,0,252,0,127,0,28,0,0,0,44,0,170,0,255,0,132,0,20,0,0,0,136,0,204,0,169,0,160,0,0,0,0,0,249,0,0,0,118,0,0,0,190,0,213,0,0,0,223,0,72,0,245,0,181,0,0,0,47,0,218,0,233,0,69,0,1,0,217,0,42,0,51,0,179,0,222,0,60,0,152,0,0,0,185,0,3,0,36,0,53,0,0,0,0,0,56,0,42,0,0,0,240,0,216,0,48,0,32,0,0,0,232,0,191,0,100,0,80,0,0,0,228,0,181,0,216,0,93,0,207,0,10,0,0,0,222,0,74,0,254,0,0,0,165,0,225,0,24,0,0,0,53,0,224,0,163,0,198,0,26,0,91,0,159,0,177,0,0,0,16,0,187,0,115,0,127,0,145,0,248,0,165,0,61,0,0,0,179,0);
signal scenario_full  : scenario_type := (200,31,169,31,184,31,121,31,107,31,234,31,234,30,216,31,100,31,202,31,192,31,252,31,225,31,146,31,235,31,235,30,209,31,159,31,159,30,238,31,9,31,44,31,9,31,37,31,151,31,235,31,167,31,167,30,145,31,85,31,234,31,182,31,182,30,211,31,52,31,29,31,9,31,77,31,151,31,248,31,84,31,228,31,1,31,1,30,96,31,160,31,31,31,46,31,46,30,133,31,98,31,129,31,37,31,217,31,116,31,39,31,33,31,138,31,217,31,239,31,116,31,95,31,168,31,232,31,232,30,232,29,41,31,149,31,149,30,149,29,220,31,131,31,131,30,71,31,100,31,100,30,183,31,89,31,220,31,157,31,101,31,93,31,199,31,65,31,65,30,124,31,124,30,21,31,98,31,98,30,149,31,121,31,3,31,100,31,144,31,144,30,156,31,114,31,31,31,163,31,7,31,48,31,161,31,17,31,95,31,186,31,186,30,192,31,22,31,78,31,212,31,233,31,57,31,57,30,57,29,78,31,66,31,70,31,245,31,151,31,34,31,216,31,164,31,73,31,204,31,252,31,127,31,28,31,28,30,44,31,170,31,255,31,132,31,20,31,20,30,136,31,204,31,169,31,160,31,160,30,160,29,249,31,249,30,118,31,118,30,190,31,213,31,213,30,223,31,72,31,245,31,181,31,181,30,47,31,218,31,233,31,69,31,1,31,217,31,42,31,51,31,179,31,222,31,60,31,152,31,152,30,185,31,3,31,36,31,53,31,53,30,53,29,56,31,42,31,42,30,240,31,216,31,48,31,32,31,32,30,232,31,191,31,100,31,80,31,80,30,228,31,181,31,216,31,93,31,207,31,10,31,10,30,222,31,74,31,254,31,254,30,165,31,225,31,24,31,24,30,53,31,224,31,163,31,198,31,26,31,91,31,159,31,177,31,177,30,16,31,187,31,115,31,127,31,145,31,248,31,165,31,61,31,61,30,179,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
