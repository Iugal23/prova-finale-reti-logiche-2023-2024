-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 294;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (89,0,230,0,166,0,47,0,0,0,132,0,93,0,2,0,82,0,91,0,98,0,199,0,165,0,0,0,252,0,135,0,214,0,0,0,0,0,249,0,69,0,19,0,0,0,246,0,253,0,48,0,23,0,200,0,203,0,24,0,235,0,2,0,48,0,202,0,101,0,160,0,35,0,188,0,179,0,102,0,218,0,111,0,76,0,186,0,138,0,231,0,69,0,68,0,0,0,173,0,9,0,47,0,38,0,0,0,122,0,211,0,0,0,68,0,185,0,8,0,94,0,3,0,56,0,0,0,0,0,41,0,207,0,29,0,74,0,136,0,70,0,197,0,4,0,199,0,36,0,125,0,124,0,225,0,49,0,0,0,148,0,34,0,134,0,238,0,207,0,97,0,162,0,0,0,56,0,0,0,151,0,120,0,0,0,222,0,32,0,16,0,44,0,183,0,213,0,186,0,150,0,62,0,166,0,122,0,44,0,143,0,160,0,161,0,149,0,52,0,4,0,73,0,26,0,0,0,0,0,102,0,167,0,0,0,132,0,162,0,0,0,0,0,127,0,0,0,137,0,87,0,171,0,229,0,5,0,0,0,55,0,24,0,0,0,0,0,109,0,117,0,21,0,52,0,62,0,229,0,208,0,204,0,0,0,111,0,0,0,96,0,200,0,93,0,172,0,176,0,242,0,151,0,45,0,228,0,250,0,0,0,112,0,0,0,0,0,221,0,0,0,58,0,0,0,113,0,230,0,31,0,0,0,0,0,150,0,49,0,64,0,0,0,27,0,65,0,59,0,197,0,158,0,0,0,0,0,91,0,0,0,130,0,0,0,0,0,115,0,0,0,179,0,136,0,255,0,152,0,139,0,61,0,0,0,229,0,210,0,249,0,0,0,152,0,177,0,212,0,0,0,172,0,251,0,88,0,147,0,170,0,67,0,14,0,11,0,159,0,163,0,0,0,27,0,230,0,0,0,92,0,197,0,253,0,0,0,105,0,103,0,247,0,0,0,47,0,108,0,228,0,0,0,154,0,201,0,0,0,196,0,79,0,136,0,34,0,0,0,100,0,0,0,236,0,121,0,157,0,200,0,213,0,0,0,45,0,96,0,90,0,0,0,123,0,95,0,184,0,170,0,0,0,232,0,189,0,8,0,152,0,0,0,113,0,158,0,161,0,168,0,172,0,143,0,58,0,31,0,3,0,158,0,105,0,142,0,66,0,24,0,70,0,0,0,86,0,0,0,0,0,177,0,93,0,0,0,74,0,246,0,110,0,70,0,56,0,161,0,224,0,0,0,0,0,153,0,131,0,249,0,73,0,102,0,239,0);
signal scenario_full  : scenario_type := (89,31,230,31,166,31,47,31,47,30,132,31,93,31,2,31,82,31,91,31,98,31,199,31,165,31,165,30,252,31,135,31,214,31,214,30,214,29,249,31,69,31,19,31,19,30,246,31,253,31,48,31,23,31,200,31,203,31,24,31,235,31,2,31,48,31,202,31,101,31,160,31,35,31,188,31,179,31,102,31,218,31,111,31,76,31,186,31,138,31,231,31,69,31,68,31,68,30,173,31,9,31,47,31,38,31,38,30,122,31,211,31,211,30,68,31,185,31,8,31,94,31,3,31,56,31,56,30,56,29,41,31,207,31,29,31,74,31,136,31,70,31,197,31,4,31,199,31,36,31,125,31,124,31,225,31,49,31,49,30,148,31,34,31,134,31,238,31,207,31,97,31,162,31,162,30,56,31,56,30,151,31,120,31,120,30,222,31,32,31,16,31,44,31,183,31,213,31,186,31,150,31,62,31,166,31,122,31,44,31,143,31,160,31,161,31,149,31,52,31,4,31,73,31,26,31,26,30,26,29,102,31,167,31,167,30,132,31,162,31,162,30,162,29,127,31,127,30,137,31,87,31,171,31,229,31,5,31,5,30,55,31,24,31,24,30,24,29,109,31,117,31,21,31,52,31,62,31,229,31,208,31,204,31,204,30,111,31,111,30,96,31,200,31,93,31,172,31,176,31,242,31,151,31,45,31,228,31,250,31,250,30,112,31,112,30,112,29,221,31,221,30,58,31,58,30,113,31,230,31,31,31,31,30,31,29,150,31,49,31,64,31,64,30,27,31,65,31,59,31,197,31,158,31,158,30,158,29,91,31,91,30,130,31,130,30,130,29,115,31,115,30,179,31,136,31,255,31,152,31,139,31,61,31,61,30,229,31,210,31,249,31,249,30,152,31,177,31,212,31,212,30,172,31,251,31,88,31,147,31,170,31,67,31,14,31,11,31,159,31,163,31,163,30,27,31,230,31,230,30,92,31,197,31,253,31,253,30,105,31,103,31,247,31,247,30,47,31,108,31,228,31,228,30,154,31,201,31,201,30,196,31,79,31,136,31,34,31,34,30,100,31,100,30,236,31,121,31,157,31,200,31,213,31,213,30,45,31,96,31,90,31,90,30,123,31,95,31,184,31,170,31,170,30,232,31,189,31,8,31,152,31,152,30,113,31,158,31,161,31,168,31,172,31,143,31,58,31,31,31,3,31,158,31,105,31,142,31,66,31,24,31,70,31,70,30,86,31,86,30,86,29,177,31,93,31,93,30,74,31,246,31,110,31,70,31,56,31,161,31,224,31,224,30,224,29,153,31,131,31,249,31,73,31,102,31,239,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
