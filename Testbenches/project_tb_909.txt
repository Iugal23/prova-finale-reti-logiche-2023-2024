-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 496;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (180,0,235,0,101,0,61,0,38,0,99,0,101,0,78,0,0,0,246,0,253,0,57,0,0,0,54,0,0,0,106,0,27,0,202,0,233,0,251,0,183,0,129,0,228,0,193,0,225,0,26,0,10,0,43,0,91,0,0,0,133,0,175,0,37,0,226,0,0,0,116,0,73,0,181,0,0,0,97,0,0,0,23,0,115,0,71,0,246,0,57,0,65,0,203,0,120,0,34,0,212,0,34,0,97,0,0,0,31,0,113,0,247,0,252,0,132,0,0,0,226,0,152,0,0,0,250,0,253,0,199,0,73,0,81,0,204,0,172,0,199,0,129,0,185,0,0,0,245,0,177,0,188,0,82,0,45,0,131,0,49,0,0,0,73,0,78,0,46,0,12,0,147,0,193,0,109,0,42,0,69,0,209,0,84,0,39,0,70,0,0,0,124,0,119,0,140,0,0,0,56,0,43,0,29,0,137,0,121,0,22,0,0,0,92,0,0,0,242,0,252,0,240,0,234,0,0,0,81,0,0,0,8,0,0,0,0,0,52,0,134,0,73,0,254,0,201,0,208,0,183,0,106,0,202,0,0,0,201,0,111,0,0,0,202,0,80,0,120,0,195,0,37,0,164,0,45,0,198,0,0,0,35,0,109,0,252,0,0,0,0,0,45,0,115,0,0,0,0,0,0,0,234,0,111,0,103,0,224,0,90,0,0,0,171,0,67,0,91,0,135,0,136,0,0,0,0,0,20,0,191,0,0,0,176,0,88,0,0,0,215,0,0,0,0,0,0,0,21,0,0,0,169,0,0,0,0,0,187,0,249,0,0,0,89,0,38,0,132,0,0,0,166,0,40,0,132,0,171,0,232,0,142,0,27,0,222,0,202,0,197,0,0,0,176,0,149,0,0,0,118,0,160,0,66,0,117,0,249,0,0,0,233,0,158,0,73,0,220,0,34,0,172,0,2,0,95,0,88,0,43,0,0,0,120,0,175,0,237,0,196,0,0,0,0,0,217,0,153,0,221,0,218,0,136,0,58,0,229,0,223,0,179,0,66,0,91,0,140,0,0,0,122,0,0,0,185,0,98,0,5,0,195,0,214,0,0,0,189,0,0,0,24,0,176,0,174,0,169,0,203,0,165,0,13,0,161,0,38,0,152,0,90,0,0,0,158,0,12,0,142,0,21,0,130,0,230,0,0,0,15,0,224,0,0,0,101,0,101,0,101,0,164,0,24,0,0,0,122,0,135,0,157,0,70,0,0,0,188,0,111,0,0,0,123,0,195,0,94,0,58,0,193,0,219,0,67,0,236,0,0,0,22,0,176,0,0,0,247,0,72,0,0,0,0,0,99,0,0,0,206,0,234,0,90,0,116,0,180,0,0,0,219,0,81,0,80,0,115,0,0,0,27,0,25,0,0,0,250,0,211,0,91,0,248,0,0,0,0,0,166,0,255,0,0,0,209,0,121,0,0,0,149,0,127,0,145,0,242,0,142,0,9,0,79,0,68,0,181,0,57,0,34,0,22,0,216,0,116,0,21,0,206,0,199,0,138,0,0,0,254,0,102,0,46,0,139,0,143,0,203,0,33,0,192,0,213,0,134,0,0,0,48,0,49,0,65,0,58,0,147,0,58,0,23,0,2,0,204,0,99,0,1,0,0,0,12,0,0,0,80,0,0,0,131,0,54,0,61,0,136,0,192,0,247,0,0,0,89,0,128,0,0,0,3,0,100,0,0,0,13,0,121,0,138,0,186,0,162,0,98,0,0,0,99,0,12,0,57,0,69,0,199,0,219,0,213,0,209,0,70,0,132,0,25,0,212,0,107,0,0,0,38,0,2,0,10,0,246,0,0,0,29,0,247,0,95,0,208,0,143,0,128,0,54,0,70,0,0,0,76,0,119,0,87,0,80,0,48,0,132,0,190,0,0,0,22,0,53,0,0,0,36,0,0,0,132,0,23,0,81,0,48,0,224,0,171,0,0,0,0,0,0,0,93,0,133,0,90,0,20,0,31,0,198,0,0,0,0,0,195,0,0,0,250,0,109,0,116,0,45,0,62,0,29,0,222,0,0,0,0,0,58,0,85,0,250,0,93,0,0,0,221,0,6,0,34,0,187,0,157,0,160,0,17,0,48,0,100,0,151,0,0,0,0,0,94,0,19,0,233,0,77,0,0,0,26,0,239,0,88,0,0,0,94,0,69,0,50,0,210,0,110,0,0,0,132,0,97,0,218,0);
signal scenario_full  : scenario_type := (180,31,235,31,101,31,61,31,38,31,99,31,101,31,78,31,78,30,246,31,253,31,57,31,57,30,54,31,54,30,106,31,27,31,202,31,233,31,251,31,183,31,129,31,228,31,193,31,225,31,26,31,10,31,43,31,91,31,91,30,133,31,175,31,37,31,226,31,226,30,116,31,73,31,181,31,181,30,97,31,97,30,23,31,115,31,71,31,246,31,57,31,65,31,203,31,120,31,34,31,212,31,34,31,97,31,97,30,31,31,113,31,247,31,252,31,132,31,132,30,226,31,152,31,152,30,250,31,253,31,199,31,73,31,81,31,204,31,172,31,199,31,129,31,185,31,185,30,245,31,177,31,188,31,82,31,45,31,131,31,49,31,49,30,73,31,78,31,46,31,12,31,147,31,193,31,109,31,42,31,69,31,209,31,84,31,39,31,70,31,70,30,124,31,119,31,140,31,140,30,56,31,43,31,29,31,137,31,121,31,22,31,22,30,92,31,92,30,242,31,252,31,240,31,234,31,234,30,81,31,81,30,8,31,8,30,8,29,52,31,134,31,73,31,254,31,201,31,208,31,183,31,106,31,202,31,202,30,201,31,111,31,111,30,202,31,80,31,120,31,195,31,37,31,164,31,45,31,198,31,198,30,35,31,109,31,252,31,252,30,252,29,45,31,115,31,115,30,115,29,115,28,234,31,111,31,103,31,224,31,90,31,90,30,171,31,67,31,91,31,135,31,136,31,136,30,136,29,20,31,191,31,191,30,176,31,88,31,88,30,215,31,215,30,215,29,215,28,21,31,21,30,169,31,169,30,169,29,187,31,249,31,249,30,89,31,38,31,132,31,132,30,166,31,40,31,132,31,171,31,232,31,142,31,27,31,222,31,202,31,197,31,197,30,176,31,149,31,149,30,118,31,160,31,66,31,117,31,249,31,249,30,233,31,158,31,73,31,220,31,34,31,172,31,2,31,95,31,88,31,43,31,43,30,120,31,175,31,237,31,196,31,196,30,196,29,217,31,153,31,221,31,218,31,136,31,58,31,229,31,223,31,179,31,66,31,91,31,140,31,140,30,122,31,122,30,185,31,98,31,5,31,195,31,214,31,214,30,189,31,189,30,24,31,176,31,174,31,169,31,203,31,165,31,13,31,161,31,38,31,152,31,90,31,90,30,158,31,12,31,142,31,21,31,130,31,230,31,230,30,15,31,224,31,224,30,101,31,101,31,101,31,164,31,24,31,24,30,122,31,135,31,157,31,70,31,70,30,188,31,111,31,111,30,123,31,195,31,94,31,58,31,193,31,219,31,67,31,236,31,236,30,22,31,176,31,176,30,247,31,72,31,72,30,72,29,99,31,99,30,206,31,234,31,90,31,116,31,180,31,180,30,219,31,81,31,80,31,115,31,115,30,27,31,25,31,25,30,250,31,211,31,91,31,248,31,248,30,248,29,166,31,255,31,255,30,209,31,121,31,121,30,149,31,127,31,145,31,242,31,142,31,9,31,79,31,68,31,181,31,57,31,34,31,22,31,216,31,116,31,21,31,206,31,199,31,138,31,138,30,254,31,102,31,46,31,139,31,143,31,203,31,33,31,192,31,213,31,134,31,134,30,48,31,49,31,65,31,58,31,147,31,58,31,23,31,2,31,204,31,99,31,1,31,1,30,12,31,12,30,80,31,80,30,131,31,54,31,61,31,136,31,192,31,247,31,247,30,89,31,128,31,128,30,3,31,100,31,100,30,13,31,121,31,138,31,186,31,162,31,98,31,98,30,99,31,12,31,57,31,69,31,199,31,219,31,213,31,209,31,70,31,132,31,25,31,212,31,107,31,107,30,38,31,2,31,10,31,246,31,246,30,29,31,247,31,95,31,208,31,143,31,128,31,54,31,70,31,70,30,76,31,119,31,87,31,80,31,48,31,132,31,190,31,190,30,22,31,53,31,53,30,36,31,36,30,132,31,23,31,81,31,48,31,224,31,171,31,171,30,171,29,171,28,93,31,133,31,90,31,20,31,31,31,198,31,198,30,198,29,195,31,195,30,250,31,109,31,116,31,45,31,62,31,29,31,222,31,222,30,222,29,58,31,85,31,250,31,93,31,93,30,221,31,6,31,34,31,187,31,157,31,160,31,17,31,48,31,100,31,151,31,151,30,151,29,94,31,19,31,233,31,77,31,77,30,26,31,239,31,88,31,88,30,94,31,69,31,50,31,210,31,110,31,110,30,132,31,97,31,218,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
