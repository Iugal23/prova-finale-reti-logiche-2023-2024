-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 863;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,141,0,58,0,0,0,107,0,140,0,0,0,46,0,0,0,93,0,245,0,125,0,137,0,123,0,108,0,0,0,101,0,123,0,114,0,111,0,42,0,132,0,111,0,7,0,255,0,11,0,236,0,0,0,0,0,115,0,40,0,0,0,103,0,35,0,0,0,0,0,6,0,220,0,0,0,168,0,12,0,52,0,125,0,238,0,146,0,26,0,35,0,218,0,175,0,179,0,30,0,222,0,9,0,142,0,136,0,12,0,99,0,0,0,0,0,150,0,0,0,87,0,51,0,111,0,0,0,7,0,195,0,0,0,48,0,0,0,41,0,32,0,186,0,57,0,0,0,108,0,128,0,141,0,92,0,139,0,144,0,0,0,0,0,249,0,250,0,203,0,0,0,0,0,242,0,104,0,99,0,0,0,212,0,166,0,0,0,132,0,18,0,0,0,0,0,255,0,39,0,36,0,223,0,231,0,140,0,62,0,189,0,219,0,232,0,30,0,6,0,103,0,80,0,189,0,146,0,16,0,136,0,165,0,0,0,0,0,121,0,253,0,0,0,41,0,140,0,240,0,0,0,245,0,0,0,28,0,87,0,156,0,0,0,147,0,194,0,0,0,132,0,50,0,94,0,0,0,185,0,254,0,223,0,224,0,133,0,156,0,149,0,50,0,145,0,0,0,20,0,37,0,79,0,26,0,0,0,0,0,57,0,237,0,18,0,213,0,187,0,57,0,247,0,0,0,34,0,35,0,182,0,229,0,223,0,37,0,0,0,187,0,122,0,0,0,0,0,141,0,184,0,42,0,0,0,0,0,148,0,73,0,0,0,71,0,0,0,0,0,180,0,145,0,20,0,217,0,52,0,251,0,138,0,242,0,69,0,62,0,73,0,189,0,181,0,163,0,0,0,59,0,35,0,184,0,110,0,53,0,173,0,91,0,5,0,103,0,0,0,225,0,174,0,24,0,72,0,157,0,172,0,109,0,174,0,76,0,89,0,103,0,26,0,13,0,0,0,30,0,206,0,0,0,65,0,34,0,12,0,244,0,0,0,25,0,24,0,176,0,234,0,58,0,109,0,180,0,14,0,197,0,116,0,233,0,47,0,0,0,171,0,229,0,121,0,117,0,0,0,120,0,16,0,131,0,0,0,135,0,198,0,250,0,124,0,118,0,181,0,141,0,15,0,149,0,164,0,0,0,7,0,0,0,110,0,144,0,0,0,121,0,7,0,175,0,199,0,190,0,0,0,200,0,0,0,141,0,224,0,89,0,142,0,0,0,30,0,0,0,238,0,180,0,196,0,144,0,131,0,0,0,52,0,0,0,141,0,204,0,167,0,74,0,242,0,130,0,163,0,152,0,203,0,0,0,35,0,135,0,40,0,39,0,0,0,28,0,2,0,221,0,14,0,196,0,216,0,207,0,180,0,70,0,152,0,0,0,94,0,0,0,104,0,16,0,0,0,47,0,20,0,239,0,0,0,0,0,0,0,15,0,33,0,238,0,0,0,89,0,246,0,0,0,238,0,108,0,198,0,140,0,199,0,130,0,155,0,0,0,218,0,0,0,150,0,85,0,48,0,23,0,56,0,245,0,0,0,106,0,45,0,131,0,45,0,224,0,0,0,80,0,222,0,0,0,226,0,1,0,239,0,234,0,45,0,166,0,162,0,200,0,114,0,206,0,205,0,0,0,0,0,221,0,222,0,232,0,36,0,189,0,125,0,0,0,207,0,90,0,18,0,195,0,241,0,0,0,0,0,0,0,227,0,0,0,161,0,32,0,65,0,0,0,42,0,49,0,81,0,40,0,212,0,73,0,203,0,103,0,32,0,133,0,104,0,142,0,137,0,201,0,184,0,188,0,0,0,0,0,8,0,28,0,163,0,115,0,64,0,48,0,134,0,232,0,0,0,205,0,0,0,179,0,39,0,207,0,0,0,86,0,206,0,12,0,166,0,187,0,121,0,0,0,33,0,0,0,221,0,134,0,246,0,230,0,221,0,15,0,192,0,0,0,117,0,241,0,193,0,220,0,0,0,219,0,50,0,102,0,207,0,0,0,78,0,206,0,255,0,0,0,226,0,189,0,127,0,3,0,17,0,107,0,18,0,70,0,116,0,12,0,28,0,71,0,0,0,241,0,222,0,163,0,246,0,191,0,229,0,0,0,8,0,0,0,37,0,161,0,0,0,248,0,46,0,179,0,161,0,240,0,34,0,251,0,0,0,0,0,119,0,27,0,53,0,208,0,0,0,100,0,0,0,6,0,203,0,0,0,176,0,116,0,223,0,34,0,0,0,0,0,175,0,245,0,0,0,0,0,204,0,208,0,233,0,27,0,0,0,193,0,200,0,195,0,232,0,62,0,154,0,0,0,0,0,118,0,0,0,115,0,30,0,160,0,177,0,77,0,255,0,149,0,124,0,98,0,49,0,90,0,0,0,220,0,249,0,0,0,250,0,154,0,62,0,231,0,223,0,121,0,7,0,60,0,0,0,253,0,19,0,177,0,166,0,73,0,0,0,95,0,83,0,36,0,154,0,186,0,143,0,0,0,239,0,169,0,115,0,197,0,127,0,92,0,211,0,0,0,217,0,250,0,0,0,0,0,208,0,52,0,94,0,202,0,207,0,0,0,140,0,44,0,90,0,234,0,7,0,103,0,1,0,0,0,188,0,29,0,229,0,202,0,20,0,45,0,187,0,0,0,0,0,101,0,0,0,116,0,169,0,221,0,53,0,77,0,120,0,0,0,168,0,100,0,0,0,0,0,178,0,212,0,123,0,0,0,227,0,88,0,137,0,0,0,32,0,0,0,4,0,242,0,13,0,99,0,114,0,214,0,175,0,225,0,0,0,54,0,212,0,227,0,32,0,0,0,83,0,234,0,0,0,107,0,0,0,119,0,77,0,0,0,162,0,0,0,187,0,210,0,196,0,0,0,0,0,0,0,119,0,64,0,195,0,66,0,66,0,63,0,0,0,238,0,25,0,217,0,0,0,96,0,3,0,254,0,0,0,24,0,74,0,138,0,233,0,147,0,41,0,0,0,0,0,239,0,70,0,98,0,68,0,0,0,234,0,202,0,228,0,0,0,42,0,64,0,20,0,29,0,0,0,0,0,168,0,137,0,15,0,0,0,170,0,137,0,136,0,0,0,0,0,251,0,0,0,0,0,0,0,241,0,0,0,198,0,29,0,0,0,0,0,151,0,0,0,253,0,169,0,130,0,124,0,0,0,231,0,0,0,49,0,0,0,233,0,20,0,109,0,92,0,191,0,44,0,0,0,150,0,205,0,221,0,20,0,0,0,160,0,214,0,51,0,77,0,0,0,54,0,61,0,0,0,0,0,40,0,0,0,215,0,50,0,239,0,58,0,0,0,90,0,142,0,201,0,33,0,79,0,31,0,214,0,6,0,238,0,196,0,70,0,0,0,201,0,24,0,77,0,173,0,46,0,86,0,127,0,0,0,191,0,119,0,251,0,167,0,218,0,0,0,156,0,0,0,13,0,235,0,26,0,157,0,0,0,156,0,112,0,97,0,0,0,75,0,60,0,1,0,47,0,110,0,172,0,0,0,206,0,147,0,8,0,13,0,71,0,112,0,140,0,0,0,95,0,114,0,241,0,87,0,0,0,227,0,166,0,0,0,196,0,130,0,216,0,145,0,180,0,84,0,175,0,61,0,159,0,224,0,221,0,0,0,4,0,167,0,181,0,0,0,3,0,32,0,27,0,67,0,9,0,213,0,35,0,0,0,217,0,64,0,0,0,0,0,16,0,190,0,58,0,110,0,7,0,8,0,167,0,0,0,157,0,149,0,37,0,42,0,220,0,72,0,0,0,97,0,0,0,101,0,235,0,0,0,19,0,139,0,0,0);
signal scenario_full  : scenario_type := (0,0,141,31,58,31,58,30,107,31,140,31,140,30,46,31,46,30,93,31,245,31,125,31,137,31,123,31,108,31,108,30,101,31,123,31,114,31,111,31,42,31,132,31,111,31,7,31,255,31,11,31,236,31,236,30,236,29,115,31,40,31,40,30,103,31,35,31,35,30,35,29,6,31,220,31,220,30,168,31,12,31,52,31,125,31,238,31,146,31,26,31,35,31,218,31,175,31,179,31,30,31,222,31,9,31,142,31,136,31,12,31,99,31,99,30,99,29,150,31,150,30,87,31,51,31,111,31,111,30,7,31,195,31,195,30,48,31,48,30,41,31,32,31,186,31,57,31,57,30,108,31,128,31,141,31,92,31,139,31,144,31,144,30,144,29,249,31,250,31,203,31,203,30,203,29,242,31,104,31,99,31,99,30,212,31,166,31,166,30,132,31,18,31,18,30,18,29,255,31,39,31,36,31,223,31,231,31,140,31,62,31,189,31,219,31,232,31,30,31,6,31,103,31,80,31,189,31,146,31,16,31,136,31,165,31,165,30,165,29,121,31,253,31,253,30,41,31,140,31,240,31,240,30,245,31,245,30,28,31,87,31,156,31,156,30,147,31,194,31,194,30,132,31,50,31,94,31,94,30,185,31,254,31,223,31,224,31,133,31,156,31,149,31,50,31,145,31,145,30,20,31,37,31,79,31,26,31,26,30,26,29,57,31,237,31,18,31,213,31,187,31,57,31,247,31,247,30,34,31,35,31,182,31,229,31,223,31,37,31,37,30,187,31,122,31,122,30,122,29,141,31,184,31,42,31,42,30,42,29,148,31,73,31,73,30,71,31,71,30,71,29,180,31,145,31,20,31,217,31,52,31,251,31,138,31,242,31,69,31,62,31,73,31,189,31,181,31,163,31,163,30,59,31,35,31,184,31,110,31,53,31,173,31,91,31,5,31,103,31,103,30,225,31,174,31,24,31,72,31,157,31,172,31,109,31,174,31,76,31,89,31,103,31,26,31,13,31,13,30,30,31,206,31,206,30,65,31,34,31,12,31,244,31,244,30,25,31,24,31,176,31,234,31,58,31,109,31,180,31,14,31,197,31,116,31,233,31,47,31,47,30,171,31,229,31,121,31,117,31,117,30,120,31,16,31,131,31,131,30,135,31,198,31,250,31,124,31,118,31,181,31,141,31,15,31,149,31,164,31,164,30,7,31,7,30,110,31,144,31,144,30,121,31,7,31,175,31,199,31,190,31,190,30,200,31,200,30,141,31,224,31,89,31,142,31,142,30,30,31,30,30,238,31,180,31,196,31,144,31,131,31,131,30,52,31,52,30,141,31,204,31,167,31,74,31,242,31,130,31,163,31,152,31,203,31,203,30,35,31,135,31,40,31,39,31,39,30,28,31,2,31,221,31,14,31,196,31,216,31,207,31,180,31,70,31,152,31,152,30,94,31,94,30,104,31,16,31,16,30,47,31,20,31,239,31,239,30,239,29,239,28,15,31,33,31,238,31,238,30,89,31,246,31,246,30,238,31,108,31,198,31,140,31,199,31,130,31,155,31,155,30,218,31,218,30,150,31,85,31,48,31,23,31,56,31,245,31,245,30,106,31,45,31,131,31,45,31,224,31,224,30,80,31,222,31,222,30,226,31,1,31,239,31,234,31,45,31,166,31,162,31,200,31,114,31,206,31,205,31,205,30,205,29,221,31,222,31,232,31,36,31,189,31,125,31,125,30,207,31,90,31,18,31,195,31,241,31,241,30,241,29,241,28,227,31,227,30,161,31,32,31,65,31,65,30,42,31,49,31,81,31,40,31,212,31,73,31,203,31,103,31,32,31,133,31,104,31,142,31,137,31,201,31,184,31,188,31,188,30,188,29,8,31,28,31,163,31,115,31,64,31,48,31,134,31,232,31,232,30,205,31,205,30,179,31,39,31,207,31,207,30,86,31,206,31,12,31,166,31,187,31,121,31,121,30,33,31,33,30,221,31,134,31,246,31,230,31,221,31,15,31,192,31,192,30,117,31,241,31,193,31,220,31,220,30,219,31,50,31,102,31,207,31,207,30,78,31,206,31,255,31,255,30,226,31,189,31,127,31,3,31,17,31,107,31,18,31,70,31,116,31,12,31,28,31,71,31,71,30,241,31,222,31,163,31,246,31,191,31,229,31,229,30,8,31,8,30,37,31,161,31,161,30,248,31,46,31,179,31,161,31,240,31,34,31,251,31,251,30,251,29,119,31,27,31,53,31,208,31,208,30,100,31,100,30,6,31,203,31,203,30,176,31,116,31,223,31,34,31,34,30,34,29,175,31,245,31,245,30,245,29,204,31,208,31,233,31,27,31,27,30,193,31,200,31,195,31,232,31,62,31,154,31,154,30,154,29,118,31,118,30,115,31,30,31,160,31,177,31,77,31,255,31,149,31,124,31,98,31,49,31,90,31,90,30,220,31,249,31,249,30,250,31,154,31,62,31,231,31,223,31,121,31,7,31,60,31,60,30,253,31,19,31,177,31,166,31,73,31,73,30,95,31,83,31,36,31,154,31,186,31,143,31,143,30,239,31,169,31,115,31,197,31,127,31,92,31,211,31,211,30,217,31,250,31,250,30,250,29,208,31,52,31,94,31,202,31,207,31,207,30,140,31,44,31,90,31,234,31,7,31,103,31,1,31,1,30,188,31,29,31,229,31,202,31,20,31,45,31,187,31,187,30,187,29,101,31,101,30,116,31,169,31,221,31,53,31,77,31,120,31,120,30,168,31,100,31,100,30,100,29,178,31,212,31,123,31,123,30,227,31,88,31,137,31,137,30,32,31,32,30,4,31,242,31,13,31,99,31,114,31,214,31,175,31,225,31,225,30,54,31,212,31,227,31,32,31,32,30,83,31,234,31,234,30,107,31,107,30,119,31,77,31,77,30,162,31,162,30,187,31,210,31,196,31,196,30,196,29,196,28,119,31,64,31,195,31,66,31,66,31,63,31,63,30,238,31,25,31,217,31,217,30,96,31,3,31,254,31,254,30,24,31,74,31,138,31,233,31,147,31,41,31,41,30,41,29,239,31,70,31,98,31,68,31,68,30,234,31,202,31,228,31,228,30,42,31,64,31,20,31,29,31,29,30,29,29,168,31,137,31,15,31,15,30,170,31,137,31,136,31,136,30,136,29,251,31,251,30,251,29,251,28,241,31,241,30,198,31,29,31,29,30,29,29,151,31,151,30,253,31,169,31,130,31,124,31,124,30,231,31,231,30,49,31,49,30,233,31,20,31,109,31,92,31,191,31,44,31,44,30,150,31,205,31,221,31,20,31,20,30,160,31,214,31,51,31,77,31,77,30,54,31,61,31,61,30,61,29,40,31,40,30,215,31,50,31,239,31,58,31,58,30,90,31,142,31,201,31,33,31,79,31,31,31,214,31,6,31,238,31,196,31,70,31,70,30,201,31,24,31,77,31,173,31,46,31,86,31,127,31,127,30,191,31,119,31,251,31,167,31,218,31,218,30,156,31,156,30,13,31,235,31,26,31,157,31,157,30,156,31,112,31,97,31,97,30,75,31,60,31,1,31,47,31,110,31,172,31,172,30,206,31,147,31,8,31,13,31,71,31,112,31,140,31,140,30,95,31,114,31,241,31,87,31,87,30,227,31,166,31,166,30,196,31,130,31,216,31,145,31,180,31,84,31,175,31,61,31,159,31,224,31,221,31,221,30,4,31,167,31,181,31,181,30,3,31,32,31,27,31,67,31,9,31,213,31,35,31,35,30,217,31,64,31,64,30,64,29,16,31,190,31,58,31,110,31,7,31,8,31,167,31,167,30,157,31,149,31,37,31,42,31,220,31,72,31,72,30,97,31,97,30,101,31,235,31,235,30,19,31,139,31,139,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
