-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 954;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (155,0,29,0,86,0,220,0,226,0,200,0,149,0,0,0,77,0,251,0,65,0,91,0,100,0,206,0,15,0,0,0,92,0,140,0,72,0,187,0,199,0,194,0,68,0,11,0,62,0,32,0,87,0,33,0,0,0,76,0,123,0,227,0,27,0,0,0,219,0,147,0,0,0,208,0,9,0,36,0,0,0,240,0,0,0,252,0,148,0,92,0,252,0,117,0,223,0,71,0,253,0,179,0,223,0,209,0,136,0,0,0,159,0,79,0,150,0,135,0,133,0,0,0,0,0,0,0,0,0,146,0,115,0,219,0,82,0,161,0,182,0,55,0,30,0,74,0,72,0,97,0,129,0,104,0,238,0,59,0,0,0,0,0,0,0,0,0,73,0,0,0,75,0,0,0,0,0,3,0,211,0,44,0,88,0,248,0,161,0,173,0,93,0,0,0,121,0,179,0,215,0,116,0,187,0,150,0,7,0,78,0,20,0,142,0,70,0,0,0,153,0,113,0,223,0,46,0,0,0,109,0,105,0,104,0,223,0,124,0,219,0,212,0,0,0,106,0,65,0,231,0,0,0,0,0,0,0,0,0,245,0,62,0,55,0,161,0,133,0,147,0,154,0,30,0,66,0,122,0,194,0,2,0,101,0,202,0,68,0,0,0,125,0,117,0,115,0,74,0,88,0,63,0,238,0,19,0,3,0,0,0,195,0,2,0,240,0,156,0,223,0,0,0,1,0,70,0,203,0,216,0,248,0,84,0,222,0,58,0,183,0,0,0,179,0,228,0,0,0,0,0,73,0,0,0,12,0,98,0,0,0,162,0,160,0,168,0,254,0,0,0,88,0,142,0,0,0,190,0,0,0,164,0,181,0,0,0,197,0,68,0,195,0,157,0,0,0,101,0,16,0,235,0,206,0,4,0,102,0,93,0,0,0,100,0,104,0,0,0,0,0,244,0,0,0,247,0,0,0,224,0,22,0,167,0,161,0,142,0,252,0,85,0,141,0,0,0,121,0,0,0,0,0,170,0,63,0,77,0,145,0,99,0,0,0,0,0,147,0,175,0,104,0,124,0,73,0,196,0,78,0,131,0,199,0,0,0,0,0,220,0,0,0,205,0,0,0,0,0,12,0,131,0,1,0,0,0,95,0,67,0,0,0,64,0,107,0,154,0,14,0,10,0,212,0,90,0,171,0,65,0,85,0,140,0,1,0,132,0,130,0,175,0,76,0,19,0,67,0,0,0,0,0,181,0,1,0,217,0,134,0,37,0,156,0,0,0,197,0,233,0,22,0,129,0,238,0,187,0,167,0,0,0,235,0,120,0,29,0,11,0,0,0,161,0,187,0,25,0,109,0,64,0,41,0,61,0,81,0,225,0,18,0,27,0,242,0,208,0,0,0,89,0,54,0,249,0,214,0,0,0,65,0,122,0,217,0,53,0,80,0,205,0,32,0,0,0,173,0,194,0,34,0,73,0,179,0,195,0,34,0,25,0,206,0,23,0,132,0,0,0,31,0,140,0,132,0,250,0,130,0,101,0,172,0,31,0,0,0,31,0,209,0,0,0,205,0,92,0,221,0,192,0,150,0,226,0,19,0,240,0,62,0,188,0,140,0,107,0,35,0,237,0,3,0,144,0,133,0,170,0,122,0,48,0,187,0,255,0,0,0,224,0,199,0,175,0,193,0,36,0,0,0,0,0,169,0,239,0,228,0,248,0,0,0,252,0,91,0,109,0,0,0,194,0,16,0,34,0,55,0,0,0,0,0,43,0,52,0,26,0,0,0,98,0,0,0,11,0,145,0,206,0,75,0,88,0,36,0,75,0,51,0,116,0,105,0,224,0,103,0,217,0,86,0,111,0,164,0,224,0,100,0,0,0,140,0,76,0,0,0,204,0,241,0,0,0,189,0,239,0,0,0,119,0,5,0,165,0,36,0,134,0,140,0,18,0,115,0,0,0,198,0,0,0,94,0,0,0,162,0,0,0,0,0,85,0,28,0,138,0,32,0,223,0,128,0,244,0,167,0,158,0,0,0,3,0,230,0,231,0,184,0,175,0,179,0,214,0,126,0,169,0,67,0,18,0,52,0,102,0,0,0,103,0,138,0,144,0,237,0,83,0,165,0,54,0,27,0,253,0,21,0,0,0,215,0,40,0,163,0,72,0,206,0,114,0,0,0,233,0,134,0,0,0,213,0,87,0,233,0,249,0,0,0,172,0,33,0,2,0,175,0,0,0,182,0,137,0,114,0,149,0,49,0,1,0,158,0,172,0,78,0,84,0,69,0,0,0,107,0,47,0,0,0,160,0,0,0,155,0,0,0,0,0,89,0,254,0,0,0,0,0,123,0,201,0,0,0,0,0,0,0,182,0,186,0,226,0,1,0,0,0,214,0,211,0,175,0,113,0,172,0,187,0,246,0,10,0,122,0,182,0,229,0,179,0,0,0,0,0,162,0,154,0,0,0,9,0,0,0,131,0,247,0,109,0,93,0,230,0,0,0,227,0,0,0,122,0,167,0,217,0,243,0,204,0,0,0,229,0,23,0,211,0,0,0,236,0,63,0,209,0,0,0,232,0,112,0,71,0,0,0,3,0,105,0,0,0,0,0,0,0,0,0,9,0,89,0,72,0,157,0,0,0,0,0,209,0,211,0,207,0,175,0,0,0,0,0,207,0,219,0,107,0,240,0,87,0,84,0,214,0,136,0,214,0,243,0,0,0,11,0,168,0,108,0,195,0,0,0,228,0,71,0,83,0,99,0,0,0,140,0,127,0,251,0,123,0,150,0,0,0,0,0,0,0,0,0,121,0,73,0,31,0,255,0,37,0,246,0,237,0,47,0,95,0,108,0,150,0,0,0,176,0,228,0,224,0,101,0,247,0,254,0,247,0,78,0,0,0,0,0,0,0,0,0,167,0,247,0,129,0,100,0,6,0,242,0,90,0,178,0,151,0,0,0,243,0,36,0,180,0,216,0,130,0,0,0,0,0,0,0,156,0,67,0,0,0,170,0,196,0,223,0,12,0,208,0,40,0,106,0,137,0,0,0,108,0,129,0,25,0,134,0,18,0,92,0,0,0,223,0,18,0,213,0,201,0,107,0,0,0,60,0,0,0,13,0,1,0,0,0,130,0,169,0,231,0,167,0,0,0,245,0,129,0,232,0,156,0,80,0,13,0,201,0,249,0,231,0,10,0,0,0,0,0,215,0,250,0,113,0,62,0,253,0,38,0,0,0,0,0,169,0,209,0,190,0,126,0,0,0,168,0,248,0,165,0,0,0,166,0,84,0,213,0,122,0,88,0,177,0,239,0,218,0,188,0,119,0,154,0,75,0,131,0,246,0,204,0,105,0,15,0,244,0,31,0,0,0,54,0,75,0,234,0,68,0,158,0,84,0,131,0,0,0,210,0,0,0,0,0,211,0,250,0,74,0,255,0,235,0,233,0,198,0,194,0,85,0,138,0,16,0,5,0,116,0,208,0,110,0,96,0,56,0,0,0,182,0,179,0,68,0,32,0,219,0,0,0,35,0,82,0,212,0,228,0,124,0,228,0,103,0,0,0,59,0,0,0,41,0,6,0,0,0,47,0,242,0,28,0,186,0,10,0,155,0,111,0,255,0,0,0,30,0,198,0,0,0,147,0,221,0,213,0,192,0,244,0,190,0,28,0,35,0,197,0,35,0,122,0,92,0,19,0,209,0,67,0,62,0,209,0,51,0,0,0,0,0,211,0,21,0,239,0,12,0,90,0,89,0,0,0,111,0,121,0,0,0,100,0,120,0,95,0,0,0,114,0,0,0,250,0,150,0,108,0,149,0,105,0,198,0,0,0,84,0,189,0,0,0,127,0,0,0,136,0,0,0,208,0,153,0,17,0,207,0,141,0,146,0,219,0,55,0,61,0,35,0,243,0,44,0,157,0,8,0,0,0,84,0,124,0,0,0,0,0,163,0,238,0,0,0,105,0,0,0,209,0,193,0,28,0,240,0,234,0,7,0,4,0,99,0,18,0,179,0,0,0,77,0,90,0,0,0,0,0,169,0,251,0,190,0,211,0,0,0,0,0,86,0,190,0,111,0,0,0,0,0,176,0,166,0,129,0,123,0,180,0,26,0,108,0,207,0,21,0,57,0,96,0,64,0,47,0,178,0,0,0,82,0,243,0,79,0,120,0,29,0,189,0,0,0,103,0,44,0,132,0,37,0,30,0,189,0,178,0,189,0,0,0,124,0,17,0,0,0,0,0,206,0,178,0,244,0,155,0,107,0,135,0,183,0,0,0);
signal scenario_full  : scenario_type := (155,31,29,31,86,31,220,31,226,31,200,31,149,31,149,30,77,31,251,31,65,31,91,31,100,31,206,31,15,31,15,30,92,31,140,31,72,31,187,31,199,31,194,31,68,31,11,31,62,31,32,31,87,31,33,31,33,30,76,31,123,31,227,31,27,31,27,30,219,31,147,31,147,30,208,31,9,31,36,31,36,30,240,31,240,30,252,31,148,31,92,31,252,31,117,31,223,31,71,31,253,31,179,31,223,31,209,31,136,31,136,30,159,31,79,31,150,31,135,31,133,31,133,30,133,29,133,28,133,27,146,31,115,31,219,31,82,31,161,31,182,31,55,31,30,31,74,31,72,31,97,31,129,31,104,31,238,31,59,31,59,30,59,29,59,28,59,27,73,31,73,30,75,31,75,30,75,29,3,31,211,31,44,31,88,31,248,31,161,31,173,31,93,31,93,30,121,31,179,31,215,31,116,31,187,31,150,31,7,31,78,31,20,31,142,31,70,31,70,30,153,31,113,31,223,31,46,31,46,30,109,31,105,31,104,31,223,31,124,31,219,31,212,31,212,30,106,31,65,31,231,31,231,30,231,29,231,28,231,27,245,31,62,31,55,31,161,31,133,31,147,31,154,31,30,31,66,31,122,31,194,31,2,31,101,31,202,31,68,31,68,30,125,31,117,31,115,31,74,31,88,31,63,31,238,31,19,31,3,31,3,30,195,31,2,31,240,31,156,31,223,31,223,30,1,31,70,31,203,31,216,31,248,31,84,31,222,31,58,31,183,31,183,30,179,31,228,31,228,30,228,29,73,31,73,30,12,31,98,31,98,30,162,31,160,31,168,31,254,31,254,30,88,31,142,31,142,30,190,31,190,30,164,31,181,31,181,30,197,31,68,31,195,31,157,31,157,30,101,31,16,31,235,31,206,31,4,31,102,31,93,31,93,30,100,31,104,31,104,30,104,29,244,31,244,30,247,31,247,30,224,31,22,31,167,31,161,31,142,31,252,31,85,31,141,31,141,30,121,31,121,30,121,29,170,31,63,31,77,31,145,31,99,31,99,30,99,29,147,31,175,31,104,31,124,31,73,31,196,31,78,31,131,31,199,31,199,30,199,29,220,31,220,30,205,31,205,30,205,29,12,31,131,31,1,31,1,30,95,31,67,31,67,30,64,31,107,31,154,31,14,31,10,31,212,31,90,31,171,31,65,31,85,31,140,31,1,31,132,31,130,31,175,31,76,31,19,31,67,31,67,30,67,29,181,31,1,31,217,31,134,31,37,31,156,31,156,30,197,31,233,31,22,31,129,31,238,31,187,31,167,31,167,30,235,31,120,31,29,31,11,31,11,30,161,31,187,31,25,31,109,31,64,31,41,31,61,31,81,31,225,31,18,31,27,31,242,31,208,31,208,30,89,31,54,31,249,31,214,31,214,30,65,31,122,31,217,31,53,31,80,31,205,31,32,31,32,30,173,31,194,31,34,31,73,31,179,31,195,31,34,31,25,31,206,31,23,31,132,31,132,30,31,31,140,31,132,31,250,31,130,31,101,31,172,31,31,31,31,30,31,31,209,31,209,30,205,31,92,31,221,31,192,31,150,31,226,31,19,31,240,31,62,31,188,31,140,31,107,31,35,31,237,31,3,31,144,31,133,31,170,31,122,31,48,31,187,31,255,31,255,30,224,31,199,31,175,31,193,31,36,31,36,30,36,29,169,31,239,31,228,31,248,31,248,30,252,31,91,31,109,31,109,30,194,31,16,31,34,31,55,31,55,30,55,29,43,31,52,31,26,31,26,30,98,31,98,30,11,31,145,31,206,31,75,31,88,31,36,31,75,31,51,31,116,31,105,31,224,31,103,31,217,31,86,31,111,31,164,31,224,31,100,31,100,30,140,31,76,31,76,30,204,31,241,31,241,30,189,31,239,31,239,30,119,31,5,31,165,31,36,31,134,31,140,31,18,31,115,31,115,30,198,31,198,30,94,31,94,30,162,31,162,30,162,29,85,31,28,31,138,31,32,31,223,31,128,31,244,31,167,31,158,31,158,30,3,31,230,31,231,31,184,31,175,31,179,31,214,31,126,31,169,31,67,31,18,31,52,31,102,31,102,30,103,31,138,31,144,31,237,31,83,31,165,31,54,31,27,31,253,31,21,31,21,30,215,31,40,31,163,31,72,31,206,31,114,31,114,30,233,31,134,31,134,30,213,31,87,31,233,31,249,31,249,30,172,31,33,31,2,31,175,31,175,30,182,31,137,31,114,31,149,31,49,31,1,31,158,31,172,31,78,31,84,31,69,31,69,30,107,31,47,31,47,30,160,31,160,30,155,31,155,30,155,29,89,31,254,31,254,30,254,29,123,31,201,31,201,30,201,29,201,28,182,31,186,31,226,31,1,31,1,30,214,31,211,31,175,31,113,31,172,31,187,31,246,31,10,31,122,31,182,31,229,31,179,31,179,30,179,29,162,31,154,31,154,30,9,31,9,30,131,31,247,31,109,31,93,31,230,31,230,30,227,31,227,30,122,31,167,31,217,31,243,31,204,31,204,30,229,31,23,31,211,31,211,30,236,31,63,31,209,31,209,30,232,31,112,31,71,31,71,30,3,31,105,31,105,30,105,29,105,28,105,27,9,31,89,31,72,31,157,31,157,30,157,29,209,31,211,31,207,31,175,31,175,30,175,29,207,31,219,31,107,31,240,31,87,31,84,31,214,31,136,31,214,31,243,31,243,30,11,31,168,31,108,31,195,31,195,30,228,31,71,31,83,31,99,31,99,30,140,31,127,31,251,31,123,31,150,31,150,30,150,29,150,28,150,27,121,31,73,31,31,31,255,31,37,31,246,31,237,31,47,31,95,31,108,31,150,31,150,30,176,31,228,31,224,31,101,31,247,31,254,31,247,31,78,31,78,30,78,29,78,28,78,27,167,31,247,31,129,31,100,31,6,31,242,31,90,31,178,31,151,31,151,30,243,31,36,31,180,31,216,31,130,31,130,30,130,29,130,28,156,31,67,31,67,30,170,31,196,31,223,31,12,31,208,31,40,31,106,31,137,31,137,30,108,31,129,31,25,31,134,31,18,31,92,31,92,30,223,31,18,31,213,31,201,31,107,31,107,30,60,31,60,30,13,31,1,31,1,30,130,31,169,31,231,31,167,31,167,30,245,31,129,31,232,31,156,31,80,31,13,31,201,31,249,31,231,31,10,31,10,30,10,29,215,31,250,31,113,31,62,31,253,31,38,31,38,30,38,29,169,31,209,31,190,31,126,31,126,30,168,31,248,31,165,31,165,30,166,31,84,31,213,31,122,31,88,31,177,31,239,31,218,31,188,31,119,31,154,31,75,31,131,31,246,31,204,31,105,31,15,31,244,31,31,31,31,30,54,31,75,31,234,31,68,31,158,31,84,31,131,31,131,30,210,31,210,30,210,29,211,31,250,31,74,31,255,31,235,31,233,31,198,31,194,31,85,31,138,31,16,31,5,31,116,31,208,31,110,31,96,31,56,31,56,30,182,31,179,31,68,31,32,31,219,31,219,30,35,31,82,31,212,31,228,31,124,31,228,31,103,31,103,30,59,31,59,30,41,31,6,31,6,30,47,31,242,31,28,31,186,31,10,31,155,31,111,31,255,31,255,30,30,31,198,31,198,30,147,31,221,31,213,31,192,31,244,31,190,31,28,31,35,31,197,31,35,31,122,31,92,31,19,31,209,31,67,31,62,31,209,31,51,31,51,30,51,29,211,31,21,31,239,31,12,31,90,31,89,31,89,30,111,31,121,31,121,30,100,31,120,31,95,31,95,30,114,31,114,30,250,31,150,31,108,31,149,31,105,31,198,31,198,30,84,31,189,31,189,30,127,31,127,30,136,31,136,30,208,31,153,31,17,31,207,31,141,31,146,31,219,31,55,31,61,31,35,31,243,31,44,31,157,31,8,31,8,30,84,31,124,31,124,30,124,29,163,31,238,31,238,30,105,31,105,30,209,31,193,31,28,31,240,31,234,31,7,31,4,31,99,31,18,31,179,31,179,30,77,31,90,31,90,30,90,29,169,31,251,31,190,31,211,31,211,30,211,29,86,31,190,31,111,31,111,30,111,29,176,31,166,31,129,31,123,31,180,31,26,31,108,31,207,31,21,31,57,31,96,31,64,31,47,31,178,31,178,30,82,31,243,31,79,31,120,31,29,31,189,31,189,30,103,31,44,31,132,31,37,31,30,31,189,31,178,31,189,31,189,30,124,31,17,31,17,30,17,29,206,31,178,31,244,31,155,31,107,31,135,31,183,31,183,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
