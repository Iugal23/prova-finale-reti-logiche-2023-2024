-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 667;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (109,0,85,0,11,0,203,0,133,0,224,0,65,0,187,0,0,0,54,0,111,0,0,0,48,0,22,0,93,0,119,0,62,0,31,0,200,0,131,0,234,0,0,0,0,0,0,0,251,0,209,0,30,0,70,0,100,0,40,0,0,0,0,0,75,0,126,0,184,0,19,0,227,0,239,0,198,0,77,0,217,0,141,0,70,0,48,0,52,0,0,0,8,0,0,0,0,0,34,0,38,0,0,0,155,0,5,0,10,0,0,0,0,0,60,0,189,0,138,0,0,0,0,0,0,0,0,0,0,0,201,0,206,0,217,0,163,0,132,0,182,0,167,0,106,0,0,0,179,0,0,0,97,0,143,0,178,0,0,0,204,0,218,0,101,0,17,0,216,0,203,0,255,0,181,0,0,0,85,0,51,0,0,0,99,0,14,0,212,0,35,0,221,0,196,0,175,0,234,0,0,0,0,0,95,0,169,0,15,0,91,0,255,0,0,0,139,0,0,0,0,0,30,0,53,0,157,0,218,0,253,0,93,0,196,0,0,0,0,0,167,0,2,0,105,0,180,0,244,0,123,0,225,0,50,0,0,0,0,0,0,0,35,0,132,0,0,0,115,0,79,0,0,0,195,0,121,0,65,0,33,0,245,0,254,0,131,0,168,0,92,0,174,0,103,0,0,0,83,0,115,0,208,0,39,0,11,0,213,0,252,0,130,0,221,0,79,0,181,0,120,0,145,0,0,0,0,0,0,0,138,0,229,0,0,0,106,0,81,0,3,0,64,0,54,0,200,0,84,0,0,0,0,0,128,0,200,0,39,0,126,0,184,0,197,0,0,0,169,0,0,0,0,0,0,0,0,0,27,0,0,0,246,0,60,0,0,0,12,0,159,0,76,0,172,0,197,0,60,0,109,0,63,0,14,0,40,0,0,0,0,0,33,0,110,0,175,0,173,0,229,0,178,0,211,0,116,0,39,0,0,0,212,0,235,0,252,0,157,0,0,0,61,0,189,0,161,0,0,0,0,0,188,0,168,0,214,0,47,0,64,0,250,0,0,0,74,0,0,0,51,0,0,0,183,0,93,0,0,0,39,0,238,0,68,0,57,0,0,0,233,0,200,0,62,0,0,0,70,0,227,0,52,0,139,0,87,0,209,0,31,0,31,0,89,0,136,0,203,0,42,0,158,0,200,0,201,0,3,0,118,0,0,0,0,0,190,0,182,0,231,0,92,0,97,0,206,0,115,0,191,0,179,0,0,0,50,0,59,0,173,0,163,0,37,0,0,0,172,0,15,0,0,0,31,0,26,0,234,0,221,0,16,0,228,0,0,0,0,0,213,0,230,0,168,0,117,0,210,0,72,0,70,0,0,0,59,0,61,0,0,0,130,0,102,0,248,0,0,0,0,0,80,0,42,0,127,0,240,0,0,0,116,0,209,0,47,0,16,0,0,0,97,0,147,0,182,0,0,0,0,0,0,0,198,0,62,0,0,0,0,0,0,0,164,0,54,0,100,0,0,0,42,0,242,0,127,0,253,0,19,0,239,0,81,0,253,0,181,0,50,0,73,0,23,0,193,0,102,0,30,0,166,0,101,0,74,0,78,0,237,0,0,0,91,0,57,0,222,0,186,0,0,0,0,0,134,0,38,0,144,0,215,0,0,0,33,0,0,0,0,0,0,0,189,0,154,0,71,0,138,0,215,0,227,0,57,0,132,0,0,0,183,0,101,0,0,0,70,0,201,0,245,0,53,0,0,0,58,0,0,0,249,0,172,0,152,0,80,0,0,0,178,0,90,0,4,0,198,0,0,0,16,0,2,0,14,0,0,0,49,0,118,0,51,0,166,0,0,0,153,0,27,0,74,0,205,0,238,0,63,0,161,0,232,0,184,0,169,0,177,0,42,0,91,0,64,0,88,0,161,0,52,0,185,0,0,0,0,0,142,0,0,0,0,0,197,0,8,0,156,0,0,0,0,0,99,0,54,0,121,0,136,0,136,0,203,0,169,0,231,0,0,0,108,0,201,0,85,0,28,0,58,0,85,0,245,0,253,0,185,0,0,0,0,0,42,0,255,0,106,0,0,0,245,0,0,0,0,0,112,0,224,0,64,0,138,0,94,0,31,0,226,0,145,0,0,0,91,0,49,0,45,0,33,0,186,0,0,0,233,0,249,0,0,0,43,0,0,0,104,0,61,0,198,0,0,0,56,0,0,0,112,0,117,0,111,0,154,0,0,0,154,0,141,0,213,0,81,0,0,0,11,0,223,0,171,0,0,0,22,0,185,0,179,0,195,0,15,0,226,0,60,0,203,0,192,0,150,0,0,0,133,0,105,0,235,0,193,0,0,0,81,0,0,0,38,0,132,0,4,0,74,0,80,0,0,0,85,0,177,0,149,0,81,0,95,0,84,0,250,0,25,0,195,0,11,0,233,0,0,0,0,0,224,0,131,0,177,0,17,0,0,0,85,0,107,0,0,0,125,0,189,0,0,0,72,0,61,0,181,0,138,0,76,0,173,0,133,0,53,0,196,0,0,0,221,0,99,0,33,0,74,0,171,0,0,0,6,0,141,0,0,0,0,0,0,0,174,0,188,0,80,0,17,0,87,0,0,0,30,0,128,0,187,0,188,0,192,0,162,0,173,0,47,0,0,0,248,0,113,0,148,0,225,0,17,0,0,0,251,0,0,0,107,0,0,0,184,0,119,0,0,0,228,0,237,0,0,0,155,0,116,0,11,0,0,0,0,0,174,0,206,0,87,0,142,0,151,0,242,0,145,0,137,0,48,0,107,0,235,0,129,0,142,0,18,0,86,0,0,0,0,0,58,0,37,0,50,0,198,0,171,0,33,0,0,0,11,0,97,0,15,0,226,0,0,0,0,0,75,0,0,0,98,0,24,0,152,0,0,0,0,0,106,0,231,0,74,0,227,0,169,0,254,0,37,0,112,0,0,0,91,0,78,0,111,0,18,0,0,0,250,0,132,0,230,0,243,0,45,0,0,0);
signal scenario_full  : scenario_type := (109,31,85,31,11,31,203,31,133,31,224,31,65,31,187,31,187,30,54,31,111,31,111,30,48,31,22,31,93,31,119,31,62,31,31,31,200,31,131,31,234,31,234,30,234,29,234,28,251,31,209,31,30,31,70,31,100,31,40,31,40,30,40,29,75,31,126,31,184,31,19,31,227,31,239,31,198,31,77,31,217,31,141,31,70,31,48,31,52,31,52,30,8,31,8,30,8,29,34,31,38,31,38,30,155,31,5,31,10,31,10,30,10,29,60,31,189,31,138,31,138,30,138,29,138,28,138,27,138,26,201,31,206,31,217,31,163,31,132,31,182,31,167,31,106,31,106,30,179,31,179,30,97,31,143,31,178,31,178,30,204,31,218,31,101,31,17,31,216,31,203,31,255,31,181,31,181,30,85,31,51,31,51,30,99,31,14,31,212,31,35,31,221,31,196,31,175,31,234,31,234,30,234,29,95,31,169,31,15,31,91,31,255,31,255,30,139,31,139,30,139,29,30,31,53,31,157,31,218,31,253,31,93,31,196,31,196,30,196,29,167,31,2,31,105,31,180,31,244,31,123,31,225,31,50,31,50,30,50,29,50,28,35,31,132,31,132,30,115,31,79,31,79,30,195,31,121,31,65,31,33,31,245,31,254,31,131,31,168,31,92,31,174,31,103,31,103,30,83,31,115,31,208,31,39,31,11,31,213,31,252,31,130,31,221,31,79,31,181,31,120,31,145,31,145,30,145,29,145,28,138,31,229,31,229,30,106,31,81,31,3,31,64,31,54,31,200,31,84,31,84,30,84,29,128,31,200,31,39,31,126,31,184,31,197,31,197,30,169,31,169,30,169,29,169,28,169,27,27,31,27,30,246,31,60,31,60,30,12,31,159,31,76,31,172,31,197,31,60,31,109,31,63,31,14,31,40,31,40,30,40,29,33,31,110,31,175,31,173,31,229,31,178,31,211,31,116,31,39,31,39,30,212,31,235,31,252,31,157,31,157,30,61,31,189,31,161,31,161,30,161,29,188,31,168,31,214,31,47,31,64,31,250,31,250,30,74,31,74,30,51,31,51,30,183,31,93,31,93,30,39,31,238,31,68,31,57,31,57,30,233,31,200,31,62,31,62,30,70,31,227,31,52,31,139,31,87,31,209,31,31,31,31,31,89,31,136,31,203,31,42,31,158,31,200,31,201,31,3,31,118,31,118,30,118,29,190,31,182,31,231,31,92,31,97,31,206,31,115,31,191,31,179,31,179,30,50,31,59,31,173,31,163,31,37,31,37,30,172,31,15,31,15,30,31,31,26,31,234,31,221,31,16,31,228,31,228,30,228,29,213,31,230,31,168,31,117,31,210,31,72,31,70,31,70,30,59,31,61,31,61,30,130,31,102,31,248,31,248,30,248,29,80,31,42,31,127,31,240,31,240,30,116,31,209,31,47,31,16,31,16,30,97,31,147,31,182,31,182,30,182,29,182,28,198,31,62,31,62,30,62,29,62,28,164,31,54,31,100,31,100,30,42,31,242,31,127,31,253,31,19,31,239,31,81,31,253,31,181,31,50,31,73,31,23,31,193,31,102,31,30,31,166,31,101,31,74,31,78,31,237,31,237,30,91,31,57,31,222,31,186,31,186,30,186,29,134,31,38,31,144,31,215,31,215,30,33,31,33,30,33,29,33,28,189,31,154,31,71,31,138,31,215,31,227,31,57,31,132,31,132,30,183,31,101,31,101,30,70,31,201,31,245,31,53,31,53,30,58,31,58,30,249,31,172,31,152,31,80,31,80,30,178,31,90,31,4,31,198,31,198,30,16,31,2,31,14,31,14,30,49,31,118,31,51,31,166,31,166,30,153,31,27,31,74,31,205,31,238,31,63,31,161,31,232,31,184,31,169,31,177,31,42,31,91,31,64,31,88,31,161,31,52,31,185,31,185,30,185,29,142,31,142,30,142,29,197,31,8,31,156,31,156,30,156,29,99,31,54,31,121,31,136,31,136,31,203,31,169,31,231,31,231,30,108,31,201,31,85,31,28,31,58,31,85,31,245,31,253,31,185,31,185,30,185,29,42,31,255,31,106,31,106,30,245,31,245,30,245,29,112,31,224,31,64,31,138,31,94,31,31,31,226,31,145,31,145,30,91,31,49,31,45,31,33,31,186,31,186,30,233,31,249,31,249,30,43,31,43,30,104,31,61,31,198,31,198,30,56,31,56,30,112,31,117,31,111,31,154,31,154,30,154,31,141,31,213,31,81,31,81,30,11,31,223,31,171,31,171,30,22,31,185,31,179,31,195,31,15,31,226,31,60,31,203,31,192,31,150,31,150,30,133,31,105,31,235,31,193,31,193,30,81,31,81,30,38,31,132,31,4,31,74,31,80,31,80,30,85,31,177,31,149,31,81,31,95,31,84,31,250,31,25,31,195,31,11,31,233,31,233,30,233,29,224,31,131,31,177,31,17,31,17,30,85,31,107,31,107,30,125,31,189,31,189,30,72,31,61,31,181,31,138,31,76,31,173,31,133,31,53,31,196,31,196,30,221,31,99,31,33,31,74,31,171,31,171,30,6,31,141,31,141,30,141,29,141,28,174,31,188,31,80,31,17,31,87,31,87,30,30,31,128,31,187,31,188,31,192,31,162,31,173,31,47,31,47,30,248,31,113,31,148,31,225,31,17,31,17,30,251,31,251,30,107,31,107,30,184,31,119,31,119,30,228,31,237,31,237,30,155,31,116,31,11,31,11,30,11,29,174,31,206,31,87,31,142,31,151,31,242,31,145,31,137,31,48,31,107,31,235,31,129,31,142,31,18,31,86,31,86,30,86,29,58,31,37,31,50,31,198,31,171,31,33,31,33,30,11,31,97,31,15,31,226,31,226,30,226,29,75,31,75,30,98,31,24,31,152,31,152,30,152,29,106,31,231,31,74,31,227,31,169,31,254,31,37,31,112,31,112,30,91,31,78,31,111,31,18,31,18,30,250,31,132,31,230,31,243,31,45,31,45,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
