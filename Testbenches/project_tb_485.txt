-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 306;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (221,0,8,0,0,0,94,0,105,0,0,0,70,0,94,0,202,0,23,0,0,0,222,0,54,0,191,0,0,0,0,0,0,0,0,0,13,0,0,0,202,0,233,0,39,0,253,0,212,0,0,0,81,0,243,0,0,0,221,0,70,0,0,0,247,0,240,0,17,0,51,0,117,0,77,0,53,0,130,0,137,0,74,0,89,0,232,0,0,0,78,0,171,0,113,0,0,0,146,0,210,0,90,0,133,0,112,0,21,0,115,0,108,0,223,0,99,0,127,0,186,0,108,0,255,0,116,0,36,0,0,0,33,0,247,0,233,0,61,0,0,0,244,0,194,0,205,0,229,0,118,0,204,0,39,0,0,0,255,0,163,0,112,0,171,0,0,0,137,0,181,0,228,0,62,0,120,0,5,0,137,0,159,0,206,0,112,0,34,0,28,0,13,0,223,0,11,0,185,0,52,0,70,0,239,0,36,0,0,0,70,0,37,0,55,0,232,0,238,0,225,0,0,0,236,0,0,0,0,0,76,0,240,0,227,0,88,0,255,0,59,0,28,0,55,0,148,0,11,0,0,0,207,0,0,0,5,0,0,0,0,0,0,0,38,0,206,0,16,0,190,0,0,0,184,0,0,0,135,0,173,0,47,0,175,0,51,0,0,0,24,0,0,0,4,0,100,0,201,0,250,0,238,0,178,0,18,0,127,0,174,0,173,0,239,0,230,0,32,0,141,0,122,0,86,0,0,0,0,0,0,0,186,0,174,0,253,0,209,0,207,0,67,0,244,0,94,0,105,0,210,0,46,0,55,0,166,0,247,0,250,0,163,0,9,0,3,0,161,0,0,0,231,0,162,0,0,0,49,0,204,0,135,0,158,0,115,0,162,0,0,0,63,0,234,0,0,0,0,0,69,0,8,0,230,0,181,0,6,0,147,0,13,0,176,0,167,0,89,0,119,0,0,0,0,0,246,0,28,0,7,0,161,0,0,0,178,0,94,0,245,0,110,0,230,0,0,0,27,0,85,0,2,0,106,0,241,0,226,0,0,0,0,0,1,0,90,0,150,0,55,0,189,0,232,0,86,0,244,0,99,0,151,0,178,0,166,0,0,0,53,0,187,0,247,0,0,0,0,0,138,0,27,0,53,0,18,0,0,0,16,0,49,0,241,0,19,0,252,0,237,0,9,0,35,0,0,0,58,0,81,0,0,0,104,0,225,0,212,0,6,0,35,0,27,0,0,0,246,0,9,0,163,0,50,0,0,0,41,0,160,0,0,0,174,0,56,0,41,0,145,0,161,0,101,0,221,0,156,0,105,0,223,0,231,0,119,0,209,0,206,0,0,0,114,0,87,0,158,0,50,0,0,0,88,0,197,0,197,0,114,0);
signal scenario_full  : scenario_type := (221,31,8,31,8,30,94,31,105,31,105,30,70,31,94,31,202,31,23,31,23,30,222,31,54,31,191,31,191,30,191,29,191,28,191,27,13,31,13,30,202,31,233,31,39,31,253,31,212,31,212,30,81,31,243,31,243,30,221,31,70,31,70,30,247,31,240,31,17,31,51,31,117,31,77,31,53,31,130,31,137,31,74,31,89,31,232,31,232,30,78,31,171,31,113,31,113,30,146,31,210,31,90,31,133,31,112,31,21,31,115,31,108,31,223,31,99,31,127,31,186,31,108,31,255,31,116,31,36,31,36,30,33,31,247,31,233,31,61,31,61,30,244,31,194,31,205,31,229,31,118,31,204,31,39,31,39,30,255,31,163,31,112,31,171,31,171,30,137,31,181,31,228,31,62,31,120,31,5,31,137,31,159,31,206,31,112,31,34,31,28,31,13,31,223,31,11,31,185,31,52,31,70,31,239,31,36,31,36,30,70,31,37,31,55,31,232,31,238,31,225,31,225,30,236,31,236,30,236,29,76,31,240,31,227,31,88,31,255,31,59,31,28,31,55,31,148,31,11,31,11,30,207,31,207,30,5,31,5,30,5,29,5,28,38,31,206,31,16,31,190,31,190,30,184,31,184,30,135,31,173,31,47,31,175,31,51,31,51,30,24,31,24,30,4,31,100,31,201,31,250,31,238,31,178,31,18,31,127,31,174,31,173,31,239,31,230,31,32,31,141,31,122,31,86,31,86,30,86,29,86,28,186,31,174,31,253,31,209,31,207,31,67,31,244,31,94,31,105,31,210,31,46,31,55,31,166,31,247,31,250,31,163,31,9,31,3,31,161,31,161,30,231,31,162,31,162,30,49,31,204,31,135,31,158,31,115,31,162,31,162,30,63,31,234,31,234,30,234,29,69,31,8,31,230,31,181,31,6,31,147,31,13,31,176,31,167,31,89,31,119,31,119,30,119,29,246,31,28,31,7,31,161,31,161,30,178,31,94,31,245,31,110,31,230,31,230,30,27,31,85,31,2,31,106,31,241,31,226,31,226,30,226,29,1,31,90,31,150,31,55,31,189,31,232,31,86,31,244,31,99,31,151,31,178,31,166,31,166,30,53,31,187,31,247,31,247,30,247,29,138,31,27,31,53,31,18,31,18,30,16,31,49,31,241,31,19,31,252,31,237,31,9,31,35,31,35,30,58,31,81,31,81,30,104,31,225,31,212,31,6,31,35,31,27,31,27,30,246,31,9,31,163,31,50,31,50,30,41,31,160,31,160,30,174,31,56,31,41,31,145,31,161,31,101,31,221,31,156,31,105,31,223,31,231,31,119,31,209,31,206,31,206,30,114,31,87,31,158,31,50,31,50,30,88,31,197,31,197,31,114,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
