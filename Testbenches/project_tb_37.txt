-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 888;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (229,0,127,0,0,0,45,0,121,0,178,0,97,0,189,0,55,0,241,0,34,0,198,0,155,0,166,0,88,0,90,0,18,0,0,0,202,0,101,0,0,0,155,0,52,0,198,0,137,0,186,0,40,0,0,0,0,0,0,0,0,0,80,0,79,0,33,0,114,0,0,0,96,0,246,0,5,0,21,0,226,0,130,0,35,0,171,0,194,0,180,0,145,0,68,0,0,0,0,0,21,0,0,0,210,0,169,0,0,0,0,0,67,0,114,0,178,0,0,0,33,0,134,0,23,0,177,0,60,0,86,0,53,0,84,0,139,0,10,0,250,0,107,0,79,0,252,0,248,0,7,0,133,0,0,0,142,0,35,0,16,0,245,0,27,0,90,0,24,0,0,0,210,0,98,0,0,0,48,0,222,0,4,0,14,0,0,0,32,0,0,0,59,0,238,0,243,0,0,0,115,0,45,0,203,0,250,0,217,0,10,0,150,0,66,0,194,0,0,0,0,0,0,0,0,0,0,0,187,0,39,0,54,0,19,0,63,0,0,0,102,0,27,0,153,0,138,0,18,0,80,0,144,0,232,0,0,0,41,0,28,0,0,0,216,0,110,0,0,0,0,0,32,0,181,0,53,0,46,0,167,0,0,0,0,0,210,0,102,0,100,0,119,0,0,0,9,0,0,0,45,0,103,0,51,0,90,0,0,0,34,0,250,0,0,0,0,0,0,0,0,0,156,0,0,0,79,0,0,0,25,0,174,0,95,0,69,0,74,0,123,0,0,0,204,0,64,0,34,0,60,0,0,0,136,0,116,0,27,0,230,0,243,0,145,0,119,0,138,0,0,0,31,0,0,0,119,0,0,0,186,0,135,0,0,0,98,0,198,0,0,0,247,0,1,0,81,0,0,0,0,0,197,0,35,0,110,0,95,0,139,0,83,0,0,0,41,0,236,0,194,0,7,0,1,0,59,0,0,0,0,0,72,0,162,0,140,0,46,0,127,0,112,0,79,0,0,0,177,0,0,0,236,0,56,0,114,0,77,0,220,0,0,0,145,0,0,0,232,0,181,0,160,0,0,0,73,0,53,0,99,0,0,0,129,0,131,0,0,0,128,0,0,0,89,0,0,0,0,0,142,0,70,0,0,0,172,0,171,0,50,0,64,0,143,0,135,0,33,0,91,0,233,0,0,0,0,0,0,0,221,0,0,0,36,0,195,0,176,0,66,0,0,0,13,0,160,0,231,0,20,0,156,0,81,0,0,0,165,0,28,0,158,0,205,0,170,0,41,0,102,0,88,0,26,0,0,0,91,0,0,0,16,0,13,0,207,0,65,0,10,0,81,0,118,0,61,0,179,0,0,0,10,0,185,0,11,0,159,0,226,0,169,0,0,0,188,0,0,0,126,0,195,0,0,0,198,0,144,0,0,0,125,0,239,0,136,0,205,0,0,0,255,0,89,0,0,0,0,0,175,0,64,0,20,0,172,0,240,0,204,0,206,0,0,0,210,0,88,0,162,0,0,0,212,0,48,0,94,0,120,0,169,0,83,0,176,0,0,0,82,0,250,0,0,0,0,0,0,0,215,0,163,0,0,0,237,0,89,0,113,0,107,0,0,0,244,0,201,0,106,0,29,0,0,0,35,0,0,0,188,0,27,0,247,0,4,0,207,0,198,0,161,0,54,0,104,0,0,0,151,0,175,0,32,0,88,0,0,0,43,0,100,0,92,0,83,0,0,0,158,0,111,0,0,0,228,0,0,0,64,0,68,0,76,0,168,0,220,0,0,0,158,0,80,0,43,0,107,0,176,0,0,0,136,0,0,0,177,0,0,0,115,0,0,0,224,0,78,0,91,0,83,0,0,0,163,0,56,0,0,0,121,0,141,0,208,0,153,0,214,0,166,0,2,0,178,0,9,0,175,0,239,0,177,0,172,0,96,0,151,0,70,0,212,0,40,0,76,0,42,0,15,0,139,0,73,0,42,0,91,0,0,0,247,0,34,0,44,0,74,0,174,0,82,0,75,0,170,0,0,0,0,0,231,0,106,0,56,0,0,0,111,0,246,0,15,0,165,0,76,0,1,0,153,0,176,0,0,0,215,0,178,0,225,0,73,0,231,0,166,0,114,0,26,0,249,0,255,0,218,0,0,0,9,0,240,0,7,0,95,0,187,0,235,0,124,0,46,0,0,0,222,0,41,0,253,0,16,0,0,0,73,0,0,0,200,0,209,0,206,0,222,0,115,0,8,0,221,0,209,0,194,0,158,0,0,0,167,0,30,0,12,0,126,0,110,0,105,0,178,0,0,0,207,0,139,0,248,0,191,0,26,0,15,0,19,0,0,0,24,0,222,0,194,0,0,0,226,0,33,0,224,0,215,0,113,0,10,0,122,0,149,0,2,0,176,0,136,0,205,0,165,0,61,0,35,0,114,0,100,0,116,0,0,0,0,0,48,0,34,0,72,0,166,0,22,0,195,0,134,0,85,0,91,0,195,0,0,0,49,0,63,0,127,0,62,0,0,0,127,0,124,0,0,0,252,0,74,0,47,0,39,0,252,0,0,0,8,0,0,0,220,0,0,0,163,0,177,0,130,0,184,0,133,0,82,0,211,0,193,0,1,0,0,0,0,0,82,0,181,0,254,0,118,0,67,0,0,0,205,0,0,0,201,0,0,0,55,0,239,0,214,0,0,0,7,0,249,0,253,0,0,0,93,0,39,0,125,0,29,0,196,0,0,0,234,0,80,0,91,0,123,0,0,0,240,0,43,0,135,0,137,0,0,0,141,0,27,0,0,0,141,0,173,0,141,0,77,0,252,0,197,0,109,0,0,0,96,0,23,0,133,0,79,0,0,0,18,0,26,0,17,0,106,0,0,0,109,0,114,0,0,0,193,0,72,0,0,0,42,0,9,0,101,0,245,0,200,0,0,0,184,0,75,0,30,0,25,0,129,0,0,0,187,0,209,0,12,0,0,0,160,0,0,0,192,0,148,0,0,0,208,0,130,0,0,0,61,0,0,0,99,0,0,0,125,0,173,0,229,0,143,0,156,0,97,0,0,0,249,0,77,0,0,0,250,0,152,0,0,0,74,0,255,0,138,0,0,0,186,0,192,0,0,0,242,0,88,0,131,0,120,0,63,0,17,0,48,0,235,0,71,0,248,0,23,0,36,0,0,0,73,0,0,0,218,0,154,0,193,0,220,0,200,0,195,0,122,0,79,0,0,0,0,0,243,0,72,0,129,0,125,0,48,0,96,0,239,0,116,0,229,0,20,0,143,0,209,0,182,0,2,0,34,0,215,0,0,0,190,0,248,0,0,0,237,0,146,0,0,0,0,0,149,0,18,0,39,0,0,0,0,0,0,0,0,0,96,0,111,0,171,0,224,0,199,0,146,0,241,0,108,0,0,0,0,0,245,0,240,0,93,0,58,0,222,0,129,0,0,0,86,0,4,0,217,0,161,0,221,0,247,0,226,0,0,0,166,0,38,0,93,0,75,0,63,0,37,0,245,0,12,0,65,0,0,0,208,0,0,0,225,0,0,0,113,0,234,0,0,0,137,0,77,0,212,0,36,0,224,0,240,0,125,0,55,0,54,0,0,0,152,0,122,0,0,0,227,0,159,0,71,0,8,0,237,0,178,0,231,0,0,0,139,0,51,0,4,0,33,0,0,0,114,0,128,0,147,0,246,0,57,0,0,0,72,0,0,0,43,0,0,0,0,0,109,0,0,0,123,0,0,0,0,0,30,0,61,0,222,0,105,0,0,0,12,0,63,0,206,0,159,0,108,0,0,0,57,0,107,0,196,0,195,0,110,0,0,0,175,0,104,0,0,0,102,0,76,0,0,0,0,0,107,0,97,0,226,0,154,0,203,0,0,0,233,0,251,0,247,0,0,0,0,0,116,0,0,0,123,0,185,0,0,0,0,0,52,0,76,0,0,0,195,0,177,0,169,0,127,0,15,0,0,0,0,0,0,0,0,0,144,0,0,0);
signal scenario_full  : scenario_type := (229,31,127,31,127,30,45,31,121,31,178,31,97,31,189,31,55,31,241,31,34,31,198,31,155,31,166,31,88,31,90,31,18,31,18,30,202,31,101,31,101,30,155,31,52,31,198,31,137,31,186,31,40,31,40,30,40,29,40,28,40,27,80,31,79,31,33,31,114,31,114,30,96,31,246,31,5,31,21,31,226,31,130,31,35,31,171,31,194,31,180,31,145,31,68,31,68,30,68,29,21,31,21,30,210,31,169,31,169,30,169,29,67,31,114,31,178,31,178,30,33,31,134,31,23,31,177,31,60,31,86,31,53,31,84,31,139,31,10,31,250,31,107,31,79,31,252,31,248,31,7,31,133,31,133,30,142,31,35,31,16,31,245,31,27,31,90,31,24,31,24,30,210,31,98,31,98,30,48,31,222,31,4,31,14,31,14,30,32,31,32,30,59,31,238,31,243,31,243,30,115,31,45,31,203,31,250,31,217,31,10,31,150,31,66,31,194,31,194,30,194,29,194,28,194,27,194,26,187,31,39,31,54,31,19,31,63,31,63,30,102,31,27,31,153,31,138,31,18,31,80,31,144,31,232,31,232,30,41,31,28,31,28,30,216,31,110,31,110,30,110,29,32,31,181,31,53,31,46,31,167,31,167,30,167,29,210,31,102,31,100,31,119,31,119,30,9,31,9,30,45,31,103,31,51,31,90,31,90,30,34,31,250,31,250,30,250,29,250,28,250,27,156,31,156,30,79,31,79,30,25,31,174,31,95,31,69,31,74,31,123,31,123,30,204,31,64,31,34,31,60,31,60,30,136,31,116,31,27,31,230,31,243,31,145,31,119,31,138,31,138,30,31,31,31,30,119,31,119,30,186,31,135,31,135,30,98,31,198,31,198,30,247,31,1,31,81,31,81,30,81,29,197,31,35,31,110,31,95,31,139,31,83,31,83,30,41,31,236,31,194,31,7,31,1,31,59,31,59,30,59,29,72,31,162,31,140,31,46,31,127,31,112,31,79,31,79,30,177,31,177,30,236,31,56,31,114,31,77,31,220,31,220,30,145,31,145,30,232,31,181,31,160,31,160,30,73,31,53,31,99,31,99,30,129,31,131,31,131,30,128,31,128,30,89,31,89,30,89,29,142,31,70,31,70,30,172,31,171,31,50,31,64,31,143,31,135,31,33,31,91,31,233,31,233,30,233,29,233,28,221,31,221,30,36,31,195,31,176,31,66,31,66,30,13,31,160,31,231,31,20,31,156,31,81,31,81,30,165,31,28,31,158,31,205,31,170,31,41,31,102,31,88,31,26,31,26,30,91,31,91,30,16,31,13,31,207,31,65,31,10,31,81,31,118,31,61,31,179,31,179,30,10,31,185,31,11,31,159,31,226,31,169,31,169,30,188,31,188,30,126,31,195,31,195,30,198,31,144,31,144,30,125,31,239,31,136,31,205,31,205,30,255,31,89,31,89,30,89,29,175,31,64,31,20,31,172,31,240,31,204,31,206,31,206,30,210,31,88,31,162,31,162,30,212,31,48,31,94,31,120,31,169,31,83,31,176,31,176,30,82,31,250,31,250,30,250,29,250,28,215,31,163,31,163,30,237,31,89,31,113,31,107,31,107,30,244,31,201,31,106,31,29,31,29,30,35,31,35,30,188,31,27,31,247,31,4,31,207,31,198,31,161,31,54,31,104,31,104,30,151,31,175,31,32,31,88,31,88,30,43,31,100,31,92,31,83,31,83,30,158,31,111,31,111,30,228,31,228,30,64,31,68,31,76,31,168,31,220,31,220,30,158,31,80,31,43,31,107,31,176,31,176,30,136,31,136,30,177,31,177,30,115,31,115,30,224,31,78,31,91,31,83,31,83,30,163,31,56,31,56,30,121,31,141,31,208,31,153,31,214,31,166,31,2,31,178,31,9,31,175,31,239,31,177,31,172,31,96,31,151,31,70,31,212,31,40,31,76,31,42,31,15,31,139,31,73,31,42,31,91,31,91,30,247,31,34,31,44,31,74,31,174,31,82,31,75,31,170,31,170,30,170,29,231,31,106,31,56,31,56,30,111,31,246,31,15,31,165,31,76,31,1,31,153,31,176,31,176,30,215,31,178,31,225,31,73,31,231,31,166,31,114,31,26,31,249,31,255,31,218,31,218,30,9,31,240,31,7,31,95,31,187,31,235,31,124,31,46,31,46,30,222,31,41,31,253,31,16,31,16,30,73,31,73,30,200,31,209,31,206,31,222,31,115,31,8,31,221,31,209,31,194,31,158,31,158,30,167,31,30,31,12,31,126,31,110,31,105,31,178,31,178,30,207,31,139,31,248,31,191,31,26,31,15,31,19,31,19,30,24,31,222,31,194,31,194,30,226,31,33,31,224,31,215,31,113,31,10,31,122,31,149,31,2,31,176,31,136,31,205,31,165,31,61,31,35,31,114,31,100,31,116,31,116,30,116,29,48,31,34,31,72,31,166,31,22,31,195,31,134,31,85,31,91,31,195,31,195,30,49,31,63,31,127,31,62,31,62,30,127,31,124,31,124,30,252,31,74,31,47,31,39,31,252,31,252,30,8,31,8,30,220,31,220,30,163,31,177,31,130,31,184,31,133,31,82,31,211,31,193,31,1,31,1,30,1,29,82,31,181,31,254,31,118,31,67,31,67,30,205,31,205,30,201,31,201,30,55,31,239,31,214,31,214,30,7,31,249,31,253,31,253,30,93,31,39,31,125,31,29,31,196,31,196,30,234,31,80,31,91,31,123,31,123,30,240,31,43,31,135,31,137,31,137,30,141,31,27,31,27,30,141,31,173,31,141,31,77,31,252,31,197,31,109,31,109,30,96,31,23,31,133,31,79,31,79,30,18,31,26,31,17,31,106,31,106,30,109,31,114,31,114,30,193,31,72,31,72,30,42,31,9,31,101,31,245,31,200,31,200,30,184,31,75,31,30,31,25,31,129,31,129,30,187,31,209,31,12,31,12,30,160,31,160,30,192,31,148,31,148,30,208,31,130,31,130,30,61,31,61,30,99,31,99,30,125,31,173,31,229,31,143,31,156,31,97,31,97,30,249,31,77,31,77,30,250,31,152,31,152,30,74,31,255,31,138,31,138,30,186,31,192,31,192,30,242,31,88,31,131,31,120,31,63,31,17,31,48,31,235,31,71,31,248,31,23,31,36,31,36,30,73,31,73,30,218,31,154,31,193,31,220,31,200,31,195,31,122,31,79,31,79,30,79,29,243,31,72,31,129,31,125,31,48,31,96,31,239,31,116,31,229,31,20,31,143,31,209,31,182,31,2,31,34,31,215,31,215,30,190,31,248,31,248,30,237,31,146,31,146,30,146,29,149,31,18,31,39,31,39,30,39,29,39,28,39,27,96,31,111,31,171,31,224,31,199,31,146,31,241,31,108,31,108,30,108,29,245,31,240,31,93,31,58,31,222,31,129,31,129,30,86,31,4,31,217,31,161,31,221,31,247,31,226,31,226,30,166,31,38,31,93,31,75,31,63,31,37,31,245,31,12,31,65,31,65,30,208,31,208,30,225,31,225,30,113,31,234,31,234,30,137,31,77,31,212,31,36,31,224,31,240,31,125,31,55,31,54,31,54,30,152,31,122,31,122,30,227,31,159,31,71,31,8,31,237,31,178,31,231,31,231,30,139,31,51,31,4,31,33,31,33,30,114,31,128,31,147,31,246,31,57,31,57,30,72,31,72,30,43,31,43,30,43,29,109,31,109,30,123,31,123,30,123,29,30,31,61,31,222,31,105,31,105,30,12,31,63,31,206,31,159,31,108,31,108,30,57,31,107,31,196,31,195,31,110,31,110,30,175,31,104,31,104,30,102,31,76,31,76,30,76,29,107,31,97,31,226,31,154,31,203,31,203,30,233,31,251,31,247,31,247,30,247,29,116,31,116,30,123,31,185,31,185,30,185,29,52,31,76,31,76,30,195,31,177,31,169,31,127,31,15,31,15,30,15,29,15,28,15,27,144,31,144,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
