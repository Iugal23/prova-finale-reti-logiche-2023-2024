-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 459;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (44,0,47,0,104,0,89,0,238,0,0,0,157,0,0,0,157,0,39,0,143,0,88,0,0,0,163,0,100,0,156,0,166,0,0,0,215,0,188,0,132,0,116,0,55,0,82,0,88,0,94,0,85,0,223,0,110,0,188,0,176,0,0,0,209,0,106,0,0,0,70,0,0,0,144,0,136,0,0,0,62,0,153,0,0,0,0,0,246,0,7,0,146,0,125,0,59,0,57,0,0,0,48,0,73,0,234,0,249,0,52,0,52,0,0,0,187,0,0,0,82,0,125,0,133,0,0,0,0,0,204,0,64,0,254,0,239,0,197,0,239,0,2,0,121,0,46,0,114,0,105,0,0,0,36,0,157,0,25,0,101,0,174,0,221,0,112,0,70,0,213,0,103,0,0,0,0,0,9,0,201,0,62,0,243,0,147,0,112,0,0,0,231,0,122,0,0,0,0,0,0,0,187,0,33,0,162,0,125,0,44,0,0,0,0,0,112,0,135,0,159,0,207,0,88,0,0,0,231,0,103,0,0,0,1,0,0,0,0,0,163,0,227,0,4,0,54,0,31,0,161,0,0,0,0,0,172,0,66,0,24,0,169,0,174,0,0,0,240,0,61,0,0,0,10,0,0,0,242,0,35,0,120,0,173,0,71,0,126,0,0,0,146,0,233,0,135,0,149,0,65,0,35,0,227,0,0,0,139,0,22,0,34,0,230,0,153,0,215,0,14,0,163,0,211,0,0,0,0,0,127,0,0,0,220,0,133,0,0,0,209,0,105,0,220,0,102,0,35,0,135,0,142,0,44,0,232,0,182,0,75,0,253,0,156,0,19,0,65,0,163,0,156,0,0,0,225,0,77,0,198,0,249,0,59,0,130,0,0,0,0,0,216,0,23,0,163,0,0,0,243,0,144,0,165,0,0,0,0,0,97,0,118,0,185,0,0,0,132,0,0,0,149,0,199,0,235,0,132,0,0,0,80,0,164,0,123,0,251,0,178,0,86,0,79,0,50,0,97,0,0,0,83,0,49,0,91,0,0,0,0,0,186,0,0,0,0,0,206,0,139,0,0,0,0,0,0,0,106,0,249,0,0,0,134,0,167,0,70,0,210,0,152,0,134,0,0,0,70,0,69,0,0,0,35,0,97,0,50,0,165,0,253,0,101,0,69,0,200,0,142,0,0,0,228,0,226,0,0,0,0,0,113,0,15,0,93,0,116,0,12,0,0,0,102,0,65,0,232,0,83,0,240,0,18,0,0,0,182,0,0,0,150,0,69,0,71,0,0,0,0,0,0,0,127,0,191,0,0,0,0,0,36,0,29,0,0,0,225,0,91,0,0,0,205,0,39,0,220,0,18,0,0,0,124,0,157,0,197,0,118,0,249,0,175,0,0,0,98,0,78,0,136,0,142,0,102,0,136,0,10,0,1,0,10,0,110,0,0,0,122,0,204,0,175,0,169,0,0,0,226,0,0,0,0,0,0,0,137,0,0,0,22,0,171,0,77,0,0,0,0,0,250,0,47,0,0,0,45,0,0,0,201,0,35,0,64,0,246,0,135,0,69,0,106,0,56,0,241,0,76,0,88,0,155,0,230,0,18,0,0,0,80,0,0,0,5,0,123,0,50,0,213,0,136,0,0,0,0,0,0,0,182,0,0,0,0,0,40,0,213,0,108,0,77,0,150,0,10,0,215,0,0,0,67,0,108,0,0,0,135,0,83,0,30,0,87,0,11,0,88,0,208,0,164,0,70,0,9,0,237,0,100,0,211,0,77,0,131,0,37,0,33,0,153,0,220,0,219,0,0,0,23,0,229,0,247,0,35,0,0,0,71,0,118,0,237,0,127,0,216,0,73,0,0,0,253,0,5,0,237,0,37,0,104,0,193,0,185,0,225,0,235,0,0,0,50,0,200,0,163,0,0,0,0,0,0,0,82,0,58,0,45,0,8,0,0,0,0,0,30,0,51,0,198,0,104,0,133,0,141,0,217,0,0,0,0,0,195,0,69,0,74,0,0,0,25,0,174,0,173,0,154,0,60,0,0,0,198,0,90,0,227,0,247,0,227,0);
signal scenario_full  : scenario_type := (44,31,47,31,104,31,89,31,238,31,238,30,157,31,157,30,157,31,39,31,143,31,88,31,88,30,163,31,100,31,156,31,166,31,166,30,215,31,188,31,132,31,116,31,55,31,82,31,88,31,94,31,85,31,223,31,110,31,188,31,176,31,176,30,209,31,106,31,106,30,70,31,70,30,144,31,136,31,136,30,62,31,153,31,153,30,153,29,246,31,7,31,146,31,125,31,59,31,57,31,57,30,48,31,73,31,234,31,249,31,52,31,52,31,52,30,187,31,187,30,82,31,125,31,133,31,133,30,133,29,204,31,64,31,254,31,239,31,197,31,239,31,2,31,121,31,46,31,114,31,105,31,105,30,36,31,157,31,25,31,101,31,174,31,221,31,112,31,70,31,213,31,103,31,103,30,103,29,9,31,201,31,62,31,243,31,147,31,112,31,112,30,231,31,122,31,122,30,122,29,122,28,187,31,33,31,162,31,125,31,44,31,44,30,44,29,112,31,135,31,159,31,207,31,88,31,88,30,231,31,103,31,103,30,1,31,1,30,1,29,163,31,227,31,4,31,54,31,31,31,161,31,161,30,161,29,172,31,66,31,24,31,169,31,174,31,174,30,240,31,61,31,61,30,10,31,10,30,242,31,35,31,120,31,173,31,71,31,126,31,126,30,146,31,233,31,135,31,149,31,65,31,35,31,227,31,227,30,139,31,22,31,34,31,230,31,153,31,215,31,14,31,163,31,211,31,211,30,211,29,127,31,127,30,220,31,133,31,133,30,209,31,105,31,220,31,102,31,35,31,135,31,142,31,44,31,232,31,182,31,75,31,253,31,156,31,19,31,65,31,163,31,156,31,156,30,225,31,77,31,198,31,249,31,59,31,130,31,130,30,130,29,216,31,23,31,163,31,163,30,243,31,144,31,165,31,165,30,165,29,97,31,118,31,185,31,185,30,132,31,132,30,149,31,199,31,235,31,132,31,132,30,80,31,164,31,123,31,251,31,178,31,86,31,79,31,50,31,97,31,97,30,83,31,49,31,91,31,91,30,91,29,186,31,186,30,186,29,206,31,139,31,139,30,139,29,139,28,106,31,249,31,249,30,134,31,167,31,70,31,210,31,152,31,134,31,134,30,70,31,69,31,69,30,35,31,97,31,50,31,165,31,253,31,101,31,69,31,200,31,142,31,142,30,228,31,226,31,226,30,226,29,113,31,15,31,93,31,116,31,12,31,12,30,102,31,65,31,232,31,83,31,240,31,18,31,18,30,182,31,182,30,150,31,69,31,71,31,71,30,71,29,71,28,127,31,191,31,191,30,191,29,36,31,29,31,29,30,225,31,91,31,91,30,205,31,39,31,220,31,18,31,18,30,124,31,157,31,197,31,118,31,249,31,175,31,175,30,98,31,78,31,136,31,142,31,102,31,136,31,10,31,1,31,10,31,110,31,110,30,122,31,204,31,175,31,169,31,169,30,226,31,226,30,226,29,226,28,137,31,137,30,22,31,171,31,77,31,77,30,77,29,250,31,47,31,47,30,45,31,45,30,201,31,35,31,64,31,246,31,135,31,69,31,106,31,56,31,241,31,76,31,88,31,155,31,230,31,18,31,18,30,80,31,80,30,5,31,123,31,50,31,213,31,136,31,136,30,136,29,136,28,182,31,182,30,182,29,40,31,213,31,108,31,77,31,150,31,10,31,215,31,215,30,67,31,108,31,108,30,135,31,83,31,30,31,87,31,11,31,88,31,208,31,164,31,70,31,9,31,237,31,100,31,211,31,77,31,131,31,37,31,33,31,153,31,220,31,219,31,219,30,23,31,229,31,247,31,35,31,35,30,71,31,118,31,237,31,127,31,216,31,73,31,73,30,253,31,5,31,237,31,37,31,104,31,193,31,185,31,225,31,235,31,235,30,50,31,200,31,163,31,163,30,163,29,163,28,82,31,58,31,45,31,8,31,8,30,8,29,30,31,51,31,198,31,104,31,133,31,141,31,217,31,217,30,217,29,195,31,69,31,74,31,74,30,25,31,174,31,173,31,154,31,60,31,60,30,198,31,90,31,227,31,247,31,227,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
