-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 917;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (4,0,58,0,81,0,109,0,91,0,209,0,0,0,222,0,211,0,181,0,131,0,232,0,0,0,0,0,137,0,154,0,136,0,27,0,0,0,223,0,0,0,0,0,227,0,45,0,213,0,163,0,2,0,189,0,152,0,244,0,184,0,89,0,139,0,77,0,103,0,240,0,27,0,0,0,114,0,109,0,43,0,69,0,252,0,54,0,23,0,0,0,13,0,206,0,5,0,61,0,232,0,4,0,97,0,150,0,138,0,127,0,7,0,98,0,215,0,194,0,46,0,187,0,113,0,77,0,190,0,87,0,214,0,184,0,18,0,98,0,99,0,180,0,41,0,220,0,218,0,0,0,199,0,205,0,219,0,227,0,0,0,0,0,104,0,0,0,0,0,0,0,79,0,0,0,61,0,186,0,165,0,214,0,190,0,0,0,98,0,133,0,162,0,107,0,155,0,0,0,22,0,0,0,92,0,0,0,63,0,15,0,170,0,120,0,234,0,89,0,218,0,184,0,0,0,192,0,0,0,220,0,0,0,34,0,158,0,91,0,47,0,49,0,99,0,234,0,244,0,187,0,243,0,17,0,74,0,210,0,126,0,185,0,39,0,67,0,157,0,85,0,16,0,179,0,0,0,170,0,254,0,0,0,0,0,189,0,63,0,35,0,40,0,245,0,97,0,40,0,0,0,111,0,42,0,162,0,248,0,60,0,36,0,254,0,0,0,0,0,84,0,0,0,0,0,156,0,27,0,248,0,237,0,212,0,180,0,50,0,248,0,242,0,0,0,0,0,181,0,181,0,77,0,0,0,150,0,156,0,183,0,59,0,250,0,144,0,175,0,0,0,0,0,159,0,0,0,118,0,145,0,215,0,167,0,67,0,95,0,201,0,156,0,116,0,153,0,117,0,0,0,38,0,0,0,71,0,11,0,79,0,4,0,14,0,246,0,8,0,52,0,141,0,0,0,158,0,217,0,106,0,0,0,188,0,0,0,89,0,22,0,230,0,123,0,12,0,80,0,0,0,70,0,125,0,48,0,0,0,47,0,252,0,35,0,88,0,107,0,186,0,34,0,3,0,215,0,79,0,172,0,49,0,0,0,166,0,50,0,195,0,177,0,231,0,0,0,0,0,219,0,84,0,0,0,71,0,168,0,230,0,183,0,105,0,186,0,203,0,0,0,59,0,134,0,7,0,103,0,20,0,149,0,0,0,203,0,247,0,249,0,0,0,169,0,39,0,40,0,179,0,11,0,35,0,80,0,189,0,84,0,123,0,225,0,29,0,169,0,0,0,232,0,0,0,182,0,125,0,128,0,0,0,215,0,19,0,14,0,43,0,214,0,184,0,0,0,120,0,232,0,144,0,168,0,137,0,104,0,0,0,76,0,143,0,152,0,95,0,0,0,82,0,66,0,246,0,200,0,202,0,23,0,0,0,81,0,171,0,42,0,209,0,59,0,132,0,75,0,0,0,64,0,67,0,64,0,0,0,0,0,113,0,1,0,229,0,242,0,238,0,170,0,142,0,31,0,0,0,147,0,4,0,32,0,85,0,161,0,38,0,226,0,26,0,120,0,107,0,0,0,0,0,5,0,0,0,76,0,43,0,104,0,0,0,81,0,52,0,143,0,228,0,205,0,160,0,179,0,136,0,93,0,211,0,0,0,236,0,230,0,57,0,136,0,83,0,0,0,92,0,189,0,248,0,0,0,53,0,85,0,31,0,57,0,154,0,56,0,16,0,83,0,65,0,115,0,197,0,0,0,143,0,132,0,74,0,181,0,0,0,205,0,0,0,199,0,35,0,239,0,186,0,37,0,215,0,76,0,145,0,134,0,0,0,146,0,18,0,204,0,247,0,252,0,163,0,215,0,30,0,35,0,123,0,36,0,237,0,247,0,8,0,9,0,0,0,236,0,0,0,23,0,89,0,71,0,209,0,58,0,95,0,236,0,0,0,0,0,237,0,74,0,0,0,146,0,0,0,190,0,156,0,0,0,149,0,0,0,140,0,9,0,124,0,0,0,4,0,240,0,0,0,111,0,0,0,109,0,23,0,162,0,218,0,180,0,21,0,68,0,95,0,95,0,20,0,40,0,206,0,73,0,215,0,4,0,49,0,93,0,149,0,226,0,157,0,17,0,131,0,0,0,250,0,0,0,8,0,221,0,0,0,56,0,89,0,0,0,180,0,181,0,49,0,0,0,47,0,144,0,102,0,0,0,124,0,180,0,230,0,142,0,250,0,45,0,0,0,0,0,68,0,88,0,231,0,169,0,42,0,108,0,126,0,160,0,136,0,87,0,136,0,238,0,246,0,85,0,227,0,180,0,179,0,32,0,119,0,177,0,250,0,252,0,219,0,106,0,115,0,8,0,0,0,13,0,82,0,0,0,207,0,0,0,58,0,68,0,241,0,91,0,117,0,148,0,229,0,79,0,0,0,120,0,0,0,237,0,0,0,211,0,0,0,232,0,98,0,0,0,234,0,240,0,0,0,135,0,183,0,126,0,0,0,121,0,0,0,175,0,4,0,0,0,0,0,128,0,0,0,154,0,0,0,133,0,102,0,0,0,74,0,34,0,0,0,65,0,234,0,246,0,1,0,9,0,227,0,8,0,181,0,41,0,252,0,180,0,0,0,0,0,65,0,4,0,0,0,247,0,215,0,98,0,0,0,70,0,165,0,0,0,98,0,0,0,112,0,173,0,116,0,151,0,161,0,243,0,103,0,12,0,159,0,171,0,173,0,242,0,18,0,232,0,53,0,61,0,177,0,0,0,172,0,191,0,52,0,0,0,42,0,0,0,108,0,233,0,191,0,221,0,199,0,101,0,152,0,175,0,125,0,23,0,218,0,98,0,118,0,211,0,33,0,105,0,121,0,98,0,49,0,0,0,88,0,99,0,0,0,218,0,157,0,245,0,32,0,21,0,179,0,107,0,207,0,0,0,91,0,76,0,124,0,234,0,67,0,153,0,0,0,95,0,184,0,106,0,87,0,0,0,0,0,66,0,21,0,0,0,60,0,153,0,93,0,239,0,78,0,0,0,34,0,0,0,197,0,51,0,147,0,219,0,84,0,0,0,37,0,41,0,202,0,0,0,148,0,86,0,116,0,209,0,135,0,160,0,0,0,190,0,212,0,0,0,185,0,213,0,0,0,27,0,91,0,229,0,212,0,180,0,134,0,105,0,110,0,67,0,180,0,83,0,130,0,98,0,185,0,182,0,167,0,0,0,58,0,116,0,0,0,233,0,128,0,21,0,189,0,191,0,19,0,22,0,11,0,221,0,0,0,172,0,72,0,105,0,254,0,129,0,147,0,232,0,74,0,214,0,218,0,114,0,27,0,81,0,144,0,23,0,75,0,1,0,0,0,36,0,166,0,233,0,0,0,167,0,250,0,43,0,16,0,0,0,46,0,78,0,238,0,3,0,0,0,164,0,0,0,0,0,37,0,0,0,56,0,0,0,0,0,0,0,194,0,214,0,107,0,12,0,120,0,0,0,163,0,110,0,148,0,128,0,219,0,0,0,162,0,2,0,96,0,95,0,0,0,146,0,71,0,97,0,35,0,39,0,31,0,82,0,7,0,128,0,0,0,138,0,113,0,60,0,0,0,0,0,61,0,39,0,159,0,213,0,1,0,0,0,200,0,0,0,72,0,61,0,49,0,149,0,103,0,23,0,201,0,156,0,148,0,0,0,0,0,240,0,19,0,101,0,31,0,174,0,208,0,27,0,31,0,44,0,78,0,109,0,145,0,26,0,204,0,0,0,25,0,234,0,0,0,226,0,5,0,0,0,0,0,116,0,160,0,0,0,47,0,22,0,95,0,137,0,183,0,134,0,77,0,151,0,104,0,0,0,39,0,0,0,160,0,140,0,127,0,159,0,97,0,0,0,210,0,119,0,92,0,0,0,87,0,229,0,153,0,77,0,142,0,0,0,210,0,72,0,0,0,224,0,58,0,188,0,213,0,234,0,218,0,213,0,245,0,8,0,0,0,241,0,230,0,2,0,112,0,218,0,255,0,0,0,64,0,0,0,0,0,153,0,0,0,22,0,65,0,135,0,232,0,61,0,35,0,0,0,82,0,176,0,177,0,40,0,0,0,0,0,225,0,0,0);
signal scenario_full  : scenario_type := (4,31,58,31,81,31,109,31,91,31,209,31,209,30,222,31,211,31,181,31,131,31,232,31,232,30,232,29,137,31,154,31,136,31,27,31,27,30,223,31,223,30,223,29,227,31,45,31,213,31,163,31,2,31,189,31,152,31,244,31,184,31,89,31,139,31,77,31,103,31,240,31,27,31,27,30,114,31,109,31,43,31,69,31,252,31,54,31,23,31,23,30,13,31,206,31,5,31,61,31,232,31,4,31,97,31,150,31,138,31,127,31,7,31,98,31,215,31,194,31,46,31,187,31,113,31,77,31,190,31,87,31,214,31,184,31,18,31,98,31,99,31,180,31,41,31,220,31,218,31,218,30,199,31,205,31,219,31,227,31,227,30,227,29,104,31,104,30,104,29,104,28,79,31,79,30,61,31,186,31,165,31,214,31,190,31,190,30,98,31,133,31,162,31,107,31,155,31,155,30,22,31,22,30,92,31,92,30,63,31,15,31,170,31,120,31,234,31,89,31,218,31,184,31,184,30,192,31,192,30,220,31,220,30,34,31,158,31,91,31,47,31,49,31,99,31,234,31,244,31,187,31,243,31,17,31,74,31,210,31,126,31,185,31,39,31,67,31,157,31,85,31,16,31,179,31,179,30,170,31,254,31,254,30,254,29,189,31,63,31,35,31,40,31,245,31,97,31,40,31,40,30,111,31,42,31,162,31,248,31,60,31,36,31,254,31,254,30,254,29,84,31,84,30,84,29,156,31,27,31,248,31,237,31,212,31,180,31,50,31,248,31,242,31,242,30,242,29,181,31,181,31,77,31,77,30,150,31,156,31,183,31,59,31,250,31,144,31,175,31,175,30,175,29,159,31,159,30,118,31,145,31,215,31,167,31,67,31,95,31,201,31,156,31,116,31,153,31,117,31,117,30,38,31,38,30,71,31,11,31,79,31,4,31,14,31,246,31,8,31,52,31,141,31,141,30,158,31,217,31,106,31,106,30,188,31,188,30,89,31,22,31,230,31,123,31,12,31,80,31,80,30,70,31,125,31,48,31,48,30,47,31,252,31,35,31,88,31,107,31,186,31,34,31,3,31,215,31,79,31,172,31,49,31,49,30,166,31,50,31,195,31,177,31,231,31,231,30,231,29,219,31,84,31,84,30,71,31,168,31,230,31,183,31,105,31,186,31,203,31,203,30,59,31,134,31,7,31,103,31,20,31,149,31,149,30,203,31,247,31,249,31,249,30,169,31,39,31,40,31,179,31,11,31,35,31,80,31,189,31,84,31,123,31,225,31,29,31,169,31,169,30,232,31,232,30,182,31,125,31,128,31,128,30,215,31,19,31,14,31,43,31,214,31,184,31,184,30,120,31,232,31,144,31,168,31,137,31,104,31,104,30,76,31,143,31,152,31,95,31,95,30,82,31,66,31,246,31,200,31,202,31,23,31,23,30,81,31,171,31,42,31,209,31,59,31,132,31,75,31,75,30,64,31,67,31,64,31,64,30,64,29,113,31,1,31,229,31,242,31,238,31,170,31,142,31,31,31,31,30,147,31,4,31,32,31,85,31,161,31,38,31,226,31,26,31,120,31,107,31,107,30,107,29,5,31,5,30,76,31,43,31,104,31,104,30,81,31,52,31,143,31,228,31,205,31,160,31,179,31,136,31,93,31,211,31,211,30,236,31,230,31,57,31,136,31,83,31,83,30,92,31,189,31,248,31,248,30,53,31,85,31,31,31,57,31,154,31,56,31,16,31,83,31,65,31,115,31,197,31,197,30,143,31,132,31,74,31,181,31,181,30,205,31,205,30,199,31,35,31,239,31,186,31,37,31,215,31,76,31,145,31,134,31,134,30,146,31,18,31,204,31,247,31,252,31,163,31,215,31,30,31,35,31,123,31,36,31,237,31,247,31,8,31,9,31,9,30,236,31,236,30,23,31,89,31,71,31,209,31,58,31,95,31,236,31,236,30,236,29,237,31,74,31,74,30,146,31,146,30,190,31,156,31,156,30,149,31,149,30,140,31,9,31,124,31,124,30,4,31,240,31,240,30,111,31,111,30,109,31,23,31,162,31,218,31,180,31,21,31,68,31,95,31,95,31,20,31,40,31,206,31,73,31,215,31,4,31,49,31,93,31,149,31,226,31,157,31,17,31,131,31,131,30,250,31,250,30,8,31,221,31,221,30,56,31,89,31,89,30,180,31,181,31,49,31,49,30,47,31,144,31,102,31,102,30,124,31,180,31,230,31,142,31,250,31,45,31,45,30,45,29,68,31,88,31,231,31,169,31,42,31,108,31,126,31,160,31,136,31,87,31,136,31,238,31,246,31,85,31,227,31,180,31,179,31,32,31,119,31,177,31,250,31,252,31,219,31,106,31,115,31,8,31,8,30,13,31,82,31,82,30,207,31,207,30,58,31,68,31,241,31,91,31,117,31,148,31,229,31,79,31,79,30,120,31,120,30,237,31,237,30,211,31,211,30,232,31,98,31,98,30,234,31,240,31,240,30,135,31,183,31,126,31,126,30,121,31,121,30,175,31,4,31,4,30,4,29,128,31,128,30,154,31,154,30,133,31,102,31,102,30,74,31,34,31,34,30,65,31,234,31,246,31,1,31,9,31,227,31,8,31,181,31,41,31,252,31,180,31,180,30,180,29,65,31,4,31,4,30,247,31,215,31,98,31,98,30,70,31,165,31,165,30,98,31,98,30,112,31,173,31,116,31,151,31,161,31,243,31,103,31,12,31,159,31,171,31,173,31,242,31,18,31,232,31,53,31,61,31,177,31,177,30,172,31,191,31,52,31,52,30,42,31,42,30,108,31,233,31,191,31,221,31,199,31,101,31,152,31,175,31,125,31,23,31,218,31,98,31,118,31,211,31,33,31,105,31,121,31,98,31,49,31,49,30,88,31,99,31,99,30,218,31,157,31,245,31,32,31,21,31,179,31,107,31,207,31,207,30,91,31,76,31,124,31,234,31,67,31,153,31,153,30,95,31,184,31,106,31,87,31,87,30,87,29,66,31,21,31,21,30,60,31,153,31,93,31,239,31,78,31,78,30,34,31,34,30,197,31,51,31,147,31,219,31,84,31,84,30,37,31,41,31,202,31,202,30,148,31,86,31,116,31,209,31,135,31,160,31,160,30,190,31,212,31,212,30,185,31,213,31,213,30,27,31,91,31,229,31,212,31,180,31,134,31,105,31,110,31,67,31,180,31,83,31,130,31,98,31,185,31,182,31,167,31,167,30,58,31,116,31,116,30,233,31,128,31,21,31,189,31,191,31,19,31,22,31,11,31,221,31,221,30,172,31,72,31,105,31,254,31,129,31,147,31,232,31,74,31,214,31,218,31,114,31,27,31,81,31,144,31,23,31,75,31,1,31,1,30,36,31,166,31,233,31,233,30,167,31,250,31,43,31,16,31,16,30,46,31,78,31,238,31,3,31,3,30,164,31,164,30,164,29,37,31,37,30,56,31,56,30,56,29,56,28,194,31,214,31,107,31,12,31,120,31,120,30,163,31,110,31,148,31,128,31,219,31,219,30,162,31,2,31,96,31,95,31,95,30,146,31,71,31,97,31,35,31,39,31,31,31,82,31,7,31,128,31,128,30,138,31,113,31,60,31,60,30,60,29,61,31,39,31,159,31,213,31,1,31,1,30,200,31,200,30,72,31,61,31,49,31,149,31,103,31,23,31,201,31,156,31,148,31,148,30,148,29,240,31,19,31,101,31,31,31,174,31,208,31,27,31,31,31,44,31,78,31,109,31,145,31,26,31,204,31,204,30,25,31,234,31,234,30,226,31,5,31,5,30,5,29,116,31,160,31,160,30,47,31,22,31,95,31,137,31,183,31,134,31,77,31,151,31,104,31,104,30,39,31,39,30,160,31,140,31,127,31,159,31,97,31,97,30,210,31,119,31,92,31,92,30,87,31,229,31,153,31,77,31,142,31,142,30,210,31,72,31,72,30,224,31,58,31,188,31,213,31,234,31,218,31,213,31,245,31,8,31,8,30,241,31,230,31,2,31,112,31,218,31,255,31,255,30,64,31,64,30,64,29,153,31,153,30,22,31,65,31,135,31,232,31,61,31,35,31,35,30,82,31,176,31,177,31,40,31,40,30,40,29,225,31,225,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
