-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 652;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,238,0,197,0,26,0,134,0,75,0,5,0,96,0,0,0,0,0,0,0,37,0,222,0,50,0,189,0,163,0,157,0,127,0,23,0,0,0,185,0,0,0,186,0,46,0,20,0,0,0,54,0,14,0,0,0,0,0,231,0,56,0,254,0,113,0,71,0,249,0,206,0,0,0,173,0,247,0,0,0,144,0,107,0,221,0,212,0,241,0,243,0,161,0,0,0,168,0,77,0,9,0,123,0,147,0,0,0,224,0,238,0,0,0,159,0,0,0,35,0,62,0,99,0,83,0,62,0,0,0,232,0,97,0,233,0,84,0,227,0,249,0,92,0,0,0,225,0,122,0,57,0,54,0,157,0,33,0,0,0,92,0,22,0,153,0,8,0,14,0,116,0,105,0,202,0,255,0,1,0,215,0,40,0,0,0,0,0,0,0,0,0,132,0,218,0,8,0,61,0,12,0,66,0,159,0,0,0,0,0,155,0,95,0,29,0,131,0,211,0,19,0,1,0,252,0,0,0,14,0,179,0,24,0,0,0,161,0,25,0,120,0,49,0,218,0,0,0,96,0,110,0,149,0,160,0,235,0,16,0,0,0,45,0,66,0,0,0,110,0,39,0,254,0,132,0,6,0,46,0,13,0,0,0,0,0,71,0,56,0,85,0,104,0,156,0,196,0,26,0,34,0,216,0,217,0,135,0,142,0,0,0,0,0,226,0,77,0,228,0,165,0,149,0,0,0,69,0,84,0,227,0,44,0,64,0,180,0,0,0,74,0,189,0,182,0,127,0,125,0,0,0,191,0,59,0,63,0,45,0,158,0,66,0,0,0,18,0,0,0,0,0,11,0,0,0,0,0,218,0,141,0,0,0,212,0,250,0,49,0,212,0,68,0,0,0,42,0,76,0,205,0,0,0,185,0,80,0,179,0,128,0,71,0,186,0,249,0,207,0,0,0,158,0,0,0,0,0,49,0,0,0,72,0,80,0,113,0,83,0,0,0,134,0,127,0,0,0,167,0,175,0,79,0,0,0,66,0,19,0,148,0,224,0,77,0,49,0,106,0,0,0,82,0,145,0,14,0,122,0,48,0,123,0,119,0,29,0,110,0,57,0,125,0,27,0,8,0,0,0,209,0,186,0,0,0,0,0,11,0,100,0,40,0,0,0,155,0,207,0,0,0,248,0,99,0,122,0,84,0,69,0,0,0,95,0,139,0,222,0,121,0,218,0,118,0,226,0,35,0,0,0,234,0,48,0,47,0,197,0,143,0,119,0,133,0,77,0,201,0,0,0,149,0,0,0,15,0,89,0,144,0,6,0,0,0,176,0,105,0,142,0,10,0,220,0,211,0,200,0,137,0,207,0,237,0,214,0,90,0,24,0,151,0,53,0,218,0,253,0,53,0,230,0,15,0,45,0,135,0,94,0,74,0,37,0,4,0,168,0,221,0,157,0,195,0,118,0,231,0,148,0,0,0,0,0,36,0,0,0,171,0,53,0,77,0,0,0,124,0,0,0,57,0,147,0,0,0,158,0,176,0,73,0,120,0,177,0,69,0,195,0,168,0,133,0,78,0,193,0,133,0,210,0,219,0,148,0,142,0,238,0,74,0,121,0,169,0,212,0,0,0,171,0,131,0,241,0,137,0,254,0,96,0,215,0,0,0,46,0,0,0,0,0,113,0,8,0,213,0,27,0,0,0,16,0,102,0,0,0,123,0,147,0,174,0,0,0,218,0,127,0,0,0,36,0,88,0,100,0,182,0,237,0,92,0,6,0,220,0,0,0,111,0,231,0,124,0,0,0,93,0,114,0,148,0,212,0,250,0,184,0,191,0,0,0,87,0,53,0,68,0,72,0,104,0,160,0,193,0,36,0,173,0,55,0,104,0,139,0,0,0,13,0,0,0,202,0,116,0,127,0,221,0,0,0,47,0,29,0,0,0,0,0,0,0,208,0,0,0,0,0,149,0,67,0,231,0,218,0,139,0,11,0,110,0,14,0,86,0,4,0,135,0,0,0,160,0,252,0,174,0,0,0,184,0,148,0,201,0,0,0,27,0,0,0,98,0,46,0,134,0,0,0,188,0,160,0,124,0,72,0,75,0,0,0,236,0,133,0,40,0,25,0,187,0,16,0,212,0,0,0,179,0,91,0,186,0,148,0,91,0,104,0,145,0,186,0,50,0,0,0,132,0,202,0,124,0,0,0,218,0,0,0,247,0,157,0,0,0,236,0,139,0,219,0,115,0,240,0,114,0,104,0,2,0,247,0,0,0,76,0,89,0,112,0,32,0,185,0,0,0,131,0,15,0,46,0,125,0,0,0,0,0,135,0,207,0,0,0,114,0,170,0,181,0,210,0,1,0,197,0,102,0,153,0,110,0,107,0,254,0,80,0,0,0,0,0,0,0,199,0,118,0,225,0,110,0,123,0,185,0,205,0,0,0,98,0,144,0,173,0,71,0,0,0,181,0,215,0,27,0,122,0,153,0,111,0,224,0,97,0,213,0,0,0,67,0,245,0,46,0,10,0,180,0,202,0,0,0,138,0,5,0,86,0,237,0,251,0,126,0,103,0,130,0,179,0,0,0,0,0,0,0,0,0,21,0,138,0,42,0,247,0,68,0,158,0,151,0,161,0,110,0,141,0,117,0,138,0,237,0,148,0,250,0,107,0,91,0,215,0,93,0,176,0,73,0,0,0,96,0,103,0,40,0,28,0,68,0,224,0,107,0,0,0,179,0,32,0,98,0,0,0,151,0,183,0,154,0,162,0,0,0,0,0,56,0,173,0,181,0,0,0,0,0,243,0,118,0,0,0,0,0,104,0,140,0,0,0,0,0,220,0,160,0,0,0,66,0,141,0,0,0,63,0,100,0,111,0,15,0,120,0,227,0,0,0,9,0,0,0,231,0,0,0,74,0,0,0,252,0);
signal scenario_full  : scenario_type := (0,0,238,31,197,31,26,31,134,31,75,31,5,31,96,31,96,30,96,29,96,28,37,31,222,31,50,31,189,31,163,31,157,31,127,31,23,31,23,30,185,31,185,30,186,31,46,31,20,31,20,30,54,31,14,31,14,30,14,29,231,31,56,31,254,31,113,31,71,31,249,31,206,31,206,30,173,31,247,31,247,30,144,31,107,31,221,31,212,31,241,31,243,31,161,31,161,30,168,31,77,31,9,31,123,31,147,31,147,30,224,31,238,31,238,30,159,31,159,30,35,31,62,31,99,31,83,31,62,31,62,30,232,31,97,31,233,31,84,31,227,31,249,31,92,31,92,30,225,31,122,31,57,31,54,31,157,31,33,31,33,30,92,31,22,31,153,31,8,31,14,31,116,31,105,31,202,31,255,31,1,31,215,31,40,31,40,30,40,29,40,28,40,27,132,31,218,31,8,31,61,31,12,31,66,31,159,31,159,30,159,29,155,31,95,31,29,31,131,31,211,31,19,31,1,31,252,31,252,30,14,31,179,31,24,31,24,30,161,31,25,31,120,31,49,31,218,31,218,30,96,31,110,31,149,31,160,31,235,31,16,31,16,30,45,31,66,31,66,30,110,31,39,31,254,31,132,31,6,31,46,31,13,31,13,30,13,29,71,31,56,31,85,31,104,31,156,31,196,31,26,31,34,31,216,31,217,31,135,31,142,31,142,30,142,29,226,31,77,31,228,31,165,31,149,31,149,30,69,31,84,31,227,31,44,31,64,31,180,31,180,30,74,31,189,31,182,31,127,31,125,31,125,30,191,31,59,31,63,31,45,31,158,31,66,31,66,30,18,31,18,30,18,29,11,31,11,30,11,29,218,31,141,31,141,30,212,31,250,31,49,31,212,31,68,31,68,30,42,31,76,31,205,31,205,30,185,31,80,31,179,31,128,31,71,31,186,31,249,31,207,31,207,30,158,31,158,30,158,29,49,31,49,30,72,31,80,31,113,31,83,31,83,30,134,31,127,31,127,30,167,31,175,31,79,31,79,30,66,31,19,31,148,31,224,31,77,31,49,31,106,31,106,30,82,31,145,31,14,31,122,31,48,31,123,31,119,31,29,31,110,31,57,31,125,31,27,31,8,31,8,30,209,31,186,31,186,30,186,29,11,31,100,31,40,31,40,30,155,31,207,31,207,30,248,31,99,31,122,31,84,31,69,31,69,30,95,31,139,31,222,31,121,31,218,31,118,31,226,31,35,31,35,30,234,31,48,31,47,31,197,31,143,31,119,31,133,31,77,31,201,31,201,30,149,31,149,30,15,31,89,31,144,31,6,31,6,30,176,31,105,31,142,31,10,31,220,31,211,31,200,31,137,31,207,31,237,31,214,31,90,31,24,31,151,31,53,31,218,31,253,31,53,31,230,31,15,31,45,31,135,31,94,31,74,31,37,31,4,31,168,31,221,31,157,31,195,31,118,31,231,31,148,31,148,30,148,29,36,31,36,30,171,31,53,31,77,31,77,30,124,31,124,30,57,31,147,31,147,30,158,31,176,31,73,31,120,31,177,31,69,31,195,31,168,31,133,31,78,31,193,31,133,31,210,31,219,31,148,31,142,31,238,31,74,31,121,31,169,31,212,31,212,30,171,31,131,31,241,31,137,31,254,31,96,31,215,31,215,30,46,31,46,30,46,29,113,31,8,31,213,31,27,31,27,30,16,31,102,31,102,30,123,31,147,31,174,31,174,30,218,31,127,31,127,30,36,31,88,31,100,31,182,31,237,31,92,31,6,31,220,31,220,30,111,31,231,31,124,31,124,30,93,31,114,31,148,31,212,31,250,31,184,31,191,31,191,30,87,31,53,31,68,31,72,31,104,31,160,31,193,31,36,31,173,31,55,31,104,31,139,31,139,30,13,31,13,30,202,31,116,31,127,31,221,31,221,30,47,31,29,31,29,30,29,29,29,28,208,31,208,30,208,29,149,31,67,31,231,31,218,31,139,31,11,31,110,31,14,31,86,31,4,31,135,31,135,30,160,31,252,31,174,31,174,30,184,31,148,31,201,31,201,30,27,31,27,30,98,31,46,31,134,31,134,30,188,31,160,31,124,31,72,31,75,31,75,30,236,31,133,31,40,31,25,31,187,31,16,31,212,31,212,30,179,31,91,31,186,31,148,31,91,31,104,31,145,31,186,31,50,31,50,30,132,31,202,31,124,31,124,30,218,31,218,30,247,31,157,31,157,30,236,31,139,31,219,31,115,31,240,31,114,31,104,31,2,31,247,31,247,30,76,31,89,31,112,31,32,31,185,31,185,30,131,31,15,31,46,31,125,31,125,30,125,29,135,31,207,31,207,30,114,31,170,31,181,31,210,31,1,31,197,31,102,31,153,31,110,31,107,31,254,31,80,31,80,30,80,29,80,28,199,31,118,31,225,31,110,31,123,31,185,31,205,31,205,30,98,31,144,31,173,31,71,31,71,30,181,31,215,31,27,31,122,31,153,31,111,31,224,31,97,31,213,31,213,30,67,31,245,31,46,31,10,31,180,31,202,31,202,30,138,31,5,31,86,31,237,31,251,31,126,31,103,31,130,31,179,31,179,30,179,29,179,28,179,27,21,31,138,31,42,31,247,31,68,31,158,31,151,31,161,31,110,31,141,31,117,31,138,31,237,31,148,31,250,31,107,31,91,31,215,31,93,31,176,31,73,31,73,30,96,31,103,31,40,31,28,31,68,31,224,31,107,31,107,30,179,31,32,31,98,31,98,30,151,31,183,31,154,31,162,31,162,30,162,29,56,31,173,31,181,31,181,30,181,29,243,31,118,31,118,30,118,29,104,31,140,31,140,30,140,29,220,31,160,31,160,30,66,31,141,31,141,30,63,31,100,31,111,31,15,31,120,31,227,31,227,30,9,31,9,30,231,31,231,30,74,31,74,30,252,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
