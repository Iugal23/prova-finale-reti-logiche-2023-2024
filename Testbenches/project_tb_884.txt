-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 568;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (89,0,205,0,160,0,158,0,161,0,19,0,0,0,0,0,0,0,120,0,22,0,13,0,0,0,82,0,31,0,188,0,88,0,0,0,0,0,30,0,129,0,149,0,18,0,106,0,0,0,101,0,0,0,222,0,135,0,103,0,230,0,0,0,74,0,5,0,163,0,0,0,231,0,0,0,0,0,32,0,83,0,154,0,204,0,122,0,0,0,175,0,0,0,192,0,14,0,183,0,49,0,119,0,0,0,195,0,193,0,0,0,65,0,95,0,63,0,0,0,201,0,104,0,183,0,202,0,0,0,209,0,0,0,146,0,131,0,187,0,249,0,163,0,63,0,164,0,178,0,0,0,224,0,198,0,156,0,118,0,19,0,60,0,77,0,120,0,71,0,97,0,32,0,171,0,20,0,197,0,127,0,93,0,153,0,0,0,116,0,0,0,0,0,53,0,114,0,64,0,0,0,212,0,0,0,68,0,250,0,211,0,148,0,201,0,117,0,89,0,0,0,127,0,0,0,0,0,217,0,136,0,175,0,0,0,119,0,0,0,75,0,249,0,104,0,100,0,227,0,141,0,0,0,89,0,37,0,36,0,0,0,216,0,246,0,0,0,174,0,44,0,125,0,204,0,0,0,0,0,0,0,174,0,98,0,161,0,31,0,60,0,43,0,184,0,0,0,58,0,236,0,119,0,239,0,231,0,214,0,59,0,0,0,167,0,11,0,145,0,0,0,0,0,133,0,182,0,25,0,181,0,184,0,0,0,49,0,0,0,42,0,255,0,231,0,237,0,227,0,58,0,52,0,89,0,0,0,91,0,0,0,212,0,0,0,87,0,0,0,0,0,214,0,0,0,26,0,0,0,61,0,140,0,0,0,42,0,83,0,0,0,84,0,83,0,90,0,254,0,4,0,0,0,0,0,96,0,150,0,154,0,118,0,53,0,96,0,154,0,159,0,182,0,204,0,208,0,209,0,188,0,83,0,0,0,214,0,189,0,49,0,165,0,218,0,1,0,59,0,148,0,102,0,231,0,149,0,0,0,14,0,0,0,0,0,21,0,189,0,51,0,70,0,136,0,128,0,144,0,0,0,195,0,16,0,184,0,182,0,73,0,216,0,154,0,81,0,204,0,66,0,172,0,0,0,0,0,111,0,196,0,70,0,0,0,67,0,0,0,58,0,74,0,214,0,166,0,178,0,0,0,0,0,177,0,190,0,162,0,0,0,29,0,128,0,111,0,180,0,0,0,72,0,87,0,5,0,166,0,59,0,76,0,110,0,37,0,107,0,18,0,76,0,22,0,27,0,130,0,78,0,156,0,171,0,241,0,105,0,241,0,0,0,111,0,0,0,71,0,100,0,220,0,179,0,206,0,214,0,0,0,202,0,155,0,144,0,20,0,242,0,17,0,144,0,222,0,123,0,251,0,206,0,29,0,64,0,154,0,0,0,173,0,198,0,222,0,37,0,166,0,0,0,38,0,0,0,234,0,91,0,92,0,53,0,0,0,113,0,49,0,65,0,39,0,222,0,192,0,0,0,252,0,212,0,73,0,144,0,255,0,213,0,11,0,79,0,0,0,211,0,0,0,143,0,156,0,75,0,140,0,198,0,0,0,0,0,172,0,219,0,2,0,164,0,208,0,167,0,0,0,61,0,54,0,65,0,6,0,0,0,244,0,239,0,194,0,107,0,0,0,153,0,6,0,129,0,180,0,49,0,0,0,218,0,75,0,95,0,61,0,238,0,129,0,230,0,131,0,46,0,0,0,228,0,150,0,114,0,244,0,10,0,6,0,208,0,163,0,119,0,0,0,193,0,109,0,154,0,86,0,0,0,9,0,0,0,110,0,131,0,254,0,250,0,55,0,0,0,213,0,148,0,116,0,0,0,9,0,0,0,0,0,0,0,76,0,0,0,174,0,79,0,240,0,50,0,215,0,100,0,97,0,171,0,0,0,0,0,48,0,209,0,240,0,140,0,219,0,94,0,237,0,211,0,154,0,90,0,117,0,86,0,151,0,25,0,202,0,0,0,195,0,215,0,0,0,50,0,30,0,147,0,147,0,7,0,71,0,218,0,138,0,40,0,0,0,26,0,204,0,140,0,19,0,0,0,1,0,82,0,124,0,0,0,107,0,92,0,199,0,196,0,0,0,7,0,0,0,154,0,116,0,36,0,165,0,231,0,39,0,139,0,30,0,39,0,244,0,0,0,0,0,0,0,41,0,241,0,29,0,116,0,141,0,24,0,37,0,193,0,206,0,91,0,24,0,166,0,70,0,120,0,0,0,43,0,125,0,157,0,209,0,4,0,17,0,131,0,211,0,0,0,234,0,99,0,52,0,15,0,197,0,138,0,206,0,149,0,90,0,206,0,53,0,99,0,80,0,185,0,0,0,182,0,128,0,146,0,169,0,192,0,15,0,129,0,170,0,164,0,28,0,7,0,121,0,0,0,207,0,0,0,129,0,0,0,0,0,0,0,154,0,32,0,15,0,45,0,0,0,182,0,0,0,0,0,44,0,27,0,245,0,0,0,27,0,92,0,241,0,216,0,0,0);
signal scenario_full  : scenario_type := (89,31,205,31,160,31,158,31,161,31,19,31,19,30,19,29,19,28,120,31,22,31,13,31,13,30,82,31,31,31,188,31,88,31,88,30,88,29,30,31,129,31,149,31,18,31,106,31,106,30,101,31,101,30,222,31,135,31,103,31,230,31,230,30,74,31,5,31,163,31,163,30,231,31,231,30,231,29,32,31,83,31,154,31,204,31,122,31,122,30,175,31,175,30,192,31,14,31,183,31,49,31,119,31,119,30,195,31,193,31,193,30,65,31,95,31,63,31,63,30,201,31,104,31,183,31,202,31,202,30,209,31,209,30,146,31,131,31,187,31,249,31,163,31,63,31,164,31,178,31,178,30,224,31,198,31,156,31,118,31,19,31,60,31,77,31,120,31,71,31,97,31,32,31,171,31,20,31,197,31,127,31,93,31,153,31,153,30,116,31,116,30,116,29,53,31,114,31,64,31,64,30,212,31,212,30,68,31,250,31,211,31,148,31,201,31,117,31,89,31,89,30,127,31,127,30,127,29,217,31,136,31,175,31,175,30,119,31,119,30,75,31,249,31,104,31,100,31,227,31,141,31,141,30,89,31,37,31,36,31,36,30,216,31,246,31,246,30,174,31,44,31,125,31,204,31,204,30,204,29,204,28,174,31,98,31,161,31,31,31,60,31,43,31,184,31,184,30,58,31,236,31,119,31,239,31,231,31,214,31,59,31,59,30,167,31,11,31,145,31,145,30,145,29,133,31,182,31,25,31,181,31,184,31,184,30,49,31,49,30,42,31,255,31,231,31,237,31,227,31,58,31,52,31,89,31,89,30,91,31,91,30,212,31,212,30,87,31,87,30,87,29,214,31,214,30,26,31,26,30,61,31,140,31,140,30,42,31,83,31,83,30,84,31,83,31,90,31,254,31,4,31,4,30,4,29,96,31,150,31,154,31,118,31,53,31,96,31,154,31,159,31,182,31,204,31,208,31,209,31,188,31,83,31,83,30,214,31,189,31,49,31,165,31,218,31,1,31,59,31,148,31,102,31,231,31,149,31,149,30,14,31,14,30,14,29,21,31,189,31,51,31,70,31,136,31,128,31,144,31,144,30,195,31,16,31,184,31,182,31,73,31,216,31,154,31,81,31,204,31,66,31,172,31,172,30,172,29,111,31,196,31,70,31,70,30,67,31,67,30,58,31,74,31,214,31,166,31,178,31,178,30,178,29,177,31,190,31,162,31,162,30,29,31,128,31,111,31,180,31,180,30,72,31,87,31,5,31,166,31,59,31,76,31,110,31,37,31,107,31,18,31,76,31,22,31,27,31,130,31,78,31,156,31,171,31,241,31,105,31,241,31,241,30,111,31,111,30,71,31,100,31,220,31,179,31,206,31,214,31,214,30,202,31,155,31,144,31,20,31,242,31,17,31,144,31,222,31,123,31,251,31,206,31,29,31,64,31,154,31,154,30,173,31,198,31,222,31,37,31,166,31,166,30,38,31,38,30,234,31,91,31,92,31,53,31,53,30,113,31,49,31,65,31,39,31,222,31,192,31,192,30,252,31,212,31,73,31,144,31,255,31,213,31,11,31,79,31,79,30,211,31,211,30,143,31,156,31,75,31,140,31,198,31,198,30,198,29,172,31,219,31,2,31,164,31,208,31,167,31,167,30,61,31,54,31,65,31,6,31,6,30,244,31,239,31,194,31,107,31,107,30,153,31,6,31,129,31,180,31,49,31,49,30,218,31,75,31,95,31,61,31,238,31,129,31,230,31,131,31,46,31,46,30,228,31,150,31,114,31,244,31,10,31,6,31,208,31,163,31,119,31,119,30,193,31,109,31,154,31,86,31,86,30,9,31,9,30,110,31,131,31,254,31,250,31,55,31,55,30,213,31,148,31,116,31,116,30,9,31,9,30,9,29,9,28,76,31,76,30,174,31,79,31,240,31,50,31,215,31,100,31,97,31,171,31,171,30,171,29,48,31,209,31,240,31,140,31,219,31,94,31,237,31,211,31,154,31,90,31,117,31,86,31,151,31,25,31,202,31,202,30,195,31,215,31,215,30,50,31,30,31,147,31,147,31,7,31,71,31,218,31,138,31,40,31,40,30,26,31,204,31,140,31,19,31,19,30,1,31,82,31,124,31,124,30,107,31,92,31,199,31,196,31,196,30,7,31,7,30,154,31,116,31,36,31,165,31,231,31,39,31,139,31,30,31,39,31,244,31,244,30,244,29,244,28,41,31,241,31,29,31,116,31,141,31,24,31,37,31,193,31,206,31,91,31,24,31,166,31,70,31,120,31,120,30,43,31,125,31,157,31,209,31,4,31,17,31,131,31,211,31,211,30,234,31,99,31,52,31,15,31,197,31,138,31,206,31,149,31,90,31,206,31,53,31,99,31,80,31,185,31,185,30,182,31,128,31,146,31,169,31,192,31,15,31,129,31,170,31,164,31,28,31,7,31,121,31,121,30,207,31,207,30,129,31,129,30,129,29,129,28,154,31,32,31,15,31,45,31,45,30,182,31,182,30,182,29,44,31,27,31,245,31,245,30,27,31,92,31,241,31,216,31,216,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
