-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 750;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (9,0,110,0,157,0,108,0,128,0,13,0,72,0,139,0,141,0,64,0,38,0,110,0,230,0,0,0,219,0,0,0,191,0,0,0,161,0,82,0,251,0,14,0,0,0,235,0,39,0,191,0,220,0,0,0,188,0,138,0,0,0,0,0,119,0,79,0,237,0,45,0,255,0,0,0,153,0,241,0,185,0,182,0,60,0,83,0,117,0,237,0,158,0,102,0,75,0,107,0,0,0,0,0,132,0,73,0,28,0,117,0,0,0,189,0,251,0,85,0,60,0,151,0,118,0,114,0,190,0,151,0,96,0,30,0,85,0,187,0,201,0,148,0,21,0,56,0,123,0,158,0,0,0,143,0,143,0,225,0,0,0,0,0,72,0,204,0,54,0,79,0,47,0,151,0,88,0,160,0,116,0,59,0,229,0,136,0,1,0,218,0,139,0,17,0,183,0,91,0,168,0,99,0,158,0,195,0,185,0,14,0,232,0,0,0,52,0,162,0,104,0,166,0,209,0,84,0,0,0,110,0,252,0,195,0,0,0,0,0,107,0,45,0,0,0,171,0,220,0,25,0,74,0,194,0,143,0,165,0,247,0,154,0,0,0,70,0,114,0,98,0,70,0,38,0,252,0,215,0,75,0,52,0,33,0,61,0,68,0,223,0,105,0,0,0,70,0,189,0,140,0,141,0,62,0,0,0,0,0,60,0,0,0,241,0,95,0,67,0,0,0,90,0,209,0,101,0,105,0,0,0,141,0,0,0,6,0,103,0,131,0,0,0,0,0,0,0,200,0,213,0,52,0,0,0,72,0,196,0,0,0,0,0,157,0,22,0,0,0,67,0,0,0,47,0,97,0,240,0,226,0,151,0,94,0,0,0,37,0,110,0,118,0,131,0,33,0,202,0,200,0,154,0,50,0,201,0,104,0,0,0,41,0,0,0,247,0,84,0,0,0,170,0,254,0,0,0,143,0,114,0,0,0,56,0,132,0,157,0,0,0,155,0,52,0,0,0,161,0,11,0,0,0,0,0,0,0,117,0,61,0,0,0,0,0,0,0,0,0,151,0,63,0,0,0,55,0,0,0,223,0,0,0,52,0,166,0,40,0,231,0,0,0,168,0,112,0,112,0,169,0,192,0,236,0,164,0,0,0,0,0,228,0,184,0,33,0,140,0,95,0,248,0,209,0,137,0,32,0,0,0,0,0,0,0,218,0,48,0,43,0,164,0,0,0,0,0,207,0,0,0,82,0,43,0,112,0,148,0,157,0,127,0,219,0,10,0,116,0,33,0,2,0,0,0,68,0,111,0,133,0,0,0,0,0,27,0,134,0,0,0,190,0,134,0,222,0,222,0,0,0,197,0,0,0,218,0,145,0,200,0,158,0,98,0,54,0,85,0,53,0,202,0,191,0,74,0,233,0,236,0,232,0,64,0,13,0,27,0,0,0,96,0,0,0,156,0,49,0,0,0,180,0,0,0,0,0,233,0,10,0,97,0,228,0,221,0,130,0,218,0,135,0,0,0,0,0,54,0,73,0,158,0,90,0,0,0,212,0,214,0,183,0,69,0,0,0,147,0,10,0,195,0,0,0,216,0,247,0,66,0,0,0,174,0,198,0,22,0,0,0,127,0,53,0,41,0,0,0,198,0,106,0,0,0,199,0,145,0,32,0,155,0,16,0,112,0,255,0,169,0,183,0,0,0,86,0,159,0,175,0,46,0,8,0,253,0,201,0,0,0,131,0,89,0,140,0,177,0,0,0,49,0,234,0,241,0,218,0,76,0,237,0,234,0,87,0,100,0,153,0,184,0,112,0,0,0,60,0,127,0,207,0,115,0,159,0,191,0,59,0,56,0,33,0,152,0,151,0,220,0,39,0,95,0,210,0,68,0,106,0,0,0,3,0,23,0,230,0,0,0,215,0,0,0,0,0,226,0,185,0,0,0,155,0,210,0,163,0,242,0,40,0,60,0,198,0,255,0,198,0,0,0,253,0,0,0,77,0,231,0,111,0,0,0,0,0,135,0,112,0,12,0,0,0,0,0,47,0,82,0,85,0,84,0,72,0,112,0,29,0,12,0,181,0,0,0,183,0,112,0,197,0,32,0,132,0,170,0,83,0,17,0,77,0,135,0,208,0,47,0,99,0,139,0,102,0,7,0,89,0,204,0,12,0,67,0,156,0,176,0,0,0,50,0,67,0,43,0,106,0,242,0,0,0,176,0,238,0,157,0,0,0,34,0,72,0,18,0,122,0,60,0,65,0,246,0,245,0,202,0,0,0,0,0,11,0,47,0,123,0,22,0,227,0,22,0,207,0,192,0,194,0,151,0,225,0,239,0,112,0,1,0,95,0,146,0,0,0,245,0,77,0,14,0,0,0,173,0,9,0,190,0,68,0,194,0,37,0,0,0,248,0,243,0,66,0,173,0,0,0,89,0,195,0,176,0,204,0,9,0,161,0,230,0,13,0,165,0,170,0,0,0,71,0,0,0,139,0,40,0,0,0,71,0,243,0,221,0,118,0,0,0,83,0,0,0,189,0,153,0,218,0,87,0,83,0,0,0,0,0,94,0,134,0,252,0,0,0,0,0,200,0,186,0,152,0,26,0,0,0,12,0,0,0,72,0,40,0,0,0,77,0,0,0,211,0,178,0,0,0,139,0,245,0,168,0,75,0,246,0,170,0,238,0,0,0,101,0,0,0,18,0,54,0,1,0,14,0,0,0,191,0,0,0,120,0,235,0,20,0,78,0,226,0,228,0,0,0,102,0,183,0,196,0,4,0,0,0,127,0,0,0,165,0,119,0,13,0,197,0,117,0,0,0,141,0,147,0,0,0,0,0,0,0,75,0,0,0,137,0,165,0,181,0,0,0,140,0,181,0,166,0,87,0,35,0,103,0,211,0,255,0,70,0,73,0,4,0,59,0,0,0,240,0,0,0,251,0,65,0,193,0,0,0,122,0,83,0,172,0,224,0,11,0,54,0,177,0,0,0,165,0,242,0,0,0,29,0,0,0,86,0,135,0,106,0,221,0,82,0,184,0,190,0,47,0,0,0,138,0,146,0,176,0,0,0,119,0,57,0,144,0,95,0,241,0,0,0,0,0,0,0,0,0,201,0,42,0,0,0,0,0,0,0,218,0,55,0,133,0,224,0,193,0,87,0,154,0,194,0,139,0,0,0,77,0,69,0,227,0,0,0,36,0,0,0,224,0,122,0,65,0,157,0,42,0,85,0,177,0,236,0,72,0,0,0,140,0,63,0,229,0,209,0,100,0,239,0,97,0,0,0,0,0,169,0,98,0,0,0,5,0,79,0,193,0,60,0,39,0,103,0,165,0,143,0,0,0,0,0,0,0,94,0,145,0,231,0);
signal scenario_full  : scenario_type := (9,31,110,31,157,31,108,31,128,31,13,31,72,31,139,31,141,31,64,31,38,31,110,31,230,31,230,30,219,31,219,30,191,31,191,30,161,31,82,31,251,31,14,31,14,30,235,31,39,31,191,31,220,31,220,30,188,31,138,31,138,30,138,29,119,31,79,31,237,31,45,31,255,31,255,30,153,31,241,31,185,31,182,31,60,31,83,31,117,31,237,31,158,31,102,31,75,31,107,31,107,30,107,29,132,31,73,31,28,31,117,31,117,30,189,31,251,31,85,31,60,31,151,31,118,31,114,31,190,31,151,31,96,31,30,31,85,31,187,31,201,31,148,31,21,31,56,31,123,31,158,31,158,30,143,31,143,31,225,31,225,30,225,29,72,31,204,31,54,31,79,31,47,31,151,31,88,31,160,31,116,31,59,31,229,31,136,31,1,31,218,31,139,31,17,31,183,31,91,31,168,31,99,31,158,31,195,31,185,31,14,31,232,31,232,30,52,31,162,31,104,31,166,31,209,31,84,31,84,30,110,31,252,31,195,31,195,30,195,29,107,31,45,31,45,30,171,31,220,31,25,31,74,31,194,31,143,31,165,31,247,31,154,31,154,30,70,31,114,31,98,31,70,31,38,31,252,31,215,31,75,31,52,31,33,31,61,31,68,31,223,31,105,31,105,30,70,31,189,31,140,31,141,31,62,31,62,30,62,29,60,31,60,30,241,31,95,31,67,31,67,30,90,31,209,31,101,31,105,31,105,30,141,31,141,30,6,31,103,31,131,31,131,30,131,29,131,28,200,31,213,31,52,31,52,30,72,31,196,31,196,30,196,29,157,31,22,31,22,30,67,31,67,30,47,31,97,31,240,31,226,31,151,31,94,31,94,30,37,31,110,31,118,31,131,31,33,31,202,31,200,31,154,31,50,31,201,31,104,31,104,30,41,31,41,30,247,31,84,31,84,30,170,31,254,31,254,30,143,31,114,31,114,30,56,31,132,31,157,31,157,30,155,31,52,31,52,30,161,31,11,31,11,30,11,29,11,28,117,31,61,31,61,30,61,29,61,28,61,27,151,31,63,31,63,30,55,31,55,30,223,31,223,30,52,31,166,31,40,31,231,31,231,30,168,31,112,31,112,31,169,31,192,31,236,31,164,31,164,30,164,29,228,31,184,31,33,31,140,31,95,31,248,31,209,31,137,31,32,31,32,30,32,29,32,28,218,31,48,31,43,31,164,31,164,30,164,29,207,31,207,30,82,31,43,31,112,31,148,31,157,31,127,31,219,31,10,31,116,31,33,31,2,31,2,30,68,31,111,31,133,31,133,30,133,29,27,31,134,31,134,30,190,31,134,31,222,31,222,31,222,30,197,31,197,30,218,31,145,31,200,31,158,31,98,31,54,31,85,31,53,31,202,31,191,31,74,31,233,31,236,31,232,31,64,31,13,31,27,31,27,30,96,31,96,30,156,31,49,31,49,30,180,31,180,30,180,29,233,31,10,31,97,31,228,31,221,31,130,31,218,31,135,31,135,30,135,29,54,31,73,31,158,31,90,31,90,30,212,31,214,31,183,31,69,31,69,30,147,31,10,31,195,31,195,30,216,31,247,31,66,31,66,30,174,31,198,31,22,31,22,30,127,31,53,31,41,31,41,30,198,31,106,31,106,30,199,31,145,31,32,31,155,31,16,31,112,31,255,31,169,31,183,31,183,30,86,31,159,31,175,31,46,31,8,31,253,31,201,31,201,30,131,31,89,31,140,31,177,31,177,30,49,31,234,31,241,31,218,31,76,31,237,31,234,31,87,31,100,31,153,31,184,31,112,31,112,30,60,31,127,31,207,31,115,31,159,31,191,31,59,31,56,31,33,31,152,31,151,31,220,31,39,31,95,31,210,31,68,31,106,31,106,30,3,31,23,31,230,31,230,30,215,31,215,30,215,29,226,31,185,31,185,30,155,31,210,31,163,31,242,31,40,31,60,31,198,31,255,31,198,31,198,30,253,31,253,30,77,31,231,31,111,31,111,30,111,29,135,31,112,31,12,31,12,30,12,29,47,31,82,31,85,31,84,31,72,31,112,31,29,31,12,31,181,31,181,30,183,31,112,31,197,31,32,31,132,31,170,31,83,31,17,31,77,31,135,31,208,31,47,31,99,31,139,31,102,31,7,31,89,31,204,31,12,31,67,31,156,31,176,31,176,30,50,31,67,31,43,31,106,31,242,31,242,30,176,31,238,31,157,31,157,30,34,31,72,31,18,31,122,31,60,31,65,31,246,31,245,31,202,31,202,30,202,29,11,31,47,31,123,31,22,31,227,31,22,31,207,31,192,31,194,31,151,31,225,31,239,31,112,31,1,31,95,31,146,31,146,30,245,31,77,31,14,31,14,30,173,31,9,31,190,31,68,31,194,31,37,31,37,30,248,31,243,31,66,31,173,31,173,30,89,31,195,31,176,31,204,31,9,31,161,31,230,31,13,31,165,31,170,31,170,30,71,31,71,30,139,31,40,31,40,30,71,31,243,31,221,31,118,31,118,30,83,31,83,30,189,31,153,31,218,31,87,31,83,31,83,30,83,29,94,31,134,31,252,31,252,30,252,29,200,31,186,31,152,31,26,31,26,30,12,31,12,30,72,31,40,31,40,30,77,31,77,30,211,31,178,31,178,30,139,31,245,31,168,31,75,31,246,31,170,31,238,31,238,30,101,31,101,30,18,31,54,31,1,31,14,31,14,30,191,31,191,30,120,31,235,31,20,31,78,31,226,31,228,31,228,30,102,31,183,31,196,31,4,31,4,30,127,31,127,30,165,31,119,31,13,31,197,31,117,31,117,30,141,31,147,31,147,30,147,29,147,28,75,31,75,30,137,31,165,31,181,31,181,30,140,31,181,31,166,31,87,31,35,31,103,31,211,31,255,31,70,31,73,31,4,31,59,31,59,30,240,31,240,30,251,31,65,31,193,31,193,30,122,31,83,31,172,31,224,31,11,31,54,31,177,31,177,30,165,31,242,31,242,30,29,31,29,30,86,31,135,31,106,31,221,31,82,31,184,31,190,31,47,31,47,30,138,31,146,31,176,31,176,30,119,31,57,31,144,31,95,31,241,31,241,30,241,29,241,28,241,27,201,31,42,31,42,30,42,29,42,28,218,31,55,31,133,31,224,31,193,31,87,31,154,31,194,31,139,31,139,30,77,31,69,31,227,31,227,30,36,31,36,30,224,31,122,31,65,31,157,31,42,31,85,31,177,31,236,31,72,31,72,30,140,31,63,31,229,31,209,31,100,31,239,31,97,31,97,30,97,29,169,31,98,31,98,30,5,31,79,31,193,31,60,31,39,31,103,31,165,31,143,31,143,30,143,29,143,28,94,31,145,31,231,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
