-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 359;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,136,0,201,0,149,0,97,0,97,0,140,0,0,0,219,0,86,0,141,0,19,0,84,0,234,0,66,0,0,0,196,0,0,0,0,0,2,0,0,0,190,0,0,0,0,0,174,0,70,0,32,0,9,0,76,0,169,0,0,0,167,0,118,0,0,0,79,0,0,0,163,0,172,0,158,0,46,0,139,0,8,0,137,0,0,0,97,0,86,0,14,0,56,0,254,0,0,0,180,0,140,0,41,0,211,0,243,0,165,0,215,0,23,0,96,0,72,0,171,0,0,0,171,0,200,0,40,0,145,0,38,0,0,0,41,0,243,0,193,0,238,0,134,0,165,0,218,0,250,0,0,0,101,0,113,0,25,0,166,0,27,0,88,0,0,0,69,0,22,0,0,0,44,0,151,0,0,0,241,0,17,0,20,0,90,0,95,0,80,0,130,0,231,0,26,0,249,0,0,0,231,0,0,0,209,0,149,0,15,0,251,0,43,0,179,0,218,0,175,0,0,0,0,0,160,0,75,0,21,0,157,0,105,0,224,0,49,0,0,0,138,0,74,0,71,0,0,0,140,0,132,0,111,0,185,0,100,0,10,0,245,0,51,0,128,0,19,0,191,0,0,0,29,0,0,0,35,0,15,0,0,0,170,0,125,0,174,0,71,0,0,0,189,0,198,0,30,0,46,0,101,0,205,0,251,0,250,0,239,0,148,0,99,0,0,0,0,0,58,0,78,0,0,0,0,0,134,0,0,0,59,0,57,0,79,0,47,0,197,0,237,0,121,0,168,0,226,0,216,0,254,0,23,0,101,0,0,0,209,0,243,0,0,0,169,0,52,0,131,0,113,0,0,0,228,0,136,0,212,0,86,0,96,0,115,0,249,0,241,0,17,0,0,0,0,0,0,0,179,0,151,0,86,0,66,0,84,0,163,0,199,0,29,0,104,0,251,0,140,0,36,0,138,0,54,0,78,0,35,0,85,0,185,0,196,0,0,0,76,0,0,0,55,0,134,0,68,0,174,0,137,0,10,0,213,0,121,0,189,0,24,0,100,0,141,0,0,0,101,0,224,0,0,0,143,0,22,0,33,0,0,0,111,0,213,0,19,0,231,0,102,0,40,0,31,0,255,0,0,0,75,0,0,0,201,0,82,0,93,0,0,0,0,0,48,0,72,0,98,0,0,0,163,0,187,0,66,0,94,0,0,0,206,0,33,0,145,0,157,0,46,0,245,0,179,0,227,0,41,0,234,0,0,0,179,0,222,0,0,0,12,0,0,0,0,0,81,0,50,0,65,0,128,0,0,0,234,0,0,0,180,0,89,0,193,0,42,0,57,0,162,0,103,0,0,0,7,0,106,0,32,0,195,0,241,0,128,0,239,0,116,0,189,0,50,0,0,0,105,0,137,0,185,0,0,0,163,0,0,0,81,0,135,0,166,0,0,0,124,0,43,0,143,0,0,0,227,0,155,0,0,0,112,0,192,0,0,0,0,0,75,0,49,0,2,0,247,0,0,0,0,0,188,0,15,0,204,0,72,0,203,0,166,0,65,0,144,0,250,0,158,0,41,0,0,0,252,0,42,0,165,0,181,0,144,0,95,0,146,0,0,0,172,0,103,0);
signal scenario_full  : scenario_type := (0,0,136,31,201,31,149,31,97,31,97,31,140,31,140,30,219,31,86,31,141,31,19,31,84,31,234,31,66,31,66,30,196,31,196,30,196,29,2,31,2,30,190,31,190,30,190,29,174,31,70,31,32,31,9,31,76,31,169,31,169,30,167,31,118,31,118,30,79,31,79,30,163,31,172,31,158,31,46,31,139,31,8,31,137,31,137,30,97,31,86,31,14,31,56,31,254,31,254,30,180,31,140,31,41,31,211,31,243,31,165,31,215,31,23,31,96,31,72,31,171,31,171,30,171,31,200,31,40,31,145,31,38,31,38,30,41,31,243,31,193,31,238,31,134,31,165,31,218,31,250,31,250,30,101,31,113,31,25,31,166,31,27,31,88,31,88,30,69,31,22,31,22,30,44,31,151,31,151,30,241,31,17,31,20,31,90,31,95,31,80,31,130,31,231,31,26,31,249,31,249,30,231,31,231,30,209,31,149,31,15,31,251,31,43,31,179,31,218,31,175,31,175,30,175,29,160,31,75,31,21,31,157,31,105,31,224,31,49,31,49,30,138,31,74,31,71,31,71,30,140,31,132,31,111,31,185,31,100,31,10,31,245,31,51,31,128,31,19,31,191,31,191,30,29,31,29,30,35,31,15,31,15,30,170,31,125,31,174,31,71,31,71,30,189,31,198,31,30,31,46,31,101,31,205,31,251,31,250,31,239,31,148,31,99,31,99,30,99,29,58,31,78,31,78,30,78,29,134,31,134,30,59,31,57,31,79,31,47,31,197,31,237,31,121,31,168,31,226,31,216,31,254,31,23,31,101,31,101,30,209,31,243,31,243,30,169,31,52,31,131,31,113,31,113,30,228,31,136,31,212,31,86,31,96,31,115,31,249,31,241,31,17,31,17,30,17,29,17,28,179,31,151,31,86,31,66,31,84,31,163,31,199,31,29,31,104,31,251,31,140,31,36,31,138,31,54,31,78,31,35,31,85,31,185,31,196,31,196,30,76,31,76,30,55,31,134,31,68,31,174,31,137,31,10,31,213,31,121,31,189,31,24,31,100,31,141,31,141,30,101,31,224,31,224,30,143,31,22,31,33,31,33,30,111,31,213,31,19,31,231,31,102,31,40,31,31,31,255,31,255,30,75,31,75,30,201,31,82,31,93,31,93,30,93,29,48,31,72,31,98,31,98,30,163,31,187,31,66,31,94,31,94,30,206,31,33,31,145,31,157,31,46,31,245,31,179,31,227,31,41,31,234,31,234,30,179,31,222,31,222,30,12,31,12,30,12,29,81,31,50,31,65,31,128,31,128,30,234,31,234,30,180,31,89,31,193,31,42,31,57,31,162,31,103,31,103,30,7,31,106,31,32,31,195,31,241,31,128,31,239,31,116,31,189,31,50,31,50,30,105,31,137,31,185,31,185,30,163,31,163,30,81,31,135,31,166,31,166,30,124,31,43,31,143,31,143,30,227,31,155,31,155,30,112,31,192,31,192,30,192,29,75,31,49,31,2,31,247,31,247,30,247,29,188,31,15,31,204,31,72,31,203,31,166,31,65,31,144,31,250,31,158,31,41,31,41,30,252,31,42,31,165,31,181,31,144,31,95,31,146,31,146,30,172,31,103,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
