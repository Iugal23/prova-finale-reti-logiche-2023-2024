-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 885;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,150,0,0,0,11,0,75,0,9,0,105,0,53,0,160,0,106,0,218,0,60,0,131,0,140,0,0,0,48,0,110,0,144,0,196,0,0,0,175,0,235,0,179,0,0,0,188,0,211,0,94,0,11,0,21,0,171,0,222,0,139,0,176,0,192,0,11,0,174,0,14,0,0,0,0,0,81,0,159,0,132,0,39,0,252,0,204,0,0,0,79,0,115,0,113,0,0,0,35,0,95,0,29,0,0,0,151,0,0,0,213,0,58,0,182,0,36,0,133,0,49,0,224,0,62,0,66,0,0,0,39,0,70,0,184,0,72,0,62,0,154,0,105,0,49,0,195,0,238,0,0,0,151,0,185,0,192,0,14,0,185,0,195,0,107,0,65,0,160,0,31,0,1,0,229,0,239,0,40,0,0,0,13,0,0,0,0,0,68,0,0,0,0,0,110,0,126,0,0,0,110,0,88,0,151,0,79,0,207,0,253,0,102,0,184,0,128,0,0,0,70,0,1,0,248,0,202,0,52,0,66,0,254,0,103,0,50,0,237,0,0,0,145,0,0,0,238,0,80,0,250,0,35,0,57,0,129,0,130,0,237,0,254,0,0,0,240,0,4,0,0,0,192,0,227,0,27,0,0,0,213,0,217,0,208,0,79,0,201,0,145,0,233,0,131,0,0,0,20,0,94,0,128,0,0,0,141,0,0,0,0,0,0,0,212,0,11,0,182,0,0,0,171,0,151,0,190,0,125,0,30,0,0,0,118,0,0,0,208,0,85,0,0,0,0,0,37,0,159,0,21,0,68,0,221,0,207,0,0,0,0,0,232,0,251,0,182,0,205,0,236,0,16,0,183,0,231,0,105,0,0,0,143,0,211,0,10,0,52,0,219,0,6,0,0,0,0,0,232,0,108,0,70,0,150,0,0,0,127,0,62,0,131,0,229,0,16,0,17,0,174,0,0,0,159,0,240,0,134,0,63,0,39,0,28,0,134,0,87,0,234,0,0,0,189,0,83,0,226,0,0,0,121,0,53,0,57,0,35,0,100,0,91,0,122,0,187,0,5,0,58,0,12,0,156,0,174,0,219,0,112,0,88,0,10,0,0,0,246,0,195,0,194,0,117,0,210,0,62,0,0,0,48,0,39,0,188,0,0,0,166,0,30,0,55,0,11,0,95,0,196,0,165,0,235,0,214,0,157,0,0,0,171,0,155,0,140,0,115,0,0,0,233,0,203,0,218,0,23,0,115,0,0,0,75,0,7,0,126,0,33,0,178,0,244,0,0,0,196,0,204,0,0,0,20,0,204,0,235,0,16,0,98,0,97,0,0,0,40,0,198,0,42,0,225,0,0,0,243,0,174,0,16,0,192,0,162,0,247,0,0,0,0,0,67,0,104,0,1,0,50,0,216,0,244,0,115,0,40,0,121,0,0,0,0,0,129,0,76,0,226,0,156,0,0,0,0,0,145,0,0,0,0,0,141,0,77,0,96,0,10,0,212,0,211,0,0,0,0,0,103,0,8,0,223,0,246,0,188,0,148,0,169,0,58,0,177,0,0,0,235,0,0,0,21,0,41,0,254,0,165,0,68,0,220,0,213,0,38,0,251,0,0,0,11,0,0,0,0,0,78,0,0,0,27,0,208,0,50,0,0,0,93,0,115,0,233,0,84,0,169,0,0,0,230,0,44,0,185,0,238,0,0,0,171,0,19,0,0,0,61,0,204,0,211,0,95,0,98,0,0,0,117,0,0,0,88,0,72,0,41,0,0,0,39,0,250,0,218,0,117,0,9,0,65,0,0,0,0,0,138,0,82,0,0,0,83,0,147,0,129,0,181,0,54,0,80,0,116,0,146,0,237,0,155,0,86,0,74,0,125,0,0,0,244,0,0,0,73,0,112,0,197,0,85,0,124,0,45,0,98,0,34,0,105,0,254,0,0,0,28,0,170,0,18,0,125,0,95,0,212,0,199,0,205,0,183,0,165,0,63,0,154,0,5,0,0,0,0,0,60,0,0,0,2,0,244,0,252,0,86,0,122,0,230,0,37,0,59,0,21,0,0,0,0,0,149,0,69,0,187,0,96,0,216,0,0,0,126,0,192,0,0,0,115,0,27,0,5,0,171,0,128,0,92,0,138,0,204,0,23,0,231,0,92,0,0,0,123,0,211,0,1,0,236,0,132,0,0,0,66,0,40,0,178,0,157,0,0,0,241,0,0,0,102,0,22,0,182,0,0,0,236,0,59,0,0,0,15,0,59,0,103,0,231,0,102,0,241,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,171,0,159,0,111,0,230,0,0,0,213,0,39,0,0,0,112,0,194,0,46,0,32,0,162,0,0,0,220,0,0,0,17,0,2,0,203,0,210,0,0,0,248,0,83,0,0,0,133,0,135,0,221,0,58,0,117,0,105,0,70,0,219,0,0,0,250,0,0,0,36,0,0,0,98,0,68,0,90,0,114,0,213,0,67,0,188,0,164,0,11,0,0,0,199,0,107,0,9,0,60,0,243,0,156,0,70,0,147,0,57,0,135,0,219,0,194,0,12,0,45,0,0,0,178,0,223,0,122,0,207,0,251,0,226,0,0,0,37,0,159,0,0,0,0,0,152,0,183,0,125,0,242,0,206,0,20,0,63,0,230,0,4,0,33,0,0,0,243,0,0,0,0,0,15,0,197,0,188,0,0,0,224,0,206,0,153,0,0,0,171,0,195,0,0,0,2,0,99,0,119,0,166,0,154,0,120,0,19,0,67,0,0,0,227,0,138,0,232,0,81,0,96,0,0,0,191,0,207,0,200,0,25,0,75,0,118,0,180,0,225,0,187,0,0,0,162,0,123,0,229,0,69,0,187,0,206,0,0,0,181,0,0,0,24,0,24,0,160,0,151,0,183,0,177,0,0,0,98,0,48,0,101,0,0,0,144,0,109,0,194,0,207,0,0,0,0,0,0,0,181,0,237,0,216,0,246,0,0,0,0,0,60,0,61,0,248,0,54,0,217,0,252,0,50,0,171,0,225,0,0,0,142,0,0,0,18,0,180,0,223,0,73,0,207,0,0,0,110,0,30,0,46,0,152,0,195,0,0,0,245,0,4,0,41,0,159,0,226,0,0,0,174,0,0,0,242,0,30,0,0,0,0,0,0,0,166,0,239,0,145,0,119,0,239,0,25,0,0,0,0,0,85,0,1,0,161,0,244,0,0,0,171,0,0,0,245,0,0,0,158,0,59,0,0,0,176,0,89,0,0,0,202,0,230,0,0,0,150,0,113,0,72,0,53,0,120,0,118,0,135,0,120,0,39,0,63,0,142,0,204,0,0,0,192,0,16,0,84,0,12,0,251,0,0,0,200,0,0,0,227,0,206,0,127,0,35,0,0,0,0,0,0,0,50,0,199,0,132,0,254,0,112,0,0,0,157,0,32,0,0,0,150,0,251,0,99,0,0,0,0,0,92,0,164,0,105,0,0,0,134,0,152,0,4,0,10,0,211,0,23,0,0,0,22,0,0,0,233,0,155,0,219,0,235,0,250,0,214,0,190,0,241,0,0,0,171,0,0,0,51,0,12,0,31,0,0,0,0,0,126,0,138,0,229,0,162,0,59,0,188,0,123,0,7,0,233,0,154,0,216,0,50,0,171,0,0,0,56,0,0,0,0,0,0,0,44,0,0,0,0,0,106,0,39,0,0,0,165,0,18,0,175,0,215,0,131,0,253,0,13,0,8,0,122,0,79,0,185,0,0,0,63,0,195,0,84,0,192,0,99,0,138,0,124,0,85,0,215,0,7,0,199,0,0,0,34,0,125,0,221,0,93,0,114,0,28,0,40,0,160,0,0,0,13,0,73,0,93,0,0,0,172,0,0,0,138,0,151,0,0,0,107,0,199,0,0,0,143,0,0,0,147,0,0,0,135,0,214,0,111,0,17,0,7,0,99,0,56,0,0,0,205,0);
signal scenario_full  : scenario_type := (0,0,150,31,150,30,11,31,75,31,9,31,105,31,53,31,160,31,106,31,218,31,60,31,131,31,140,31,140,30,48,31,110,31,144,31,196,31,196,30,175,31,235,31,179,31,179,30,188,31,211,31,94,31,11,31,21,31,171,31,222,31,139,31,176,31,192,31,11,31,174,31,14,31,14,30,14,29,81,31,159,31,132,31,39,31,252,31,204,31,204,30,79,31,115,31,113,31,113,30,35,31,95,31,29,31,29,30,151,31,151,30,213,31,58,31,182,31,36,31,133,31,49,31,224,31,62,31,66,31,66,30,39,31,70,31,184,31,72,31,62,31,154,31,105,31,49,31,195,31,238,31,238,30,151,31,185,31,192,31,14,31,185,31,195,31,107,31,65,31,160,31,31,31,1,31,229,31,239,31,40,31,40,30,13,31,13,30,13,29,68,31,68,30,68,29,110,31,126,31,126,30,110,31,88,31,151,31,79,31,207,31,253,31,102,31,184,31,128,31,128,30,70,31,1,31,248,31,202,31,52,31,66,31,254,31,103,31,50,31,237,31,237,30,145,31,145,30,238,31,80,31,250,31,35,31,57,31,129,31,130,31,237,31,254,31,254,30,240,31,4,31,4,30,192,31,227,31,27,31,27,30,213,31,217,31,208,31,79,31,201,31,145,31,233,31,131,31,131,30,20,31,94,31,128,31,128,30,141,31,141,30,141,29,141,28,212,31,11,31,182,31,182,30,171,31,151,31,190,31,125,31,30,31,30,30,118,31,118,30,208,31,85,31,85,30,85,29,37,31,159,31,21,31,68,31,221,31,207,31,207,30,207,29,232,31,251,31,182,31,205,31,236,31,16,31,183,31,231,31,105,31,105,30,143,31,211,31,10,31,52,31,219,31,6,31,6,30,6,29,232,31,108,31,70,31,150,31,150,30,127,31,62,31,131,31,229,31,16,31,17,31,174,31,174,30,159,31,240,31,134,31,63,31,39,31,28,31,134,31,87,31,234,31,234,30,189,31,83,31,226,31,226,30,121,31,53,31,57,31,35,31,100,31,91,31,122,31,187,31,5,31,58,31,12,31,156,31,174,31,219,31,112,31,88,31,10,31,10,30,246,31,195,31,194,31,117,31,210,31,62,31,62,30,48,31,39,31,188,31,188,30,166,31,30,31,55,31,11,31,95,31,196,31,165,31,235,31,214,31,157,31,157,30,171,31,155,31,140,31,115,31,115,30,233,31,203,31,218,31,23,31,115,31,115,30,75,31,7,31,126,31,33,31,178,31,244,31,244,30,196,31,204,31,204,30,20,31,204,31,235,31,16,31,98,31,97,31,97,30,40,31,198,31,42,31,225,31,225,30,243,31,174,31,16,31,192,31,162,31,247,31,247,30,247,29,67,31,104,31,1,31,50,31,216,31,244,31,115,31,40,31,121,31,121,30,121,29,129,31,76,31,226,31,156,31,156,30,156,29,145,31,145,30,145,29,141,31,77,31,96,31,10,31,212,31,211,31,211,30,211,29,103,31,8,31,223,31,246,31,188,31,148,31,169,31,58,31,177,31,177,30,235,31,235,30,21,31,41,31,254,31,165,31,68,31,220,31,213,31,38,31,251,31,251,30,11,31,11,30,11,29,78,31,78,30,27,31,208,31,50,31,50,30,93,31,115,31,233,31,84,31,169,31,169,30,230,31,44,31,185,31,238,31,238,30,171,31,19,31,19,30,61,31,204,31,211,31,95,31,98,31,98,30,117,31,117,30,88,31,72,31,41,31,41,30,39,31,250,31,218,31,117,31,9,31,65,31,65,30,65,29,138,31,82,31,82,30,83,31,147,31,129,31,181,31,54,31,80,31,116,31,146,31,237,31,155,31,86,31,74,31,125,31,125,30,244,31,244,30,73,31,112,31,197,31,85,31,124,31,45,31,98,31,34,31,105,31,254,31,254,30,28,31,170,31,18,31,125,31,95,31,212,31,199,31,205,31,183,31,165,31,63,31,154,31,5,31,5,30,5,29,60,31,60,30,2,31,244,31,252,31,86,31,122,31,230,31,37,31,59,31,21,31,21,30,21,29,149,31,69,31,187,31,96,31,216,31,216,30,126,31,192,31,192,30,115,31,27,31,5,31,171,31,128,31,92,31,138,31,204,31,23,31,231,31,92,31,92,30,123,31,211,31,1,31,236,31,132,31,132,30,66,31,40,31,178,31,157,31,157,30,241,31,241,30,102,31,22,31,182,31,182,30,236,31,59,31,59,30,15,31,59,31,103,31,231,31,102,31,241,31,241,30,241,29,241,28,241,27,241,26,243,31,243,30,171,31,159,31,111,31,230,31,230,30,213,31,39,31,39,30,112,31,194,31,46,31,32,31,162,31,162,30,220,31,220,30,17,31,2,31,203,31,210,31,210,30,248,31,83,31,83,30,133,31,135,31,221,31,58,31,117,31,105,31,70,31,219,31,219,30,250,31,250,30,36,31,36,30,98,31,68,31,90,31,114,31,213,31,67,31,188,31,164,31,11,31,11,30,199,31,107,31,9,31,60,31,243,31,156,31,70,31,147,31,57,31,135,31,219,31,194,31,12,31,45,31,45,30,178,31,223,31,122,31,207,31,251,31,226,31,226,30,37,31,159,31,159,30,159,29,152,31,183,31,125,31,242,31,206,31,20,31,63,31,230,31,4,31,33,31,33,30,243,31,243,30,243,29,15,31,197,31,188,31,188,30,224,31,206,31,153,31,153,30,171,31,195,31,195,30,2,31,99,31,119,31,166,31,154,31,120,31,19,31,67,31,67,30,227,31,138,31,232,31,81,31,96,31,96,30,191,31,207,31,200,31,25,31,75,31,118,31,180,31,225,31,187,31,187,30,162,31,123,31,229,31,69,31,187,31,206,31,206,30,181,31,181,30,24,31,24,31,160,31,151,31,183,31,177,31,177,30,98,31,48,31,101,31,101,30,144,31,109,31,194,31,207,31,207,30,207,29,207,28,181,31,237,31,216,31,246,31,246,30,246,29,60,31,61,31,248,31,54,31,217,31,252,31,50,31,171,31,225,31,225,30,142,31,142,30,18,31,180,31,223,31,73,31,207,31,207,30,110,31,30,31,46,31,152,31,195,31,195,30,245,31,4,31,41,31,159,31,226,31,226,30,174,31,174,30,242,31,30,31,30,30,30,29,30,28,166,31,239,31,145,31,119,31,239,31,25,31,25,30,25,29,85,31,1,31,161,31,244,31,244,30,171,31,171,30,245,31,245,30,158,31,59,31,59,30,176,31,89,31,89,30,202,31,230,31,230,30,150,31,113,31,72,31,53,31,120,31,118,31,135,31,120,31,39,31,63,31,142,31,204,31,204,30,192,31,16,31,84,31,12,31,251,31,251,30,200,31,200,30,227,31,206,31,127,31,35,31,35,30,35,29,35,28,50,31,199,31,132,31,254,31,112,31,112,30,157,31,32,31,32,30,150,31,251,31,99,31,99,30,99,29,92,31,164,31,105,31,105,30,134,31,152,31,4,31,10,31,211,31,23,31,23,30,22,31,22,30,233,31,155,31,219,31,235,31,250,31,214,31,190,31,241,31,241,30,171,31,171,30,51,31,12,31,31,31,31,30,31,29,126,31,138,31,229,31,162,31,59,31,188,31,123,31,7,31,233,31,154,31,216,31,50,31,171,31,171,30,56,31,56,30,56,29,56,28,44,31,44,30,44,29,106,31,39,31,39,30,165,31,18,31,175,31,215,31,131,31,253,31,13,31,8,31,122,31,79,31,185,31,185,30,63,31,195,31,84,31,192,31,99,31,138,31,124,31,85,31,215,31,7,31,199,31,199,30,34,31,125,31,221,31,93,31,114,31,28,31,40,31,160,31,160,30,13,31,73,31,93,31,93,30,172,31,172,30,138,31,151,31,151,30,107,31,199,31,199,30,143,31,143,30,147,31,147,30,135,31,214,31,111,31,17,31,7,31,99,31,56,31,56,30,205,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
