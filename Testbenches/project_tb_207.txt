-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 865;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (5,0,243,0,249,0,0,0,98,0,94,0,208,0,0,0,233,0,9,0,15,0,234,0,198,0,55,0,0,0,0,0,9,0,54,0,253,0,150,0,66,0,119,0,236,0,61,0,117,0,242,0,0,0,61,0,236,0,188,0,251,0,251,0,0,0,0,0,117,0,142,0,27,0,0,0,5,0,233,0,34,0,0,0,0,0,78,0,122,0,105,0,135,0,0,0,0,0,198,0,176,0,13,0,56,0,93,0,145,0,121,0,12,0,239,0,0,0,13,0,49,0,82,0,219,0,87,0,143,0,10,0,102,0,84,0,40,0,171,0,217,0,55,0,203,0,141,0,45,0,0,0,43,0,27,0,227,0,32,0,197,0,0,0,0,0,96,0,109,0,207,0,138,0,70,0,118,0,30,0,158,0,0,0,0,0,173,0,247,0,139,0,213,0,148,0,124,0,151,0,189,0,0,0,98,0,168,0,233,0,250,0,221,0,0,0,100,0,145,0,216,0,91,0,12,0,18,0,103,0,121,0,50,0,119,0,181,0,116,0,113,0,41,0,35,0,73,0,121,0,105,0,76,0,74,0,227,0,0,0,105,0,0,0,237,0,147,0,9,0,76,0,195,0,0,0,164,0,0,0,58,0,51,0,46,0,222,0,86,0,239,0,237,0,140,0,196,0,68,0,108,0,20,0,145,0,52,0,40,0,0,0,136,0,190,0,0,0,64,0,150,0,92,0,0,0,0,0,240,0,113,0,252,0,191,0,0,0,153,0,200,0,227,0,20,0,0,0,200,0,106,0,0,0,77,0,18,0,138,0,80,0,16,0,124,0,198,0,0,0,0,0,132,0,121,0,255,0,0,0,202,0,0,0,91,0,120,0,101,0,0,0,39,0,241,0,177,0,166,0,96,0,125,0,181,0,244,0,0,0,203,0,252,0,0,0,81,0,0,0,210,0,176,0,0,0,248,0,0,0,119,0,48,0,52,0,52,0,181,0,199,0,240,0,0,0,255,0,214,0,61,0,0,0,204,0,253,0,177,0,210,0,33,0,46,0,7,0,54,0,82,0,152,0,188,0,215,0,183,0,109,0,77,0,192,0,83,0,0,0,8,0,0,0,195,0,217,0,155,0,63,0,228,0,185,0,36,0,0,0,72,0,18,0,67,0,154,0,0,0,0,0,236,0,88,0,85,0,199,0,0,0,247,0,133,0,206,0,44,0,98,0,144,0,46,0,72,0,158,0,54,0,225,0,78,0,252,0,134,0,60,0,26,0,75,0,0,0,114,0,43,0,142,0,63,0,213,0,112,0,0,0,212,0,191,0,172,0,12,0,142,0,27,0,183,0,115,0,164,0,0,0,95,0,0,0,224,0,197,0,161,0,136,0,85,0,0,0,175,0,142,0,216,0,174,0,195,0,13,0,74,0,52,0,35,0,0,0,165,0,0,0,123,0,196,0,64,0,226,0,121,0,255,0,156,0,229,0,0,0,224,0,242,0,64,0,0,0,0,0,7,0,223,0,165,0,159,0,95,0,16,0,0,0,174,0,227,0,189,0,109,0,234,0,0,0,255,0,3,0,220,0,26,0,113,0,102,0,67,0,42,0,0,0,197,0,66,0,247,0,60,0,0,0,58,0,185,0,52,0,0,0,134,0,243,0,121,0,126,0,0,0,136,0,237,0,239,0,0,0,151,0,50,0,25,0,0,0,0,0,208,0,122,0,83,0,0,0,0,0,0,0,0,0,187,0,0,0,137,0,124,0,0,0,199,0,0,0,224,0,0,0,57,0,0,0,204,0,46,0,216,0,0,0,197,0,216,0,107,0,28,0,32,0,167,0,57,0,243,0,40,0,71,0,28,0,147,0,0,0,128,0,0,0,0,0,55,0,59,0,204,0,115,0,53,0,172,0,0,0,54,0,253,0,56,0,58,0,212,0,162,0,147,0,125,0,71,0,130,0,194,0,146,0,150,0,34,0,183,0,0,0,0,0,135,0,0,0,241,0,60,0,135,0,43,0,137,0,235,0,167,0,85,0,56,0,200,0,158,0,159,0,163,0,116,0,183,0,136,0,232,0,47,0,226,0,200,0,82,0,37,0,60,0,0,0,0,0,195,0,250,0,139,0,207,0,192,0,21,0,0,0,94,0,237,0,49,0,230,0,0,0,118,0,87,0,74,0,189,0,249,0,185,0,27,0,160,0,203,0,102,0,34,0,33,0,19,0,0,0,48,0,0,0,159,0,172,0,173,0,32,0,26,0,33,0,13,0,39,0,0,0,67,0,177,0,132,0,155,0,122,0,159,0,124,0,89,0,0,0,116,0,134,0,184,0,35,0,27,0,82,0,250,0,128,0,125,0,163,0,0,0,111,0,0,0,205,0,15,0,0,0,250,0,187,0,15,0,59,0,75,0,234,0,0,0,0,0,102,0,221,0,36,0,168,0,219,0,200,0,166,0,191,0,54,0,13,0,78,0,200,0,66,0,111,0,42,0,0,0,56,0,19,0,101,0,96,0,115,0,28,0,211,0,31,0,23,0,178,0,0,0,0,0,84,0,0,0,0,0,31,0,86,0,37,0,129,0,190,0,15,0,10,0,123,0,142,0,136,0,84,0,30,0,118,0,254,0,246,0,59,0,0,0,0,0,85,0,32,0,2,0,88,0,185,0,40,0,83,0,0,0,206,0,124,0,98,0,253,0,239,0,204,0,10,0,154,0,188,0,124,0,0,0,58,0,154,0,0,0,221,0,152,0,59,0,0,0,229,0,227,0,0,0,169,0,115,0,251,0,123,0,27,0,179,0,216,0,0,0,173,0,83,0,168,0,114,0,239,0,121,0,18,0,0,0,166,0,140,0,245,0,238,0,0,0,183,0,55,0,189,0,162,0,49,0,146,0,0,0,0,0,74,0,202,0,75,0,0,0,226,0,45,0,100,0,63,0,81,0,0,0,130,0,0,0,80,0,253,0,42,0,130,0,11,0,18,0,52,0,0,0,50,0,0,0,0,0,151,0,251,0,71,0,137,0,58,0,0,0,105,0,148,0,13,0,0,0,0,0,40,0,74,0,0,0,148,0,28,0,0,0,0,0,253,0,114,0,0,0,95,0,46,0,101,0,210,0,216,0,1,0,132,0,165,0,184,0,105,0,10,0,0,0,238,0,25,0,243,0,0,0,254,0,125,0,0,0,251,0,97,0,99,0,0,0,0,0,0,0,220,0,94,0,208,0,38,0,18,0,76,0,0,0,34,0,19,0,58,0,70,0,183,0,220,0,212,0,0,0,213,0,105,0,224,0,203,0,47,0,208,0,255,0,193,0,0,0,0,0,195,0,139,0,194,0,129,0,212,0,72,0,86,0,250,0,63,0,195,0,28,0,234,0,250,0,66,0,0,0,0,0,13,0,47,0,209,0,241,0,136,0,151,0,0,0,126,0,236,0,112,0,64,0,0,0,72,0,188,0,221,0,0,0,0,0,0,0,0,0,27,0,0,0,76,0,142,0,0,0,0,0,233,0,42,0,21,0,114,0,22,0,229,0,140,0,0,0,180,0,45,0,194,0,78,0,96,0,0,0,0,0,180,0,25,0,81,0,196,0,0,0,116,0,229,0,108,0,0,0,196,0,0,0,68,0,59,0,209,0,0,0,0,0,46,0,20,0,31,0,0,0,198,0,17,0,0,0,0,0,204,0,240,0,27,0,128,0,0,0,2,0,242,0,160,0,54,0,185,0,94,0,50,0,0,0,204,0,69,0,251,0,0,0,0,0,174,0,127,0,0,0,0,0,187,0,251,0,38,0,227,0,81,0,249,0,219,0,0,0,0,0,147,0,55,0,28,0,164,0,0,0,10,0,1,0,125,0,0,0,0,0,66,0,61,0,8,0,160,0);
signal scenario_full  : scenario_type := (5,31,243,31,249,31,249,30,98,31,94,31,208,31,208,30,233,31,9,31,15,31,234,31,198,31,55,31,55,30,55,29,9,31,54,31,253,31,150,31,66,31,119,31,236,31,61,31,117,31,242,31,242,30,61,31,236,31,188,31,251,31,251,31,251,30,251,29,117,31,142,31,27,31,27,30,5,31,233,31,34,31,34,30,34,29,78,31,122,31,105,31,135,31,135,30,135,29,198,31,176,31,13,31,56,31,93,31,145,31,121,31,12,31,239,31,239,30,13,31,49,31,82,31,219,31,87,31,143,31,10,31,102,31,84,31,40,31,171,31,217,31,55,31,203,31,141,31,45,31,45,30,43,31,27,31,227,31,32,31,197,31,197,30,197,29,96,31,109,31,207,31,138,31,70,31,118,31,30,31,158,31,158,30,158,29,173,31,247,31,139,31,213,31,148,31,124,31,151,31,189,31,189,30,98,31,168,31,233,31,250,31,221,31,221,30,100,31,145,31,216,31,91,31,12,31,18,31,103,31,121,31,50,31,119,31,181,31,116,31,113,31,41,31,35,31,73,31,121,31,105,31,76,31,74,31,227,31,227,30,105,31,105,30,237,31,147,31,9,31,76,31,195,31,195,30,164,31,164,30,58,31,51,31,46,31,222,31,86,31,239,31,237,31,140,31,196,31,68,31,108,31,20,31,145,31,52,31,40,31,40,30,136,31,190,31,190,30,64,31,150,31,92,31,92,30,92,29,240,31,113,31,252,31,191,31,191,30,153,31,200,31,227,31,20,31,20,30,200,31,106,31,106,30,77,31,18,31,138,31,80,31,16,31,124,31,198,31,198,30,198,29,132,31,121,31,255,31,255,30,202,31,202,30,91,31,120,31,101,31,101,30,39,31,241,31,177,31,166,31,96,31,125,31,181,31,244,31,244,30,203,31,252,31,252,30,81,31,81,30,210,31,176,31,176,30,248,31,248,30,119,31,48,31,52,31,52,31,181,31,199,31,240,31,240,30,255,31,214,31,61,31,61,30,204,31,253,31,177,31,210,31,33,31,46,31,7,31,54,31,82,31,152,31,188,31,215,31,183,31,109,31,77,31,192,31,83,31,83,30,8,31,8,30,195,31,217,31,155,31,63,31,228,31,185,31,36,31,36,30,72,31,18,31,67,31,154,31,154,30,154,29,236,31,88,31,85,31,199,31,199,30,247,31,133,31,206,31,44,31,98,31,144,31,46,31,72,31,158,31,54,31,225,31,78,31,252,31,134,31,60,31,26,31,75,31,75,30,114,31,43,31,142,31,63,31,213,31,112,31,112,30,212,31,191,31,172,31,12,31,142,31,27,31,183,31,115,31,164,31,164,30,95,31,95,30,224,31,197,31,161,31,136,31,85,31,85,30,175,31,142,31,216,31,174,31,195,31,13,31,74,31,52,31,35,31,35,30,165,31,165,30,123,31,196,31,64,31,226,31,121,31,255,31,156,31,229,31,229,30,224,31,242,31,64,31,64,30,64,29,7,31,223,31,165,31,159,31,95,31,16,31,16,30,174,31,227,31,189,31,109,31,234,31,234,30,255,31,3,31,220,31,26,31,113,31,102,31,67,31,42,31,42,30,197,31,66,31,247,31,60,31,60,30,58,31,185,31,52,31,52,30,134,31,243,31,121,31,126,31,126,30,136,31,237,31,239,31,239,30,151,31,50,31,25,31,25,30,25,29,208,31,122,31,83,31,83,30,83,29,83,28,83,27,187,31,187,30,137,31,124,31,124,30,199,31,199,30,224,31,224,30,57,31,57,30,204,31,46,31,216,31,216,30,197,31,216,31,107,31,28,31,32,31,167,31,57,31,243,31,40,31,71,31,28,31,147,31,147,30,128,31,128,30,128,29,55,31,59,31,204,31,115,31,53,31,172,31,172,30,54,31,253,31,56,31,58,31,212,31,162,31,147,31,125,31,71,31,130,31,194,31,146,31,150,31,34,31,183,31,183,30,183,29,135,31,135,30,241,31,60,31,135,31,43,31,137,31,235,31,167,31,85,31,56,31,200,31,158,31,159,31,163,31,116,31,183,31,136,31,232,31,47,31,226,31,200,31,82,31,37,31,60,31,60,30,60,29,195,31,250,31,139,31,207,31,192,31,21,31,21,30,94,31,237,31,49,31,230,31,230,30,118,31,87,31,74,31,189,31,249,31,185,31,27,31,160,31,203,31,102,31,34,31,33,31,19,31,19,30,48,31,48,30,159,31,172,31,173,31,32,31,26,31,33,31,13,31,39,31,39,30,67,31,177,31,132,31,155,31,122,31,159,31,124,31,89,31,89,30,116,31,134,31,184,31,35,31,27,31,82,31,250,31,128,31,125,31,163,31,163,30,111,31,111,30,205,31,15,31,15,30,250,31,187,31,15,31,59,31,75,31,234,31,234,30,234,29,102,31,221,31,36,31,168,31,219,31,200,31,166,31,191,31,54,31,13,31,78,31,200,31,66,31,111,31,42,31,42,30,56,31,19,31,101,31,96,31,115,31,28,31,211,31,31,31,23,31,178,31,178,30,178,29,84,31,84,30,84,29,31,31,86,31,37,31,129,31,190,31,15,31,10,31,123,31,142,31,136,31,84,31,30,31,118,31,254,31,246,31,59,31,59,30,59,29,85,31,32,31,2,31,88,31,185,31,40,31,83,31,83,30,206,31,124,31,98,31,253,31,239,31,204,31,10,31,154,31,188,31,124,31,124,30,58,31,154,31,154,30,221,31,152,31,59,31,59,30,229,31,227,31,227,30,169,31,115,31,251,31,123,31,27,31,179,31,216,31,216,30,173,31,83,31,168,31,114,31,239,31,121,31,18,31,18,30,166,31,140,31,245,31,238,31,238,30,183,31,55,31,189,31,162,31,49,31,146,31,146,30,146,29,74,31,202,31,75,31,75,30,226,31,45,31,100,31,63,31,81,31,81,30,130,31,130,30,80,31,253,31,42,31,130,31,11,31,18,31,52,31,52,30,50,31,50,30,50,29,151,31,251,31,71,31,137,31,58,31,58,30,105,31,148,31,13,31,13,30,13,29,40,31,74,31,74,30,148,31,28,31,28,30,28,29,253,31,114,31,114,30,95,31,46,31,101,31,210,31,216,31,1,31,132,31,165,31,184,31,105,31,10,31,10,30,238,31,25,31,243,31,243,30,254,31,125,31,125,30,251,31,97,31,99,31,99,30,99,29,99,28,220,31,94,31,208,31,38,31,18,31,76,31,76,30,34,31,19,31,58,31,70,31,183,31,220,31,212,31,212,30,213,31,105,31,224,31,203,31,47,31,208,31,255,31,193,31,193,30,193,29,195,31,139,31,194,31,129,31,212,31,72,31,86,31,250,31,63,31,195,31,28,31,234,31,250,31,66,31,66,30,66,29,13,31,47,31,209,31,241,31,136,31,151,31,151,30,126,31,236,31,112,31,64,31,64,30,72,31,188,31,221,31,221,30,221,29,221,28,221,27,27,31,27,30,76,31,142,31,142,30,142,29,233,31,42,31,21,31,114,31,22,31,229,31,140,31,140,30,180,31,45,31,194,31,78,31,96,31,96,30,96,29,180,31,25,31,81,31,196,31,196,30,116,31,229,31,108,31,108,30,196,31,196,30,68,31,59,31,209,31,209,30,209,29,46,31,20,31,31,31,31,30,198,31,17,31,17,30,17,29,204,31,240,31,27,31,128,31,128,30,2,31,242,31,160,31,54,31,185,31,94,31,50,31,50,30,204,31,69,31,251,31,251,30,251,29,174,31,127,31,127,30,127,29,187,31,251,31,38,31,227,31,81,31,249,31,219,31,219,30,219,29,147,31,55,31,28,31,164,31,164,30,10,31,1,31,125,31,125,30,125,29,66,31,61,31,8,31,160,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
