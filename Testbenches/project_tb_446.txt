-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 577;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,10,0,91,0,229,0,0,0,229,0,214,0,209,0,27,0,58,0,235,0,199,0,0,0,0,0,100,0,140,0,122,0,0,0,0,0,53,0,0,0,220,0,162,0,170,0,197,0,76,0,11,0,25,0,80,0,101,0,194,0,0,0,103,0,70,0,143,0,246,0,208,0,216,0,253,0,4,0,0,0,113,0,59,0,112,0,9,0,180,0,0,0,249,0,124,0,27,0,64,0,70,0,0,0,250,0,198,0,74,0,94,0,196,0,219,0,0,0,0,0,253,0,0,0,220,0,121,0,135,0,97,0,0,0,175,0,0,0,169,0,158,0,6,0,190,0,20,0,143,0,202,0,46,0,0,0,221,0,76,0,94,0,77,0,0,0,141,0,57,0,5,0,186,0,176,0,0,0,0,0,79,0,0,0,57,0,188,0,0,0,0,0,62,0,172,0,186,0,0,0,61,0,0,0,0,0,228,0,0,0,98,0,99,0,14,0,0,0,33,0,170,0,143,0,0,0,71,0,189,0,121,0,246,0,9,0,128,0,0,0,66,0,0,0,0,0,120,0,118,0,83,0,195,0,212,0,206,0,0,0,2,0,29,0,105,0,197,0,177,0,171,0,55,0,229,0,54,0,120,0,107,0,0,0,84,0,132,0,207,0,67,0,88,0,10,0,0,0,0,0,99,0,72,0,0,0,131,0,124,0,27,0,92,0,0,0,128,0,0,0,213,0,55,0,156,0,191,0,12,0,77,0,53,0,44,0,178,0,0,0,0,0,125,0,99,0,57,0,0,0,19,0,0,0,91,0,132,0,118,0,38,0,182,0,79,0,99,0,167,0,110,0,193,0,200,0,179,0,3,0,90,0,165,0,205,0,62,0,229,0,99,0,168,0,53,0,94,0,0,0,243,0,197,0,154,0,126,0,0,0,194,0,0,0,202,0,173,0,44,0,195,0,9,0,122,0,33,0,77,0,174,0,47,0,105,0,0,0,64,0,255,0,0,0,24,0,18,0,1,0,0,0,34,0,75,0,0,0,0,0,230,0,36,0,0,0,191,0,167,0,0,0,23,0,163,0,46,0,174,0,194,0,218,0,0,0,142,0,247,0,248,0,225,0,179,0,78,0,152,0,168,0,141,0,0,0,20,0,208,0,19,0,174,0,63,0,0,0,153,0,165,0,58,0,139,0,7,0,111,0,56,0,237,0,5,0,0,0,155,0,134,0,0,0,241,0,43,0,0,0,95,0,179,0,194,0,0,0,0,0,178,0,0,0,3,0,139,0,191,0,0,0,43,0,178,0,117,0,110,0,78,0,38,0,39,0,86,0,0,0,100,0,161,0,2,0,0,0,176,0,5,0,191,0,54,0,0,0,76,0,67,0,42,0,253,0,0,0,36,0,27,0,0,0,0,0,0,0,0,0,49,0,4,0,12,0,0,0,173,0,194,0,118,0,186,0,121,0,0,0,0,0,43,0,15,0,205,0,30,0,0,0,89,0,220,0,0,0,0,0,0,0,139,0,156,0,141,0,172,0,72,0,167,0,220,0,215,0,0,0,155,0,130,0,0,0,206,0,109,0,165,0,0,0,250,0,51,0,147,0,123,0,193,0,172,0,147,0,118,0,147,0,229,0,73,0,173,0,61,0,111,0,30,0,143,0,182,0,111,0,99,0,225,0,196,0,28,0,165,0,0,0,67,0,226,0,240,0,25,0,4,0,88,0,160,0,49,0,0,0,230,0,137,0,128,0,92,0,216,0,171,0,0,0,201,0,0,0,196,0,0,0,119,0,215,0,90,0,155,0,49,0,131,0,0,0,148,0,74,0,88,0,2,0,147,0,140,0,0,0,54,0,222,0,0,0,35,0,171,0,26,0,51,0,157,0,221,0,176,0,118,0,20,0,63,0,151,0,0,0,0,0,202,0,155,0,111,0,92,0,37,0,45,0,31,0,13,0,86,0,229,0,87,0,248,0,0,0,237,0,40,0,144,0,144,0,56,0,68,0,0,0,71,0,150,0,36,0,61,0,0,0,98,0,224,0,244,0,96,0,161,0,141,0,234,0,48,0,106,0,0,0,217,0,43,0,37,0,20,0,0,0,175,0,153,0,0,0,110,0,137,0,207,0,70,0,0,0,14,0,254,0,135,0,169,0,253,0,218,0,0,0,0,0,222,0,75,0,177,0,0,0,220,0,47,0,155,0,211,0,93,0,0,0,185,0,111,0,11,0,167,0,240,0,0,0,121,0,69,0,242,0,142,0,0,0,186,0,74,0,0,0,23,0,53,0,76,0,69,0,175,0,28,0,73,0,9,0,71,0,0,0,0,0,0,0,197,0,145,0,0,0,223,0,209,0,138,0,79,0,5,0,0,0,232,0,200,0,146,0,0,0,189,0,216,0,123,0,0,0,0,0,128,0,217,0,5,0,69,0,238,0,0,0,13,0,125,0,224,0,229,0,109,0,110,0,215,0,255,0,71,0,128,0,235,0,246,0,243,0,0,0,196,0,0,0,218,0,156,0,69,0,89,0,63,0,142,0,0,0,22,0,88,0,80,0,93,0,116,0,170,0,0,0,121,0,67,0,93,0,182,0);
signal scenario_full  : scenario_type := (0,0,10,31,91,31,229,31,229,30,229,31,214,31,209,31,27,31,58,31,235,31,199,31,199,30,199,29,100,31,140,31,122,31,122,30,122,29,53,31,53,30,220,31,162,31,170,31,197,31,76,31,11,31,25,31,80,31,101,31,194,31,194,30,103,31,70,31,143,31,246,31,208,31,216,31,253,31,4,31,4,30,113,31,59,31,112,31,9,31,180,31,180,30,249,31,124,31,27,31,64,31,70,31,70,30,250,31,198,31,74,31,94,31,196,31,219,31,219,30,219,29,253,31,253,30,220,31,121,31,135,31,97,31,97,30,175,31,175,30,169,31,158,31,6,31,190,31,20,31,143,31,202,31,46,31,46,30,221,31,76,31,94,31,77,31,77,30,141,31,57,31,5,31,186,31,176,31,176,30,176,29,79,31,79,30,57,31,188,31,188,30,188,29,62,31,172,31,186,31,186,30,61,31,61,30,61,29,228,31,228,30,98,31,99,31,14,31,14,30,33,31,170,31,143,31,143,30,71,31,189,31,121,31,246,31,9,31,128,31,128,30,66,31,66,30,66,29,120,31,118,31,83,31,195,31,212,31,206,31,206,30,2,31,29,31,105,31,197,31,177,31,171,31,55,31,229,31,54,31,120,31,107,31,107,30,84,31,132,31,207,31,67,31,88,31,10,31,10,30,10,29,99,31,72,31,72,30,131,31,124,31,27,31,92,31,92,30,128,31,128,30,213,31,55,31,156,31,191,31,12,31,77,31,53,31,44,31,178,31,178,30,178,29,125,31,99,31,57,31,57,30,19,31,19,30,91,31,132,31,118,31,38,31,182,31,79,31,99,31,167,31,110,31,193,31,200,31,179,31,3,31,90,31,165,31,205,31,62,31,229,31,99,31,168,31,53,31,94,31,94,30,243,31,197,31,154,31,126,31,126,30,194,31,194,30,202,31,173,31,44,31,195,31,9,31,122,31,33,31,77,31,174,31,47,31,105,31,105,30,64,31,255,31,255,30,24,31,18,31,1,31,1,30,34,31,75,31,75,30,75,29,230,31,36,31,36,30,191,31,167,31,167,30,23,31,163,31,46,31,174,31,194,31,218,31,218,30,142,31,247,31,248,31,225,31,179,31,78,31,152,31,168,31,141,31,141,30,20,31,208,31,19,31,174,31,63,31,63,30,153,31,165,31,58,31,139,31,7,31,111,31,56,31,237,31,5,31,5,30,155,31,134,31,134,30,241,31,43,31,43,30,95,31,179,31,194,31,194,30,194,29,178,31,178,30,3,31,139,31,191,31,191,30,43,31,178,31,117,31,110,31,78,31,38,31,39,31,86,31,86,30,100,31,161,31,2,31,2,30,176,31,5,31,191,31,54,31,54,30,76,31,67,31,42,31,253,31,253,30,36,31,27,31,27,30,27,29,27,28,27,27,49,31,4,31,12,31,12,30,173,31,194,31,118,31,186,31,121,31,121,30,121,29,43,31,15,31,205,31,30,31,30,30,89,31,220,31,220,30,220,29,220,28,139,31,156,31,141,31,172,31,72,31,167,31,220,31,215,31,215,30,155,31,130,31,130,30,206,31,109,31,165,31,165,30,250,31,51,31,147,31,123,31,193,31,172,31,147,31,118,31,147,31,229,31,73,31,173,31,61,31,111,31,30,31,143,31,182,31,111,31,99,31,225,31,196,31,28,31,165,31,165,30,67,31,226,31,240,31,25,31,4,31,88,31,160,31,49,31,49,30,230,31,137,31,128,31,92,31,216,31,171,31,171,30,201,31,201,30,196,31,196,30,119,31,215,31,90,31,155,31,49,31,131,31,131,30,148,31,74,31,88,31,2,31,147,31,140,31,140,30,54,31,222,31,222,30,35,31,171,31,26,31,51,31,157,31,221,31,176,31,118,31,20,31,63,31,151,31,151,30,151,29,202,31,155,31,111,31,92,31,37,31,45,31,31,31,13,31,86,31,229,31,87,31,248,31,248,30,237,31,40,31,144,31,144,31,56,31,68,31,68,30,71,31,150,31,36,31,61,31,61,30,98,31,224,31,244,31,96,31,161,31,141,31,234,31,48,31,106,31,106,30,217,31,43,31,37,31,20,31,20,30,175,31,153,31,153,30,110,31,137,31,207,31,70,31,70,30,14,31,254,31,135,31,169,31,253,31,218,31,218,30,218,29,222,31,75,31,177,31,177,30,220,31,47,31,155,31,211,31,93,31,93,30,185,31,111,31,11,31,167,31,240,31,240,30,121,31,69,31,242,31,142,31,142,30,186,31,74,31,74,30,23,31,53,31,76,31,69,31,175,31,28,31,73,31,9,31,71,31,71,30,71,29,71,28,197,31,145,31,145,30,223,31,209,31,138,31,79,31,5,31,5,30,232,31,200,31,146,31,146,30,189,31,216,31,123,31,123,30,123,29,128,31,217,31,5,31,69,31,238,31,238,30,13,31,125,31,224,31,229,31,109,31,110,31,215,31,255,31,71,31,128,31,235,31,246,31,243,31,243,30,196,31,196,30,218,31,156,31,69,31,89,31,63,31,142,31,142,30,22,31,88,31,80,31,93,31,116,31,170,31,170,30,121,31,67,31,93,31,182,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
