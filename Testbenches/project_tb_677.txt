-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 1000;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (157,0,240,0,0,0,0,0,0,0,176,0,99,0,91,0,19,0,240,0,28,0,227,0,116,0,224,0,73,0,18,0,0,0,169,0,0,0,96,0,99,0,0,0,120,0,172,0,117,0,0,0,104,0,0,0,71,0,199,0,0,0,0,0,143,0,212,0,141,0,143,0,7,0,166,0,169,0,217,0,49,0,149,0,185,0,184,0,44,0,169,0,79,0,205,0,0,0,251,0,30,0,129,0,201,0,0,0,227,0,133,0,31,0,163,0,164,0,246,0,178,0,102,0,79,0,0,0,154,0,116,0,204,0,103,0,0,0,16,0,9,0,88,0,38,0,0,0,112,0,47,0,178,0,91,0,95,0,47,0,255,0,245,0,90,0,56,0,17,0,0,0,0,0,0,0,246,0,70,0,0,0,241,0,3,0,29,0,164,0,27,0,185,0,72,0,0,0,190,0,0,0,55,0,39,0,134,0,98,0,0,0,108,0,188,0,89,0,75,0,40,0,0,0,0,0,95,0,164,0,228,0,141,0,0,0,133,0,254,0,48,0,0,0,76,0,46,0,0,0,86,0,217,0,69,0,50,0,204,0,199,0,0,0,236,0,93,0,237,0,63,0,164,0,10,0,0,0,108,0,209,0,164,0,141,0,123,0,226,0,0,0,26,0,95,0,92,0,156,0,180,0,74,0,0,0,223,0,183,0,106,0,0,0,224,0,26,0,192,0,239,0,135,0,0,0,40,0,159,0,30,0,0,0,97,0,0,0,218,0,146,0,0,0,68,0,132,0,198,0,129,0,0,0,213,0,0,0,132,0,145,0,247,0,211,0,0,0,24,0,245,0,207,0,18,0,178,0,94,0,116,0,118,0,2,0,172,0,0,0,28,0,0,0,109,0,248,0,175,0,126,0,153,0,251,0,0,0,149,0,59,0,171,0,0,0,114,0,1,0,189,0,147,0,170,0,158,0,208,0,210,0,48,0,24,0,0,0,36,0,15,0,237,0,237,0,95,0,94,0,236,0,220,0,0,0,55,0,116,0,0,0,0,0,233,0,23,0,99,0,220,0,250,0,0,0,20,0,190,0,0,0,224,0,29,0,0,0,218,0,91,0,215,0,0,0,16,0,40,0,0,0,56,0,47,0,10,0,0,0,203,0,120,0,137,0,22,0,0,0,221,0,178,0,62,0,82,0,241,0,0,0,80,0,213,0,0,0,154,0,134,0,0,0,0,0,204,0,91,0,148,0,241,0,253,0,0,0,0,0,178,0,66,0,0,0,0,0,0,0,177,0,212,0,6,0,18,0,158,0,0,0,0,0,251,0,0,0,247,0,178,0,175,0,105,0,86,0,154,0,195,0,251,0,228,0,12,0,2,0,226,0,219,0,167,0,21,0,0,0,0,0,0,0,139,0,230,0,206,0,0,0,196,0,116,0,184,0,170,0,78,0,143,0,20,0,126,0,177,0,30,0,0,0,0,0,90,0,134,0,222,0,89,0,236,0,98,0,214,0,227,0,230,0,109,0,0,0,0,0,2,0,229,0,188,0,215,0,0,0,248,0,131,0,107,0,76,0,2,0,9,0,248,0,72,0,224,0,53,0,164,0,234,0,167,0,156,0,121,0,0,0,0,0,64,0,64,0,47,0,0,0,156,0,0,0,249,0,132,0,150,0,154,0,81,0,0,0,141,0,99,0,114,0,83,0,212,0,255,0,0,0,0,0,77,0,4,0,202,0,0,0,160,0,68,0,18,0,248,0,139,0,0,0,39,0,115,0,236,0,81,0,109,0,139,0,52,0,2,0,0,0,163,0,0,0,0,0,0,0,0,0,90,0,89,0,135,0,179,0,120,0,0,0,35,0,102,0,0,0,127,0,0,0,80,0,0,0,212,0,38,0,105,0,0,0,0,0,0,0,87,0,35,0,240,0,36,0,0,0,0,0,96,0,0,0,0,0,88,0,0,0,150,0,212,0,0,0,0,0,0,0,135,0,162,0,0,0,133,0,163,0,0,0,0,0,26,0,0,0,0,0,135,0,251,0,17,0,27,0,142,0,182,0,131,0,170,0,251,0,144,0,142,0,35,0,0,0,223,0,223,0,165,0,249,0,125,0,0,0,109,0,26,0,41,0,112,0,188,0,0,0,0,0,231,0,24,0,16,0,10,0,43,0,9,0,177,0,54,0,236,0,238,0,78,0,82,0,22,0,181,0,192,0,53,0,56,0,107,0,164,0,39,0,197,0,0,0,4,0,169,0,160,0,0,0,0,0,53,0,214,0,0,0,179,0,198,0,136,0,190,0,231,0,68,0,16,0,0,0,160,0,123,0,222,0,61,0,0,0,226,0,122,0,178,0,114,0,44,0,220,0,0,0,0,0,59,0,53,0,0,0,29,0,164,0,0,0,139,0,37,0,90,0,0,0,152,0,180,0,43,0,125,0,89,0,0,0,168,0,170,0,167,0,204,0,114,0,237,0,0,0,165,0,0,0,0,0,126,0,211,0,0,0,37,0,0,0,0,0,227,0,165,0,212,0,25,0,215,0,179,0,0,0,143,0,0,0,180,0,213,0,60,0,0,0,0,0,0,0,239,0,232,0,206,0,39,0,201,0,176,0,0,0,150,0,206,0,0,0,84,0,118,0,9,0,72,0,195,0,120,0,136,0,130,0,38,0,59,0,94,0,204,0,197,0,75,0,54,0,52,0,0,0,0,0,0,0,189,0,103,0,1,0,77,0,0,0,193,0,43,0,80,0,244,0,165,0,210,0,195,0,221,0,177,0,202,0,0,0,230,0,207,0,0,0,244,0,29,0,216,0,86,0,237,0,148,0,66,0,219,0,125,0,0,0,0,0,147,0,102,0,0,0,27,0,17,0,141,0,0,0,67,0,0,0,18,0,145,0,33,0,77,0,0,0,0,0,0,0,59,0,37,0,230,0,227,0,117,0,85,0,150,0,0,0,0,0,34,0,156,0,109,0,67,0,0,0,96,0,63,0,0,0,63,0,130,0,229,0,41,0,137,0,193,0,97,0,87,0,0,0,22,0,44,0,65,0,160,0,76,0,125,0,0,0,68,0,87,0,194,0,107,0,22,0,109,0,252,0,14,0,82,0,86,0,173,0,112,0,227,0,80,0,30,0,120,0,113,0,88,0,92,0,76,0,101,0,174,0,194,0,149,0,148,0,110,0,145,0,167,0,55,0,170,0,10,0,175,0,42,0,0,0,224,0,0,0,81,0,163,0,123,0,49,0,129,0,0,0,0,0,199,0,11,0,0,0,101,0,169,0,243,0,32,0,0,0,0,0,0,0,0,0,0,0,234,0,170,0,28,0,77,0,0,0,117,0,0,0,9,0,247,0,168,0,241,0,99,0,9,0,72,0,78,0,94,0,0,0,33,0,152,0,172,0,0,0,191,0,220,0,206,0,243,0,0,0,0,0,104,0,95,0,169,0,0,0,204,0,189,0,1,0,206,0,139,0,187,0,84,0,195,0,26,0,110,0,0,0,0,0,0,0,69,0,247,0,214,0,111,0,45,0,198,0,25,0,97,0,0,0,14,0,22,0,53,0,13,0,8,0,190,0,17,0,0,0,77,0,201,0,82,0,0,0,143,0,249,0,15,0,113,0,247,0,192,0,206,0,227,0,117,0,241,0,4,0,187,0,42,0,0,0,221,0,0,0,0,0,114,0,59,0,72,0,0,0,12,0,81,0,199,0,252,0,73,0,133,0,207,0,204,0,109,0,1,0,71,0,0,0,7,0,106,0,62,0,65,0,35,0,0,0,0,0,34,0,124,0,0,0,29,0,141,0,168,0,165,0,0,0,136,0,3,0,53,0,81,0,33,0,174,0,81,0,143,0,0,0,11,0,123,0,246,0,88,0,201,0,206,0,0,0,94,0,200,0,49,0,0,0,37,0,128,0,0,0,0,0,193,0,0,0,0,0,22,0,0,0,0,0,126,0,194,0,38,0,0,0,0,0,0,0,14,0,198,0,122,0,88,0,100,0,125,0,214,0,0,0,202,0,0,0,91,0,66,0,0,0,84,0,122,0,220,0,0,0,75,0,108,0,18,0,230,0,133,0,196,0,199,0,112,0,105,0,202,0,0,0,32,0,250,0,84,0,0,0,122,0,220,0,12,0,215,0,0,0,77,0,0,0,141,0,70,0,166,0,135,0,207,0,41,0,172,0,214,0,0,0,38,0,106,0,166,0,163,0,142,0,116,0,17,0,58,0,0,0,205,0,41,0,21,0,0,0,2,0,0,0,131,0,93,0,144,0,9,0,0,0,56,0,89,0,239,0,98,0,65,0,42,0,0,0,51,0,5,0,0,0,30,0,0,0,68,0,189,0,245,0,138,0,126,0,128,0,22,0,219,0,127,0,98,0,215,0,198,0,237,0,0,0,77,0,252,0,87,0,216,0,96,0,143,0,64,0,252,0,81,0,240,0,122,0,61,0,0,0,96,0,190,0,4,0,0,0,134,0,0,0);
signal scenario_full  : scenario_type := (157,31,240,31,240,30,240,29,240,28,176,31,99,31,91,31,19,31,240,31,28,31,227,31,116,31,224,31,73,31,18,31,18,30,169,31,169,30,96,31,99,31,99,30,120,31,172,31,117,31,117,30,104,31,104,30,71,31,199,31,199,30,199,29,143,31,212,31,141,31,143,31,7,31,166,31,169,31,217,31,49,31,149,31,185,31,184,31,44,31,169,31,79,31,205,31,205,30,251,31,30,31,129,31,201,31,201,30,227,31,133,31,31,31,163,31,164,31,246,31,178,31,102,31,79,31,79,30,154,31,116,31,204,31,103,31,103,30,16,31,9,31,88,31,38,31,38,30,112,31,47,31,178,31,91,31,95,31,47,31,255,31,245,31,90,31,56,31,17,31,17,30,17,29,17,28,246,31,70,31,70,30,241,31,3,31,29,31,164,31,27,31,185,31,72,31,72,30,190,31,190,30,55,31,39,31,134,31,98,31,98,30,108,31,188,31,89,31,75,31,40,31,40,30,40,29,95,31,164,31,228,31,141,31,141,30,133,31,254,31,48,31,48,30,76,31,46,31,46,30,86,31,217,31,69,31,50,31,204,31,199,31,199,30,236,31,93,31,237,31,63,31,164,31,10,31,10,30,108,31,209,31,164,31,141,31,123,31,226,31,226,30,26,31,95,31,92,31,156,31,180,31,74,31,74,30,223,31,183,31,106,31,106,30,224,31,26,31,192,31,239,31,135,31,135,30,40,31,159,31,30,31,30,30,97,31,97,30,218,31,146,31,146,30,68,31,132,31,198,31,129,31,129,30,213,31,213,30,132,31,145,31,247,31,211,31,211,30,24,31,245,31,207,31,18,31,178,31,94,31,116,31,118,31,2,31,172,31,172,30,28,31,28,30,109,31,248,31,175,31,126,31,153,31,251,31,251,30,149,31,59,31,171,31,171,30,114,31,1,31,189,31,147,31,170,31,158,31,208,31,210,31,48,31,24,31,24,30,36,31,15,31,237,31,237,31,95,31,94,31,236,31,220,31,220,30,55,31,116,31,116,30,116,29,233,31,23,31,99,31,220,31,250,31,250,30,20,31,190,31,190,30,224,31,29,31,29,30,218,31,91,31,215,31,215,30,16,31,40,31,40,30,56,31,47,31,10,31,10,30,203,31,120,31,137,31,22,31,22,30,221,31,178,31,62,31,82,31,241,31,241,30,80,31,213,31,213,30,154,31,134,31,134,30,134,29,204,31,91,31,148,31,241,31,253,31,253,30,253,29,178,31,66,31,66,30,66,29,66,28,177,31,212,31,6,31,18,31,158,31,158,30,158,29,251,31,251,30,247,31,178,31,175,31,105,31,86,31,154,31,195,31,251,31,228,31,12,31,2,31,226,31,219,31,167,31,21,31,21,30,21,29,21,28,139,31,230,31,206,31,206,30,196,31,116,31,184,31,170,31,78,31,143,31,20,31,126,31,177,31,30,31,30,30,30,29,90,31,134,31,222,31,89,31,236,31,98,31,214,31,227,31,230,31,109,31,109,30,109,29,2,31,229,31,188,31,215,31,215,30,248,31,131,31,107,31,76,31,2,31,9,31,248,31,72,31,224,31,53,31,164,31,234,31,167,31,156,31,121,31,121,30,121,29,64,31,64,31,47,31,47,30,156,31,156,30,249,31,132,31,150,31,154,31,81,31,81,30,141,31,99,31,114,31,83,31,212,31,255,31,255,30,255,29,77,31,4,31,202,31,202,30,160,31,68,31,18,31,248,31,139,31,139,30,39,31,115,31,236,31,81,31,109,31,139,31,52,31,2,31,2,30,163,31,163,30,163,29,163,28,163,27,90,31,89,31,135,31,179,31,120,31,120,30,35,31,102,31,102,30,127,31,127,30,80,31,80,30,212,31,38,31,105,31,105,30,105,29,105,28,87,31,35,31,240,31,36,31,36,30,36,29,96,31,96,30,96,29,88,31,88,30,150,31,212,31,212,30,212,29,212,28,135,31,162,31,162,30,133,31,163,31,163,30,163,29,26,31,26,30,26,29,135,31,251,31,17,31,27,31,142,31,182,31,131,31,170,31,251,31,144,31,142,31,35,31,35,30,223,31,223,31,165,31,249,31,125,31,125,30,109,31,26,31,41,31,112,31,188,31,188,30,188,29,231,31,24,31,16,31,10,31,43,31,9,31,177,31,54,31,236,31,238,31,78,31,82,31,22,31,181,31,192,31,53,31,56,31,107,31,164,31,39,31,197,31,197,30,4,31,169,31,160,31,160,30,160,29,53,31,214,31,214,30,179,31,198,31,136,31,190,31,231,31,68,31,16,31,16,30,160,31,123,31,222,31,61,31,61,30,226,31,122,31,178,31,114,31,44,31,220,31,220,30,220,29,59,31,53,31,53,30,29,31,164,31,164,30,139,31,37,31,90,31,90,30,152,31,180,31,43,31,125,31,89,31,89,30,168,31,170,31,167,31,204,31,114,31,237,31,237,30,165,31,165,30,165,29,126,31,211,31,211,30,37,31,37,30,37,29,227,31,165,31,212,31,25,31,215,31,179,31,179,30,143,31,143,30,180,31,213,31,60,31,60,30,60,29,60,28,239,31,232,31,206,31,39,31,201,31,176,31,176,30,150,31,206,31,206,30,84,31,118,31,9,31,72,31,195,31,120,31,136,31,130,31,38,31,59,31,94,31,204,31,197,31,75,31,54,31,52,31,52,30,52,29,52,28,189,31,103,31,1,31,77,31,77,30,193,31,43,31,80,31,244,31,165,31,210,31,195,31,221,31,177,31,202,31,202,30,230,31,207,31,207,30,244,31,29,31,216,31,86,31,237,31,148,31,66,31,219,31,125,31,125,30,125,29,147,31,102,31,102,30,27,31,17,31,141,31,141,30,67,31,67,30,18,31,145,31,33,31,77,31,77,30,77,29,77,28,59,31,37,31,230,31,227,31,117,31,85,31,150,31,150,30,150,29,34,31,156,31,109,31,67,31,67,30,96,31,63,31,63,30,63,31,130,31,229,31,41,31,137,31,193,31,97,31,87,31,87,30,22,31,44,31,65,31,160,31,76,31,125,31,125,30,68,31,87,31,194,31,107,31,22,31,109,31,252,31,14,31,82,31,86,31,173,31,112,31,227,31,80,31,30,31,120,31,113,31,88,31,92,31,76,31,101,31,174,31,194,31,149,31,148,31,110,31,145,31,167,31,55,31,170,31,10,31,175,31,42,31,42,30,224,31,224,30,81,31,163,31,123,31,49,31,129,31,129,30,129,29,199,31,11,31,11,30,101,31,169,31,243,31,32,31,32,30,32,29,32,28,32,27,32,26,234,31,170,31,28,31,77,31,77,30,117,31,117,30,9,31,247,31,168,31,241,31,99,31,9,31,72,31,78,31,94,31,94,30,33,31,152,31,172,31,172,30,191,31,220,31,206,31,243,31,243,30,243,29,104,31,95,31,169,31,169,30,204,31,189,31,1,31,206,31,139,31,187,31,84,31,195,31,26,31,110,31,110,30,110,29,110,28,69,31,247,31,214,31,111,31,45,31,198,31,25,31,97,31,97,30,14,31,22,31,53,31,13,31,8,31,190,31,17,31,17,30,77,31,201,31,82,31,82,30,143,31,249,31,15,31,113,31,247,31,192,31,206,31,227,31,117,31,241,31,4,31,187,31,42,31,42,30,221,31,221,30,221,29,114,31,59,31,72,31,72,30,12,31,81,31,199,31,252,31,73,31,133,31,207,31,204,31,109,31,1,31,71,31,71,30,7,31,106,31,62,31,65,31,35,31,35,30,35,29,34,31,124,31,124,30,29,31,141,31,168,31,165,31,165,30,136,31,3,31,53,31,81,31,33,31,174,31,81,31,143,31,143,30,11,31,123,31,246,31,88,31,201,31,206,31,206,30,94,31,200,31,49,31,49,30,37,31,128,31,128,30,128,29,193,31,193,30,193,29,22,31,22,30,22,29,126,31,194,31,38,31,38,30,38,29,38,28,14,31,198,31,122,31,88,31,100,31,125,31,214,31,214,30,202,31,202,30,91,31,66,31,66,30,84,31,122,31,220,31,220,30,75,31,108,31,18,31,230,31,133,31,196,31,199,31,112,31,105,31,202,31,202,30,32,31,250,31,84,31,84,30,122,31,220,31,12,31,215,31,215,30,77,31,77,30,141,31,70,31,166,31,135,31,207,31,41,31,172,31,214,31,214,30,38,31,106,31,166,31,163,31,142,31,116,31,17,31,58,31,58,30,205,31,41,31,21,31,21,30,2,31,2,30,131,31,93,31,144,31,9,31,9,30,56,31,89,31,239,31,98,31,65,31,42,31,42,30,51,31,5,31,5,30,30,31,30,30,68,31,189,31,245,31,138,31,126,31,128,31,22,31,219,31,127,31,98,31,215,31,198,31,237,31,237,30,77,31,252,31,87,31,216,31,96,31,143,31,64,31,252,31,81,31,240,31,122,31,61,31,61,30,96,31,190,31,4,31,4,30,134,31,134,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
