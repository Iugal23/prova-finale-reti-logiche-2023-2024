-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 469;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (232,0,0,0,132,0,34,0,209,0,48,0,174,0,136,0,205,0,100,0,100,0,252,0,188,0,0,0,167,0,25,0,51,0,178,0,0,0,0,0,0,0,36,0,97,0,213,0,100,0,0,0,0,0,0,0,188,0,119,0,0,0,74,0,133,0,178,0,158,0,111,0,139,0,0,0,238,0,0,0,201,0,215,0,186,0,228,0,0,0,219,0,0,0,192,0,135,0,220,0,0,0,0,0,116,0,0,0,222,0,231,0,185,0,152,0,0,0,0,0,130,0,7,0,45,0,115,0,48,0,177,0,118,0,86,0,238,0,253,0,192,0,224,0,166,0,180,0,153,0,153,0,62,0,235,0,98,0,193,0,72,0,234,0,164,0,104,0,0,0,32,0,201,0,0,0,0,0,0,0,170,0,0,0,44,0,69,0,24,0,11,0,81,0,239,0,79,0,0,0,32,0,172,0,171,0,34,0,81,0,231,0,111,0,0,0,0,0,0,0,0,0,125,0,145,0,219,0,160,0,220,0,204,0,12,0,20,0,194,0,31,0,165,0,134,0,228,0,111,0,158,0,67,0,231,0,114,0,207,0,26,0,0,0,220,0,226,0,126,0,0,0,0,0,21,0,241,0,83,0,44,0,0,0,2,0,61,0,0,0,37,0,83,0,236,0,170,0,189,0,48,0,97,0,29,0,115,0,9,0,162,0,147,0,0,0,214,0,163,0,113,0,78,0,83,0,214,0,58,0,252,0,96,0,138,0,233,0,113,0,183,0,99,0,168,0,106,0,70,0,0,0,18,0,162,0,207,0,10,0,249,0,80,0,214,0,0,0,192,0,122,0,168,0,0,0,142,0,36,0,185,0,4,0,0,0,228,0,0,0,71,0,0,0,0,0,112,0,0,0,191,0,28,0,174,0,231,0,0,0,8,0,25,0,0,0,234,0,29,0,244,0,127,0,0,0,13,0,154,0,157,0,170,0,16,0,0,0,0,0,66,0,231,0,90,0,93,0,8,0,250,0,237,0,6,0,0,0,118,0,201,0,142,0,73,0,102,0,116,0,0,0,243,0,113,0,25,0,204,0,192,0,52,0,1,0,88,0,97,0,199,0,0,0,153,0,126,0,200,0,32,0,54,0,106,0,172,0,163,0,148,0,211,0,135,0,0,0,0,0,2,0,145,0,0,0,31,0,0,0,0,0,30,0,43,0,183,0,177,0,98,0,146,0,250,0,66,0,214,0,24,0,210,0,253,0,0,0,0,0,27,0,213,0,159,0,111,0,77,0,133,0,137,0,236,0,173,0,0,0,243,0,0,0,0,0,28,0,36,0,0,0,40,0,94,0,0,0,221,0,0,0,170,0,140,0,217,0,1,0,35,0,18,0,49,0,100,0,214,0,0,0,38,0,0,0,167,0,0,0,145,0,207,0,132,0,243,0,0,0,0,0,147,0,11,0,148,0,192,0,122,0,0,0,49,0,215,0,140,0,0,0,10,0,0,0,62,0,0,0,14,0,0,0,0,0,228,0,241,0,0,0,0,0,0,0,151,0,198,0,215,0,175,0,0,0,99,0,114,0,31,0,36,0,0,0,223,0,0,0,226,0,0,0,64,0,0,0,114,0,142,0,126,0,220,0,164,0,201,0,83,0,230,0,29,0,34,0,102,0,0,0,65,0,18,0,9,0,0,0,245,0,5,0,0,0,0,0,0,0,26,0,183,0,171,0,21,0,0,0,80,0,184,0,12,0,152,0,175,0,181,0,0,0,0,0,151,0,0,0,73,0,205,0,232,0,231,0,115,0,101,0,240,0,227,0,7,0,76,0,230,0,0,0,239,0,0,0,0,0,65,0,53,0,57,0,196,0,0,0,42,0,228,0,206,0,247,0,1,0,179,0,18,0,187,0,105,0,180,0,122,0,246,0,236,0,186,0,189,0,229,0,224,0,41,0,64,0,220,0,96,0,0,0,206,0,212,0,114,0,0,0,0,0,140,0,243,0,0,0,95,0,0,0,249,0,204,0,64,0,49,0,36,0,0,0,125,0,220,0,92,0,68,0,0,0,140,0,151,0,157,0,26,0,94,0,0,0,151,0,113,0,254,0,56,0,169,0);
signal scenario_full  : scenario_type := (232,31,232,30,132,31,34,31,209,31,48,31,174,31,136,31,205,31,100,31,100,31,252,31,188,31,188,30,167,31,25,31,51,31,178,31,178,30,178,29,178,28,36,31,97,31,213,31,100,31,100,30,100,29,100,28,188,31,119,31,119,30,74,31,133,31,178,31,158,31,111,31,139,31,139,30,238,31,238,30,201,31,215,31,186,31,228,31,228,30,219,31,219,30,192,31,135,31,220,31,220,30,220,29,116,31,116,30,222,31,231,31,185,31,152,31,152,30,152,29,130,31,7,31,45,31,115,31,48,31,177,31,118,31,86,31,238,31,253,31,192,31,224,31,166,31,180,31,153,31,153,31,62,31,235,31,98,31,193,31,72,31,234,31,164,31,104,31,104,30,32,31,201,31,201,30,201,29,201,28,170,31,170,30,44,31,69,31,24,31,11,31,81,31,239,31,79,31,79,30,32,31,172,31,171,31,34,31,81,31,231,31,111,31,111,30,111,29,111,28,111,27,125,31,145,31,219,31,160,31,220,31,204,31,12,31,20,31,194,31,31,31,165,31,134,31,228,31,111,31,158,31,67,31,231,31,114,31,207,31,26,31,26,30,220,31,226,31,126,31,126,30,126,29,21,31,241,31,83,31,44,31,44,30,2,31,61,31,61,30,37,31,83,31,236,31,170,31,189,31,48,31,97,31,29,31,115,31,9,31,162,31,147,31,147,30,214,31,163,31,113,31,78,31,83,31,214,31,58,31,252,31,96,31,138,31,233,31,113,31,183,31,99,31,168,31,106,31,70,31,70,30,18,31,162,31,207,31,10,31,249,31,80,31,214,31,214,30,192,31,122,31,168,31,168,30,142,31,36,31,185,31,4,31,4,30,228,31,228,30,71,31,71,30,71,29,112,31,112,30,191,31,28,31,174,31,231,31,231,30,8,31,25,31,25,30,234,31,29,31,244,31,127,31,127,30,13,31,154,31,157,31,170,31,16,31,16,30,16,29,66,31,231,31,90,31,93,31,8,31,250,31,237,31,6,31,6,30,118,31,201,31,142,31,73,31,102,31,116,31,116,30,243,31,113,31,25,31,204,31,192,31,52,31,1,31,88,31,97,31,199,31,199,30,153,31,126,31,200,31,32,31,54,31,106,31,172,31,163,31,148,31,211,31,135,31,135,30,135,29,2,31,145,31,145,30,31,31,31,30,31,29,30,31,43,31,183,31,177,31,98,31,146,31,250,31,66,31,214,31,24,31,210,31,253,31,253,30,253,29,27,31,213,31,159,31,111,31,77,31,133,31,137,31,236,31,173,31,173,30,243,31,243,30,243,29,28,31,36,31,36,30,40,31,94,31,94,30,221,31,221,30,170,31,140,31,217,31,1,31,35,31,18,31,49,31,100,31,214,31,214,30,38,31,38,30,167,31,167,30,145,31,207,31,132,31,243,31,243,30,243,29,147,31,11,31,148,31,192,31,122,31,122,30,49,31,215,31,140,31,140,30,10,31,10,30,62,31,62,30,14,31,14,30,14,29,228,31,241,31,241,30,241,29,241,28,151,31,198,31,215,31,175,31,175,30,99,31,114,31,31,31,36,31,36,30,223,31,223,30,226,31,226,30,64,31,64,30,114,31,142,31,126,31,220,31,164,31,201,31,83,31,230,31,29,31,34,31,102,31,102,30,65,31,18,31,9,31,9,30,245,31,5,31,5,30,5,29,5,28,26,31,183,31,171,31,21,31,21,30,80,31,184,31,12,31,152,31,175,31,181,31,181,30,181,29,151,31,151,30,73,31,205,31,232,31,231,31,115,31,101,31,240,31,227,31,7,31,76,31,230,31,230,30,239,31,239,30,239,29,65,31,53,31,57,31,196,31,196,30,42,31,228,31,206,31,247,31,1,31,179,31,18,31,187,31,105,31,180,31,122,31,246,31,236,31,186,31,189,31,229,31,224,31,41,31,64,31,220,31,96,31,96,30,206,31,212,31,114,31,114,30,114,29,140,31,243,31,243,30,95,31,95,30,249,31,204,31,64,31,49,31,36,31,36,30,125,31,220,31,92,31,68,31,68,30,140,31,151,31,157,31,26,31,94,31,94,30,151,31,113,31,254,31,56,31,169,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
