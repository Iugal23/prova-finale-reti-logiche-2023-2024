-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 986;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (89,0,0,0,254,0,86,0,56,0,63,0,83,0,0,0,9,0,246,0,92,0,86,0,25,0,28,0,0,0,115,0,42,0,33,0,171,0,134,0,0,0,241,0,203,0,186,0,0,0,241,0,218,0,0,0,31,0,107,0,0,0,31,0,236,0,87,0,245,0,253,0,167,0,0,0,142,0,0,0,199,0,0,0,129,0,158,0,112,0,167,0,12,0,0,0,0,0,0,0,213,0,245,0,128,0,139,0,92,0,106,0,94,0,0,0,0,0,29,0,18,0,29,0,0,0,91,0,131,0,62,0,200,0,220,0,131,0,117,0,0,0,15,0,199,0,0,0,159,0,127,0,148,0,157,0,132,0,26,0,100,0,151,0,236,0,44,0,0,0,164,0,243,0,128,0,0,0,0,0,35,0,0,0,60,0,42,0,255,0,41,0,205,0,0,0,207,0,210,0,48,0,208,0,155,0,0,0,182,0,53,0,135,0,42,0,0,0,0,0,204,0,203,0,32,0,78,0,192,0,218,0,0,0,0,0,0,0,31,0,228,0,45,0,123,0,0,0,57,0,29,0,15,0,0,0,174,0,0,0,49,0,192,0,29,0,177,0,100,0,37,0,189,0,72,0,194,0,245,0,220,0,113,0,211,0,163,0,162,0,0,0,90,0,0,0,155,0,125,0,24,0,205,0,137,0,198,0,0,0,118,0,147,0,74,0,214,0,137,0,179,0,250,0,0,0,0,0,221,0,0,0,80,0,0,0,148,0,22,0,18,0,0,0,0,0,28,0,161,0,0,0,208,0,0,0,12,0,214,0,0,0,8,0,140,0,175,0,135,0,0,0,0,0,198,0,171,0,106,0,20,0,4,0,58,0,0,0,228,0,8,0,30,0,43,0,132,0,57,0,148,0,81,0,69,0,47,0,50,0,136,0,211,0,88,0,28,0,0,0,0,0,80,0,195,0,190,0,131,0,204,0,0,0,30,0,0,0,178,0,107,0,0,0,100,0,52,0,80,0,63,0,156,0,98,0,71,0,150,0,246,0,139,0,131,0,180,0,0,0,35,0,156,0,90,0,105,0,0,0,177,0,46,0,238,0,92,0,58,0,0,0,100,0,203,0,0,0,47,0,153,0,0,0,213,0,16,0,0,0,88,0,55,0,109,0,16,0,53,0,146,0,55,0,194,0,0,0,0,0,0,0,234,0,64,0,188,0,73,0,219,0,0,0,0,0,63,0,98,0,0,0,198,0,0,0,138,0,108,0,126,0,29,0,233,0,156,0,133,0,112,0,201,0,0,0,239,0,0,0,247,0,0,0,100,0,0,0,0,0,1,0,199,0,168,0,77,0,136,0,93,0,23,0,207,0,118,0,0,0,232,0,0,0,10,0,0,0,101,0,115,0,156,0,0,0,242,0,18,0,217,0,0,0,78,0,201,0,197,0,0,0,0,0,0,0,224,0,203,0,146,0,36,0,216,0,110,0,199,0,212,0,241,0,161,0,198,0,65,0,126,0,0,0,0,0,213,0,0,0,0,0,200,0,0,0,150,0,145,0,234,0,120,0,17,0,0,0,172,0,239,0,64,0,235,0,255,0,218,0,253,0,43,0,0,0,166,0,139,0,220,0,141,0,34,0,33,0,130,0,245,0,0,0,46,0,201,0,175,0,95,0,128,0,153,0,138,0,152,0,252,0,0,0,221,0,22,0,223,0,173,0,0,0,186,0,223,0,0,0,0,0,4,0,100,0,183,0,38,0,0,0,188,0,246,0,0,0,125,0,245,0,0,0,49,0,223,0,74,0,240,0,145,0,0,0,175,0,242,0,45,0,0,0,0,0,112,0,16,0,53,0,0,0,0,0,152,0,201,0,0,0,28,0,0,0,0,0,216,0,0,0,128,0,171,0,223,0,0,0,0,0,0,0,6,0,66,0,0,0,122,0,200,0,0,0,226,0,0,0,139,0,111,0,142,0,128,0,0,0,165,0,7,0,195,0,88,0,113,0,178,0,28,0,180,0,166,0,88,0,0,0,240,0,242,0,178,0,191,0,244,0,0,0,0,0,25,0,249,0,22,0,0,0,166,0,102,0,215,0,118,0,71,0,207,0,216,0,83,0,87,0,134,0,97,0,5,0,78,0,0,0,0,0,0,0,145,0,61,0,119,0,147,0,109,0,74,0,81,0,72,0,82,0,18,0,115,0,19,0,0,0,38,0,172,0,0,0,176,0,143,0,46,0,0,0,100,0,95,0,28,0,0,0,201,0,34,0,76,0,0,0,22,0,101,0,236,0,234,0,0,0,168,0,40,0,0,0,147,0,108,0,119,0,192,0,237,0,2,0,0,0,248,0,25,0,55,0,157,0,49,0,159,0,0,0,178,0,82,0,85,0,0,0,6,0,46,0,139,0,20,0,142,0,107,0,162,0,29,0,1,0,116,0,89,0,118,0,96,0,7,0,78,0,71,0,0,0,23,0,0,0,12,0,183,0,48,0,0,0,0,0,0,0,0,0,224,0,130,0,61,0,0,0,150,0,217,0,100,0,144,0,141,0,167,0,96,0,73,0,102,0,27,0,20,0,117,0,243,0,39,0,145,0,25,0,67,0,205,0,49,0,92,0,60,0,213,0,0,0,247,0,164,0,147,0,253,0,86,0,222,0,66,0,163,0,0,0,206,0,0,0,101,0,40,0,0,0,51,0,62,0,0,0,161,0,161,0,122,0,0,0,27,0,88,0,0,0,0,0,0,0,97,0,0,0,30,0,167,0,92,0,33,0,0,0,240,0,138,0,0,0,0,0,252,0,144,0,0,0,125,0,218,0,241,0,90,0,41,0,86,0,253,0,132,0,112,0,168,0,0,0,86,0,39,0,43,0,89,0,0,0,170,0,183,0,122,0,38,0,0,0,240,0,144,0,85,0,120,0,0,0,129,0,0,0,63,0,136,0,145,0,206,0,0,0,91,0,131,0,247,0,6,0,147,0,0,0,0,0,134,0,106,0,167,0,131,0,201,0,130,0,136,0,73,0,171,0,0,0,208,0,137,0,0,0,173,0,77,0,191,0,0,0,162,0,57,0,138,0,193,0,46,0,0,0,0,0,25,0,0,0,178,0,142,0,212,0,43,0,156,0,0,0,239,0,207,0,64,0,174,0,150,0,45,0,206,0,186,0,166,0,87,0,97,0,174,0,72,0,179,0,235,0,192,0,161,0,230,0,45,0,163,0,66,0,64,0,218,0,230,0,0,0,113,0,83,0,105,0,215,0,0,0,0,0,149,0,0,0,15,0,0,0,0,0,142,0,0,0,158,0,55,0,0,0,168,0,138,0,115,0,0,0,0,0,127,0,138,0,198,0,97,0,0,0,40,0,0,0,92,0,224,0,78,0,93,0,0,0,249,0,47,0,53,0,0,0,173,0,45,0,178,0,176,0,0,0,59,0,250,0,181,0,196,0,0,0,32,0,138,0,249,0,45,0,0,0,216,0,92,0,62,0,0,0,35,0,0,0,120,0,102,0,174,0,115,0,250,0,32,0,0,0,253,0,235,0,218,0,156,0,190,0,228,0,76,0,147,0,24,0,17,0,171,0,33,0,0,0,9,0,58,0,25,0,148,0,49,0,45,0,64,0,220,0,105,0,182,0,0,0,105,0,152,0,0,0,123,0,64,0,184,0,170,0,124,0,49,0,156,0,191,0,238,0,87,0,194,0,214,0,13,0,239,0,0,0,0,0,120,0,0,0,0,0,0,0,7,0,192,0,16,0,49,0,41,0,168,0,0,0,64,0,0,0,0,0,142,0,231,0,216,0,84,0,0,0,244,0,161,0,235,0,57,0,114,0,82,0,226,0,131,0,101,0,0,0,189,0,143,0,236,0,176,0,146,0,56,0,166,0,151,0,117,0,198,0,0,0,68,0,60,0,247,0,225,0,0,0,115,0,41,0,177,0,229,0,37,0,123,0,56,0,0,0,150,0,0,0,0,0,0,0,254,0,0,0,119,0,109,0,8,0,0,0,206,0,200,0,75,0,153,0,12,0,61,0,60,0,245,0,155,0,58,0,157,0,18,0,83,0,248,0,199,0,181,0,163,0,52,0,98,0,4,0,2,0,117,0,0,0,77,0,146,0,123,0,133,0,156,0,0,0,68,0,115,0,0,0,0,0,0,0,240,0,128,0,188,0,209,0,111,0,134,0,14,0,172,0,82,0,163,0,156,0,78,0,139,0,242,0,163,0,188,0,237,0,0,0,80,0,0,0,153,0,137,0,61,0,132,0,22,0,104,0,229,0,206,0,230,0,0,0,0,0,60,0,245,0,168,0,156,0,24,0,137,0,121,0,0,0,36,0,9,0,0,0,0,0,0,0,140,0,75,0,179,0,115,0,0,0,0,0,0,0,248,0,139,0,23,0,0,0,0,0,99,0,92,0,80,0);
signal scenario_full  : scenario_type := (89,31,89,30,254,31,86,31,56,31,63,31,83,31,83,30,9,31,246,31,92,31,86,31,25,31,28,31,28,30,115,31,42,31,33,31,171,31,134,31,134,30,241,31,203,31,186,31,186,30,241,31,218,31,218,30,31,31,107,31,107,30,31,31,236,31,87,31,245,31,253,31,167,31,167,30,142,31,142,30,199,31,199,30,129,31,158,31,112,31,167,31,12,31,12,30,12,29,12,28,213,31,245,31,128,31,139,31,92,31,106,31,94,31,94,30,94,29,29,31,18,31,29,31,29,30,91,31,131,31,62,31,200,31,220,31,131,31,117,31,117,30,15,31,199,31,199,30,159,31,127,31,148,31,157,31,132,31,26,31,100,31,151,31,236,31,44,31,44,30,164,31,243,31,128,31,128,30,128,29,35,31,35,30,60,31,42,31,255,31,41,31,205,31,205,30,207,31,210,31,48,31,208,31,155,31,155,30,182,31,53,31,135,31,42,31,42,30,42,29,204,31,203,31,32,31,78,31,192,31,218,31,218,30,218,29,218,28,31,31,228,31,45,31,123,31,123,30,57,31,29,31,15,31,15,30,174,31,174,30,49,31,192,31,29,31,177,31,100,31,37,31,189,31,72,31,194,31,245,31,220,31,113,31,211,31,163,31,162,31,162,30,90,31,90,30,155,31,125,31,24,31,205,31,137,31,198,31,198,30,118,31,147,31,74,31,214,31,137,31,179,31,250,31,250,30,250,29,221,31,221,30,80,31,80,30,148,31,22,31,18,31,18,30,18,29,28,31,161,31,161,30,208,31,208,30,12,31,214,31,214,30,8,31,140,31,175,31,135,31,135,30,135,29,198,31,171,31,106,31,20,31,4,31,58,31,58,30,228,31,8,31,30,31,43,31,132,31,57,31,148,31,81,31,69,31,47,31,50,31,136,31,211,31,88,31,28,31,28,30,28,29,80,31,195,31,190,31,131,31,204,31,204,30,30,31,30,30,178,31,107,31,107,30,100,31,52,31,80,31,63,31,156,31,98,31,71,31,150,31,246,31,139,31,131,31,180,31,180,30,35,31,156,31,90,31,105,31,105,30,177,31,46,31,238,31,92,31,58,31,58,30,100,31,203,31,203,30,47,31,153,31,153,30,213,31,16,31,16,30,88,31,55,31,109,31,16,31,53,31,146,31,55,31,194,31,194,30,194,29,194,28,234,31,64,31,188,31,73,31,219,31,219,30,219,29,63,31,98,31,98,30,198,31,198,30,138,31,108,31,126,31,29,31,233,31,156,31,133,31,112,31,201,31,201,30,239,31,239,30,247,31,247,30,100,31,100,30,100,29,1,31,199,31,168,31,77,31,136,31,93,31,23,31,207,31,118,31,118,30,232,31,232,30,10,31,10,30,101,31,115,31,156,31,156,30,242,31,18,31,217,31,217,30,78,31,201,31,197,31,197,30,197,29,197,28,224,31,203,31,146,31,36,31,216,31,110,31,199,31,212,31,241,31,161,31,198,31,65,31,126,31,126,30,126,29,213,31,213,30,213,29,200,31,200,30,150,31,145,31,234,31,120,31,17,31,17,30,172,31,239,31,64,31,235,31,255,31,218,31,253,31,43,31,43,30,166,31,139,31,220,31,141,31,34,31,33,31,130,31,245,31,245,30,46,31,201,31,175,31,95,31,128,31,153,31,138,31,152,31,252,31,252,30,221,31,22,31,223,31,173,31,173,30,186,31,223,31,223,30,223,29,4,31,100,31,183,31,38,31,38,30,188,31,246,31,246,30,125,31,245,31,245,30,49,31,223,31,74,31,240,31,145,31,145,30,175,31,242,31,45,31,45,30,45,29,112,31,16,31,53,31,53,30,53,29,152,31,201,31,201,30,28,31,28,30,28,29,216,31,216,30,128,31,171,31,223,31,223,30,223,29,223,28,6,31,66,31,66,30,122,31,200,31,200,30,226,31,226,30,139,31,111,31,142,31,128,31,128,30,165,31,7,31,195,31,88,31,113,31,178,31,28,31,180,31,166,31,88,31,88,30,240,31,242,31,178,31,191,31,244,31,244,30,244,29,25,31,249,31,22,31,22,30,166,31,102,31,215,31,118,31,71,31,207,31,216,31,83,31,87,31,134,31,97,31,5,31,78,31,78,30,78,29,78,28,145,31,61,31,119,31,147,31,109,31,74,31,81,31,72,31,82,31,18,31,115,31,19,31,19,30,38,31,172,31,172,30,176,31,143,31,46,31,46,30,100,31,95,31,28,31,28,30,201,31,34,31,76,31,76,30,22,31,101,31,236,31,234,31,234,30,168,31,40,31,40,30,147,31,108,31,119,31,192,31,237,31,2,31,2,30,248,31,25,31,55,31,157,31,49,31,159,31,159,30,178,31,82,31,85,31,85,30,6,31,46,31,139,31,20,31,142,31,107,31,162,31,29,31,1,31,116,31,89,31,118,31,96,31,7,31,78,31,71,31,71,30,23,31,23,30,12,31,183,31,48,31,48,30,48,29,48,28,48,27,224,31,130,31,61,31,61,30,150,31,217,31,100,31,144,31,141,31,167,31,96,31,73,31,102,31,27,31,20,31,117,31,243,31,39,31,145,31,25,31,67,31,205,31,49,31,92,31,60,31,213,31,213,30,247,31,164,31,147,31,253,31,86,31,222,31,66,31,163,31,163,30,206,31,206,30,101,31,40,31,40,30,51,31,62,31,62,30,161,31,161,31,122,31,122,30,27,31,88,31,88,30,88,29,88,28,97,31,97,30,30,31,167,31,92,31,33,31,33,30,240,31,138,31,138,30,138,29,252,31,144,31,144,30,125,31,218,31,241,31,90,31,41,31,86,31,253,31,132,31,112,31,168,31,168,30,86,31,39,31,43,31,89,31,89,30,170,31,183,31,122,31,38,31,38,30,240,31,144,31,85,31,120,31,120,30,129,31,129,30,63,31,136,31,145,31,206,31,206,30,91,31,131,31,247,31,6,31,147,31,147,30,147,29,134,31,106,31,167,31,131,31,201,31,130,31,136,31,73,31,171,31,171,30,208,31,137,31,137,30,173,31,77,31,191,31,191,30,162,31,57,31,138,31,193,31,46,31,46,30,46,29,25,31,25,30,178,31,142,31,212,31,43,31,156,31,156,30,239,31,207,31,64,31,174,31,150,31,45,31,206,31,186,31,166,31,87,31,97,31,174,31,72,31,179,31,235,31,192,31,161,31,230,31,45,31,163,31,66,31,64,31,218,31,230,31,230,30,113,31,83,31,105,31,215,31,215,30,215,29,149,31,149,30,15,31,15,30,15,29,142,31,142,30,158,31,55,31,55,30,168,31,138,31,115,31,115,30,115,29,127,31,138,31,198,31,97,31,97,30,40,31,40,30,92,31,224,31,78,31,93,31,93,30,249,31,47,31,53,31,53,30,173,31,45,31,178,31,176,31,176,30,59,31,250,31,181,31,196,31,196,30,32,31,138,31,249,31,45,31,45,30,216,31,92,31,62,31,62,30,35,31,35,30,120,31,102,31,174,31,115,31,250,31,32,31,32,30,253,31,235,31,218,31,156,31,190,31,228,31,76,31,147,31,24,31,17,31,171,31,33,31,33,30,9,31,58,31,25,31,148,31,49,31,45,31,64,31,220,31,105,31,182,31,182,30,105,31,152,31,152,30,123,31,64,31,184,31,170,31,124,31,49,31,156,31,191,31,238,31,87,31,194,31,214,31,13,31,239,31,239,30,239,29,120,31,120,30,120,29,120,28,7,31,192,31,16,31,49,31,41,31,168,31,168,30,64,31,64,30,64,29,142,31,231,31,216,31,84,31,84,30,244,31,161,31,235,31,57,31,114,31,82,31,226,31,131,31,101,31,101,30,189,31,143,31,236,31,176,31,146,31,56,31,166,31,151,31,117,31,198,31,198,30,68,31,60,31,247,31,225,31,225,30,115,31,41,31,177,31,229,31,37,31,123,31,56,31,56,30,150,31,150,30,150,29,150,28,254,31,254,30,119,31,109,31,8,31,8,30,206,31,200,31,75,31,153,31,12,31,61,31,60,31,245,31,155,31,58,31,157,31,18,31,83,31,248,31,199,31,181,31,163,31,52,31,98,31,4,31,2,31,117,31,117,30,77,31,146,31,123,31,133,31,156,31,156,30,68,31,115,31,115,30,115,29,115,28,240,31,128,31,188,31,209,31,111,31,134,31,14,31,172,31,82,31,163,31,156,31,78,31,139,31,242,31,163,31,188,31,237,31,237,30,80,31,80,30,153,31,137,31,61,31,132,31,22,31,104,31,229,31,206,31,230,31,230,30,230,29,60,31,245,31,168,31,156,31,24,31,137,31,121,31,121,30,36,31,9,31,9,30,9,29,9,28,140,31,75,31,179,31,115,31,115,30,115,29,115,28,248,31,139,31,23,31,23,30,23,29,99,31,92,31,80,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
