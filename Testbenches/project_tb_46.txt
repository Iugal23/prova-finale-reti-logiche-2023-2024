-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 827;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (141,0,0,0,136,0,97,0,186,0,211,0,0,0,99,0,50,0,207,0,222,0,209,0,242,0,84,0,63,0,255,0,0,0,132,0,233,0,13,0,255,0,230,0,170,0,141,0,65,0,112,0,0,0,86,0,135,0,189,0,149,0,0,0,36,0,0,0,84,0,81,0,0,0,0,0,161,0,243,0,35,0,0,0,0,0,142,0,97,0,224,0,197,0,137,0,163,0,1,0,0,0,240,0,101,0,140,0,0,0,0,0,163,0,168,0,0,0,134,0,174,0,93,0,255,0,108,0,8,0,74,0,168,0,22,0,53,0,0,0,162,0,165,0,0,0,42,0,181,0,154,0,177,0,0,0,0,0,57,0,156,0,0,0,86,0,83,0,224,0,92,0,217,0,34,0,5,0,45,0,134,0,211,0,206,0,2,0,208,0,18,0,102,0,58,0,78,0,48,0,82,0,121,0,107,0,174,0,49,0,0,0,0,0,87,0,154,0,42,0,69,0,0,0,67,0,217,0,129,0,209,0,0,0,188,0,181,0,20,0,18,0,192,0,57,0,0,0,132,0,87,0,100,0,122,0,140,0,0,0,144,0,69,0,0,0,159,0,185,0,169,0,106,0,10,0,24,0,0,0,161,0,243,0,155,0,100,0,97,0,118,0,0,0,0,0,251,0,0,0,33,0,118,0,191,0,39,0,11,0,107,0,151,0,92,0,49,0,0,0,247,0,240,0,198,0,50,0,126,0,0,0,245,0,184,0,0,0,37,0,190,0,108,0,0,0,162,0,0,0,103,0,202,0,0,0,0,0,28,0,0,0,123,0,12,0,59,0,0,0,0,0,102,0,0,0,227,0,164,0,40,0,89,0,205,0,0,0,17,0,0,0,208,0,215,0,0,0,202,0,60,0,132,0,0,0,218,0,219,0,109,0,167,0,0,0,0,0,0,0,6,0,31,0,249,0,0,0,0,0,38,0,169,0,0,0,244,0,172,0,154,0,161,0,84,0,0,0,0,0,104,0,180,0,109,0,36,0,213,0,12,0,107,0,20,0,93,0,208,0,132,0,228,0,178,0,29,0,251,0,193,0,101,0,106,0,53,0,0,0,204,0,75,0,56,0,76,0,26,0,0,0,186,0,0,0,0,0,146,0,209,0,204,0,113,0,0,0,10,0,0,0,81,0,101,0,109,0,245,0,235,0,122,0,197,0,249,0,0,0,28,0,107,0,199,0,200,0,195,0,40,0,27,0,63,0,187,0,63,0,191,0,144,0,0,0,0,0,0,0,8,0,0,0,174,0,0,0,3,0,129,0,140,0,0,0,0,0,0,0,186,0,7,0,230,0,217,0,141,0,61,0,0,0,145,0,84,0,0,0,0,0,0,0,0,0,79,0,223,0,175,0,18,0,3,0,96,0,25,0,0,0,221,0,15,0,243,0,204,0,77,0,90,0,63,0,119,0,201,0,10,0,146,0,0,0,225,0,0,0,247,0,119,0,100,0,14,0,9,0,45,0,4,0,2,0,15,0,0,0,0,0,63,0,237,0,17,0,41,0,109,0,54,0,31,0,104,0,179,0,0,0,197,0,186,0,100,0,0,0,107,0,252,0,44,0,0,0,195,0,0,0,215,0,22,0,0,0,0,0,129,0,0,0,178,0,0,0,252,0,37,0,0,0,0,0,0,0,217,0,181,0,0,0,0,0,64,0,12,0,0,0,0,0,14,0,45,0,200,0,0,0,224,0,0,0,32,0,222,0,85,0,171,0,217,0,81,0,0,0,199,0,215,0,221,0,34,0,241,0,6,0,0,0,88,0,212,0,210,0,95,0,113,0,139,0,117,0,65,0,2,0,0,0,0,0,219,0,0,0,251,0,245,0,96,0,176,0,33,0,113,0,168,0,52,0,144,0,106,0,153,0,106,0,244,0,215,0,107,0,95,0,0,0,0,0,41,0,244,0,0,0,243,0,237,0,173,0,48,0,0,0,241,0,183,0,33,0,253,0,78,0,0,0,110,0,43,0,213,0,149,0,222,0,39,0,201,0,80,0,47,0,44,0,83,0,216,0,93,0,35,0,42,0,164,0,210,0,242,0,194,0,215,0,0,0,193,0,169,0,140,0,41,0,195,0,145,0,86,0,39,0,45,0,158,0,237,0,77,0,238,0,38,0,19,0,118,0,0,0,107,0,221,0,1,0,15,0,155,0,0,0,145,0,176,0,0,0,0,0,0,0,43,0,197,0,0,0,0,0,116,0,102,0,0,0,247,0,0,0,19,0,0,0,30,0,104,0,108,0,0,0,225,0,0,0,209,0,145,0,151,0,154,0,202,0,0,0,67,0,0,0,218,0,197,0,0,0,89,0,230,0,99,0,143,0,226,0,129,0,43,0,0,0,168,0,247,0,239,0,198,0,234,0,41,0,0,0,44,0,199,0,23,0,0,0,153,0,232,0,9,0,0,0,43,0,132,0,62,0,12,0,0,0,247,0,0,0,229,0,140,0,145,0,120,0,182,0,240,0,247,0,0,0,240,0,91,0,196,0,136,0,168,0,16,0,89,0,33,0,0,0,222,0,171,0,60,0,206,0,40,0,122,0,187,0,183,0,243,0,103,0,108,0,220,0,118,0,200,0,192,0,42,0,79,0,186,0,182,0,0,0,15,0,254,0,100,0,22,0,137,0,207,0,45,0,0,0,189,0,142,0,241,0,43,0,119,0,0,0,86,0,0,0,225,0,0,0,206,0,0,0,33,0,113,0,147,0,240,0,73,0,90,0,0,0,30,0,206,0,15,0,136,0,71,0,158,0,130,0,133,0,103,0,218,0,202,0,62,0,0,0,0,0,0,0,5,0,86,0,236,0,58,0,185,0,27,0,0,0,0,0,106,0,232,0,119,0,238,0,167,0,30,0,129,0,0,0,30,0,12,0,0,0,234,0,8,0,62,0,11,0,193,0,227,0,145,0,209,0,78,0,79,0,167,0,153,0,120,0,112,0,61,0,247,0,60,0,75,0,182,0,22,0,165,0,37,0,187,0,121,0,180,0,249,0,245,0,162,0,19,0,61,0,11,0,0,0,77,0,65,0,24,0,69,0,111,0,40,0,1,0,154,0,93,0,121,0,101,0,165,0,105,0,0,0,214,0,0,0,0,0,44,0,128,0,57,0,0,0,61,0,21,0,182,0,184,0,63,0,105,0,0,0,0,0,184,0,0,0,193,0,224,0,67,0,60,0,110,0,233,0,0,0,219,0,173,0,67,0,225,0,43,0,0,0,0,0,0,0,151,0,222,0,140,0,113,0,0,0,0,0,186,0,35,0,16,0,127,0,0,0,0,0,133,0,181,0,196,0,31,0,195,0,39,0,0,0,173,0,0,0,208,0,142,0,232,0,0,0,135,0,0,0,83,0,0,0,0,0,39,0,180,0,161,0,0,0,168,0,0,0,158,0,192,0,141,0,91,0,69,0,234,0,0,0,32,0,201,0,0,0,151,0,205,0,0,0,161,0,96,0,243,0,200,0,254,0,0,0,106,0,88,0,215,0,102,0,18,0,85,0,241,0,157,0,8,0,133,0,208,0,0,0,0,0,207,0,103,0,173,0,196,0,175,0,48,0,253,0,254,0,181,0,131,0,164,0,38,0,87,0,0,0,118,0,185,0,155,0,0,0,121,0,158,0,122,0,40,0,32,0,186,0,0,0,69,0,28,0,86,0,160,0);
signal scenario_full  : scenario_type := (141,31,141,30,136,31,97,31,186,31,211,31,211,30,99,31,50,31,207,31,222,31,209,31,242,31,84,31,63,31,255,31,255,30,132,31,233,31,13,31,255,31,230,31,170,31,141,31,65,31,112,31,112,30,86,31,135,31,189,31,149,31,149,30,36,31,36,30,84,31,81,31,81,30,81,29,161,31,243,31,35,31,35,30,35,29,142,31,97,31,224,31,197,31,137,31,163,31,1,31,1,30,240,31,101,31,140,31,140,30,140,29,163,31,168,31,168,30,134,31,174,31,93,31,255,31,108,31,8,31,74,31,168,31,22,31,53,31,53,30,162,31,165,31,165,30,42,31,181,31,154,31,177,31,177,30,177,29,57,31,156,31,156,30,86,31,83,31,224,31,92,31,217,31,34,31,5,31,45,31,134,31,211,31,206,31,2,31,208,31,18,31,102,31,58,31,78,31,48,31,82,31,121,31,107,31,174,31,49,31,49,30,49,29,87,31,154,31,42,31,69,31,69,30,67,31,217,31,129,31,209,31,209,30,188,31,181,31,20,31,18,31,192,31,57,31,57,30,132,31,87,31,100,31,122,31,140,31,140,30,144,31,69,31,69,30,159,31,185,31,169,31,106,31,10,31,24,31,24,30,161,31,243,31,155,31,100,31,97,31,118,31,118,30,118,29,251,31,251,30,33,31,118,31,191,31,39,31,11,31,107,31,151,31,92,31,49,31,49,30,247,31,240,31,198,31,50,31,126,31,126,30,245,31,184,31,184,30,37,31,190,31,108,31,108,30,162,31,162,30,103,31,202,31,202,30,202,29,28,31,28,30,123,31,12,31,59,31,59,30,59,29,102,31,102,30,227,31,164,31,40,31,89,31,205,31,205,30,17,31,17,30,208,31,215,31,215,30,202,31,60,31,132,31,132,30,218,31,219,31,109,31,167,31,167,30,167,29,167,28,6,31,31,31,249,31,249,30,249,29,38,31,169,31,169,30,244,31,172,31,154,31,161,31,84,31,84,30,84,29,104,31,180,31,109,31,36,31,213,31,12,31,107,31,20,31,93,31,208,31,132,31,228,31,178,31,29,31,251,31,193,31,101,31,106,31,53,31,53,30,204,31,75,31,56,31,76,31,26,31,26,30,186,31,186,30,186,29,146,31,209,31,204,31,113,31,113,30,10,31,10,30,81,31,101,31,109,31,245,31,235,31,122,31,197,31,249,31,249,30,28,31,107,31,199,31,200,31,195,31,40,31,27,31,63,31,187,31,63,31,191,31,144,31,144,30,144,29,144,28,8,31,8,30,174,31,174,30,3,31,129,31,140,31,140,30,140,29,140,28,186,31,7,31,230,31,217,31,141,31,61,31,61,30,145,31,84,31,84,30,84,29,84,28,84,27,79,31,223,31,175,31,18,31,3,31,96,31,25,31,25,30,221,31,15,31,243,31,204,31,77,31,90,31,63,31,119,31,201,31,10,31,146,31,146,30,225,31,225,30,247,31,119,31,100,31,14,31,9,31,45,31,4,31,2,31,15,31,15,30,15,29,63,31,237,31,17,31,41,31,109,31,54,31,31,31,104,31,179,31,179,30,197,31,186,31,100,31,100,30,107,31,252,31,44,31,44,30,195,31,195,30,215,31,22,31,22,30,22,29,129,31,129,30,178,31,178,30,252,31,37,31,37,30,37,29,37,28,217,31,181,31,181,30,181,29,64,31,12,31,12,30,12,29,14,31,45,31,200,31,200,30,224,31,224,30,32,31,222,31,85,31,171,31,217,31,81,31,81,30,199,31,215,31,221,31,34,31,241,31,6,31,6,30,88,31,212,31,210,31,95,31,113,31,139,31,117,31,65,31,2,31,2,30,2,29,219,31,219,30,251,31,245,31,96,31,176,31,33,31,113,31,168,31,52,31,144,31,106,31,153,31,106,31,244,31,215,31,107,31,95,31,95,30,95,29,41,31,244,31,244,30,243,31,237,31,173,31,48,31,48,30,241,31,183,31,33,31,253,31,78,31,78,30,110,31,43,31,213,31,149,31,222,31,39,31,201,31,80,31,47,31,44,31,83,31,216,31,93,31,35,31,42,31,164,31,210,31,242,31,194,31,215,31,215,30,193,31,169,31,140,31,41,31,195,31,145,31,86,31,39,31,45,31,158,31,237,31,77,31,238,31,38,31,19,31,118,31,118,30,107,31,221,31,1,31,15,31,155,31,155,30,145,31,176,31,176,30,176,29,176,28,43,31,197,31,197,30,197,29,116,31,102,31,102,30,247,31,247,30,19,31,19,30,30,31,104,31,108,31,108,30,225,31,225,30,209,31,145,31,151,31,154,31,202,31,202,30,67,31,67,30,218,31,197,31,197,30,89,31,230,31,99,31,143,31,226,31,129,31,43,31,43,30,168,31,247,31,239,31,198,31,234,31,41,31,41,30,44,31,199,31,23,31,23,30,153,31,232,31,9,31,9,30,43,31,132,31,62,31,12,31,12,30,247,31,247,30,229,31,140,31,145,31,120,31,182,31,240,31,247,31,247,30,240,31,91,31,196,31,136,31,168,31,16,31,89,31,33,31,33,30,222,31,171,31,60,31,206,31,40,31,122,31,187,31,183,31,243,31,103,31,108,31,220,31,118,31,200,31,192,31,42,31,79,31,186,31,182,31,182,30,15,31,254,31,100,31,22,31,137,31,207,31,45,31,45,30,189,31,142,31,241,31,43,31,119,31,119,30,86,31,86,30,225,31,225,30,206,31,206,30,33,31,113,31,147,31,240,31,73,31,90,31,90,30,30,31,206,31,15,31,136,31,71,31,158,31,130,31,133,31,103,31,218,31,202,31,62,31,62,30,62,29,62,28,5,31,86,31,236,31,58,31,185,31,27,31,27,30,27,29,106,31,232,31,119,31,238,31,167,31,30,31,129,31,129,30,30,31,12,31,12,30,234,31,8,31,62,31,11,31,193,31,227,31,145,31,209,31,78,31,79,31,167,31,153,31,120,31,112,31,61,31,247,31,60,31,75,31,182,31,22,31,165,31,37,31,187,31,121,31,180,31,249,31,245,31,162,31,19,31,61,31,11,31,11,30,77,31,65,31,24,31,69,31,111,31,40,31,1,31,154,31,93,31,121,31,101,31,165,31,105,31,105,30,214,31,214,30,214,29,44,31,128,31,57,31,57,30,61,31,21,31,182,31,184,31,63,31,105,31,105,30,105,29,184,31,184,30,193,31,224,31,67,31,60,31,110,31,233,31,233,30,219,31,173,31,67,31,225,31,43,31,43,30,43,29,43,28,151,31,222,31,140,31,113,31,113,30,113,29,186,31,35,31,16,31,127,31,127,30,127,29,133,31,181,31,196,31,31,31,195,31,39,31,39,30,173,31,173,30,208,31,142,31,232,31,232,30,135,31,135,30,83,31,83,30,83,29,39,31,180,31,161,31,161,30,168,31,168,30,158,31,192,31,141,31,91,31,69,31,234,31,234,30,32,31,201,31,201,30,151,31,205,31,205,30,161,31,96,31,243,31,200,31,254,31,254,30,106,31,88,31,215,31,102,31,18,31,85,31,241,31,157,31,8,31,133,31,208,31,208,30,208,29,207,31,103,31,173,31,196,31,175,31,48,31,253,31,254,31,181,31,131,31,164,31,38,31,87,31,87,30,118,31,185,31,155,31,155,30,121,31,158,31,122,31,40,31,32,31,186,31,186,30,69,31,28,31,86,31,160,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
