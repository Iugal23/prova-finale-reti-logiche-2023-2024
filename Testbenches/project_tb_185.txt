-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 960;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (40,0,9,0,0,0,8,0,38,0,48,0,130,0,0,0,119,0,28,0,179,0,0,0,129,0,0,0,43,0,0,0,72,0,0,0,164,0,0,0,20,0,198,0,124,0,46,0,8,0,181,0,131,0,188,0,247,0,240,0,93,0,0,0,118,0,187,0,0,0,213,0,24,0,0,0,0,0,219,0,176,0,138,0,8,0,2,0,116,0,145,0,0,0,155,0,180,0,2,0,83,0,0,0,0,0,223,0,0,0,175,0,86,0,0,0,109,0,0,0,88,0,0,0,46,0,243,0,61,0,206,0,142,0,198,0,85,0,191,0,185,0,181,0,19,0,203,0,244,0,222,0,0,0,128,0,237,0,242,0,0,0,204,0,170,0,216,0,233,0,199,0,135,0,182,0,0,0,35,0,87,0,34,0,252,0,122,0,237,0,83,0,194,0,135,0,24,0,10,0,233,0,0,0,0,0,238,0,63,0,82,0,199,0,150,0,145,0,241,0,33,0,145,0,36,0,56,0,47,0,156,0,173,0,0,0,22,0,177,0,230,0,160,0,105,0,71,0,103,0,75,0,0,0,43,0,2,0,234,0,245,0,96,0,0,0,11,0,3,0,137,0,66,0,0,0,0,0,223,0,235,0,251,0,125,0,48,0,90,0,19,0,205,0,178,0,67,0,107,0,75,0,103,0,67,0,242,0,100,0,17,0,195,0,245,0,140,0,233,0,138,0,11,0,244,0,103,0,54,0,19,0,104,0,0,0,182,0,0,0,158,0,0,0,212,0,0,0,139,0,253,0,76,0,169,0,123,0,169,0,0,0,57,0,164,0,0,0,231,0,179,0,77,0,231,0,254,0,0,0,241,0,13,0,5,0,169,0,120,0,29,0,133,0,151,0,52,0,155,0,197,0,140,0,150,0,0,0,79,0,104,0,208,0,71,0,155,0,99,0,156,0,215,0,229,0,0,0,219,0,251,0,75,0,160,0,181,0,0,0,0,0,153,0,93,0,181,0,0,0,119,0,204,0,12,0,0,0,5,0,59,0,0,0,166,0,0,0,0,0,161,0,168,0,206,0,0,0,37,0,134,0,182,0,70,0,0,0,73,0,0,0,157,0,0,0,192,0,40,0,218,0,54,0,95,0,35,0,212,0,174,0,133,0,0,0,185,0,87,0,133,0,175,0,204,0,88,0,113,0,113,0,0,0,154,0,17,0,191,0,163,0,0,0,27,0,160,0,0,0,0,0,34,0,152,0,0,0,158,0,136,0,53,0,63,0,97,0,0,0,75,0,207,0,0,0,64,0,20,0,145,0,55,0,0,0,95,0,118,0,0,0,137,0,36,0,131,0,237,0,49,0,255,0,56,0,72,0,6,0,53,0,62,0,0,0,139,0,78,0,43,0,157,0,65,0,157,0,198,0,110,0,223,0,124,0,0,0,137,0,71,0,141,0,80,0,74,0,224,0,87,0,52,0,212,0,184,0,246,0,218,0,210,0,14,0,229,0,28,0,0,0,32,0,123,0,0,0,51,0,52,0,136,0,28,0,15,0,0,0,239,0,187,0,10,0,163,0,113,0,0,0,0,0,181,0,79,0,0,0,177,0,154,0,240,0,154,0,212,0,168,0,156,0,70,0,98,0,167,0,166,0,76,0,250,0,252,0,3,0,196,0,175,0,4,0,0,0,116,0,10,0,49,0,220,0,255,0,0,0,215,0,29,0,0,0,107,0,119,0,104,0,196,0,183,0,0,0,14,0,157,0,253,0,0,0,0,0,84,0,27,0,171,0,242,0,10,0,41,0,28,0,233,0,155,0,235,0,0,0,0,0,102,0,174,0,0,0,217,0,169,0,0,0,0,0,254,0,87,0,180,0,0,0,171,0,0,0,102,0,97,0,252,0,227,0,216,0,137,0,126,0,24,0,65,0,110,0,131,0,101,0,73,0,0,0,0,0,47,0,188,0,0,0,76,0,0,0,113,0,73,0,7,0,0,0,112,0,212,0,118,0,53,0,0,0,176,0,0,0,58,0,53,0,211,0,0,0,0,0,164,0,3,0,0,0,111,0,246,0,115,0,0,0,201,0,248,0,0,0,216,0,134,0,108,0,213,0,235,0,158,0,0,0,43,0,0,0,111,0,0,0,79,0,54,0,121,0,216,0,238,0,110,0,173,0,32,0,53,0,190,0,199,0,0,0,0,0,171,0,204,0,229,0,83,0,13,0,111,0,0,0,193,0,0,0,65,0,74,0,46,0,78,0,174,0,60,0,0,0,92,0,31,0,116,0,0,0,141,0,119,0,96,0,0,0,195,0,105,0,196,0,0,0,0,0,130,0,137,0,16,0,123,0,0,0,41,0,235,0,99,0,37,0,253,0,54,0,239,0,0,0,29,0,69,0,194,0,159,0,0,0,116,0,2,0,190,0,170,0,240,0,126,0,20,0,184,0,0,0,27,0,0,0,0,0,0,0,48,0,149,0,0,0,155,0,176,0,0,0,135,0,165,0,26,0,0,0,0,0,4,0,232,0,58,0,0,0,103,0,63,0,0,0,69,0,81,0,58,0,11,0,208,0,156,0,36,0,0,0,9,0,153,0,26,0,50,0,170,0,158,0,114,0,148,0,87,0,187,0,222,0,0,0,64,0,9,0,44,0,105,0,152,0,81,0,0,0,224,0,143,0,225,0,238,0,109,0,25,0,26,0,179,0,0,0,0,0,26,0,124,0,69,0,70,0,143,0,52,0,0,0,34,0,163,0,250,0,0,0,255,0,0,0,0,0,255,0,130,0,0,0,0,0,143,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,0,0,18,0,242,0,231,0,154,0,164,0,246,0,33,0,74,0,157,0,150,0,135,0,181,0,131,0,167,0,180,0,31,0,101,0,0,0,12,0,59,0,0,0,254,0,124,0,228,0,182,0,54,0,226,0,27,0,77,0,143,0,0,0,52,0,244,0,185,0,204,0,255,0,189,0,83,0,87,0,160,0,1,0,11,0,243,0,147,0,96,0,0,0,166,0,12,0,214,0,118,0,0,0,49,0,0,0,54,0,212,0,157,0,85,0,150,0,83,0,165,0,0,0,221,0,0,0,164,0,247,0,0,0,248,0,0,0,169,0,9,0,240,0,247,0,89,0,165,0,0,0,0,0,0,0,199,0,77,0,170,0,33,0,30,0,87,0,41,0,230,0,18,0,0,0,53,0,191,0,0,0,77,0,210,0,114,0,8,0,0,0,187,0,0,0,227,0,0,0,0,0,168,0,0,0,0,0,31,0,29,0,243,0,26,0,29,0,0,0,188,0,165,0,0,0,0,0,36,0,222,0,158,0,124,0,0,0,143,0,170,0,165,0,156,0,107,0,16,0,170,0,0,0,161,0,0,0,0,0,0,0,95,0,101,0,75,0,0,0,94,0,51,0,201,0,212,0,43,0,9,0,127,0,166,0,0,0,164,0,0,0,215,0,240,0,139,0,74,0,197,0,251,0,64,0,239,0,95,0,190,0,0,0,146,0,254,0,155,0,0,0,192,0,222,0,109,0,197,0,0,0,150,0,158,0,186,0,53,0,111,0,4,0,220,0,144,0,240,0,0,0,173,0,249,0,16,0,93,0,50,0,59,0,183,0,95,0,215,0,191,0,100,0,230,0,11,0,191,0,0,0,59,0,0,0,113,0,72,0,242,0,238,0,0,0,0,0,171,0,123,0,12,0,0,0,108,0,69,0,0,0,0,0,159,0,174,0,0,0,48,0,0,0,15,0,174,0,190,0,169,0,235,0,201,0,193,0,210,0,28,0,182,0,188,0,0,0,250,0,49,0,238,0,104,0,248,0,184,0,204,0,233,0,143,0,0,0,234,0,18,0,0,0,0,0,78,0,249,0,35,0,56,0,101,0,15,0,140,0,133,0,179,0,7,0,148,0,0,0,6,0,96,0,246,0,0,0,157,0,0,0,38,0,0,0,0,0,202,0,241,0,171,0,0,0,0,0,106,0,231,0,79,0,1,0,118,0,243,0,107,0,97,0,60,0,231,0,0,0,0,0,182,0,187,0,184,0,250,0,132,0,140,0,218,0,185,0,93,0,50,0,112,0,180,0,95,0,110,0,129,0,197,0,197,0,183,0,205,0,247,0,51,0,37,0,0,0,209,0,162,0,58,0,0,0,97,0,232,0,231,0,170,0,226,0,0,0,125,0,148,0,91,0,8,0,247,0,112,0,110,0,103,0,179,0,187,0,73,0,18,0,65,0,0,0,15,0,226,0,21,0,0,0,25,0,101,0,0,0);
signal scenario_full  : scenario_type := (40,31,9,31,9,30,8,31,38,31,48,31,130,31,130,30,119,31,28,31,179,31,179,30,129,31,129,30,43,31,43,30,72,31,72,30,164,31,164,30,20,31,198,31,124,31,46,31,8,31,181,31,131,31,188,31,247,31,240,31,93,31,93,30,118,31,187,31,187,30,213,31,24,31,24,30,24,29,219,31,176,31,138,31,8,31,2,31,116,31,145,31,145,30,155,31,180,31,2,31,83,31,83,30,83,29,223,31,223,30,175,31,86,31,86,30,109,31,109,30,88,31,88,30,46,31,243,31,61,31,206,31,142,31,198,31,85,31,191,31,185,31,181,31,19,31,203,31,244,31,222,31,222,30,128,31,237,31,242,31,242,30,204,31,170,31,216,31,233,31,199,31,135,31,182,31,182,30,35,31,87,31,34,31,252,31,122,31,237,31,83,31,194,31,135,31,24,31,10,31,233,31,233,30,233,29,238,31,63,31,82,31,199,31,150,31,145,31,241,31,33,31,145,31,36,31,56,31,47,31,156,31,173,31,173,30,22,31,177,31,230,31,160,31,105,31,71,31,103,31,75,31,75,30,43,31,2,31,234,31,245,31,96,31,96,30,11,31,3,31,137,31,66,31,66,30,66,29,223,31,235,31,251,31,125,31,48,31,90,31,19,31,205,31,178,31,67,31,107,31,75,31,103,31,67,31,242,31,100,31,17,31,195,31,245,31,140,31,233,31,138,31,11,31,244,31,103,31,54,31,19,31,104,31,104,30,182,31,182,30,158,31,158,30,212,31,212,30,139,31,253,31,76,31,169,31,123,31,169,31,169,30,57,31,164,31,164,30,231,31,179,31,77,31,231,31,254,31,254,30,241,31,13,31,5,31,169,31,120,31,29,31,133,31,151,31,52,31,155,31,197,31,140,31,150,31,150,30,79,31,104,31,208,31,71,31,155,31,99,31,156,31,215,31,229,31,229,30,219,31,251,31,75,31,160,31,181,31,181,30,181,29,153,31,93,31,181,31,181,30,119,31,204,31,12,31,12,30,5,31,59,31,59,30,166,31,166,30,166,29,161,31,168,31,206,31,206,30,37,31,134,31,182,31,70,31,70,30,73,31,73,30,157,31,157,30,192,31,40,31,218,31,54,31,95,31,35,31,212,31,174,31,133,31,133,30,185,31,87,31,133,31,175,31,204,31,88,31,113,31,113,31,113,30,154,31,17,31,191,31,163,31,163,30,27,31,160,31,160,30,160,29,34,31,152,31,152,30,158,31,136,31,53,31,63,31,97,31,97,30,75,31,207,31,207,30,64,31,20,31,145,31,55,31,55,30,95,31,118,31,118,30,137,31,36,31,131,31,237,31,49,31,255,31,56,31,72,31,6,31,53,31,62,31,62,30,139,31,78,31,43,31,157,31,65,31,157,31,198,31,110,31,223,31,124,31,124,30,137,31,71,31,141,31,80,31,74,31,224,31,87,31,52,31,212,31,184,31,246,31,218,31,210,31,14,31,229,31,28,31,28,30,32,31,123,31,123,30,51,31,52,31,136,31,28,31,15,31,15,30,239,31,187,31,10,31,163,31,113,31,113,30,113,29,181,31,79,31,79,30,177,31,154,31,240,31,154,31,212,31,168,31,156,31,70,31,98,31,167,31,166,31,76,31,250,31,252,31,3,31,196,31,175,31,4,31,4,30,116,31,10,31,49,31,220,31,255,31,255,30,215,31,29,31,29,30,107,31,119,31,104,31,196,31,183,31,183,30,14,31,157,31,253,31,253,30,253,29,84,31,27,31,171,31,242,31,10,31,41,31,28,31,233,31,155,31,235,31,235,30,235,29,102,31,174,31,174,30,217,31,169,31,169,30,169,29,254,31,87,31,180,31,180,30,171,31,171,30,102,31,97,31,252,31,227,31,216,31,137,31,126,31,24,31,65,31,110,31,131,31,101,31,73,31,73,30,73,29,47,31,188,31,188,30,76,31,76,30,113,31,73,31,7,31,7,30,112,31,212,31,118,31,53,31,53,30,176,31,176,30,58,31,53,31,211,31,211,30,211,29,164,31,3,31,3,30,111,31,246,31,115,31,115,30,201,31,248,31,248,30,216,31,134,31,108,31,213,31,235,31,158,31,158,30,43,31,43,30,111,31,111,30,79,31,54,31,121,31,216,31,238,31,110,31,173,31,32,31,53,31,190,31,199,31,199,30,199,29,171,31,204,31,229,31,83,31,13,31,111,31,111,30,193,31,193,30,65,31,74,31,46,31,78,31,174,31,60,31,60,30,92,31,31,31,116,31,116,30,141,31,119,31,96,31,96,30,195,31,105,31,196,31,196,30,196,29,130,31,137,31,16,31,123,31,123,30,41,31,235,31,99,31,37,31,253,31,54,31,239,31,239,30,29,31,69,31,194,31,159,31,159,30,116,31,2,31,190,31,170,31,240,31,126,31,20,31,184,31,184,30,27,31,27,30,27,29,27,28,48,31,149,31,149,30,155,31,176,31,176,30,135,31,165,31,26,31,26,30,26,29,4,31,232,31,58,31,58,30,103,31,63,31,63,30,69,31,81,31,58,31,11,31,208,31,156,31,36,31,36,30,9,31,153,31,26,31,50,31,170,31,158,31,114,31,148,31,87,31,187,31,222,31,222,30,64,31,9,31,44,31,105,31,152,31,81,31,81,30,224,31,143,31,225,31,238,31,109,31,25,31,26,31,179,31,179,30,179,29,26,31,124,31,69,31,70,31,143,31,52,31,52,30,34,31,163,31,250,31,250,30,255,31,255,30,255,29,255,31,130,31,130,30,130,29,143,31,143,30,143,29,143,28,143,27,143,26,56,31,56,30,56,29,18,31,242,31,231,31,154,31,164,31,246,31,33,31,74,31,157,31,150,31,135,31,181,31,131,31,167,31,180,31,31,31,101,31,101,30,12,31,59,31,59,30,254,31,124,31,228,31,182,31,54,31,226,31,27,31,77,31,143,31,143,30,52,31,244,31,185,31,204,31,255,31,189,31,83,31,87,31,160,31,1,31,11,31,243,31,147,31,96,31,96,30,166,31,12,31,214,31,118,31,118,30,49,31,49,30,54,31,212,31,157,31,85,31,150,31,83,31,165,31,165,30,221,31,221,30,164,31,247,31,247,30,248,31,248,30,169,31,9,31,240,31,247,31,89,31,165,31,165,30,165,29,165,28,199,31,77,31,170,31,33,31,30,31,87,31,41,31,230,31,18,31,18,30,53,31,191,31,191,30,77,31,210,31,114,31,8,31,8,30,187,31,187,30,227,31,227,30,227,29,168,31,168,30,168,29,31,31,29,31,243,31,26,31,29,31,29,30,188,31,165,31,165,30,165,29,36,31,222,31,158,31,124,31,124,30,143,31,170,31,165,31,156,31,107,31,16,31,170,31,170,30,161,31,161,30,161,29,161,28,95,31,101,31,75,31,75,30,94,31,51,31,201,31,212,31,43,31,9,31,127,31,166,31,166,30,164,31,164,30,215,31,240,31,139,31,74,31,197,31,251,31,64,31,239,31,95,31,190,31,190,30,146,31,254,31,155,31,155,30,192,31,222,31,109,31,197,31,197,30,150,31,158,31,186,31,53,31,111,31,4,31,220,31,144,31,240,31,240,30,173,31,249,31,16,31,93,31,50,31,59,31,183,31,95,31,215,31,191,31,100,31,230,31,11,31,191,31,191,30,59,31,59,30,113,31,72,31,242,31,238,31,238,30,238,29,171,31,123,31,12,31,12,30,108,31,69,31,69,30,69,29,159,31,174,31,174,30,48,31,48,30,15,31,174,31,190,31,169,31,235,31,201,31,193,31,210,31,28,31,182,31,188,31,188,30,250,31,49,31,238,31,104,31,248,31,184,31,204,31,233,31,143,31,143,30,234,31,18,31,18,30,18,29,78,31,249,31,35,31,56,31,101,31,15,31,140,31,133,31,179,31,7,31,148,31,148,30,6,31,96,31,246,31,246,30,157,31,157,30,38,31,38,30,38,29,202,31,241,31,171,31,171,30,171,29,106,31,231,31,79,31,1,31,118,31,243,31,107,31,97,31,60,31,231,31,231,30,231,29,182,31,187,31,184,31,250,31,132,31,140,31,218,31,185,31,93,31,50,31,112,31,180,31,95,31,110,31,129,31,197,31,197,31,183,31,205,31,247,31,51,31,37,31,37,30,209,31,162,31,58,31,58,30,97,31,232,31,231,31,170,31,226,31,226,30,125,31,148,31,91,31,8,31,247,31,112,31,110,31,103,31,179,31,187,31,73,31,18,31,65,31,65,30,15,31,226,31,21,31,21,30,25,31,101,31,101,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
