-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 494;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (69,0,0,0,21,0,0,0,0,0,0,0,196,0,0,0,162,0,0,0,237,0,220,0,118,0,0,0,137,0,91,0,98,0,0,0,0,0,142,0,216,0,97,0,213,0,114,0,168,0,5,0,6,0,0,0,0,0,201,0,65,0,40,0,229,0,191,0,117,0,247,0,123,0,66,0,135,0,162,0,119,0,0,0,2,0,25,0,34,0,0,0,31,0,187,0,112,0,0,0,11,0,66,0,203,0,6,0,115,0,87,0,29,0,24,0,183,0,92,0,0,0,200,0,202,0,204,0,24,0,56,0,178,0,0,0,158,0,174,0,221,0,117,0,237,0,0,0,185,0,125,0,142,0,0,0,162,0,217,0,252,0,160,0,133,0,180,0,222,0,95,0,129,0,249,0,140,0,123,0,123,0,34,0,6,0,193,0,188,0,79,0,65,0,151,0,108,0,0,0,0,0,0,0,162,0,0,0,217,0,232,0,193,0,137,0,76,0,101,0,0,0,203,0,18,0,253,0,113,0,0,0,240,0,195,0,0,0,220,0,117,0,244,0,0,0,54,0,0,0,154,0,245,0,0,0,245,0,205,0,0,0,0,0,3,0,0,0,0,0,140,0,83,0,41,0,104,0,0,0,229,0,0,0,152,0,0,0,133,0,159,0,0,0,114,0,47,0,196,0,155,0,82,0,63,0,237,0,201,0,252,0,236,0,117,0,252,0,0,0,79,0,49,0,216,0,0,0,0,0,183,0,90,0,208,0,0,0,137,0,107,0,206,0,182,0,84,0,51,0,11,0,208,0,104,0,40,0,242,0,129,0,99,0,39,0,180,0,0,0,201,0,249,0,144,0,104,0,180,0,210,0,239,0,67,0,0,0,88,0,75,0,137,0,165,0,146,0,78,0,0,0,252,0,68,0,88,0,225,0,11,0,201,0,0,0,93,0,199,0,97,0,65,0,163,0,54,0,0,0,0,0,17,0,0,0,224,0,106,0,122,0,150,0,217,0,0,0,0,0,0,0,0,0,131,0,201,0,100,0,22,0,172,0,58,0,173,0,97,0,0,0,129,0,114,0,173,0,246,0,25,0,53,0,77,0,223,0,146,0,108,0,65,0,0,0,17,0,154,0,184,0,10,0,0,0,0,0,19,0,120,0,0,0,20,0,58,0,31,0,50,0,121,0,0,0,199,0,200,0,150,0,0,0,0,0,4,0,238,0,75,0,27,0,111,0,15,0,240,0,138,0,93,0,156,0,0,0,154,0,49,0,206,0,126,0,41,0,217,0,88,0,152,0,230,0,88,0,237,0,73,0,230,0,0,0,0,0,8,0,50,0,0,0,0,0,201,0,181,0,16,0,54,0,226,0,186,0,13,0,100,0,228,0,203,0,139,0,0,0,173,0,220,0,0,0,74,0,238,0,72,0,252,0,19,0,50,0,150,0,50,0,131,0,231,0,81,0,92,0,0,0,83,0,8,0,237,0,0,0,194,0,0,0,200,0,64,0,20,0,0,0,119,0,37,0,82,0,239,0,225,0,0,0,109,0,173,0,85,0,93,0,24,0,9,0,0,0,69,0,155,0,79,0,183,0,247,0,158,0,66,0,76,0,234,0,253,0,190,0,243,0,245,0,227,0,153,0,208,0,136,0,152,0,236,0,21,0,235,0,228,0,198,0,220,0,0,0,200,0,0,0,90,0,49,0,198,0,76,0,0,0,245,0,81,0,193,0,54,0,0,0,194,0,58,0,0,0,125,0,31,0,0,0,176,0,194,0,177,0,83,0,125,0,218,0,48,0,0,0,106,0,9,0,0,0,149,0,126,0,108,0,0,0,169,0,0,0,47,0,0,0,165,0,0,0,154,0,251,0,20,0,58,0,0,0,55,0,229,0,249,0,168,0,61,0,154,0,17,0,196,0,0,0,71,0,118,0,6,0,0,0,74,0,82,0,83,0,14,0,188,0,76,0,68,0,86,0,146,0,56,0,241,0,8,0,78,0,5,0,157,0,127,0,181,0,0,0,104,0,0,0,81,0,0,0,0,0,0,0,130,0,250,0,226,0,28,0,174,0,0,0,232,0,252,0,0,0,0,0,0,0,222,0,126,0,136,0,240,0,0,0,76,0,204,0,171,0,0,0,159,0,0,0,95,0,227,0,207,0,0,0,94,0,0,0,0,0,107,0,65,0,0,0,0,0,52,0,18,0,143,0,186,0,73,0,0,0);
signal scenario_full  : scenario_type := (69,31,69,30,21,31,21,30,21,29,21,28,196,31,196,30,162,31,162,30,237,31,220,31,118,31,118,30,137,31,91,31,98,31,98,30,98,29,142,31,216,31,97,31,213,31,114,31,168,31,5,31,6,31,6,30,6,29,201,31,65,31,40,31,229,31,191,31,117,31,247,31,123,31,66,31,135,31,162,31,119,31,119,30,2,31,25,31,34,31,34,30,31,31,187,31,112,31,112,30,11,31,66,31,203,31,6,31,115,31,87,31,29,31,24,31,183,31,92,31,92,30,200,31,202,31,204,31,24,31,56,31,178,31,178,30,158,31,174,31,221,31,117,31,237,31,237,30,185,31,125,31,142,31,142,30,162,31,217,31,252,31,160,31,133,31,180,31,222,31,95,31,129,31,249,31,140,31,123,31,123,31,34,31,6,31,193,31,188,31,79,31,65,31,151,31,108,31,108,30,108,29,108,28,162,31,162,30,217,31,232,31,193,31,137,31,76,31,101,31,101,30,203,31,18,31,253,31,113,31,113,30,240,31,195,31,195,30,220,31,117,31,244,31,244,30,54,31,54,30,154,31,245,31,245,30,245,31,205,31,205,30,205,29,3,31,3,30,3,29,140,31,83,31,41,31,104,31,104,30,229,31,229,30,152,31,152,30,133,31,159,31,159,30,114,31,47,31,196,31,155,31,82,31,63,31,237,31,201,31,252,31,236,31,117,31,252,31,252,30,79,31,49,31,216,31,216,30,216,29,183,31,90,31,208,31,208,30,137,31,107,31,206,31,182,31,84,31,51,31,11,31,208,31,104,31,40,31,242,31,129,31,99,31,39,31,180,31,180,30,201,31,249,31,144,31,104,31,180,31,210,31,239,31,67,31,67,30,88,31,75,31,137,31,165,31,146,31,78,31,78,30,252,31,68,31,88,31,225,31,11,31,201,31,201,30,93,31,199,31,97,31,65,31,163,31,54,31,54,30,54,29,17,31,17,30,224,31,106,31,122,31,150,31,217,31,217,30,217,29,217,28,217,27,131,31,201,31,100,31,22,31,172,31,58,31,173,31,97,31,97,30,129,31,114,31,173,31,246,31,25,31,53,31,77,31,223,31,146,31,108,31,65,31,65,30,17,31,154,31,184,31,10,31,10,30,10,29,19,31,120,31,120,30,20,31,58,31,31,31,50,31,121,31,121,30,199,31,200,31,150,31,150,30,150,29,4,31,238,31,75,31,27,31,111,31,15,31,240,31,138,31,93,31,156,31,156,30,154,31,49,31,206,31,126,31,41,31,217,31,88,31,152,31,230,31,88,31,237,31,73,31,230,31,230,30,230,29,8,31,50,31,50,30,50,29,201,31,181,31,16,31,54,31,226,31,186,31,13,31,100,31,228,31,203,31,139,31,139,30,173,31,220,31,220,30,74,31,238,31,72,31,252,31,19,31,50,31,150,31,50,31,131,31,231,31,81,31,92,31,92,30,83,31,8,31,237,31,237,30,194,31,194,30,200,31,64,31,20,31,20,30,119,31,37,31,82,31,239,31,225,31,225,30,109,31,173,31,85,31,93,31,24,31,9,31,9,30,69,31,155,31,79,31,183,31,247,31,158,31,66,31,76,31,234,31,253,31,190,31,243,31,245,31,227,31,153,31,208,31,136,31,152,31,236,31,21,31,235,31,228,31,198,31,220,31,220,30,200,31,200,30,90,31,49,31,198,31,76,31,76,30,245,31,81,31,193,31,54,31,54,30,194,31,58,31,58,30,125,31,31,31,31,30,176,31,194,31,177,31,83,31,125,31,218,31,48,31,48,30,106,31,9,31,9,30,149,31,126,31,108,31,108,30,169,31,169,30,47,31,47,30,165,31,165,30,154,31,251,31,20,31,58,31,58,30,55,31,229,31,249,31,168,31,61,31,154,31,17,31,196,31,196,30,71,31,118,31,6,31,6,30,74,31,82,31,83,31,14,31,188,31,76,31,68,31,86,31,146,31,56,31,241,31,8,31,78,31,5,31,157,31,127,31,181,31,181,30,104,31,104,30,81,31,81,30,81,29,81,28,130,31,250,31,226,31,28,31,174,31,174,30,232,31,252,31,252,30,252,29,252,28,222,31,126,31,136,31,240,31,240,30,76,31,204,31,171,31,171,30,159,31,159,30,95,31,227,31,207,31,207,30,94,31,94,30,94,29,107,31,65,31,65,30,65,29,52,31,18,31,143,31,186,31,73,31,73,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
