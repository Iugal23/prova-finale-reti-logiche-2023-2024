-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 855;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (191,0,80,0,153,0,0,0,220,0,192,0,0,0,28,0,235,0,232,0,0,0,54,0,90,0,235,0,235,0,102,0,0,0,85,0,0,0,137,0,230,0,239,0,22,0,130,0,209,0,176,0,98,0,177,0,61,0,239,0,44,0,118,0,28,0,0,0,199,0,144,0,214,0,149,0,219,0,34,0,122,0,65,0,118,0,189,0,98,0,142,0,202,0,77,0,26,0,129,0,84,0,236,0,216,0,5,0,0,0,7,0,28,0,43,0,0,0,252,0,245,0,248,0,20,0,177,0,0,0,219,0,255,0,0,0,0,0,233,0,46,0,245,0,0,0,55,0,154,0,235,0,0,0,0,0,100,0,115,0,211,0,212,0,172,0,151,0,245,0,58,0,26,0,0,0,199,0,55,0,141,0,225,0,132,0,101,0,162,0,131,0,189,0,156,0,93,0,92,0,56,0,146,0,68,0,62,0,203,0,138,0,144,0,19,0,43,0,244,0,109,0,113,0,30,0,0,0,226,0,66,0,186,0,133,0,0,0,24,0,26,0,12,0,180,0,211,0,0,0,171,0,138,0,230,0,227,0,170,0,0,0,175,0,69,0,0,0,225,0,0,0,74,0,91,0,82,0,243,0,211,0,169,0,83,0,0,0,0,0,57,0,103,0,107,0,211,0,38,0,0,0,40,0,96,0,172,0,142,0,0,0,249,0,251,0,92,0,213,0,191,0,17,0,176,0,43,0,101,0,242,0,179,0,27,0,0,0,24,0,214,0,0,0,6,0,0,0,0,0,54,0,129,0,237,0,255,0,0,0,164,0,133,0,89,0,213,0,239,0,250,0,41,0,26,0,185,0,49,0,97,0,250,0,193,0,0,0,27,0,63,0,245,0,104,0,98,0,182,0,26,0,124,0,207,0,204,0,217,0,124,0,0,0,0,0,99,0,81,0,0,0,79,0,16,0,206,0,0,0,209,0,3,0,185,0,173,0,76,0,26,0,250,0,253,0,5,0,74,0,37,0,113,0,0,0,243,0,187,0,0,0,99,0,7,0,188,0,104,0,0,0,203,0,0,0,122,0,209,0,67,0,237,0,238,0,184,0,201,0,27,0,227,0,254,0,0,0,45,0,0,0,0,0,50,0,0,0,223,0,210,0,249,0,252,0,85,0,0,0,109,0,85,0,45,0,0,0,94,0,242,0,0,0,38,0,12,0,0,0,74,0,147,0,143,0,24,0,98,0,201,0,110,0,52,0,0,0,68,0,95,0,238,0,0,0,218,0,88,0,0,0,78,0,98,0,134,0,57,0,154,0,122,0,176,0,176,0,67,0,184,0,212,0,0,0,81,0,0,0,0,0,47,0,92,0,127,0,70,0,0,0,0,0,33,0,126,0,130,0,85,0,0,0,149,0,0,0,247,0,128,0,245,0,216,0,252,0,229,0,0,0,241,0,0,0,85,0,40,0,249,0,106,0,0,0,109,0,0,0,37,0,203,0,182,0,204,0,204,0,238,0,14,0,49,0,0,0,0,0,173,0,69,0,0,0,185,0,0,0,0,0,13,0,70,0,65,0,252,0,116,0,0,0,0,0,63,0,204,0,61,0,70,0,0,0,154,0,33,0,69,0,0,0,236,0,217,0,96,0,6,0,229,0,0,0,187,0,0,0,63,0,0,0,0,0,209,0,0,0,140,0,91,0,190,0,171,0,121,0,54,0,102,0,0,0,230,0,133,0,93,0,77,0,215,0,124,0,60,0,222,0,73,0,47,0,138,0,235,0,0,0,224,0,47,0,0,0,0,0,204,0,151,0,32,0,174,0,55,0,135,0,159,0,136,0,39,0,9,0,120,0,0,0,0,0,0,0,0,0,56,0,112,0,244,0,0,0,31,0,0,0,44,0,44,0,251,0,0,0,0,0,154,0,228,0,109,0,41,0,173,0,153,0,0,0,171,0,185,0,74,0,0,0,87,0,154,0,0,0,135,0,93,0,218,0,232,0,189,0,162,0,85,0,202,0,9,0,140,0,12,0,187,0,250,0,0,0,68,0,99,0,0,0,75,0,178,0,0,0,115,0,0,0,203,0,0,0,170,0,51,0,42,0,172,0,0,0,176,0,228,0,244,0,211,0,150,0,161,0,0,0,56,0,0,0,83,0,234,0,88,0,39,0,211,0,197,0,20,0,81,0,98,0,86,0,198,0,0,0,53,0,0,0,0,0,58,0,74,0,87,0,139,0,173,0,179,0,0,0,0,0,76,0,248,0,245,0,64,0,158,0,142,0,25,0,0,0,238,0,28,0,0,0,0,0,207,0,0,0,0,0,35,0,36,0,75,0,138,0,15,0,121,0,11,0,0,0,0,0,65,0,85,0,45,0,0,0,110,0,117,0,83,0,248,0,46,0,197,0,85,0,173,0,19,0,57,0,107,0,59,0,0,0,229,0,13,0,250,0,37,0,76,0,130,0,0,0,233,0,7,0,0,0,34,0,170,0,255,0,207,0,146,0,181,0,1,0,102,0,164,0,0,0,193,0,49,0,216,0,246,0,208,0,187,0,115,0,0,0,243,0,96,0,133,0,0,0,48,0,34,0,87,0,235,0,51,0,88,0,178,0,249,0,0,0,181,0,69,0,138,0,85,0,0,0,0,0,0,0,0,0,72,0,0,0,56,0,0,0,189,0,0,0,193,0,54,0,43,0,84,0,227,0,150,0,51,0,229,0,0,0,55,0,1,0,192,0,28,0,172,0,91,0,243,0,184,0,0,0,30,0,237,0,234,0,102,0,247,0,88,0,153,0,237,0,214,0,96,0,123,0,71,0,0,0,57,0,0,0,0,0,241,0,0,0,102,0,163,0,242,0,173,0,184,0,231,0,0,0,165,0,0,0,59,0,40,0,236,0,47,0,84,0,0,0,252,0,51,0,0,0,240,0,0,0,180,0,63,0,193,0,197,0,3,0,3,0,111,0,19,0,69,0,0,0,74,0,126,0,222,0,0,0,189,0,249,0,0,0,181,0,0,0,159,0,52,0,0,0,154,0,110,0,27,0,58,0,114,0,172,0,0,0,20,0,172,0,192,0,0,0,0,0,158,0,0,0,190,0,10,0,0,0,39,0,72,0,160,0,18,0,204,0,86,0,165,0,144,0,162,0,151,0,91,0,180,0,110,0,8,0,147,0,11,0,223,0,168,0,25,0,65,0,0,0,0,0,175,0,69,0,156,0,243,0,124,0,217,0,213,0,0,0,56,0,33,0,106,0,62,0,6,0,95,0,10,0,0,0,0,0,0,0,177,0,0,0,126,0,26,0,225,0,36,0,222,0,0,0,98,0,115,0,137,0,121,0,251,0,71,0,83,0,77,0,0,0,12,0,171,0,110,0,143,0,2,0,0,0,85,0,235,0,203,0,248,0,0,0,235,0,72,0,171,0,144,0,72,0,208,0,0,0,62,0,81,0,101,0,0,0,0,0,0,0,168,0,247,0,50,0,228,0,206,0,24,0,31,0,0,0,99,0,220,0,0,0,94,0,0,0,66,0,173,0,58,0,83,0,51,0,36,0,243,0,235,0,0,0,241,0,0,0,63,0,4,0,255,0,200,0,0,0,94,0,248,0,119,0,0,0,87,0,0,0,0,0,0,0,43,0,180,0,49,0,88,0,0,0,0,0,108,0,210,0,75,0,156,0,0,0,9,0,204,0,201,0,0,0,8,0,252,0,0,0,0,0,159,0,105,0,104,0,0,0,61,0,238,0,0,0,176,0,71,0,30,0,181,0,243,0,225,0,246,0,115,0,0,0,95,0,189,0,0,0,0,0,231,0,79,0,0,0,223,0,159,0,0,0);
signal scenario_full  : scenario_type := (191,31,80,31,153,31,153,30,220,31,192,31,192,30,28,31,235,31,232,31,232,30,54,31,90,31,235,31,235,31,102,31,102,30,85,31,85,30,137,31,230,31,239,31,22,31,130,31,209,31,176,31,98,31,177,31,61,31,239,31,44,31,118,31,28,31,28,30,199,31,144,31,214,31,149,31,219,31,34,31,122,31,65,31,118,31,189,31,98,31,142,31,202,31,77,31,26,31,129,31,84,31,236,31,216,31,5,31,5,30,7,31,28,31,43,31,43,30,252,31,245,31,248,31,20,31,177,31,177,30,219,31,255,31,255,30,255,29,233,31,46,31,245,31,245,30,55,31,154,31,235,31,235,30,235,29,100,31,115,31,211,31,212,31,172,31,151,31,245,31,58,31,26,31,26,30,199,31,55,31,141,31,225,31,132,31,101,31,162,31,131,31,189,31,156,31,93,31,92,31,56,31,146,31,68,31,62,31,203,31,138,31,144,31,19,31,43,31,244,31,109,31,113,31,30,31,30,30,226,31,66,31,186,31,133,31,133,30,24,31,26,31,12,31,180,31,211,31,211,30,171,31,138,31,230,31,227,31,170,31,170,30,175,31,69,31,69,30,225,31,225,30,74,31,91,31,82,31,243,31,211,31,169,31,83,31,83,30,83,29,57,31,103,31,107,31,211,31,38,31,38,30,40,31,96,31,172,31,142,31,142,30,249,31,251,31,92,31,213,31,191,31,17,31,176,31,43,31,101,31,242,31,179,31,27,31,27,30,24,31,214,31,214,30,6,31,6,30,6,29,54,31,129,31,237,31,255,31,255,30,164,31,133,31,89,31,213,31,239,31,250,31,41,31,26,31,185,31,49,31,97,31,250,31,193,31,193,30,27,31,63,31,245,31,104,31,98,31,182,31,26,31,124,31,207,31,204,31,217,31,124,31,124,30,124,29,99,31,81,31,81,30,79,31,16,31,206,31,206,30,209,31,3,31,185,31,173,31,76,31,26,31,250,31,253,31,5,31,74,31,37,31,113,31,113,30,243,31,187,31,187,30,99,31,7,31,188,31,104,31,104,30,203,31,203,30,122,31,209,31,67,31,237,31,238,31,184,31,201,31,27,31,227,31,254,31,254,30,45,31,45,30,45,29,50,31,50,30,223,31,210,31,249,31,252,31,85,31,85,30,109,31,85,31,45,31,45,30,94,31,242,31,242,30,38,31,12,31,12,30,74,31,147,31,143,31,24,31,98,31,201,31,110,31,52,31,52,30,68,31,95,31,238,31,238,30,218,31,88,31,88,30,78,31,98,31,134,31,57,31,154,31,122,31,176,31,176,31,67,31,184,31,212,31,212,30,81,31,81,30,81,29,47,31,92,31,127,31,70,31,70,30,70,29,33,31,126,31,130,31,85,31,85,30,149,31,149,30,247,31,128,31,245,31,216,31,252,31,229,31,229,30,241,31,241,30,85,31,40,31,249,31,106,31,106,30,109,31,109,30,37,31,203,31,182,31,204,31,204,31,238,31,14,31,49,31,49,30,49,29,173,31,69,31,69,30,185,31,185,30,185,29,13,31,70,31,65,31,252,31,116,31,116,30,116,29,63,31,204,31,61,31,70,31,70,30,154,31,33,31,69,31,69,30,236,31,217,31,96,31,6,31,229,31,229,30,187,31,187,30,63,31,63,30,63,29,209,31,209,30,140,31,91,31,190,31,171,31,121,31,54,31,102,31,102,30,230,31,133,31,93,31,77,31,215,31,124,31,60,31,222,31,73,31,47,31,138,31,235,31,235,30,224,31,47,31,47,30,47,29,204,31,151,31,32,31,174,31,55,31,135,31,159,31,136,31,39,31,9,31,120,31,120,30,120,29,120,28,120,27,56,31,112,31,244,31,244,30,31,31,31,30,44,31,44,31,251,31,251,30,251,29,154,31,228,31,109,31,41,31,173,31,153,31,153,30,171,31,185,31,74,31,74,30,87,31,154,31,154,30,135,31,93,31,218,31,232,31,189,31,162,31,85,31,202,31,9,31,140,31,12,31,187,31,250,31,250,30,68,31,99,31,99,30,75,31,178,31,178,30,115,31,115,30,203,31,203,30,170,31,51,31,42,31,172,31,172,30,176,31,228,31,244,31,211,31,150,31,161,31,161,30,56,31,56,30,83,31,234,31,88,31,39,31,211,31,197,31,20,31,81,31,98,31,86,31,198,31,198,30,53,31,53,30,53,29,58,31,74,31,87,31,139,31,173,31,179,31,179,30,179,29,76,31,248,31,245,31,64,31,158,31,142,31,25,31,25,30,238,31,28,31,28,30,28,29,207,31,207,30,207,29,35,31,36,31,75,31,138,31,15,31,121,31,11,31,11,30,11,29,65,31,85,31,45,31,45,30,110,31,117,31,83,31,248,31,46,31,197,31,85,31,173,31,19,31,57,31,107,31,59,31,59,30,229,31,13,31,250,31,37,31,76,31,130,31,130,30,233,31,7,31,7,30,34,31,170,31,255,31,207,31,146,31,181,31,1,31,102,31,164,31,164,30,193,31,49,31,216,31,246,31,208,31,187,31,115,31,115,30,243,31,96,31,133,31,133,30,48,31,34,31,87,31,235,31,51,31,88,31,178,31,249,31,249,30,181,31,69,31,138,31,85,31,85,30,85,29,85,28,85,27,72,31,72,30,56,31,56,30,189,31,189,30,193,31,54,31,43,31,84,31,227,31,150,31,51,31,229,31,229,30,55,31,1,31,192,31,28,31,172,31,91,31,243,31,184,31,184,30,30,31,237,31,234,31,102,31,247,31,88,31,153,31,237,31,214,31,96,31,123,31,71,31,71,30,57,31,57,30,57,29,241,31,241,30,102,31,163,31,242,31,173,31,184,31,231,31,231,30,165,31,165,30,59,31,40,31,236,31,47,31,84,31,84,30,252,31,51,31,51,30,240,31,240,30,180,31,63,31,193,31,197,31,3,31,3,31,111,31,19,31,69,31,69,30,74,31,126,31,222,31,222,30,189,31,249,31,249,30,181,31,181,30,159,31,52,31,52,30,154,31,110,31,27,31,58,31,114,31,172,31,172,30,20,31,172,31,192,31,192,30,192,29,158,31,158,30,190,31,10,31,10,30,39,31,72,31,160,31,18,31,204,31,86,31,165,31,144,31,162,31,151,31,91,31,180,31,110,31,8,31,147,31,11,31,223,31,168,31,25,31,65,31,65,30,65,29,175,31,69,31,156,31,243,31,124,31,217,31,213,31,213,30,56,31,33,31,106,31,62,31,6,31,95,31,10,31,10,30,10,29,10,28,177,31,177,30,126,31,26,31,225,31,36,31,222,31,222,30,98,31,115,31,137,31,121,31,251,31,71,31,83,31,77,31,77,30,12,31,171,31,110,31,143,31,2,31,2,30,85,31,235,31,203,31,248,31,248,30,235,31,72,31,171,31,144,31,72,31,208,31,208,30,62,31,81,31,101,31,101,30,101,29,101,28,168,31,247,31,50,31,228,31,206,31,24,31,31,31,31,30,99,31,220,31,220,30,94,31,94,30,66,31,173,31,58,31,83,31,51,31,36,31,243,31,235,31,235,30,241,31,241,30,63,31,4,31,255,31,200,31,200,30,94,31,248,31,119,31,119,30,87,31,87,30,87,29,87,28,43,31,180,31,49,31,88,31,88,30,88,29,108,31,210,31,75,31,156,31,156,30,9,31,204,31,201,31,201,30,8,31,252,31,252,30,252,29,159,31,105,31,104,31,104,30,61,31,238,31,238,30,176,31,71,31,30,31,181,31,243,31,225,31,246,31,115,31,115,30,95,31,189,31,189,30,189,29,231,31,79,31,79,30,223,31,159,31,159,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
