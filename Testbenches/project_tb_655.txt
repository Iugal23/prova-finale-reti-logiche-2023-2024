-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 970;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (248,0,0,0,149,0,156,0,177,0,0,0,255,0,164,0,185,0,93,0,0,0,0,0,191,0,243,0,166,0,0,0,44,0,0,0,9,0,0,0,44,0,121,0,111,0,209,0,165,0,83,0,2,0,37,0,77,0,151,0,194,0,207,0,89,0,251,0,18,0,249,0,7,0,152,0,0,0,33,0,213,0,43,0,201,0,92,0,242,0,78,0,9,0,186,0,70,0,99,0,229,0,185,0,97,0,53,0,84,0,143,0,229,0,153,0,0,0,243,0,111,0,175,0,0,0,25,0,160,0,210,0,8,0,108,0,105,0,241,0,10,0,196,0,249,0,60,0,192,0,91,0,0,0,23,0,124,0,87,0,10,0,0,0,236,0,179,0,0,0,212,0,0,0,254,0,170,0,142,0,245,0,135,0,62,0,223,0,22,0,161,0,65,0,170,0,159,0,191,0,66,0,0,0,100,0,244,0,75,0,221,0,118,0,63,0,62,0,54,0,0,0,186,0,82,0,194,0,217,0,0,0,231,0,213,0,0,0,251,0,176,0,5,0,224,0,24,0,204,0,222,0,0,0,0,0,0,0,0,0,121,0,0,0,119,0,250,0,0,0,224,0,210,0,162,0,21,0,0,0,52,0,40,0,145,0,171,0,93,0,246,0,0,0,26,0,105,0,99,0,112,0,232,0,234,0,0,0,196,0,100,0,143,0,62,0,33,0,0,0,104,0,111,0,53,0,128,0,44,0,58,0,88,0,0,0,131,0,0,0,231,0,144,0,0,0,7,0,0,0,127,0,151,0,205,0,120,0,217,0,37,0,181,0,147,0,110,0,74,0,47,0,56,0,0,0,34,0,69,0,251,0,245,0,0,0,244,0,93,0,172,0,11,0,32,0,81,0,0,0,185,0,200,0,0,0,145,0,219,0,0,0,44,0,177,0,0,0,67,0,0,0,198,0,0,0,25,0,146,0,126,0,138,0,185,0,26,0,0,0,133,0,155,0,0,0,42,0,255,0,85,0,225,0,232,0,143,0,71,0,0,0,237,0,69,0,10,0,33,0,235,0,33,0,172,0,193,0,0,0,200,0,0,0,0,0,0,0,38,0,210,0,93,0,0,0,75,0,0,0,170,0,171,0,0,0,50,0,36,0,209,0,49,0,0,0,207,0,107,0,160,0,0,0,162,0,0,0,236,0,118,0,0,0,249,0,172,0,173,0,57,0,10,0,19,0,207,0,212,0,0,0,143,0,187,0,174,0,203,0,132,0,2,0,157,0,0,0,65,0,91,0,0,0,103,0,96,0,15,0,69,0,224,0,95,0,226,0,0,0,146,0,140,0,108,0,50,0,95,0,180,0,148,0,153,0,0,0,88,0,228,0,117,0,109,0,0,0,76,0,253,0,251,0,180,0,179,0,98,0,0,0,136,0,0,0,194,0,178,0,125,0,0,0,0,0,146,0,28,0,0,0,187,0,229,0,21,0,95,0,0,0,0,0,0,0,104,0,195,0,108,0,104,0,163,0,118,0,126,0,35,0,0,0,87,0,106,0,164,0,75,0,198,0,77,0,139,0,0,0,0,0,238,0,56,0,107,0,155,0,95,0,0,0,246,0,55,0,119,0,20,0,222,0,3,0,232,0,176,0,0,0,0,0,4,0,239,0,0,0,0,0,29,0,165,0,0,0,68,0,46,0,141,0,87,0,168,0,141,0,124,0,164,0,91,0,218,0,30,0,219,0,99,0,26,0,48,0,238,0,0,0,6,0,237,0,16,0,249,0,148,0,164,0,33,0,0,0,0,0,113,0,0,0,151,0,60,0,135,0,66,0,47,0,233,0,22,0,178,0,67,0,0,0,213,0,0,0,0,0,17,0,0,0,63,0,0,0,34,0,0,0,115,0,209,0,10,0,247,0,72,0,129,0,48,0,0,0,118,0,19,0,65,0,112,0,0,0,252,0,195,0,125,0,0,0,139,0,0,0,204,0,253,0,114,0,0,0,147,0,37,0,186,0,110,0,62,0,236,0,191,0,103,0,224,0,74,0,126,0,98,0,185,0,211,0,158,0,30,0,133,0,4,0,62,0,72,0,0,0,0,0,13,0,45,0,76,0,89,0,2,0,0,0,184,0,219,0,56,0,0,0,249,0,190,0,197,0,23,0,0,0,173,0,105,0,21,0,0,0,0,0,0,0,172,0,228,0,171,0,178,0,230,0,207,0,117,0,0,0,222,0,74,0,212,0,32,0,0,0,122,0,118,0,150,0,113,0,30,0,0,0,220,0,29,0,6,0,179,0,68,0,65,0,226,0,74,0,185,0,117,0,120,0,149,0,0,0,38,0,194,0,77,0,201,0,253,0,36,0,0,0,196,0,95,0,0,0,240,0,0,0,31,0,175,0,217,0,54,0,64,0,0,0,255,0,0,0,197,0,79,0,0,0,186,0,0,0,109,0,139,0,0,0,108,0,0,0,23,0,248,0,28,0,238,0,0,0,168,0,84,0,160,0,0,0,94,0,97,0,56,0,31,0,159,0,205,0,98,0,141,0,0,0,177,0,48,0,125,0,251,0,0,0,0,0,194,0,253,0,188,0,0,0,178,0,122,0,19,0,239,0,19,0,158,0,227,0,116,0,136,0,0,0,242,0,0,0,141,0,183,0,0,0,0,0,101,0,9,0,169,0,92,0,233,0,0,0,68,0,164,0,103,0,0,0,7,0,117,0,188,0,171,0,14,0,0,0,58,0,25,0,185,0,0,0,214,0,199,0,0,0,0,0,0,0,149,0,226,0,225,0,0,0,106,0,0,0,42,0,241,0,161,0,179,0,0,0,7,0,29,0,80,0,254,0,202,0,102,0,0,0,0,0,229,0,39,0,132,0,209,0,47,0,118,0,0,0,186,0,71,0,0,0,0,0,9,0,111,0,138,0,60,0,0,0,169,0,171,0,0,0,19,0,35,0,184,0,154,0,0,0,186,0,0,0,84,0,58,0,36,0,102,0,173,0,5,0,0,0,250,0,144,0,252,0,172,0,114,0,0,0,193,0,248,0,96,0,16,0,211,0,185,0,84,0,146,0,0,0,218,0,148,0,189,0,165,0,0,0,227,0,2,0,0,0,144,0,90,0,71,0,59,0,233,0,23,0,0,0,116,0,239,0,107,0,0,0,34,0,1,0,53,0,0,0,159,0,0,0,0,0,221,0,21,0,31,0,120,0,34,0,46,0,0,0,195,0,148,0,180,0,0,0,102,0,119,0,194,0,173,0,80,0,200,0,229,0,25,0,194,0,185,0,231,0,111,0,0,0,239,0,252,0,127,0,171,0,26,0,0,0,157,0,0,0,195,0,154,0,0,0,8,0,10,0,47,0,32,0,241,0,0,0,221,0,224,0,127,0,199,0,101,0,32,0,0,0,98,0,0,0,0,0,105,0,0,0,20,0,247,0,37,0,189,0,0,0,136,0,138,0,76,0,0,0,125,0,244,0,0,0,240,0,0,0,59,0,108,0,126,0,132,0,232,0,0,0,51,0,0,0,25,0,248,0,55,0,121,0,192,0,197,0,68,0,54,0,80,0,108,0,100,0,112,0,207,0,140,0,22,0,250,0,177,0,187,0,0,0,188,0,167,0,0,0,251,0,37,0,16,0,203,0,111,0,113,0,168,0,187,0,0,0,70,0,160,0,44,0,241,0,223,0,0,0,135,0,126,0,10,0,51,0,217,0,223,0,0,0,133,0,56,0,0,0,66,0,0,0,248,0,0,0,27,0,146,0,0,0,55,0,4,0,0,0,170,0,108,0,0,0,104,0,16,0,4,0,12,0,0,0,9,0,33,0,167,0,0,0,34,0,58,0,116,0,188,0,0,0,230,0,85,0,170,0,0,0,50,0,132,0,148,0,130,0,185,0,108,0,10,0,15,0,46,0,43,0,171,0,119,0,60,0,40,0,16,0,116,0,102,0,211,0,103,0,11,0,126,0,125,0,4,0,0,0,0,0,79,0,37,0,16,0,24,0,170,0,103,0,78,0,25,0,215,0,0,0,92,0,227,0,187,0,158,0,0,0,181,0,226,0,91,0,154,0,0,0,201,0,162,0,178,0,148,0,0,0,0,0,3,0,131,0,203,0,54,0,103,0,240,0,2,0,152,0,0,0,80,0,12,0,80,0,121,0,24,0,92,0,0,0,43,0,120,0,2,0,248,0,175,0,198,0,106,0,209,0,65,0,37,0,139,0,0,0,87,0,0,0,107,0,59,0,182,0,160,0,246,0,153,0,86,0,70,0,126,0,0,0,81,0,207,0,66,0,0,0,130,0,151,0,138,0,77,0,172,0,48,0,26,0,0,0,176,0,41,0,0,0);
signal scenario_full  : scenario_type := (248,31,248,30,149,31,156,31,177,31,177,30,255,31,164,31,185,31,93,31,93,30,93,29,191,31,243,31,166,31,166,30,44,31,44,30,9,31,9,30,44,31,121,31,111,31,209,31,165,31,83,31,2,31,37,31,77,31,151,31,194,31,207,31,89,31,251,31,18,31,249,31,7,31,152,31,152,30,33,31,213,31,43,31,201,31,92,31,242,31,78,31,9,31,186,31,70,31,99,31,229,31,185,31,97,31,53,31,84,31,143,31,229,31,153,31,153,30,243,31,111,31,175,31,175,30,25,31,160,31,210,31,8,31,108,31,105,31,241,31,10,31,196,31,249,31,60,31,192,31,91,31,91,30,23,31,124,31,87,31,10,31,10,30,236,31,179,31,179,30,212,31,212,30,254,31,170,31,142,31,245,31,135,31,62,31,223,31,22,31,161,31,65,31,170,31,159,31,191,31,66,31,66,30,100,31,244,31,75,31,221,31,118,31,63,31,62,31,54,31,54,30,186,31,82,31,194,31,217,31,217,30,231,31,213,31,213,30,251,31,176,31,5,31,224,31,24,31,204,31,222,31,222,30,222,29,222,28,222,27,121,31,121,30,119,31,250,31,250,30,224,31,210,31,162,31,21,31,21,30,52,31,40,31,145,31,171,31,93,31,246,31,246,30,26,31,105,31,99,31,112,31,232,31,234,31,234,30,196,31,100,31,143,31,62,31,33,31,33,30,104,31,111,31,53,31,128,31,44,31,58,31,88,31,88,30,131,31,131,30,231,31,144,31,144,30,7,31,7,30,127,31,151,31,205,31,120,31,217,31,37,31,181,31,147,31,110,31,74,31,47,31,56,31,56,30,34,31,69,31,251,31,245,31,245,30,244,31,93,31,172,31,11,31,32,31,81,31,81,30,185,31,200,31,200,30,145,31,219,31,219,30,44,31,177,31,177,30,67,31,67,30,198,31,198,30,25,31,146,31,126,31,138,31,185,31,26,31,26,30,133,31,155,31,155,30,42,31,255,31,85,31,225,31,232,31,143,31,71,31,71,30,237,31,69,31,10,31,33,31,235,31,33,31,172,31,193,31,193,30,200,31,200,30,200,29,200,28,38,31,210,31,93,31,93,30,75,31,75,30,170,31,171,31,171,30,50,31,36,31,209,31,49,31,49,30,207,31,107,31,160,31,160,30,162,31,162,30,236,31,118,31,118,30,249,31,172,31,173,31,57,31,10,31,19,31,207,31,212,31,212,30,143,31,187,31,174,31,203,31,132,31,2,31,157,31,157,30,65,31,91,31,91,30,103,31,96,31,15,31,69,31,224,31,95,31,226,31,226,30,146,31,140,31,108,31,50,31,95,31,180,31,148,31,153,31,153,30,88,31,228,31,117,31,109,31,109,30,76,31,253,31,251,31,180,31,179,31,98,31,98,30,136,31,136,30,194,31,178,31,125,31,125,30,125,29,146,31,28,31,28,30,187,31,229,31,21,31,95,31,95,30,95,29,95,28,104,31,195,31,108,31,104,31,163,31,118,31,126,31,35,31,35,30,87,31,106,31,164,31,75,31,198,31,77,31,139,31,139,30,139,29,238,31,56,31,107,31,155,31,95,31,95,30,246,31,55,31,119,31,20,31,222,31,3,31,232,31,176,31,176,30,176,29,4,31,239,31,239,30,239,29,29,31,165,31,165,30,68,31,46,31,141,31,87,31,168,31,141,31,124,31,164,31,91,31,218,31,30,31,219,31,99,31,26,31,48,31,238,31,238,30,6,31,237,31,16,31,249,31,148,31,164,31,33,31,33,30,33,29,113,31,113,30,151,31,60,31,135,31,66,31,47,31,233,31,22,31,178,31,67,31,67,30,213,31,213,30,213,29,17,31,17,30,63,31,63,30,34,31,34,30,115,31,209,31,10,31,247,31,72,31,129,31,48,31,48,30,118,31,19,31,65,31,112,31,112,30,252,31,195,31,125,31,125,30,139,31,139,30,204,31,253,31,114,31,114,30,147,31,37,31,186,31,110,31,62,31,236,31,191,31,103,31,224,31,74,31,126,31,98,31,185,31,211,31,158,31,30,31,133,31,4,31,62,31,72,31,72,30,72,29,13,31,45,31,76,31,89,31,2,31,2,30,184,31,219,31,56,31,56,30,249,31,190,31,197,31,23,31,23,30,173,31,105,31,21,31,21,30,21,29,21,28,172,31,228,31,171,31,178,31,230,31,207,31,117,31,117,30,222,31,74,31,212,31,32,31,32,30,122,31,118,31,150,31,113,31,30,31,30,30,220,31,29,31,6,31,179,31,68,31,65,31,226,31,74,31,185,31,117,31,120,31,149,31,149,30,38,31,194,31,77,31,201,31,253,31,36,31,36,30,196,31,95,31,95,30,240,31,240,30,31,31,175,31,217,31,54,31,64,31,64,30,255,31,255,30,197,31,79,31,79,30,186,31,186,30,109,31,139,31,139,30,108,31,108,30,23,31,248,31,28,31,238,31,238,30,168,31,84,31,160,31,160,30,94,31,97,31,56,31,31,31,159,31,205,31,98,31,141,31,141,30,177,31,48,31,125,31,251,31,251,30,251,29,194,31,253,31,188,31,188,30,178,31,122,31,19,31,239,31,19,31,158,31,227,31,116,31,136,31,136,30,242,31,242,30,141,31,183,31,183,30,183,29,101,31,9,31,169,31,92,31,233,31,233,30,68,31,164,31,103,31,103,30,7,31,117,31,188,31,171,31,14,31,14,30,58,31,25,31,185,31,185,30,214,31,199,31,199,30,199,29,199,28,149,31,226,31,225,31,225,30,106,31,106,30,42,31,241,31,161,31,179,31,179,30,7,31,29,31,80,31,254,31,202,31,102,31,102,30,102,29,229,31,39,31,132,31,209,31,47,31,118,31,118,30,186,31,71,31,71,30,71,29,9,31,111,31,138,31,60,31,60,30,169,31,171,31,171,30,19,31,35,31,184,31,154,31,154,30,186,31,186,30,84,31,58,31,36,31,102,31,173,31,5,31,5,30,250,31,144,31,252,31,172,31,114,31,114,30,193,31,248,31,96,31,16,31,211,31,185,31,84,31,146,31,146,30,218,31,148,31,189,31,165,31,165,30,227,31,2,31,2,30,144,31,90,31,71,31,59,31,233,31,23,31,23,30,116,31,239,31,107,31,107,30,34,31,1,31,53,31,53,30,159,31,159,30,159,29,221,31,21,31,31,31,120,31,34,31,46,31,46,30,195,31,148,31,180,31,180,30,102,31,119,31,194,31,173,31,80,31,200,31,229,31,25,31,194,31,185,31,231,31,111,31,111,30,239,31,252,31,127,31,171,31,26,31,26,30,157,31,157,30,195,31,154,31,154,30,8,31,10,31,47,31,32,31,241,31,241,30,221,31,224,31,127,31,199,31,101,31,32,31,32,30,98,31,98,30,98,29,105,31,105,30,20,31,247,31,37,31,189,31,189,30,136,31,138,31,76,31,76,30,125,31,244,31,244,30,240,31,240,30,59,31,108,31,126,31,132,31,232,31,232,30,51,31,51,30,25,31,248,31,55,31,121,31,192,31,197,31,68,31,54,31,80,31,108,31,100,31,112,31,207,31,140,31,22,31,250,31,177,31,187,31,187,30,188,31,167,31,167,30,251,31,37,31,16,31,203,31,111,31,113,31,168,31,187,31,187,30,70,31,160,31,44,31,241,31,223,31,223,30,135,31,126,31,10,31,51,31,217,31,223,31,223,30,133,31,56,31,56,30,66,31,66,30,248,31,248,30,27,31,146,31,146,30,55,31,4,31,4,30,170,31,108,31,108,30,104,31,16,31,4,31,12,31,12,30,9,31,33,31,167,31,167,30,34,31,58,31,116,31,188,31,188,30,230,31,85,31,170,31,170,30,50,31,132,31,148,31,130,31,185,31,108,31,10,31,15,31,46,31,43,31,171,31,119,31,60,31,40,31,16,31,116,31,102,31,211,31,103,31,11,31,126,31,125,31,4,31,4,30,4,29,79,31,37,31,16,31,24,31,170,31,103,31,78,31,25,31,215,31,215,30,92,31,227,31,187,31,158,31,158,30,181,31,226,31,91,31,154,31,154,30,201,31,162,31,178,31,148,31,148,30,148,29,3,31,131,31,203,31,54,31,103,31,240,31,2,31,152,31,152,30,80,31,12,31,80,31,121,31,24,31,92,31,92,30,43,31,120,31,2,31,248,31,175,31,198,31,106,31,209,31,65,31,37,31,139,31,139,30,87,31,87,30,107,31,59,31,182,31,160,31,246,31,153,31,86,31,70,31,126,31,126,30,81,31,207,31,66,31,66,30,130,31,151,31,138,31,77,31,172,31,48,31,26,31,26,30,176,31,41,31,41,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
