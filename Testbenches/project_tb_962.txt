-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 605;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (42,0,0,0,50,0,225,0,0,0,0,0,32,0,96,0,176,0,93,0,248,0,122,0,22,0,0,0,24,0,0,0,0,0,50,0,0,0,29,0,0,0,3,0,105,0,86,0,0,0,0,0,2,0,104,0,42,0,160,0,0,0,0,0,244,0,213,0,114,0,220,0,97,0,95,0,61,0,224,0,27,0,0,0,134,0,208,0,0,0,139,0,90,0,57,0,0,0,165,0,0,0,0,0,211,0,73,0,126,0,2,0,232,0,0,0,0,0,176,0,40,0,68,0,0,0,18,0,222,0,195,0,228,0,6,0,152,0,57,0,192,0,3,0,36,0,144,0,0,0,220,0,52,0,101,0,84,0,221,0,95,0,181,0,182,0,38,0,169,0,0,0,0,0,74,0,0,0,94,0,245,0,0,0,30,0,0,0,228,0,10,0,213,0,159,0,155,0,223,0,188,0,124,0,201,0,77,0,118,0,204,0,67,0,0,0,176,0,213,0,106,0,139,0,51,0,235,0,81,0,6,0,0,0,183,0,69,0,0,0,0,0,4,0,144,0,207,0,0,0,24,0,140,0,197,0,248,0,60,0,0,0,196,0,223,0,119,0,89,0,0,0,13,0,5,0,204,0,0,0,153,0,60,0,253,0,113,0,15,0,81,0,0,0,206,0,222,0,0,0,171,0,54,0,90,0,0,0,229,0,121,0,243,0,236,0,193,0,192,0,107,0,150,0,0,0,187,0,41,0,0,0,0,0,223,0,81,0,131,0,206,0,233,0,232,0,62,0,42,0,11,0,183,0,146,0,188,0,54,0,206,0,167,0,255,0,6,0,0,0,130,0,0,0,0,0,229,0,155,0,132,0,148,0,223,0,168,0,47,0,24,0,160,0,0,0,92,0,239,0,128,0,217,0,157,0,0,0,12,0,253,0,0,0,13,0,135,0,189,0,188,0,21,0,0,0,135,0,0,0,18,0,79,0,0,0,150,0,0,0,139,0,0,0,0,0,125,0,46,0,194,0,0,0,0,0,0,0,22,0,2,0,121,0,182,0,13,0,0,0,181,0,139,0,50,0,52,0,0,0,137,0,247,0,180,0,0,0,0,0,123,0,61,0,237,0,0,0,0,0,78,0,76,0,202,0,46,0,86,0,178,0,2,0,0,0,243,0,106,0,66,0,21,0,250,0,169,0,219,0,224,0,198,0,0,0,208,0,153,0,8,0,175,0,197,0,132,0,57,0,0,0,128,0,253,0,0,0,53,0,98,0,0,0,0,0,60,0,166,0,25,0,116,0,109,0,107,0,0,0,111,0,242,0,135,0,224,0,124,0,167,0,0,0,194,0,42,0,153,0,142,0,2,0,158,0,0,0,0,0,118,0,21,0,175,0,224,0,11,0,115,0,179,0,0,0,15,0,245,0,212,0,0,0,70,0,0,0,54,0,147,0,60,0,0,0,137,0,127,0,211,0,176,0,0,0,14,0,19,0,169,0,145,0,60,0,242,0,208,0,157,0,168,0,248,0,35,0,5,0,89,0,223,0,0,0,185,0,243,0,115,0,0,0,188,0,99,0,24,0,168,0,0,0,242,0,135,0,37,0,19,0,41,0,44,0,148,0,40,0,255,0,73,0,204,0,189,0,133,0,243,0,0,0,69,0,185,0,151,0,53,0,128,0,3,0,159,0,0,0,76,0,185,0,0,0,212,0,0,0,100,0,0,0,173,0,184,0,57,0,0,0,152,0,0,0,0,0,127,0,192,0,86,0,136,0,155,0,0,0,79,0,238,0,0,0,138,0,100,0,170,0,225,0,229,0,24,0,130,0,239,0,0,0,194,0,48,0,100,0,237,0,0,0,207,0,208,0,167,0,112,0,1,0,0,0,26,0,104,0,248,0,104,0,49,0,229,0,0,0,60,0,131,0,19,0,220,0,178,0,252,0,165,0,0,0,0,0,212,0,39,0,32,0,17,0,162,0,0,0,244,0,235,0,0,0,213,0,98,0,13,0,13,0,126,0,102,0,225,0,54,0,174,0,132,0,89,0,0,0,211,0,134,0,137,0,138,0,44,0,18,0,133,0,117,0,0,0,92,0,232,0,80,0,146,0,49,0,46,0,0,0,83,0,23,0,0,0,178,0,136,0,0,0,0,0,11,0,92,0,144,0,0,0,0,0,0,0,254,0,104,0,0,0,197,0,0,0,83,0,0,0,138,0,95,0,0,0,0,0,162,0,7,0,187,0,226,0,167,0,0,0,23,0,0,0,242,0,243,0,115,0,213,0,229,0,153,0,173,0,61,0,0,0,0,0,35,0,74,0,191,0,246,0,0,0,254,0,0,0,123,0,125,0,108,0,118,0,0,0,0,0,0,0,25,0,195,0,84,0,176,0,95,0,189,0,215,0,0,0,0,0,187,0,185,0,139,0,175,0,61,0,225,0,237,0,106,0,111,0,175,0,105,0,37,0,46,0,91,0,149,0,30,0,0,0,0,0,96,0,190,0,0,0,0,0,212,0,175,0,229,0,172,0,216,0,23,0,234,0,93,0,232,0,99,0,0,0,41,0,197,0,0,0,192,0,0,0,200,0,124,0,111,0,0,0,115,0,0,0,62,0,112,0,90,0,152,0,141,0,0,0,0,0,245,0,228,0,0,0,83,0,157,0,0,0,133,0,193,0,34,0,250,0,205,0,130,0,155,0,233,0,115,0,180,0,0,0,0,0);
signal scenario_full  : scenario_type := (42,31,42,30,50,31,225,31,225,30,225,29,32,31,96,31,176,31,93,31,248,31,122,31,22,31,22,30,24,31,24,30,24,29,50,31,50,30,29,31,29,30,3,31,105,31,86,31,86,30,86,29,2,31,104,31,42,31,160,31,160,30,160,29,244,31,213,31,114,31,220,31,97,31,95,31,61,31,224,31,27,31,27,30,134,31,208,31,208,30,139,31,90,31,57,31,57,30,165,31,165,30,165,29,211,31,73,31,126,31,2,31,232,31,232,30,232,29,176,31,40,31,68,31,68,30,18,31,222,31,195,31,228,31,6,31,152,31,57,31,192,31,3,31,36,31,144,31,144,30,220,31,52,31,101,31,84,31,221,31,95,31,181,31,182,31,38,31,169,31,169,30,169,29,74,31,74,30,94,31,245,31,245,30,30,31,30,30,228,31,10,31,213,31,159,31,155,31,223,31,188,31,124,31,201,31,77,31,118,31,204,31,67,31,67,30,176,31,213,31,106,31,139,31,51,31,235,31,81,31,6,31,6,30,183,31,69,31,69,30,69,29,4,31,144,31,207,31,207,30,24,31,140,31,197,31,248,31,60,31,60,30,196,31,223,31,119,31,89,31,89,30,13,31,5,31,204,31,204,30,153,31,60,31,253,31,113,31,15,31,81,31,81,30,206,31,222,31,222,30,171,31,54,31,90,31,90,30,229,31,121,31,243,31,236,31,193,31,192,31,107,31,150,31,150,30,187,31,41,31,41,30,41,29,223,31,81,31,131,31,206,31,233,31,232,31,62,31,42,31,11,31,183,31,146,31,188,31,54,31,206,31,167,31,255,31,6,31,6,30,130,31,130,30,130,29,229,31,155,31,132,31,148,31,223,31,168,31,47,31,24,31,160,31,160,30,92,31,239,31,128,31,217,31,157,31,157,30,12,31,253,31,253,30,13,31,135,31,189,31,188,31,21,31,21,30,135,31,135,30,18,31,79,31,79,30,150,31,150,30,139,31,139,30,139,29,125,31,46,31,194,31,194,30,194,29,194,28,22,31,2,31,121,31,182,31,13,31,13,30,181,31,139,31,50,31,52,31,52,30,137,31,247,31,180,31,180,30,180,29,123,31,61,31,237,31,237,30,237,29,78,31,76,31,202,31,46,31,86,31,178,31,2,31,2,30,243,31,106,31,66,31,21,31,250,31,169,31,219,31,224,31,198,31,198,30,208,31,153,31,8,31,175,31,197,31,132,31,57,31,57,30,128,31,253,31,253,30,53,31,98,31,98,30,98,29,60,31,166,31,25,31,116,31,109,31,107,31,107,30,111,31,242,31,135,31,224,31,124,31,167,31,167,30,194,31,42,31,153,31,142,31,2,31,158,31,158,30,158,29,118,31,21,31,175,31,224,31,11,31,115,31,179,31,179,30,15,31,245,31,212,31,212,30,70,31,70,30,54,31,147,31,60,31,60,30,137,31,127,31,211,31,176,31,176,30,14,31,19,31,169,31,145,31,60,31,242,31,208,31,157,31,168,31,248,31,35,31,5,31,89,31,223,31,223,30,185,31,243,31,115,31,115,30,188,31,99,31,24,31,168,31,168,30,242,31,135,31,37,31,19,31,41,31,44,31,148,31,40,31,255,31,73,31,204,31,189,31,133,31,243,31,243,30,69,31,185,31,151,31,53,31,128,31,3,31,159,31,159,30,76,31,185,31,185,30,212,31,212,30,100,31,100,30,173,31,184,31,57,31,57,30,152,31,152,30,152,29,127,31,192,31,86,31,136,31,155,31,155,30,79,31,238,31,238,30,138,31,100,31,170,31,225,31,229,31,24,31,130,31,239,31,239,30,194,31,48,31,100,31,237,31,237,30,207,31,208,31,167,31,112,31,1,31,1,30,26,31,104,31,248,31,104,31,49,31,229,31,229,30,60,31,131,31,19,31,220,31,178,31,252,31,165,31,165,30,165,29,212,31,39,31,32,31,17,31,162,31,162,30,244,31,235,31,235,30,213,31,98,31,13,31,13,31,126,31,102,31,225,31,54,31,174,31,132,31,89,31,89,30,211,31,134,31,137,31,138,31,44,31,18,31,133,31,117,31,117,30,92,31,232,31,80,31,146,31,49,31,46,31,46,30,83,31,23,31,23,30,178,31,136,31,136,30,136,29,11,31,92,31,144,31,144,30,144,29,144,28,254,31,104,31,104,30,197,31,197,30,83,31,83,30,138,31,95,31,95,30,95,29,162,31,7,31,187,31,226,31,167,31,167,30,23,31,23,30,242,31,243,31,115,31,213,31,229,31,153,31,173,31,61,31,61,30,61,29,35,31,74,31,191,31,246,31,246,30,254,31,254,30,123,31,125,31,108,31,118,31,118,30,118,29,118,28,25,31,195,31,84,31,176,31,95,31,189,31,215,31,215,30,215,29,187,31,185,31,139,31,175,31,61,31,225,31,237,31,106,31,111,31,175,31,105,31,37,31,46,31,91,31,149,31,30,31,30,30,30,29,96,31,190,31,190,30,190,29,212,31,175,31,229,31,172,31,216,31,23,31,234,31,93,31,232,31,99,31,99,30,41,31,197,31,197,30,192,31,192,30,200,31,124,31,111,31,111,30,115,31,115,30,62,31,112,31,90,31,152,31,141,31,141,30,141,29,245,31,228,31,228,30,83,31,157,31,157,30,133,31,193,31,34,31,250,31,205,31,130,31,155,31,233,31,115,31,180,31,180,30,180,29);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
