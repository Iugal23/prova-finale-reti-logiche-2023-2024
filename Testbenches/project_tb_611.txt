-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 435;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,98,0,203,0,0,0,3,0,8,0,17,0,66,0,65,0,0,0,0,0,121,0,10,0,49,0,205,0,229,0,0,0,0,0,221,0,72,0,3,0,191,0,0,0,88,0,226,0,0,0,240,0,2,0,94,0,206,0,204,0,24,0,174,0,111,0,210,0,202,0,153,0,0,0,180,0,37,0,169,0,0,0,74,0,14,0,192,0,54,0,0,0,160,0,24,0,155,0,237,0,0,0,0,0,254,0,254,0,19,0,12,0,227,0,91,0,0,0,46,0,181,0,254,0,4,0,126,0,92,0,0,0,13,0,143,0,45,0,143,0,15,0,114,0,128,0,46,0,212,0,182,0,118,0,4,0,229,0,159,0,243,0,84,0,196,0,0,0,0,0,0,0,57,0,93,0,0,0,60,0,0,0,0,0,31,0,0,0,6,0,75,0,0,0,151,0,105,0,38,0,94,0,82,0,147,0,117,0,0,0,0,0,149,0,49,0,239,0,82,0,31,0,64,0,149,0,74,0,129,0,202,0,57,0,0,0,101,0,192,0,0,0,228,0,72,0,205,0,171,0,0,0,209,0,243,0,0,0,31,0,0,0,174,0,14,0,147,0,192,0,0,0,102,0,64,0,30,0,58,0,23,0,0,0,87,0,243,0,59,0,0,0,32,0,76,0,186,0,224,0,66,0,209,0,184,0,242,0,0,0,32,0,86,0,40,0,144,0,130,0,163,0,91,0,210,0,98,0,64,0,146,0,183,0,133,0,0,0,0,0,221,0,157,0,0,0,0,0,0,0,0,0,205,0,81,0,238,0,0,0,12,0,71,0,27,0,93,0,190,0,134,0,0,0,65,0,202,0,71,0,0,0,13,0,199,0,102,0,42,0,0,0,227,0,1,0,212,0,72,0,138,0,36,0,1,0,24,0,0,0,193,0,81,0,52,0,0,0,158,0,40,0,14,0,7,0,120,0,228,0,0,0,126,0,108,0,133,0,187,0,1,0,215,0,127,0,21,0,221,0,135,0,171,0,21,0,0,0,150,0,124,0,0,0,105,0,1,0,99,0,41,0,50,0,162,0,241,0,0,0,0,0,75,0,58,0,81,0,176,0,0,0,0,0,236,0,222,0,16,0,0,0,177,0,157,0,52,0,110,0,47,0,97,0,254,0,0,0,211,0,234,0,69,0,0,0,212,0,106,0,90,0,69,0,0,0,0,0,194,0,217,0,0,0,0,0,106,0,21,0,166,0,0,0,61,0,125,0,93,0,150,0,199,0,232,0,47,0,0,0,103,0,52,0,143,0,32,0,54,0,0,0,55,0,165,0,1,0,55,0,99,0,58,0,0,0,165,0,0,0,116,0,210,0,137,0,52,0,29,0,22,0,91,0,168,0,248,0,61,0,248,0,0,0,207,0,202,0,31,0,117,0,102,0,74,0,118,0,226,0,0,0,7,0,88,0,167,0,172,0,222,0,171,0,91,0,169,0,15,0,120,0,65,0,0,0,111,0,28,0,17,0,15,0,240,0,201,0,0,0,95,0,70,0,218,0,0,0,17,0,117,0,137,0,211,0,34,0,0,0,0,0,29,0,0,0,36,0,15,0,33,0,13,0,94,0,248,0,0,0,71,0,180,0,161,0,92,0,137,0,149,0,173,0,41,0,4,0,105,0,0,0,59,0,3,0,201,0,190,0,0,0,242,0,16,0,0,0,19,0,100,0,38,0,181,0,206,0,0,0,69,0,45,0,27,0,79,0,243,0,0,0,32,0,156,0,0,0,97,0,108,0,0,0,197,0,0,0,0,0,188,0,78,0,239,0,141,0,0,0,106,0,90,0,42,0,220,0,97,0,27,0,246,0,235,0,229,0,130,0,60,0,8,0,173,0,130,0,12,0,0,0,182,0,83,0,252,0,216,0,111,0,116,0,41,0,127,0,204,0,207,0,107,0,162,0,221,0);
signal scenario_full  : scenario_type := (0,0,98,31,203,31,203,30,3,31,8,31,17,31,66,31,65,31,65,30,65,29,121,31,10,31,49,31,205,31,229,31,229,30,229,29,221,31,72,31,3,31,191,31,191,30,88,31,226,31,226,30,240,31,2,31,94,31,206,31,204,31,24,31,174,31,111,31,210,31,202,31,153,31,153,30,180,31,37,31,169,31,169,30,74,31,14,31,192,31,54,31,54,30,160,31,24,31,155,31,237,31,237,30,237,29,254,31,254,31,19,31,12,31,227,31,91,31,91,30,46,31,181,31,254,31,4,31,126,31,92,31,92,30,13,31,143,31,45,31,143,31,15,31,114,31,128,31,46,31,212,31,182,31,118,31,4,31,229,31,159,31,243,31,84,31,196,31,196,30,196,29,196,28,57,31,93,31,93,30,60,31,60,30,60,29,31,31,31,30,6,31,75,31,75,30,151,31,105,31,38,31,94,31,82,31,147,31,117,31,117,30,117,29,149,31,49,31,239,31,82,31,31,31,64,31,149,31,74,31,129,31,202,31,57,31,57,30,101,31,192,31,192,30,228,31,72,31,205,31,171,31,171,30,209,31,243,31,243,30,31,31,31,30,174,31,14,31,147,31,192,31,192,30,102,31,64,31,30,31,58,31,23,31,23,30,87,31,243,31,59,31,59,30,32,31,76,31,186,31,224,31,66,31,209,31,184,31,242,31,242,30,32,31,86,31,40,31,144,31,130,31,163,31,91,31,210,31,98,31,64,31,146,31,183,31,133,31,133,30,133,29,221,31,157,31,157,30,157,29,157,28,157,27,205,31,81,31,238,31,238,30,12,31,71,31,27,31,93,31,190,31,134,31,134,30,65,31,202,31,71,31,71,30,13,31,199,31,102,31,42,31,42,30,227,31,1,31,212,31,72,31,138,31,36,31,1,31,24,31,24,30,193,31,81,31,52,31,52,30,158,31,40,31,14,31,7,31,120,31,228,31,228,30,126,31,108,31,133,31,187,31,1,31,215,31,127,31,21,31,221,31,135,31,171,31,21,31,21,30,150,31,124,31,124,30,105,31,1,31,99,31,41,31,50,31,162,31,241,31,241,30,241,29,75,31,58,31,81,31,176,31,176,30,176,29,236,31,222,31,16,31,16,30,177,31,157,31,52,31,110,31,47,31,97,31,254,31,254,30,211,31,234,31,69,31,69,30,212,31,106,31,90,31,69,31,69,30,69,29,194,31,217,31,217,30,217,29,106,31,21,31,166,31,166,30,61,31,125,31,93,31,150,31,199,31,232,31,47,31,47,30,103,31,52,31,143,31,32,31,54,31,54,30,55,31,165,31,1,31,55,31,99,31,58,31,58,30,165,31,165,30,116,31,210,31,137,31,52,31,29,31,22,31,91,31,168,31,248,31,61,31,248,31,248,30,207,31,202,31,31,31,117,31,102,31,74,31,118,31,226,31,226,30,7,31,88,31,167,31,172,31,222,31,171,31,91,31,169,31,15,31,120,31,65,31,65,30,111,31,28,31,17,31,15,31,240,31,201,31,201,30,95,31,70,31,218,31,218,30,17,31,117,31,137,31,211,31,34,31,34,30,34,29,29,31,29,30,36,31,15,31,33,31,13,31,94,31,248,31,248,30,71,31,180,31,161,31,92,31,137,31,149,31,173,31,41,31,4,31,105,31,105,30,59,31,3,31,201,31,190,31,190,30,242,31,16,31,16,30,19,31,100,31,38,31,181,31,206,31,206,30,69,31,45,31,27,31,79,31,243,31,243,30,32,31,156,31,156,30,97,31,108,31,108,30,197,31,197,30,197,29,188,31,78,31,239,31,141,31,141,30,106,31,90,31,42,31,220,31,97,31,27,31,246,31,235,31,229,31,130,31,60,31,8,31,173,31,130,31,12,31,12,30,182,31,83,31,252,31,216,31,111,31,116,31,41,31,127,31,204,31,207,31,107,31,162,31,221,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
