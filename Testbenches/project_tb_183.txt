-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 433;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (39,0,230,0,162,0,0,0,64,0,0,0,130,0,0,0,80,0,95,0,0,0,244,0,98,0,80,0,109,0,108,0,0,0,170,0,242,0,248,0,189,0,195,0,0,0,68,0,251,0,135,0,71,0,201,0,239,0,62,0,68,0,16,0,156,0,104,0,162,0,244,0,217,0,71,0,74,0,141,0,4,0,250,0,106,0,122,0,0,0,152,0,29,0,0,0,128,0,0,0,219,0,0,0,148,0,10,0,179,0,0,0,204,0,175,0,10,0,12,0,0,0,250,0,151,0,0,0,176,0,110,0,0,0,0,0,0,0,0,0,162,0,157,0,71,0,0,0,24,0,0,0,130,0,102,0,224,0,0,0,0,0,214,0,100,0,248,0,107,0,185,0,0,0,215,0,245,0,0,0,0,0,0,0,50,0,0,0,0,0,237,0,252,0,0,0,39,0,220,0,185,0,0,0,39,0,164,0,106,0,210,0,85,0,44,0,79,0,37,0,254,0,76,0,184,0,94,0,99,0,246,0,185,0,200,0,236,0,228,0,155,0,62,0,77,0,216,0,123,0,127,0,197,0,0,0,28,0,136,0,179,0,137,0,219,0,94,0,155,0,0,0,0,0,203,0,178,0,172,0,0,0,80,0,166,0,201,0,150,0,219,0,207,0,121,0,68,0,102,0,249,0,183,0,0,0,182,0,20,0,206,0,170,0,0,0,118,0,0,0,74,0,210,0,155,0,235,0,168,0,0,0,221,0,119,0,146,0,66,0,227,0,253,0,201,0,0,0,182,0,5,0,92,0,74,0,131,0,128,0,196,0,63,0,168,0,26,0,241,0,58,0,63,0,0,0,76,0,0,0,222,0,184,0,235,0,0,0,220,0,0,0,170,0,30,0,76,0,0,0,165,0,0,0,49,0,28,0,74,0,51,0,255,0,105,0,0,0,0,0,106,0,215,0,232,0,9,0,140,0,186,0,79,0,189,0,207,0,115,0,0,0,137,0,64,0,0,0,9,0,252,0,160,0,186,0,119,0,158,0,1,0,144,0,113,0,242,0,62,0,202,0,20,0,98,0,105,0,0,0,125,0,0,0,188,0,0,0,0,0,151,0,44,0,247,0,0,0,200,0,192,0,220,0,196,0,47,0,225,0,119,0,145,0,123,0,98,0,17,0,31,0,10,0,0,0,0,0,147,0,0,0,73,0,43,0,67,0,0,0,53,0,40,0,167,0,11,0,104,0,167,0,0,0,97,0,0,0,0,0,0,0,167,0,167,0,0,0,58,0,119,0,200,0,0,0,0,0,19,0,102,0,0,0,155,0,20,0,227,0,217,0,110,0,0,0,106,0,241,0,170,0,46,0,158,0,195,0,0,0,91,0,22,0,0,0,121,0,42,0,0,0,94,0,17,0,143,0,90,0,167,0,0,0,124,0,112,0,179,0,18,0,145,0,175,0,88,0,161,0,0,0,54,0,124,0,0,0,0,0,6,0,191,0,115,0,113,0,138,0,0,0,162,0,245,0,116,0,163,0,40,0,144,0,205,0,101,0,21,0,162,0,0,0,74,0,224,0,0,0,34,0,0,0,186,0,246,0,187,0,58,0,186,0,100,0,0,0,134,0,147,0,92,0,0,0,39,0,178,0,63,0,0,0,248,0,194,0,200,0,65,0,26,0,217,0,159,0,15,0,0,0,91,0,176,0,206,0,9,0,180,0,163,0,97,0,118,0,239,0,210,0,113,0,5,0,163,0,97,0,0,0,188,0,188,0,0,0,90,0,0,0,0,0,148,0,151,0,122,0,207,0,148,0,208,0,243,0,12,0,100,0,149,0,242,0,1,0,124,0,201,0,12,0,198,0,38,0,0,0,0,0,46,0,216,0,60,0,26,0,3,0,216,0,26,0,0,0,53,0,174,0,177,0,42,0,71,0,111,0,153,0,0,0,0,0);
signal scenario_full  : scenario_type := (39,31,230,31,162,31,162,30,64,31,64,30,130,31,130,30,80,31,95,31,95,30,244,31,98,31,80,31,109,31,108,31,108,30,170,31,242,31,248,31,189,31,195,31,195,30,68,31,251,31,135,31,71,31,201,31,239,31,62,31,68,31,16,31,156,31,104,31,162,31,244,31,217,31,71,31,74,31,141,31,4,31,250,31,106,31,122,31,122,30,152,31,29,31,29,30,128,31,128,30,219,31,219,30,148,31,10,31,179,31,179,30,204,31,175,31,10,31,12,31,12,30,250,31,151,31,151,30,176,31,110,31,110,30,110,29,110,28,110,27,162,31,157,31,71,31,71,30,24,31,24,30,130,31,102,31,224,31,224,30,224,29,214,31,100,31,248,31,107,31,185,31,185,30,215,31,245,31,245,30,245,29,245,28,50,31,50,30,50,29,237,31,252,31,252,30,39,31,220,31,185,31,185,30,39,31,164,31,106,31,210,31,85,31,44,31,79,31,37,31,254,31,76,31,184,31,94,31,99,31,246,31,185,31,200,31,236,31,228,31,155,31,62,31,77,31,216,31,123,31,127,31,197,31,197,30,28,31,136,31,179,31,137,31,219,31,94,31,155,31,155,30,155,29,203,31,178,31,172,31,172,30,80,31,166,31,201,31,150,31,219,31,207,31,121,31,68,31,102,31,249,31,183,31,183,30,182,31,20,31,206,31,170,31,170,30,118,31,118,30,74,31,210,31,155,31,235,31,168,31,168,30,221,31,119,31,146,31,66,31,227,31,253,31,201,31,201,30,182,31,5,31,92,31,74,31,131,31,128,31,196,31,63,31,168,31,26,31,241,31,58,31,63,31,63,30,76,31,76,30,222,31,184,31,235,31,235,30,220,31,220,30,170,31,30,31,76,31,76,30,165,31,165,30,49,31,28,31,74,31,51,31,255,31,105,31,105,30,105,29,106,31,215,31,232,31,9,31,140,31,186,31,79,31,189,31,207,31,115,31,115,30,137,31,64,31,64,30,9,31,252,31,160,31,186,31,119,31,158,31,1,31,144,31,113,31,242,31,62,31,202,31,20,31,98,31,105,31,105,30,125,31,125,30,188,31,188,30,188,29,151,31,44,31,247,31,247,30,200,31,192,31,220,31,196,31,47,31,225,31,119,31,145,31,123,31,98,31,17,31,31,31,10,31,10,30,10,29,147,31,147,30,73,31,43,31,67,31,67,30,53,31,40,31,167,31,11,31,104,31,167,31,167,30,97,31,97,30,97,29,97,28,167,31,167,31,167,30,58,31,119,31,200,31,200,30,200,29,19,31,102,31,102,30,155,31,20,31,227,31,217,31,110,31,110,30,106,31,241,31,170,31,46,31,158,31,195,31,195,30,91,31,22,31,22,30,121,31,42,31,42,30,94,31,17,31,143,31,90,31,167,31,167,30,124,31,112,31,179,31,18,31,145,31,175,31,88,31,161,31,161,30,54,31,124,31,124,30,124,29,6,31,191,31,115,31,113,31,138,31,138,30,162,31,245,31,116,31,163,31,40,31,144,31,205,31,101,31,21,31,162,31,162,30,74,31,224,31,224,30,34,31,34,30,186,31,246,31,187,31,58,31,186,31,100,31,100,30,134,31,147,31,92,31,92,30,39,31,178,31,63,31,63,30,248,31,194,31,200,31,65,31,26,31,217,31,159,31,15,31,15,30,91,31,176,31,206,31,9,31,180,31,163,31,97,31,118,31,239,31,210,31,113,31,5,31,163,31,97,31,97,30,188,31,188,31,188,30,90,31,90,30,90,29,148,31,151,31,122,31,207,31,148,31,208,31,243,31,12,31,100,31,149,31,242,31,1,31,124,31,201,31,12,31,198,31,38,31,38,30,38,29,46,31,216,31,60,31,26,31,3,31,216,31,26,31,26,30,53,31,174,31,177,31,42,31,71,31,111,31,153,31,153,30,153,29);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
