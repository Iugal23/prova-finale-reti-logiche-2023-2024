-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 923;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (22,0,0,0,210,0,0,0,101,0,54,0,56,0,251,0,80,0,0,0,224,0,17,0,159,0,32,0,110,0,175,0,237,0,0,0,53,0,239,0,19,0,31,0,217,0,89,0,146,0,186,0,111,0,99,0,0,0,0,0,32,0,0,0,221,0,0,0,104,0,212,0,52,0,102,0,137,0,133,0,30,0,192,0,68,0,31,0,119,0,168,0,0,0,248,0,175,0,89,0,99,0,7,0,77,0,1,0,30,0,67,0,20,0,103,0,14,0,246,0,190,0,0,0,221,0,62,0,215,0,0,0,83,0,232,0,204,0,230,0,0,0,246,0,251,0,128,0,48,0,178,0,49,0,0,0,231,0,191,0,0,0,184,0,247,0,238,0,81,0,0,0,149,0,117,0,250,0,0,0,0,0,50,0,46,0,215,0,0,0,62,0,166,0,10,0,53,0,115,0,154,0,47,0,137,0,47,0,78,0,59,0,6,0,143,0,226,0,241,0,0,0,134,0,0,0,187,0,157,0,200,0,31,0,118,0,134,0,11,0,0,0,0,0,96,0,57,0,0,0,64,0,72,0,119,0,152,0,0,0,20,0,0,0,45,0,3,0,131,0,233,0,97,0,43,0,174,0,213,0,105,0,77,0,0,0,189,0,162,0,69,0,0,0,0,0,97,0,0,0,169,0,0,0,0,0,0,0,188,0,31,0,89,0,96,0,20,0,47,0,211,0,254,0,255,0,0,0,0,0,29,0,0,0,44,0,121,0,0,0,222,0,67,0,197,0,170,0,98,0,0,0,155,0,254,0,154,0,0,0,0,0,217,0,114,0,231,0,29,0,140,0,241,0,251,0,194,0,243,0,210,0,0,0,130,0,80,0,78,0,223,0,152,0,157,0,71,0,0,0,222,0,0,0,71,0,0,0,3,0,175,0,78,0,152,0,0,0,144,0,201,0,67,0,191,0,172,0,236,0,137,0,35,0,77,0,0,0,191,0,249,0,248,0,91,0,248,0,38,0,67,0,0,0,139,0,180,0,95,0,189,0,0,0,252,0,215,0,0,0,213,0,156,0,2,0,13,0,73,0,204,0,100,0,53,0,0,0,226,0,30,0,137,0,167,0,4,0,6,0,214,0,155,0,0,0,185,0,166,0,75,0,104,0,168,0,228,0,170,0,32,0,242,0,55,0,239,0,232,0,27,0,0,0,0,0,171,0,195,0,37,0,0,0,174,0,49,0,93,0,253,0,215,0,0,0,14,0,34,0,91,0,58,0,150,0,195,0,128,0,47,0,172,0,219,0,201,0,192,0,165,0,0,0,148,0,79,0,0,0,0,0,0,0,239,0,221,0,126,0,59,0,111,0,0,0,133,0,0,0,0,0,16,0,234,0,86,0,178,0,0,0,209,0,10,0,102,0,129,0,0,0,43,0,213,0,30,0,0,0,0,0,31,0,240,0,0,0,0,0,192,0,0,0,75,0,47,0,0,0,13,0,55,0,0,0,0,0,75,0,0,0,50,0,9,0,136,0,47,0,10,0,236,0,64,0,195,0,249,0,162,0,92,0,220,0,62,0,111,0,55,0,138,0,168,0,70,0,66,0,94,0,86,0,114,0,86,0,203,0,0,0,0,0,33,0,0,0,134,0,121,0,0,0,134,0,0,0,45,0,200,0,71,0,176,0,221,0,0,0,214,0,99,0,77,0,169,0,0,0,169,0,53,0,144,0,131,0,239,0,16,0,83,0,211,0,172,0,0,0,71,0,3,0,0,0,80,0,234,0,52,0,201,0,0,0,111,0,0,0,14,0,172,0,132,0,178,0,144,0,118,0,105,0,109,0,0,0,42,0,178,0,121,0,92,0,168,0,159,0,11,0,133,0,73,0,5,0,0,0,255,0,185,0,29,0,13,0,46,0,89,0,133,0,61,0,236,0,0,0,63,0,55,0,175,0,242,0,218,0,0,0,135,0,188,0,46,0,0,0,196,0,105,0,30,0,219,0,159,0,0,0,0,0,78,0,148,0,96,0,203,0,106,0,39,0,195,0,249,0,93,0,63,0,192,0,89,0,115,0,0,0,196,0,0,0,98,0,120,0,168,0,99,0,131,0,235,0,67,0,50,0,219,0,80,0,126,0,15,0,31,0,0,0,79,0,231,0,143,0,213,0,0,0,169,0,3,0,97,0,105,0,0,0,152,0,198,0,239,0,0,0,251,0,148,0,184,0,0,0,200,0,148,0,40,0,0,0,69,0,196,0,0,0,235,0,84,0,8,0,49,0,172,0,238,0,0,0,123,0,185,0,78,0,0,0,231,0,113,0,114,0,203,0,29,0,215,0,0,0,0,0,54,0,121,0,84,0,10,0,28,0,240,0,0,0,240,0,168,0,110,0,94,0,104,0,84,0,215,0,0,0,161,0,0,0,0,0,0,0,0,0,196,0,199,0,141,0,0,0,0,0,0,0,0,0,179,0,183,0,0,0,185,0,26,0,218,0,154,0,189,0,184,0,248,0,0,0,253,0,0,0,135,0,187,0,40,0,24,0,0,0,106,0,0,0,0,0,0,0,38,0,191,0,0,0,114,0,55,0,91,0,0,0,0,0,14,0,0,0,30,0,161,0,0,0,85,0,85,0,240,0,0,0,235,0,245,0,0,0,187,0,215,0,74,0,87,0,3,0,158,0,139,0,0,0,96,0,101,0,146,0,116,0,110,0,241,0,28,0,62,0,95,0,148,0,94,0,0,0,160,0,39,0,0,0,0,0,27,0,35,0,131,0,52,0,192,0,66,0,109,0,234,0,209,0,0,0,0,0,34,0,227,0,103,0,248,0,0,0,0,0,0,0,0,0,226,0,223,0,4,0,21,0,156,0,25,0,0,0,0,0,149,0,196,0,0,0,0,0,0,0,216,0,0,0,20,0,75,0,189,0,227,0,0,0,229,0,0,0,169,0,59,0,171,0,220,0,0,0,13,0,27,0,0,0,139,0,0,0,95,0,212,0,37,0,0,0,115,0,209,0,239,0,56,0,0,0,128,0,237,0,26,0,117,0,68,0,186,0,0,0,56,0,187,0,151,0,255,0,0,0,85,0,23,0,0,0,63,0,90,0,153,0,230,0,166,0,166,0,175,0,214,0,157,0,200,0,0,0,0,0,43,0,69,0,210,0,53,0,78,0,7,0,195,0,0,0,141,0,0,0,48,0,0,0,0,0,167,0,118,0,21,0,117,0,34,0,253,0,114,0,39,0,0,0,0,0,148,0,22,0,32,0,65,0,49,0,0,0,0,0,215,0,96,0,143,0,97,0,58,0,243,0,100,0,81,0,0,0,234,0,182,0,115,0,16,0,136,0,255,0,81,0,12,0,70,0,177,0,175,0,142,0,54,0,0,0,125,0,148,0,154,0,0,0,139,0,165,0,197,0,0,0,255,0,217,0,178,0,47,0,55,0,0,0,229,0,85,0,0,0,60,0,224,0,252,0,236,0,171,0,125,0,221,0,49,0,83,0,31,0,149,0,77,0,24,0,205,0,106,0,238,0,221,0,157,0,205,0,53,0,117,0,158,0,0,0,0,0,226,0,17,0,27,0,0,0,28,0,81,0,245,0,30,0,108,0,139,0,223,0,111,0,10,0,76,0,140,0,145,0,227,0,58,0,150,0,226,0,0,0,57,0,121,0,123,0,0,0,0,0,145,0,0,0,0,0,155,0,0,0,195,0,196,0,0,0,0,0,255,0,34,0,155,0,0,0,0,0,0,0,125,0,0,0,50,0,201,0,122,0,237,0,141,0,99,0,65,0,203,0,91,0,52,0,43,0,195,0,21,0,0,0,0,0,50,0,253,0,0,0,56,0,211,0,85,0,187,0,44,0,0,0,63,0,225,0,0,0,229,0,0,0,0,0,0,0,39,0,78,0,0,0,35,0,36,0,157,0,68,0,0,0,110,0,0,0,0,0,0,0,146,0,186,0,61,0,177,0,0,0,0,0,125,0,122,0,107,0,60,0,176,0,239,0,100,0,216,0,42,0,130,0,253,0,184,0,0,0,147,0,179,0,77,0,246,0,0,0,0,0,128,0,36,0,0,0,43,0,16,0,223,0,34,0,0,0,0,0,47,0,92,0,0,0,156,0,21,0,149,0,0,0,0,0);
signal scenario_full  : scenario_type := (22,31,22,30,210,31,210,30,101,31,54,31,56,31,251,31,80,31,80,30,224,31,17,31,159,31,32,31,110,31,175,31,237,31,237,30,53,31,239,31,19,31,31,31,217,31,89,31,146,31,186,31,111,31,99,31,99,30,99,29,32,31,32,30,221,31,221,30,104,31,212,31,52,31,102,31,137,31,133,31,30,31,192,31,68,31,31,31,119,31,168,31,168,30,248,31,175,31,89,31,99,31,7,31,77,31,1,31,30,31,67,31,20,31,103,31,14,31,246,31,190,31,190,30,221,31,62,31,215,31,215,30,83,31,232,31,204,31,230,31,230,30,246,31,251,31,128,31,48,31,178,31,49,31,49,30,231,31,191,31,191,30,184,31,247,31,238,31,81,31,81,30,149,31,117,31,250,31,250,30,250,29,50,31,46,31,215,31,215,30,62,31,166,31,10,31,53,31,115,31,154,31,47,31,137,31,47,31,78,31,59,31,6,31,143,31,226,31,241,31,241,30,134,31,134,30,187,31,157,31,200,31,31,31,118,31,134,31,11,31,11,30,11,29,96,31,57,31,57,30,64,31,72,31,119,31,152,31,152,30,20,31,20,30,45,31,3,31,131,31,233,31,97,31,43,31,174,31,213,31,105,31,77,31,77,30,189,31,162,31,69,31,69,30,69,29,97,31,97,30,169,31,169,30,169,29,169,28,188,31,31,31,89,31,96,31,20,31,47,31,211,31,254,31,255,31,255,30,255,29,29,31,29,30,44,31,121,31,121,30,222,31,67,31,197,31,170,31,98,31,98,30,155,31,254,31,154,31,154,30,154,29,217,31,114,31,231,31,29,31,140,31,241,31,251,31,194,31,243,31,210,31,210,30,130,31,80,31,78,31,223,31,152,31,157,31,71,31,71,30,222,31,222,30,71,31,71,30,3,31,175,31,78,31,152,31,152,30,144,31,201,31,67,31,191,31,172,31,236,31,137,31,35,31,77,31,77,30,191,31,249,31,248,31,91,31,248,31,38,31,67,31,67,30,139,31,180,31,95,31,189,31,189,30,252,31,215,31,215,30,213,31,156,31,2,31,13,31,73,31,204,31,100,31,53,31,53,30,226,31,30,31,137,31,167,31,4,31,6,31,214,31,155,31,155,30,185,31,166,31,75,31,104,31,168,31,228,31,170,31,32,31,242,31,55,31,239,31,232,31,27,31,27,30,27,29,171,31,195,31,37,31,37,30,174,31,49,31,93,31,253,31,215,31,215,30,14,31,34,31,91,31,58,31,150,31,195,31,128,31,47,31,172,31,219,31,201,31,192,31,165,31,165,30,148,31,79,31,79,30,79,29,79,28,239,31,221,31,126,31,59,31,111,31,111,30,133,31,133,30,133,29,16,31,234,31,86,31,178,31,178,30,209,31,10,31,102,31,129,31,129,30,43,31,213,31,30,31,30,30,30,29,31,31,240,31,240,30,240,29,192,31,192,30,75,31,47,31,47,30,13,31,55,31,55,30,55,29,75,31,75,30,50,31,9,31,136,31,47,31,10,31,236,31,64,31,195,31,249,31,162,31,92,31,220,31,62,31,111,31,55,31,138,31,168,31,70,31,66,31,94,31,86,31,114,31,86,31,203,31,203,30,203,29,33,31,33,30,134,31,121,31,121,30,134,31,134,30,45,31,200,31,71,31,176,31,221,31,221,30,214,31,99,31,77,31,169,31,169,30,169,31,53,31,144,31,131,31,239,31,16,31,83,31,211,31,172,31,172,30,71,31,3,31,3,30,80,31,234,31,52,31,201,31,201,30,111,31,111,30,14,31,172,31,132,31,178,31,144,31,118,31,105,31,109,31,109,30,42,31,178,31,121,31,92,31,168,31,159,31,11,31,133,31,73,31,5,31,5,30,255,31,185,31,29,31,13,31,46,31,89,31,133,31,61,31,236,31,236,30,63,31,55,31,175,31,242,31,218,31,218,30,135,31,188,31,46,31,46,30,196,31,105,31,30,31,219,31,159,31,159,30,159,29,78,31,148,31,96,31,203,31,106,31,39,31,195,31,249,31,93,31,63,31,192,31,89,31,115,31,115,30,196,31,196,30,98,31,120,31,168,31,99,31,131,31,235,31,67,31,50,31,219,31,80,31,126,31,15,31,31,31,31,30,79,31,231,31,143,31,213,31,213,30,169,31,3,31,97,31,105,31,105,30,152,31,198,31,239,31,239,30,251,31,148,31,184,31,184,30,200,31,148,31,40,31,40,30,69,31,196,31,196,30,235,31,84,31,8,31,49,31,172,31,238,31,238,30,123,31,185,31,78,31,78,30,231,31,113,31,114,31,203,31,29,31,215,31,215,30,215,29,54,31,121,31,84,31,10,31,28,31,240,31,240,30,240,31,168,31,110,31,94,31,104,31,84,31,215,31,215,30,161,31,161,30,161,29,161,28,161,27,196,31,199,31,141,31,141,30,141,29,141,28,141,27,179,31,183,31,183,30,185,31,26,31,218,31,154,31,189,31,184,31,248,31,248,30,253,31,253,30,135,31,187,31,40,31,24,31,24,30,106,31,106,30,106,29,106,28,38,31,191,31,191,30,114,31,55,31,91,31,91,30,91,29,14,31,14,30,30,31,161,31,161,30,85,31,85,31,240,31,240,30,235,31,245,31,245,30,187,31,215,31,74,31,87,31,3,31,158,31,139,31,139,30,96,31,101,31,146,31,116,31,110,31,241,31,28,31,62,31,95,31,148,31,94,31,94,30,160,31,39,31,39,30,39,29,27,31,35,31,131,31,52,31,192,31,66,31,109,31,234,31,209,31,209,30,209,29,34,31,227,31,103,31,248,31,248,30,248,29,248,28,248,27,226,31,223,31,4,31,21,31,156,31,25,31,25,30,25,29,149,31,196,31,196,30,196,29,196,28,216,31,216,30,20,31,75,31,189,31,227,31,227,30,229,31,229,30,169,31,59,31,171,31,220,31,220,30,13,31,27,31,27,30,139,31,139,30,95,31,212,31,37,31,37,30,115,31,209,31,239,31,56,31,56,30,128,31,237,31,26,31,117,31,68,31,186,31,186,30,56,31,187,31,151,31,255,31,255,30,85,31,23,31,23,30,63,31,90,31,153,31,230,31,166,31,166,31,175,31,214,31,157,31,200,31,200,30,200,29,43,31,69,31,210,31,53,31,78,31,7,31,195,31,195,30,141,31,141,30,48,31,48,30,48,29,167,31,118,31,21,31,117,31,34,31,253,31,114,31,39,31,39,30,39,29,148,31,22,31,32,31,65,31,49,31,49,30,49,29,215,31,96,31,143,31,97,31,58,31,243,31,100,31,81,31,81,30,234,31,182,31,115,31,16,31,136,31,255,31,81,31,12,31,70,31,177,31,175,31,142,31,54,31,54,30,125,31,148,31,154,31,154,30,139,31,165,31,197,31,197,30,255,31,217,31,178,31,47,31,55,31,55,30,229,31,85,31,85,30,60,31,224,31,252,31,236,31,171,31,125,31,221,31,49,31,83,31,31,31,149,31,77,31,24,31,205,31,106,31,238,31,221,31,157,31,205,31,53,31,117,31,158,31,158,30,158,29,226,31,17,31,27,31,27,30,28,31,81,31,245,31,30,31,108,31,139,31,223,31,111,31,10,31,76,31,140,31,145,31,227,31,58,31,150,31,226,31,226,30,57,31,121,31,123,31,123,30,123,29,145,31,145,30,145,29,155,31,155,30,195,31,196,31,196,30,196,29,255,31,34,31,155,31,155,30,155,29,155,28,125,31,125,30,50,31,201,31,122,31,237,31,141,31,99,31,65,31,203,31,91,31,52,31,43,31,195,31,21,31,21,30,21,29,50,31,253,31,253,30,56,31,211,31,85,31,187,31,44,31,44,30,63,31,225,31,225,30,229,31,229,30,229,29,229,28,39,31,78,31,78,30,35,31,36,31,157,31,68,31,68,30,110,31,110,30,110,29,110,28,146,31,186,31,61,31,177,31,177,30,177,29,125,31,122,31,107,31,60,31,176,31,239,31,100,31,216,31,42,31,130,31,253,31,184,31,184,30,147,31,179,31,77,31,246,31,246,30,246,29,128,31,36,31,36,30,43,31,16,31,223,31,34,31,34,30,34,29,47,31,92,31,92,30,156,31,21,31,149,31,149,30,149,29);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
