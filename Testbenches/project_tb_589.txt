-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 396;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (75,0,143,0,245,0,187,0,186,0,0,0,0,0,88,0,230,0,0,0,100,0,63,0,241,0,167,0,0,0,2,0,134,0,149,0,168,0,0,0,126,0,0,0,133,0,92,0,0,0,0,0,0,0,103,0,91,0,48,0,192,0,246,0,248,0,58,0,61,0,125,0,13,0,5,0,0,0,51,0,18,0,105,0,0,0,133,0,18,0,10,0,67,0,0,0,102,0,28,0,169,0,99,0,39,0,191,0,0,0,12,0,0,0,14,0,29,0,0,0,152,0,105,0,89,0,229,0,0,0,39,0,0,0,247,0,253,0,232,0,227,0,0,0,192,0,165,0,20,0,184,0,174,0,224,0,113,0,1,0,191,0,76,0,79,0,0,0,0,0,55,0,74,0,96,0,74,0,46,0,159,0,1,0,157,0,180,0,99,0,248,0,68,0,247,0,63,0,173,0,53,0,5,0,37,0,237,0,156,0,0,0,201,0,0,0,0,0,33,0,38,0,0,0,0,0,118,0,0,0,0,0,0,0,210,0,39,0,23,0,16,0,222,0,150,0,41,0,0,0,142,0,190,0,0,0,225,0,0,0,172,0,252,0,137,0,39,0,47,0,0,0,166,0,26,0,74,0,46,0,64,0,0,0,76,0,128,0,183,0,66,0,85,0,19,0,116,0,163,0,84,0,197,0,104,0,0,0,144,0,232,0,0,0,211,0,0,0,212,0,234,0,252,0,48,0,204,0,0,0,175,0,223,0,165,0,5,0,0,0,62,0,23,0,254,0,108,0,158,0,209,0,14,0,0,0,211,0,102,0,102,0,145,0,175,0,98,0,0,0,37,0,158,0,241,0,138,0,253,0,211,0,239,0,73,0,122,0,103,0,0,0,255,0,0,0,251,0,40,0,133,0,0,0,0,0,0,0,238,0,242,0,157,0,0,0,0,0,208,0,142,0,53,0,59,0,114,0,205,0,115,0,0,0,95,0,136,0,121,0,164,0,191,0,7,0,122,0,219,0,104,0,47,0,160,0,22,0,0,0,63,0,128,0,175,0,0,0,253,0,8,0,0,0,93,0,0,0,0,0,227,0,62,0,134,0,11,0,231,0,36,0,218,0,121,0,0,0,114,0,0,0,0,0,14,0,227,0,230,0,0,0,0,0,124,0,66,0,176,0,0,0,0,0,0,0,151,0,104,0,0,0,107,0,166,0,0,0,3,0,34,0,196,0,91,0,0,0,83,0,21,0,94,0,0,0,0,0,38,0,224,0,237,0,243,0,123,0,88,0,0,0,181,0,44,0,126,0,66,0,23,0,123,0,201,0,126,0,37,0,178,0,179,0,77,0,191,0,205,0,66,0,170,0,0,0,45,0,216,0,0,0,0,0,90,0,0,0,229,0,41,0,192,0,131,0,175,0,207,0,62,0,55,0,244,0,131,0,0,0,0,0,183,0,0,0,0,0,0,0,129,0,93,0,3,0,105,0,54,0,0,0,198,0,185,0,23,0,18,0,161,0,15,0,32,0,169,0,117,0,248,0,193,0,187,0,132,0,0,0,0,0,220,0,0,0,0,0,0,0,0,0,73,0,183,0,0,0,131,0,0,0,231,0,65,0,34,0,61,0,0,0,3,0,95,0,107,0,222,0,12,0,0,0,72,0,24,0,190,0,179,0,0,0,66,0,137,0,50,0,252,0,0,0,0,0,0,0,102,0,81,0,164,0,124,0,42,0,21,0,100,0,68,0,0,0,78,0,0,0,151,0,255,0,118,0,95,0,84,0,138,0);
signal scenario_full  : scenario_type := (75,31,143,31,245,31,187,31,186,31,186,30,186,29,88,31,230,31,230,30,100,31,63,31,241,31,167,31,167,30,2,31,134,31,149,31,168,31,168,30,126,31,126,30,133,31,92,31,92,30,92,29,92,28,103,31,91,31,48,31,192,31,246,31,248,31,58,31,61,31,125,31,13,31,5,31,5,30,51,31,18,31,105,31,105,30,133,31,18,31,10,31,67,31,67,30,102,31,28,31,169,31,99,31,39,31,191,31,191,30,12,31,12,30,14,31,29,31,29,30,152,31,105,31,89,31,229,31,229,30,39,31,39,30,247,31,253,31,232,31,227,31,227,30,192,31,165,31,20,31,184,31,174,31,224,31,113,31,1,31,191,31,76,31,79,31,79,30,79,29,55,31,74,31,96,31,74,31,46,31,159,31,1,31,157,31,180,31,99,31,248,31,68,31,247,31,63,31,173,31,53,31,5,31,37,31,237,31,156,31,156,30,201,31,201,30,201,29,33,31,38,31,38,30,38,29,118,31,118,30,118,29,118,28,210,31,39,31,23,31,16,31,222,31,150,31,41,31,41,30,142,31,190,31,190,30,225,31,225,30,172,31,252,31,137,31,39,31,47,31,47,30,166,31,26,31,74,31,46,31,64,31,64,30,76,31,128,31,183,31,66,31,85,31,19,31,116,31,163,31,84,31,197,31,104,31,104,30,144,31,232,31,232,30,211,31,211,30,212,31,234,31,252,31,48,31,204,31,204,30,175,31,223,31,165,31,5,31,5,30,62,31,23,31,254,31,108,31,158,31,209,31,14,31,14,30,211,31,102,31,102,31,145,31,175,31,98,31,98,30,37,31,158,31,241,31,138,31,253,31,211,31,239,31,73,31,122,31,103,31,103,30,255,31,255,30,251,31,40,31,133,31,133,30,133,29,133,28,238,31,242,31,157,31,157,30,157,29,208,31,142,31,53,31,59,31,114,31,205,31,115,31,115,30,95,31,136,31,121,31,164,31,191,31,7,31,122,31,219,31,104,31,47,31,160,31,22,31,22,30,63,31,128,31,175,31,175,30,253,31,8,31,8,30,93,31,93,30,93,29,227,31,62,31,134,31,11,31,231,31,36,31,218,31,121,31,121,30,114,31,114,30,114,29,14,31,227,31,230,31,230,30,230,29,124,31,66,31,176,31,176,30,176,29,176,28,151,31,104,31,104,30,107,31,166,31,166,30,3,31,34,31,196,31,91,31,91,30,83,31,21,31,94,31,94,30,94,29,38,31,224,31,237,31,243,31,123,31,88,31,88,30,181,31,44,31,126,31,66,31,23,31,123,31,201,31,126,31,37,31,178,31,179,31,77,31,191,31,205,31,66,31,170,31,170,30,45,31,216,31,216,30,216,29,90,31,90,30,229,31,41,31,192,31,131,31,175,31,207,31,62,31,55,31,244,31,131,31,131,30,131,29,183,31,183,30,183,29,183,28,129,31,93,31,3,31,105,31,54,31,54,30,198,31,185,31,23,31,18,31,161,31,15,31,32,31,169,31,117,31,248,31,193,31,187,31,132,31,132,30,132,29,220,31,220,30,220,29,220,28,220,27,73,31,183,31,183,30,131,31,131,30,231,31,65,31,34,31,61,31,61,30,3,31,95,31,107,31,222,31,12,31,12,30,72,31,24,31,190,31,179,31,179,30,66,31,137,31,50,31,252,31,252,30,252,29,252,28,102,31,81,31,164,31,124,31,42,31,21,31,100,31,68,31,68,30,78,31,78,30,151,31,255,31,118,31,95,31,84,31,138,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
