-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 641;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (191,0,136,0,39,0,200,0,38,0,8,0,189,0,173,0,222,0,128,0,113,0,199,0,113,0,212,0,161,0,0,0,0,0,23,0,136,0,248,0,131,0,101,0,0,0,230,0,98,0,163,0,0,0,0,0,136,0,43,0,222,0,16,0,228,0,123,0,39,0,55,0,0,0,0,0,0,0,123,0,235,0,0,0,178,0,62,0,0,0,124,0,178,0,0,0,255,0,0,0,66,0,100,0,145,0,108,0,186,0,145,0,79,0,150,0,160,0,14,0,101,0,248,0,128,0,124,0,27,0,223,0,0,0,0,0,59,0,0,0,0,0,0,0,167,0,0,0,77,0,131,0,66,0,238,0,78,0,54,0,157,0,0,0,157,0,54,0,102,0,162,0,44,0,3,0,166,0,0,0,77,0,254,0,40,0,0,0,156,0,165,0,77,0,164,0,30,0,0,0,90,0,201,0,174,0,16,0,0,0,0,0,0,0,134,0,88,0,234,0,0,0,137,0,3,0,13,0,111,0,0,0,248,0,55,0,144,0,61,0,149,0,29,0,0,0,170,0,192,0,44,0,235,0,161,0,234,0,208,0,232,0,163,0,229,0,3,0,191,0,203,0,113,0,57,0,86,0,136,0,87,0,152,0,0,0,65,0,96,0,204,0,231,0,136,0,77,0,50,0,251,0,169,0,174,0,159,0,25,0,140,0,187,0,251,0,6,0,134,0,0,0,0,0,229,0,91,0,219,0,205,0,2,0,232,0,210,0,151,0,100,0,135,0,220,0,13,0,56,0,30,0,109,0,15,0,195,0,0,0,113,0,2,0,27,0,189,0,151,0,255,0,111,0,138,0,5,0,123,0,0,0,76,0,0,0,0,0,0,0,0,0,145,0,0,0,164,0,0,0,81,0,114,0,134,0,45,0,127,0,14,0,254,0,94,0,235,0,206,0,185,0,30,0,244,0,138,0,76,0,231,0,203,0,119,0,25,0,69,0,136,0,0,0,120,0,93,0,223,0,69,0,207,0,173,0,80,0,83,0,246,0,16,0,0,0,34,0,211,0,162,0,0,0,0,0,0,0,141,0,107,0,101,0,0,0,0,0,128,0,141,0,0,0,108,0,54,0,98,0,254,0,169,0,77,0,1,0,71,0,102,0,67,0,118,0,0,0,195,0,0,0,92,0,179,0,217,0,47,0,9,0,0,0,27,0,133,0,225,0,66,0,68,0,75,0,114,0,181,0,155,0,0,0,39,0,22,0,146,0,240,0,3,0,184,0,227,0,71,0,125,0,254,0,152,0,33,0,70,0,198,0,74,0,134,0,59,0,0,0,0,0,12,0,157,0,60,0,207,0,0,0,60,0,89,0,0,0,68,0,62,0,48,0,217,0,196,0,226,0,0,0,2,0,21,0,234,0,217,0,58,0,109,0,75,0,196,0,128,0,0,0,231,0,62,0,117,0,144,0,210,0,35,0,145,0,0,0,113,0,190,0,0,0,114,0,239,0,156,0,205,0,94,0,69,0,145,0,52,0,161,0,137,0,0,0,254,0,99,0,153,0,0,0,0,0,0,0,24,0,141,0,214,0,181,0,6,0,63,0,0,0,112,0,217,0,173,0,63,0,58,0,41,0,182,0,0,0,167,0,86,0,0,0,251,0,91,0,114,0,200,0,104,0,151,0,0,0,79,0,105,0,8,0,14,0,0,0,207,0,0,0,210,0,79,0,187,0,240,0,180,0,0,0,141,0,0,0,0,0,33,0,137,0,0,0,0,0,60,0,6,0,44,0,23,0,84,0,192,0,127,0,209,0,213,0,161,0,63,0,135,0,214,0,29,0,0,0,210,0,0,0,0,0,182,0,250,0,4,0,117,0,46,0,105,0,192,0,165,0,44,0,45,0,238,0,52,0,145,0,209,0,159,0,0,0,250,0,171,0,221,0,173,0,3,0,254,0,0,0,0,0,226,0,229,0,0,0,0,0,153,0,119,0,127,0,28,0,33,0,88,0,151,0,11,0,183,0,88,0,141,0,69,0,78,0,193,0,219,0,81,0,0,0,188,0,191,0,0,0,194,0,253,0,19,0,158,0,245,0,40,0,26,0,66,0,0,0,254,0,213,0,235,0,191,0,169,0,160,0,122,0,0,0,3,0,143,0,54,0,0,0,53,0,0,0,178,0,55,0,146,0,40,0,113,0,149,0,0,0,44,0,8,0,61,0,82,0,30,0,0,0,182,0,192,0,95,0,102,0,226,0,228,0,190,0,154,0,218,0,43,0,146,0,232,0,233,0,102,0,48,0,2,0,71,0,162,0,88,0,233,0,18,0,161,0,48,0,0,0,138,0,197,0,238,0,157,0,74,0,0,0,0,0,0,0,232,0,122,0,187,0,226,0,219,0,61,0,7,0,210,0,27,0,202,0,225,0,155,0,0,0,0,0,17,0,193,0,76,0,219,0,217,0,134,0,192,0,0,0,117,0,51,0,0,0,52,0,0,0,63,0,66,0,0,0,200,0,0,0,235,0,187,0,238,0,0,0,36,0,0,0,240,0,14,0,81,0,75,0,215,0,34,0,87,0,17,0,202,0,0,0,142,0,233,0,0,0,92,0,0,0,169,0,0,0,0,0,185,0,141,0,193,0,141,0,77,0,34,0,0,0,117,0,114,0,10,0,63,0,165,0,98,0,206,0,26,0,22,0,74,0,116,0,113,0,0,0,71,0,203,0,64,0,137,0,114,0,49,0,0,0,101,0,237,0,182,0,249,0,177,0,0,0,180,0,165,0,227,0,31,0,152,0,54,0,0,0,45,0,226,0,12,0,244,0,0,0,0,0,101,0,0,0,77,0,41,0,105,0,74,0,0,0,229,0,180,0,199,0,243,0);
signal scenario_full  : scenario_type := (191,31,136,31,39,31,200,31,38,31,8,31,189,31,173,31,222,31,128,31,113,31,199,31,113,31,212,31,161,31,161,30,161,29,23,31,136,31,248,31,131,31,101,31,101,30,230,31,98,31,163,31,163,30,163,29,136,31,43,31,222,31,16,31,228,31,123,31,39,31,55,31,55,30,55,29,55,28,123,31,235,31,235,30,178,31,62,31,62,30,124,31,178,31,178,30,255,31,255,30,66,31,100,31,145,31,108,31,186,31,145,31,79,31,150,31,160,31,14,31,101,31,248,31,128,31,124,31,27,31,223,31,223,30,223,29,59,31,59,30,59,29,59,28,167,31,167,30,77,31,131,31,66,31,238,31,78,31,54,31,157,31,157,30,157,31,54,31,102,31,162,31,44,31,3,31,166,31,166,30,77,31,254,31,40,31,40,30,156,31,165,31,77,31,164,31,30,31,30,30,90,31,201,31,174,31,16,31,16,30,16,29,16,28,134,31,88,31,234,31,234,30,137,31,3,31,13,31,111,31,111,30,248,31,55,31,144,31,61,31,149,31,29,31,29,30,170,31,192,31,44,31,235,31,161,31,234,31,208,31,232,31,163,31,229,31,3,31,191,31,203,31,113,31,57,31,86,31,136,31,87,31,152,31,152,30,65,31,96,31,204,31,231,31,136,31,77,31,50,31,251,31,169,31,174,31,159,31,25,31,140,31,187,31,251,31,6,31,134,31,134,30,134,29,229,31,91,31,219,31,205,31,2,31,232,31,210,31,151,31,100,31,135,31,220,31,13,31,56,31,30,31,109,31,15,31,195,31,195,30,113,31,2,31,27,31,189,31,151,31,255,31,111,31,138,31,5,31,123,31,123,30,76,31,76,30,76,29,76,28,76,27,145,31,145,30,164,31,164,30,81,31,114,31,134,31,45,31,127,31,14,31,254,31,94,31,235,31,206,31,185,31,30,31,244,31,138,31,76,31,231,31,203,31,119,31,25,31,69,31,136,31,136,30,120,31,93,31,223,31,69,31,207,31,173,31,80,31,83,31,246,31,16,31,16,30,34,31,211,31,162,31,162,30,162,29,162,28,141,31,107,31,101,31,101,30,101,29,128,31,141,31,141,30,108,31,54,31,98,31,254,31,169,31,77,31,1,31,71,31,102,31,67,31,118,31,118,30,195,31,195,30,92,31,179,31,217,31,47,31,9,31,9,30,27,31,133,31,225,31,66,31,68,31,75,31,114,31,181,31,155,31,155,30,39,31,22,31,146,31,240,31,3,31,184,31,227,31,71,31,125,31,254,31,152,31,33,31,70,31,198,31,74,31,134,31,59,31,59,30,59,29,12,31,157,31,60,31,207,31,207,30,60,31,89,31,89,30,68,31,62,31,48,31,217,31,196,31,226,31,226,30,2,31,21,31,234,31,217,31,58,31,109,31,75,31,196,31,128,31,128,30,231,31,62,31,117,31,144,31,210,31,35,31,145,31,145,30,113,31,190,31,190,30,114,31,239,31,156,31,205,31,94,31,69,31,145,31,52,31,161,31,137,31,137,30,254,31,99,31,153,31,153,30,153,29,153,28,24,31,141,31,214,31,181,31,6,31,63,31,63,30,112,31,217,31,173,31,63,31,58,31,41,31,182,31,182,30,167,31,86,31,86,30,251,31,91,31,114,31,200,31,104,31,151,31,151,30,79,31,105,31,8,31,14,31,14,30,207,31,207,30,210,31,79,31,187,31,240,31,180,31,180,30,141,31,141,30,141,29,33,31,137,31,137,30,137,29,60,31,6,31,44,31,23,31,84,31,192,31,127,31,209,31,213,31,161,31,63,31,135,31,214,31,29,31,29,30,210,31,210,30,210,29,182,31,250,31,4,31,117,31,46,31,105,31,192,31,165,31,44,31,45,31,238,31,52,31,145,31,209,31,159,31,159,30,250,31,171,31,221,31,173,31,3,31,254,31,254,30,254,29,226,31,229,31,229,30,229,29,153,31,119,31,127,31,28,31,33,31,88,31,151,31,11,31,183,31,88,31,141,31,69,31,78,31,193,31,219,31,81,31,81,30,188,31,191,31,191,30,194,31,253,31,19,31,158,31,245,31,40,31,26,31,66,31,66,30,254,31,213,31,235,31,191,31,169,31,160,31,122,31,122,30,3,31,143,31,54,31,54,30,53,31,53,30,178,31,55,31,146,31,40,31,113,31,149,31,149,30,44,31,8,31,61,31,82,31,30,31,30,30,182,31,192,31,95,31,102,31,226,31,228,31,190,31,154,31,218,31,43,31,146,31,232,31,233,31,102,31,48,31,2,31,71,31,162,31,88,31,233,31,18,31,161,31,48,31,48,30,138,31,197,31,238,31,157,31,74,31,74,30,74,29,74,28,232,31,122,31,187,31,226,31,219,31,61,31,7,31,210,31,27,31,202,31,225,31,155,31,155,30,155,29,17,31,193,31,76,31,219,31,217,31,134,31,192,31,192,30,117,31,51,31,51,30,52,31,52,30,63,31,66,31,66,30,200,31,200,30,235,31,187,31,238,31,238,30,36,31,36,30,240,31,14,31,81,31,75,31,215,31,34,31,87,31,17,31,202,31,202,30,142,31,233,31,233,30,92,31,92,30,169,31,169,30,169,29,185,31,141,31,193,31,141,31,77,31,34,31,34,30,117,31,114,31,10,31,63,31,165,31,98,31,206,31,26,31,22,31,74,31,116,31,113,31,113,30,71,31,203,31,64,31,137,31,114,31,49,31,49,30,101,31,237,31,182,31,249,31,177,31,177,30,180,31,165,31,227,31,31,31,152,31,54,31,54,30,45,31,226,31,12,31,244,31,244,30,244,29,101,31,101,30,77,31,41,31,105,31,74,31,74,30,229,31,180,31,199,31,243,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
