-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 648;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (3,0,140,0,123,0,198,0,0,0,104,0,19,0,0,0,171,0,19,0,246,0,6,0,34,0,0,0,0,0,207,0,0,0,0,0,57,0,165,0,198,0,162,0,64,0,113,0,149,0,83,0,56,0,95,0,16,0,3,0,16,0,242,0,245,0,28,0,238,0,169,0,168,0,0,0,0,0,120,0,146,0,135,0,186,0,25,0,87,0,163,0,79,0,33,0,96,0,186,0,104,0,110,0,33,0,74,0,180,0,96,0,214,0,0,0,221,0,20,0,235,0,160,0,178,0,0,0,157,0,0,0,186,0,51,0,146,0,126,0,19,0,209,0,122,0,107,0,136,0,221,0,173,0,254,0,167,0,1,0,98,0,0,0,72,0,0,0,0,0,31,0,69,0,120,0,189,0,0,0,96,0,0,0,208,0,196,0,200,0,238,0,196,0,215,0,242,0,144,0,83,0,225,0,37,0,96,0,121,0,242,0,193,0,183,0,0,0,197,0,30,0,0,0,98,0,0,0,154,0,0,0,71,0,200,0,211,0,160,0,243,0,223,0,147,0,0,0,216,0,179,0,0,0,160,0,215,0,212,0,58,0,192,0,0,0,64,0,212,0,117,0,0,0,81,0,0,0,81,0,0,0,235,0,0,0,141,0,129,0,86,0,187,0,254,0,255,0,20,0,0,0,118,0,65,0,0,0,155,0,0,0,0,0,47,0,0,0,73,0,148,0,127,0,0,0,27,0,75,0,215,0,63,0,116,0,244,0,248,0,51,0,176,0,141,0,110,0,209,0,99,0,187,0,254,0,161,0,82,0,166,0,0,0,83,0,236,0,167,0,27,0,0,0,104,0,158,0,86,0,156,0,0,0,234,0,237,0,69,0,214,0,0,0,120,0,38,0,74,0,64,0,0,0,84,0,150,0,195,0,89,0,109,0,33,0,10,0,117,0,64,0,199,0,98,0,141,0,178,0,0,0,135,0,36,0,88,0,0,0,0,0,138,0,0,0,143,0,188,0,0,0,3,0,0,0,148,0,160,0,165,0,144,0,0,0,163,0,0,0,0,0,145,0,197,0,0,0,252,0,100,0,217,0,211,0,220,0,122,0,144,0,196,0,149,0,219,0,0,0,100,0,231,0,0,0,62,0,4,0,203,0,0,0,108,0,251,0,181,0,0,0,186,0,232,0,0,0,0,0,88,0,0,0,225,0,235,0,135,0,15,0,181,0,0,0,155,0,80,0,27,0,227,0,168,0,59,0,64,0,97,0,197,0,91,0,240,0,0,0,95,0,253,0,91,0,0,0,102,0,65,0,28,0,10,0,0,0,65,0,73,0,7,0,96,0,0,0,118,0,70,0,252,0,255,0,0,0,127,0,0,0,4,0,159,0,162,0,80,0,81,0,37,0,191,0,238,0,18,0,158,0,31,0,102,0,232,0,243,0,199,0,78,0,100,0,137,0,83,0,37,0,67,0,66,0,28,0,46,0,35,0,45,0,48,0,168,0,31,0,0,0,4,0,0,0,128,0,177,0,0,0,239,0,33,0,99,0,155,0,0,0,76,0,4,0,0,0,41,0,184,0,226,0,95,0,118,0,105,0,44,0,0,0,0,0,143,0,229,0,0,0,67,0,123,0,15,0,131,0,93,0,135,0,114,0,0,0,167,0,147,0,13,0,141,0,77,0,111,0,174,0,213,0,233,0,0,0,0,0,220,0,0,0,43,0,0,0,187,0,243,0,140,0,122,0,34,0,216,0,0,0,97,0,254,0,225,0,13,0,0,0,219,0,128,0,0,0,14,0,170,0,0,0,100,0,128,0,70,0,126,0,152,0,203,0,50,0,210,0,38,0,0,0,40,0,0,0,0,0,187,0,220,0,181,0,176,0,175,0,61,0,35,0,93,0,0,0,151,0,207,0,0,0,0,0,46,0,1,0,174,0,151,0,162,0,195,0,224,0,138,0,7,0,55,0,231,0,142,0,130,0,166,0,0,0,100,0,250,0,249,0,4,0,212,0,131,0,63,0,38,0,16,0,91,0,82,0,165,0,0,0,16,0,160,0,0,0,156,0,66,0,132,0,17,0,108,0,149,0,174,0,108,0,0,0,0,0,0,0,0,0,160,0,57,0,132,0,56,0,241,0,0,0,195,0,231,0,16,0,89,0,215,0,99,0,14,0,128,0,0,0,174,0,103,0,85,0,0,0,158,0,16,0,0,0,98,0,197,0,175,0,101,0,172,0,55,0,0,0,0,0,27,0,198,0,250,0,147,0,0,0,79,0,156,0,192,0,212,0,136,0,238,0,0,0,191,0,0,0,4,0,224,0,211,0,18,0,19,0,0,0,156,0,173,0,162,0,255,0,245,0,0,0,242,0,78,0,209,0,57,0,55,0,217,0,30,0,35,0,104,0,229,0,0,0,41,0,0,0,7,0,137,0,3,0,0,0,170,0,179,0,170,0,202,0,53,0,0,0,124,0,0,0,74,0,80,0,14,0,215,0,236,0,227,0,98,0,0,0,29,0,104,0,0,0,137,0,171,0,125,0,145,0,8,0,141,0,170,0,165,0,206,0,0,0,168,0,0,0,0,0,24,0,144,0,27,0,197,0,254,0,0,0,34,0,0,0,207,0,132,0,147,0,105,0,92,0,49,0,0,0,0,0,8,0,2,0,153,0,2,0,52,0,83,0,98,0,86,0,0,0,182,0,170,0,13,0,8,0,0,0,242,0,0,0,0,0,13,0,233,0,0,0,197,0,128,0,0,0,48,0,0,0,213,0,251,0,87,0,15,0,129,0,0,0,0,0,108,0,3,0,0,0,105,0,133,0,179,0,151,0,140,0,213,0,182,0,212,0,154,0,0,0,81,0,68,0,187,0,6,0,44,0,0,0,96,0,160,0,148,0,203,0,154,0);
signal scenario_full  : scenario_type := (3,31,140,31,123,31,198,31,198,30,104,31,19,31,19,30,171,31,19,31,246,31,6,31,34,31,34,30,34,29,207,31,207,30,207,29,57,31,165,31,198,31,162,31,64,31,113,31,149,31,83,31,56,31,95,31,16,31,3,31,16,31,242,31,245,31,28,31,238,31,169,31,168,31,168,30,168,29,120,31,146,31,135,31,186,31,25,31,87,31,163,31,79,31,33,31,96,31,186,31,104,31,110,31,33,31,74,31,180,31,96,31,214,31,214,30,221,31,20,31,235,31,160,31,178,31,178,30,157,31,157,30,186,31,51,31,146,31,126,31,19,31,209,31,122,31,107,31,136,31,221,31,173,31,254,31,167,31,1,31,98,31,98,30,72,31,72,30,72,29,31,31,69,31,120,31,189,31,189,30,96,31,96,30,208,31,196,31,200,31,238,31,196,31,215,31,242,31,144,31,83,31,225,31,37,31,96,31,121,31,242,31,193,31,183,31,183,30,197,31,30,31,30,30,98,31,98,30,154,31,154,30,71,31,200,31,211,31,160,31,243,31,223,31,147,31,147,30,216,31,179,31,179,30,160,31,215,31,212,31,58,31,192,31,192,30,64,31,212,31,117,31,117,30,81,31,81,30,81,31,81,30,235,31,235,30,141,31,129,31,86,31,187,31,254,31,255,31,20,31,20,30,118,31,65,31,65,30,155,31,155,30,155,29,47,31,47,30,73,31,148,31,127,31,127,30,27,31,75,31,215,31,63,31,116,31,244,31,248,31,51,31,176,31,141,31,110,31,209,31,99,31,187,31,254,31,161,31,82,31,166,31,166,30,83,31,236,31,167,31,27,31,27,30,104,31,158,31,86,31,156,31,156,30,234,31,237,31,69,31,214,31,214,30,120,31,38,31,74,31,64,31,64,30,84,31,150,31,195,31,89,31,109,31,33,31,10,31,117,31,64,31,199,31,98,31,141,31,178,31,178,30,135,31,36,31,88,31,88,30,88,29,138,31,138,30,143,31,188,31,188,30,3,31,3,30,148,31,160,31,165,31,144,31,144,30,163,31,163,30,163,29,145,31,197,31,197,30,252,31,100,31,217,31,211,31,220,31,122,31,144,31,196,31,149,31,219,31,219,30,100,31,231,31,231,30,62,31,4,31,203,31,203,30,108,31,251,31,181,31,181,30,186,31,232,31,232,30,232,29,88,31,88,30,225,31,235,31,135,31,15,31,181,31,181,30,155,31,80,31,27,31,227,31,168,31,59,31,64,31,97,31,197,31,91,31,240,31,240,30,95,31,253,31,91,31,91,30,102,31,65,31,28,31,10,31,10,30,65,31,73,31,7,31,96,31,96,30,118,31,70,31,252,31,255,31,255,30,127,31,127,30,4,31,159,31,162,31,80,31,81,31,37,31,191,31,238,31,18,31,158,31,31,31,102,31,232,31,243,31,199,31,78,31,100,31,137,31,83,31,37,31,67,31,66,31,28,31,46,31,35,31,45,31,48,31,168,31,31,31,31,30,4,31,4,30,128,31,177,31,177,30,239,31,33,31,99,31,155,31,155,30,76,31,4,31,4,30,41,31,184,31,226,31,95,31,118,31,105,31,44,31,44,30,44,29,143,31,229,31,229,30,67,31,123,31,15,31,131,31,93,31,135,31,114,31,114,30,167,31,147,31,13,31,141,31,77,31,111,31,174,31,213,31,233,31,233,30,233,29,220,31,220,30,43,31,43,30,187,31,243,31,140,31,122,31,34,31,216,31,216,30,97,31,254,31,225,31,13,31,13,30,219,31,128,31,128,30,14,31,170,31,170,30,100,31,128,31,70,31,126,31,152,31,203,31,50,31,210,31,38,31,38,30,40,31,40,30,40,29,187,31,220,31,181,31,176,31,175,31,61,31,35,31,93,31,93,30,151,31,207,31,207,30,207,29,46,31,1,31,174,31,151,31,162,31,195,31,224,31,138,31,7,31,55,31,231,31,142,31,130,31,166,31,166,30,100,31,250,31,249,31,4,31,212,31,131,31,63,31,38,31,16,31,91,31,82,31,165,31,165,30,16,31,160,31,160,30,156,31,66,31,132,31,17,31,108,31,149,31,174,31,108,31,108,30,108,29,108,28,108,27,160,31,57,31,132,31,56,31,241,31,241,30,195,31,231,31,16,31,89,31,215,31,99,31,14,31,128,31,128,30,174,31,103,31,85,31,85,30,158,31,16,31,16,30,98,31,197,31,175,31,101,31,172,31,55,31,55,30,55,29,27,31,198,31,250,31,147,31,147,30,79,31,156,31,192,31,212,31,136,31,238,31,238,30,191,31,191,30,4,31,224,31,211,31,18,31,19,31,19,30,156,31,173,31,162,31,255,31,245,31,245,30,242,31,78,31,209,31,57,31,55,31,217,31,30,31,35,31,104,31,229,31,229,30,41,31,41,30,7,31,137,31,3,31,3,30,170,31,179,31,170,31,202,31,53,31,53,30,124,31,124,30,74,31,80,31,14,31,215,31,236,31,227,31,98,31,98,30,29,31,104,31,104,30,137,31,171,31,125,31,145,31,8,31,141,31,170,31,165,31,206,31,206,30,168,31,168,30,168,29,24,31,144,31,27,31,197,31,254,31,254,30,34,31,34,30,207,31,132,31,147,31,105,31,92,31,49,31,49,30,49,29,8,31,2,31,153,31,2,31,52,31,83,31,98,31,86,31,86,30,182,31,170,31,13,31,8,31,8,30,242,31,242,30,242,29,13,31,233,31,233,30,197,31,128,31,128,30,48,31,48,30,213,31,251,31,87,31,15,31,129,31,129,30,129,29,108,31,3,31,3,30,105,31,133,31,179,31,151,31,140,31,213,31,182,31,212,31,154,31,154,30,81,31,68,31,187,31,6,31,44,31,44,30,96,31,160,31,148,31,203,31,154,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
