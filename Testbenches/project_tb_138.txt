-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 500;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,214,0,237,0,7,0,95,0,146,0,178,0,203,0,168,0,62,0,72,0,60,0,0,0,119,0,39,0,135,0,39,0,141,0,119,0,79,0,181,0,89,0,54,0,41,0,39,0,152,0,151,0,138,0,45,0,15,0,195,0,217,0,215,0,138,0,243,0,116,0,0,0,176,0,250,0,186,0,159,0,173,0,0,0,0,0,10,0,0,0,0,0,34,0,185,0,73,0,149,0,213,0,0,0,0,0,0,0,0,0,63,0,246,0,0,0,150,0,147,0,214,0,54,0,137,0,178,0,0,0,118,0,0,0,106,0,250,0,164,0,3,0,0,0,0,0,106,0,19,0,0,0,27,0,41,0,0,0,128,0,111,0,186,0,55,0,247,0,0,0,0,0,130,0,119,0,22,0,0,0,193,0,226,0,57,0,36,0,0,0,96,0,84,0,201,0,22,0,107,0,0,0,19,0,0,0,164,0,0,0,33,0,149,0,124,0,76,0,192,0,133,0,57,0,68,0,152,0,31,0,220,0,123,0,0,0,156,0,189,0,56,0,9,0,230,0,219,0,93,0,13,0,9,0,207,0,214,0,0,0,0,0,73,0,222,0,210,0,88,0,105,0,163,0,0,0,111,0,0,0,70,0,244,0,124,0,53,0,169,0,74,0,108,0,139,0,196,0,104,0,6,0,221,0,0,0,183,0,33,0,0,0,197,0,46,0,102,0,154,0,0,0,162,0,148,0,233,0,53,0,0,0,147,0,149,0,54,0,53,0,135,0,227,0,127,0,113,0,129,0,152,0,92,0,0,0,123,0,141,0,0,0,0,0,0,0,171,0,0,0,216,0,157,0,110,0,232,0,206,0,3,0,0,0,222,0,0,0,84,0,0,0,138,0,203,0,14,0,34,0,41,0,0,0,67,0,78,0,78,0,0,0,145,0,0,0,164,0,15,0,47,0,230,0,186,0,73,0,157,0,10,0,39,0,9,0,0,0,156,0,183,0,150,0,63,0,41,0,134,0,167,0,85,0,169,0,67,0,0,0,123,0,150,0,228,0,115,0,42,0,36,0,0,0,0,0,95,0,96,0,205,0,231,0,42,0,118,0,143,0,27,0,181,0,89,0,198,0,177,0,228,0,0,0,153,0,0,0,36,0,21,0,227,0,89,0,213,0,26,0,0,0,202,0,202,0,91,0,255,0,52,0,174,0,205,0,253,0,72,0,0,0,0,0,0,0,121,0,52,0,0,0,81,0,78,0,185,0,162,0,14,0,73,0,125,0,35,0,199,0,48,0,83,0,120,0,158,0,48,0,0,0,122,0,84,0,216,0,144,0,143,0,28,0,14,0,79,0,75,0,0,0,2,0,0,0,0,0,0,0,149,0,8,0,11,0,0,0,134,0,89,0,46,0,4,0,0,0,132,0,234,0,206,0,183,0,184,0,89,0,95,0,0,0,182,0,178,0,80,0,0,0,145,0,92,0,14,0,3,0,201,0,206,0,132,0,26,0,44,0,19,0,67,0,54,0,200,0,0,0,153,0,169,0,105,0,72,0,239,0,0,0,103,0,157,0,102,0,224,0,180,0,0,0,14,0,39,0,0,0,0,0,125,0,246,0,87,0,71,0,0,0,23,0,49,0,228,0,174,0,0,0,76,0,0,0,0,0,202,0,242,0,40,0,0,0,116,0,138,0,175,0,0,0,217,0,0,0,68,0,80,0,4,0,149,0,206,0,0,0,158,0,0,0,0,0,0,0,45,0,161,0,225,0,191,0,143,0,253,0,0,0,169,0,253,0,0,0,15,0,0,0,0,0,0,0,30,0,206,0,114,0,0,0,18,0,9,0,68,0,14,0,136,0,47,0,16,0,242,0,174,0,158,0,217,0,191,0,13,0,175,0,183,0,129,0,0,0,198,0,93,0,40,0,13,0,101,0,223,0,169,0,48,0,0,0,135,0,34,0,0,0,169,0,145,0,234,0,63,0,10,0,135,0,74,0,123,0,250,0,232,0,0,0,30,0,52,0,8,0,133,0,233,0,251,0,31,0,133,0,0,0,65,0,16,0,37,0,0,0,0,0,186,0,67,0,40,0,0,0,0,0,0,0,0,0,5,0,108,0,106,0,90,0,74,0,165,0,112,0,23,0,110,0,0,0,204,0,0,0,0,0,116,0,205,0,0,0,67,0,9,0,98,0,16,0,67,0,123,0,112,0,0,0,212,0,101,0,0,0,28,0,0,0,0,0,105,0);
signal scenario_full  : scenario_type := (0,0,214,31,237,31,7,31,95,31,146,31,178,31,203,31,168,31,62,31,72,31,60,31,60,30,119,31,39,31,135,31,39,31,141,31,119,31,79,31,181,31,89,31,54,31,41,31,39,31,152,31,151,31,138,31,45,31,15,31,195,31,217,31,215,31,138,31,243,31,116,31,116,30,176,31,250,31,186,31,159,31,173,31,173,30,173,29,10,31,10,30,10,29,34,31,185,31,73,31,149,31,213,31,213,30,213,29,213,28,213,27,63,31,246,31,246,30,150,31,147,31,214,31,54,31,137,31,178,31,178,30,118,31,118,30,106,31,250,31,164,31,3,31,3,30,3,29,106,31,19,31,19,30,27,31,41,31,41,30,128,31,111,31,186,31,55,31,247,31,247,30,247,29,130,31,119,31,22,31,22,30,193,31,226,31,57,31,36,31,36,30,96,31,84,31,201,31,22,31,107,31,107,30,19,31,19,30,164,31,164,30,33,31,149,31,124,31,76,31,192,31,133,31,57,31,68,31,152,31,31,31,220,31,123,31,123,30,156,31,189,31,56,31,9,31,230,31,219,31,93,31,13,31,9,31,207,31,214,31,214,30,214,29,73,31,222,31,210,31,88,31,105,31,163,31,163,30,111,31,111,30,70,31,244,31,124,31,53,31,169,31,74,31,108,31,139,31,196,31,104,31,6,31,221,31,221,30,183,31,33,31,33,30,197,31,46,31,102,31,154,31,154,30,162,31,148,31,233,31,53,31,53,30,147,31,149,31,54,31,53,31,135,31,227,31,127,31,113,31,129,31,152,31,92,31,92,30,123,31,141,31,141,30,141,29,141,28,171,31,171,30,216,31,157,31,110,31,232,31,206,31,3,31,3,30,222,31,222,30,84,31,84,30,138,31,203,31,14,31,34,31,41,31,41,30,67,31,78,31,78,31,78,30,145,31,145,30,164,31,15,31,47,31,230,31,186,31,73,31,157,31,10,31,39,31,9,31,9,30,156,31,183,31,150,31,63,31,41,31,134,31,167,31,85,31,169,31,67,31,67,30,123,31,150,31,228,31,115,31,42,31,36,31,36,30,36,29,95,31,96,31,205,31,231,31,42,31,118,31,143,31,27,31,181,31,89,31,198,31,177,31,228,31,228,30,153,31,153,30,36,31,21,31,227,31,89,31,213,31,26,31,26,30,202,31,202,31,91,31,255,31,52,31,174,31,205,31,253,31,72,31,72,30,72,29,72,28,121,31,52,31,52,30,81,31,78,31,185,31,162,31,14,31,73,31,125,31,35,31,199,31,48,31,83,31,120,31,158,31,48,31,48,30,122,31,84,31,216,31,144,31,143,31,28,31,14,31,79,31,75,31,75,30,2,31,2,30,2,29,2,28,149,31,8,31,11,31,11,30,134,31,89,31,46,31,4,31,4,30,132,31,234,31,206,31,183,31,184,31,89,31,95,31,95,30,182,31,178,31,80,31,80,30,145,31,92,31,14,31,3,31,201,31,206,31,132,31,26,31,44,31,19,31,67,31,54,31,200,31,200,30,153,31,169,31,105,31,72,31,239,31,239,30,103,31,157,31,102,31,224,31,180,31,180,30,14,31,39,31,39,30,39,29,125,31,246,31,87,31,71,31,71,30,23,31,49,31,228,31,174,31,174,30,76,31,76,30,76,29,202,31,242,31,40,31,40,30,116,31,138,31,175,31,175,30,217,31,217,30,68,31,80,31,4,31,149,31,206,31,206,30,158,31,158,30,158,29,158,28,45,31,161,31,225,31,191,31,143,31,253,31,253,30,169,31,253,31,253,30,15,31,15,30,15,29,15,28,30,31,206,31,114,31,114,30,18,31,9,31,68,31,14,31,136,31,47,31,16,31,242,31,174,31,158,31,217,31,191,31,13,31,175,31,183,31,129,31,129,30,198,31,93,31,40,31,13,31,101,31,223,31,169,31,48,31,48,30,135,31,34,31,34,30,169,31,145,31,234,31,63,31,10,31,135,31,74,31,123,31,250,31,232,31,232,30,30,31,52,31,8,31,133,31,233,31,251,31,31,31,133,31,133,30,65,31,16,31,37,31,37,30,37,29,186,31,67,31,40,31,40,30,40,29,40,28,40,27,5,31,108,31,106,31,90,31,74,31,165,31,112,31,23,31,110,31,110,30,204,31,204,30,204,29,116,31,205,31,205,30,67,31,9,31,98,31,16,31,67,31,123,31,112,31,112,30,212,31,101,31,101,30,28,31,28,30,28,29,105,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
