-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 999;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (138,0,165,0,13,0,0,0,43,0,63,0,135,0,198,0,152,0,160,0,0,0,31,0,62,0,14,0,156,0,240,0,137,0,205,0,208,0,223,0,172,0,135,0,89,0,96,0,105,0,185,0,37,0,0,0,0,0,0,0,226,0,198,0,79,0,129,0,101,0,59,0,4,0,59,0,240,0,0,0,218,0,178,0,232,0,0,0,0,0,76,0,0,0,206,0,0,0,229,0,149,0,251,0,0,0,21,0,144,0,220,0,38,0,25,0,101,0,250,0,248,0,95,0,45,0,83,0,82,0,0,0,187,0,8,0,116,0,225,0,84,0,13,0,1,0,162,0,0,0,81,0,0,0,5,0,0,0,49,0,75,0,0,0,180,0,54,0,46,0,220,0,0,0,215,0,173,0,82,0,255,0,154,0,99,0,140,0,212,0,189,0,47,0,240,0,76,0,35,0,113,0,61,0,32,0,230,0,153,0,139,0,0,0,231,0,170,0,106,0,111,0,105,0,32,0,194,0,144,0,188,0,181,0,86,0,65,0,0,0,102,0,0,0,200,0,0,0,99,0,0,0,58,0,213,0,45,0,223,0,173,0,252,0,29,0,104,0,7,0,217,0,96,0,34,0,51,0,0,0,0,0,246,0,207,0,188,0,169,0,136,0,138,0,239,0,6,0,208,0,0,0,108,0,138,0,0,0,0,0,253,0,138,0,236,0,235,0,87,0,0,0,173,0,23,0,201,0,143,0,40,0,0,0,100,0,215,0,74,0,45,0,78,0,0,0,51,0,186,0,109,0,107,0,215,0,112,0,65,0,116,0,35,0,214,0,60,0,0,0,52,0,75,0,0,0,242,0,133,0,188,0,0,0,13,0,46,0,180,0,31,0,150,0,0,0,90,0,0,0,254,0,94,0,252,0,149,0,28,0,142,0,0,0,131,0,0,0,200,0,5,0,251,0,163,0,59,0,51,0,102,0,229,0,255,0,218,0,75,0,27,0,0,0,0,0,206,0,66,0,61,0,221,0,65,0,4,0,64,0,254,0,0,0,171,0,0,0,91,0,143,0,149,0,10,0,200,0,198,0,153,0,58,0,155,0,0,0,102,0,206,0,0,0,209,0,0,0,0,0,22,0,9,0,219,0,165,0,191,0,241,0,0,0,68,0,29,0,74,0,0,0,176,0,0,0,58,0,3,0,0,0,111,0,37,0,85,0,75,0,57,0,0,0,60,0,181,0,131,0,0,0,161,0,183,0,133,0,58,0,142,0,140,0,243,0,100,0,27,0,144,0,217,0,0,0,191,0,171,0,182,0,0,0,130,0,111,0,0,0,0,0,145,0,197,0,0,0,2,0,10,0,158,0,234,0,0,0,103,0,0,0,0,0,24,0,173,0,62,0,126,0,137,0,29,0,0,0,22,0,142,0,220,0,0,0,0,0,243,0,0,0,0,0,117,0,134,0,131,0,37,0,105,0,174,0,192,0,133,0,59,0,190,0,0,0,154,0,130,0,69,0,185,0,27,0,42,0,5,0,210,0,194,0,24,0,0,0,57,0,19,0,184,0,194,0,0,0,0,0,32,0,187,0,133,0,182,0,0,0,110,0,68,0,79,0,120,0,248,0,91,0,184,0,0,0,44,0,186,0,0,0,235,0,142,0,0,0,188,0,239,0,205,0,163,0,35,0,162,0,0,0,6,0,113,0,181,0,0,0,35,0,243,0,65,0,96,0,77,0,0,0,37,0,82,0,64,0,136,0,0,0,0,0,20,0,184,0,47,0,156,0,237,0,114,0,62,0,8,0,49,0,148,0,139,0,0,0,0,0,38,0,0,0,157,0,0,0,50,0,150,0,0,0,137,0,200,0,42,0,0,0,3,0,252,0,97,0,120,0,119,0,11,0,7,0,251,0,254,0,0,0,0,0,123,0,55,0,117,0,0,0,248,0,0,0,157,0,150,0,12,0,249,0,0,0,19,0,39,0,0,0,47,0,10,0,237,0,127,0,0,0,160,0,110,0,0,0,145,0,92,0,191,0,0,0,205,0,118,0,198,0,72,0,169,0,84,0,244,0,157,0,0,0,176,0,28,0,0,0,167,0,200,0,132,0,213,0,0,0,114,0,0,0,45,0,15,0,85,0,0,0,8,0,187,0,130,0,122,0,45,0,82,0,49,0,90,0,0,0,169,0,164,0,0,0,254,0,83,0,208,0,0,0,0,0,194,0,148,0,0,0,214,0,251,0,213,0,166,0,106,0,227,0,68,0,0,0,0,0,144,0,71,0,106,0,109,0,75,0,203,0,101,0,212,0,205,0,202,0,0,0,32,0,246,0,230,0,156,0,185,0,197,0,213,0,8,0,0,0,47,0,73,0,0,0,194,0,129,0,104,0,199,0,89,0,0,0,219,0,22,0,192,0,143,0,115,0,122,0,108,0,130,0,37,0,0,0,106,0,205,0,4,0,51,0,179,0,167,0,176,0,59,0,40,0,186,0,0,0,152,0,98,0,0,0,93,0,0,0,203,0,0,0,108,0,131,0,30,0,0,0,36,0,242,0,188,0,151,0,120,0,5,0,0,0,0,0,121,0,202,0,0,0,134,0,138,0,137,0,0,0,235,0,81,0,0,0,27,0,251,0,0,0,68,0,92,0,130,0,184,0,52,0,232,0,67,0,99,0,31,0,218,0,203,0,0,0,75,0,33,0,70,0,26,0,110,0,181,0,160,0,216,0,230,0,57,0,133,0,11,0,181,0,91,0,57,0,81,0,169,0,61,0,154,0,212,0,91,0,10,0,176,0,101,0,0,0,217,0,113,0,97,0,57,0,145,0,0,0,181,0,44,0,153,0,130,0,154,0,147,0,118,0,142,0,0,0,111,0,123,0,187,0,0,0,97,0,245,0,125,0,0,0,235,0,0,0,0,0,148,0,19,0,239,0,52,0,0,0,14,0,68,0,1,0,0,0,113,0,77,0,108,0,18,0,200,0,115,0,18,0,0,0,250,0,0,0,248,0,116,0,231,0,73,0,9,0,35,0,46,0,81,0,169,0,129,0,23,0,226,0,175,0,199,0,31,0,96,0,102,0,243,0,0,0,0,0,18,0,156,0,0,0,73,0,117,0,156,0,130,0,95,0,196,0,0,0,152,0,0,0,108,0,25,0,0,0,128,0,215,0,46,0,167,0,198,0,142,0,78,0,191,0,198,0,0,0,237,0,85,0,77,0,209,0,0,0,0,0,74,0,62,0,76,0,225,0,144,0,0,0,27,0,17,0,210,0,6,0,217,0,252,0,176,0,192,0,194,0,225,0,0,0,94,0,0,0,149,0,247,0,219,0,221,0,144,0,183,0,164,0,46,0,21,0,21,0,227,0,9,0,0,0,178,0,216,0,0,0,0,0,108,0,0,0,157,0,177,0,152,0,125,0,219,0,110,0,201,0,0,0,184,0,32,0,118,0,0,0,140,0,253,0,44,0,86,0,0,0,89,0,125,0,93,0,54,0,250,0,105,0,87,0,0,0,170,0,240,0,132,0,0,0,0,0,230,0,214,0,172,0,192,0,31,0,0,0,208,0,159,0,215,0,209,0,23,0,236,0,74,0,116,0,11,0,0,0,23,0,60,0,0,0,0,0,35,0,128,0,190,0,31,0,7,0,146,0,250,0,0,0,75,0,141,0,0,0,243,0,125,0,224,0,253,0,119,0,211,0,183,0,82,0,0,0,0,0,0,0,104,0,0,0,3,0,120,0,150,0,0,0,222,0,123,0,114,0,140,0,128,0,178,0,61,0,255,0,253,0,18,0,145,0,91,0,17,0,58,0,222,0,78,0,220,0,199,0,167,0,242,0,0,0,236,0,0,0,235,0,176,0,204,0,48,0,117,0,131,0,203,0,161,0,245,0,0,0,3,0,219,0,35,0,253,0,45,0,195,0,0,0,147,0,131,0,217,0,157,0,0,0,77,0,102,0,191,0,43,0,173,0,76,0,178,0,183,0,147,0,185,0,192,0,176,0,0,0,0,0,12,0,244,0,51,0,63,0,163,0,210,0,176,0,236,0,222,0,0,0,162,0,214,0,104,0,20,0,0,0,67,0,132,0,4,0,49,0,87,0,183,0,218,0,23,0,142,0,0,0,82,0,184,0,77,0,246,0,170,0,198,0,89,0,92,0,37,0,118,0,211,0,190,0,55,0,202,0,117,0,250,0,158,0,148,0,0,0,0,0,0,0,203,0,110,0,227,0,63,0,85,0,0,0,0,0,0,0,132,0,180,0,249,0,194,0,155,0,170,0,0,0,217,0,155,0,89,0,33,0,50,0,96,0,219,0,159,0,132,0,12,0,12,0,93,0,227,0,253,0,0,0,43,0,172,0,178,0,141,0,40,0,187,0,184,0,0,0,10,0,2,0,205,0,154,0,13,0,26,0,15,0,14,0,56,0,57,0,27,0,216,0,186,0,99,0,111,0,105,0,52,0,232,0,52,0,0,0);
signal scenario_full  : scenario_type := (138,31,165,31,13,31,13,30,43,31,63,31,135,31,198,31,152,31,160,31,160,30,31,31,62,31,14,31,156,31,240,31,137,31,205,31,208,31,223,31,172,31,135,31,89,31,96,31,105,31,185,31,37,31,37,30,37,29,37,28,226,31,198,31,79,31,129,31,101,31,59,31,4,31,59,31,240,31,240,30,218,31,178,31,232,31,232,30,232,29,76,31,76,30,206,31,206,30,229,31,149,31,251,31,251,30,21,31,144,31,220,31,38,31,25,31,101,31,250,31,248,31,95,31,45,31,83,31,82,31,82,30,187,31,8,31,116,31,225,31,84,31,13,31,1,31,162,31,162,30,81,31,81,30,5,31,5,30,49,31,75,31,75,30,180,31,54,31,46,31,220,31,220,30,215,31,173,31,82,31,255,31,154,31,99,31,140,31,212,31,189,31,47,31,240,31,76,31,35,31,113,31,61,31,32,31,230,31,153,31,139,31,139,30,231,31,170,31,106,31,111,31,105,31,32,31,194,31,144,31,188,31,181,31,86,31,65,31,65,30,102,31,102,30,200,31,200,30,99,31,99,30,58,31,213,31,45,31,223,31,173,31,252,31,29,31,104,31,7,31,217,31,96,31,34,31,51,31,51,30,51,29,246,31,207,31,188,31,169,31,136,31,138,31,239,31,6,31,208,31,208,30,108,31,138,31,138,30,138,29,253,31,138,31,236,31,235,31,87,31,87,30,173,31,23,31,201,31,143,31,40,31,40,30,100,31,215,31,74,31,45,31,78,31,78,30,51,31,186,31,109,31,107,31,215,31,112,31,65,31,116,31,35,31,214,31,60,31,60,30,52,31,75,31,75,30,242,31,133,31,188,31,188,30,13,31,46,31,180,31,31,31,150,31,150,30,90,31,90,30,254,31,94,31,252,31,149,31,28,31,142,31,142,30,131,31,131,30,200,31,5,31,251,31,163,31,59,31,51,31,102,31,229,31,255,31,218,31,75,31,27,31,27,30,27,29,206,31,66,31,61,31,221,31,65,31,4,31,64,31,254,31,254,30,171,31,171,30,91,31,143,31,149,31,10,31,200,31,198,31,153,31,58,31,155,31,155,30,102,31,206,31,206,30,209,31,209,30,209,29,22,31,9,31,219,31,165,31,191,31,241,31,241,30,68,31,29,31,74,31,74,30,176,31,176,30,58,31,3,31,3,30,111,31,37,31,85,31,75,31,57,31,57,30,60,31,181,31,131,31,131,30,161,31,183,31,133,31,58,31,142,31,140,31,243,31,100,31,27,31,144,31,217,31,217,30,191,31,171,31,182,31,182,30,130,31,111,31,111,30,111,29,145,31,197,31,197,30,2,31,10,31,158,31,234,31,234,30,103,31,103,30,103,29,24,31,173,31,62,31,126,31,137,31,29,31,29,30,22,31,142,31,220,31,220,30,220,29,243,31,243,30,243,29,117,31,134,31,131,31,37,31,105,31,174,31,192,31,133,31,59,31,190,31,190,30,154,31,130,31,69,31,185,31,27,31,42,31,5,31,210,31,194,31,24,31,24,30,57,31,19,31,184,31,194,31,194,30,194,29,32,31,187,31,133,31,182,31,182,30,110,31,68,31,79,31,120,31,248,31,91,31,184,31,184,30,44,31,186,31,186,30,235,31,142,31,142,30,188,31,239,31,205,31,163,31,35,31,162,31,162,30,6,31,113,31,181,31,181,30,35,31,243,31,65,31,96,31,77,31,77,30,37,31,82,31,64,31,136,31,136,30,136,29,20,31,184,31,47,31,156,31,237,31,114,31,62,31,8,31,49,31,148,31,139,31,139,30,139,29,38,31,38,30,157,31,157,30,50,31,150,31,150,30,137,31,200,31,42,31,42,30,3,31,252,31,97,31,120,31,119,31,11,31,7,31,251,31,254,31,254,30,254,29,123,31,55,31,117,31,117,30,248,31,248,30,157,31,150,31,12,31,249,31,249,30,19,31,39,31,39,30,47,31,10,31,237,31,127,31,127,30,160,31,110,31,110,30,145,31,92,31,191,31,191,30,205,31,118,31,198,31,72,31,169,31,84,31,244,31,157,31,157,30,176,31,28,31,28,30,167,31,200,31,132,31,213,31,213,30,114,31,114,30,45,31,15,31,85,31,85,30,8,31,187,31,130,31,122,31,45,31,82,31,49,31,90,31,90,30,169,31,164,31,164,30,254,31,83,31,208,31,208,30,208,29,194,31,148,31,148,30,214,31,251,31,213,31,166,31,106,31,227,31,68,31,68,30,68,29,144,31,71,31,106,31,109,31,75,31,203,31,101,31,212,31,205,31,202,31,202,30,32,31,246,31,230,31,156,31,185,31,197,31,213,31,8,31,8,30,47,31,73,31,73,30,194,31,129,31,104,31,199,31,89,31,89,30,219,31,22,31,192,31,143,31,115,31,122,31,108,31,130,31,37,31,37,30,106,31,205,31,4,31,51,31,179,31,167,31,176,31,59,31,40,31,186,31,186,30,152,31,98,31,98,30,93,31,93,30,203,31,203,30,108,31,131,31,30,31,30,30,36,31,242,31,188,31,151,31,120,31,5,31,5,30,5,29,121,31,202,31,202,30,134,31,138,31,137,31,137,30,235,31,81,31,81,30,27,31,251,31,251,30,68,31,92,31,130,31,184,31,52,31,232,31,67,31,99,31,31,31,218,31,203,31,203,30,75,31,33,31,70,31,26,31,110,31,181,31,160,31,216,31,230,31,57,31,133,31,11,31,181,31,91,31,57,31,81,31,169,31,61,31,154,31,212,31,91,31,10,31,176,31,101,31,101,30,217,31,113,31,97,31,57,31,145,31,145,30,181,31,44,31,153,31,130,31,154,31,147,31,118,31,142,31,142,30,111,31,123,31,187,31,187,30,97,31,245,31,125,31,125,30,235,31,235,30,235,29,148,31,19,31,239,31,52,31,52,30,14,31,68,31,1,31,1,30,113,31,77,31,108,31,18,31,200,31,115,31,18,31,18,30,250,31,250,30,248,31,116,31,231,31,73,31,9,31,35,31,46,31,81,31,169,31,129,31,23,31,226,31,175,31,199,31,31,31,96,31,102,31,243,31,243,30,243,29,18,31,156,31,156,30,73,31,117,31,156,31,130,31,95,31,196,31,196,30,152,31,152,30,108,31,25,31,25,30,128,31,215,31,46,31,167,31,198,31,142,31,78,31,191,31,198,31,198,30,237,31,85,31,77,31,209,31,209,30,209,29,74,31,62,31,76,31,225,31,144,31,144,30,27,31,17,31,210,31,6,31,217,31,252,31,176,31,192,31,194,31,225,31,225,30,94,31,94,30,149,31,247,31,219,31,221,31,144,31,183,31,164,31,46,31,21,31,21,31,227,31,9,31,9,30,178,31,216,31,216,30,216,29,108,31,108,30,157,31,177,31,152,31,125,31,219,31,110,31,201,31,201,30,184,31,32,31,118,31,118,30,140,31,253,31,44,31,86,31,86,30,89,31,125,31,93,31,54,31,250,31,105,31,87,31,87,30,170,31,240,31,132,31,132,30,132,29,230,31,214,31,172,31,192,31,31,31,31,30,208,31,159,31,215,31,209,31,23,31,236,31,74,31,116,31,11,31,11,30,23,31,60,31,60,30,60,29,35,31,128,31,190,31,31,31,7,31,146,31,250,31,250,30,75,31,141,31,141,30,243,31,125,31,224,31,253,31,119,31,211,31,183,31,82,31,82,30,82,29,82,28,104,31,104,30,3,31,120,31,150,31,150,30,222,31,123,31,114,31,140,31,128,31,178,31,61,31,255,31,253,31,18,31,145,31,91,31,17,31,58,31,222,31,78,31,220,31,199,31,167,31,242,31,242,30,236,31,236,30,235,31,176,31,204,31,48,31,117,31,131,31,203,31,161,31,245,31,245,30,3,31,219,31,35,31,253,31,45,31,195,31,195,30,147,31,131,31,217,31,157,31,157,30,77,31,102,31,191,31,43,31,173,31,76,31,178,31,183,31,147,31,185,31,192,31,176,31,176,30,176,29,12,31,244,31,51,31,63,31,163,31,210,31,176,31,236,31,222,31,222,30,162,31,214,31,104,31,20,31,20,30,67,31,132,31,4,31,49,31,87,31,183,31,218,31,23,31,142,31,142,30,82,31,184,31,77,31,246,31,170,31,198,31,89,31,92,31,37,31,118,31,211,31,190,31,55,31,202,31,117,31,250,31,158,31,148,31,148,30,148,29,148,28,203,31,110,31,227,31,63,31,85,31,85,30,85,29,85,28,132,31,180,31,249,31,194,31,155,31,170,31,170,30,217,31,155,31,89,31,33,31,50,31,96,31,219,31,159,31,132,31,12,31,12,31,93,31,227,31,253,31,253,30,43,31,172,31,178,31,141,31,40,31,187,31,184,31,184,30,10,31,2,31,205,31,154,31,13,31,26,31,15,31,14,31,56,31,57,31,27,31,216,31,186,31,99,31,111,31,105,31,52,31,232,31,52,31,52,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
