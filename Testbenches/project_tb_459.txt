-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 924;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (195,0,0,0,124,0,0,0,158,0,122,0,165,0,251,0,0,0,127,0,2,0,218,0,253,0,0,0,40,0,0,0,0,0,102,0,18,0,188,0,28,0,11,0,131,0,26,0,242,0,223,0,0,0,112,0,148,0,0,0,73,0,0,0,118,0,53,0,39,0,4,0,40,0,170,0,68,0,174,0,0,0,237,0,0,0,183,0,0,0,35,0,54,0,132,0,238,0,0,0,84,0,0,0,5,0,247,0,221,0,248,0,159,0,48,0,157,0,113,0,0,0,142,0,0,0,94,0,37,0,97,0,58,0,34,0,96,0,2,0,162,0,236,0,219,0,240,0,122,0,62,0,223,0,89,0,136,0,0,0,0,0,251,0,0,0,58,0,203,0,216,0,0,0,122,0,159,0,194,0,183,0,127,0,104,0,0,0,31,0,163,0,51,0,31,0,254,0,0,0,114,0,55,0,0,0,248,0,0,0,0,0,147,0,0,0,202,0,10,0,39,0,176,0,4,0,32,0,0,0,169,0,6,0,0,0,0,0,144,0,229,0,170,0,212,0,135,0,134,0,165,0,59,0,241,0,215,0,0,0,235,0,35,0,20,0,124,0,0,0,190,0,0,0,0,0,59,0,45,0,93,0,74,0,123,0,80,0,33,0,3,0,0,0,171,0,46,0,176,0,247,0,11,0,71,0,0,0,32,0,80,0,58,0,137,0,209,0,82,0,161,0,0,0,16,0,98,0,99,0,0,0,60,0,38,0,0,0,23,0,35,0,104,0,15,0,53,0,178,0,224,0,121,0,144,0,252,0,71,0,163,0,160,0,53,0,0,0,8,0,94,0,40,0,186,0,71,0,0,0,40,0,145,0,5,0,202,0,47,0,0,0,0,0,0,0,19,0,119,0,227,0,33,0,0,0,46,0,98,0,196,0,224,0,150,0,0,0,95,0,202,0,103,0,254,0,0,0,0,0,0,0,105,0,0,0,181,0,65,0,0,0,253,0,23,0,126,0,0,0,129,0,228,0,207,0,179,0,99,0,68,0,99,0,71,0,127,0,211,0,182,0,0,0,197,0,78,0,50,0,253,0,155,0,210,0,55,0,129,0,138,0,35,0,2,0,171,0,61,0,62,0,71,0,128,0,85,0,229,0,77,0,139,0,43,0,0,0,0,0,210,0,3,0,78,0,0,0,200,0,248,0,238,0,142,0,0,0,219,0,228,0,185,0,0,0,27,0,101,0,127,0,0,0,203,0,134,0,132,0,158,0,0,0,247,0,87,0,207,0,0,0,11,0,0,0,0,0,155,0,6,0,177,0,35,0,19,0,64,0,168,0,192,0,226,0,15,0,0,0,247,0,219,0,127,0,167,0,146,0,114,0,14,0,11,0,167,0,103,0,119,0,57,0,0,0,0,0,96,0,212,0,52,0,178,0,225,0,34,0,151,0,65,0,0,0,0,0,200,0,82,0,210,0,216,0,193,0,153,0,55,0,165,0,247,0,222,0,249,0,0,0,167,0,252,0,92,0,196,0,53,0,49,0,0,0,181,0,227,0,143,0,159,0,128,0,143,0,51,0,225,0,119,0,46,0,115,0,0,0,0,0,25,0,7,0,0,0,217,0,64,0,142,0,150,0,205,0,146,0,0,0,67,0,32,0,217,0,0,0,0,0,64,0,147,0,121,0,3,0,14,0,0,0,6,0,0,0,234,0,55,0,230,0,0,0,180,0,0,0,210,0,38,0,214,0,28,0,0,0,0,0,5,0,19,0,0,0,63,0,0,0,174,0,0,0,89,0,17,0,166,0,188,0,0,0,212,0,235,0,83,0,64,0,103,0,197,0,197,0,56,0,193,0,246,0,247,0,0,0,0,0,135,0,0,0,214,0,181,0,0,0,154,0,0,0,91,0,115,0,9,0,0,0,199,0,120,0,0,0,245,0,190,0,0,0,255,0,0,0,27,0,66,0,0,0,124,0,133,0,88,0,213,0,84,0,235,0,200,0,36,0,5,0,42,0,94,0,0,0,0,0,199,0,160,0,55,0,111,0,23,0,87,0,184,0,0,0,30,0,62,0,194,0,131,0,19,0,118,0,128,0,217,0,26,0,162,0,145,0,0,0,211,0,179,0,100,0,215,0,77,0,218,0,152,0,123,0,222,0,0,0,0,0,144,0,58,0,247,0,68,0,97,0,160,0,83,0,72,0,0,0,62,0,37,0,0,0,0,0,28,0,0,0,0,0,175,0,225,0,0,0,9,0,191,0,0,0,4,0,13,0,57,0,75,0,139,0,67,0,146,0,69,0,123,0,221,0,0,0,0,0,156,0,198,0,64,0,57,0,146,0,152,0,31,0,106,0,13,0,97,0,236,0,0,0,204,0,0,0,186,0,249,0,0,0,144,0,252,0,146,0,179,0,0,0,0,0,101,0,85,0,0,0,0,0,115,0,0,0,83,0,199,0,204,0,0,0,122,0,254,0,31,0,221,0,0,0,190,0,29,0,63,0,23,0,0,0,235,0,0,0,249,0,233,0,27,0,160,0,233,0,151,0,40,0,39,0,0,0,20,0,0,0,246,0,89,0,213,0,145,0,127,0,2,0,0,0,205,0,0,0,0,0,43,0,0,0,161,0,211,0,137,0,113,0,0,0,122,0,168,0,0,0,75,0,52,0,79,0,192,0,0,0,211,0,102,0,24,0,0,0,0,0,67,0,133,0,0,0,0,0,150,0,0,0,72,0,130,0,0,0,227,0,90,0,242,0,56,0,255,0,230,0,0,0,0,0,0,0,222,0,251,0,202,0,0,0,37,0,0,0,110,0,0,0,164,0,112,0,122,0,151,0,77,0,128,0,155,0,26,0,159,0,1,0,178,0,93,0,246,0,197,0,27,0,18,0,196,0,0,0,207,0,49,0,120,0,167,0,151,0,0,0,2,0,0,0,115,0,58,0,0,0,208,0,92,0,55,0,0,0,163,0,0,0,12,0,118,0,235,0,145,0,60,0,207,0,98,0,158,0,0,0,8,0,122,0,36,0,235,0,234,0,47,0,0,0,182,0,80,0,127,0,44,0,214,0,125,0,0,0,0,0,154,0,61,0,180,0,190,0,114,0,85,0,244,0,219,0,84,0,0,0,136,0,162,0,213,0,0,0,0,0,230,0,99,0,156,0,254,0,186,0,204,0,179,0,203,0,135,0,0,0,80,0,62,0,118,0,0,0,133,0,213,0,29,0,92,0,239,0,211,0,208,0,218,0,214,0,72,0,0,0,143,0,226,0,54,0,226,0,27,0,116,0,254,0,179,0,10,0,0,0,215,0,158,0,171,0,244,0,136,0,0,0,18,0,54,0,0,0,167,0,12,0,62,0,74,0,89,0,113,0,47,0,0,0,52,0,20,0,0,0,229,0,144,0,140,0,252,0,38,0,52,0,11,0,244,0,235,0,216,0,23,0,142,0,0,0,150,0,0,0,29,0,145,0,68,0,253,0,152,0,0,0,0,0,188,0,0,0,239,0,25,0,71,0,0,0,180,0,254,0,14,0,118,0,0,0,70,0,75,0,179,0,49,0,0,0,0,0,250,0,145,0,4,0,197,0,242,0,101,0,194,0,17,0,0,0,107,0,0,0,0,0,0,0,251,0,0,0,244,0,96,0,0,0,0,0,242,0,31,0,83,0,0,0,165,0,6,0,221,0,0,0,111,0,0,0,114,0,33,0,49,0,12,0,23,0,160,0,0,0,3,0,0,0,227,0,251,0,0,0,82,0,0,0,135,0,0,0,32,0,198,0,221,0,108,0,110,0,0,0,1,0,170,0,187,0,0,0,0,0,134,0,21,0,31,0,0,0,9,0,2,0,15,0,110,0,146,0,111,0,211,0,250,0,103,0,203,0,190,0,130,0,0,0,201,0,224,0,0,0,157,0,229,0,162,0,0,0,0,0,30,0,18,0,103,0,194,0,155,0,113,0,0,0,196,0,220,0,87,0,0,0,186,0,176,0,153,0,0,0,235,0,140,0,50,0,221,0,114,0,221,0,6,0,176,0,81,0,12,0,0,0,81,0,235,0,0,0,254,0,188,0,227,0,50,0,71,0,13,0,141,0,99,0,178,0,0,0,80,0,0,0,0,0,198,0,114,0,25,0,0,0,103,0);
signal scenario_full  : scenario_type := (195,31,195,30,124,31,124,30,158,31,122,31,165,31,251,31,251,30,127,31,2,31,218,31,253,31,253,30,40,31,40,30,40,29,102,31,18,31,188,31,28,31,11,31,131,31,26,31,242,31,223,31,223,30,112,31,148,31,148,30,73,31,73,30,118,31,53,31,39,31,4,31,40,31,170,31,68,31,174,31,174,30,237,31,237,30,183,31,183,30,35,31,54,31,132,31,238,31,238,30,84,31,84,30,5,31,247,31,221,31,248,31,159,31,48,31,157,31,113,31,113,30,142,31,142,30,94,31,37,31,97,31,58,31,34,31,96,31,2,31,162,31,236,31,219,31,240,31,122,31,62,31,223,31,89,31,136,31,136,30,136,29,251,31,251,30,58,31,203,31,216,31,216,30,122,31,159,31,194,31,183,31,127,31,104,31,104,30,31,31,163,31,51,31,31,31,254,31,254,30,114,31,55,31,55,30,248,31,248,30,248,29,147,31,147,30,202,31,10,31,39,31,176,31,4,31,32,31,32,30,169,31,6,31,6,30,6,29,144,31,229,31,170,31,212,31,135,31,134,31,165,31,59,31,241,31,215,31,215,30,235,31,35,31,20,31,124,31,124,30,190,31,190,30,190,29,59,31,45,31,93,31,74,31,123,31,80,31,33,31,3,31,3,30,171,31,46,31,176,31,247,31,11,31,71,31,71,30,32,31,80,31,58,31,137,31,209,31,82,31,161,31,161,30,16,31,98,31,99,31,99,30,60,31,38,31,38,30,23,31,35,31,104,31,15,31,53,31,178,31,224,31,121,31,144,31,252,31,71,31,163,31,160,31,53,31,53,30,8,31,94,31,40,31,186,31,71,31,71,30,40,31,145,31,5,31,202,31,47,31,47,30,47,29,47,28,19,31,119,31,227,31,33,31,33,30,46,31,98,31,196,31,224,31,150,31,150,30,95,31,202,31,103,31,254,31,254,30,254,29,254,28,105,31,105,30,181,31,65,31,65,30,253,31,23,31,126,31,126,30,129,31,228,31,207,31,179,31,99,31,68,31,99,31,71,31,127,31,211,31,182,31,182,30,197,31,78,31,50,31,253,31,155,31,210,31,55,31,129,31,138,31,35,31,2,31,171,31,61,31,62,31,71,31,128,31,85,31,229,31,77,31,139,31,43,31,43,30,43,29,210,31,3,31,78,31,78,30,200,31,248,31,238,31,142,31,142,30,219,31,228,31,185,31,185,30,27,31,101,31,127,31,127,30,203,31,134,31,132,31,158,31,158,30,247,31,87,31,207,31,207,30,11,31,11,30,11,29,155,31,6,31,177,31,35,31,19,31,64,31,168,31,192,31,226,31,15,31,15,30,247,31,219,31,127,31,167,31,146,31,114,31,14,31,11,31,167,31,103,31,119,31,57,31,57,30,57,29,96,31,212,31,52,31,178,31,225,31,34,31,151,31,65,31,65,30,65,29,200,31,82,31,210,31,216,31,193,31,153,31,55,31,165,31,247,31,222,31,249,31,249,30,167,31,252,31,92,31,196,31,53,31,49,31,49,30,181,31,227,31,143,31,159,31,128,31,143,31,51,31,225,31,119,31,46,31,115,31,115,30,115,29,25,31,7,31,7,30,217,31,64,31,142,31,150,31,205,31,146,31,146,30,67,31,32,31,217,31,217,30,217,29,64,31,147,31,121,31,3,31,14,31,14,30,6,31,6,30,234,31,55,31,230,31,230,30,180,31,180,30,210,31,38,31,214,31,28,31,28,30,28,29,5,31,19,31,19,30,63,31,63,30,174,31,174,30,89,31,17,31,166,31,188,31,188,30,212,31,235,31,83,31,64,31,103,31,197,31,197,31,56,31,193,31,246,31,247,31,247,30,247,29,135,31,135,30,214,31,181,31,181,30,154,31,154,30,91,31,115,31,9,31,9,30,199,31,120,31,120,30,245,31,190,31,190,30,255,31,255,30,27,31,66,31,66,30,124,31,133,31,88,31,213,31,84,31,235,31,200,31,36,31,5,31,42,31,94,31,94,30,94,29,199,31,160,31,55,31,111,31,23,31,87,31,184,31,184,30,30,31,62,31,194,31,131,31,19,31,118,31,128,31,217,31,26,31,162,31,145,31,145,30,211,31,179,31,100,31,215,31,77,31,218,31,152,31,123,31,222,31,222,30,222,29,144,31,58,31,247,31,68,31,97,31,160,31,83,31,72,31,72,30,62,31,37,31,37,30,37,29,28,31,28,30,28,29,175,31,225,31,225,30,9,31,191,31,191,30,4,31,13,31,57,31,75,31,139,31,67,31,146,31,69,31,123,31,221,31,221,30,221,29,156,31,198,31,64,31,57,31,146,31,152,31,31,31,106,31,13,31,97,31,236,31,236,30,204,31,204,30,186,31,249,31,249,30,144,31,252,31,146,31,179,31,179,30,179,29,101,31,85,31,85,30,85,29,115,31,115,30,83,31,199,31,204,31,204,30,122,31,254,31,31,31,221,31,221,30,190,31,29,31,63,31,23,31,23,30,235,31,235,30,249,31,233,31,27,31,160,31,233,31,151,31,40,31,39,31,39,30,20,31,20,30,246,31,89,31,213,31,145,31,127,31,2,31,2,30,205,31,205,30,205,29,43,31,43,30,161,31,211,31,137,31,113,31,113,30,122,31,168,31,168,30,75,31,52,31,79,31,192,31,192,30,211,31,102,31,24,31,24,30,24,29,67,31,133,31,133,30,133,29,150,31,150,30,72,31,130,31,130,30,227,31,90,31,242,31,56,31,255,31,230,31,230,30,230,29,230,28,222,31,251,31,202,31,202,30,37,31,37,30,110,31,110,30,164,31,112,31,122,31,151,31,77,31,128,31,155,31,26,31,159,31,1,31,178,31,93,31,246,31,197,31,27,31,18,31,196,31,196,30,207,31,49,31,120,31,167,31,151,31,151,30,2,31,2,30,115,31,58,31,58,30,208,31,92,31,55,31,55,30,163,31,163,30,12,31,118,31,235,31,145,31,60,31,207,31,98,31,158,31,158,30,8,31,122,31,36,31,235,31,234,31,47,31,47,30,182,31,80,31,127,31,44,31,214,31,125,31,125,30,125,29,154,31,61,31,180,31,190,31,114,31,85,31,244,31,219,31,84,31,84,30,136,31,162,31,213,31,213,30,213,29,230,31,99,31,156,31,254,31,186,31,204,31,179,31,203,31,135,31,135,30,80,31,62,31,118,31,118,30,133,31,213,31,29,31,92,31,239,31,211,31,208,31,218,31,214,31,72,31,72,30,143,31,226,31,54,31,226,31,27,31,116,31,254,31,179,31,10,31,10,30,215,31,158,31,171,31,244,31,136,31,136,30,18,31,54,31,54,30,167,31,12,31,62,31,74,31,89,31,113,31,47,31,47,30,52,31,20,31,20,30,229,31,144,31,140,31,252,31,38,31,52,31,11,31,244,31,235,31,216,31,23,31,142,31,142,30,150,31,150,30,29,31,145,31,68,31,253,31,152,31,152,30,152,29,188,31,188,30,239,31,25,31,71,31,71,30,180,31,254,31,14,31,118,31,118,30,70,31,75,31,179,31,49,31,49,30,49,29,250,31,145,31,4,31,197,31,242,31,101,31,194,31,17,31,17,30,107,31,107,30,107,29,107,28,251,31,251,30,244,31,96,31,96,30,96,29,242,31,31,31,83,31,83,30,165,31,6,31,221,31,221,30,111,31,111,30,114,31,33,31,49,31,12,31,23,31,160,31,160,30,3,31,3,30,227,31,251,31,251,30,82,31,82,30,135,31,135,30,32,31,198,31,221,31,108,31,110,31,110,30,1,31,170,31,187,31,187,30,187,29,134,31,21,31,31,31,31,30,9,31,2,31,15,31,110,31,146,31,111,31,211,31,250,31,103,31,203,31,190,31,130,31,130,30,201,31,224,31,224,30,157,31,229,31,162,31,162,30,162,29,30,31,18,31,103,31,194,31,155,31,113,31,113,30,196,31,220,31,87,31,87,30,186,31,176,31,153,31,153,30,235,31,140,31,50,31,221,31,114,31,221,31,6,31,176,31,81,31,12,31,12,30,81,31,235,31,235,30,254,31,188,31,227,31,50,31,71,31,13,31,141,31,99,31,178,31,178,30,80,31,80,30,80,29,198,31,114,31,25,31,25,30,103,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
