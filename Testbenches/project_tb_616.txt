-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 386;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (20,0,0,0,56,0,187,0,62,0,69,0,206,0,0,0,0,0,17,0,244,0,0,0,66,0,253,0,0,0,0,0,0,0,153,0,0,0,91,0,37,0,140,0,0,0,98,0,0,0,230,0,0,0,193,0,106,0,164,0,0,0,134,0,25,0,0,0,17,0,0,0,121,0,242,0,0,0,190,0,0,0,247,0,211,0,0,0,19,0,154,0,19,0,0,0,0,0,14,0,173,0,119,0,221,0,189,0,191,0,117,0,218,0,167,0,168,0,0,0,161,0,105,0,1,0,94,0,203,0,152,0,27,0,69,0,213,0,158,0,103,0,100,0,157,0,68,0,57,0,52,0,186,0,91,0,0,0,11,0,0,0,0,0,55,0,79,0,96,0,196,0,176,0,35,0,42,0,88,0,235,0,12,0,0,0,95,0,198,0,53,0,0,0,73,0,200,0,245,0,96,0,128,0,170,0,154,0,94,0,96,0,65,0,82,0,62,0,203,0,33,0,70,0,0,0,0,0,131,0,0,0,201,0,62,0,0,0,0,0,58,0,112,0,46,0,191,0,127,0,207,0,188,0,91,0,60,0,249,0,195,0,18,0,99,0,0,0,112,0,11,0,32,0,96,0,141,0,0,0,189,0,0,0,238,0,240,0,110,0,0,0,0,0,0,0,237,0,128,0,144,0,0,0,152,0,16,0,159,0,0,0,0,0,229,0,0,0,1,0,62,0,24,0,193,0,0,0,32,0,188,0,95,0,0,0,250,0,125,0,0,0,138,0,167,0,94,0,125,0,250,0,94,0,227,0,0,0,13,0,147,0,0,0,5,0,86,0,2,0,33,0,119,0,0,0,149,0,70,0,41,0,249,0,118,0,36,0,59,0,0,0,0,0,0,0,17,0,238,0,6,0,118,0,218,0,93,0,0,0,0,0,0,0,148,0,0,0,121,0,32,0,12,0,4,0,30,0,197,0,0,0,244,0,161,0,26,0,209,0,0,0,0,0,110,0,254,0,85,0,69,0,185,0,183,0,0,0,237,0,149,0,106,0,245,0,201,0,169,0,195,0,129,0,171,0,130,0,0,0,91,0,0,0,0,0,198,0,169,0,181,0,215,0,94,0,51,0,160,0,244,0,219,0,83,0,45,0,159,0,190,0,59,0,200,0,0,0,69,0,37,0,141,0,26,0,0,0,171,0,244,0,30,0,176,0,0,0,0,0,244,0,133,0,195,0,51,0,192,0,86,0,222,0,0,0,181,0,0,0,184,0,208,0,63,0,142,0,0,0,0,0,188,0,238,0,47,0,55,0,214,0,189,0,149,0,0,0,200,0,142,0,223,0,195,0,161,0,0,0,88,0,141,0,55,0,0,0,0,0,113,0,33,0,129,0,116,0,182,0,0,0,42,0,249,0,239,0,211,0,150,0,116,0,105,0,246,0,0,0,232,0,98,0,166,0,0,0,85,0,83,0,91,0,119,0,52,0,28,0,241,0,3,0,241,0,0,0,217,0,74,0,0,0,46,0,9,0,93,0,233,0,13,0,67,0,70,0,229,0,0,0,22,0,0,0,0,0,0,0,0,0,145,0,114,0,160,0,199,0,141,0,202,0,135,0,58,0,206,0,172,0,129,0,0,0,204,0,180,0,250,0,33,0,199,0,0,0,207,0,0,0,209,0,114,0,200,0,0,0,228,0,0,0,175,0,0,0,211,0,147,0,187,0,130,0,192,0,99,0,204,0);
signal scenario_full  : scenario_type := (20,31,20,30,56,31,187,31,62,31,69,31,206,31,206,30,206,29,17,31,244,31,244,30,66,31,253,31,253,30,253,29,253,28,153,31,153,30,91,31,37,31,140,31,140,30,98,31,98,30,230,31,230,30,193,31,106,31,164,31,164,30,134,31,25,31,25,30,17,31,17,30,121,31,242,31,242,30,190,31,190,30,247,31,211,31,211,30,19,31,154,31,19,31,19,30,19,29,14,31,173,31,119,31,221,31,189,31,191,31,117,31,218,31,167,31,168,31,168,30,161,31,105,31,1,31,94,31,203,31,152,31,27,31,69,31,213,31,158,31,103,31,100,31,157,31,68,31,57,31,52,31,186,31,91,31,91,30,11,31,11,30,11,29,55,31,79,31,96,31,196,31,176,31,35,31,42,31,88,31,235,31,12,31,12,30,95,31,198,31,53,31,53,30,73,31,200,31,245,31,96,31,128,31,170,31,154,31,94,31,96,31,65,31,82,31,62,31,203,31,33,31,70,31,70,30,70,29,131,31,131,30,201,31,62,31,62,30,62,29,58,31,112,31,46,31,191,31,127,31,207,31,188,31,91,31,60,31,249,31,195,31,18,31,99,31,99,30,112,31,11,31,32,31,96,31,141,31,141,30,189,31,189,30,238,31,240,31,110,31,110,30,110,29,110,28,237,31,128,31,144,31,144,30,152,31,16,31,159,31,159,30,159,29,229,31,229,30,1,31,62,31,24,31,193,31,193,30,32,31,188,31,95,31,95,30,250,31,125,31,125,30,138,31,167,31,94,31,125,31,250,31,94,31,227,31,227,30,13,31,147,31,147,30,5,31,86,31,2,31,33,31,119,31,119,30,149,31,70,31,41,31,249,31,118,31,36,31,59,31,59,30,59,29,59,28,17,31,238,31,6,31,118,31,218,31,93,31,93,30,93,29,93,28,148,31,148,30,121,31,32,31,12,31,4,31,30,31,197,31,197,30,244,31,161,31,26,31,209,31,209,30,209,29,110,31,254,31,85,31,69,31,185,31,183,31,183,30,237,31,149,31,106,31,245,31,201,31,169,31,195,31,129,31,171,31,130,31,130,30,91,31,91,30,91,29,198,31,169,31,181,31,215,31,94,31,51,31,160,31,244,31,219,31,83,31,45,31,159,31,190,31,59,31,200,31,200,30,69,31,37,31,141,31,26,31,26,30,171,31,244,31,30,31,176,31,176,30,176,29,244,31,133,31,195,31,51,31,192,31,86,31,222,31,222,30,181,31,181,30,184,31,208,31,63,31,142,31,142,30,142,29,188,31,238,31,47,31,55,31,214,31,189,31,149,31,149,30,200,31,142,31,223,31,195,31,161,31,161,30,88,31,141,31,55,31,55,30,55,29,113,31,33,31,129,31,116,31,182,31,182,30,42,31,249,31,239,31,211,31,150,31,116,31,105,31,246,31,246,30,232,31,98,31,166,31,166,30,85,31,83,31,91,31,119,31,52,31,28,31,241,31,3,31,241,31,241,30,217,31,74,31,74,30,46,31,9,31,93,31,233,31,13,31,67,31,70,31,229,31,229,30,22,31,22,30,22,29,22,28,22,27,145,31,114,31,160,31,199,31,141,31,202,31,135,31,58,31,206,31,172,31,129,31,129,30,204,31,180,31,250,31,33,31,199,31,199,30,207,31,207,30,209,31,114,31,200,31,200,30,228,31,228,30,175,31,175,30,211,31,147,31,187,31,130,31,192,31,99,31,204,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
