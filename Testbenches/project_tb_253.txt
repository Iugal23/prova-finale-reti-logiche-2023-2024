-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 769;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,97,0,0,0,0,0,109,0,227,0,140,0,76,0,210,0,0,0,188,0,3,0,76,0,154,0,0,0,29,0,210,0,122,0,82,0,27,0,0,0,0,0,203,0,58,0,0,0,0,0,0,0,23,0,164,0,134,0,153,0,249,0,154,0,24,0,216,0,29,0,0,0,46,0,68,0,128,0,132,0,54,0,0,0,126,0,0,0,0,0,0,0,6,0,71,0,163,0,0,0,0,0,13,0,156,0,242,0,28,0,203,0,3,0,243,0,85,0,94,0,0,0,65,0,67,0,110,0,1,0,194,0,227,0,216,0,0,0,0,0,195,0,251,0,174,0,242,0,77,0,172,0,229,0,19,0,142,0,0,0,207,0,208,0,0,0,131,0,36,0,135,0,203,0,0,0,0,0,1,0,206,0,79,0,12,0,62,0,71,0,0,0,0,0,105,0,60,0,0,0,75,0,0,0,88,0,38,0,142,0,189,0,0,0,191,0,94,0,16,0,54,0,0,0,129,0,199,0,29,0,108,0,44,0,24,0,232,0,6,0,191,0,216,0,0,0,78,0,194,0,49,0,89,0,173,0,227,0,188,0,57,0,133,0,0,0,248,0,0,0,0,0,219,0,37,0,2,0,212,0,0,0,120,0,0,0,62,0,0,0,0,0,70,0,86,0,0,0,107,0,47,0,3,0,182,0,210,0,157,0,242,0,54,0,0,0,176,0,127,0,227,0,10,0,227,0,129,0,171,0,0,0,43,0,175,0,88,0,240,0,81,0,0,0,25,0,253,0,134,0,246,0,241,0,251,0,18,0,53,0,50,0,187,0,98,0,56,0,44,0,57,0,192,0,219,0,0,0,117,0,212,0,92,0,101,0,254,0,0,0,176,0,81,0,0,0,7,0,0,0,23,0,53,0,0,0,103,0,76,0,123,0,30,0,107,0,8,0,0,0,80,0,92,0,184,0,161,0,87,0,186,0,98,0,0,0,198,0,42,0,134,0,224,0,142,0,91,0,3,0,106,0,124,0,11,0,1,0,132,0,193,0,30,0,150,0,108,0,165,0,118,0,155,0,1,0,219,0,253,0,85,0,134,0,188,0,42,0,246,0,166,0,0,0,6,0,91,0,158,0,49,0,0,0,140,0,116,0,0,0,146,0,98,0,137,0,0,0,59,0,82,0,170,0,0,0,121,0,35,0,220,0,60,0,9,0,236,0,128,0,0,0,22,0,69,0,68,0,93,0,249,0,41,0,135,0,198,0,139,0,20,0,217,0,0,0,19,0,136,0,124,0,216,0,129,0,0,0,59,0,89,0,74,0,239,0,130,0,7,0,138,0,237,0,0,0,44,0,225,0,116,0,0,0,70,0,191,0,0,0,56,0,121,0,175,0,64,0,132,0,152,0,25,0,200,0,0,0,116,0,0,0,0,0,9,0,125,0,179,0,205,0,49,0,148,0,85,0,0,0,68,0,44,0,34,0,70,0,167,0,0,0,209,0,144,0,0,0,162,0,38,0,237,0,46,0,221,0,0,0,174,0,0,0,247,0,25,0,0,0,0,0,85,0,219,0,50,0,104,0,9,0,183,0,106,0,181,0,215,0,200,0,71,0,248,0,241,0,0,0,171,0,18,0,32,0,39,0,105,0,130,0,43,0,128,0,212,0,135,0,37,0,0,0,216,0,144,0,73,0,5,0,146,0,139,0,153,0,159,0,82,0,145,0,124,0,134,0,68,0,0,0,0,0,8,0,68,0,0,0,224,0,0,0,179,0,87,0,72,0,142,0,220,0,253,0,64,0,0,0,0,0,53,0,190,0,238,0,213,0,135,0,0,0,232,0,222,0,79,0,212,0,83,0,93,0,117,0,0,0,153,0,144,0,171,0,0,0,34,0,0,0,99,0,148,0,173,0,0,0,204,0,241,0,159,0,234,0,0,0,0,0,151,0,123,0,43,0,12,0,38,0,125,0,224,0,222,0,106,0,47,0,0,0,209,0,0,0,0,0,106,0,146,0,164,0,33,0,231,0,139,0,0,0,0,0,84,0,70,0,244,0,137,0,84,0,0,0,154,0,71,0,0,0,184,0,69,0,75,0,96,0,0,0,73,0,124,0,193,0,238,0,166,0,43,0,179,0,81,0,105,0,0,0,0,0,55,0,23,0,0,0,0,0,101,0,0,0,101,0,85,0,93,0,0,0,0,0,5,0,25,0,80,0,40,0,180,0,160,0,55,0,0,0,0,0,151,0,86,0,201,0,229,0,76,0,11,0,117,0,152,0,1,0,155,0,70,0,223,0,182,0,139,0,0,0,61,0,200,0,210,0,75,0,0,0,208,0,86,0,119,0,21,0,144,0,0,0,0,0,122,0,0,0,162,0,138,0,160,0,36,0,0,0,11,0,252,0,104,0,44,0,51,0,255,0,80,0,253,0,252,0,0,0,0,0,0,0,11,0,0,0,241,0,156,0,90,0,137,0,0,0,185,0,235,0,166,0,214,0,110,0,0,0,9,0,32,0,232,0,56,0,25,0,72,0,174,0,146,0,0,0,123,0,7,0,123,0,134,0,81,0,74,0,87,0,0,0,99,0,214,0,82,0,86,0,114,0,180,0,245,0,74,0,251,0,153,0,0,0,0,0,150,0,79,0,50,0,0,0,9,0,177,0,0,0,240,0,126,0,213,0,224,0,111,0,246,0,199,0,175,0,121,0,60,0,30,0,20,0,45,0,208,0,213,0,143,0,0,0,218,0,62,0,98,0,99,0,0,0,70,0,171,0,175,0,172,0,98,0,235,0,48,0,0,0,163,0,0,0,0,0,0,0,48,0,186,0,155,0,0,0,90,0,233,0,72,0,93,0,250,0,0,0,81,0,147,0,35,0,245,0,138,0,91,0,0,0,198,0,0,0,0,0,194,0,120,0,53,0,146,0,3,0,55,0,225,0,162,0,11,0,64,0,13,0,185,0,0,0,223,0,157,0,23,0,173,0,229,0,8,0,67,0,0,0,56,0,0,0,94,0,145,0,226,0,0,0,6,0,22,0,241,0,115,0,60,0,126,0,49,0,208,0,203,0,0,0,40,0,147,0,70,0,255,0,222,0,0,0,74,0,179,0,168,0,235,0,210,0,12,0,126,0,0,0,0,0,95,0,76,0,233,0,132,0,116,0,38,0,175,0,0,0,71,0,0,0,12,0,0,0,30,0,124,0,57,0,125,0,137,0,43,0,0,0,0,0,226,0,0,0,0,0,183,0,209,0,244,0,74,0,207,0,45,0,0,0,0,0,105,0,188,0,230,0,0,0,0,0,159,0,25,0,0,0,194,0,1,0,183,0,136,0,48,0,103,0,0,0,0,0,54,0,25,0,28,0,0,0,0,0,84,0,241,0,150,0,255,0,105,0,25,0,170,0,126,0,13,0,129,0,156,0,230,0,12,0,177,0,190,0,153,0,131,0);
signal scenario_full  : scenario_type := (0,0,97,31,97,30,97,29,109,31,227,31,140,31,76,31,210,31,210,30,188,31,3,31,76,31,154,31,154,30,29,31,210,31,122,31,82,31,27,31,27,30,27,29,203,31,58,31,58,30,58,29,58,28,23,31,164,31,134,31,153,31,249,31,154,31,24,31,216,31,29,31,29,30,46,31,68,31,128,31,132,31,54,31,54,30,126,31,126,30,126,29,126,28,6,31,71,31,163,31,163,30,163,29,13,31,156,31,242,31,28,31,203,31,3,31,243,31,85,31,94,31,94,30,65,31,67,31,110,31,1,31,194,31,227,31,216,31,216,30,216,29,195,31,251,31,174,31,242,31,77,31,172,31,229,31,19,31,142,31,142,30,207,31,208,31,208,30,131,31,36,31,135,31,203,31,203,30,203,29,1,31,206,31,79,31,12,31,62,31,71,31,71,30,71,29,105,31,60,31,60,30,75,31,75,30,88,31,38,31,142,31,189,31,189,30,191,31,94,31,16,31,54,31,54,30,129,31,199,31,29,31,108,31,44,31,24,31,232,31,6,31,191,31,216,31,216,30,78,31,194,31,49,31,89,31,173,31,227,31,188,31,57,31,133,31,133,30,248,31,248,30,248,29,219,31,37,31,2,31,212,31,212,30,120,31,120,30,62,31,62,30,62,29,70,31,86,31,86,30,107,31,47,31,3,31,182,31,210,31,157,31,242,31,54,31,54,30,176,31,127,31,227,31,10,31,227,31,129,31,171,31,171,30,43,31,175,31,88,31,240,31,81,31,81,30,25,31,253,31,134,31,246,31,241,31,251,31,18,31,53,31,50,31,187,31,98,31,56,31,44,31,57,31,192,31,219,31,219,30,117,31,212,31,92,31,101,31,254,31,254,30,176,31,81,31,81,30,7,31,7,30,23,31,53,31,53,30,103,31,76,31,123,31,30,31,107,31,8,31,8,30,80,31,92,31,184,31,161,31,87,31,186,31,98,31,98,30,198,31,42,31,134,31,224,31,142,31,91,31,3,31,106,31,124,31,11,31,1,31,132,31,193,31,30,31,150,31,108,31,165,31,118,31,155,31,1,31,219,31,253,31,85,31,134,31,188,31,42,31,246,31,166,31,166,30,6,31,91,31,158,31,49,31,49,30,140,31,116,31,116,30,146,31,98,31,137,31,137,30,59,31,82,31,170,31,170,30,121,31,35,31,220,31,60,31,9,31,236,31,128,31,128,30,22,31,69,31,68,31,93,31,249,31,41,31,135,31,198,31,139,31,20,31,217,31,217,30,19,31,136,31,124,31,216,31,129,31,129,30,59,31,89,31,74,31,239,31,130,31,7,31,138,31,237,31,237,30,44,31,225,31,116,31,116,30,70,31,191,31,191,30,56,31,121,31,175,31,64,31,132,31,152,31,25,31,200,31,200,30,116,31,116,30,116,29,9,31,125,31,179,31,205,31,49,31,148,31,85,31,85,30,68,31,44,31,34,31,70,31,167,31,167,30,209,31,144,31,144,30,162,31,38,31,237,31,46,31,221,31,221,30,174,31,174,30,247,31,25,31,25,30,25,29,85,31,219,31,50,31,104,31,9,31,183,31,106,31,181,31,215,31,200,31,71,31,248,31,241,31,241,30,171,31,18,31,32,31,39,31,105,31,130,31,43,31,128,31,212,31,135,31,37,31,37,30,216,31,144,31,73,31,5,31,146,31,139,31,153,31,159,31,82,31,145,31,124,31,134,31,68,31,68,30,68,29,8,31,68,31,68,30,224,31,224,30,179,31,87,31,72,31,142,31,220,31,253,31,64,31,64,30,64,29,53,31,190,31,238,31,213,31,135,31,135,30,232,31,222,31,79,31,212,31,83,31,93,31,117,31,117,30,153,31,144,31,171,31,171,30,34,31,34,30,99,31,148,31,173,31,173,30,204,31,241,31,159,31,234,31,234,30,234,29,151,31,123,31,43,31,12,31,38,31,125,31,224,31,222,31,106,31,47,31,47,30,209,31,209,30,209,29,106,31,146,31,164,31,33,31,231,31,139,31,139,30,139,29,84,31,70,31,244,31,137,31,84,31,84,30,154,31,71,31,71,30,184,31,69,31,75,31,96,31,96,30,73,31,124,31,193,31,238,31,166,31,43,31,179,31,81,31,105,31,105,30,105,29,55,31,23,31,23,30,23,29,101,31,101,30,101,31,85,31,93,31,93,30,93,29,5,31,25,31,80,31,40,31,180,31,160,31,55,31,55,30,55,29,151,31,86,31,201,31,229,31,76,31,11,31,117,31,152,31,1,31,155,31,70,31,223,31,182,31,139,31,139,30,61,31,200,31,210,31,75,31,75,30,208,31,86,31,119,31,21,31,144,31,144,30,144,29,122,31,122,30,162,31,138,31,160,31,36,31,36,30,11,31,252,31,104,31,44,31,51,31,255,31,80,31,253,31,252,31,252,30,252,29,252,28,11,31,11,30,241,31,156,31,90,31,137,31,137,30,185,31,235,31,166,31,214,31,110,31,110,30,9,31,32,31,232,31,56,31,25,31,72,31,174,31,146,31,146,30,123,31,7,31,123,31,134,31,81,31,74,31,87,31,87,30,99,31,214,31,82,31,86,31,114,31,180,31,245,31,74,31,251,31,153,31,153,30,153,29,150,31,79,31,50,31,50,30,9,31,177,31,177,30,240,31,126,31,213,31,224,31,111,31,246,31,199,31,175,31,121,31,60,31,30,31,20,31,45,31,208,31,213,31,143,31,143,30,218,31,62,31,98,31,99,31,99,30,70,31,171,31,175,31,172,31,98,31,235,31,48,31,48,30,163,31,163,30,163,29,163,28,48,31,186,31,155,31,155,30,90,31,233,31,72,31,93,31,250,31,250,30,81,31,147,31,35,31,245,31,138,31,91,31,91,30,198,31,198,30,198,29,194,31,120,31,53,31,146,31,3,31,55,31,225,31,162,31,11,31,64,31,13,31,185,31,185,30,223,31,157,31,23,31,173,31,229,31,8,31,67,31,67,30,56,31,56,30,94,31,145,31,226,31,226,30,6,31,22,31,241,31,115,31,60,31,126,31,49,31,208,31,203,31,203,30,40,31,147,31,70,31,255,31,222,31,222,30,74,31,179,31,168,31,235,31,210,31,12,31,126,31,126,30,126,29,95,31,76,31,233,31,132,31,116,31,38,31,175,31,175,30,71,31,71,30,12,31,12,30,30,31,124,31,57,31,125,31,137,31,43,31,43,30,43,29,226,31,226,30,226,29,183,31,209,31,244,31,74,31,207,31,45,31,45,30,45,29,105,31,188,31,230,31,230,30,230,29,159,31,25,31,25,30,194,31,1,31,183,31,136,31,48,31,103,31,103,30,103,29,54,31,25,31,28,31,28,30,28,29,84,31,241,31,150,31,255,31,105,31,25,31,170,31,126,31,13,31,129,31,156,31,230,31,12,31,177,31,190,31,153,31,131,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
