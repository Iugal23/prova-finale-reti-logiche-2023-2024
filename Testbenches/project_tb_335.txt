-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 830;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (65,0,52,0,0,0,33,0,42,0,0,0,180,0,158,0,212,0,71,0,0,0,227,0,142,0,0,0,129,0,17,0,97,0,0,0,16,0,76,0,188,0,99,0,50,0,0,0,167,0,178,0,61,0,70,0,0,0,0,0,0,0,87,0,0,0,7,0,52,0,91,0,171,0,180,0,150,0,69,0,0,0,35,0,140,0,245,0,0,0,76,0,0,0,35,0,167,0,239,0,133,0,188,0,42,0,0,0,165,0,184,0,163,0,128,0,145,0,144,0,27,0,0,0,57,0,52,0,185,0,28,0,0,0,182,0,155,0,0,0,203,0,220,0,214,0,40,0,206,0,39,0,109,0,112,0,177,0,223,0,94,0,152,0,230,0,0,0,0,0,228,0,32,0,162,0,13,0,0,0,68,0,249,0,234,0,77,0,74,0,110,0,0,0,0,0,132,0,0,0,0,0,160,0,18,0,244,0,43,0,93,0,41,0,29,0,101,0,204,0,243,0,0,0,247,0,0,0,20,0,134,0,97,0,122,0,255,0,187,0,138,0,159,0,34,0,191,0,124,0,0,0,197,0,98,0,0,0,0,0,59,0,133,0,157,0,126,0,175,0,77,0,110,0,195,0,45,0,70,0,196,0,238,0,106,0,198,0,114,0,115,0,221,0,0,0,0,0,182,0,172,0,149,0,114,0,171,0,20,0,147,0,71,0,0,0,0,0,159,0,47,0,85,0,24,0,42,0,7,0,167,0,86,0,205,0,120,0,86,0,0,0,213,0,53,0,101,0,32,0,249,0,0,0,86,0,25,0,0,0,229,0,0,0,0,0,50,0,0,0,0,0,0,0,241,0,90,0,221,0,58,0,0,0,204,0,96,0,183,0,0,0,0,0,42,0,250,0,198,0,0,0,203,0,0,0,161,0,154,0,0,0,124,0,233,0,184,0,0,0,0,0,177,0,219,0,232,0,176,0,0,0,108,0,187,0,245,0,0,0,162,0,0,0,93,0,113,0,117,0,217,0,168,0,92,0,0,0,193,0,93,0,0,0,166,0,165,0,0,0,0,0,131,0,174,0,108,0,60,0,26,0,146,0,85,0,114,0,73,0,201,0,0,0,161,0,146,0,78,0,74,0,147,0,68,0,241,0,103,0,0,0,92,0,83,0,254,0,168,0,74,0,213,0,31,0,176,0,244,0,246,0,73,0,47,0,102,0,222,0,157,0,162,0,0,0,248,0,0,0,216,0,150,0,91,0,0,0,97,0,125,0,0,0,129,0,184,0,0,0,0,0,40,0,238,0,0,0,121,0,0,0,246,0,25,0,158,0,0,0,210,0,39,0,0,0,33,0,0,0,253,0,2,0,0,0,76,0,0,0,0,0,17,0,71,0,0,0,0,0,83,0,249,0,149,0,49,0,22,0,50,0,0,0,0,0,88,0,234,0,18,0,230,0,135,0,0,0,83,0,192,0,8,0,91,0,0,0,180,0,14,0,55,0,0,0,0,0,0,0,173,0,141,0,123,0,200,0,244,0,22,0,26,0,8,0,0,0,0,0,110,0,74,0,27,0,57,0,234,0,0,0,23,0,18,0,0,0,239,0,0,0,213,0,76,0,110,0,1,0,220,0,182,0,220,0,204,0,8,0,49,0,162,0,0,0,232,0,223,0,68,0,0,0,0,0,0,0,241,0,193,0,171,0,163,0,11,0,91,0,202,0,151,0,187,0,71,0,0,0,191,0,137,0,20,0,0,0,14,0,0,0,114,0,121,0,0,0,6,0,178,0,221,0,209,0,58,0,84,0,134,0,74,0,144,0,6,0,0,0,139,0,129,0,130,0,0,0,4,0,97,0,224,0,10,0,95,0,141,0,0,0,42,0,229,0,47,0,68,0,12,0,249,0,175,0,129,0,234,0,81,0,138,0,73,0,228,0,0,0,246,0,0,0,97,0,138,0,78,0,207,0,242,0,216,0,209,0,120,0,185,0,61,0,120,0,91,0,101,0,0,0,130,0,143,0,0,0,87,0,18,0,102,0,73,0,0,0,0,0,0,0,56,0,178,0,0,0,81,0,3,0,139,0,0,0,178,0,79,0,0,0,0,0,235,0,48,0,181,0,167,0,46,0,199,0,185,0,0,0,225,0,68,0,95,0,237,0,0,0,248,0,219,0,87,0,173,0,219,0,128,0,243,0,185,0,191,0,133,0,0,0,77,0,95,0,165,0,0,0,0,0,114,0,0,0,60,0,0,0,92,0,161,0,81,0,0,0,210,0,231,0,149,0,0,0,0,0,124,0,89,0,169,0,33,0,100,0,184,0,86,0,157,0,25,0,224,0,0,0,117,0,151,0,72,0,162,0,10,0,47,0,2,0,0,0,0,0,113,0,2,0,140,0,127,0,205,0,0,0,165,0,206,0,229,0,229,0,114,0,73,0,187,0,64,0,0,0,105,0,0,0,0,0,233,0,18,0,88,0,249,0,231,0,207,0,31,0,232,0,62,0,6,0,32,0,186,0,27,0,0,0,0,0,172,0,191,0,163,0,176,0,14,0,144,0,0,0,40,0,210,0,53,0,252,0,161,0,229,0,0,0,0,0,0,0,150,0,1,0,0,0,246,0,135,0,0,0,4,0,0,0,91,0,0,0,0,0,220,0,0,0,0,0,0,0,114,0,87,0,0,0,125,0,0,0,216,0,219,0,141,0,141,0,39,0,136,0,83,0,60,0,26,0,8,0,59,0,13,0,85,0,50,0,112,0,110,0,23,0,150,0,82,0,0,0,0,0,99,0,172,0,57,0,95,0,88,0,81,0,5,0,0,0,81,0,243,0,48,0,0,0,0,0,38,0,201,0,116,0,141,0,150,0,132,0,233,0,144,0,202,0,26,0,0,0,90,0,109,0,111,0,165,0,121,0,71,0,191,0,70,0,99,0,193,0,51,0,58,0,33,0,238,0,182,0,194,0,89,0,0,0,175,0,100,0,103,0,214,0,143,0,144,0,223,0,41,0,0,0,6,0,40,0,62,0,227,0,28,0,119,0,175,0,173,0,143,0,59,0,109,0,169,0,45,0,1,0,0,0,157,0,0,0,36,0,79,0,143,0,120,0,0,0,183,0,117,0,20,0,34,0,46,0,59,0,118,0,180,0,254,0,209,0,145,0,95,0,27,0,170,0,78,0,21,0,242,0,101,0,155,0,158,0,0,0,16,0,242,0,232,0,88,0,173,0,183,0,60,0,147,0,251,0,90,0,16,0,190,0,83,0,206,0,240,0,238,0,127,0,223,0,0,0,26,0,0,0,0,0,242,0,168,0,84,0,184,0,138,0,200,0,0,0,72,0,74,0,57,0,47,0,109,0,0,0,222,0,11,0,134,0,66,0,194,0,0,0,0,0,200,0,61,0,16,0,54,0,167,0,48,0,143,0,150,0,168,0,240,0,244,0,118,0,37,0,199,0,161,0,147,0,100,0,0,0,218,0,152,0,41,0,56,0,144,0,0,0,164,0,202,0,65,0,134,0,64,0,214,0,82,0,219,0,210,0,222,0,173,0,0,0,179,0,96,0,96,0,196,0,0,0,85,0,0,0,0,0,235,0,101,0,0,0,182,0,75,0,180,0,37,0,0,0,54,0,140,0,8,0,85,0,42,0,52,0,0,0,127,0,101,0,169,0,70,0,215,0,0,0,241,0,12,0,75,0,152,0,90,0,202,0,135,0,81,0,108,0,0,0);
signal scenario_full  : scenario_type := (65,31,52,31,52,30,33,31,42,31,42,30,180,31,158,31,212,31,71,31,71,30,227,31,142,31,142,30,129,31,17,31,97,31,97,30,16,31,76,31,188,31,99,31,50,31,50,30,167,31,178,31,61,31,70,31,70,30,70,29,70,28,87,31,87,30,7,31,52,31,91,31,171,31,180,31,150,31,69,31,69,30,35,31,140,31,245,31,245,30,76,31,76,30,35,31,167,31,239,31,133,31,188,31,42,31,42,30,165,31,184,31,163,31,128,31,145,31,144,31,27,31,27,30,57,31,52,31,185,31,28,31,28,30,182,31,155,31,155,30,203,31,220,31,214,31,40,31,206,31,39,31,109,31,112,31,177,31,223,31,94,31,152,31,230,31,230,30,230,29,228,31,32,31,162,31,13,31,13,30,68,31,249,31,234,31,77,31,74,31,110,31,110,30,110,29,132,31,132,30,132,29,160,31,18,31,244,31,43,31,93,31,41,31,29,31,101,31,204,31,243,31,243,30,247,31,247,30,20,31,134,31,97,31,122,31,255,31,187,31,138,31,159,31,34,31,191,31,124,31,124,30,197,31,98,31,98,30,98,29,59,31,133,31,157,31,126,31,175,31,77,31,110,31,195,31,45,31,70,31,196,31,238,31,106,31,198,31,114,31,115,31,221,31,221,30,221,29,182,31,172,31,149,31,114,31,171,31,20,31,147,31,71,31,71,30,71,29,159,31,47,31,85,31,24,31,42,31,7,31,167,31,86,31,205,31,120,31,86,31,86,30,213,31,53,31,101,31,32,31,249,31,249,30,86,31,25,31,25,30,229,31,229,30,229,29,50,31,50,30,50,29,50,28,241,31,90,31,221,31,58,31,58,30,204,31,96,31,183,31,183,30,183,29,42,31,250,31,198,31,198,30,203,31,203,30,161,31,154,31,154,30,124,31,233,31,184,31,184,30,184,29,177,31,219,31,232,31,176,31,176,30,108,31,187,31,245,31,245,30,162,31,162,30,93,31,113,31,117,31,217,31,168,31,92,31,92,30,193,31,93,31,93,30,166,31,165,31,165,30,165,29,131,31,174,31,108,31,60,31,26,31,146,31,85,31,114,31,73,31,201,31,201,30,161,31,146,31,78,31,74,31,147,31,68,31,241,31,103,31,103,30,92,31,83,31,254,31,168,31,74,31,213,31,31,31,176,31,244,31,246,31,73,31,47,31,102,31,222,31,157,31,162,31,162,30,248,31,248,30,216,31,150,31,91,31,91,30,97,31,125,31,125,30,129,31,184,31,184,30,184,29,40,31,238,31,238,30,121,31,121,30,246,31,25,31,158,31,158,30,210,31,39,31,39,30,33,31,33,30,253,31,2,31,2,30,76,31,76,30,76,29,17,31,71,31,71,30,71,29,83,31,249,31,149,31,49,31,22,31,50,31,50,30,50,29,88,31,234,31,18,31,230,31,135,31,135,30,83,31,192,31,8,31,91,31,91,30,180,31,14,31,55,31,55,30,55,29,55,28,173,31,141,31,123,31,200,31,244,31,22,31,26,31,8,31,8,30,8,29,110,31,74,31,27,31,57,31,234,31,234,30,23,31,18,31,18,30,239,31,239,30,213,31,76,31,110,31,1,31,220,31,182,31,220,31,204,31,8,31,49,31,162,31,162,30,232,31,223,31,68,31,68,30,68,29,68,28,241,31,193,31,171,31,163,31,11,31,91,31,202,31,151,31,187,31,71,31,71,30,191,31,137,31,20,31,20,30,14,31,14,30,114,31,121,31,121,30,6,31,178,31,221,31,209,31,58,31,84,31,134,31,74,31,144,31,6,31,6,30,139,31,129,31,130,31,130,30,4,31,97,31,224,31,10,31,95,31,141,31,141,30,42,31,229,31,47,31,68,31,12,31,249,31,175,31,129,31,234,31,81,31,138,31,73,31,228,31,228,30,246,31,246,30,97,31,138,31,78,31,207,31,242,31,216,31,209,31,120,31,185,31,61,31,120,31,91,31,101,31,101,30,130,31,143,31,143,30,87,31,18,31,102,31,73,31,73,30,73,29,73,28,56,31,178,31,178,30,81,31,3,31,139,31,139,30,178,31,79,31,79,30,79,29,235,31,48,31,181,31,167,31,46,31,199,31,185,31,185,30,225,31,68,31,95,31,237,31,237,30,248,31,219,31,87,31,173,31,219,31,128,31,243,31,185,31,191,31,133,31,133,30,77,31,95,31,165,31,165,30,165,29,114,31,114,30,60,31,60,30,92,31,161,31,81,31,81,30,210,31,231,31,149,31,149,30,149,29,124,31,89,31,169,31,33,31,100,31,184,31,86,31,157,31,25,31,224,31,224,30,117,31,151,31,72,31,162,31,10,31,47,31,2,31,2,30,2,29,113,31,2,31,140,31,127,31,205,31,205,30,165,31,206,31,229,31,229,31,114,31,73,31,187,31,64,31,64,30,105,31,105,30,105,29,233,31,18,31,88,31,249,31,231,31,207,31,31,31,232,31,62,31,6,31,32,31,186,31,27,31,27,30,27,29,172,31,191,31,163,31,176,31,14,31,144,31,144,30,40,31,210,31,53,31,252,31,161,31,229,31,229,30,229,29,229,28,150,31,1,31,1,30,246,31,135,31,135,30,4,31,4,30,91,31,91,30,91,29,220,31,220,30,220,29,220,28,114,31,87,31,87,30,125,31,125,30,216,31,219,31,141,31,141,31,39,31,136,31,83,31,60,31,26,31,8,31,59,31,13,31,85,31,50,31,112,31,110,31,23,31,150,31,82,31,82,30,82,29,99,31,172,31,57,31,95,31,88,31,81,31,5,31,5,30,81,31,243,31,48,31,48,30,48,29,38,31,201,31,116,31,141,31,150,31,132,31,233,31,144,31,202,31,26,31,26,30,90,31,109,31,111,31,165,31,121,31,71,31,191,31,70,31,99,31,193,31,51,31,58,31,33,31,238,31,182,31,194,31,89,31,89,30,175,31,100,31,103,31,214,31,143,31,144,31,223,31,41,31,41,30,6,31,40,31,62,31,227,31,28,31,119,31,175,31,173,31,143,31,59,31,109,31,169,31,45,31,1,31,1,30,157,31,157,30,36,31,79,31,143,31,120,31,120,30,183,31,117,31,20,31,34,31,46,31,59,31,118,31,180,31,254,31,209,31,145,31,95,31,27,31,170,31,78,31,21,31,242,31,101,31,155,31,158,31,158,30,16,31,242,31,232,31,88,31,173,31,183,31,60,31,147,31,251,31,90,31,16,31,190,31,83,31,206,31,240,31,238,31,127,31,223,31,223,30,26,31,26,30,26,29,242,31,168,31,84,31,184,31,138,31,200,31,200,30,72,31,74,31,57,31,47,31,109,31,109,30,222,31,11,31,134,31,66,31,194,31,194,30,194,29,200,31,61,31,16,31,54,31,167,31,48,31,143,31,150,31,168,31,240,31,244,31,118,31,37,31,199,31,161,31,147,31,100,31,100,30,218,31,152,31,41,31,56,31,144,31,144,30,164,31,202,31,65,31,134,31,64,31,214,31,82,31,219,31,210,31,222,31,173,31,173,30,179,31,96,31,96,31,196,31,196,30,85,31,85,30,85,29,235,31,101,31,101,30,182,31,75,31,180,31,37,31,37,30,54,31,140,31,8,31,85,31,42,31,52,31,52,30,127,31,101,31,169,31,70,31,215,31,215,30,241,31,12,31,75,31,152,31,90,31,202,31,135,31,81,31,108,31,108,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
