-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 528;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (21,0,197,0,164,0,152,0,18,0,200,0,225,0,0,0,0,0,174,0,132,0,72,0,90,0,173,0,129,0,255,0,0,0,119,0,57,0,0,0,0,0,239,0,137,0,0,0,19,0,97,0,242,0,150,0,183,0,208,0,0,0,228,0,43,0,0,0,36,0,162,0,202,0,254,0,0,0,13,0,38,0,0,0,68,0,242,0,65,0,65,0,37,0,94,0,28,0,0,0,0,0,232,0,189,0,150,0,222,0,5,0,49,0,20,0,250,0,166,0,91,0,157,0,129,0,110,0,217,0,0,0,0,0,0,0,171,0,0,0,73,0,0,0,26,0,107,0,189,0,80,0,237,0,35,0,150,0,178,0,146,0,224,0,154,0,248,0,18,0,184,0,57,0,117,0,169,0,38,0,249,0,86,0,203,0,220,0,32,0,120,0,92,0,187,0,194,0,0,0,27,0,205,0,10,0,83,0,153,0,180,0,147,0,169,0,190,0,142,0,97,0,100,0,122,0,0,0,186,0,0,0,222,0,128,0,43,0,75,0,127,0,48,0,0,0,0,0,210,0,0,0,0,0,53,0,16,0,25,0,233,0,170,0,160,0,104,0,0,0,29,0,14,0,175,0,113,0,92,0,14,0,53,0,143,0,151,0,192,0,27,0,0,0,0,0,37,0,242,0,130,0,0,0,90,0,0,0,0,0,242,0,22,0,111,0,178,0,41,0,47,0,28,0,210,0,135,0,252,0,167,0,151,0,103,0,29,0,146,0,148,0,178,0,247,0,0,0,22,0,125,0,0,0,0,0,255,0,89,0,71,0,61,0,0,0,105,0,195,0,146,0,178,0,105,0,0,0,188,0,0,0,210,0,108,0,15,0,255,0,34,0,81,0,127,0,75,0,0,0,10,0,133,0,39,0,171,0,34,0,0,0,207,0,0,0,40,0,233,0,213,0,0,0,168,0,0,0,214,0,217,0,216,0,63,0,139,0,49,0,169,0,0,0,103,0,73,0,0,0,223,0,95,0,204,0,140,0,172,0,217,0,24,0,207,0,0,0,0,0,181,0,211,0,211,0,254,0,34,0,0,0,138,0,109,0,187,0,39,0,99,0,205,0,228,0,0,0,161,0,146,0,0,0,0,0,92,0,251,0,124,0,5,0,0,0,219,0,131,0,0,0,49,0,0,0,116,0,0,0,203,0,0,0,24,0,120,0,19,0,207,0,0,0,0,0,10,0,231,0,0,0,11,0,234,0,196,0,132,0,20,0,0,0,76,0,0,0,90,0,200,0,226,0,5,0,125,0,230,0,89,0,84,0,103,0,90,0,100,0,123,0,47,0,0,0,235,0,206,0,0,0,0,0,0,0,113,0,143,0,247,0,228,0,216,0,11,0,0,0,210,0,199,0,179,0,197,0,129,0,54,0,82,0,156,0,0,0,224,0,151,0,170,0,0,0,72,0,157,0,166,0,0,0,0,0,151,0,71,0,57,0,59,0,23,0,152,0,43,0,246,0,219,0,105,0,7,0,0,0,0,0,148,0,0,0,0,0,132,0,121,0,153,0,114,0,166,0,136,0,98,0,112,0,240,0,188,0,0,0,21,0,0,0,81,0,79,0,49,0,0,0,0,0,60,0,0,0,0,0,0,0,145,0,27,0,0,0,229,0,0,0,27,0,0,0,176,0,0,0,20,0,0,0,157,0,212,0,227,0,160,0,22,0,0,0,57,0,151,0,22,0,47,0,0,0,207,0,12,0,37,0,89,0,63,0,0,0,66,0,0,0,162,0,3,0,122,0,249,0,186,0,185,0,131,0,204,0,65,0,180,0,158,0,150,0,0,0,25,0,239,0,92,0,230,0,219,0,11,0,195,0,48,0,125,0,107,0,0,0,231,0,58,0,92,0,62,0,180,0,32,0,0,0,130,0,115,0,103,0,0,0,0,0,235,0,193,0,121,0,14,0,0,0,34,0,236,0,0,0,209,0,49,0,32,0,85,0,189,0,197,0,216,0,0,0,7,0,69,0,64,0,149,0,0,0,138,0,235,0,31,0,0,0,66,0,0,0,0,0,88,0,71,0,226,0,189,0,0,0,208,0,52,0,147,0,43,0,59,0,230,0,171,0,131,0,103,0,208,0,150,0,156,0,169,0,0,0,226,0,108,0,206,0,141,0,31,0,59,0,247,0,246,0,0,0,206,0,242,0,48,0,0,0,225,0,0,0,166,0,230,0,9,0,0,0,0,0,154,0,23,0,60,0,154,0,0,0,117,0,33,0,91,0,66,0,251,0,186,0,39,0,94,0,120,0,41,0,3,0,156,0,0,0,0,0,233,0,75,0,120,0,74,0,61,0,15,0,45,0,36,0,64,0,71,0);
signal scenario_full  : scenario_type := (21,31,197,31,164,31,152,31,18,31,200,31,225,31,225,30,225,29,174,31,132,31,72,31,90,31,173,31,129,31,255,31,255,30,119,31,57,31,57,30,57,29,239,31,137,31,137,30,19,31,97,31,242,31,150,31,183,31,208,31,208,30,228,31,43,31,43,30,36,31,162,31,202,31,254,31,254,30,13,31,38,31,38,30,68,31,242,31,65,31,65,31,37,31,94,31,28,31,28,30,28,29,232,31,189,31,150,31,222,31,5,31,49,31,20,31,250,31,166,31,91,31,157,31,129,31,110,31,217,31,217,30,217,29,217,28,171,31,171,30,73,31,73,30,26,31,107,31,189,31,80,31,237,31,35,31,150,31,178,31,146,31,224,31,154,31,248,31,18,31,184,31,57,31,117,31,169,31,38,31,249,31,86,31,203,31,220,31,32,31,120,31,92,31,187,31,194,31,194,30,27,31,205,31,10,31,83,31,153,31,180,31,147,31,169,31,190,31,142,31,97,31,100,31,122,31,122,30,186,31,186,30,222,31,128,31,43,31,75,31,127,31,48,31,48,30,48,29,210,31,210,30,210,29,53,31,16,31,25,31,233,31,170,31,160,31,104,31,104,30,29,31,14,31,175,31,113,31,92,31,14,31,53,31,143,31,151,31,192,31,27,31,27,30,27,29,37,31,242,31,130,31,130,30,90,31,90,30,90,29,242,31,22,31,111,31,178,31,41,31,47,31,28,31,210,31,135,31,252,31,167,31,151,31,103,31,29,31,146,31,148,31,178,31,247,31,247,30,22,31,125,31,125,30,125,29,255,31,89,31,71,31,61,31,61,30,105,31,195,31,146,31,178,31,105,31,105,30,188,31,188,30,210,31,108,31,15,31,255,31,34,31,81,31,127,31,75,31,75,30,10,31,133,31,39,31,171,31,34,31,34,30,207,31,207,30,40,31,233,31,213,31,213,30,168,31,168,30,214,31,217,31,216,31,63,31,139,31,49,31,169,31,169,30,103,31,73,31,73,30,223,31,95,31,204,31,140,31,172,31,217,31,24,31,207,31,207,30,207,29,181,31,211,31,211,31,254,31,34,31,34,30,138,31,109,31,187,31,39,31,99,31,205,31,228,31,228,30,161,31,146,31,146,30,146,29,92,31,251,31,124,31,5,31,5,30,219,31,131,31,131,30,49,31,49,30,116,31,116,30,203,31,203,30,24,31,120,31,19,31,207,31,207,30,207,29,10,31,231,31,231,30,11,31,234,31,196,31,132,31,20,31,20,30,76,31,76,30,90,31,200,31,226,31,5,31,125,31,230,31,89,31,84,31,103,31,90,31,100,31,123,31,47,31,47,30,235,31,206,31,206,30,206,29,206,28,113,31,143,31,247,31,228,31,216,31,11,31,11,30,210,31,199,31,179,31,197,31,129,31,54,31,82,31,156,31,156,30,224,31,151,31,170,31,170,30,72,31,157,31,166,31,166,30,166,29,151,31,71,31,57,31,59,31,23,31,152,31,43,31,246,31,219,31,105,31,7,31,7,30,7,29,148,31,148,30,148,29,132,31,121,31,153,31,114,31,166,31,136,31,98,31,112,31,240,31,188,31,188,30,21,31,21,30,81,31,79,31,49,31,49,30,49,29,60,31,60,30,60,29,60,28,145,31,27,31,27,30,229,31,229,30,27,31,27,30,176,31,176,30,20,31,20,30,157,31,212,31,227,31,160,31,22,31,22,30,57,31,151,31,22,31,47,31,47,30,207,31,12,31,37,31,89,31,63,31,63,30,66,31,66,30,162,31,3,31,122,31,249,31,186,31,185,31,131,31,204,31,65,31,180,31,158,31,150,31,150,30,25,31,239,31,92,31,230,31,219,31,11,31,195,31,48,31,125,31,107,31,107,30,231,31,58,31,92,31,62,31,180,31,32,31,32,30,130,31,115,31,103,31,103,30,103,29,235,31,193,31,121,31,14,31,14,30,34,31,236,31,236,30,209,31,49,31,32,31,85,31,189,31,197,31,216,31,216,30,7,31,69,31,64,31,149,31,149,30,138,31,235,31,31,31,31,30,66,31,66,30,66,29,88,31,71,31,226,31,189,31,189,30,208,31,52,31,147,31,43,31,59,31,230,31,171,31,131,31,103,31,208,31,150,31,156,31,169,31,169,30,226,31,108,31,206,31,141,31,31,31,59,31,247,31,246,31,246,30,206,31,242,31,48,31,48,30,225,31,225,30,166,31,230,31,9,31,9,30,9,29,154,31,23,31,60,31,154,31,154,30,117,31,33,31,91,31,66,31,251,31,186,31,39,31,94,31,120,31,41,31,3,31,156,31,156,30,156,29,233,31,75,31,120,31,74,31,61,31,15,31,45,31,36,31,64,31,71,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
