-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 588;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (251,0,124,0,0,0,176,0,0,0,56,0,246,0,178,0,0,0,250,0,110,0,0,0,47,0,132,0,22,0,0,0,50,0,0,0,0,0,127,0,22,0,0,0,164,0,130,0,153,0,55,0,229,0,128,0,6,0,74,0,164,0,99,0,0,0,0,0,110,0,175,0,158,0,168,0,0,0,104,0,140,0,203,0,82,0,13,0,3,0,56,0,69,0,61,0,233,0,128,0,153,0,0,0,62,0,29,0,0,0,226,0,224,0,0,0,0,0,200,0,177,0,20,0,85,0,238,0,119,0,204,0,19,0,15,0,146,0,0,0,102,0,141,0,91,0,241,0,67,0,213,0,169,0,240,0,4,0,0,0,181,0,109,0,91,0,244,0,0,0,158,0,54,0,53,0,134,0,0,0,55,0,10,0,193,0,128,0,68,0,223,0,116,0,205,0,97,0,148,0,0,0,93,0,0,0,0,0,65,0,187,0,94,0,249,0,86,0,7,0,69,0,13,0,0,0,160,0,2,0,75,0,103,0,235,0,217,0,52,0,156,0,66,0,0,0,131,0,176,0,103,0,4,0,144,0,3,0,0,0,182,0,53,0,254,0,182,0,244,0,88,0,86,0,0,0,106,0,167,0,31,0,0,0,146,0,25,0,0,0,154,0,244,0,0,0,121,0,155,0,11,0,12,0,28,0,21,0,62,0,17,0,10,0,86,0,239,0,40,0,176,0,168,0,193,0,186,0,181,0,6,0,226,0,0,0,131,0,196,0,139,0,118,0,185,0,52,0,217,0,175,0,155,0,138,0,243,0,237,0,0,0,234,0,0,0,73,0,212,0,59,0,59,0,0,0,8,0,68,0,65,0,91,0,166,0,0,0,0,0,146,0,73,0,165,0,210,0,0,0,1,0,191,0,0,0,0,0,140,0,240,0,0,0,0,0,231,0,39,0,138,0,22,0,243,0,0,0,87,0,127,0,49,0,0,0,93,0,49,0,43,0,91,0,0,0,79,0,54,0,69,0,113,0,74,0,0,0,117,0,149,0,0,0,99,0,148,0,0,0,194,0,53,0,0,0,181,0,3,0,229,0,99,0,216,0,247,0,175,0,50,0,174,0,54,0,104,0,131,0,0,0,44,0,206,0,220,0,246,0,0,0,102,0,167,0,141,0,0,0,89,0,180,0,139,0,135,0,218,0,154,0,247,0,45,0,101,0,212,0,86,0,191,0,38,0,157,0,23,0,15,0,237,0,105,0,0,0,0,0,95,0,211,0,0,0,31,0,161,0,54,0,18,0,234,0,172,0,0,0,169,0,220,0,0,0,95,0,176,0,104,0,103,0,94,0,171,0,50,0,126,0,140,0,81,0,62,0,0,0,108,0,11,0,131,0,40,0,246,0,217,0,86,0,0,0,175,0,134,0,187,0,228,0,0,0,86,0,0,0,2,0,206,0,41,0,134,0,124,0,246,0,0,0,153,0,156,0,61,0,216,0,0,0,0,0,157,0,231,0,133,0,125,0,153,0,160,0,237,0,176,0,52,0,63,0,117,0,192,0,144,0,239,0,50,0,137,0,186,0,85,0,130,0,0,0,18,0,241,0,0,0,128,0,82,0,156,0,81,0,166,0,0,0,60,0,106,0,0,0,143,0,0,0,176,0,160,0,27,0,84,0,64,0,152,0,56,0,169,0,164,0,230,0,72,0,133,0,185,0,134,0,137,0,169,0,55,0,240,0,209,0,0,0,0,0,230,0,185,0,0,0,102,0,109,0,0,0,233,0,198,0,0,0,101,0,138,0,97,0,246,0,0,0,1,0,0,0,144,0,38,0,109,0,0,0,137,0,97,0,0,0,162,0,184,0,72,0,109,0,25,0,0,0,225,0,119,0,0,0,183,0,129,0,0,0,89,0,71,0,129,0,69,0,0,0,217,0,218,0,169,0,0,0,124,0,74,0,0,0,0,0,54,0,123,0,70,0,50,0,202,0,22,0,131,0,0,0,20,0,79,0,89,0,138,0,56,0,137,0,0,0,0,0,118,0,111,0,0,0,172,0,214,0,250,0,226,0,20,0,0,0,178,0,22,0,0,0,0,0,77,0,0,0,0,0,0,0,0,0,54,0,216,0,51,0,160,0,197,0,114,0,252,0,19,0,250,0,77,0,15,0,179,0,0,0,0,0,248,0,89,0,0,0,194,0,183,0,32,0,101,0,0,0,166,0,92,0,139,0,155,0,213,0,208,0,0,0,231,0,116,0,0,0,141,0,80,0,0,0,243,0,254,0,36,0,184,0,236,0,219,0,140,0,220,0,125,0,195,0,0,0,0,0,1,0,148,0,0,0,246,0,170,0,87,0,131,0,7,0,0,0,193,0,174,0,0,0,247,0,2,0,158,0,0,0,107,0,186,0,0,0,110,0,201,0,195,0,158,0,5,0,201,0,58,0,149,0,213,0,26,0,118,0,0,0,192,0,177,0,199,0,168,0,100,0,0,0,18,0,0,0,187,0,31,0,221,0,205,0,58,0,17,0,132,0,207,0,0,0,250,0,0,0,5,0,31,0,64,0,250,0,237,0,103,0,0,0,235,0,159,0,0,0,0,0,128,0,67,0,0,0,136,0,0,0,77,0,53,0,16,0,0,0,98,0);
signal scenario_full  : scenario_type := (251,31,124,31,124,30,176,31,176,30,56,31,246,31,178,31,178,30,250,31,110,31,110,30,47,31,132,31,22,31,22,30,50,31,50,30,50,29,127,31,22,31,22,30,164,31,130,31,153,31,55,31,229,31,128,31,6,31,74,31,164,31,99,31,99,30,99,29,110,31,175,31,158,31,168,31,168,30,104,31,140,31,203,31,82,31,13,31,3,31,56,31,69,31,61,31,233,31,128,31,153,31,153,30,62,31,29,31,29,30,226,31,224,31,224,30,224,29,200,31,177,31,20,31,85,31,238,31,119,31,204,31,19,31,15,31,146,31,146,30,102,31,141,31,91,31,241,31,67,31,213,31,169,31,240,31,4,31,4,30,181,31,109,31,91,31,244,31,244,30,158,31,54,31,53,31,134,31,134,30,55,31,10,31,193,31,128,31,68,31,223,31,116,31,205,31,97,31,148,31,148,30,93,31,93,30,93,29,65,31,187,31,94,31,249,31,86,31,7,31,69,31,13,31,13,30,160,31,2,31,75,31,103,31,235,31,217,31,52,31,156,31,66,31,66,30,131,31,176,31,103,31,4,31,144,31,3,31,3,30,182,31,53,31,254,31,182,31,244,31,88,31,86,31,86,30,106,31,167,31,31,31,31,30,146,31,25,31,25,30,154,31,244,31,244,30,121,31,155,31,11,31,12,31,28,31,21,31,62,31,17,31,10,31,86,31,239,31,40,31,176,31,168,31,193,31,186,31,181,31,6,31,226,31,226,30,131,31,196,31,139,31,118,31,185,31,52,31,217,31,175,31,155,31,138,31,243,31,237,31,237,30,234,31,234,30,73,31,212,31,59,31,59,31,59,30,8,31,68,31,65,31,91,31,166,31,166,30,166,29,146,31,73,31,165,31,210,31,210,30,1,31,191,31,191,30,191,29,140,31,240,31,240,30,240,29,231,31,39,31,138,31,22,31,243,31,243,30,87,31,127,31,49,31,49,30,93,31,49,31,43,31,91,31,91,30,79,31,54,31,69,31,113,31,74,31,74,30,117,31,149,31,149,30,99,31,148,31,148,30,194,31,53,31,53,30,181,31,3,31,229,31,99,31,216,31,247,31,175,31,50,31,174,31,54,31,104,31,131,31,131,30,44,31,206,31,220,31,246,31,246,30,102,31,167,31,141,31,141,30,89,31,180,31,139,31,135,31,218,31,154,31,247,31,45,31,101,31,212,31,86,31,191,31,38,31,157,31,23,31,15,31,237,31,105,31,105,30,105,29,95,31,211,31,211,30,31,31,161,31,54,31,18,31,234,31,172,31,172,30,169,31,220,31,220,30,95,31,176,31,104,31,103,31,94,31,171,31,50,31,126,31,140,31,81,31,62,31,62,30,108,31,11,31,131,31,40,31,246,31,217,31,86,31,86,30,175,31,134,31,187,31,228,31,228,30,86,31,86,30,2,31,206,31,41,31,134,31,124,31,246,31,246,30,153,31,156,31,61,31,216,31,216,30,216,29,157,31,231,31,133,31,125,31,153,31,160,31,237,31,176,31,52,31,63,31,117,31,192,31,144,31,239,31,50,31,137,31,186,31,85,31,130,31,130,30,18,31,241,31,241,30,128,31,82,31,156,31,81,31,166,31,166,30,60,31,106,31,106,30,143,31,143,30,176,31,160,31,27,31,84,31,64,31,152,31,56,31,169,31,164,31,230,31,72,31,133,31,185,31,134,31,137,31,169,31,55,31,240,31,209,31,209,30,209,29,230,31,185,31,185,30,102,31,109,31,109,30,233,31,198,31,198,30,101,31,138,31,97,31,246,31,246,30,1,31,1,30,144,31,38,31,109,31,109,30,137,31,97,31,97,30,162,31,184,31,72,31,109,31,25,31,25,30,225,31,119,31,119,30,183,31,129,31,129,30,89,31,71,31,129,31,69,31,69,30,217,31,218,31,169,31,169,30,124,31,74,31,74,30,74,29,54,31,123,31,70,31,50,31,202,31,22,31,131,31,131,30,20,31,79,31,89,31,138,31,56,31,137,31,137,30,137,29,118,31,111,31,111,30,172,31,214,31,250,31,226,31,20,31,20,30,178,31,22,31,22,30,22,29,77,31,77,30,77,29,77,28,77,27,54,31,216,31,51,31,160,31,197,31,114,31,252,31,19,31,250,31,77,31,15,31,179,31,179,30,179,29,248,31,89,31,89,30,194,31,183,31,32,31,101,31,101,30,166,31,92,31,139,31,155,31,213,31,208,31,208,30,231,31,116,31,116,30,141,31,80,31,80,30,243,31,254,31,36,31,184,31,236,31,219,31,140,31,220,31,125,31,195,31,195,30,195,29,1,31,148,31,148,30,246,31,170,31,87,31,131,31,7,31,7,30,193,31,174,31,174,30,247,31,2,31,158,31,158,30,107,31,186,31,186,30,110,31,201,31,195,31,158,31,5,31,201,31,58,31,149,31,213,31,26,31,118,31,118,30,192,31,177,31,199,31,168,31,100,31,100,30,18,31,18,30,187,31,31,31,221,31,205,31,58,31,17,31,132,31,207,31,207,30,250,31,250,30,5,31,31,31,64,31,250,31,237,31,103,31,103,30,235,31,159,31,159,30,159,29,128,31,67,31,67,30,136,31,136,30,77,31,53,31,16,31,16,30,98,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
