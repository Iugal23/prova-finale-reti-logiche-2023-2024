-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 802;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (77,0,102,0,119,0,249,0,7,0,68,0,237,0,151,0,163,0,43,0,239,0,251,0,226,0,168,0,180,0,89,0,94,0,0,0,226,0,108,0,154,0,88,0,22,0,167,0,208,0,206,0,0,0,140,0,242,0,0,0,0,0,238,0,26,0,66,0,163,0,73,0,80,0,35,0,165,0,0,0,132,0,0,0,121,0,179,0,243,0,110,0,84,0,0,0,172,0,0,0,28,0,62,0,158,0,226,0,185,0,201,0,0,0,0,0,195,0,0,0,19,0,54,0,232,0,124,0,150,0,233,0,0,0,12,0,134,0,104,0,238,0,90,0,59,0,105,0,82,0,23,0,111,0,164,0,0,0,139,0,237,0,136,0,79,0,78,0,110,0,0,0,0,0,176,0,110,0,252,0,222,0,249,0,0,0,22,0,36,0,206,0,143,0,247,0,3,0,63,0,61,0,215,0,0,0,58,0,195,0,223,0,115,0,180,0,214,0,120,0,241,0,10,0,131,0,0,0,181,0,240,0,100,0,0,0,0,0,0,0,210,0,123,0,187,0,0,0,225,0,103,0,0,0,77,0,42,0,139,0,136,0,117,0,0,0,0,0,0,0,20,0,168,0,176,0,242,0,0,0,0,0,120,0,99,0,0,0,187,0,89,0,107,0,19,0,0,0,239,0,39,0,161,0,57,0,0,0,90,0,29,0,191,0,183,0,22,0,78,0,160,0,121,0,237,0,0,0,87,0,46,0,223,0,0,0,223,0,40,0,105,0,168,0,27,0,170,0,0,0,0,0,0,0,0,0,0,0,85,0,0,0,126,0,19,0,0,0,10,0,213,0,0,0,17,0,160,0,0,0,6,0,74,0,230,0,157,0,172,0,31,0,155,0,27,0,157,0,102,0,0,0,43,0,155,0,57,0,0,0,205,0,6,0,74,0,5,0,0,0,179,0,147,0,188,0,0,0,210,0,0,0,199,0,0,0,200,0,16,0,109,0,62,0,207,0,225,0,201,0,42,0,244,0,181,0,13,0,0,0,100,0,124,0,113,0,0,0,73,0,65,0,181,0,90,0,172,0,24,0,223,0,0,0,126,0,242,0,106,0,87,0,60,0,41,0,133,0,27,0,178,0,0,0,29,0,144,0,8,0,164,0,169,0,172,0,171,0,170,0,210,0,223,0,242,0,157,0,119,0,220,0,125,0,244,0,127,0,220,0,250,0,63,0,212,0,230,0,209,0,0,0,26,0,175,0,0,0,121,0,18,0,94,0,7,0,0,0,0,0,148,0,114,0,116,0,180,0,227,0,0,0,0,0,0,0,34,0,183,0,13,0,221,0,38,0,24,0,155,0,133,0,134,0,86,0,0,0,75,0,0,0,0,0,152,0,77,0,129,0,0,0,0,0,13,0,220,0,69,0,171,0,199,0,155,0,0,0,7,0,186,0,13,0,175,0,0,0,151,0,123,0,214,0,0,0,4,0,113,0,0,0,0,0,41,0,59,0,218,0,0,0,175,0,0,0,0,0,171,0,229,0,173,0,16,0,50,0,52,0,238,0,56,0,78,0,112,0,69,0,19,0,0,0,120,0,119,0,155,0,164,0,100,0,178,0,0,0,40,0,233,0,224,0,249,0,206,0,110,0,106,0,0,0,117,0,37,0,139,0,16,0,0,0,93,0,146,0,174,0,71,0,17,0,23,0,106,0,211,0,253,0,0,0,0,0,192,0,9,0,0,0,0,0,128,0,0,0,222,0,134,0,0,0,239,0,137,0,49,0,129,0,0,0,225,0,0,0,53,0,27,0,0,0,54,0,151,0,202,0,235,0,145,0,168,0,0,0,85,0,173,0,153,0,49,0,0,0,129,0,0,0,31,0,243,0,33,0,115,0,232,0,145,0,129,0,0,0,0,0,0,0,0,0,0,0,116,0,175,0,57,0,106,0,0,0,15,0,103,0,30,0,84,0,0,0,192,0,127,0,204,0,124,0,67,0,204,0,59,0,32,0,0,0,196,0,0,0,112,0,123,0,0,0,220,0,192,0,59,0,172,0,5,0,236,0,171,0,224,0,126,0,190,0,0,0,0,0,40,0,0,0,0,0,159,0,0,0,0,0,205,0,57,0,115,0,252,0,199,0,231,0,82,0,9,0,228,0,120,0,5,0,0,0,107,0,164,0,168,0,69,0,46,0,73,0,156,0,69,0,215,0,120,0,250,0,115,0,217,0,233,0,219,0,152,0,155,0,76,0,137,0,104,0,158,0,0,0,189,0,113,0,0,0,24,0,118,0,67,0,206,0,229,0,171,0,136,0,212,0,60,0,223,0,0,0,202,0,0,0,189,0,223,0,131,0,4,0,60,0,233,0,243,0,177,0,44,0,147,0,229,0,220,0,141,0,0,0,92,0,78,0,68,0,0,0,33,0,247,0,105,0,0,0,61,0,109,0,18,0,252,0,16,0,60,0,255,0,0,0,76,0,133,0,247,0,133,0,33,0,225,0,117,0,180,0,22,0,55,0,4,0,223,0,123,0,17,0,241,0,89,0,232,0,63,0,221,0,60,0,0,0,14,0,6,0,0,0,0,0,101,0,246,0,0,0,2,0,240,0,148,0,0,0,104,0,0,0,217,0,40,0,228,0,36,0,227,0,201,0,0,0,228,0,32,0,39,0,161,0,0,0,151,0,55,0,186,0,74,0,121,0,0,0,108,0,95,0,79,0,245,0,191,0,204,0,90,0,92,0,129,0,130,0,78,0,61,0,219,0,192,0,169,0,162,0,215,0,135,0,108,0,236,0,146,0,96,0,17,0,49,0,0,0,14,0,0,0,0,0,223,0,111,0,0,0,0,0,7,0,190,0,149,0,207,0,195,0,185,0,91,0,152,0,197,0,82,0,0,0,101,0,108,0,21,0,0,0,249,0,12,0,173,0,57,0,0,0,206,0,199,0,123,0,56,0,221,0,172,0,194,0,44,0,234,0,48,0,165,0,153,0,176,0,0,0,145,0,61,0,150,0,90,0,44,0,28,0,251,0,255,0,6,0,23,0,110,0,132,0,79,0,5,0,197,0,0,0,0,0,237,0,47,0,13,0,235,0,89,0,82,0,44,0,193,0,0,0,219,0,23,0,205,0,55,0,39,0,123,0,0,0,190,0,217,0,115,0,217,0,0,0,0,0,0,0,163,0,217,0,93,0,136,0,226,0,104,0,136,0,52,0,16,0,244,0,81,0,23,0,240,0,168,0,11,0,200,0,0,0,136,0,101,0,184,0,77,0,177,0,0,0,231,0,0,0,121,0,51,0,158,0,174,0,128,0,37,0,132,0,124,0,99,0,0,0,59,0,7,0,193,0,248,0,0,0,139,0,68,0,179,0,45,0,171,0,147,0,0,0,238,0,0,0,0,0,198,0,194,0,237,0,36,0,103,0,8,0,157,0,95,0,0,0,88,0,25,0,87,0,18,0,0,0,111,0,0,0,225,0,99,0,162,0,98,0,138,0,44,0,116,0,50,0,184,0,170,0,181,0,191,0,0,0,34,0,11,0,14,0,240,0,228,0,0,0,21,0,55,0,221,0,0,0,43,0,153,0,156,0,159,0,0,0);
signal scenario_full  : scenario_type := (77,31,102,31,119,31,249,31,7,31,68,31,237,31,151,31,163,31,43,31,239,31,251,31,226,31,168,31,180,31,89,31,94,31,94,30,226,31,108,31,154,31,88,31,22,31,167,31,208,31,206,31,206,30,140,31,242,31,242,30,242,29,238,31,26,31,66,31,163,31,73,31,80,31,35,31,165,31,165,30,132,31,132,30,121,31,179,31,243,31,110,31,84,31,84,30,172,31,172,30,28,31,62,31,158,31,226,31,185,31,201,31,201,30,201,29,195,31,195,30,19,31,54,31,232,31,124,31,150,31,233,31,233,30,12,31,134,31,104,31,238,31,90,31,59,31,105,31,82,31,23,31,111,31,164,31,164,30,139,31,237,31,136,31,79,31,78,31,110,31,110,30,110,29,176,31,110,31,252,31,222,31,249,31,249,30,22,31,36,31,206,31,143,31,247,31,3,31,63,31,61,31,215,31,215,30,58,31,195,31,223,31,115,31,180,31,214,31,120,31,241,31,10,31,131,31,131,30,181,31,240,31,100,31,100,30,100,29,100,28,210,31,123,31,187,31,187,30,225,31,103,31,103,30,77,31,42,31,139,31,136,31,117,31,117,30,117,29,117,28,20,31,168,31,176,31,242,31,242,30,242,29,120,31,99,31,99,30,187,31,89,31,107,31,19,31,19,30,239,31,39,31,161,31,57,31,57,30,90,31,29,31,191,31,183,31,22,31,78,31,160,31,121,31,237,31,237,30,87,31,46,31,223,31,223,30,223,31,40,31,105,31,168,31,27,31,170,31,170,30,170,29,170,28,170,27,170,26,85,31,85,30,126,31,19,31,19,30,10,31,213,31,213,30,17,31,160,31,160,30,6,31,74,31,230,31,157,31,172,31,31,31,155,31,27,31,157,31,102,31,102,30,43,31,155,31,57,31,57,30,205,31,6,31,74,31,5,31,5,30,179,31,147,31,188,31,188,30,210,31,210,30,199,31,199,30,200,31,16,31,109,31,62,31,207,31,225,31,201,31,42,31,244,31,181,31,13,31,13,30,100,31,124,31,113,31,113,30,73,31,65,31,181,31,90,31,172,31,24,31,223,31,223,30,126,31,242,31,106,31,87,31,60,31,41,31,133,31,27,31,178,31,178,30,29,31,144,31,8,31,164,31,169,31,172,31,171,31,170,31,210,31,223,31,242,31,157,31,119,31,220,31,125,31,244,31,127,31,220,31,250,31,63,31,212,31,230,31,209,31,209,30,26,31,175,31,175,30,121,31,18,31,94,31,7,31,7,30,7,29,148,31,114,31,116,31,180,31,227,31,227,30,227,29,227,28,34,31,183,31,13,31,221,31,38,31,24,31,155,31,133,31,134,31,86,31,86,30,75,31,75,30,75,29,152,31,77,31,129,31,129,30,129,29,13,31,220,31,69,31,171,31,199,31,155,31,155,30,7,31,186,31,13,31,175,31,175,30,151,31,123,31,214,31,214,30,4,31,113,31,113,30,113,29,41,31,59,31,218,31,218,30,175,31,175,30,175,29,171,31,229,31,173,31,16,31,50,31,52,31,238,31,56,31,78,31,112,31,69,31,19,31,19,30,120,31,119,31,155,31,164,31,100,31,178,31,178,30,40,31,233,31,224,31,249,31,206,31,110,31,106,31,106,30,117,31,37,31,139,31,16,31,16,30,93,31,146,31,174,31,71,31,17,31,23,31,106,31,211,31,253,31,253,30,253,29,192,31,9,31,9,30,9,29,128,31,128,30,222,31,134,31,134,30,239,31,137,31,49,31,129,31,129,30,225,31,225,30,53,31,27,31,27,30,54,31,151,31,202,31,235,31,145,31,168,31,168,30,85,31,173,31,153,31,49,31,49,30,129,31,129,30,31,31,243,31,33,31,115,31,232,31,145,31,129,31,129,30,129,29,129,28,129,27,129,26,116,31,175,31,57,31,106,31,106,30,15,31,103,31,30,31,84,31,84,30,192,31,127,31,204,31,124,31,67,31,204,31,59,31,32,31,32,30,196,31,196,30,112,31,123,31,123,30,220,31,192,31,59,31,172,31,5,31,236,31,171,31,224,31,126,31,190,31,190,30,190,29,40,31,40,30,40,29,159,31,159,30,159,29,205,31,57,31,115,31,252,31,199,31,231,31,82,31,9,31,228,31,120,31,5,31,5,30,107,31,164,31,168,31,69,31,46,31,73,31,156,31,69,31,215,31,120,31,250,31,115,31,217,31,233,31,219,31,152,31,155,31,76,31,137,31,104,31,158,31,158,30,189,31,113,31,113,30,24,31,118,31,67,31,206,31,229,31,171,31,136,31,212,31,60,31,223,31,223,30,202,31,202,30,189,31,223,31,131,31,4,31,60,31,233,31,243,31,177,31,44,31,147,31,229,31,220,31,141,31,141,30,92,31,78,31,68,31,68,30,33,31,247,31,105,31,105,30,61,31,109,31,18,31,252,31,16,31,60,31,255,31,255,30,76,31,133,31,247,31,133,31,33,31,225,31,117,31,180,31,22,31,55,31,4,31,223,31,123,31,17,31,241,31,89,31,232,31,63,31,221,31,60,31,60,30,14,31,6,31,6,30,6,29,101,31,246,31,246,30,2,31,240,31,148,31,148,30,104,31,104,30,217,31,40,31,228,31,36,31,227,31,201,31,201,30,228,31,32,31,39,31,161,31,161,30,151,31,55,31,186,31,74,31,121,31,121,30,108,31,95,31,79,31,245,31,191,31,204,31,90,31,92,31,129,31,130,31,78,31,61,31,219,31,192,31,169,31,162,31,215,31,135,31,108,31,236,31,146,31,96,31,17,31,49,31,49,30,14,31,14,30,14,29,223,31,111,31,111,30,111,29,7,31,190,31,149,31,207,31,195,31,185,31,91,31,152,31,197,31,82,31,82,30,101,31,108,31,21,31,21,30,249,31,12,31,173,31,57,31,57,30,206,31,199,31,123,31,56,31,221,31,172,31,194,31,44,31,234,31,48,31,165,31,153,31,176,31,176,30,145,31,61,31,150,31,90,31,44,31,28,31,251,31,255,31,6,31,23,31,110,31,132,31,79,31,5,31,197,31,197,30,197,29,237,31,47,31,13,31,235,31,89,31,82,31,44,31,193,31,193,30,219,31,23,31,205,31,55,31,39,31,123,31,123,30,190,31,217,31,115,31,217,31,217,30,217,29,217,28,163,31,217,31,93,31,136,31,226,31,104,31,136,31,52,31,16,31,244,31,81,31,23,31,240,31,168,31,11,31,200,31,200,30,136,31,101,31,184,31,77,31,177,31,177,30,231,31,231,30,121,31,51,31,158,31,174,31,128,31,37,31,132,31,124,31,99,31,99,30,59,31,7,31,193,31,248,31,248,30,139,31,68,31,179,31,45,31,171,31,147,31,147,30,238,31,238,30,238,29,198,31,194,31,237,31,36,31,103,31,8,31,157,31,95,31,95,30,88,31,25,31,87,31,18,31,18,30,111,31,111,30,225,31,99,31,162,31,98,31,138,31,44,31,116,31,50,31,184,31,170,31,181,31,191,31,191,30,34,31,11,31,14,31,240,31,228,31,228,30,21,31,55,31,221,31,221,30,43,31,153,31,156,31,159,31,159,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
