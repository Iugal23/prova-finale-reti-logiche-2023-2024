-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 544;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,11,0,201,0,76,0,0,0,125,0,104,0,149,0,39,0,175,0,0,0,162,0,75,0,238,0,0,0,21,0,0,0,0,0,241,0,34,0,0,0,168,0,3,0,129,0,92,0,133,0,0,0,21,0,13,0,61,0,64,0,0,0,239,0,204,0,0,0,118,0,148,0,122,0,11,0,0,0,0,0,6,0,59,0,106,0,206,0,14,0,119,0,95,0,0,0,0,0,57,0,204,0,164,0,152,0,95,0,142,0,94,0,64,0,123,0,199,0,178,0,0,0,0,0,0,0,165,0,231,0,23,0,22,0,0,0,0,0,0,0,92,0,175,0,0,0,177,0,18,0,0,0,162,0,228,0,244,0,170,0,101,0,74,0,203,0,200,0,133,0,0,0,29,0,95,0,127,0,213,0,0,0,56,0,121,0,0,0,0,0,0,0,175,0,93,0,122,0,86,0,207,0,0,0,207,0,222,0,172,0,95,0,174,0,181,0,125,0,103,0,0,0,0,0,63,0,0,0,229,0,212,0,0,0,207,0,0,0,172,0,191,0,22,0,60,0,51,0,143,0,105,0,118,0,212,0,105,0,219,0,220,0,2,0,0,0,180,0,167,0,143,0,63,0,87,0,201,0,42,0,132,0,18,0,0,0,223,0,0,0,142,0,0,0,0,0,162,0,175,0,149,0,0,0,179,0,241,0,0,0,235,0,0,0,157,0,0,0,114,0,0,0,153,0,89,0,221,0,48,0,216,0,121,0,0,0,147,0,231,0,94,0,0,0,170,0,45,0,57,0,0,0,119,0,127,0,0,0,142,0,53,0,189,0,123,0,204,0,0,0,0,0,0,0,226,0,45,0,128,0,54,0,184,0,114,0,0,0,10,0,117,0,24,0,135,0,36,0,175,0,23,0,74,0,133,0,203,0,122,0,105,0,0,0,29,0,80,0,225,0,54,0,0,0,126,0,220,0,238,0,203,0,52,0,221,0,65,0,176,0,26,0,0,0,71,0,178,0,0,0,116,0,40,0,241,0,67,0,206,0,217,0,30,0,140,0,2,0,170,0,0,0,24,0,65,0,112,0,204,0,223,0,101,0,25,0,65,0,116,0,0,0,82,0,114,0,247,0,57,0,47,0,164,0,0,0,73,0,106,0,0,0,186,0,0,0,41,0,28,0,0,0,9,0,133,0,117,0,5,0,19,0,0,0,33,0,156,0,63,0,49,0,243,0,0,0,28,0,59,0,193,0,107,0,72,0,0,0,84,0,118,0,172,0,71,0,150,0,31,0,210,0,29,0,220,0,111,0,242,0,0,0,230,0,168,0,168,0,236,0,75,0,165,0,208,0,29,0,242,0,14,0,70,0,167,0,0,0,32,0,244,0,252,0,14,0,242,0,208,0,24,0,0,0,0,0,28,0,246,0,111,0,61,0,167,0,195,0,114,0,36,0,79,0,242,0,68,0,176,0,79,0,160,0,236,0,198,0,169,0,110,0,0,0,129,0,0,0,0,0,184,0,196,0,165,0,204,0,224,0,199,0,0,0,128,0,218,0,226,0,38,0,68,0,96,0,10,0,88,0,0,0,94,0,74,0,0,0,82,0,18,0,6,0,174,0,23,0,65,0,217,0,152,0,80,0,182,0,0,0,14,0,193,0,74,0,189,0,62,0,0,0,216,0,34,0,30,0,210,0,189,0,0,0,193,0,199,0,0,0,32,0,115,0,0,0,0,0,0,0,15,0,73,0,239,0,105,0,0,0,167,0,36,0,56,0,0,0,201,0,0,0,153,0,149,0,119,0,217,0,9,0,113,0,246,0,24,0,103,0,187,0,75,0,116,0,0,0,131,0,115,0,194,0,1,0,46,0,44,0,95,0,0,0,199,0,209,0,122,0,132,0,249,0,47,0,0,0,207,0,195,0,78,0,222,0,0,0,252,0,89,0,206,0,147,0,178,0,5,0,0,0,95,0,189,0,0,0,207,0,0,0,0,0,168,0,153,0,33,0,79,0,222,0,172,0,220,0,0,0,12,0,114,0,0,0,151,0,132,0,0,0,213,0,0,0,158,0,0,0,178,0,11,0,140,0,255,0,120,0,0,0,26,0,229,0,96,0,127,0,23,0,174,0,0,0,173,0,76,0,92,0,248,0,6,0,154,0,24,0,123,0,120,0,76,0,70,0,76,0,223,0,125,0,125,0,201,0,86,0,190,0,14,0,131,0,77,0,0,0,170,0,181,0,116,0,40,0,204,0,212,0,22,0,93,0,63,0,92,0,129,0,0,0,248,0,49,0,162,0,0,0,128,0,118,0,119,0,191,0,0,0,0,0,184,0,71,0,0,0,247,0,61,0,40,0,0,0,0,0,0,0,43,0,84,0,83,0,96,0,172,0,191,0,69,0,231,0,137,0,111,0,0,0,115,0,0,0,20,0,0,0,208,0,178,0);
signal scenario_full  : scenario_type := (0,0,11,31,201,31,76,31,76,30,125,31,104,31,149,31,39,31,175,31,175,30,162,31,75,31,238,31,238,30,21,31,21,30,21,29,241,31,34,31,34,30,168,31,3,31,129,31,92,31,133,31,133,30,21,31,13,31,61,31,64,31,64,30,239,31,204,31,204,30,118,31,148,31,122,31,11,31,11,30,11,29,6,31,59,31,106,31,206,31,14,31,119,31,95,31,95,30,95,29,57,31,204,31,164,31,152,31,95,31,142,31,94,31,64,31,123,31,199,31,178,31,178,30,178,29,178,28,165,31,231,31,23,31,22,31,22,30,22,29,22,28,92,31,175,31,175,30,177,31,18,31,18,30,162,31,228,31,244,31,170,31,101,31,74,31,203,31,200,31,133,31,133,30,29,31,95,31,127,31,213,31,213,30,56,31,121,31,121,30,121,29,121,28,175,31,93,31,122,31,86,31,207,31,207,30,207,31,222,31,172,31,95,31,174,31,181,31,125,31,103,31,103,30,103,29,63,31,63,30,229,31,212,31,212,30,207,31,207,30,172,31,191,31,22,31,60,31,51,31,143,31,105,31,118,31,212,31,105,31,219,31,220,31,2,31,2,30,180,31,167,31,143,31,63,31,87,31,201,31,42,31,132,31,18,31,18,30,223,31,223,30,142,31,142,30,142,29,162,31,175,31,149,31,149,30,179,31,241,31,241,30,235,31,235,30,157,31,157,30,114,31,114,30,153,31,89,31,221,31,48,31,216,31,121,31,121,30,147,31,231,31,94,31,94,30,170,31,45,31,57,31,57,30,119,31,127,31,127,30,142,31,53,31,189,31,123,31,204,31,204,30,204,29,204,28,226,31,45,31,128,31,54,31,184,31,114,31,114,30,10,31,117,31,24,31,135,31,36,31,175,31,23,31,74,31,133,31,203,31,122,31,105,31,105,30,29,31,80,31,225,31,54,31,54,30,126,31,220,31,238,31,203,31,52,31,221,31,65,31,176,31,26,31,26,30,71,31,178,31,178,30,116,31,40,31,241,31,67,31,206,31,217,31,30,31,140,31,2,31,170,31,170,30,24,31,65,31,112,31,204,31,223,31,101,31,25,31,65,31,116,31,116,30,82,31,114,31,247,31,57,31,47,31,164,31,164,30,73,31,106,31,106,30,186,31,186,30,41,31,28,31,28,30,9,31,133,31,117,31,5,31,19,31,19,30,33,31,156,31,63,31,49,31,243,31,243,30,28,31,59,31,193,31,107,31,72,31,72,30,84,31,118,31,172,31,71,31,150,31,31,31,210,31,29,31,220,31,111,31,242,31,242,30,230,31,168,31,168,31,236,31,75,31,165,31,208,31,29,31,242,31,14,31,70,31,167,31,167,30,32,31,244,31,252,31,14,31,242,31,208,31,24,31,24,30,24,29,28,31,246,31,111,31,61,31,167,31,195,31,114,31,36,31,79,31,242,31,68,31,176,31,79,31,160,31,236,31,198,31,169,31,110,31,110,30,129,31,129,30,129,29,184,31,196,31,165,31,204,31,224,31,199,31,199,30,128,31,218,31,226,31,38,31,68,31,96,31,10,31,88,31,88,30,94,31,74,31,74,30,82,31,18,31,6,31,174,31,23,31,65,31,217,31,152,31,80,31,182,31,182,30,14,31,193,31,74,31,189,31,62,31,62,30,216,31,34,31,30,31,210,31,189,31,189,30,193,31,199,31,199,30,32,31,115,31,115,30,115,29,115,28,15,31,73,31,239,31,105,31,105,30,167,31,36,31,56,31,56,30,201,31,201,30,153,31,149,31,119,31,217,31,9,31,113,31,246,31,24,31,103,31,187,31,75,31,116,31,116,30,131,31,115,31,194,31,1,31,46,31,44,31,95,31,95,30,199,31,209,31,122,31,132,31,249,31,47,31,47,30,207,31,195,31,78,31,222,31,222,30,252,31,89,31,206,31,147,31,178,31,5,31,5,30,95,31,189,31,189,30,207,31,207,30,207,29,168,31,153,31,33,31,79,31,222,31,172,31,220,31,220,30,12,31,114,31,114,30,151,31,132,31,132,30,213,31,213,30,158,31,158,30,178,31,11,31,140,31,255,31,120,31,120,30,26,31,229,31,96,31,127,31,23,31,174,31,174,30,173,31,76,31,92,31,248,31,6,31,154,31,24,31,123,31,120,31,76,31,70,31,76,31,223,31,125,31,125,31,201,31,86,31,190,31,14,31,131,31,77,31,77,30,170,31,181,31,116,31,40,31,204,31,212,31,22,31,93,31,63,31,92,31,129,31,129,30,248,31,49,31,162,31,162,30,128,31,118,31,119,31,191,31,191,30,191,29,184,31,71,31,71,30,247,31,61,31,40,31,40,30,40,29,40,28,43,31,84,31,83,31,96,31,172,31,191,31,69,31,231,31,137,31,111,31,111,30,115,31,115,30,20,31,20,30,208,31,178,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
