-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 830;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (191,0,85,0,160,0,150,0,209,0,0,0,0,0,209,0,36,0,40,0,87,0,165,0,186,0,157,0,234,0,244,0,199,0,177,0,138,0,190,0,157,0,43,0,225,0,239,0,80,0,64,0,226,0,224,0,153,0,196,0,25,0,78,0,213,0,198,0,15,0,87,0,218,0,126,0,163,0,224,0,92,0,72,0,0,0,46,0,126,0,192,0,70,0,254,0,0,0,137,0,107,0,253,0,44,0,0,0,121,0,94,0,23,0,120,0,0,0,234,0,29,0,212,0,0,0,0,0,0,0,205,0,245,0,166,0,16,0,106,0,0,0,87,0,0,0,171,0,168,0,112,0,85,0,0,0,165,0,162,0,0,0,172,0,107,0,54,0,7,0,56,0,197,0,202,0,182,0,68,0,186,0,115,0,109,0,0,0,124,0,129,0,80,0,159,0,1,0,123,0,237,0,140,0,180,0,239,0,227,0,134,0,115,0,0,0,154,0,13,0,0,0,117,0,239,0,182,0,0,0,245,0,54,0,0,0,0,0,194,0,196,0,210,0,0,0,114,0,193,0,232,0,0,0,248,0,13,0,0,0,196,0,0,0,0,0,32,0,151,0,199,0,160,0,179,0,109,0,48,0,115,0,149,0,151,0,77,0,230,0,0,0,161,0,29,0,57,0,0,0,0,0,202,0,185,0,239,0,241,0,47,0,189,0,121,0,233,0,208,0,23,0,33,0,0,0,180,0,0,0,92,0,0,0,238,0,138,0,112,0,248,0,87,0,205,0,144,0,76,0,6,0,179,0,76,0,210,0,58,0,0,0,0,0,239,0,136,0,0,0,58,0,163,0,139,0,126,0,159,0,13,0,233,0,82,0,0,0,20,0,213,0,149,0,127,0,71,0,191,0,177,0,1,0,0,0,140,0,0,0,156,0,229,0,19,0,199,0,0,0,90,0,237,0,86,0,45,0,36,0,145,0,72,0,173,0,249,0,0,0,222,0,86,0,59,0,178,0,202,0,178,0,117,0,141,0,11,0,32,0,139,0,157,0,0,0,164,0,227,0,142,0,140,0,41,0,204,0,0,0,134,0,196,0,134,0,212,0,175,0,128,0,180,0,11,0,0,0,30,0,0,0,50,0,125,0,178,0,216,0,56,0,217,0,163,0,105,0,0,0,244,0,16,0,82,0,197,0,14,0,234,0,23,0,115,0,32,0,192,0,30,0,247,0,50,0,215,0,216,0,0,0,0,0,28,0,160,0,19,0,77,0,113,0,26,0,199,0,213,0,134,0,232,0,90,0,107,0,0,0,145,0,69,0,218,0,202,0,0,0,209,0,187,0,103,0,0,0,203,0,92,0,220,0,163,0,127,0,127,0,0,0,0,0,41,0,96,0,174,0,163,0,41,0,166,0,0,0,199,0,28,0,118,0,191,0,92,0,202,0,0,0,0,0,35,0,0,0,0,0,111,0,170,0,239,0,130,0,0,0,0,0,205,0,0,0,0,0,19,0,124,0,0,0,116,0,129,0,34,0,24,0,0,0,105,0,0,0,2,0,0,0,168,0,235,0,106,0,127,0,38,0,233,0,2,0,21,0,93,0,164,0,145,0,243,0,232,0,27,0,252,0,179,0,0,0,175,0,251,0,2,0,65,0,108,0,75,0,65,0,218,0,27,0,99,0,109,0,183,0,153,0,0,0,6,0,39,0,99,0,86,0,0,0,0,0,0,0,194,0,238,0,137,0,62,0,222,0,95,0,14,0,121,0,245,0,0,0,33,0,115,0,78,0,209,0,122,0,234,0,91,0,50,0,0,0,221,0,167,0,44,0,12,0,253,0,57,0,217,0,240,0,44,0,82,0,0,0,46,0,212,0,195,0,0,0,212,0,81,0,32,0,230,0,169,0,18,0,36,0,69,0,209,0,16,0,231,0,127,0,121,0,59,0,62,0,0,0,150,0,164,0,211,0,131,0,173,0,94,0,229,0,232,0,236,0,86,0,16,0,61,0,0,0,174,0,0,0,61,0,0,0,130,0,166,0,68,0,136,0,66,0,71,0,44,0,159,0,219,0,0,0,109,0,178,0,159,0,17,0,0,0,121,0,213,0,0,0,3,0,154,0,235,0,36,0,151,0,0,0,214,0,208,0,0,0,181,0,79,0,0,0,32,0,84,0,125,0,102,0,221,0,161,0,142,0,149,0,112,0,0,0,34,0,112,0,142,0,0,0,49,0,61,0,251,0,85,0,163,0,232,0,96,0,209,0,83,0,122,0,100,0,0,0,0,0,115,0,0,0,86,0,157,0,0,0,0,0,73,0,25,0,154,0,0,0,202,0,0,0,28,0,164,0,193,0,0,0,235,0,236,0,108,0,213,0,179,0,185,0,78,0,161,0,132,0,139,0,0,0,14,0,0,0,221,0,0,0,71,0,0,0,135,0,146,0,0,0,0,0,0,0,160,0,11,0,22,0,140,0,3,0,85,0,0,0,216,0,249,0,127,0,30,0,133,0,0,0,163,0,26,0,15,0,162,0,34,0,0,0,99,0,140,0,48,0,99,0,132,0,187,0,151,0,0,0,40,0,167,0,235,0,153,0,206,0,138,0,0,0,0,0,242,0,156,0,173,0,214,0,61,0,28,0,64,0,116,0,111,0,45,0,0,0,221,0,122,0,117,0,69,0,102,0,132,0,73,0,177,0,0,0,0,0,166,0,222,0,60,0,0,0,0,0,190,0,2,0,227,0,0,0,8,0,186,0,31,0,11,0,179,0,18,0,141,0,0,0,0,0,178,0,214,0,0,0,58,0,174,0,170,0,75,0,74,0,158,0,209,0,214,0,0,0,84,0,253,0,176,0,39,0,43,0,0,0,0,0,0,0,226,0,165,0,43,0,236,0,26,0,91,0,121,0,211,0,245,0,211,0,179,0,101,0,60,0,19,0,0,0,192,0,231,0,134,0,70,0,0,0,202,0,92,0,6,0,208,0,152,0,121,0,125,0,166,0,0,0,187,0,74,0,127,0,200,0,227,0,143,0,205,0,161,0,171,0,122,0,129,0,64,0,234,0,120,0,56,0,0,0,102,0,41,0,0,0,185,0,161,0,75,0,17,0,0,0,213,0,25,0,105,0,18,0,157,0,197,0,176,0,189,0,139,0,167,0,0,0,209,0,69,0,242,0,149,0,5,0,68,0,160,0,100,0,125,0,215,0,22,0,206,0,12,0,77,0,200,0,0,0,175,0,42,0,12,0,208,0,240,0,188,0,124,0,216,0,84,0,3,0,133,0,0,0,44,0,194,0,176,0,147,0,80,0,46,0,83,0,220,0,174,0,69,0,16,0,184,0,0,0,0,0,0,0,0,0,76,0,99,0,0,0,127,0,124,0,0,0,243,0,204,0,0,0,0,0,54,0,0,0,242,0,236,0,33,0,153,0,252,0,160,0,7,0,0,0,76,0,83,0,162,0,146,0,225,0,151,0,0,0,64,0,95,0,103,0,97,0,84,0,135,0,0,0,83,0,56,0,171,0,94,0,83,0,125,0,36,0,84,0,0,0,50,0,56,0,214,0,0,0,97,0,81,0,69,0,144,0,29,0,0,0,113,0,18,0,0,0,146,0,6,0,62,0,198,0,205,0,0,0,92,0,76,0,100,0,117,0,174,0,186,0,78,0,66,0,162,0,244,0,195,0,180,0,115,0,245,0,0,0,59,0,176,0,1,0,43,0,174,0);
signal scenario_full  : scenario_type := (191,31,85,31,160,31,150,31,209,31,209,30,209,29,209,31,36,31,40,31,87,31,165,31,186,31,157,31,234,31,244,31,199,31,177,31,138,31,190,31,157,31,43,31,225,31,239,31,80,31,64,31,226,31,224,31,153,31,196,31,25,31,78,31,213,31,198,31,15,31,87,31,218,31,126,31,163,31,224,31,92,31,72,31,72,30,46,31,126,31,192,31,70,31,254,31,254,30,137,31,107,31,253,31,44,31,44,30,121,31,94,31,23,31,120,31,120,30,234,31,29,31,212,31,212,30,212,29,212,28,205,31,245,31,166,31,16,31,106,31,106,30,87,31,87,30,171,31,168,31,112,31,85,31,85,30,165,31,162,31,162,30,172,31,107,31,54,31,7,31,56,31,197,31,202,31,182,31,68,31,186,31,115,31,109,31,109,30,124,31,129,31,80,31,159,31,1,31,123,31,237,31,140,31,180,31,239,31,227,31,134,31,115,31,115,30,154,31,13,31,13,30,117,31,239,31,182,31,182,30,245,31,54,31,54,30,54,29,194,31,196,31,210,31,210,30,114,31,193,31,232,31,232,30,248,31,13,31,13,30,196,31,196,30,196,29,32,31,151,31,199,31,160,31,179,31,109,31,48,31,115,31,149,31,151,31,77,31,230,31,230,30,161,31,29,31,57,31,57,30,57,29,202,31,185,31,239,31,241,31,47,31,189,31,121,31,233,31,208,31,23,31,33,31,33,30,180,31,180,30,92,31,92,30,238,31,138,31,112,31,248,31,87,31,205,31,144,31,76,31,6,31,179,31,76,31,210,31,58,31,58,30,58,29,239,31,136,31,136,30,58,31,163,31,139,31,126,31,159,31,13,31,233,31,82,31,82,30,20,31,213,31,149,31,127,31,71,31,191,31,177,31,1,31,1,30,140,31,140,30,156,31,229,31,19,31,199,31,199,30,90,31,237,31,86,31,45,31,36,31,145,31,72,31,173,31,249,31,249,30,222,31,86,31,59,31,178,31,202,31,178,31,117,31,141,31,11,31,32,31,139,31,157,31,157,30,164,31,227,31,142,31,140,31,41,31,204,31,204,30,134,31,196,31,134,31,212,31,175,31,128,31,180,31,11,31,11,30,30,31,30,30,50,31,125,31,178,31,216,31,56,31,217,31,163,31,105,31,105,30,244,31,16,31,82,31,197,31,14,31,234,31,23,31,115,31,32,31,192,31,30,31,247,31,50,31,215,31,216,31,216,30,216,29,28,31,160,31,19,31,77,31,113,31,26,31,199,31,213,31,134,31,232,31,90,31,107,31,107,30,145,31,69,31,218,31,202,31,202,30,209,31,187,31,103,31,103,30,203,31,92,31,220,31,163,31,127,31,127,31,127,30,127,29,41,31,96,31,174,31,163,31,41,31,166,31,166,30,199,31,28,31,118,31,191,31,92,31,202,31,202,30,202,29,35,31,35,30,35,29,111,31,170,31,239,31,130,31,130,30,130,29,205,31,205,30,205,29,19,31,124,31,124,30,116,31,129,31,34,31,24,31,24,30,105,31,105,30,2,31,2,30,168,31,235,31,106,31,127,31,38,31,233,31,2,31,21,31,93,31,164,31,145,31,243,31,232,31,27,31,252,31,179,31,179,30,175,31,251,31,2,31,65,31,108,31,75,31,65,31,218,31,27,31,99,31,109,31,183,31,153,31,153,30,6,31,39,31,99,31,86,31,86,30,86,29,86,28,194,31,238,31,137,31,62,31,222,31,95,31,14,31,121,31,245,31,245,30,33,31,115,31,78,31,209,31,122,31,234,31,91,31,50,31,50,30,221,31,167,31,44,31,12,31,253,31,57,31,217,31,240,31,44,31,82,31,82,30,46,31,212,31,195,31,195,30,212,31,81,31,32,31,230,31,169,31,18,31,36,31,69,31,209,31,16,31,231,31,127,31,121,31,59,31,62,31,62,30,150,31,164,31,211,31,131,31,173,31,94,31,229,31,232,31,236,31,86,31,16,31,61,31,61,30,174,31,174,30,61,31,61,30,130,31,166,31,68,31,136,31,66,31,71,31,44,31,159,31,219,31,219,30,109,31,178,31,159,31,17,31,17,30,121,31,213,31,213,30,3,31,154,31,235,31,36,31,151,31,151,30,214,31,208,31,208,30,181,31,79,31,79,30,32,31,84,31,125,31,102,31,221,31,161,31,142,31,149,31,112,31,112,30,34,31,112,31,142,31,142,30,49,31,61,31,251,31,85,31,163,31,232,31,96,31,209,31,83,31,122,31,100,31,100,30,100,29,115,31,115,30,86,31,157,31,157,30,157,29,73,31,25,31,154,31,154,30,202,31,202,30,28,31,164,31,193,31,193,30,235,31,236,31,108,31,213,31,179,31,185,31,78,31,161,31,132,31,139,31,139,30,14,31,14,30,221,31,221,30,71,31,71,30,135,31,146,31,146,30,146,29,146,28,160,31,11,31,22,31,140,31,3,31,85,31,85,30,216,31,249,31,127,31,30,31,133,31,133,30,163,31,26,31,15,31,162,31,34,31,34,30,99,31,140,31,48,31,99,31,132,31,187,31,151,31,151,30,40,31,167,31,235,31,153,31,206,31,138,31,138,30,138,29,242,31,156,31,173,31,214,31,61,31,28,31,64,31,116,31,111,31,45,31,45,30,221,31,122,31,117,31,69,31,102,31,132,31,73,31,177,31,177,30,177,29,166,31,222,31,60,31,60,30,60,29,190,31,2,31,227,31,227,30,8,31,186,31,31,31,11,31,179,31,18,31,141,31,141,30,141,29,178,31,214,31,214,30,58,31,174,31,170,31,75,31,74,31,158,31,209,31,214,31,214,30,84,31,253,31,176,31,39,31,43,31,43,30,43,29,43,28,226,31,165,31,43,31,236,31,26,31,91,31,121,31,211,31,245,31,211,31,179,31,101,31,60,31,19,31,19,30,192,31,231,31,134,31,70,31,70,30,202,31,92,31,6,31,208,31,152,31,121,31,125,31,166,31,166,30,187,31,74,31,127,31,200,31,227,31,143,31,205,31,161,31,171,31,122,31,129,31,64,31,234,31,120,31,56,31,56,30,102,31,41,31,41,30,185,31,161,31,75,31,17,31,17,30,213,31,25,31,105,31,18,31,157,31,197,31,176,31,189,31,139,31,167,31,167,30,209,31,69,31,242,31,149,31,5,31,68,31,160,31,100,31,125,31,215,31,22,31,206,31,12,31,77,31,200,31,200,30,175,31,42,31,12,31,208,31,240,31,188,31,124,31,216,31,84,31,3,31,133,31,133,30,44,31,194,31,176,31,147,31,80,31,46,31,83,31,220,31,174,31,69,31,16,31,184,31,184,30,184,29,184,28,184,27,76,31,99,31,99,30,127,31,124,31,124,30,243,31,204,31,204,30,204,29,54,31,54,30,242,31,236,31,33,31,153,31,252,31,160,31,7,31,7,30,76,31,83,31,162,31,146,31,225,31,151,31,151,30,64,31,95,31,103,31,97,31,84,31,135,31,135,30,83,31,56,31,171,31,94,31,83,31,125,31,36,31,84,31,84,30,50,31,56,31,214,31,214,30,97,31,81,31,69,31,144,31,29,31,29,30,113,31,18,31,18,30,146,31,6,31,62,31,198,31,205,31,205,30,92,31,76,31,100,31,117,31,174,31,186,31,78,31,66,31,162,31,244,31,195,31,180,31,115,31,245,31,245,30,59,31,176,31,1,31,43,31,174,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
