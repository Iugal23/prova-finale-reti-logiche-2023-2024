-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 578;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (43,0,252,0,144,0,7,0,138,0,205,0,32,0,212,0,0,0,87,0,39,0,250,0,235,0,142,0,153,0,107,0,224,0,20,0,125,0,103,0,110,0,0,0,0,0,53,0,64,0,45,0,122,0,0,0,251,0,76,0,30,0,240,0,30,0,172,0,155,0,50,0,0,0,0,0,0,0,254,0,62,0,0,0,194,0,0,0,125,0,20,0,106,0,23,0,0,0,58,0,213,0,152,0,127,0,103,0,250,0,26,0,0,0,56,0,53,0,160,0,168,0,0,0,107,0,239,0,188,0,70,0,217,0,78,0,11,0,58,0,221,0,41,0,185,0,218,0,240,0,90,0,28,0,102,0,166,0,214,0,180,0,0,0,179,0,58,0,0,0,84,0,28,0,155,0,244,0,198,0,0,0,224,0,136,0,187,0,115,0,146,0,0,0,202,0,43,0,44,0,190,0,130,0,0,0,253,0,238,0,142,0,178,0,211,0,181,0,25,0,14,0,0,0,0,0,152,0,0,0,161,0,15,0,212,0,244,0,143,0,169,0,130,0,181,0,204,0,234,0,247,0,5,0,193,0,82,0,0,0,106,0,233,0,187,0,0,0,52,0,0,0,214,0,255,0,203,0,140,0,41,0,213,0,71,0,0,0,0,0,149,0,0,0,0,0,241,0,241,0,235,0,0,0,215,0,78,0,53,0,116,0,0,0,195,0,241,0,0,0,0,0,212,0,154,0,0,0,89,0,155,0,54,0,88,0,155,0,241,0,0,0,5,0,0,0,150,0,32,0,0,0,222,0,172,0,0,0,0,0,0,0,0,0,219,0,187,0,97,0,0,0,254,0,0,0,226,0,107,0,134,0,54,0,41,0,0,0,123,0,67,0,15,0,0,0,0,0,248,0,232,0,175,0,85,0,103,0,204,0,41,0,0,0,91,0,160,0,254,0,82,0,221,0,203,0,128,0,14,0,0,0,128,0,201,0,240,0,47,0,14,0,167,0,12,0,80,0,233,0,37,0,191,0,173,0,200,0,0,0,23,0,89,0,218,0,108,0,0,0,95,0,135,0,6,0,96,0,235,0,192,0,113,0,241,0,20,0,80,0,63,0,94,0,220,0,174,0,181,0,225,0,130,0,122,0,0,0,22,0,0,0,0,0,52,0,149,0,227,0,0,0,11,0,121,0,252,0,0,0,0,0,0,0,187,0,140,0,57,0,246,0,0,0,17,0,0,0,22,0,162,0,52,0,178,0,180,0,152,0,229,0,4,0,0,0,212,0,0,0,0,0,210,0,91,0,202,0,0,0,31,0,35,0,149,0,201,0,162,0,144,0,254,0,0,0,185,0,0,0,97,0,239,0,7,0,145,0,33,0,62,0,246,0,105,0,236,0,0,0,0,0,124,0,40,0,0,0,131,0,31,0,90,0,116,0,131,0,138,0,3,0,43,0,62,0,81,0,60,0,180,0,0,0,164,0,127,0,79,0,61,0,0,0,136,0,0,0,116,0,199,0,133,0,207,0,224,0,9,0,207,0,240,0,185,0,224,0,64,0,17,0,143,0,29,0,72,0,175,0,0,0,0,0,181,0,130,0,88,0,12,0,190,0,158,0,148,0,250,0,0,0,8,0,192,0,183,0,0,0,204,0,204,0,129,0,181,0,62,0,74,0,132,0,156,0,9,0,3,0,28,0,72,0,0,0,225,0,153,0,240,0,202,0,0,0,0,0,220,0,61,0,54,0,140,0,216,0,153,0,0,0,141,0,153,0,105,0,0,0,91,0,183,0,8,0,186,0,0,0,236,0,228,0,38,0,0,0,16,0,0,0,158,0,152,0,85,0,13,0,0,0,152,0,0,0,156,0,240,0,157,0,42,0,97,0,79,0,137,0,190,0,251,0,98,0,30,0,86,0,0,0,0,0,39,0,224,0,84,0,181,0,34,0,57,0,0,0,140,0,180,0,0,0,222,0,195,0,86,0,0,0,240,0,242,0,115,0,8,0,0,0,218,0,70,0,0,0,28,0,0,0,248,0,210,0,0,0,204,0,95,0,114,0,86,0,83,0,0,0,0,0,182,0,0,0,64,0,21,0,219,0,81,0,23,0,176,0,231,0,232,0,227,0,112,0,158,0,64,0,176,0,10,0,58,0,40,0,116,0,9,0,0,0,199,0,1,0,253,0,0,0,140,0,138,0,0,0,104,0,88,0,41,0,0,0,187,0,78,0,195,0,52,0,122,0,126,0,0,0,135,0,103,0,76,0,0,0,125,0,225,0,171,0,85,0,95,0,0,0,103,0,50,0,124,0,131,0,0,0,73,0,39,0,201,0,219,0,252,0,115,0,245,0,241,0,0,0,0,0,51,0,0,0,13,0,5,0,107,0,110,0,0,0,200,0,0,0,59,0,63,0,0,0,115,0,52,0,41,0,0,0,101,0,159,0,0,0,93,0,156,0,129,0,144,0,143,0,121,0,2,0,0,0,32,0,173,0,214,0,158,0,222,0,0,0,38,0,30,0,0,0,200,0,33,0,49,0,58,0,207,0,191,0,92,0,30,0,130,0,213,0,173,0,234,0,68,0,219,0,229,0,207,0,50,0);
signal scenario_full  : scenario_type := (43,31,252,31,144,31,7,31,138,31,205,31,32,31,212,31,212,30,87,31,39,31,250,31,235,31,142,31,153,31,107,31,224,31,20,31,125,31,103,31,110,31,110,30,110,29,53,31,64,31,45,31,122,31,122,30,251,31,76,31,30,31,240,31,30,31,172,31,155,31,50,31,50,30,50,29,50,28,254,31,62,31,62,30,194,31,194,30,125,31,20,31,106,31,23,31,23,30,58,31,213,31,152,31,127,31,103,31,250,31,26,31,26,30,56,31,53,31,160,31,168,31,168,30,107,31,239,31,188,31,70,31,217,31,78,31,11,31,58,31,221,31,41,31,185,31,218,31,240,31,90,31,28,31,102,31,166,31,214,31,180,31,180,30,179,31,58,31,58,30,84,31,28,31,155,31,244,31,198,31,198,30,224,31,136,31,187,31,115,31,146,31,146,30,202,31,43,31,44,31,190,31,130,31,130,30,253,31,238,31,142,31,178,31,211,31,181,31,25,31,14,31,14,30,14,29,152,31,152,30,161,31,15,31,212,31,244,31,143,31,169,31,130,31,181,31,204,31,234,31,247,31,5,31,193,31,82,31,82,30,106,31,233,31,187,31,187,30,52,31,52,30,214,31,255,31,203,31,140,31,41,31,213,31,71,31,71,30,71,29,149,31,149,30,149,29,241,31,241,31,235,31,235,30,215,31,78,31,53,31,116,31,116,30,195,31,241,31,241,30,241,29,212,31,154,31,154,30,89,31,155,31,54,31,88,31,155,31,241,31,241,30,5,31,5,30,150,31,32,31,32,30,222,31,172,31,172,30,172,29,172,28,172,27,219,31,187,31,97,31,97,30,254,31,254,30,226,31,107,31,134,31,54,31,41,31,41,30,123,31,67,31,15,31,15,30,15,29,248,31,232,31,175,31,85,31,103,31,204,31,41,31,41,30,91,31,160,31,254,31,82,31,221,31,203,31,128,31,14,31,14,30,128,31,201,31,240,31,47,31,14,31,167,31,12,31,80,31,233,31,37,31,191,31,173,31,200,31,200,30,23,31,89,31,218,31,108,31,108,30,95,31,135,31,6,31,96,31,235,31,192,31,113,31,241,31,20,31,80,31,63,31,94,31,220,31,174,31,181,31,225,31,130,31,122,31,122,30,22,31,22,30,22,29,52,31,149,31,227,31,227,30,11,31,121,31,252,31,252,30,252,29,252,28,187,31,140,31,57,31,246,31,246,30,17,31,17,30,22,31,162,31,52,31,178,31,180,31,152,31,229,31,4,31,4,30,212,31,212,30,212,29,210,31,91,31,202,31,202,30,31,31,35,31,149,31,201,31,162,31,144,31,254,31,254,30,185,31,185,30,97,31,239,31,7,31,145,31,33,31,62,31,246,31,105,31,236,31,236,30,236,29,124,31,40,31,40,30,131,31,31,31,90,31,116,31,131,31,138,31,3,31,43,31,62,31,81,31,60,31,180,31,180,30,164,31,127,31,79,31,61,31,61,30,136,31,136,30,116,31,199,31,133,31,207,31,224,31,9,31,207,31,240,31,185,31,224,31,64,31,17,31,143,31,29,31,72,31,175,31,175,30,175,29,181,31,130,31,88,31,12,31,190,31,158,31,148,31,250,31,250,30,8,31,192,31,183,31,183,30,204,31,204,31,129,31,181,31,62,31,74,31,132,31,156,31,9,31,3,31,28,31,72,31,72,30,225,31,153,31,240,31,202,31,202,30,202,29,220,31,61,31,54,31,140,31,216,31,153,31,153,30,141,31,153,31,105,31,105,30,91,31,183,31,8,31,186,31,186,30,236,31,228,31,38,31,38,30,16,31,16,30,158,31,152,31,85,31,13,31,13,30,152,31,152,30,156,31,240,31,157,31,42,31,97,31,79,31,137,31,190,31,251,31,98,31,30,31,86,31,86,30,86,29,39,31,224,31,84,31,181,31,34,31,57,31,57,30,140,31,180,31,180,30,222,31,195,31,86,31,86,30,240,31,242,31,115,31,8,31,8,30,218,31,70,31,70,30,28,31,28,30,248,31,210,31,210,30,204,31,95,31,114,31,86,31,83,31,83,30,83,29,182,31,182,30,64,31,21,31,219,31,81,31,23,31,176,31,231,31,232,31,227,31,112,31,158,31,64,31,176,31,10,31,58,31,40,31,116,31,9,31,9,30,199,31,1,31,253,31,253,30,140,31,138,31,138,30,104,31,88,31,41,31,41,30,187,31,78,31,195,31,52,31,122,31,126,31,126,30,135,31,103,31,76,31,76,30,125,31,225,31,171,31,85,31,95,31,95,30,103,31,50,31,124,31,131,31,131,30,73,31,39,31,201,31,219,31,252,31,115,31,245,31,241,31,241,30,241,29,51,31,51,30,13,31,5,31,107,31,110,31,110,30,200,31,200,30,59,31,63,31,63,30,115,31,52,31,41,31,41,30,101,31,159,31,159,30,93,31,156,31,129,31,144,31,143,31,121,31,2,31,2,30,32,31,173,31,214,31,158,31,222,31,222,30,38,31,30,31,30,30,200,31,33,31,49,31,58,31,207,31,191,31,92,31,30,31,130,31,213,31,173,31,234,31,68,31,219,31,229,31,207,31,50,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
