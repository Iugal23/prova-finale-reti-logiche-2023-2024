-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 660;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,0,0,203,0,4,0,214,0,0,0,134,0,114,0,0,0,0,0,205,0,21,0,29,0,220,0,0,0,0,0,247,0,46,0,25,0,124,0,244,0,37,0,89,0,153,0,6,0,207,0,61,0,19,0,24,0,0,0,221,0,0,0,0,0,44,0,170,0,0,0,213,0,95,0,240,0,187,0,44,0,172,0,153,0,100,0,109,0,199,0,0,0,177,0,69,0,119,0,73,0,24,0,67,0,42,0,182,0,119,0,0,0,150,0,85,0,0,0,15,0,150,0,0,0,216,0,171,0,97,0,174,0,152,0,58,0,205,0,190,0,155,0,119,0,0,0,96,0,31,0,37,0,244,0,0,0,101,0,158,0,0,0,25,0,210,0,16,0,20,0,169,0,64,0,50,0,55,0,0,0,0,0,248,0,210,0,86,0,94,0,186,0,0,0,0,0,182,0,0,0,197,0,165,0,0,0,0,0,236,0,0,0,0,0,11,0,83,0,83,0,222,0,186,0,26,0,29,0,0,0,153,0,220,0,99,0,188,0,98,0,0,0,243,0,77,0,217,0,34,0,68,0,227,0,85,0,143,0,88,0,213,0,100,0,3,0,34,0,0,0,0,0,21,0,87,0,52,0,162,0,145,0,139,0,74,0,168,0,116,0,29,0,19,0,243,0,83,0,0,0,212,0,238,0,65,0,0,0,147,0,68,0,79,0,0,0,189,0,111,0,80,0,117,0,239,0,131,0,3,0,31,0,103,0,0,0,238,0,0,0,56,0,242,0,115,0,248,0,0,0,150,0,0,0,0,0,191,0,179,0,4,0,95,0,101,0,48,0,198,0,156,0,0,0,0,0,40,0,82,0,113,0,91,0,94,0,0,0,110,0,237,0,215,0,6,0,28,0,42,0,154,0,32,0,12,0,84,0,141,0,5,0,113,0,109,0,0,0,131,0,9,0,107,0,22,0,201,0,0,0,133,0,84,0,59,0,254,0,0,0,169,0,27,0,141,0,147,0,182,0,0,0,87,0,241,0,41,0,86,0,185,0,97,0,165,0,176,0,3,0,124,0,159,0,0,0,245,0,233,0,62,0,0,0,231,0,187,0,0,0,67,0,49,0,0,0,4,0,128,0,25,0,7,0,3,0,58,0,233,0,219,0,62,0,66,0,120,0,38,0,52,0,0,0,108,0,89,0,252,0,90,0,0,0,144,0,0,0,158,0,7,0,170,0,62,0,152,0,50,0,156,0,133,0,29,0,0,0,202,0,0,0,251,0,225,0,0,0,100,0,106,0,149,0,183,0,248,0,146,0,161,0,16,0,75,0,0,0,0,0,211,0,0,0,0,0,0,0,9,0,255,0,30,0,50,0,216,0,231,0,0,0,11,0,0,0,0,0,71,0,63,0,215,0,219,0,248,0,64,0,0,0,229,0,243,0,216,0,51,0,231,0,128,0,79,0,9,0,49,0,237,0,242,0,0,0,247,0,97,0,205,0,101,0,0,0,184,0,0,0,78,0,50,0,0,0,148,0,205,0,31,0,0,0,170,0,0,0,3,0,65,0,251,0,0,0,0,0,0,0,55,0,0,0,22,0,65,0,4,0,0,0,0,0,150,0,109,0,163,0,75,0,185,0,186,0,39,0,254,0,160,0,129,0,84,0,25,0,162,0,182,0,56,0,36,0,227,0,0,0,124,0,74,0,58,0,159,0,0,0,35,0,69,0,76,0,11,0,183,0,240,0,0,0,205,0,201,0,91,0,206,0,44,0,200,0,210,0,0,0,254,0,144,0,110,0,238,0,202,0,181,0,69,0,126,0,101,0,94,0,0,0,92,0,0,0,50,0,104,0,254,0,163,0,224,0,65,0,156,0,247,0,135,0,138,0,227,0,117,0,201,0,150,0,42,0,125,0,174,0,201,0,182,0,175,0,54,0,162,0,119,0,146,0,33,0,0,0,137,0,9,0,38,0,38,0,67,0,67,0,40,0,66,0,42,0,228,0,61,0,5,0,85,0,129,0,0,0,0,0,11,0,37,0,101,0,169,0,175,0,207,0,246,0,148,0,0,0,234,0,0,0,47,0,39,0,0,0,27,0,31,0,36,0,166,0,214,0,186,0,243,0,0,0,32,0,89,0,0,0,59,0,204,0,15,0,33,0,24,0,255,0,107,0,59,0,214,0,0,0,249,0,47,0,66,0,59,0,69,0,227,0,38,0,157,0,69,0,246,0,120,0,216,0,162,0,240,0,128,0,52,0,221,0,0,0,70,0,186,0,0,0,0,0,191,0,202,0,246,0,226,0,99,0,0,0,122,0,222,0,79,0,132,0,230,0,0,0,135,0,152,0,166,0,0,0,137,0,94,0,17,0,50,0,0,0,151,0,219,0,180,0,0,0,169,0,175,0,205,0,200,0,57,0,158,0,8,0,237,0,224,0,228,0,254,0,188,0,30,0,136,0,166,0,131,0,186,0,178,0,85,0,104,0,22,0,148,0,0,0,224,0,239,0,52,0,197,0,232,0,48,0,142,0,109,0,13,0,206,0,0,0,95,0,251,0,128,0,0,0,216,0,24,0,0,0,151,0,121,0,37,0,20,0,172,0,211,0,0,0,203,0,0,0,144,0,118,0,2,0,172,0,40,0,1,0,34,0,0,0,45,0,109,0,182,0,216,0,38,0,83,0,17,0,41,0,0,0,0,0,41,0,172,0,12,0,18,0,224,0,175,0,0,0,147,0,0,0,25,0,56,0,122,0,0,0,0,0,55,0,0,0,164,0,84,0,208,0,0,0,163,0,49,0,0,0,0,0,96,0,241,0,129,0,181,0,43,0,165,0,254,0,0,0,2,0,27,0,193,0,204,0,95,0,71,0,87,0,151,0,155,0,139,0,3,0,164,0,14,0,0,0,0,0,0,0,207,0,169,0,0,0,185,0,20,0,112,0,231,0,157,0,77,0,51,0,67,0);
signal scenario_full  : scenario_type := (0,0,0,0,203,31,4,31,214,31,214,30,134,31,114,31,114,30,114,29,205,31,21,31,29,31,220,31,220,30,220,29,247,31,46,31,25,31,124,31,244,31,37,31,89,31,153,31,6,31,207,31,61,31,19,31,24,31,24,30,221,31,221,30,221,29,44,31,170,31,170,30,213,31,95,31,240,31,187,31,44,31,172,31,153,31,100,31,109,31,199,31,199,30,177,31,69,31,119,31,73,31,24,31,67,31,42,31,182,31,119,31,119,30,150,31,85,31,85,30,15,31,150,31,150,30,216,31,171,31,97,31,174,31,152,31,58,31,205,31,190,31,155,31,119,31,119,30,96,31,31,31,37,31,244,31,244,30,101,31,158,31,158,30,25,31,210,31,16,31,20,31,169,31,64,31,50,31,55,31,55,30,55,29,248,31,210,31,86,31,94,31,186,31,186,30,186,29,182,31,182,30,197,31,165,31,165,30,165,29,236,31,236,30,236,29,11,31,83,31,83,31,222,31,186,31,26,31,29,31,29,30,153,31,220,31,99,31,188,31,98,31,98,30,243,31,77,31,217,31,34,31,68,31,227,31,85,31,143,31,88,31,213,31,100,31,3,31,34,31,34,30,34,29,21,31,87,31,52,31,162,31,145,31,139,31,74,31,168,31,116,31,29,31,19,31,243,31,83,31,83,30,212,31,238,31,65,31,65,30,147,31,68,31,79,31,79,30,189,31,111,31,80,31,117,31,239,31,131,31,3,31,31,31,103,31,103,30,238,31,238,30,56,31,242,31,115,31,248,31,248,30,150,31,150,30,150,29,191,31,179,31,4,31,95,31,101,31,48,31,198,31,156,31,156,30,156,29,40,31,82,31,113,31,91,31,94,31,94,30,110,31,237,31,215,31,6,31,28,31,42,31,154,31,32,31,12,31,84,31,141,31,5,31,113,31,109,31,109,30,131,31,9,31,107,31,22,31,201,31,201,30,133,31,84,31,59,31,254,31,254,30,169,31,27,31,141,31,147,31,182,31,182,30,87,31,241,31,41,31,86,31,185,31,97,31,165,31,176,31,3,31,124,31,159,31,159,30,245,31,233,31,62,31,62,30,231,31,187,31,187,30,67,31,49,31,49,30,4,31,128,31,25,31,7,31,3,31,58,31,233,31,219,31,62,31,66,31,120,31,38,31,52,31,52,30,108,31,89,31,252,31,90,31,90,30,144,31,144,30,158,31,7,31,170,31,62,31,152,31,50,31,156,31,133,31,29,31,29,30,202,31,202,30,251,31,225,31,225,30,100,31,106,31,149,31,183,31,248,31,146,31,161,31,16,31,75,31,75,30,75,29,211,31,211,30,211,29,211,28,9,31,255,31,30,31,50,31,216,31,231,31,231,30,11,31,11,30,11,29,71,31,63,31,215,31,219,31,248,31,64,31,64,30,229,31,243,31,216,31,51,31,231,31,128,31,79,31,9,31,49,31,237,31,242,31,242,30,247,31,97,31,205,31,101,31,101,30,184,31,184,30,78,31,50,31,50,30,148,31,205,31,31,31,31,30,170,31,170,30,3,31,65,31,251,31,251,30,251,29,251,28,55,31,55,30,22,31,65,31,4,31,4,30,4,29,150,31,109,31,163,31,75,31,185,31,186,31,39,31,254,31,160,31,129,31,84,31,25,31,162,31,182,31,56,31,36,31,227,31,227,30,124,31,74,31,58,31,159,31,159,30,35,31,69,31,76,31,11,31,183,31,240,31,240,30,205,31,201,31,91,31,206,31,44,31,200,31,210,31,210,30,254,31,144,31,110,31,238,31,202,31,181,31,69,31,126,31,101,31,94,31,94,30,92,31,92,30,50,31,104,31,254,31,163,31,224,31,65,31,156,31,247,31,135,31,138,31,227,31,117,31,201,31,150,31,42,31,125,31,174,31,201,31,182,31,175,31,54,31,162,31,119,31,146,31,33,31,33,30,137,31,9,31,38,31,38,31,67,31,67,31,40,31,66,31,42,31,228,31,61,31,5,31,85,31,129,31,129,30,129,29,11,31,37,31,101,31,169,31,175,31,207,31,246,31,148,31,148,30,234,31,234,30,47,31,39,31,39,30,27,31,31,31,36,31,166,31,214,31,186,31,243,31,243,30,32,31,89,31,89,30,59,31,204,31,15,31,33,31,24,31,255,31,107,31,59,31,214,31,214,30,249,31,47,31,66,31,59,31,69,31,227,31,38,31,157,31,69,31,246,31,120,31,216,31,162,31,240,31,128,31,52,31,221,31,221,30,70,31,186,31,186,30,186,29,191,31,202,31,246,31,226,31,99,31,99,30,122,31,222,31,79,31,132,31,230,31,230,30,135,31,152,31,166,31,166,30,137,31,94,31,17,31,50,31,50,30,151,31,219,31,180,31,180,30,169,31,175,31,205,31,200,31,57,31,158,31,8,31,237,31,224,31,228,31,254,31,188,31,30,31,136,31,166,31,131,31,186,31,178,31,85,31,104,31,22,31,148,31,148,30,224,31,239,31,52,31,197,31,232,31,48,31,142,31,109,31,13,31,206,31,206,30,95,31,251,31,128,31,128,30,216,31,24,31,24,30,151,31,121,31,37,31,20,31,172,31,211,31,211,30,203,31,203,30,144,31,118,31,2,31,172,31,40,31,1,31,34,31,34,30,45,31,109,31,182,31,216,31,38,31,83,31,17,31,41,31,41,30,41,29,41,31,172,31,12,31,18,31,224,31,175,31,175,30,147,31,147,30,25,31,56,31,122,31,122,30,122,29,55,31,55,30,164,31,84,31,208,31,208,30,163,31,49,31,49,30,49,29,96,31,241,31,129,31,181,31,43,31,165,31,254,31,254,30,2,31,27,31,193,31,204,31,95,31,71,31,87,31,151,31,155,31,139,31,3,31,164,31,14,31,14,30,14,29,14,28,207,31,169,31,169,30,185,31,20,31,112,31,231,31,157,31,77,31,51,31,67,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
