-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 862;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (108,0,202,0,0,0,0,0,136,0,222,0,33,0,245,0,233,0,16,0,224,0,163,0,54,0,25,0,43,0,0,0,0,0,107,0,171,0,80,0,5,0,0,0,86,0,173,0,0,0,171,0,0,0,177,0,207,0,176,0,37,0,177,0,162,0,16,0,0,0,218,0,175,0,117,0,204,0,143,0,27,0,77,0,175,0,175,0,138,0,31,0,8,0,219,0,215,0,116,0,32,0,0,0,153,0,0,0,136,0,196,0,239,0,125,0,0,0,183,0,250,0,0,0,156,0,229,0,0,0,206,0,0,0,231,0,77,0,229,0,248,0,208,0,54,0,0,0,217,0,223,0,68,0,111,0,192,0,134,0,131,0,169,0,253,0,58,0,0,0,175,0,4,0,56,0,206,0,60,0,0,0,148,0,11,0,0,0,127,0,228,0,156,0,101,0,0,0,0,0,145,0,29,0,0,0,242,0,238,0,141,0,0,0,225,0,189,0,179,0,238,0,100,0,0,0,227,0,218,0,80,0,152,0,165,0,90,0,4,0,222,0,229,0,0,0,38,0,111,0,134,0,119,0,73,0,217,0,211,0,20,0,30,0,0,0,233,0,168,0,243,0,78,0,124,0,42,0,194,0,191,0,247,0,4,0,0,0,111,0,0,0,26,0,215,0,223,0,93,0,95,0,254,0,0,0,188,0,0,0,180,0,135,0,167,0,205,0,60,0,215,0,76,0,146,0,243,0,78,0,0,0,0,0,255,0,101,0,0,0,89,0,113,0,0,0,132,0,222,0,84,0,212,0,254,0,80,0,0,0,247,0,124,0,14,0,0,0,0,0,159,0,77,0,127,0,246,0,0,0,27,0,102,0,39,0,195,0,36,0,13,0,211,0,3,0,233,0,0,0,87,0,21,0,135,0,105,0,13,0,113,0,196,0,0,0,176,0,0,0,0,0,235,0,205,0,113,0,160,0,142,0,0,0,182,0,5,0,12,0,185,0,103,0,230,0,84,0,0,0,82,0,121,0,0,0,13,0,0,0,21,0,222,0,80,0,54,0,87,0,0,0,29,0,25,0,226,0,121,0,128,0,171,0,76,0,143,0,183,0,134,0,218,0,101,0,163,0,199,0,0,0,181,0,8,0,223,0,148,0,11,0,246,0,250,0,178,0,252,0,36,0,255,0,120,0,89,0,152,0,239,0,116,0,0,0,103,0,215,0,164,0,210,0,173,0,159,0,222,0,206,0,167,0,68,0,47,0,32,0,244,0,0,0,80,0,245,0,70,0,21,0,244,0,0,0,135,0,3,0,213,0,196,0,77,0,208,0,157,0,144,0,0,0,76,0,168,0,245,0,197,0,205,0,15,0,122,0,169,0,204,0,236,0,129,0,215,0,248,0,208,0,210,0,60,0,71,0,128,0,43,0,207,0,129,0,191,0,0,0,150,0,234,0,192,0,113,0,0,0,244,0,162,0,127,0,0,0,0,0,57,0,106,0,241,0,144,0,0,0,174,0,249,0,56,0,0,0,127,0,56,0,0,0,190,0,227,0,185,0,21,0,49,0,122,0,59,0,65,0,41,0,0,0,17,0,229,0,58,0,0,0,179,0,58,0,126,0,133,0,255,0,111,0,239,0,104,0,11,0,145,0,79,0,108,0,168,0,231,0,168,0,184,0,33,0,238,0,20,0,220,0,0,0,20,0,0,0,90,0,0,0,0,0,205,0,165,0,183,0,41,0,37,0,223,0,0,0,0,0,192,0,134,0,78,0,38,0,3,0,74,0,166,0,157,0,14,0,190,0,0,0,0,0,20,0,0,0,13,0,73,0,192,0,74,0,179,0,233,0,22,0,191,0,181,0,66,0,8,0,170,0,122,0,31,0,67,0,172,0,21,0,84,0,85,0,209,0,0,0,138,0,254,0,30,0,153,0,148,0,58,0,0,0,0,0,0,0,158,0,161,0,192,0,219,0,244,0,217,0,0,0,90,0,224,0,248,0,240,0,46,0,210,0,135,0,27,0,154,0,26,0,0,0,52,0,32,0,88,0,0,0,76,0,30,0,234,0,167,0,0,0,42,0,69,0,63,0,90,0,163,0,11,0,198,0,245,0,57,0,0,0,129,0,56,0,53,0,0,0,208,0,52,0,81,0,146,0,133,0,168,0,159,0,238,0,6,0,31,0,93,0,241,0,118,0,114,0,222,0,200,0,33,0,0,0,231,0,255,0,29,0,97,0,162,0,134,0,44,0,239,0,165,0,0,0,114,0,149,0,0,0,160,0,0,0,114,0,239,0,210,0,40,0,0,0,193,0,186,0,182,0,88,0,78,0,0,0,53,0,193,0,142,0,0,0,186,0,75,0,77,0,0,0,130,0,0,0,119,0,151,0,158,0,208,0,227,0,217,0,166,0,0,0,0,0,233,0,98,0,74,0,117,0,191,0,66,0,181,0,240,0,242,0,122,0,211,0,146,0,0,0,200,0,56,0,25,0,45,0,0,0,0,0,84,0,186,0,12,0,144,0,174,0,127,0,0,0,162,0,130,0,95,0,189,0,0,0,147,0,7,0,0,0,162,0,0,0,75,0,175,0,143,0,52,0,76,0,155,0,46,0,241,0,151,0,125,0,125,0,201,0,0,0,188,0,109,0,108,0,160,0,45,0,0,0,215,0,51,0,117,0,93,0,0,0,78,0,162,0,183,0,210,0,234,0,172,0,81,0,112,0,110,0,117,0,0,0,85,0,192,0,0,0,85,0,136,0,8,0,170,0,188,0,229,0,0,0,119,0,193,0,128,0,40,0,75,0,26,0,0,0,147,0,124,0,252,0,149,0,214,0,0,0,0,0,0,0,0,0,0,0,99,0,10,0,11,0,89,0,144,0,20,0,149,0,241,0,0,0,0,0,0,0,162,0,166,0,0,0,28,0,48,0,121,0,218,0,0,0,184,0,34,0,186,0,81,0,102,0,150,0,235,0,141,0,63,0,10,0,0,0,98,0,113,0,251,0,138,0,104,0,226,0,202,0,245,0,202,0,1,0,6,0,241,0,0,0,182,0,242,0,169,0,0,0,0,0,130,0,194,0,225,0,0,0,197,0,175,0,38,0,189,0,225,0,123,0,219,0,174,0,25,0,51,0,92,0,34,0,30,0,86,0,0,0,203,0,86,0,7,0,255,0,0,0,0,0,145,0,57,0,130,0,153,0,92,0,243,0,68,0,167,0,0,0,0,0,88,0,0,0,0,0,0,0,15,0,102,0,58,0,117,0,0,0,0,0,33,0,232,0,30,0,199,0,0,0,0,0,62,0,41,0,250,0,27,0,0,0,92,0,23,0,218,0,16,0,180,0,231,0,53,0,0,0,0,0,122,0,181,0,139,0,26,0,177,0,50,0,149,0,215,0,184,0,3,0,0,0,40,0,1,0,197,0,249,0,201,0,206,0,162,0,96,0,58,0,73,0,246,0,181,0,121,0,123,0,0,0,147,0,129,0,0,0,228,0,249,0,0,0,194,0,124,0,0,0,29,0,247,0,111,0,99,0,0,0,159,0,250,0,127,0,105,0,167,0,63,0,175,0,153,0,8,0,0,0,172,0,11,0,21,0,223,0,60,0,255,0,0,0,0,0,136,0,139,0,108,0,14,0,176,0,141,0,143,0,164,0,155,0,157,0,0,0,0,0,0,0,232,0,43,0,70,0,244,0,0,0,250,0,198,0,164,0,28,0,60,0,0,0,69,0,0,0,78,0,0,0,58,0,61,0,49,0,29,0,29,0,88,0,221,0,160,0,216,0,198,0,152,0,122,0,22,0,0,0,230,0,74,0,32,0,221,0,0,0,0,0,0,0,77,0,180,0,246,0,72,0,75,0,94,0);
signal scenario_full  : scenario_type := (108,31,202,31,202,30,202,29,136,31,222,31,33,31,245,31,233,31,16,31,224,31,163,31,54,31,25,31,43,31,43,30,43,29,107,31,171,31,80,31,5,31,5,30,86,31,173,31,173,30,171,31,171,30,177,31,207,31,176,31,37,31,177,31,162,31,16,31,16,30,218,31,175,31,117,31,204,31,143,31,27,31,77,31,175,31,175,31,138,31,31,31,8,31,219,31,215,31,116,31,32,31,32,30,153,31,153,30,136,31,196,31,239,31,125,31,125,30,183,31,250,31,250,30,156,31,229,31,229,30,206,31,206,30,231,31,77,31,229,31,248,31,208,31,54,31,54,30,217,31,223,31,68,31,111,31,192,31,134,31,131,31,169,31,253,31,58,31,58,30,175,31,4,31,56,31,206,31,60,31,60,30,148,31,11,31,11,30,127,31,228,31,156,31,101,31,101,30,101,29,145,31,29,31,29,30,242,31,238,31,141,31,141,30,225,31,189,31,179,31,238,31,100,31,100,30,227,31,218,31,80,31,152,31,165,31,90,31,4,31,222,31,229,31,229,30,38,31,111,31,134,31,119,31,73,31,217,31,211,31,20,31,30,31,30,30,233,31,168,31,243,31,78,31,124,31,42,31,194,31,191,31,247,31,4,31,4,30,111,31,111,30,26,31,215,31,223,31,93,31,95,31,254,31,254,30,188,31,188,30,180,31,135,31,167,31,205,31,60,31,215,31,76,31,146,31,243,31,78,31,78,30,78,29,255,31,101,31,101,30,89,31,113,31,113,30,132,31,222,31,84,31,212,31,254,31,80,31,80,30,247,31,124,31,14,31,14,30,14,29,159,31,77,31,127,31,246,31,246,30,27,31,102,31,39,31,195,31,36,31,13,31,211,31,3,31,233,31,233,30,87,31,21,31,135,31,105,31,13,31,113,31,196,31,196,30,176,31,176,30,176,29,235,31,205,31,113,31,160,31,142,31,142,30,182,31,5,31,12,31,185,31,103,31,230,31,84,31,84,30,82,31,121,31,121,30,13,31,13,30,21,31,222,31,80,31,54,31,87,31,87,30,29,31,25,31,226,31,121,31,128,31,171,31,76,31,143,31,183,31,134,31,218,31,101,31,163,31,199,31,199,30,181,31,8,31,223,31,148,31,11,31,246,31,250,31,178,31,252,31,36,31,255,31,120,31,89,31,152,31,239,31,116,31,116,30,103,31,215,31,164,31,210,31,173,31,159,31,222,31,206,31,167,31,68,31,47,31,32,31,244,31,244,30,80,31,245,31,70,31,21,31,244,31,244,30,135,31,3,31,213,31,196,31,77,31,208,31,157,31,144,31,144,30,76,31,168,31,245,31,197,31,205,31,15,31,122,31,169,31,204,31,236,31,129,31,215,31,248,31,208,31,210,31,60,31,71,31,128,31,43,31,207,31,129,31,191,31,191,30,150,31,234,31,192,31,113,31,113,30,244,31,162,31,127,31,127,30,127,29,57,31,106,31,241,31,144,31,144,30,174,31,249,31,56,31,56,30,127,31,56,31,56,30,190,31,227,31,185,31,21,31,49,31,122,31,59,31,65,31,41,31,41,30,17,31,229,31,58,31,58,30,179,31,58,31,126,31,133,31,255,31,111,31,239,31,104,31,11,31,145,31,79,31,108,31,168,31,231,31,168,31,184,31,33,31,238,31,20,31,220,31,220,30,20,31,20,30,90,31,90,30,90,29,205,31,165,31,183,31,41,31,37,31,223,31,223,30,223,29,192,31,134,31,78,31,38,31,3,31,74,31,166,31,157,31,14,31,190,31,190,30,190,29,20,31,20,30,13,31,73,31,192,31,74,31,179,31,233,31,22,31,191,31,181,31,66,31,8,31,170,31,122,31,31,31,67,31,172,31,21,31,84,31,85,31,209,31,209,30,138,31,254,31,30,31,153,31,148,31,58,31,58,30,58,29,58,28,158,31,161,31,192,31,219,31,244,31,217,31,217,30,90,31,224,31,248,31,240,31,46,31,210,31,135,31,27,31,154,31,26,31,26,30,52,31,32,31,88,31,88,30,76,31,30,31,234,31,167,31,167,30,42,31,69,31,63,31,90,31,163,31,11,31,198,31,245,31,57,31,57,30,129,31,56,31,53,31,53,30,208,31,52,31,81,31,146,31,133,31,168,31,159,31,238,31,6,31,31,31,93,31,241,31,118,31,114,31,222,31,200,31,33,31,33,30,231,31,255,31,29,31,97,31,162,31,134,31,44,31,239,31,165,31,165,30,114,31,149,31,149,30,160,31,160,30,114,31,239,31,210,31,40,31,40,30,193,31,186,31,182,31,88,31,78,31,78,30,53,31,193,31,142,31,142,30,186,31,75,31,77,31,77,30,130,31,130,30,119,31,151,31,158,31,208,31,227,31,217,31,166,31,166,30,166,29,233,31,98,31,74,31,117,31,191,31,66,31,181,31,240,31,242,31,122,31,211,31,146,31,146,30,200,31,56,31,25,31,45,31,45,30,45,29,84,31,186,31,12,31,144,31,174,31,127,31,127,30,162,31,130,31,95,31,189,31,189,30,147,31,7,31,7,30,162,31,162,30,75,31,175,31,143,31,52,31,76,31,155,31,46,31,241,31,151,31,125,31,125,31,201,31,201,30,188,31,109,31,108,31,160,31,45,31,45,30,215,31,51,31,117,31,93,31,93,30,78,31,162,31,183,31,210,31,234,31,172,31,81,31,112,31,110,31,117,31,117,30,85,31,192,31,192,30,85,31,136,31,8,31,170,31,188,31,229,31,229,30,119,31,193,31,128,31,40,31,75,31,26,31,26,30,147,31,124,31,252,31,149,31,214,31,214,30,214,29,214,28,214,27,214,26,99,31,10,31,11,31,89,31,144,31,20,31,149,31,241,31,241,30,241,29,241,28,162,31,166,31,166,30,28,31,48,31,121,31,218,31,218,30,184,31,34,31,186,31,81,31,102,31,150,31,235,31,141,31,63,31,10,31,10,30,98,31,113,31,251,31,138,31,104,31,226,31,202,31,245,31,202,31,1,31,6,31,241,31,241,30,182,31,242,31,169,31,169,30,169,29,130,31,194,31,225,31,225,30,197,31,175,31,38,31,189,31,225,31,123,31,219,31,174,31,25,31,51,31,92,31,34,31,30,31,86,31,86,30,203,31,86,31,7,31,255,31,255,30,255,29,145,31,57,31,130,31,153,31,92,31,243,31,68,31,167,31,167,30,167,29,88,31,88,30,88,29,88,28,15,31,102,31,58,31,117,31,117,30,117,29,33,31,232,31,30,31,199,31,199,30,199,29,62,31,41,31,250,31,27,31,27,30,92,31,23,31,218,31,16,31,180,31,231,31,53,31,53,30,53,29,122,31,181,31,139,31,26,31,177,31,50,31,149,31,215,31,184,31,3,31,3,30,40,31,1,31,197,31,249,31,201,31,206,31,162,31,96,31,58,31,73,31,246,31,181,31,121,31,123,31,123,30,147,31,129,31,129,30,228,31,249,31,249,30,194,31,124,31,124,30,29,31,247,31,111,31,99,31,99,30,159,31,250,31,127,31,105,31,167,31,63,31,175,31,153,31,8,31,8,30,172,31,11,31,21,31,223,31,60,31,255,31,255,30,255,29,136,31,139,31,108,31,14,31,176,31,141,31,143,31,164,31,155,31,157,31,157,30,157,29,157,28,232,31,43,31,70,31,244,31,244,30,250,31,198,31,164,31,28,31,60,31,60,30,69,31,69,30,78,31,78,30,58,31,61,31,49,31,29,31,29,31,88,31,221,31,160,31,216,31,198,31,152,31,122,31,22,31,22,30,230,31,74,31,32,31,221,31,221,30,221,29,221,28,77,31,180,31,246,31,72,31,75,31,94,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
