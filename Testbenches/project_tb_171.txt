-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 189;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,113,0,176,0,105,0,226,0,65,0,94,0,146,0,252,0,213,0,251,0,117,0,231,0,80,0,0,0,64,0,18,0,60,0,226,0,223,0,101,0,4,0,238,0,206,0,33,0,241,0,218,0,87,0,98,0,197,0,79,0,236,0,237,0,117,0,222,0,44,0,0,0,183,0,189,0,139,0,0,0,120,0,48,0,24,0,26,0,148,0,64,0,105,0,127,0,222,0,215,0,156,0,138,0,19,0,0,0,30,0,231,0,89,0,0,0,1,0,248,0,132,0,62,0,29,0,220,0,12,0,198,0,47,0,27,0,49,0,58,0,0,0,0,0,163,0,0,0,60,0,154,0,0,0,211,0,132,0,28,0,91,0,198,0,0,0,30,0,115,0,0,0,0,0,146,0,215,0,168,0,99,0,0,0,117,0,0,0,0,0,4,0,240,0,0,0,164,0,249,0,184,0,0,0,199,0,0,0,6,0,69,0,152,0,0,0,0,0,91,0,213,0,165,0,192,0,155,0,0,0,154,0,0,0,0,0,215,0,70,0,169,0,227,0,102,0,0,0,169,0,4,0,0,0,174,0,0,0,56,0,139,0,56,0,39,0,74,0,130,0,245,0,11,0,240,0,77,0,0,0,87,0,206,0,0,0,221,0,198,0,84,0,105,0,132,0,144,0,0,0,48,0,0,0,70,0,125,0,147,0,111,0,224,0,91,0,249,0,147,0,156,0,131,0,119,0,0,0,91,0,0,0,0,0,96,0,69,0,160,0,0,0,115,0,125,0,57,0,221,0,109,0,246,0,237,0,96,0,232,0,0,0,0,0,245,0,3,0,154,0,62,0,51,0,232,0);
signal scenario_full  : scenario_type := (0,0,113,31,176,31,105,31,226,31,65,31,94,31,146,31,252,31,213,31,251,31,117,31,231,31,80,31,80,30,64,31,18,31,60,31,226,31,223,31,101,31,4,31,238,31,206,31,33,31,241,31,218,31,87,31,98,31,197,31,79,31,236,31,237,31,117,31,222,31,44,31,44,30,183,31,189,31,139,31,139,30,120,31,48,31,24,31,26,31,148,31,64,31,105,31,127,31,222,31,215,31,156,31,138,31,19,31,19,30,30,31,231,31,89,31,89,30,1,31,248,31,132,31,62,31,29,31,220,31,12,31,198,31,47,31,27,31,49,31,58,31,58,30,58,29,163,31,163,30,60,31,154,31,154,30,211,31,132,31,28,31,91,31,198,31,198,30,30,31,115,31,115,30,115,29,146,31,215,31,168,31,99,31,99,30,117,31,117,30,117,29,4,31,240,31,240,30,164,31,249,31,184,31,184,30,199,31,199,30,6,31,69,31,152,31,152,30,152,29,91,31,213,31,165,31,192,31,155,31,155,30,154,31,154,30,154,29,215,31,70,31,169,31,227,31,102,31,102,30,169,31,4,31,4,30,174,31,174,30,56,31,139,31,56,31,39,31,74,31,130,31,245,31,11,31,240,31,77,31,77,30,87,31,206,31,206,30,221,31,198,31,84,31,105,31,132,31,144,31,144,30,48,31,48,30,70,31,125,31,147,31,111,31,224,31,91,31,249,31,147,31,156,31,131,31,119,31,119,30,91,31,91,30,91,29,96,31,69,31,160,31,160,30,115,31,125,31,57,31,221,31,109,31,246,31,237,31,96,31,232,31,232,30,232,29,245,31,3,31,154,31,62,31,51,31,232,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
