-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 510;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (192,0,174,0,223,0,155,0,0,0,143,0,34,0,250,0,0,0,183,0,59,0,66,0,12,0,150,0,103,0,239,0,0,0,0,0,0,0,203,0,203,0,15,0,25,0,0,0,35,0,121,0,0,0,233,0,0,0,33,0,245,0,67,0,24,0,248,0,239,0,135,0,72,0,118,0,26,0,208,0,72,0,0,0,252,0,0,0,84,0,25,0,149,0,214,0,183,0,93,0,73,0,0,0,169,0,197,0,121,0,0,0,11,0,0,0,40,0,0,0,38,0,0,0,73,0,85,0,0,0,0,0,0,0,205,0,109,0,101,0,158,0,224,0,196,0,144,0,0,0,67,0,45,0,162,0,204,0,209,0,63,0,49,0,39,0,0,0,187,0,172,0,124,0,219,0,204,0,37,0,253,0,71,0,246,0,118,0,177,0,5,0,177,0,207,0,0,0,0,0,77,0,132,0,36,0,0,0,0,0,106,0,0,0,0,0,0,0,119,0,0,0,15,0,0,0,169,0,100,0,211,0,192,0,233,0,199,0,188,0,81,0,60,0,154,0,24,0,85,0,0,0,133,0,25,0,41,0,0,0,181,0,52,0,24,0,239,0,0,0,203,0,102,0,160,0,30,0,0,0,237,0,171,0,80,0,108,0,0,0,174,0,32,0,0,0,29,0,11,0,72,0,250,0,203,0,18,0,39,0,1,0,132,0,126,0,0,0,0,0,0,0,23,0,158,0,47,0,211,0,57,0,126,0,72,0,241,0,65,0,0,0,41,0,7,0,25,0,56,0,178,0,30,0,10,0,123,0,0,0,190,0,193,0,150,0,0,0,80,0,247,0,141,0,19,0,60,0,54,0,172,0,173,0,65,0,244,0,254,0,169,0,52,0,0,0,132,0,224,0,219,0,94,0,206,0,7,0,12,0,221,0,67,0,27,0,128,0,37,0,11,0,30,0,86,0,144,0,0,0,231,0,0,0,4,0,193,0,188,0,0,0,191,0,160,0,0,0,0,0,65,0,98,0,97,0,122,0,81,0,43,0,200,0,43,0,14,0,188,0,0,0,63,0,100,0,0,0,123,0,223,0,36,0,0,0,0,0,0,0,66,0,238,0,177,0,128,0,225,0,205,0,10,0,25,0,3,0,0,0,179,0,0,0,205,0,159,0,169,0,160,0,135,0,176,0,0,0,131,0,211,0,64,0,43,0,39,0,135,0,2,0,201,0,232,0,220,0,0,0,213,0,89,0,182,0,113,0,187,0,0,0,136,0,51,0,240,0,0,0,0,0,199,0,253,0,196,0,162,0,0,0,224,0,113,0,184,0,0,0,124,0,97,0,10,0,96,0,81,0,156,0,15,0,224,0,186,0,64,0,54,0,0,0,32,0,0,0,81,0,59,0,163,0,253,0,15,0,138,0,90,0,46,0,16,0,208,0,129,0,215,0,8,0,15,0,240,0,183,0,0,0,105,0,0,0,51,0,0,0,130,0,75,0,24,0,189,0,242,0,195,0,159,0,174,0,136,0,94,0,0,0,119,0,98,0,141,0,192,0,124,0,173,0,108,0,218,0,239,0,0,0,0,0,55,0,138,0,190,0,218,0,208,0,0,0,8,0,124,0,205,0,10,0,169,0,0,0,0,0,182,0,201,0,0,0,0,0,184,0,170,0,128,0,209,0,167,0,192,0,87,0,49,0,0,0,175,0,0,0,77,0,197,0,67,0,27,0,51,0,0,0,94,0,24,0,0,0,36,0,0,0,242,0,0,0,25,0,164,0,0,0,0,0,231,0,145,0,0,0,124,0,220,0,235,0,0,0,0,0,204,0,0,0,8,0,10,0,30,0,243,0,20,0,0,0,81,0,1,0,73,0,71,0,69,0,237,0,68,0,139,0,78,0,111,0,126,0,226,0,0,0,175,0,3,0,0,0,133,0,0,0,88,0,197,0,105,0,191,0,252,0,0,0,27,0,0,0,111,0,4,0,255,0,0,0,4,0,151,0,130,0,176,0,112,0,33,0,0,0,200,0,0,0,75,0,75,0,111,0,156,0,47,0,204,0,141,0,0,0,180,0,158,0,253,0,0,0,240,0,89,0,0,0,254,0,242,0,0,0,119,0,0,0,197,0,0,0,107,0,125,0,0,0,144,0,0,0,69,0,0,0,32,0,75,0,41,0,60,0,53,0,0,0,222,0,207,0,0,0,2,0,83,0,136,0,0,0,219,0,193,0,126,0,8,0,0,0,164,0,120,0,4,0,52,0,2,0,202,0,180,0,206,0,0,0,96,0,127,0);
signal scenario_full  : scenario_type := (192,31,174,31,223,31,155,31,155,30,143,31,34,31,250,31,250,30,183,31,59,31,66,31,12,31,150,31,103,31,239,31,239,30,239,29,239,28,203,31,203,31,15,31,25,31,25,30,35,31,121,31,121,30,233,31,233,30,33,31,245,31,67,31,24,31,248,31,239,31,135,31,72,31,118,31,26,31,208,31,72,31,72,30,252,31,252,30,84,31,25,31,149,31,214,31,183,31,93,31,73,31,73,30,169,31,197,31,121,31,121,30,11,31,11,30,40,31,40,30,38,31,38,30,73,31,85,31,85,30,85,29,85,28,205,31,109,31,101,31,158,31,224,31,196,31,144,31,144,30,67,31,45,31,162,31,204,31,209,31,63,31,49,31,39,31,39,30,187,31,172,31,124,31,219,31,204,31,37,31,253,31,71,31,246,31,118,31,177,31,5,31,177,31,207,31,207,30,207,29,77,31,132,31,36,31,36,30,36,29,106,31,106,30,106,29,106,28,119,31,119,30,15,31,15,30,169,31,100,31,211,31,192,31,233,31,199,31,188,31,81,31,60,31,154,31,24,31,85,31,85,30,133,31,25,31,41,31,41,30,181,31,52,31,24,31,239,31,239,30,203,31,102,31,160,31,30,31,30,30,237,31,171,31,80,31,108,31,108,30,174,31,32,31,32,30,29,31,11,31,72,31,250,31,203,31,18,31,39,31,1,31,132,31,126,31,126,30,126,29,126,28,23,31,158,31,47,31,211,31,57,31,126,31,72,31,241,31,65,31,65,30,41,31,7,31,25,31,56,31,178,31,30,31,10,31,123,31,123,30,190,31,193,31,150,31,150,30,80,31,247,31,141,31,19,31,60,31,54,31,172,31,173,31,65,31,244,31,254,31,169,31,52,31,52,30,132,31,224,31,219,31,94,31,206,31,7,31,12,31,221,31,67,31,27,31,128,31,37,31,11,31,30,31,86,31,144,31,144,30,231,31,231,30,4,31,193,31,188,31,188,30,191,31,160,31,160,30,160,29,65,31,98,31,97,31,122,31,81,31,43,31,200,31,43,31,14,31,188,31,188,30,63,31,100,31,100,30,123,31,223,31,36,31,36,30,36,29,36,28,66,31,238,31,177,31,128,31,225,31,205,31,10,31,25,31,3,31,3,30,179,31,179,30,205,31,159,31,169,31,160,31,135,31,176,31,176,30,131,31,211,31,64,31,43,31,39,31,135,31,2,31,201,31,232,31,220,31,220,30,213,31,89,31,182,31,113,31,187,31,187,30,136,31,51,31,240,31,240,30,240,29,199,31,253,31,196,31,162,31,162,30,224,31,113,31,184,31,184,30,124,31,97,31,10,31,96,31,81,31,156,31,15,31,224,31,186,31,64,31,54,31,54,30,32,31,32,30,81,31,59,31,163,31,253,31,15,31,138,31,90,31,46,31,16,31,208,31,129,31,215,31,8,31,15,31,240,31,183,31,183,30,105,31,105,30,51,31,51,30,130,31,75,31,24,31,189,31,242,31,195,31,159,31,174,31,136,31,94,31,94,30,119,31,98,31,141,31,192,31,124,31,173,31,108,31,218,31,239,31,239,30,239,29,55,31,138,31,190,31,218,31,208,31,208,30,8,31,124,31,205,31,10,31,169,31,169,30,169,29,182,31,201,31,201,30,201,29,184,31,170,31,128,31,209,31,167,31,192,31,87,31,49,31,49,30,175,31,175,30,77,31,197,31,67,31,27,31,51,31,51,30,94,31,24,31,24,30,36,31,36,30,242,31,242,30,25,31,164,31,164,30,164,29,231,31,145,31,145,30,124,31,220,31,235,31,235,30,235,29,204,31,204,30,8,31,10,31,30,31,243,31,20,31,20,30,81,31,1,31,73,31,71,31,69,31,237,31,68,31,139,31,78,31,111,31,126,31,226,31,226,30,175,31,3,31,3,30,133,31,133,30,88,31,197,31,105,31,191,31,252,31,252,30,27,31,27,30,111,31,4,31,255,31,255,30,4,31,151,31,130,31,176,31,112,31,33,31,33,30,200,31,200,30,75,31,75,31,111,31,156,31,47,31,204,31,141,31,141,30,180,31,158,31,253,31,253,30,240,31,89,31,89,30,254,31,242,31,242,30,119,31,119,30,197,31,197,30,107,31,125,31,125,30,144,31,144,30,69,31,69,30,32,31,75,31,41,31,60,31,53,31,53,30,222,31,207,31,207,30,2,31,83,31,136,31,136,30,219,31,193,31,126,31,8,31,8,30,164,31,120,31,4,31,52,31,2,31,202,31,180,31,206,31,206,30,96,31,127,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
