-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 423;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (81,0,42,0,0,0,0,0,0,0,212,0,4,0,170,0,0,0,15,0,146,0,177,0,247,0,113,0,225,0,78,0,7,0,225,0,178,0,159,0,175,0,0,0,0,0,45,0,90,0,69,0,238,0,227,0,71,0,200,0,81,0,210,0,214,0,207,0,0,0,0,0,78,0,142,0,0,0,78,0,146,0,100,0,0,0,0,0,215,0,0,0,179,0,76,0,206,0,177,0,69,0,206,0,0,0,42,0,151,0,0,0,183,0,88,0,0,0,166,0,145,0,150,0,191,0,137,0,180,0,174,0,79,0,248,0,96,0,32,0,20,0,11,0,143,0,223,0,118,0,0,0,81,0,23,0,113,0,0,0,209,0,161,0,18,0,181,0,156,0,1,0,32,0,233,0,206,0,21,0,8,0,0,0,0,0,34,0,210,0,0,0,194,0,112,0,0,0,196,0,96,0,0,0,30,0,225,0,43,0,251,0,0,0,213,0,51,0,252,0,165,0,208,0,0,0,112,0,80,0,0,0,83,0,53,0,188,0,123,0,0,0,214,0,80,0,144,0,248,0,5,0,61,0,173,0,0,0,203,0,247,0,167,0,145,0,134,0,98,0,197,0,147,0,88,0,41,0,225,0,0,0,159,0,129,0,0,0,140,0,134,0,145,0,21,0,178,0,135,0,63,0,23,0,120,0,0,0,174,0,0,0,36,0,208,0,35,0,115,0,0,0,241,0,252,0,155,0,97,0,153,0,67,0,1,0,0,0,104,0,0,0,141,0,183,0,202,0,172,0,103,0,210,0,183,0,2,0,232,0,156,0,202,0,129,0,67,0,0,0,85,0,188,0,65,0,220,0,0,0,213,0,169,0,125,0,233,0,0,0,0,0,226,0,149,0,86,0,97,0,0,0,25,0,32,0,61,0,216,0,0,0,13,0,90,0,0,0,0,0,21,0,69,0,182,0,0,0,0,0,134,0,76,0,234,0,0,0,2,0,52,0,0,0,0,0,0,0,64,0,111,0,74,0,104,0,215,0,133,0,90,0,0,0,248,0,190,0,0,0,31,0,65,0,0,0,174,0,148,0,249,0,231,0,55,0,123,0,0,0,199,0,82,0,64,0,95,0,82,0,85,0,0,0,172,0,126,0,0,0,179,0,128,0,210,0,214,0,147,0,0,0,211,0,0,0,202,0,29,0,145,0,73,0,84,0,0,0,62,0,126,0,66,0,194,0,172,0,109,0,0,0,22,0,57,0,172,0,30,0,202,0,0,0,74,0,0,0,190,0,202,0,144,0,220,0,176,0,0,0,70,0,34,0,201,0,213,0,190,0,185,0,155,0,89,0,49,0,0,0,99,0,138,0,48,0,83,0,0,0,176,0,0,0,0,0,0,0,216,0,0,0,222,0,0,0,68,0,211,0,169,0,3,0,0,0,143,0,126,0,141,0,6,0,240,0,75,0,140,0,151,0,38,0,0,0,130,0,103,0,0,0,191,0,0,0,85,0,1,0,220,0,78,0,121,0,0,0,60,0,64,0,226,0,117,0,232,0,49,0,41,0,220,0,225,0,109,0,223,0,148,0,185,0,80,0,252,0,175,0,185,0,201,0,0,0,230,0,138,0,253,0,216,0,91,0,248,0,163,0,0,0,65,0,9,0,206,0,0,0,0,0,26,0,140,0,136,0,0,0,121,0,161,0,41,0,217,0,105,0,95,0,155,0,89,0,0,0,33,0,245,0,36,0,0,0,152,0,218,0,226,0,109,0,232,0,0,0,239,0,112,0,132,0,110,0,186,0,74,0,154,0,141,0,0,0,0,0,56,0,0,0,78,0,0,0,0,0,0,0,0,0,237,0,168,0,0,0,0,0,245,0,18,0,227,0,0,0,164,0,0,0,115,0,105,0);
signal scenario_full  : scenario_type := (81,31,42,31,42,30,42,29,42,28,212,31,4,31,170,31,170,30,15,31,146,31,177,31,247,31,113,31,225,31,78,31,7,31,225,31,178,31,159,31,175,31,175,30,175,29,45,31,90,31,69,31,238,31,227,31,71,31,200,31,81,31,210,31,214,31,207,31,207,30,207,29,78,31,142,31,142,30,78,31,146,31,100,31,100,30,100,29,215,31,215,30,179,31,76,31,206,31,177,31,69,31,206,31,206,30,42,31,151,31,151,30,183,31,88,31,88,30,166,31,145,31,150,31,191,31,137,31,180,31,174,31,79,31,248,31,96,31,32,31,20,31,11,31,143,31,223,31,118,31,118,30,81,31,23,31,113,31,113,30,209,31,161,31,18,31,181,31,156,31,1,31,32,31,233,31,206,31,21,31,8,31,8,30,8,29,34,31,210,31,210,30,194,31,112,31,112,30,196,31,96,31,96,30,30,31,225,31,43,31,251,31,251,30,213,31,51,31,252,31,165,31,208,31,208,30,112,31,80,31,80,30,83,31,53,31,188,31,123,31,123,30,214,31,80,31,144,31,248,31,5,31,61,31,173,31,173,30,203,31,247,31,167,31,145,31,134,31,98,31,197,31,147,31,88,31,41,31,225,31,225,30,159,31,129,31,129,30,140,31,134,31,145,31,21,31,178,31,135,31,63,31,23,31,120,31,120,30,174,31,174,30,36,31,208,31,35,31,115,31,115,30,241,31,252,31,155,31,97,31,153,31,67,31,1,31,1,30,104,31,104,30,141,31,183,31,202,31,172,31,103,31,210,31,183,31,2,31,232,31,156,31,202,31,129,31,67,31,67,30,85,31,188,31,65,31,220,31,220,30,213,31,169,31,125,31,233,31,233,30,233,29,226,31,149,31,86,31,97,31,97,30,25,31,32,31,61,31,216,31,216,30,13,31,90,31,90,30,90,29,21,31,69,31,182,31,182,30,182,29,134,31,76,31,234,31,234,30,2,31,52,31,52,30,52,29,52,28,64,31,111,31,74,31,104,31,215,31,133,31,90,31,90,30,248,31,190,31,190,30,31,31,65,31,65,30,174,31,148,31,249,31,231,31,55,31,123,31,123,30,199,31,82,31,64,31,95,31,82,31,85,31,85,30,172,31,126,31,126,30,179,31,128,31,210,31,214,31,147,31,147,30,211,31,211,30,202,31,29,31,145,31,73,31,84,31,84,30,62,31,126,31,66,31,194,31,172,31,109,31,109,30,22,31,57,31,172,31,30,31,202,31,202,30,74,31,74,30,190,31,202,31,144,31,220,31,176,31,176,30,70,31,34,31,201,31,213,31,190,31,185,31,155,31,89,31,49,31,49,30,99,31,138,31,48,31,83,31,83,30,176,31,176,30,176,29,176,28,216,31,216,30,222,31,222,30,68,31,211,31,169,31,3,31,3,30,143,31,126,31,141,31,6,31,240,31,75,31,140,31,151,31,38,31,38,30,130,31,103,31,103,30,191,31,191,30,85,31,1,31,220,31,78,31,121,31,121,30,60,31,64,31,226,31,117,31,232,31,49,31,41,31,220,31,225,31,109,31,223,31,148,31,185,31,80,31,252,31,175,31,185,31,201,31,201,30,230,31,138,31,253,31,216,31,91,31,248,31,163,31,163,30,65,31,9,31,206,31,206,30,206,29,26,31,140,31,136,31,136,30,121,31,161,31,41,31,217,31,105,31,95,31,155,31,89,31,89,30,33,31,245,31,36,31,36,30,152,31,218,31,226,31,109,31,232,31,232,30,239,31,112,31,132,31,110,31,186,31,74,31,154,31,141,31,141,30,141,29,56,31,56,30,78,31,78,30,78,29,78,28,78,27,237,31,168,31,168,30,168,29,245,31,18,31,227,31,227,30,164,31,164,30,115,31,105,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
