-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 737;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (244,0,42,0,180,0,79,0,21,0,64,0,0,0,85,0,117,0,0,0,165,0,139,0,125,0,140,0,145,0,12,0,119,0,184,0,116,0,125,0,46,0,55,0,50,0,154,0,195,0,165,0,0,0,0,0,53,0,53,0,149,0,179,0,65,0,109,0,25,0,0,0,131,0,0,0,167,0,195,0,154,0,231,0,1,0,9,0,0,0,31,0,80,0,32,0,39,0,217,0,124,0,0,0,0,0,0,0,223,0,0,0,189,0,181,0,129,0,140,0,25,0,248,0,162,0,0,0,107,0,28,0,0,0,0,0,0,0,125,0,0,0,18,0,143,0,0,0,197,0,47,0,10,0,214,0,160,0,0,0,217,0,14,0,19,0,93,0,159,0,149,0,54,0,36,0,107,0,176,0,214,0,5,0,82,0,79,0,0,0,170,0,48,0,55,0,0,0,242,0,105,0,0,0,0,0,2,0,137,0,0,0,0,0,0,0,152,0,235,0,189,0,173,0,0,0,241,0,53,0,0,0,0,0,142,0,21,0,237,0,34,0,72,0,19,0,148,0,0,0,240,0,82,0,0,0,252,0,141,0,240,0,0,0,190,0,0,0,0,0,34,0,191,0,165,0,135,0,145,0,0,0,105,0,16,0,101,0,42,0,199,0,131,0,178,0,0,0,0,0,11,0,232,0,241,0,237,0,167,0,5,0,101,0,196,0,28,0,0,0,185,0,101,0,197,0,193,0,207,0,202,0,116,0,175,0,108,0,118,0,0,0,174,0,134,0,23,0,142,0,157,0,230,0,252,0,0,0,59,0,216,0,238,0,138,0,142,0,83,0,42,0,0,0,0,0,168,0,220,0,87,0,224,0,0,0,15,0,0,0,105,0,232,0,34,0,0,0,251,0,43,0,156,0,23,0,155,0,239,0,121,0,87,0,0,0,66,0,67,0,215,0,0,0,133,0,125,0,201,0,0,0,81,0,144,0,156,0,209,0,0,0,2,0,129,0,220,0,0,0,18,0,45,0,15,0,66,0,0,0,153,0,1,0,244,0,4,0,238,0,203,0,244,0,127,0,133,0,8,0,152,0,60,0,101,0,0,0,53,0,78,0,108,0,113,0,38,0,184,0,0,0,14,0,105,0,98,0,0,0,84,0,134,0,0,0,48,0,137,0,143,0,53,0,72,0,0,0,36,0,198,0,0,0,0,0,136,0,5,0,98,0,198,0,112,0,0,0,144,0,162,0,41,0,95,0,128,0,172,0,79,0,232,0,107,0,178,0,207,0,145,0,0,0,74,0,243,0,48,0,106,0,132,0,246,0,0,0,0,0,29,0,178,0,0,0,0,0,0,0,55,0,86,0,171,0,20,0,24,0,151,0,200,0,92,0,156,0,92,0,128,0,144,0,89,0,228,0,196,0,213,0,106,0,200,0,60,0,139,0,90,0,252,0,0,0,0,0,0,0,0,0,231,0,0,0,46,0,22,0,0,0,0,0,204,0,26,0,0,0,141,0,0,0,156,0,150,0,3,0,192,0,204,0,49,0,45,0,28,0,98,0,0,0,0,0,181,0,0,0,73,0,31,0,0,0,198,0,183,0,134,0,92,0,43,0,219,0,0,0,111,0,187,0,0,0,204,0,0,0,97,0,236,0,203,0,68,0,127,0,185,0,70,0,181,0,29,0,206,0,27,0,0,0,202,0,39,0,0,0,42,0,127,0,15,0,0,0,161,0,72,0,43,0,129,0,5,0,119,0,27,0,110,0,72,0,26,0,0,0,124,0,17,0,11,0,0,0,110,0,48,0,6,0,97,0,233,0,23,0,215,0,181,0,54,0,222,0,152,0,73,0,210,0,235,0,64,0,197,0,46,0,113,0,186,0,42,0,0,0,166,0,179,0,19,0,224,0,169,0,248,0,60,0,0,0,0,0,42,0,32,0,99,0,29,0,38,0,211,0,226,0,0,0,79,0,177,0,0,0,0,0,0,0,244,0,217,0,245,0,233,0,92,0,13,0,56,0,216,0,89,0,44,0,0,0,191,0,183,0,0,0,67,0,175,0,157,0,93,0,191,0,238,0,41,0,70,0,58,0,0,0,128,0,201,0,0,0,215,0,50,0,106,0,173,0,4,0,139,0,50,0,177,0,178,0,0,0,134,0,237,0,143,0,243,0,144,0,0,0,147,0,129,0,60,0,0,0,68,0,36,0,104,0,0,0,109,0,237,0,155,0,0,0,175,0,242,0,55,0,180,0,116,0,251,0,185,0,60,0,163,0,239,0,182,0,139,0,12,0,0,0,244,0,236,0,0,0,110,0,173,0,253,0,132,0,57,0,130,0,88,0,194,0,0,0,103,0,69,0,0,0,32,0,0,0,177,0,0,0,32,0,182,0,0,0,201,0,0,0,17,0,160,0,86,0,239,0,156,0,224,0,197,0,79,0,251,0,246,0,0,0,255,0,192,0,206,0,0,0,217,0,202,0,78,0,0,0,172,0,30,0,0,0,111,0,0,0,13,0,0,0,0,0,13,0,0,0,0,0,45,0,0,0,68,0,0,0,204,0,194,0,241,0,160,0,243,0,115,0,167,0,0,0,166,0,156,0,106,0,107,0,105,0,79,0,88,0,239,0,200,0,142,0,0,0,207,0,41,0,164,0,56,0,62,0,0,0,115,0,248,0,120,0,0,0,167,0,0,0,239,0,204,0,213,0,136,0,0,0,109,0,0,0,0,0,197,0,188,0,0,0,0,0,254,0,0,0,75,0,225,0,0,0,156,0,146,0,0,0,73,0,64,0,89,0,144,0,214,0,0,0,92,0,210,0,0,0,136,0,125,0,0,0,75,0,148,0,187,0,0,0,242,0,99,0,116,0,36,0,28,0,181,0,100,0,241,0,154,0,208,0,75,0,197,0,60,0,160,0,238,0,153,0,0,0,217,0,197,0,30,0,221,0,0,0,250,0,0,0,142,0,240,0,0,0,108,0,0,0,65,0,0,0,185,0,166,0,55,0,229,0,143,0,76,0,5,0,28,0,209,0,53,0,13,0,114,0,237,0,249,0,128,0,8,0,22,0,131,0,118,0,23,0,92,0,213,0,94,0,0,0,111,0,102,0,86,0,109,0,0,0,132,0,217,0,202,0,41,0,45,0,122,0,248,0,246,0,216,0,104,0,163,0,0,0,0,0,59,0,0,0,84,0,247,0,157,0,250,0,13,0,0,0,100,0,167,0,0,0,0,0,64,0,175,0,61,0,16,0,0,0,0,0,67,0,209,0,52,0,30,0,99,0,142,0,204,0,0,0,135,0,151,0);
signal scenario_full  : scenario_type := (244,31,42,31,180,31,79,31,21,31,64,31,64,30,85,31,117,31,117,30,165,31,139,31,125,31,140,31,145,31,12,31,119,31,184,31,116,31,125,31,46,31,55,31,50,31,154,31,195,31,165,31,165,30,165,29,53,31,53,31,149,31,179,31,65,31,109,31,25,31,25,30,131,31,131,30,167,31,195,31,154,31,231,31,1,31,9,31,9,30,31,31,80,31,32,31,39,31,217,31,124,31,124,30,124,29,124,28,223,31,223,30,189,31,181,31,129,31,140,31,25,31,248,31,162,31,162,30,107,31,28,31,28,30,28,29,28,28,125,31,125,30,18,31,143,31,143,30,197,31,47,31,10,31,214,31,160,31,160,30,217,31,14,31,19,31,93,31,159,31,149,31,54,31,36,31,107,31,176,31,214,31,5,31,82,31,79,31,79,30,170,31,48,31,55,31,55,30,242,31,105,31,105,30,105,29,2,31,137,31,137,30,137,29,137,28,152,31,235,31,189,31,173,31,173,30,241,31,53,31,53,30,53,29,142,31,21,31,237,31,34,31,72,31,19,31,148,31,148,30,240,31,82,31,82,30,252,31,141,31,240,31,240,30,190,31,190,30,190,29,34,31,191,31,165,31,135,31,145,31,145,30,105,31,16,31,101,31,42,31,199,31,131,31,178,31,178,30,178,29,11,31,232,31,241,31,237,31,167,31,5,31,101,31,196,31,28,31,28,30,185,31,101,31,197,31,193,31,207,31,202,31,116,31,175,31,108,31,118,31,118,30,174,31,134,31,23,31,142,31,157,31,230,31,252,31,252,30,59,31,216,31,238,31,138,31,142,31,83,31,42,31,42,30,42,29,168,31,220,31,87,31,224,31,224,30,15,31,15,30,105,31,232,31,34,31,34,30,251,31,43,31,156,31,23,31,155,31,239,31,121,31,87,31,87,30,66,31,67,31,215,31,215,30,133,31,125,31,201,31,201,30,81,31,144,31,156,31,209,31,209,30,2,31,129,31,220,31,220,30,18,31,45,31,15,31,66,31,66,30,153,31,1,31,244,31,4,31,238,31,203,31,244,31,127,31,133,31,8,31,152,31,60,31,101,31,101,30,53,31,78,31,108,31,113,31,38,31,184,31,184,30,14,31,105,31,98,31,98,30,84,31,134,31,134,30,48,31,137,31,143,31,53,31,72,31,72,30,36,31,198,31,198,30,198,29,136,31,5,31,98,31,198,31,112,31,112,30,144,31,162,31,41,31,95,31,128,31,172,31,79,31,232,31,107,31,178,31,207,31,145,31,145,30,74,31,243,31,48,31,106,31,132,31,246,31,246,30,246,29,29,31,178,31,178,30,178,29,178,28,55,31,86,31,171,31,20,31,24,31,151,31,200,31,92,31,156,31,92,31,128,31,144,31,89,31,228,31,196,31,213,31,106,31,200,31,60,31,139,31,90,31,252,31,252,30,252,29,252,28,252,27,231,31,231,30,46,31,22,31,22,30,22,29,204,31,26,31,26,30,141,31,141,30,156,31,150,31,3,31,192,31,204,31,49,31,45,31,28,31,98,31,98,30,98,29,181,31,181,30,73,31,31,31,31,30,198,31,183,31,134,31,92,31,43,31,219,31,219,30,111,31,187,31,187,30,204,31,204,30,97,31,236,31,203,31,68,31,127,31,185,31,70,31,181,31,29,31,206,31,27,31,27,30,202,31,39,31,39,30,42,31,127,31,15,31,15,30,161,31,72,31,43,31,129,31,5,31,119,31,27,31,110,31,72,31,26,31,26,30,124,31,17,31,11,31,11,30,110,31,48,31,6,31,97,31,233,31,23,31,215,31,181,31,54,31,222,31,152,31,73,31,210,31,235,31,64,31,197,31,46,31,113,31,186,31,42,31,42,30,166,31,179,31,19,31,224,31,169,31,248,31,60,31,60,30,60,29,42,31,32,31,99,31,29,31,38,31,211,31,226,31,226,30,79,31,177,31,177,30,177,29,177,28,244,31,217,31,245,31,233,31,92,31,13,31,56,31,216,31,89,31,44,31,44,30,191,31,183,31,183,30,67,31,175,31,157,31,93,31,191,31,238,31,41,31,70,31,58,31,58,30,128,31,201,31,201,30,215,31,50,31,106,31,173,31,4,31,139,31,50,31,177,31,178,31,178,30,134,31,237,31,143,31,243,31,144,31,144,30,147,31,129,31,60,31,60,30,68,31,36,31,104,31,104,30,109,31,237,31,155,31,155,30,175,31,242,31,55,31,180,31,116,31,251,31,185,31,60,31,163,31,239,31,182,31,139,31,12,31,12,30,244,31,236,31,236,30,110,31,173,31,253,31,132,31,57,31,130,31,88,31,194,31,194,30,103,31,69,31,69,30,32,31,32,30,177,31,177,30,32,31,182,31,182,30,201,31,201,30,17,31,160,31,86,31,239,31,156,31,224,31,197,31,79,31,251,31,246,31,246,30,255,31,192,31,206,31,206,30,217,31,202,31,78,31,78,30,172,31,30,31,30,30,111,31,111,30,13,31,13,30,13,29,13,31,13,30,13,29,45,31,45,30,68,31,68,30,204,31,194,31,241,31,160,31,243,31,115,31,167,31,167,30,166,31,156,31,106,31,107,31,105,31,79,31,88,31,239,31,200,31,142,31,142,30,207,31,41,31,164,31,56,31,62,31,62,30,115,31,248,31,120,31,120,30,167,31,167,30,239,31,204,31,213,31,136,31,136,30,109,31,109,30,109,29,197,31,188,31,188,30,188,29,254,31,254,30,75,31,225,31,225,30,156,31,146,31,146,30,73,31,64,31,89,31,144,31,214,31,214,30,92,31,210,31,210,30,136,31,125,31,125,30,75,31,148,31,187,31,187,30,242,31,99,31,116,31,36,31,28,31,181,31,100,31,241,31,154,31,208,31,75,31,197,31,60,31,160,31,238,31,153,31,153,30,217,31,197,31,30,31,221,31,221,30,250,31,250,30,142,31,240,31,240,30,108,31,108,30,65,31,65,30,185,31,166,31,55,31,229,31,143,31,76,31,5,31,28,31,209,31,53,31,13,31,114,31,237,31,249,31,128,31,8,31,22,31,131,31,118,31,23,31,92,31,213,31,94,31,94,30,111,31,102,31,86,31,109,31,109,30,132,31,217,31,202,31,41,31,45,31,122,31,248,31,246,31,216,31,104,31,163,31,163,30,163,29,59,31,59,30,84,31,247,31,157,31,250,31,13,31,13,30,100,31,167,31,167,30,167,29,64,31,175,31,61,31,16,31,16,30,16,29,67,31,209,31,52,31,30,31,99,31,142,31,204,31,204,30,135,31,151,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
