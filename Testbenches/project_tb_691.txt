-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 478;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (219,0,180,0,196,0,39,0,0,0,120,0,210,0,7,0,15,0,0,0,62,0,193,0,236,0,242,0,88,0,79,0,93,0,125,0,7,0,0,0,0,0,91,0,0,0,115,0,12,0,173,0,83,0,7,0,141,0,249,0,0,0,0,0,103,0,201,0,110,0,254,0,0,0,0,0,163,0,155,0,221,0,225,0,144,0,126,0,101,0,158,0,119,0,18,0,184,0,162,0,182,0,48,0,92,0,0,0,60,0,29,0,114,0,0,0,246,0,0,0,30,0,230,0,88,0,19,0,249,0,195,0,0,0,126,0,60,0,201,0,158,0,59,0,169,0,18,0,59,0,242,0,140,0,55,0,27,0,63,0,80,0,0,0,0,0,25,0,16,0,163,0,252,0,0,0,162,0,208,0,249,0,224,0,226,0,229,0,49,0,206,0,138,0,103,0,158,0,0,0,0,0,163,0,202,0,48,0,121,0,0,0,97,0,200,0,0,0,252,0,0,0,155,0,118,0,207,0,0,0,101,0,112,0,0,0,0,0,210,0,60,0,0,0,22,0,198,0,191,0,240,0,176,0,0,0,107,0,214,0,71,0,0,0,10,0,192,0,41,0,103,0,176,0,0,0,9,0,0,0,185,0,213,0,171,0,145,0,140,0,0,0,226,0,0,0,145,0,197,0,136,0,42,0,27,0,126,0,241,0,50,0,207,0,92,0,150,0,157,0,67,0,36,0,51,0,0,0,63,0,0,0,0,0,0,0,147,0,169,0,156,0,35,0,97,0,211,0,177,0,118,0,186,0,87,0,104,0,47,0,57,0,155,0,95,0,93,0,117,0,209,0,0,0,118,0,177,0,21,0,110,0,0,0,91,0,122,0,51,0,242,0,242,0,183,0,0,0,81,0,132,0,220,0,74,0,165,0,93,0,202,0,230,0,255,0,140,0,63,0,124,0,0,0,49,0,172,0,25,0,152,0,0,0,130,0,57,0,0,0,161,0,151,0,254,0,228,0,34,0,245,0,74,0,0,0,96,0,185,0,15,0,20,0,40,0,111,0,48,0,0,0,32,0,131,0,0,0,0,0,243,0,229,0,18,0,110,0,151,0,11,0,61,0,0,0,83,0,210,0,0,0,0,0,200,0,0,0,164,0,225,0,90,0,59,0,26,0,91,0,198,0,115,0,98,0,0,0,130,0,209,0,131,0,220,0,173,0,217,0,0,0,99,0,194,0,147,0,83,0,66,0,0,0,0,0,164,0,181,0,171,0,229,0,69,0,211,0,215,0,0,0,0,0,115,0,31,0,0,0,18,0,53,0,4,0,208,0,0,0,9,0,154,0,0,0,249,0,44,0,92,0,49,0,133,0,181,0,212,0,0,0,213,0,0,0,85,0,161,0,0,0,175,0,12,0,53,0,231,0,199,0,105,0,135,0,1,0,108,0,8,0,0,0,29,0,0,0,149,0,196,0,108,0,54,0,138,0,179,0,204,0,136,0,203,0,118,0,54,0,91,0,250,0,127,0,142,0,0,0,97,0,0,0,49,0,131,0,238,0,100,0,208,0,210,0,51,0,119,0,0,0,143,0,205,0,86,0,52,0,243,0,0,0,4,0,137,0,192,0,234,0,8,0,150,0,16,0,225,0,15,0,24,0,0,0,14,0,201,0,104,0,101,0,123,0,96,0,137,0,153,0,0,0,196,0,61,0,110,0,91,0,9,0,246,0,216,0,83,0,100,0,211,0,34,0,0,0,0,0,88,0,189,0,129,0,244,0,156,0,162,0,85,0,0,0,0,0,0,0,58,0,156,0,0,0,23,0,94,0,0,0,124,0,228,0,162,0,113,0,170,0,0,0,188,0,205,0,0,0,0,0,216,0,0,0,251,0,0,0,250,0,21,0,63,0,0,0,212,0,112,0,0,0,156,0,96,0,0,0,88,0,0,0,136,0,0,0,0,0,240,0,232,0,0,0,21,0,252,0,10,0,103,0,77,0,0,0,156,0,25,0,0,0,0,0,194,0,174,0,118,0,187,0,0,0,172,0,238,0,219,0,4,0,133,0,101,0,140,0,253,0,239,0,119,0,133,0,149,0,163,0,0,0,54,0,146,0,75,0,58,0,0,0,234,0,233,0,126,0,210,0,217,0,0,0);
signal scenario_full  : scenario_type := (219,31,180,31,196,31,39,31,39,30,120,31,210,31,7,31,15,31,15,30,62,31,193,31,236,31,242,31,88,31,79,31,93,31,125,31,7,31,7,30,7,29,91,31,91,30,115,31,12,31,173,31,83,31,7,31,141,31,249,31,249,30,249,29,103,31,201,31,110,31,254,31,254,30,254,29,163,31,155,31,221,31,225,31,144,31,126,31,101,31,158,31,119,31,18,31,184,31,162,31,182,31,48,31,92,31,92,30,60,31,29,31,114,31,114,30,246,31,246,30,30,31,230,31,88,31,19,31,249,31,195,31,195,30,126,31,60,31,201,31,158,31,59,31,169,31,18,31,59,31,242,31,140,31,55,31,27,31,63,31,80,31,80,30,80,29,25,31,16,31,163,31,252,31,252,30,162,31,208,31,249,31,224,31,226,31,229,31,49,31,206,31,138,31,103,31,158,31,158,30,158,29,163,31,202,31,48,31,121,31,121,30,97,31,200,31,200,30,252,31,252,30,155,31,118,31,207,31,207,30,101,31,112,31,112,30,112,29,210,31,60,31,60,30,22,31,198,31,191,31,240,31,176,31,176,30,107,31,214,31,71,31,71,30,10,31,192,31,41,31,103,31,176,31,176,30,9,31,9,30,185,31,213,31,171,31,145,31,140,31,140,30,226,31,226,30,145,31,197,31,136,31,42,31,27,31,126,31,241,31,50,31,207,31,92,31,150,31,157,31,67,31,36,31,51,31,51,30,63,31,63,30,63,29,63,28,147,31,169,31,156,31,35,31,97,31,211,31,177,31,118,31,186,31,87,31,104,31,47,31,57,31,155,31,95,31,93,31,117,31,209,31,209,30,118,31,177,31,21,31,110,31,110,30,91,31,122,31,51,31,242,31,242,31,183,31,183,30,81,31,132,31,220,31,74,31,165,31,93,31,202,31,230,31,255,31,140,31,63,31,124,31,124,30,49,31,172,31,25,31,152,31,152,30,130,31,57,31,57,30,161,31,151,31,254,31,228,31,34,31,245,31,74,31,74,30,96,31,185,31,15,31,20,31,40,31,111,31,48,31,48,30,32,31,131,31,131,30,131,29,243,31,229,31,18,31,110,31,151,31,11,31,61,31,61,30,83,31,210,31,210,30,210,29,200,31,200,30,164,31,225,31,90,31,59,31,26,31,91,31,198,31,115,31,98,31,98,30,130,31,209,31,131,31,220,31,173,31,217,31,217,30,99,31,194,31,147,31,83,31,66,31,66,30,66,29,164,31,181,31,171,31,229,31,69,31,211,31,215,31,215,30,215,29,115,31,31,31,31,30,18,31,53,31,4,31,208,31,208,30,9,31,154,31,154,30,249,31,44,31,92,31,49,31,133,31,181,31,212,31,212,30,213,31,213,30,85,31,161,31,161,30,175,31,12,31,53,31,231,31,199,31,105,31,135,31,1,31,108,31,8,31,8,30,29,31,29,30,149,31,196,31,108,31,54,31,138,31,179,31,204,31,136,31,203,31,118,31,54,31,91,31,250,31,127,31,142,31,142,30,97,31,97,30,49,31,131,31,238,31,100,31,208,31,210,31,51,31,119,31,119,30,143,31,205,31,86,31,52,31,243,31,243,30,4,31,137,31,192,31,234,31,8,31,150,31,16,31,225,31,15,31,24,31,24,30,14,31,201,31,104,31,101,31,123,31,96,31,137,31,153,31,153,30,196,31,61,31,110,31,91,31,9,31,246,31,216,31,83,31,100,31,211,31,34,31,34,30,34,29,88,31,189,31,129,31,244,31,156,31,162,31,85,31,85,30,85,29,85,28,58,31,156,31,156,30,23,31,94,31,94,30,124,31,228,31,162,31,113,31,170,31,170,30,188,31,205,31,205,30,205,29,216,31,216,30,251,31,251,30,250,31,21,31,63,31,63,30,212,31,112,31,112,30,156,31,96,31,96,30,88,31,88,30,136,31,136,30,136,29,240,31,232,31,232,30,21,31,252,31,10,31,103,31,77,31,77,30,156,31,25,31,25,30,25,29,194,31,174,31,118,31,187,31,187,30,172,31,238,31,219,31,4,31,133,31,101,31,140,31,253,31,239,31,119,31,133,31,149,31,163,31,163,30,54,31,146,31,75,31,58,31,58,30,234,31,233,31,126,31,210,31,217,31,217,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
