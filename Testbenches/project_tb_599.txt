-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 711;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (160,0,129,0,206,0,229,0,25,0,19,0,237,0,240,0,88,0,179,0,119,0,193,0,104,0,93,0,173,0,181,0,0,0,181,0,171,0,174,0,209,0,57,0,182,0,191,0,0,0,112,0,128,0,216,0,209,0,170,0,0,0,0,0,0,0,0,0,0,0,228,0,224,0,0,0,0,0,97,0,0,0,0,0,69,0,89,0,105,0,217,0,102,0,225,0,227,0,147,0,221,0,105,0,222,0,171,0,118,0,0,0,75,0,0,0,158,0,163,0,53,0,14,0,2,0,252,0,0,0,102,0,0,0,43,0,205,0,5,0,0,0,0,0,180,0,0,0,207,0,211,0,0,0,123,0,210,0,36,0,0,0,205,0,112,0,102,0,109,0,188,0,37,0,65,0,51,0,231,0,237,0,214,0,128,0,61,0,0,0,33,0,159,0,0,0,194,0,0,0,131,0,229,0,95,0,161,0,168,0,0,0,157,0,85,0,112,0,0,0,0,0,10,0,204,0,150,0,0,0,200,0,5,0,0,0,227,0,91,0,231,0,149,0,0,0,0,0,13,0,228,0,97,0,45,0,145,0,162,0,156,0,184,0,0,0,245,0,161,0,0,0,201,0,166,0,221,0,90,0,31,0,103,0,133,0,50,0,240,0,255,0,26,0,0,0,189,0,144,0,98,0,80,0,17,0,64,0,100,0,75,0,16,0,179,0,152,0,196,0,46,0,94,0,103,0,201,0,0,0,188,0,81,0,109,0,117,0,112,0,128,0,254,0,49,0,219,0,231,0,227,0,145,0,13,0,223,0,85,0,250,0,220,0,100,0,92,0,205,0,105,0,42,0,116,0,207,0,113,0,160,0,0,0,24,0,29,0,149,0,83,0,124,0,36,0,210,0,154,0,191,0,25,0,32,0,113,0,0,0,0,0,0,0,71,0,201,0,37,0,44,0,161,0,92,0,6,0,74,0,65,0,168,0,0,0,190,0,66,0,252,0,252,0,214,0,61,0,54,0,0,0,232,0,156,0,128,0,7,0,159,0,0,0,150,0,0,0,62,0,124,0,108,0,0,0,90,0,56,0,93,0,11,0,141,0,14,0,25,0,0,0,120,0,31,0,104,0,89,0,0,0,35,0,166,0,0,0,0,0,220,0,0,0,0,0,27,0,0,0,141,0,21,0,81,0,0,0,19,0,218,0,255,0,0,0,132,0,77,0,153,0,141,0,127,0,0,0,113,0,244,0,0,0,133,0,2,0,242,0,118,0,203,0,241,0,147,0,181,0,134,0,163,0,234,0,208,0,121,0,148,0,23,0,177,0,0,0,106,0,7,0,85,0,0,0,143,0,72,0,112,0,195,0,42,0,172,0,227,0,166,0,0,0,54,0,4,0,144,0,54,0,57,0,98,0,103,0,160,0,0,0,9,0,56,0,0,0,254,0,248,0,56,0,108,0,131,0,0,0,173,0,85,0,0,0,123,0,0,0,0,0,29,0,0,0,160,0,19,0,226,0,23,0,170,0,178,0,0,0,0,0,124,0,133,0,0,0,27,0,28,0,41,0,20,0,0,0,205,0,0,0,157,0,187,0,0,0,61,0,0,0,87,0,57,0,137,0,196,0,125,0,30,0,35,0,137,0,0,0,75,0,0,0,189,0,68,0,76,0,6,0,31,0,96,0,56,0,1,0,73,0,0,0,244,0,62,0,143,0,0,0,0,0,100,0,98,0,174,0,252,0,137,0,0,0,0,0,161,0,126,0,0,0,149,0,0,0,172,0,69,0,63,0,253,0,218,0,159,0,234,0,206,0,0,0,0,0,86,0,130,0,73,0,175,0,180,0,0,0,199,0,122,0,186,0,90,0,0,0,0,0,223,0,140,0,147,0,250,0,0,0,118,0,0,0,53,0,3,0,112,0,0,0,0,0,8,0,0,0,22,0,51,0,180,0,137,0,110,0,224,0,253,0,168,0,3,0,0,0,128,0,130,0,252,0,191,0,59,0,242,0,171,0,224,0,154,0,0,0,20,0,254,0,0,0,108,0,206,0,0,0,228,0,221,0,17,0,248,0,0,0,77,0,170,0,204,0,0,0,252,0,42,0,39,0,154,0,173,0,185,0,0,0,1,0,237,0,220,0,26,0,0,0,0,0,135,0,34,0,1,0,0,0,40,0,6,0,34,0,138,0,29,0,0,0,206,0,88,0,56,0,55,0,19,0,70,0,41,0,21,0,190,0,101,0,200,0,0,0,0,0,230,0,233,0,0,0,229,0,249,0,0,0,0,0,0,0,17,0,237,0,43,0,0,0,0,0,0,0,19,0,139,0,0,0,65,0,109,0,111,0,141,0,186,0,209,0,74,0,171,0,137,0,0,0,0,0,0,0,159,0,21,0,109,0,122,0,49,0,177,0,0,0,24,0,211,0,128,0,152,0,142,0,101,0,61,0,19,0,22,0,164,0,108,0,23,0,86,0,254,0,25,0,156,0,0,0,80,0,64,0,0,0,0,0,0,0,147,0,95,0,68,0,0,0,119,0,9,0,61,0,219,0,136,0,192,0,74,0,187,0,138,0,0,0,17,0,179,0,19,0,0,0,4,0,77,0,13,0,77,0,0,0,79,0,38,0,12,0,10,0,71,0,0,0,98,0,86,0,109,0,163,0,0,0,8,0,0,0,0,0,233,0,19,0,0,0,109,0,222,0,0,0,91,0,123,0,6,0,24,0,103,0,170,0,41,0,169,0,126,0,54,0,0,0,14,0,79,0,36,0,100,0,0,0,79,0,174,0,15,0,10,0,146,0,49,0,3,0,221,0,172,0,98,0,47,0,4,0,2,0,25,0,40,0,254,0,0,0,0,0,227,0,0,0,48,0,36,0,223,0,147,0,161,0,171,0,67,0,119,0,145,0,63,0,132,0,132,0,197,0,238,0,0,0,252,0,163,0,88,0,38,0,212,0,90,0,209,0,247,0,96,0,150,0,99,0,159,0,245,0,2,0,0,0,178,0,130,0,66,0,208,0,76,0,112,0,69,0,19,0,192,0,23,0,21,0,122,0,20,0,30,0,211,0,53,0,0,0,168,0,48,0,190,0,34,0,68,0,141,0,197,0,96,0,0,0,233,0,108,0,0,0,126,0,144,0,208,0,113,0,88,0,186,0,8,0,231,0,65,0,219,0,182,0,60,0,71,0,223,0);
signal scenario_full  : scenario_type := (160,31,129,31,206,31,229,31,25,31,19,31,237,31,240,31,88,31,179,31,119,31,193,31,104,31,93,31,173,31,181,31,181,30,181,31,171,31,174,31,209,31,57,31,182,31,191,31,191,30,112,31,128,31,216,31,209,31,170,31,170,30,170,29,170,28,170,27,170,26,228,31,224,31,224,30,224,29,97,31,97,30,97,29,69,31,89,31,105,31,217,31,102,31,225,31,227,31,147,31,221,31,105,31,222,31,171,31,118,31,118,30,75,31,75,30,158,31,163,31,53,31,14,31,2,31,252,31,252,30,102,31,102,30,43,31,205,31,5,31,5,30,5,29,180,31,180,30,207,31,211,31,211,30,123,31,210,31,36,31,36,30,205,31,112,31,102,31,109,31,188,31,37,31,65,31,51,31,231,31,237,31,214,31,128,31,61,31,61,30,33,31,159,31,159,30,194,31,194,30,131,31,229,31,95,31,161,31,168,31,168,30,157,31,85,31,112,31,112,30,112,29,10,31,204,31,150,31,150,30,200,31,5,31,5,30,227,31,91,31,231,31,149,31,149,30,149,29,13,31,228,31,97,31,45,31,145,31,162,31,156,31,184,31,184,30,245,31,161,31,161,30,201,31,166,31,221,31,90,31,31,31,103,31,133,31,50,31,240,31,255,31,26,31,26,30,189,31,144,31,98,31,80,31,17,31,64,31,100,31,75,31,16,31,179,31,152,31,196,31,46,31,94,31,103,31,201,31,201,30,188,31,81,31,109,31,117,31,112,31,128,31,254,31,49,31,219,31,231,31,227,31,145,31,13,31,223,31,85,31,250,31,220,31,100,31,92,31,205,31,105,31,42,31,116,31,207,31,113,31,160,31,160,30,24,31,29,31,149,31,83,31,124,31,36,31,210,31,154,31,191,31,25,31,32,31,113,31,113,30,113,29,113,28,71,31,201,31,37,31,44,31,161,31,92,31,6,31,74,31,65,31,168,31,168,30,190,31,66,31,252,31,252,31,214,31,61,31,54,31,54,30,232,31,156,31,128,31,7,31,159,31,159,30,150,31,150,30,62,31,124,31,108,31,108,30,90,31,56,31,93,31,11,31,141,31,14,31,25,31,25,30,120,31,31,31,104,31,89,31,89,30,35,31,166,31,166,30,166,29,220,31,220,30,220,29,27,31,27,30,141,31,21,31,81,31,81,30,19,31,218,31,255,31,255,30,132,31,77,31,153,31,141,31,127,31,127,30,113,31,244,31,244,30,133,31,2,31,242,31,118,31,203,31,241,31,147,31,181,31,134,31,163,31,234,31,208,31,121,31,148,31,23,31,177,31,177,30,106,31,7,31,85,31,85,30,143,31,72,31,112,31,195,31,42,31,172,31,227,31,166,31,166,30,54,31,4,31,144,31,54,31,57,31,98,31,103,31,160,31,160,30,9,31,56,31,56,30,254,31,248,31,56,31,108,31,131,31,131,30,173,31,85,31,85,30,123,31,123,30,123,29,29,31,29,30,160,31,19,31,226,31,23,31,170,31,178,31,178,30,178,29,124,31,133,31,133,30,27,31,28,31,41,31,20,31,20,30,205,31,205,30,157,31,187,31,187,30,61,31,61,30,87,31,57,31,137,31,196,31,125,31,30,31,35,31,137,31,137,30,75,31,75,30,189,31,68,31,76,31,6,31,31,31,96,31,56,31,1,31,73,31,73,30,244,31,62,31,143,31,143,30,143,29,100,31,98,31,174,31,252,31,137,31,137,30,137,29,161,31,126,31,126,30,149,31,149,30,172,31,69,31,63,31,253,31,218,31,159,31,234,31,206,31,206,30,206,29,86,31,130,31,73,31,175,31,180,31,180,30,199,31,122,31,186,31,90,31,90,30,90,29,223,31,140,31,147,31,250,31,250,30,118,31,118,30,53,31,3,31,112,31,112,30,112,29,8,31,8,30,22,31,51,31,180,31,137,31,110,31,224,31,253,31,168,31,3,31,3,30,128,31,130,31,252,31,191,31,59,31,242,31,171,31,224,31,154,31,154,30,20,31,254,31,254,30,108,31,206,31,206,30,228,31,221,31,17,31,248,31,248,30,77,31,170,31,204,31,204,30,252,31,42,31,39,31,154,31,173,31,185,31,185,30,1,31,237,31,220,31,26,31,26,30,26,29,135,31,34,31,1,31,1,30,40,31,6,31,34,31,138,31,29,31,29,30,206,31,88,31,56,31,55,31,19,31,70,31,41,31,21,31,190,31,101,31,200,31,200,30,200,29,230,31,233,31,233,30,229,31,249,31,249,30,249,29,249,28,17,31,237,31,43,31,43,30,43,29,43,28,19,31,139,31,139,30,65,31,109,31,111,31,141,31,186,31,209,31,74,31,171,31,137,31,137,30,137,29,137,28,159,31,21,31,109,31,122,31,49,31,177,31,177,30,24,31,211,31,128,31,152,31,142,31,101,31,61,31,19,31,22,31,164,31,108,31,23,31,86,31,254,31,25,31,156,31,156,30,80,31,64,31,64,30,64,29,64,28,147,31,95,31,68,31,68,30,119,31,9,31,61,31,219,31,136,31,192,31,74,31,187,31,138,31,138,30,17,31,179,31,19,31,19,30,4,31,77,31,13,31,77,31,77,30,79,31,38,31,12,31,10,31,71,31,71,30,98,31,86,31,109,31,163,31,163,30,8,31,8,30,8,29,233,31,19,31,19,30,109,31,222,31,222,30,91,31,123,31,6,31,24,31,103,31,170,31,41,31,169,31,126,31,54,31,54,30,14,31,79,31,36,31,100,31,100,30,79,31,174,31,15,31,10,31,146,31,49,31,3,31,221,31,172,31,98,31,47,31,4,31,2,31,25,31,40,31,254,31,254,30,254,29,227,31,227,30,48,31,36,31,223,31,147,31,161,31,171,31,67,31,119,31,145,31,63,31,132,31,132,31,197,31,238,31,238,30,252,31,163,31,88,31,38,31,212,31,90,31,209,31,247,31,96,31,150,31,99,31,159,31,245,31,2,31,2,30,178,31,130,31,66,31,208,31,76,31,112,31,69,31,19,31,192,31,23,31,21,31,122,31,20,31,30,31,211,31,53,31,53,30,168,31,48,31,190,31,34,31,68,31,141,31,197,31,96,31,96,30,233,31,108,31,108,30,126,31,144,31,208,31,113,31,88,31,186,31,8,31,231,31,65,31,219,31,182,31,60,31,71,31,223,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
