-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 994;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,0,0,148,0,0,0,109,0,108,0,0,0,24,0,12,0,20,0,103,0,0,0,0,0,4,0,215,0,196,0,0,0,180,0,120,0,150,0,70,0,154,0,134,0,0,0,215,0,15,0,0,0,179,0,29,0,38,0,67,0,0,0,188,0,190,0,0,0,0,0,113,0,6,0,206,0,208,0,159,0,22,0,204,0,208,0,0,0,0,0,246,0,44,0,220,0,194,0,34,0,255,0,159,0,136,0,162,0,13,0,0,0,201,0,131,0,19,0,114,0,45,0,245,0,0,0,40,0,72,0,19,0,234,0,0,0,127,0,44,0,33,0,190,0,30,0,46,0,96,0,156,0,186,0,0,0,219,0,242,0,63,0,127,0,0,0,55,0,0,0,0,0,2,0,91,0,52,0,0,0,166,0,253,0,8,0,204,0,9,0,235,0,202,0,0,0,0,0,0,0,101,0,130,0,194,0,98,0,111,0,11,0,195,0,147,0,25,0,111,0,51,0,0,0,41,0,50,0,224,0,35,0,0,0,196,0,0,0,115,0,0,0,203,0,67,0,55,0,98,0,109,0,91,0,161,0,126,0,189,0,223,0,253,0,61,0,138,0,134,0,243,0,0,0,198,0,245,0,237,0,131,0,54,0,229,0,192,0,0,0,0,0,110,0,122,0,32,0,108,0,0,0,239,0,137,0,198,0,0,0,0,0,3,0,120,0,13,0,102,0,254,0,166,0,0,0,0,0,168,0,0,0,111,0,126,0,7,0,158,0,80,0,194,0,11,0,6,0,111,0,0,0,0,0,79,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,190,0,119,0,199,0,53,0,61,0,0,0,228,0,0,0,77,0,245,0,81,0,130,0,39,0,65,0,150,0,214,0,214,0,151,0,167,0,200,0,8,0,237,0,30,0,227,0,158,0,145,0,97,0,64,0,145,0,247,0,197,0,7,0,0,0,227,0,179,0,85,0,254,0,95,0,95,0,64,0,0,0,8,0,0,0,185,0,8,0,41,0,19,0,63,0,133,0,0,0,104,0,243,0,125,0,214,0,161,0,93,0,72,0,18,0,24,0,47,0,0,0,0,0,186,0,26,0,254,0,219,0,240,0,0,0,68,0,154,0,93,0,0,0,176,0,110,0,54,0,251,0,0,0,62,0,127,0,99,0,18,0,72,0,47,0,119,0,0,0,203,0,197,0,151,0,218,0,47,0,113,0,23,0,0,0,205,0,242,0,0,0,0,0,125,0,210,0,98,0,21,0,216,0,0,0,235,0,246,0,241,0,0,0,208,0,0,0,73,0,40,0,76,0,185,0,84,0,52,0,227,0,0,0,116,0,60,0,226,0,0,0,18,0,165,0,206,0,18,0,239,0,205,0,0,0,1,0,54,0,186,0,143,0,213,0,165,0,41,0,120,0,24,0,150,0,154,0,102,0,225,0,58,0,133,0,0,0,252,0,17,0,255,0,115,0,212,0,48,0,73,0,21,0,182,0,197,0,0,0,0,0,75,0,135,0,0,0,0,0,0,0,101,0,246,0,164,0,17,0,19,0,10,0,115,0,110,0,208,0,148,0,223,0,139,0,0,0,147,0,164,0,228,0,196,0,92,0,82,0,0,0,50,0,180,0,76,0,66,0,64,0,241,0,0,0,0,0,0,0,164,0,38,0,202,0,177,0,41,0,162,0,136,0,65,0,91,0,208,0,66,0,87,0,217,0,254,0,37,0,170,0,0,0,230,0,243,0,224,0,186,0,0,0,64,0,154,0,215,0,125,0,184,0,246,0,12,0,40,0,0,0,218,0,107,0,0,0,191,0,128,0,161,0,71,0,0,0,152,0,48,0,199,0,126,0,252,0,132,0,12,0,121,0,0,0,204,0,185,0,9,0,2,0,158,0,0,0,17,0,0,0,16,0,58,0,22,0,152,0,0,0,13,0,150,0,45,0,0,0,151,0,0,0,6,0,100,0,61,0,247,0,219,0,81,0,92,0,201,0,208,0,237,0,0,0,0,0,41,0,76,0,43,0,245,0,75,0,0,0,21,0,0,0,252,0,217,0,47,0,87,0,0,0,0,0,142,0,115,0,56,0,211,0,212,0,106,0,26,0,0,0,69,0,80,0,191,0,0,0,32,0,0,0,162,0,119,0,2,0,59,0,0,0,75,0,0,0,250,0,0,0,0,0,0,0,81,0,170,0,0,0,93,0,0,0,171,0,57,0,201,0,38,0,0,0,11,0,164,0,33,0,77,0,170,0,0,0,21,0,192,0,93,0,0,0,9,0,187,0,133,0,0,0,219,0,199,0,225,0,0,0,220,0,186,0,34,0,0,0,90,0,136,0,0,0,245,0,0,0,200,0,19,0,15,0,134,0,87,0,106,0,237,0,14,0,40,0,235,0,230,0,157,0,158,0,91,0,248,0,85,0,142,0,0,0,0,0,89,0,34,0,144,0,70,0,36,0,0,0,0,0,211,0,174,0,143,0,85,0,118,0,139,0,79,0,208,0,242,0,182,0,38,0,0,0,82,0,105,0,91,0,0,0,179,0,0,0,255,0,127,0,0,0,0,0,84,0,224,0,0,0,42,0,0,0,34,0,138,0,0,0,0,0,33,0,182,0,221,0,243,0,69,0,36,0,229,0,251,0,1,0,251,0,71,0,0,0,0,0,188,0,0,0,0,0,0,0,189,0,0,0,211,0,0,0,94,0,54,0,6,0,1,0,111,0,93,0,73,0,200,0,92,0,135,0,20,0,225,0,82,0,59,0,151,0,152,0,193,0,124,0,77,0,107,0,203,0,226,0,172,0,27,0,24,0,4,0,233,0,118,0,166,0,209,0,221,0,182,0,168,0,6,0,32,0,0,0,238,0,138,0,97,0,219,0,222,0,107,0,223,0,104,0,205,0,182,0,0,0,33,0,168,0,226,0,38,0,113,0,156,0,0,0,132,0,34,0,30,0,113,0,246,0,187,0,161,0,25,0,72,0,0,0,211,0,199,0,0,0,177,0,24,0,107,0,0,0,5,0,242,0,35,0,76,0,159,0,137,0,0,0,16,0,51,0,248,0,17,0,248,0,143,0,62,0,76,0,221,0,113,0,171,0,119,0,85,0,0,0,0,0,50,0,27,0,55,0,8,0,110,0,25,0,0,0,231,0,30,0,86,0,29,0,0,0,0,0,20,0,0,0,116,0,80,0,204,0,254,0,37,0,154,0,243,0,8,0,7,0,153,0,33,0,80,0,0,0,112,0,43,0,234,0,182,0,110,0,5,0,238,0,130,0,0,0,2,0,0,0,58,0,142,0,0,0,152,0,79,0,221,0,54,0,4,0,0,0,192,0,226,0,23,0,159,0,0,0,0,0,0,0,83,0,0,0,0,0,153,0,67,0,0,0,159,0,111,0,218,0,46,0,14,0,0,0,93,0,116,0,218,0,22,0,160,0,99,0,111,0,0,0,242,0,27,0,102,0,0,0,0,0,224,0,175,0,247,0,89,0,126,0,0,0,180,0,129,0,146,0,153,0,131,0,158,0,235,0,32,0,201,0,91,0,0,0,251,0,59,0,0,0,0,0,182,0,204,0,201,0,193,0,198,0,74,0,218,0,199,0,69,0,158,0,33,0,154,0,206,0,235,0,231,0,196,0,255,0,217,0,148,0,88,0,145,0,229,0,165,0,21,0,0,0,27,0,246,0,234,0,226,0,20,0,32,0,81,0,58,0,12,0,140,0,0,0,128,0,0,0,38,0,61,0,86,0,106,0,38,0,144,0,139,0,6,0,225,0,10,0,118,0,75,0,221,0,0,0,112,0,201,0,182,0,0,0,0,0,156,0,129,0,102,0,154,0,74,0,17,0,190,0,137,0,204,0,0,0,62,0,100,0,163,0,160,0,156,0,238,0,99,0,195,0,0,0,14,0,115,0,22,0,0,0,167,0,88,0,55,0,117,0,82,0,246,0,11,0,170,0,9,0,31,0,68,0,0,0,224,0,142,0,73,0,225,0,155,0,134,0,0,0,72,0,6,0,0,0,0,0,57,0,78,0,168,0,123,0,51,0,248,0,83,0,71,0,166,0,238,0,196,0,33,0,150,0,0,0,228,0,0,0,160,0,124,0,44,0,115,0,0,0,225,0,248,0,0,0,15,0,235,0,87,0,170,0,44,0,252,0,62,0,16,0,196,0,153,0,36,0,116,0,252,0,50,0,199,0,0,0,165,0,228,0,217,0,11,0,189,0,23,0,96,0,145,0,20,0,45,0,237,0,160,0,197,0,229,0,0,0,0,0,131,0,165,0,97,0,35,0,76,0,0,0,116,0,97,0,237,0,111,0,10,0,228,0,135,0,50,0,58,0,77,0,40,0,161,0,168,0,176,0,127,0,213,0,0,0,40,0,33,0,168,0,249,0,118,0,147,0,0,0,234,0,214,0);
signal scenario_full  : scenario_type := (0,0,0,0,148,31,148,30,109,31,108,31,108,30,24,31,12,31,20,31,103,31,103,30,103,29,4,31,215,31,196,31,196,30,180,31,120,31,150,31,70,31,154,31,134,31,134,30,215,31,15,31,15,30,179,31,29,31,38,31,67,31,67,30,188,31,190,31,190,30,190,29,113,31,6,31,206,31,208,31,159,31,22,31,204,31,208,31,208,30,208,29,246,31,44,31,220,31,194,31,34,31,255,31,159,31,136,31,162,31,13,31,13,30,201,31,131,31,19,31,114,31,45,31,245,31,245,30,40,31,72,31,19,31,234,31,234,30,127,31,44,31,33,31,190,31,30,31,46,31,96,31,156,31,186,31,186,30,219,31,242,31,63,31,127,31,127,30,55,31,55,30,55,29,2,31,91,31,52,31,52,30,166,31,253,31,8,31,204,31,9,31,235,31,202,31,202,30,202,29,202,28,101,31,130,31,194,31,98,31,111,31,11,31,195,31,147,31,25,31,111,31,51,31,51,30,41,31,50,31,224,31,35,31,35,30,196,31,196,30,115,31,115,30,203,31,67,31,55,31,98,31,109,31,91,31,161,31,126,31,189,31,223,31,253,31,61,31,138,31,134,31,243,31,243,30,198,31,245,31,237,31,131,31,54,31,229,31,192,31,192,30,192,29,110,31,122,31,32,31,108,31,108,30,239,31,137,31,198,31,198,30,198,29,3,31,120,31,13,31,102,31,254,31,166,31,166,30,166,29,168,31,168,30,111,31,126,31,7,31,158,31,80,31,194,31,11,31,6,31,111,31,111,30,111,29,79,31,79,30,79,29,79,28,79,27,79,26,6,31,6,30,190,31,119,31,199,31,53,31,61,31,61,30,228,31,228,30,77,31,245,31,81,31,130,31,39,31,65,31,150,31,214,31,214,31,151,31,167,31,200,31,8,31,237,31,30,31,227,31,158,31,145,31,97,31,64,31,145,31,247,31,197,31,7,31,7,30,227,31,179,31,85,31,254,31,95,31,95,31,64,31,64,30,8,31,8,30,185,31,8,31,41,31,19,31,63,31,133,31,133,30,104,31,243,31,125,31,214,31,161,31,93,31,72,31,18,31,24,31,47,31,47,30,47,29,186,31,26,31,254,31,219,31,240,31,240,30,68,31,154,31,93,31,93,30,176,31,110,31,54,31,251,31,251,30,62,31,127,31,99,31,18,31,72,31,47,31,119,31,119,30,203,31,197,31,151,31,218,31,47,31,113,31,23,31,23,30,205,31,242,31,242,30,242,29,125,31,210,31,98,31,21,31,216,31,216,30,235,31,246,31,241,31,241,30,208,31,208,30,73,31,40,31,76,31,185,31,84,31,52,31,227,31,227,30,116,31,60,31,226,31,226,30,18,31,165,31,206,31,18,31,239,31,205,31,205,30,1,31,54,31,186,31,143,31,213,31,165,31,41,31,120,31,24,31,150,31,154,31,102,31,225,31,58,31,133,31,133,30,252,31,17,31,255,31,115,31,212,31,48,31,73,31,21,31,182,31,197,31,197,30,197,29,75,31,135,31,135,30,135,29,135,28,101,31,246,31,164,31,17,31,19,31,10,31,115,31,110,31,208,31,148,31,223,31,139,31,139,30,147,31,164,31,228,31,196,31,92,31,82,31,82,30,50,31,180,31,76,31,66,31,64,31,241,31,241,30,241,29,241,28,164,31,38,31,202,31,177,31,41,31,162,31,136,31,65,31,91,31,208,31,66,31,87,31,217,31,254,31,37,31,170,31,170,30,230,31,243,31,224,31,186,31,186,30,64,31,154,31,215,31,125,31,184,31,246,31,12,31,40,31,40,30,218,31,107,31,107,30,191,31,128,31,161,31,71,31,71,30,152,31,48,31,199,31,126,31,252,31,132,31,12,31,121,31,121,30,204,31,185,31,9,31,2,31,158,31,158,30,17,31,17,30,16,31,58,31,22,31,152,31,152,30,13,31,150,31,45,31,45,30,151,31,151,30,6,31,100,31,61,31,247,31,219,31,81,31,92,31,201,31,208,31,237,31,237,30,237,29,41,31,76,31,43,31,245,31,75,31,75,30,21,31,21,30,252,31,217,31,47,31,87,31,87,30,87,29,142,31,115,31,56,31,211,31,212,31,106,31,26,31,26,30,69,31,80,31,191,31,191,30,32,31,32,30,162,31,119,31,2,31,59,31,59,30,75,31,75,30,250,31,250,30,250,29,250,28,81,31,170,31,170,30,93,31,93,30,171,31,57,31,201,31,38,31,38,30,11,31,164,31,33,31,77,31,170,31,170,30,21,31,192,31,93,31,93,30,9,31,187,31,133,31,133,30,219,31,199,31,225,31,225,30,220,31,186,31,34,31,34,30,90,31,136,31,136,30,245,31,245,30,200,31,19,31,15,31,134,31,87,31,106,31,237,31,14,31,40,31,235,31,230,31,157,31,158,31,91,31,248,31,85,31,142,31,142,30,142,29,89,31,34,31,144,31,70,31,36,31,36,30,36,29,211,31,174,31,143,31,85,31,118,31,139,31,79,31,208,31,242,31,182,31,38,31,38,30,82,31,105,31,91,31,91,30,179,31,179,30,255,31,127,31,127,30,127,29,84,31,224,31,224,30,42,31,42,30,34,31,138,31,138,30,138,29,33,31,182,31,221,31,243,31,69,31,36,31,229,31,251,31,1,31,251,31,71,31,71,30,71,29,188,31,188,30,188,29,188,28,189,31,189,30,211,31,211,30,94,31,54,31,6,31,1,31,111,31,93,31,73,31,200,31,92,31,135,31,20,31,225,31,82,31,59,31,151,31,152,31,193,31,124,31,77,31,107,31,203,31,226,31,172,31,27,31,24,31,4,31,233,31,118,31,166,31,209,31,221,31,182,31,168,31,6,31,32,31,32,30,238,31,138,31,97,31,219,31,222,31,107,31,223,31,104,31,205,31,182,31,182,30,33,31,168,31,226,31,38,31,113,31,156,31,156,30,132,31,34,31,30,31,113,31,246,31,187,31,161,31,25,31,72,31,72,30,211,31,199,31,199,30,177,31,24,31,107,31,107,30,5,31,242,31,35,31,76,31,159,31,137,31,137,30,16,31,51,31,248,31,17,31,248,31,143,31,62,31,76,31,221,31,113,31,171,31,119,31,85,31,85,30,85,29,50,31,27,31,55,31,8,31,110,31,25,31,25,30,231,31,30,31,86,31,29,31,29,30,29,29,20,31,20,30,116,31,80,31,204,31,254,31,37,31,154,31,243,31,8,31,7,31,153,31,33,31,80,31,80,30,112,31,43,31,234,31,182,31,110,31,5,31,238,31,130,31,130,30,2,31,2,30,58,31,142,31,142,30,152,31,79,31,221,31,54,31,4,31,4,30,192,31,226,31,23,31,159,31,159,30,159,29,159,28,83,31,83,30,83,29,153,31,67,31,67,30,159,31,111,31,218,31,46,31,14,31,14,30,93,31,116,31,218,31,22,31,160,31,99,31,111,31,111,30,242,31,27,31,102,31,102,30,102,29,224,31,175,31,247,31,89,31,126,31,126,30,180,31,129,31,146,31,153,31,131,31,158,31,235,31,32,31,201,31,91,31,91,30,251,31,59,31,59,30,59,29,182,31,204,31,201,31,193,31,198,31,74,31,218,31,199,31,69,31,158,31,33,31,154,31,206,31,235,31,231,31,196,31,255,31,217,31,148,31,88,31,145,31,229,31,165,31,21,31,21,30,27,31,246,31,234,31,226,31,20,31,32,31,81,31,58,31,12,31,140,31,140,30,128,31,128,30,38,31,61,31,86,31,106,31,38,31,144,31,139,31,6,31,225,31,10,31,118,31,75,31,221,31,221,30,112,31,201,31,182,31,182,30,182,29,156,31,129,31,102,31,154,31,74,31,17,31,190,31,137,31,204,31,204,30,62,31,100,31,163,31,160,31,156,31,238,31,99,31,195,31,195,30,14,31,115,31,22,31,22,30,167,31,88,31,55,31,117,31,82,31,246,31,11,31,170,31,9,31,31,31,68,31,68,30,224,31,142,31,73,31,225,31,155,31,134,31,134,30,72,31,6,31,6,30,6,29,57,31,78,31,168,31,123,31,51,31,248,31,83,31,71,31,166,31,238,31,196,31,33,31,150,31,150,30,228,31,228,30,160,31,124,31,44,31,115,31,115,30,225,31,248,31,248,30,15,31,235,31,87,31,170,31,44,31,252,31,62,31,16,31,196,31,153,31,36,31,116,31,252,31,50,31,199,31,199,30,165,31,228,31,217,31,11,31,189,31,23,31,96,31,145,31,20,31,45,31,237,31,160,31,197,31,229,31,229,30,229,29,131,31,165,31,97,31,35,31,76,31,76,30,116,31,97,31,237,31,111,31,10,31,228,31,135,31,50,31,58,31,77,31,40,31,161,31,168,31,176,31,127,31,213,31,213,30,40,31,33,31,168,31,249,31,118,31,147,31,147,30,234,31,214,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
