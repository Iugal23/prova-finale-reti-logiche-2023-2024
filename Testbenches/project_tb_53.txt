-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 383;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (248,0,197,0,57,0,8,0,101,0,175,0,191,0,0,0,98,0,0,0,148,0,192,0,236,0,0,0,0,0,239,0,127,0,0,0,193,0,72,0,9,0,0,0,239,0,0,0,198,0,137,0,136,0,36,0,0,0,180,0,119,0,0,0,118,0,0,0,156,0,0,0,221,0,243,0,57,0,0,0,1,0,229,0,13,0,149,0,15,0,123,0,30,0,182,0,241,0,127,0,140,0,179,0,0,0,0,0,188,0,0,0,218,0,203,0,147,0,3,0,0,0,84,0,0,0,63,0,10,0,192,0,144,0,112,0,199,0,173,0,219,0,8,0,125,0,188,0,244,0,72,0,59,0,0,0,0,0,32,0,236,0,182,0,225,0,0,0,45,0,221,0,223,0,229,0,227,0,247,0,0,0,246,0,138,0,217,0,122,0,22,0,77,0,173,0,50,0,0,0,194,0,0,0,198,0,21,0,115,0,220,0,17,0,121,0,224,0,221,0,253,0,0,0,240,0,65,0,142,0,12,0,203,0,150,0,96,0,229,0,185,0,131,0,0,0,194,0,39,0,182,0,25,0,0,0,0,0,58,0,142,0,247,0,12,0,58,0,0,0,255,0,107,0,90,0,95,0,0,0,49,0,234,0,162,0,74,0,128,0,217,0,155,0,138,0,0,0,143,0,47,0,108,0,11,0,76,0,0,0,31,0,41,0,120,0,31,0,25,0,35,0,85,0,207,0,0,0,252,0,6,0,67,0,0,0,178,0,253,0,0,0,62,0,0,0,245,0,99,0,0,0,0,0,30,0,0,0,0,0,247,0,213,0,243,0,17,0,50,0,188,0,30,0,84,0,193,0,0,0,100,0,13,0,147,0,228,0,100,0,127,0,193,0,147,0,25,0,28,0,186,0,245,0,65,0,240,0,49,0,106,0,57,0,249,0,81,0,15,0,0,0,16,0,236,0,112,0,137,0,2,0,237,0,0,0,249,0,251,0,44,0,0,0,187,0,127,0,39,0,228,0,188,0,172,0,108,0,229,0,168,0,0,0,252,0,20,0,212,0,180,0,0,0,215,0,85,0,45,0,247,0,85,0,21,0,0,0,96,0,107,0,73,0,0,0,0,0,109,0,0,0,117,0,0,0,206,0,198,0,219,0,20,0,0,0,162,0,117,0,129,0,50,0,172,0,0,0,20,0,192,0,174,0,0,0,78,0,186,0,0,0,154,0,229,0,28,0,0,0,155,0,0,0,130,0,252,0,16,0,226,0,240,0,193,0,29,0,217,0,0,0,116,0,245,0,145,0,0,0,69,0,26,0,35,0,0,0,26,0,45,0,0,0,52,0,0,0,8,0,30,0,143,0,61,0,0,0,149,0,40,0,59,0,38,0,62,0,156,0,0,0,87,0,131,0,75,0,44,0,170,0,118,0,146,0,65,0,192,0,90,0,49,0,125,0,100,0,221,0,181,0,143,0,0,0,15,0,100,0,0,0,109,0,73,0,85,0,122,0,1,0,92,0,222,0,201,0,151,0,220,0,91,0,189,0,245,0,208,0,188,0,221,0,181,0,203,0,63,0,0,0,51,0,148,0,170,0,45,0,0,0,116,0,0,0,115,0,163,0,41,0,24,0,0,0,92,0,215,0,43,0,168,0,211,0,244,0,87,0,46,0,41,0,168,0,0,0,0,0,0,0,0,0,77,0,126,0,180,0,148,0,64,0,133,0);
signal scenario_full  : scenario_type := (248,31,197,31,57,31,8,31,101,31,175,31,191,31,191,30,98,31,98,30,148,31,192,31,236,31,236,30,236,29,239,31,127,31,127,30,193,31,72,31,9,31,9,30,239,31,239,30,198,31,137,31,136,31,36,31,36,30,180,31,119,31,119,30,118,31,118,30,156,31,156,30,221,31,243,31,57,31,57,30,1,31,229,31,13,31,149,31,15,31,123,31,30,31,182,31,241,31,127,31,140,31,179,31,179,30,179,29,188,31,188,30,218,31,203,31,147,31,3,31,3,30,84,31,84,30,63,31,10,31,192,31,144,31,112,31,199,31,173,31,219,31,8,31,125,31,188,31,244,31,72,31,59,31,59,30,59,29,32,31,236,31,182,31,225,31,225,30,45,31,221,31,223,31,229,31,227,31,247,31,247,30,246,31,138,31,217,31,122,31,22,31,77,31,173,31,50,31,50,30,194,31,194,30,198,31,21,31,115,31,220,31,17,31,121,31,224,31,221,31,253,31,253,30,240,31,65,31,142,31,12,31,203,31,150,31,96,31,229,31,185,31,131,31,131,30,194,31,39,31,182,31,25,31,25,30,25,29,58,31,142,31,247,31,12,31,58,31,58,30,255,31,107,31,90,31,95,31,95,30,49,31,234,31,162,31,74,31,128,31,217,31,155,31,138,31,138,30,143,31,47,31,108,31,11,31,76,31,76,30,31,31,41,31,120,31,31,31,25,31,35,31,85,31,207,31,207,30,252,31,6,31,67,31,67,30,178,31,253,31,253,30,62,31,62,30,245,31,99,31,99,30,99,29,30,31,30,30,30,29,247,31,213,31,243,31,17,31,50,31,188,31,30,31,84,31,193,31,193,30,100,31,13,31,147,31,228,31,100,31,127,31,193,31,147,31,25,31,28,31,186,31,245,31,65,31,240,31,49,31,106,31,57,31,249,31,81,31,15,31,15,30,16,31,236,31,112,31,137,31,2,31,237,31,237,30,249,31,251,31,44,31,44,30,187,31,127,31,39,31,228,31,188,31,172,31,108,31,229,31,168,31,168,30,252,31,20,31,212,31,180,31,180,30,215,31,85,31,45,31,247,31,85,31,21,31,21,30,96,31,107,31,73,31,73,30,73,29,109,31,109,30,117,31,117,30,206,31,198,31,219,31,20,31,20,30,162,31,117,31,129,31,50,31,172,31,172,30,20,31,192,31,174,31,174,30,78,31,186,31,186,30,154,31,229,31,28,31,28,30,155,31,155,30,130,31,252,31,16,31,226,31,240,31,193,31,29,31,217,31,217,30,116,31,245,31,145,31,145,30,69,31,26,31,35,31,35,30,26,31,45,31,45,30,52,31,52,30,8,31,30,31,143,31,61,31,61,30,149,31,40,31,59,31,38,31,62,31,156,31,156,30,87,31,131,31,75,31,44,31,170,31,118,31,146,31,65,31,192,31,90,31,49,31,125,31,100,31,221,31,181,31,143,31,143,30,15,31,100,31,100,30,109,31,73,31,85,31,122,31,1,31,92,31,222,31,201,31,151,31,220,31,91,31,189,31,245,31,208,31,188,31,221,31,181,31,203,31,63,31,63,30,51,31,148,31,170,31,45,31,45,30,116,31,116,30,115,31,163,31,41,31,24,31,24,30,92,31,215,31,43,31,168,31,211,31,244,31,87,31,46,31,41,31,168,31,168,30,168,29,168,28,168,27,77,31,126,31,180,31,148,31,64,31,133,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
