-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 487;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (59,0,98,0,89,0,0,0,151,0,31,0,28,0,0,0,63,0,90,0,42,0,118,0,0,0,0,0,19,0,0,0,194,0,136,0,104,0,85,0,0,0,236,0,0,0,104,0,196,0,0,0,0,0,42,0,106,0,7,0,153,0,193,0,95,0,0,0,231,0,218,0,46,0,203,0,208,0,48,0,0,0,36,0,0,0,164,0,77,0,19,0,32,0,55,0,0,0,0,0,194,0,14,0,6,0,137,0,93,0,128,0,208,0,117,0,0,0,0,0,205,0,244,0,146,0,237,0,0,0,164,0,0,0,108,0,42,0,183,0,75,0,0,0,147,0,190,0,118,0,236,0,240,0,134,0,0,0,211,0,0,0,72,0,41,0,58,0,23,0,55,0,0,0,236,0,176,0,220,0,17,0,17,0,0,0,53,0,19,0,167,0,0,0,0,0,70,0,201,0,181,0,183,0,0,0,255,0,197,0,129,0,208,0,185,0,0,0,0,0,0,0,115,0,144,0,0,0,215,0,157,0,0,0,42,0,90,0,161,0,0,0,0,0,207,0,190,0,43,0,6,0,2,0,138,0,189,0,85,0,167,0,44,0,161,0,54,0,92,0,205,0,0,0,247,0,148,0,14,0,245,0,119,0,170,0,174,0,236,0,0,0,97,0,134,0,0,0,39,0,31,0,113,0,0,0,251,0,203,0,136,0,0,0,56,0,40,0,0,0,0,0,0,0,79,0,245,0,205,0,20,0,156,0,176,0,0,0,61,0,114,0,0,0,195,0,0,0,158,0,12,0,31,0,226,0,3,0,0,0,126,0,167,0,17,0,60,0,0,0,0,0,250,0,243,0,228,0,168,0,183,0,0,0,33,0,155,0,117,0,0,0,110,0,0,0,66,0,191,0,231,0,152,0,190,0,0,0,67,0,39,0,32,0,0,0,185,0,156,0,119,0,0,0,100,0,45,0,237,0,159,0,0,0,45,0,254,0,70,0,9,0,173,0,147,0,147,0,10,0,0,0,67,0,51,0,36,0,110,0,0,0,14,0,74,0,43,0,7,0,76,0,250,0,244,0,54,0,138,0,178,0,122,0,78,0,166,0,0,0,158,0,74,0,160,0,149,0,184,0,126,0,217,0,0,0,136,0,35,0,14,0,66,0,0,0,30,0,96,0,247,0,0,0,141,0,55,0,54,0,31,0,114,0,6,0,157,0,91,0,149,0,66,0,230,0,252,0,0,0,104,0,211,0,140,0,79,0,87,0,82,0,189,0,0,0,139,0,90,0,187,0,140,0,14,0,168,0,0,0,0,0,0,0,0,0,228,0,79,0,0,0,13,0,235,0,142,0,130,0,8,0,155,0,0,0,0,0,191,0,60,0,201,0,0,0,23,0,131,0,199,0,249,0,38,0,166,0,203,0,77,0,86,0,191,0,56,0,166,0,0,0,43,0,0,0,36,0,158,0,0,0,9,0,252,0,0,0,59,0,251,0,107,0,203,0,172,0,0,0,44,0,253,0,224,0,156,0,0,0,0,0,0,0,44,0,125,0,0,0,18,0,0,0,3,0,76,0,0,0,217,0,122,0,0,0,156,0,0,0,150,0,178,0,183,0,166,0,201,0,143,0,208,0,87,0,247,0,119,0,0,0,162,0,167,0,73,0,0,0,87,0,170,0,196,0,160,0,47,0,201,0,107,0,0,0,0,0,222,0,235,0,0,0,159,0,66,0,1,0,243,0,0,0,254,0,0,0,238,0,62,0,252,0,42,0,0,0,95,0,220,0,10,0,94,0,0,0,253,0,80,0,110,0,90,0,66,0,223,0,106,0,0,0,113,0,89,0,0,0,0,0,0,0,0,0,96,0,114,0,252,0,0,0,35,0,73,0,150,0,235,0,253,0,59,0,185,0,98,0,13,0,0,0,226,0,158,0,166,0,0,0,246,0,225,0,219,0,188,0,0,0,191,0,159,0,235,0,101,0,182,0,249,0,0,0,0,0,0,0,126,0,104,0,228,0,145,0,254,0,17,0,102,0,41,0,161,0,1,0,0,0,11,0,80,0,44,0,0,0,101,0,0,0,164,0,0,0,204,0,0,0,36,0,23,0,43,0,77,0,0,0,37,0,34,0,161,0,34,0,0,0,118,0,0,0,254,0,216,0,36,0,110,0,155,0,18,0,149,0,216,0,98,0);
signal scenario_full  : scenario_type := (59,31,98,31,89,31,89,30,151,31,31,31,28,31,28,30,63,31,90,31,42,31,118,31,118,30,118,29,19,31,19,30,194,31,136,31,104,31,85,31,85,30,236,31,236,30,104,31,196,31,196,30,196,29,42,31,106,31,7,31,153,31,193,31,95,31,95,30,231,31,218,31,46,31,203,31,208,31,48,31,48,30,36,31,36,30,164,31,77,31,19,31,32,31,55,31,55,30,55,29,194,31,14,31,6,31,137,31,93,31,128,31,208,31,117,31,117,30,117,29,205,31,244,31,146,31,237,31,237,30,164,31,164,30,108,31,42,31,183,31,75,31,75,30,147,31,190,31,118,31,236,31,240,31,134,31,134,30,211,31,211,30,72,31,41,31,58,31,23,31,55,31,55,30,236,31,176,31,220,31,17,31,17,31,17,30,53,31,19,31,167,31,167,30,167,29,70,31,201,31,181,31,183,31,183,30,255,31,197,31,129,31,208,31,185,31,185,30,185,29,185,28,115,31,144,31,144,30,215,31,157,31,157,30,42,31,90,31,161,31,161,30,161,29,207,31,190,31,43,31,6,31,2,31,138,31,189,31,85,31,167,31,44,31,161,31,54,31,92,31,205,31,205,30,247,31,148,31,14,31,245,31,119,31,170,31,174,31,236,31,236,30,97,31,134,31,134,30,39,31,31,31,113,31,113,30,251,31,203,31,136,31,136,30,56,31,40,31,40,30,40,29,40,28,79,31,245,31,205,31,20,31,156,31,176,31,176,30,61,31,114,31,114,30,195,31,195,30,158,31,12,31,31,31,226,31,3,31,3,30,126,31,167,31,17,31,60,31,60,30,60,29,250,31,243,31,228,31,168,31,183,31,183,30,33,31,155,31,117,31,117,30,110,31,110,30,66,31,191,31,231,31,152,31,190,31,190,30,67,31,39,31,32,31,32,30,185,31,156,31,119,31,119,30,100,31,45,31,237,31,159,31,159,30,45,31,254,31,70,31,9,31,173,31,147,31,147,31,10,31,10,30,67,31,51,31,36,31,110,31,110,30,14,31,74,31,43,31,7,31,76,31,250,31,244,31,54,31,138,31,178,31,122,31,78,31,166,31,166,30,158,31,74,31,160,31,149,31,184,31,126,31,217,31,217,30,136,31,35,31,14,31,66,31,66,30,30,31,96,31,247,31,247,30,141,31,55,31,54,31,31,31,114,31,6,31,157,31,91,31,149,31,66,31,230,31,252,31,252,30,104,31,211,31,140,31,79,31,87,31,82,31,189,31,189,30,139,31,90,31,187,31,140,31,14,31,168,31,168,30,168,29,168,28,168,27,228,31,79,31,79,30,13,31,235,31,142,31,130,31,8,31,155,31,155,30,155,29,191,31,60,31,201,31,201,30,23,31,131,31,199,31,249,31,38,31,166,31,203,31,77,31,86,31,191,31,56,31,166,31,166,30,43,31,43,30,36,31,158,31,158,30,9,31,252,31,252,30,59,31,251,31,107,31,203,31,172,31,172,30,44,31,253,31,224,31,156,31,156,30,156,29,156,28,44,31,125,31,125,30,18,31,18,30,3,31,76,31,76,30,217,31,122,31,122,30,156,31,156,30,150,31,178,31,183,31,166,31,201,31,143,31,208,31,87,31,247,31,119,31,119,30,162,31,167,31,73,31,73,30,87,31,170,31,196,31,160,31,47,31,201,31,107,31,107,30,107,29,222,31,235,31,235,30,159,31,66,31,1,31,243,31,243,30,254,31,254,30,238,31,62,31,252,31,42,31,42,30,95,31,220,31,10,31,94,31,94,30,253,31,80,31,110,31,90,31,66,31,223,31,106,31,106,30,113,31,89,31,89,30,89,29,89,28,89,27,96,31,114,31,252,31,252,30,35,31,73,31,150,31,235,31,253,31,59,31,185,31,98,31,13,31,13,30,226,31,158,31,166,31,166,30,246,31,225,31,219,31,188,31,188,30,191,31,159,31,235,31,101,31,182,31,249,31,249,30,249,29,249,28,126,31,104,31,228,31,145,31,254,31,17,31,102,31,41,31,161,31,1,31,1,30,11,31,80,31,44,31,44,30,101,31,101,30,164,31,164,30,204,31,204,30,36,31,23,31,43,31,77,31,77,30,37,31,34,31,161,31,34,31,34,30,118,31,118,30,254,31,216,31,36,31,110,31,155,31,18,31,149,31,216,31,98,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
