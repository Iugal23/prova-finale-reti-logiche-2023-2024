-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 976;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,194,0,89,0,138,0,163,0,232,0,142,0,154,0,173,0,35,0,199,0,98,0,0,0,84,0,35,0,151,0,0,0,0,0,0,0,0,0,168,0,163,0,27,0,115,0,228,0,63,0,98,0,130,0,0,0,228,0,40,0,148,0,235,0,129,0,0,0,88,0,69,0,202,0,59,0,183,0,0,0,56,0,91,0,25,0,92,0,209,0,192,0,43,0,0,0,181,0,0,0,213,0,212,0,188,0,86,0,70,0,183,0,95,0,215,0,0,0,0,0,82,0,188,0,139,0,138,0,22,0,183,0,155,0,0,0,45,0,179,0,97,0,9,0,147,0,114,0,0,0,0,0,239,0,55,0,95,0,0,0,53,0,92,0,53,0,24,0,71,0,0,0,0,0,211,0,0,0,65,0,250,0,252,0,29,0,184,0,84,0,0,0,133,0,0,0,0,0,183,0,167,0,0,0,41,0,0,0,137,0,35,0,73,0,36,0,19,0,50,0,228,0,23,0,155,0,20,0,0,0,248,0,0,0,0,0,8,0,86,0,152,0,22,0,37,0,42,0,58,0,252,0,0,0,4,0,89,0,192,0,0,0,54,0,154,0,0,0,138,0,105,0,25,0,0,0,65,0,0,0,216,0,72,0,44,0,44,0,166,0,51,0,0,0,69,0,245,0,86,0,0,0,40,0,187,0,24,0,214,0,177,0,0,0,107,0,65,0,255,0,252,0,54,0,101,0,117,0,200,0,82,0,0,0,209,0,198,0,175,0,0,0,209,0,248,0,111,0,248,0,198,0,156,0,83,0,78,0,249,0,209,0,19,0,202,0,0,0,141,0,133,0,51,0,0,0,59,0,80,0,82,0,0,0,160,0,0,0,0,0,73,0,173,0,13,0,2,0,228,0,157,0,10,0,25,0,66,0,13,0,0,0,113,0,37,0,0,0,181,0,9,0,0,0,52,0,51,0,10,0,227,0,135,0,11,0,52,0,245,0,43,0,191,0,22,0,181,0,0,0,123,0,226,0,0,0,125,0,54,0,235,0,164,0,145,0,0,0,73,0,0,0,35,0,86,0,0,0,199,0,38,0,65,0,112,0,101,0,31,0,184,0,38,0,244,0,179,0,0,0,133,0,244,0,247,0,90,0,119,0,63,0,103,0,0,0,165,0,123,0,0,0,0,0,69,0,69,0,113,0,0,0,123,0,159,0,70,0,0,0,252,0,209,0,6,0,200,0,0,0,128,0,0,0,164,0,1,0,237,0,230,0,77,0,211,0,0,0,145,0,199,0,241,0,15,0,40,0,180,0,208,0,160,0,50,0,148,0,180,0,134,0,12,0,172,0,186,0,244,0,213,0,18,0,0,0,55,0,195,0,110,0,112,0,176,0,0,0,104,0,241,0,107,0,24,0,190,0,23,0,135,0,66,0,240,0,58,0,12,0,130,0,52,0,107,0,0,0,30,0,12,0,0,0,106,0,54,0,31,0,0,0,188,0,0,0,46,0,57,0,167,0,234,0,191,0,73,0,64,0,44,0,0,0,3,0,106,0,0,0,43,0,185,0,13,0,45,0,0,0,170,0,54,0,127,0,93,0,113,0,67,0,95,0,215,0,196,0,222,0,214,0,166,0,0,0,163,0,251,0,103,0,164,0,0,0,249,0,34,0,187,0,203,0,0,0,254,0,201,0,14,0,0,0,170,0,7,0,113,0,243,0,220,0,174,0,0,0,242,0,179,0,189,0,222,0,184,0,70,0,214,0,0,0,21,0,180,0,220,0,70,0,0,0,65,0,0,0,57,0,243,0,0,0,56,0,0,0,61,0,57,0,21,0,0,0,98,0,54,0,68,0,217,0,133,0,65,0,123,0,0,0,54,0,0,0,241,0,122,0,0,0,0,0,101,0,182,0,0,0,130,0,0,0,12,0,137,0,14,0,211,0,0,0,93,0,0,0,136,0,148,0,0,0,58,0,0,0,145,0,203,0,229,0,247,0,232,0,222,0,70,0,162,0,119,0,168,0,52,0,150,0,241,0,0,0,0,0,0,0,225,0,74,0,0,0,184,0,77,0,0,0,28,0,0,0,74,0,102,0,63,0,0,0,0,0,144,0,0,0,236,0,0,0,103,0,0,0,253,0,192,0,214,0,143,0,0,0,247,0,0,0,199,0,106,0,35,0,119,0,0,0,76,0,171,0,25,0,45,0,0,0,134,0,51,0,44,0,0,0,100,0,0,0,78,0,109,0,0,0,95,0,0,0,0,0,243,0,14,0,70,0,56,0,99,0,107,0,78,0,248,0,124,0,0,0,59,0,249,0,0,0,214,0,248,0,39,0,201,0,96,0,150,0,70,0,0,0,12,0,225,0,254,0,0,0,198,0,194,0,92,0,15,0,26,0,88,0,19,0,18,0,0,0,171,0,0,0,42,0,202,0,0,0,0,0,66,0,27,0,73,0,162,0,18,0,0,0,213,0,213,0,0,0,130,0,57,0,0,0,73,0,207,0,197,0,17,0,70,0,11,0,45,0,154,0,66,0,136,0,143,0,238,0,176,0,94,0,85,0,210,0,217,0,0,0,0,0,204,0,49,0,194,0,63,0,124,0,33,0,141,0,3,0,225,0,140,0,0,0,197,0,0,0,0,0,0,0,0,0,31,0,68,0,119,0,193,0,0,0,63,0,0,0,31,0,217,0,0,0,54,0,133,0,0,0,53,0,133,0,0,0,145,0,248,0,110,0,0,0,211,0,217,0,80,0,29,0,160,0,115,0,17,0,251,0,32,0,10,0,74,0,0,0,0,0,74,0,0,0,34,0,254,0,237,0,31,0,0,0,233,0,0,0,0,0,248,0,0,0,0,0,228,0,0,0,248,0,31,0,21,0,195,0,67,0,173,0,224,0,0,0,219,0,0,0,175,0,141,0,202,0,0,0,89,0,82,0,164,0,43,0,217,0,192,0,28,0,241,0,234,0,128,0,63,0,0,0,85,0,176,0,43,0,18,0,39,0,19,0,191,0,104,0,66,0,0,0,234,0,65,0,0,0,173,0,103,0,0,0,70,0,99,0,157,0,32,0,218,0,222,0,0,0,68,0,189,0,117,0,195,0,118,0,144,0,113,0,110,0,236,0,0,0,83,0,130,0,2,0,254,0,110,0,176,0,0,0,182,0,61,0,221,0,63,0,77,0,0,0,73,0,171,0,0,0,209,0,245,0,138,0,57,0,192,0,85,0,123,0,0,0,0,0,46,0,0,0,0,0,106,0,54,0,124,0,215,0,13,0,25,0,0,0,158,0,55,0,145,0,45,0,160,0,190,0,42,0,0,0,255,0,169,0,163,0,74,0,104,0,159,0,52,0,176,0,8,0,195,0,0,0,24,0,101,0,210,0,142,0,136,0,253,0,81,0,234,0,164,0,84,0,151,0,59,0,148,0,231,0,136,0,8,0,100,0,0,0,197,0,14,0,0,0,181,0,228,0,29,0,75,0,55,0,77,0,0,0,0,0,244,0,37,0,0,0,187,0,63,0,134,0,90,0,0,0,55,0,0,0,0,0,209,0,119,0,23,0,60,0,190,0,156,0,181,0,0,0,138,0,58,0,102,0,185,0,0,0,0,0,0,0,251,0,234,0,0,0,115,0,0,0,0,0,0,0,0,0,43,0,113,0,0,0,83,0,66,0,211,0,94,0,193,0,253,0,37,0,213,0,189,0,132,0,247,0,199,0,0,0,0,0,162,0,35,0,139,0,147,0,78,0,164,0,11,0,42,0,215,0,122,0,74,0,29,0,179,0,0,0,165,0,102,0,41,0,0,0,99,0,75,0,0,0,207,0,70,0,231,0,22,0,177,0,200,0,98,0,83,0,0,0,135,0,103,0,249,0,66,0,0,0,141,0,138,0,209,0,176,0,0,0,164,0,255,0,54,0,0,0,218,0,6,0,143,0,87,0,205,0,115,0,181,0,0,0,176,0,222,0,28,0,165,0,0,0,47,0,40,0,0,0,62,0,127,0,4,0,150,0,0,0,189,0,9,0,101,0,81,0,93,0,46,0,170,0,142,0,98,0,68,0,5,0,98,0,152,0,50,0,55,0,0,0,236,0,247,0,205,0,238,0,178,0,0,0,0,0,0,0,103,0,190,0,143,0,42,0,0,0,102,0,181,0,53,0,104,0,249,0,155,0,121,0,71,0,214,0,152,0,0,0,0,0,0,0,247,0,93,0,222,0,0,0,21,0,202,0,80,0,0,0,125,0,46,0,0,0,0,0,207,0,126,0,237,0,209,0,82,0,137,0,206,0,132,0,4,0,184,0,236,0,176,0,48,0,21,0,0,0,180,0,203,0,56,0,218,0,5,0,89,0,0,0,60,0,33,0,94,0);
signal scenario_full  : scenario_type := (0,0,194,31,89,31,138,31,163,31,232,31,142,31,154,31,173,31,35,31,199,31,98,31,98,30,84,31,35,31,151,31,151,30,151,29,151,28,151,27,168,31,163,31,27,31,115,31,228,31,63,31,98,31,130,31,130,30,228,31,40,31,148,31,235,31,129,31,129,30,88,31,69,31,202,31,59,31,183,31,183,30,56,31,91,31,25,31,92,31,209,31,192,31,43,31,43,30,181,31,181,30,213,31,212,31,188,31,86,31,70,31,183,31,95,31,215,31,215,30,215,29,82,31,188,31,139,31,138,31,22,31,183,31,155,31,155,30,45,31,179,31,97,31,9,31,147,31,114,31,114,30,114,29,239,31,55,31,95,31,95,30,53,31,92,31,53,31,24,31,71,31,71,30,71,29,211,31,211,30,65,31,250,31,252,31,29,31,184,31,84,31,84,30,133,31,133,30,133,29,183,31,167,31,167,30,41,31,41,30,137,31,35,31,73,31,36,31,19,31,50,31,228,31,23,31,155,31,20,31,20,30,248,31,248,30,248,29,8,31,86,31,152,31,22,31,37,31,42,31,58,31,252,31,252,30,4,31,89,31,192,31,192,30,54,31,154,31,154,30,138,31,105,31,25,31,25,30,65,31,65,30,216,31,72,31,44,31,44,31,166,31,51,31,51,30,69,31,245,31,86,31,86,30,40,31,187,31,24,31,214,31,177,31,177,30,107,31,65,31,255,31,252,31,54,31,101,31,117,31,200,31,82,31,82,30,209,31,198,31,175,31,175,30,209,31,248,31,111,31,248,31,198,31,156,31,83,31,78,31,249,31,209,31,19,31,202,31,202,30,141,31,133,31,51,31,51,30,59,31,80,31,82,31,82,30,160,31,160,30,160,29,73,31,173,31,13,31,2,31,228,31,157,31,10,31,25,31,66,31,13,31,13,30,113,31,37,31,37,30,181,31,9,31,9,30,52,31,51,31,10,31,227,31,135,31,11,31,52,31,245,31,43,31,191,31,22,31,181,31,181,30,123,31,226,31,226,30,125,31,54,31,235,31,164,31,145,31,145,30,73,31,73,30,35,31,86,31,86,30,199,31,38,31,65,31,112,31,101,31,31,31,184,31,38,31,244,31,179,31,179,30,133,31,244,31,247,31,90,31,119,31,63,31,103,31,103,30,165,31,123,31,123,30,123,29,69,31,69,31,113,31,113,30,123,31,159,31,70,31,70,30,252,31,209,31,6,31,200,31,200,30,128,31,128,30,164,31,1,31,237,31,230,31,77,31,211,31,211,30,145,31,199,31,241,31,15,31,40,31,180,31,208,31,160,31,50,31,148,31,180,31,134,31,12,31,172,31,186,31,244,31,213,31,18,31,18,30,55,31,195,31,110,31,112,31,176,31,176,30,104,31,241,31,107,31,24,31,190,31,23,31,135,31,66,31,240,31,58,31,12,31,130,31,52,31,107,31,107,30,30,31,12,31,12,30,106,31,54,31,31,31,31,30,188,31,188,30,46,31,57,31,167,31,234,31,191,31,73,31,64,31,44,31,44,30,3,31,106,31,106,30,43,31,185,31,13,31,45,31,45,30,170,31,54,31,127,31,93,31,113,31,67,31,95,31,215,31,196,31,222,31,214,31,166,31,166,30,163,31,251,31,103,31,164,31,164,30,249,31,34,31,187,31,203,31,203,30,254,31,201,31,14,31,14,30,170,31,7,31,113,31,243,31,220,31,174,31,174,30,242,31,179,31,189,31,222,31,184,31,70,31,214,31,214,30,21,31,180,31,220,31,70,31,70,30,65,31,65,30,57,31,243,31,243,30,56,31,56,30,61,31,57,31,21,31,21,30,98,31,54,31,68,31,217,31,133,31,65,31,123,31,123,30,54,31,54,30,241,31,122,31,122,30,122,29,101,31,182,31,182,30,130,31,130,30,12,31,137,31,14,31,211,31,211,30,93,31,93,30,136,31,148,31,148,30,58,31,58,30,145,31,203,31,229,31,247,31,232,31,222,31,70,31,162,31,119,31,168,31,52,31,150,31,241,31,241,30,241,29,241,28,225,31,74,31,74,30,184,31,77,31,77,30,28,31,28,30,74,31,102,31,63,31,63,30,63,29,144,31,144,30,236,31,236,30,103,31,103,30,253,31,192,31,214,31,143,31,143,30,247,31,247,30,199,31,106,31,35,31,119,31,119,30,76,31,171,31,25,31,45,31,45,30,134,31,51,31,44,31,44,30,100,31,100,30,78,31,109,31,109,30,95,31,95,30,95,29,243,31,14,31,70,31,56,31,99,31,107,31,78,31,248,31,124,31,124,30,59,31,249,31,249,30,214,31,248,31,39,31,201,31,96,31,150,31,70,31,70,30,12,31,225,31,254,31,254,30,198,31,194,31,92,31,15,31,26,31,88,31,19,31,18,31,18,30,171,31,171,30,42,31,202,31,202,30,202,29,66,31,27,31,73,31,162,31,18,31,18,30,213,31,213,31,213,30,130,31,57,31,57,30,73,31,207,31,197,31,17,31,70,31,11,31,45,31,154,31,66,31,136,31,143,31,238,31,176,31,94,31,85,31,210,31,217,31,217,30,217,29,204,31,49,31,194,31,63,31,124,31,33,31,141,31,3,31,225,31,140,31,140,30,197,31,197,30,197,29,197,28,197,27,31,31,68,31,119,31,193,31,193,30,63,31,63,30,31,31,217,31,217,30,54,31,133,31,133,30,53,31,133,31,133,30,145,31,248,31,110,31,110,30,211,31,217,31,80,31,29,31,160,31,115,31,17,31,251,31,32,31,10,31,74,31,74,30,74,29,74,31,74,30,34,31,254,31,237,31,31,31,31,30,233,31,233,30,233,29,248,31,248,30,248,29,228,31,228,30,248,31,31,31,21,31,195,31,67,31,173,31,224,31,224,30,219,31,219,30,175,31,141,31,202,31,202,30,89,31,82,31,164,31,43,31,217,31,192,31,28,31,241,31,234,31,128,31,63,31,63,30,85,31,176,31,43,31,18,31,39,31,19,31,191,31,104,31,66,31,66,30,234,31,65,31,65,30,173,31,103,31,103,30,70,31,99,31,157,31,32,31,218,31,222,31,222,30,68,31,189,31,117,31,195,31,118,31,144,31,113,31,110,31,236,31,236,30,83,31,130,31,2,31,254,31,110,31,176,31,176,30,182,31,61,31,221,31,63,31,77,31,77,30,73,31,171,31,171,30,209,31,245,31,138,31,57,31,192,31,85,31,123,31,123,30,123,29,46,31,46,30,46,29,106,31,54,31,124,31,215,31,13,31,25,31,25,30,158,31,55,31,145,31,45,31,160,31,190,31,42,31,42,30,255,31,169,31,163,31,74,31,104,31,159,31,52,31,176,31,8,31,195,31,195,30,24,31,101,31,210,31,142,31,136,31,253,31,81,31,234,31,164,31,84,31,151,31,59,31,148,31,231,31,136,31,8,31,100,31,100,30,197,31,14,31,14,30,181,31,228,31,29,31,75,31,55,31,77,31,77,30,77,29,244,31,37,31,37,30,187,31,63,31,134,31,90,31,90,30,55,31,55,30,55,29,209,31,119,31,23,31,60,31,190,31,156,31,181,31,181,30,138,31,58,31,102,31,185,31,185,30,185,29,185,28,251,31,234,31,234,30,115,31,115,30,115,29,115,28,115,27,43,31,113,31,113,30,83,31,66,31,211,31,94,31,193,31,253,31,37,31,213,31,189,31,132,31,247,31,199,31,199,30,199,29,162,31,35,31,139,31,147,31,78,31,164,31,11,31,42,31,215,31,122,31,74,31,29,31,179,31,179,30,165,31,102,31,41,31,41,30,99,31,75,31,75,30,207,31,70,31,231,31,22,31,177,31,200,31,98,31,83,31,83,30,135,31,103,31,249,31,66,31,66,30,141,31,138,31,209,31,176,31,176,30,164,31,255,31,54,31,54,30,218,31,6,31,143,31,87,31,205,31,115,31,181,31,181,30,176,31,222,31,28,31,165,31,165,30,47,31,40,31,40,30,62,31,127,31,4,31,150,31,150,30,189,31,9,31,101,31,81,31,93,31,46,31,170,31,142,31,98,31,68,31,5,31,98,31,152,31,50,31,55,31,55,30,236,31,247,31,205,31,238,31,178,31,178,30,178,29,178,28,103,31,190,31,143,31,42,31,42,30,102,31,181,31,53,31,104,31,249,31,155,31,121,31,71,31,214,31,152,31,152,30,152,29,152,28,247,31,93,31,222,31,222,30,21,31,202,31,80,31,80,30,125,31,46,31,46,30,46,29,207,31,126,31,237,31,209,31,82,31,137,31,206,31,132,31,4,31,184,31,236,31,176,31,48,31,21,31,21,30,180,31,203,31,56,31,218,31,5,31,89,31,89,30,60,31,33,31,94,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
