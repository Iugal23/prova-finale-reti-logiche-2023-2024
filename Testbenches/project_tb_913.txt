-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 822;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (165,0,40,0,174,0,0,0,76,0,228,0,40,0,94,0,172,0,95,0,211,0,238,0,173,0,102,0,0,0,144,0,179,0,69,0,85,0,42,0,79,0,0,0,177,0,93,0,16,0,195,0,24,0,46,0,68,0,235,0,62,0,69,0,203,0,0,0,191,0,40,0,228,0,0,0,4,0,223,0,235,0,82,0,202,0,96,0,0,0,200,0,38,0,205,0,216,0,0,0,111,0,98,0,208,0,255,0,0,0,32,0,166,0,0,0,235,0,115,0,0,0,114,0,19,0,30,0,70,0,0,0,197,0,0,0,221,0,0,0,225,0,69,0,104,0,179,0,0,0,208,0,180,0,211,0,243,0,0,0,90,0,144,0,166,0,2,0,38,0,232,0,228,0,236,0,203,0,187,0,16,0,38,0,194,0,21,0,41,0,147,0,24,0,50,0,196,0,229,0,0,0,104,0,6,0,0,0,166,0,64,0,0,0,23,0,59,0,230,0,113,0,179,0,16,0,116,0,172,0,0,0,241,0,60,0,148,0,73,0,28,0,16,0,60,0,98,0,55,0,142,0,18,0,189,0,16,0,12,0,222,0,90,0,99,0,109,0,42,0,12,0,60,0,170,0,232,0,132,0,0,0,228,0,157,0,118,0,83,0,0,0,117,0,206,0,138,0,17,0,180,0,103,0,162,0,0,0,236,0,19,0,44,0,9,0,0,0,9,0,3,0,0,0,27,0,0,0,68,0,71,0,222,0,37,0,0,0,177,0,235,0,192,0,75,0,193,0,189,0,20,0,0,0,0,0,238,0,10,0,144,0,30,0,0,0,171,0,0,0,77,0,4,0,205,0,172,0,32,0,252,0,192,0,199,0,77,0,175,0,253,0,7,0,57,0,34,0,91,0,159,0,80,0,0,0,0,0,57,0,185,0,5,0,98,0,0,0,142,0,96,0,164,0,49,0,237,0,0,0,130,0,44,0,211,0,0,0,197,0,0,0,128,0,173,0,133,0,179,0,0,0,26,0,247,0,130,0,139,0,0,0,230,0,25,0,162,0,97,0,192,0,0,0,207,0,57,0,108,0,33,0,80,0,243,0,151,0,15,0,12,0,94,0,234,0,16,0,129,0,235,0,53,0,168,0,0,0,0,0,143,0,223,0,255,0,220,0,12,0,112,0,21,0,30,0,170,0,0,0,0,0,0,0,201,0,32,0,127,0,180,0,104,0,0,0,132,0,18,0,0,0,247,0,30,0,24,0,0,0,151,0,0,0,149,0,18,0,10,0,41,0,139,0,162,0,197,0,38,0,169,0,218,0,151,0,126,0,30,0,228,0,110,0,221,0,0,0,0,0,72,0,40,0,189,0,0,0,21,0,89,0,0,0,38,0,0,0,24,0,149,0,238,0,161,0,180,0,234,0,96,0,240,0,0,0,148,0,3,0,183,0,0,0,0,0,2,0,87,0,0,0,0,0,108,0,78,0,237,0,126,0,159,0,65,0,0,0,69,0,15,0,222,0,110,0,6,0,94,0,0,0,0,0,141,0,67,0,102,0,29,0,196,0,11,0,165,0,197,0,116,0,77,0,212,0,31,0,56,0,251,0,230,0,0,0,227,0,118,0,239,0,170,0,233,0,0,0,178,0,223,0,0,0,61,0,51,0,90,0,127,0,191,0,0,0,143,0,13,0,135,0,0,0,160,0,0,0,157,0,47,0,16,0,13,0,154,0,3,0,5,0,109,0,107,0,55,0,0,0,0,0,27,0,182,0,31,0,42,0,94,0,0,0,0,0,64,0,0,0,46,0,45,0,46,0,147,0,139,0,106,0,119,0,145,0,127,0,43,0,49,0,35,0,216,0,78,0,11,0,154,0,20,0,96,0,152,0,81,0,187,0,174,0,170,0,60,0,206,0,142,0,105,0,0,0,170,0,18,0,237,0,204,0,164,0,178,0,93,0,108,0,199,0,220,0,198,0,238,0,89,0,26,0,0,0,179,0,194,0,222,0,114,0,136,0,175,0,191,0,0,0,123,0,203,0,231,0,0,0,63,0,179,0,169,0,237,0,232,0,251,0,29,0,229,0,0,0,0,0,78,0,33,0,202,0,0,0,250,0,80,0,23,0,240,0,191,0,195,0,0,0,255,0,171,0,227,0,0,0,22,0,84,0,20,0,0,0,11,0,156,0,130,0,0,0,37,0,7,0,215,0,74,0,118,0,179,0,162,0,250,0,106,0,221,0,216,0,143,0,53,0,0,0,247,0,0,0,89,0,137,0,212,0,221,0,217,0,217,0,82,0,0,0,199,0,139,0,245,0,0,0,230,0,156,0,43,0,82,0,100,0,73,0,218,0,1,0,91,0,218,0,211,0,194,0,0,0,104,0,227,0,151,0,0,0,202,0,83,0,8,0,103,0,59,0,173,0,75,0,5,0,188,0,89,0,130,0,174,0,7,0,0,0,37,0,53,0,7,0,0,0,0,0,109,0,89,0,0,0,88,0,82,0,238,0,0,0,26,0,0,0,0,0,0,0,122,0,157,0,69,0,0,0,196,0,91,0,0,0,15,0,7,0,111,0,220,0,192,0,54,0,148,0,176,0,97,0,187,0,185,0,0,0,0,0,0,0,76,0,208,0,149,0,171,0,1,0,12,0,220,0,68,0,42,0,103,0,177,0,117,0,0,0,184,0,115,0,189,0,239,0,153,0,38,0,2,0,24,0,223,0,58,0,223,0,34,0,242,0,185,0,90,0,27,0,245,0,203,0,50,0,64,0,233,0,239,0,0,0,0,0,138,0,0,0,52,0,107,0,122,0,160,0,95,0,9,0,0,0,0,0,0,0,239,0,73,0,169,0,57,0,0,0,233,0,34,0,223,0,5,0,64,0,30,0,10,0,0,0,237,0,91,0,77,0,40,0,197,0,186,0,152,0,0,0,187,0,239,0,152,0,12,0,7,0,169,0,7,0,198,0,169,0,69,0,249,0,248,0,131,0,241,0,0,0,0,0,0,0,155,0,89,0,41,0,139,0,239,0,150,0,1,0,54,0,0,0,87,0,163,0,188,0,54,0,174,0,69,0,101,0,124,0,70,0,201,0,137,0,36,0,233,0,122,0,91,0,132,0,213,0,208,0,91,0,60,0,252,0,67,0,206,0,199,0,179,0,0,0,110,0,63,0,0,0,8,0,255,0,57,0,206,0,0,0,186,0,0,0,0,0,0,0,197,0,238,0,44,0,42,0,94,0,179,0,90,0,0,0,234,0,121,0,0,0,0,0,127,0,68,0,181,0,221,0,50,0,49,0,169,0,138,0,237,0,201,0,61,0,11,0,106,0,68,0,154,0,118,0,128,0,113,0,0,0,0,0,138,0,138,0,181,0,0,0,223,0,230,0,0,0,160,0,106,0,119,0,184,0,133,0,74,0,4,0,119,0,96,0,137,0,0,0,131,0,100,0,103,0,143,0,205,0,68,0,187,0,215,0,136,0,0,0,185,0,73,0,94,0,17,0,2,0,192,0,202,0,0,0,0,0,1,0,43,0,57,0,61,0,246,0,127,0,151,0,119,0,0,0,168,0,253,0,70,0,16,0,136,0,7,0,78,0,134,0,39,0,0,0,19,0,57,0,126,0,239,0,103,0,86,0,236,0,0,0,100,0,19,0,0,0,163,0,55,0,178,0,0,0,129,0,114,0);
signal scenario_full  : scenario_type := (165,31,40,31,174,31,174,30,76,31,228,31,40,31,94,31,172,31,95,31,211,31,238,31,173,31,102,31,102,30,144,31,179,31,69,31,85,31,42,31,79,31,79,30,177,31,93,31,16,31,195,31,24,31,46,31,68,31,235,31,62,31,69,31,203,31,203,30,191,31,40,31,228,31,228,30,4,31,223,31,235,31,82,31,202,31,96,31,96,30,200,31,38,31,205,31,216,31,216,30,111,31,98,31,208,31,255,31,255,30,32,31,166,31,166,30,235,31,115,31,115,30,114,31,19,31,30,31,70,31,70,30,197,31,197,30,221,31,221,30,225,31,69,31,104,31,179,31,179,30,208,31,180,31,211,31,243,31,243,30,90,31,144,31,166,31,2,31,38,31,232,31,228,31,236,31,203,31,187,31,16,31,38,31,194,31,21,31,41,31,147,31,24,31,50,31,196,31,229,31,229,30,104,31,6,31,6,30,166,31,64,31,64,30,23,31,59,31,230,31,113,31,179,31,16,31,116,31,172,31,172,30,241,31,60,31,148,31,73,31,28,31,16,31,60,31,98,31,55,31,142,31,18,31,189,31,16,31,12,31,222,31,90,31,99,31,109,31,42,31,12,31,60,31,170,31,232,31,132,31,132,30,228,31,157,31,118,31,83,31,83,30,117,31,206,31,138,31,17,31,180,31,103,31,162,31,162,30,236,31,19,31,44,31,9,31,9,30,9,31,3,31,3,30,27,31,27,30,68,31,71,31,222,31,37,31,37,30,177,31,235,31,192,31,75,31,193,31,189,31,20,31,20,30,20,29,238,31,10,31,144,31,30,31,30,30,171,31,171,30,77,31,4,31,205,31,172,31,32,31,252,31,192,31,199,31,77,31,175,31,253,31,7,31,57,31,34,31,91,31,159,31,80,31,80,30,80,29,57,31,185,31,5,31,98,31,98,30,142,31,96,31,164,31,49,31,237,31,237,30,130,31,44,31,211,31,211,30,197,31,197,30,128,31,173,31,133,31,179,31,179,30,26,31,247,31,130,31,139,31,139,30,230,31,25,31,162,31,97,31,192,31,192,30,207,31,57,31,108,31,33,31,80,31,243,31,151,31,15,31,12,31,94,31,234,31,16,31,129,31,235,31,53,31,168,31,168,30,168,29,143,31,223,31,255,31,220,31,12,31,112,31,21,31,30,31,170,31,170,30,170,29,170,28,201,31,32,31,127,31,180,31,104,31,104,30,132,31,18,31,18,30,247,31,30,31,24,31,24,30,151,31,151,30,149,31,18,31,10,31,41,31,139,31,162,31,197,31,38,31,169,31,218,31,151,31,126,31,30,31,228,31,110,31,221,31,221,30,221,29,72,31,40,31,189,31,189,30,21,31,89,31,89,30,38,31,38,30,24,31,149,31,238,31,161,31,180,31,234,31,96,31,240,31,240,30,148,31,3,31,183,31,183,30,183,29,2,31,87,31,87,30,87,29,108,31,78,31,237,31,126,31,159,31,65,31,65,30,69,31,15,31,222,31,110,31,6,31,94,31,94,30,94,29,141,31,67,31,102,31,29,31,196,31,11,31,165,31,197,31,116,31,77,31,212,31,31,31,56,31,251,31,230,31,230,30,227,31,118,31,239,31,170,31,233,31,233,30,178,31,223,31,223,30,61,31,51,31,90,31,127,31,191,31,191,30,143,31,13,31,135,31,135,30,160,31,160,30,157,31,47,31,16,31,13,31,154,31,3,31,5,31,109,31,107,31,55,31,55,30,55,29,27,31,182,31,31,31,42,31,94,31,94,30,94,29,64,31,64,30,46,31,45,31,46,31,147,31,139,31,106,31,119,31,145,31,127,31,43,31,49,31,35,31,216,31,78,31,11,31,154,31,20,31,96,31,152,31,81,31,187,31,174,31,170,31,60,31,206,31,142,31,105,31,105,30,170,31,18,31,237,31,204,31,164,31,178,31,93,31,108,31,199,31,220,31,198,31,238,31,89,31,26,31,26,30,179,31,194,31,222,31,114,31,136,31,175,31,191,31,191,30,123,31,203,31,231,31,231,30,63,31,179,31,169,31,237,31,232,31,251,31,29,31,229,31,229,30,229,29,78,31,33,31,202,31,202,30,250,31,80,31,23,31,240,31,191,31,195,31,195,30,255,31,171,31,227,31,227,30,22,31,84,31,20,31,20,30,11,31,156,31,130,31,130,30,37,31,7,31,215,31,74,31,118,31,179,31,162,31,250,31,106,31,221,31,216,31,143,31,53,31,53,30,247,31,247,30,89,31,137,31,212,31,221,31,217,31,217,31,82,31,82,30,199,31,139,31,245,31,245,30,230,31,156,31,43,31,82,31,100,31,73,31,218,31,1,31,91,31,218,31,211,31,194,31,194,30,104,31,227,31,151,31,151,30,202,31,83,31,8,31,103,31,59,31,173,31,75,31,5,31,188,31,89,31,130,31,174,31,7,31,7,30,37,31,53,31,7,31,7,30,7,29,109,31,89,31,89,30,88,31,82,31,238,31,238,30,26,31,26,30,26,29,26,28,122,31,157,31,69,31,69,30,196,31,91,31,91,30,15,31,7,31,111,31,220,31,192,31,54,31,148,31,176,31,97,31,187,31,185,31,185,30,185,29,185,28,76,31,208,31,149,31,171,31,1,31,12,31,220,31,68,31,42,31,103,31,177,31,117,31,117,30,184,31,115,31,189,31,239,31,153,31,38,31,2,31,24,31,223,31,58,31,223,31,34,31,242,31,185,31,90,31,27,31,245,31,203,31,50,31,64,31,233,31,239,31,239,30,239,29,138,31,138,30,52,31,107,31,122,31,160,31,95,31,9,31,9,30,9,29,9,28,239,31,73,31,169,31,57,31,57,30,233,31,34,31,223,31,5,31,64,31,30,31,10,31,10,30,237,31,91,31,77,31,40,31,197,31,186,31,152,31,152,30,187,31,239,31,152,31,12,31,7,31,169,31,7,31,198,31,169,31,69,31,249,31,248,31,131,31,241,31,241,30,241,29,241,28,155,31,89,31,41,31,139,31,239,31,150,31,1,31,54,31,54,30,87,31,163,31,188,31,54,31,174,31,69,31,101,31,124,31,70,31,201,31,137,31,36,31,233,31,122,31,91,31,132,31,213,31,208,31,91,31,60,31,252,31,67,31,206,31,199,31,179,31,179,30,110,31,63,31,63,30,8,31,255,31,57,31,206,31,206,30,186,31,186,30,186,29,186,28,197,31,238,31,44,31,42,31,94,31,179,31,90,31,90,30,234,31,121,31,121,30,121,29,127,31,68,31,181,31,221,31,50,31,49,31,169,31,138,31,237,31,201,31,61,31,11,31,106,31,68,31,154,31,118,31,128,31,113,31,113,30,113,29,138,31,138,31,181,31,181,30,223,31,230,31,230,30,160,31,106,31,119,31,184,31,133,31,74,31,4,31,119,31,96,31,137,31,137,30,131,31,100,31,103,31,143,31,205,31,68,31,187,31,215,31,136,31,136,30,185,31,73,31,94,31,17,31,2,31,192,31,202,31,202,30,202,29,1,31,43,31,57,31,61,31,246,31,127,31,151,31,119,31,119,30,168,31,253,31,70,31,16,31,136,31,7,31,78,31,134,31,39,31,39,30,19,31,57,31,126,31,239,31,103,31,86,31,236,31,236,30,100,31,19,31,19,30,163,31,55,31,178,31,178,30,129,31,114,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
