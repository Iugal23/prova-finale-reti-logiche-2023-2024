-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 628;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (241,0,249,0,0,0,153,0,28,0,215,0,153,0,27,0,50,0,0,0,149,0,213,0,31,0,16,0,21,0,70,0,208,0,237,0,0,0,239,0,62,0,31,0,0,0,173,0,144,0,55,0,194,0,0,0,106,0,14,0,228,0,111,0,151,0,19,0,136,0,170,0,0,0,138,0,14,0,67,0,238,0,0,0,234,0,189,0,250,0,182,0,0,0,135,0,125,0,53,0,0,0,217,0,81,0,0,0,10,0,31,0,129,0,42,0,0,0,12,0,249,0,92,0,0,0,21,0,137,0,111,0,48,0,109,0,1,0,201,0,38,0,95,0,90,0,33,0,208,0,240,0,48,0,154,0,64,0,0,0,230,0,78,0,120,0,99,0,0,0,64,0,84,0,0,0,227,0,0,0,0,0,0,0,0,0,166,0,167,0,2,0,160,0,116,0,233,0,129,0,0,0,167,0,3,0,108,0,0,0,96,0,9,0,37,0,97,0,177,0,157,0,2,0,0,0,172,0,0,0,72,0,120,0,127,0,19,0,37,0,201,0,184,0,25,0,104,0,63,0,0,0,18,0,1,0,0,0,209,0,115,0,243,0,0,0,77,0,166,0,109,0,2,0,125,0,0,0,247,0,221,0,0,0,83,0,52,0,181,0,144,0,119,0,247,0,129,0,0,0,0,0,22,0,0,0,1,0,0,0,0,0,191,0,90,0,28,0,131,0,210,0,98,0,154,0,42,0,167,0,103,0,225,0,0,0,0,0,0,0,248,0,178,0,190,0,225,0,74,0,84,0,20,0,124,0,191,0,104,0,201,0,2,0,117,0,52,0,132,0,108,0,0,0,0,0,189,0,0,0,65,0,102,0,0,0,0,0,144,0,12,0,202,0,75,0,0,0,159,0,0,0,42,0,112,0,15,0,226,0,37,0,118,0,214,0,36,0,244,0,28,0,68,0,0,0,43,0,73,0,215,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,133,0,79,0,0,0,177,0,0,0,79,0,225,0,0,0,0,0,51,0,151,0,0,0,27,0,188,0,231,0,0,0,209,0,106,0,198,0,158,0,139,0,0,0,34,0,0,0,0,0,244,0,0,0,66,0,163,0,156,0,84,0,0,0,226,0,0,0,192,0,180,0,140,0,240,0,49,0,34,0,66,0,214,0,0,0,153,0,122,0,247,0,245,0,0,0,8,0,200,0,229,0,187,0,251,0,161,0,125,0,51,0,5,0,46,0,54,0,18,0,132,0,0,0,11,0,66,0,0,0,130,0,4,0,58,0,100,0,133,0,222,0,253,0,0,0,232,0,145,0,191,0,38,0,148,0,0,0,142,0,174,0,225,0,0,0,186,0,40,0,167,0,0,0,102,0,140,0,96,0,53,0,118,0,0,0,104,0,0,0,245,0,0,0,18,0,88,0,1,0,0,0,52,0,0,0,162,0,253,0,0,0,65,0,203,0,21,0,60,0,0,0,0,0,0,0,246,0,0,0,133,0,111,0,29,0,253,0,92,0,217,0,211,0,182,0,253,0,194,0,0,0,43,0,78,0,79,0,234,0,189,0,131,0,0,0,56,0,150,0,189,0,123,0,108,0,0,0,136,0,67,0,255,0,170,0,0,0,101,0,109,0,158,0,7,0,143,0,182,0,146,0,60,0,30,0,221,0,70,0,165,0,159,0,254,0,222,0,124,0,169,0,227,0,100,0,42,0,0,0,0,0,242,0,47,0,119,0,137,0,0,0,206,0,81,0,212,0,64,0,85,0,216,0,219,0,16,0,0,0,240,0,136,0,205,0,0,0,68,0,121,0,120,0,61,0,0,0,0,0,0,0,151,0,155,0,56,0,198,0,59,0,38,0,113,0,198,0,48,0,128,0,167,0,66,0,0,0,234,0,213,0,0,0,124,0,177,0,0,0,0,0,33,0,0,0,29,0,138,0,151,0,138,0,254,0,217,0,252,0,184,0,148,0,0,0,0,0,174,0,72,0,131,0,111,0,28,0,0,0,159,0,208,0,26,0,19,0,124,0,0,0,201,0,180,0,28,0,231,0,164,0,0,0,191,0,182,0,101,0,0,0,186,0,76,0,148,0,138,0,135,0,192,0,212,0,0,0,127,0,0,0,220,0,162,0,180,0,48,0,0,0,75,0,125,0,0,0,0,0,224,0,112,0,250,0,70,0,44,0,0,0,0,0,148,0,165,0,0,0,44,0,0,0,112,0,0,0,69,0,62,0,228,0,0,0,0,0,214,0,38,0,194,0,38,0,3,0,236,0,0,0,78,0,99,0,67,0,157,0,209,0,221,0,120,0,59,0,28,0,107,0,126,0,222,0,100,0,173,0,96,0,218,0,0,0,243,0,250,0,0,0,198,0,1,0,130,0,228,0,96,0,120,0,72,0,255,0,224,0,21,0,209,0,0,0,248,0,113,0,4,0,116,0,255,0,196,0,47,0,7,0,242,0,184,0,103,0,150,0,117,0,36,0,215,0,93,0,203,0,133,0,211,0,23,0,196,0,11,0,0,0,63,0,53,0,178,0,0,0,104,0,115,0,0,0,15,0,68,0,0,0,72,0,0,0,83,0,36,0,180,0,131,0,120,0,136,0,180,0,8,0,109,0,81,0,154,0,0,0,219,0,161,0,119,0,61,0,235,0,0,0,182,0,22,0,159,0,8,0,0,0,251,0,133,0,192,0,26,0,74,0,60,0,122,0,186,0,71,0,0,0,246,0,116,0,0,0,225,0,40,0,90,0,32,0,165,0,0,0,60,0,0,0,145,0,27,0,118,0);
signal scenario_full  : scenario_type := (241,31,249,31,249,30,153,31,28,31,215,31,153,31,27,31,50,31,50,30,149,31,213,31,31,31,16,31,21,31,70,31,208,31,237,31,237,30,239,31,62,31,31,31,31,30,173,31,144,31,55,31,194,31,194,30,106,31,14,31,228,31,111,31,151,31,19,31,136,31,170,31,170,30,138,31,14,31,67,31,238,31,238,30,234,31,189,31,250,31,182,31,182,30,135,31,125,31,53,31,53,30,217,31,81,31,81,30,10,31,31,31,129,31,42,31,42,30,12,31,249,31,92,31,92,30,21,31,137,31,111,31,48,31,109,31,1,31,201,31,38,31,95,31,90,31,33,31,208,31,240,31,48,31,154,31,64,31,64,30,230,31,78,31,120,31,99,31,99,30,64,31,84,31,84,30,227,31,227,30,227,29,227,28,227,27,166,31,167,31,2,31,160,31,116,31,233,31,129,31,129,30,167,31,3,31,108,31,108,30,96,31,9,31,37,31,97,31,177,31,157,31,2,31,2,30,172,31,172,30,72,31,120,31,127,31,19,31,37,31,201,31,184,31,25,31,104,31,63,31,63,30,18,31,1,31,1,30,209,31,115,31,243,31,243,30,77,31,166,31,109,31,2,31,125,31,125,30,247,31,221,31,221,30,83,31,52,31,181,31,144,31,119,31,247,31,129,31,129,30,129,29,22,31,22,30,1,31,1,30,1,29,191,31,90,31,28,31,131,31,210,31,98,31,154,31,42,31,167,31,103,31,225,31,225,30,225,29,225,28,248,31,178,31,190,31,225,31,74,31,84,31,20,31,124,31,191,31,104,31,201,31,2,31,117,31,52,31,132,31,108,31,108,30,108,29,189,31,189,30,65,31,102,31,102,30,102,29,144,31,12,31,202,31,75,31,75,30,159,31,159,30,42,31,112,31,15,31,226,31,37,31,118,31,214,31,36,31,244,31,28,31,68,31,68,30,43,31,73,31,215,31,215,30,59,31,59,30,59,29,59,28,59,27,59,26,133,31,79,31,79,30,177,31,177,30,79,31,225,31,225,30,225,29,51,31,151,31,151,30,27,31,188,31,231,31,231,30,209,31,106,31,198,31,158,31,139,31,139,30,34,31,34,30,34,29,244,31,244,30,66,31,163,31,156,31,84,31,84,30,226,31,226,30,192,31,180,31,140,31,240,31,49,31,34,31,66,31,214,31,214,30,153,31,122,31,247,31,245,31,245,30,8,31,200,31,229,31,187,31,251,31,161,31,125,31,51,31,5,31,46,31,54,31,18,31,132,31,132,30,11,31,66,31,66,30,130,31,4,31,58,31,100,31,133,31,222,31,253,31,253,30,232,31,145,31,191,31,38,31,148,31,148,30,142,31,174,31,225,31,225,30,186,31,40,31,167,31,167,30,102,31,140,31,96,31,53,31,118,31,118,30,104,31,104,30,245,31,245,30,18,31,88,31,1,31,1,30,52,31,52,30,162,31,253,31,253,30,65,31,203,31,21,31,60,31,60,30,60,29,60,28,246,31,246,30,133,31,111,31,29,31,253,31,92,31,217,31,211,31,182,31,253,31,194,31,194,30,43,31,78,31,79,31,234,31,189,31,131,31,131,30,56,31,150,31,189,31,123,31,108,31,108,30,136,31,67,31,255,31,170,31,170,30,101,31,109,31,158,31,7,31,143,31,182,31,146,31,60,31,30,31,221,31,70,31,165,31,159,31,254,31,222,31,124,31,169,31,227,31,100,31,42,31,42,30,42,29,242,31,47,31,119,31,137,31,137,30,206,31,81,31,212,31,64,31,85,31,216,31,219,31,16,31,16,30,240,31,136,31,205,31,205,30,68,31,121,31,120,31,61,31,61,30,61,29,61,28,151,31,155,31,56,31,198,31,59,31,38,31,113,31,198,31,48,31,128,31,167,31,66,31,66,30,234,31,213,31,213,30,124,31,177,31,177,30,177,29,33,31,33,30,29,31,138,31,151,31,138,31,254,31,217,31,252,31,184,31,148,31,148,30,148,29,174,31,72,31,131,31,111,31,28,31,28,30,159,31,208,31,26,31,19,31,124,31,124,30,201,31,180,31,28,31,231,31,164,31,164,30,191,31,182,31,101,31,101,30,186,31,76,31,148,31,138,31,135,31,192,31,212,31,212,30,127,31,127,30,220,31,162,31,180,31,48,31,48,30,75,31,125,31,125,30,125,29,224,31,112,31,250,31,70,31,44,31,44,30,44,29,148,31,165,31,165,30,44,31,44,30,112,31,112,30,69,31,62,31,228,31,228,30,228,29,214,31,38,31,194,31,38,31,3,31,236,31,236,30,78,31,99,31,67,31,157,31,209,31,221,31,120,31,59,31,28,31,107,31,126,31,222,31,100,31,173,31,96,31,218,31,218,30,243,31,250,31,250,30,198,31,1,31,130,31,228,31,96,31,120,31,72,31,255,31,224,31,21,31,209,31,209,30,248,31,113,31,4,31,116,31,255,31,196,31,47,31,7,31,242,31,184,31,103,31,150,31,117,31,36,31,215,31,93,31,203,31,133,31,211,31,23,31,196,31,11,31,11,30,63,31,53,31,178,31,178,30,104,31,115,31,115,30,15,31,68,31,68,30,72,31,72,30,83,31,36,31,180,31,131,31,120,31,136,31,180,31,8,31,109,31,81,31,154,31,154,30,219,31,161,31,119,31,61,31,235,31,235,30,182,31,22,31,159,31,8,31,8,30,251,31,133,31,192,31,26,31,74,31,60,31,122,31,186,31,71,31,71,30,246,31,116,31,116,30,225,31,40,31,90,31,32,31,165,31,165,30,60,31,60,30,145,31,27,31,118,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
