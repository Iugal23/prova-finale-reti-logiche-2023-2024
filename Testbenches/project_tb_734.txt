-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 391;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (174,0,156,0,0,0,0,0,46,0,0,0,197,0,39,0,221,0,0,0,15,0,146,0,0,0,232,0,146,0,43,0,172,0,246,0,8,0,123,0,99,0,41,0,0,0,113,0,0,0,74,0,199,0,195,0,2,0,189,0,180,0,27,0,0,0,66,0,209,0,0,0,0,0,192,0,149,0,253,0,0,0,219,0,50,0,215,0,102,0,243,0,79,0,158,0,0,0,146,0,142,0,50,0,25,0,0,0,205,0,0,0,206,0,81,0,3,0,0,0,136,0,57,0,5,0,64,0,137,0,0,0,63,0,88,0,233,0,161,0,119,0,180,0,39,0,196,0,43,0,86,0,193,0,47,0,18,0,136,0,102,0,151,0,0,0,247,0,222,0,0,0,97,0,0,0,60,0,9,0,70,0,233,0,0,0,216,0,104,0,181,0,0,0,71,0,186,0,47,0,195,0,246,0,78,0,26,0,0,0,0,0,0,0,145,0,251,0,138,0,234,0,209,0,0,0,147,0,0,0,9,0,0,0,109,0,178,0,149,0,204,0,65,0,196,0,127,0,120,0,57,0,131,0,0,0,147,0,114,0,0,0,44,0,238,0,81,0,226,0,18,0,18,0,28,0,0,0,34,0,85,0,77,0,28,0,14,0,11,0,0,0,9,0,231,0,158,0,50,0,52,0,94,0,21,0,23,0,193,0,0,0,45,0,12,0,42,0,207,0,126,0,143,0,74,0,219,0,150,0,61,0,0,0,106,0,0,0,0,0,213,0,127,0,140,0,47,0,227,0,109,0,0,0,162,0,41,0,93,0,0,0,45,0,192,0,226,0,0,0,0,0,140,0,38,0,8,0,155,0,193,0,21,0,226,0,78,0,51,0,107,0,126,0,202,0,147,0,0,0,189,0,56,0,0,0,247,0,188,0,0,0,67,0,199,0,0,0,102,0,135,0,234,0,178,0,243,0,0,0,3,0,7,0,9,0,172,0,110,0,28,0,20,0,0,0,167,0,229,0,81,0,159,0,218,0,33,0,222,0,152,0,118,0,43,0,232,0,48,0,0,0,57,0,36,0,233,0,52,0,0,0,207,0,193,0,254,0,129,0,156,0,17,0,0,0,99,0,3,0,0,0,14,0,96,0,0,0,215,0,253,0,0,0,0,0,143,0,0,0,130,0,244,0,214,0,138,0,220,0,109,0,0,0,14,0,0,0,231,0,158,0,0,0,218,0,191,0,65,0,155,0,241,0,228,0,90,0,239,0,78,0,86,0,44,0,74,0,163,0,119,0,2,0,0,0,1,0,81,0,74,0,210,0,216,0,122,0,177,0,60,0,24,0,137,0,0,0,0,0,197,0,187,0,220,0,79,0,170,0,0,0,0,0,63,0,160,0,97,0,0,0,75,0,181,0,65,0,104,0,40,0,121,0,186,0,238,0,0,0,237,0,130,0,0,0,86,0,0,0,54,0,166,0,231,0,245,0,34,0,0,0,195,0,149,0,40,0,31,0,121,0,215,0,240,0,249,0,0,0,9,0,173,0,221,0,176,0,21,0,12,0,145,0,0,0,222,0,129,0,31,0,233,0,221,0,63,0,75,0,131,0,0,0,87,0,57,0,0,0,91,0,54,0,69,0,54,0,252,0,0,0,141,0,0,0,238,0,83,0,164,0,80,0,184,0,98,0,238,0,211,0,80,0,201,0,0,0,1,0,0,0,135,0,76,0,83,0,50,0,226,0,141,0,113,0,54,0,76,0,238,0);
signal scenario_full  : scenario_type := (174,31,156,31,156,30,156,29,46,31,46,30,197,31,39,31,221,31,221,30,15,31,146,31,146,30,232,31,146,31,43,31,172,31,246,31,8,31,123,31,99,31,41,31,41,30,113,31,113,30,74,31,199,31,195,31,2,31,189,31,180,31,27,31,27,30,66,31,209,31,209,30,209,29,192,31,149,31,253,31,253,30,219,31,50,31,215,31,102,31,243,31,79,31,158,31,158,30,146,31,142,31,50,31,25,31,25,30,205,31,205,30,206,31,81,31,3,31,3,30,136,31,57,31,5,31,64,31,137,31,137,30,63,31,88,31,233,31,161,31,119,31,180,31,39,31,196,31,43,31,86,31,193,31,47,31,18,31,136,31,102,31,151,31,151,30,247,31,222,31,222,30,97,31,97,30,60,31,9,31,70,31,233,31,233,30,216,31,104,31,181,31,181,30,71,31,186,31,47,31,195,31,246,31,78,31,26,31,26,30,26,29,26,28,145,31,251,31,138,31,234,31,209,31,209,30,147,31,147,30,9,31,9,30,109,31,178,31,149,31,204,31,65,31,196,31,127,31,120,31,57,31,131,31,131,30,147,31,114,31,114,30,44,31,238,31,81,31,226,31,18,31,18,31,28,31,28,30,34,31,85,31,77,31,28,31,14,31,11,31,11,30,9,31,231,31,158,31,50,31,52,31,94,31,21,31,23,31,193,31,193,30,45,31,12,31,42,31,207,31,126,31,143,31,74,31,219,31,150,31,61,31,61,30,106,31,106,30,106,29,213,31,127,31,140,31,47,31,227,31,109,31,109,30,162,31,41,31,93,31,93,30,45,31,192,31,226,31,226,30,226,29,140,31,38,31,8,31,155,31,193,31,21,31,226,31,78,31,51,31,107,31,126,31,202,31,147,31,147,30,189,31,56,31,56,30,247,31,188,31,188,30,67,31,199,31,199,30,102,31,135,31,234,31,178,31,243,31,243,30,3,31,7,31,9,31,172,31,110,31,28,31,20,31,20,30,167,31,229,31,81,31,159,31,218,31,33,31,222,31,152,31,118,31,43,31,232,31,48,31,48,30,57,31,36,31,233,31,52,31,52,30,207,31,193,31,254,31,129,31,156,31,17,31,17,30,99,31,3,31,3,30,14,31,96,31,96,30,215,31,253,31,253,30,253,29,143,31,143,30,130,31,244,31,214,31,138,31,220,31,109,31,109,30,14,31,14,30,231,31,158,31,158,30,218,31,191,31,65,31,155,31,241,31,228,31,90,31,239,31,78,31,86,31,44,31,74,31,163,31,119,31,2,31,2,30,1,31,81,31,74,31,210,31,216,31,122,31,177,31,60,31,24,31,137,31,137,30,137,29,197,31,187,31,220,31,79,31,170,31,170,30,170,29,63,31,160,31,97,31,97,30,75,31,181,31,65,31,104,31,40,31,121,31,186,31,238,31,238,30,237,31,130,31,130,30,86,31,86,30,54,31,166,31,231,31,245,31,34,31,34,30,195,31,149,31,40,31,31,31,121,31,215,31,240,31,249,31,249,30,9,31,173,31,221,31,176,31,21,31,12,31,145,31,145,30,222,31,129,31,31,31,233,31,221,31,63,31,75,31,131,31,131,30,87,31,57,31,57,30,91,31,54,31,69,31,54,31,252,31,252,30,141,31,141,30,238,31,83,31,164,31,80,31,184,31,98,31,238,31,211,31,80,31,201,31,201,30,1,31,1,30,135,31,76,31,83,31,50,31,226,31,141,31,113,31,54,31,76,31,238,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
