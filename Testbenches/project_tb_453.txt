-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 574;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,0,0,115,0,9,0,149,0,240,0,218,0,78,0,2,0,246,0,5,0,138,0,139,0,0,0,0,0,239,0,56,0,7,0,195,0,221,0,138,0,54,0,87,0,25,0,23,0,193,0,84,0,126,0,149,0,83,0,248,0,0,0,126,0,7,0,156,0,0,0,0,0,226,0,130,0,20,0,146,0,161,0,220,0,14,0,68,0,3,0,156,0,90,0,243,0,21,0,0,0,242,0,214,0,0,0,0,0,97,0,51,0,124,0,75,0,0,0,32,0,201,0,79,0,195,0,23,0,19,0,209,0,0,0,175,0,3,0,79,0,105,0,222,0,45,0,173,0,17,0,0,0,33,0,176,0,0,0,33,0,57,0,153,0,163,0,248,0,34,0,176,0,45,0,0,0,0,0,251,0,0,0,144,0,201,0,0,0,0,0,27,0,119,0,156,0,132,0,0,0,0,0,40,0,0,0,243,0,136,0,2,0,165,0,0,0,136,0,168,0,0,0,136,0,213,0,26,0,27,0,159,0,226,0,142,0,9,0,138,0,230,0,171,0,82,0,88,0,233,0,138,0,1,0,194,0,52,0,237,0,201,0,60,0,180,0,37,0,135,0,41,0,96,0,152,0,183,0,39,0,215,0,154,0,29,0,0,0,0,0,0,0,162,0,103,0,41,0,220,0,223,0,116,0,66,0,230,0,144,0,58,0,28,0,18,0,10,0,31,0,134,0,148,0,108,0,0,0,99,0,110,0,129,0,90,0,247,0,0,0,27,0,172,0,64,0,240,0,59,0,208,0,0,0,246,0,115,0,186,0,193,0,7,0,20,0,73,0,215,0,0,0,120,0,62,0,142,0,235,0,149,0,164,0,0,0,124,0,74,0,164,0,163,0,154,0,77,0,20,0,0,0,225,0,38,0,0,0,0,0,0,0,0,0,39,0,124,0,0,0,34,0,53,0,201,0,112,0,6,0,156,0,126,0,103,0,152,0,160,0,242,0,0,0,224,0,169,0,0,0,105,0,26,0,39,0,133,0,169,0,17,0,109,0,0,0,81,0,65,0,117,0,144,0,137,0,218,0,32,0,0,0,14,0,34,0,235,0,0,0,128,0,247,0,20,0,248,0,179,0,0,0,48,0,9,0,0,0,135,0,143,0,215,0,95,0,56,0,0,0,0,0,184,0,106,0,228,0,0,0,0,0,85,0,105,0,114,0,178,0,123,0,0,0,79,0,252,0,155,0,26,0,205,0,0,0,192,0,222,0,101,0,0,0,0,0,0,0,110,0,212,0,170,0,64,0,115,0,193,0,145,0,106,0,135,0,146,0,37,0,0,0,226,0,32,0,100,0,34,0,0,0,26,0,3,0,72,0,226,0,122,0,117,0,110,0,53,0,226,0,0,0,243,0,106,0,0,0,0,0,58,0,0,0,119,0,74,0,0,0,162,0,77,0,119,0,186,0,0,0,23,0,129,0,193,0,178,0,0,0,252,0,0,0,153,0,76,0,0,0,0,0,226,0,222,0,209,0,119,0,253,0,0,0,183,0,0,0,113,0,26,0,198,0,2,0,0,0,234,0,0,0,167,0,19,0,167,0,171,0,0,0,81,0,89,0,0,0,11,0,145,0,254,0,12,0,0,0,249,0,14,0,69,0,9,0,59,0,154,0,118,0,254,0,191,0,214,0,0,0,153,0,0,0,20,0,96,0,58,0,27,0,125,0,82,0,53,0,15,0,100,0,217,0,69,0,204,0,0,0,35,0,143,0,59,0,216,0,229,0,188,0,147,0,0,0,111,0,51,0,0,0,252,0,32,0,132,0,111,0,27,0,140,0,0,0,50,0,81,0,0,0,0,0,0,0,73,0,0,0,132,0,244,0,131,0,173,0,158,0,191,0,140,0,34,0,0,0,75,0,24,0,5,0,30,0,236,0,147,0,167,0,0,0,165,0,151,0,0,0,194,0,95,0,40,0,162,0,179,0,158,0,123,0,163,0,239,0,18,0,146,0,238,0,8,0,0,0,0,0,0,0,181,0,0,0,100,0,5,0,30,0,203,0,234,0,82,0,46,0,38,0,60,0,16,0,4,0,67,0,175,0,149,0,179,0,238,0,29,0,14,0,190,0,0,0,173,0,193,0,104,0,0,0,190,0,0,0,120,0,101,0,141,0,20,0,205,0,153,0,91,0,0,0,0,0,34,0,232,0,0,0,189,0,57,0,132,0,195,0,203,0,0,0,217,0,92,0,53,0,10,0,0,0,135,0,0,0,200,0,0,0,46,0,9,0,90,0,0,0,55,0,229,0,105,0,117,0,0,0,142,0,178,0,90,0,250,0,16,0,70,0,0,0,209,0,0,0,56,0,23,0,113,0,0,0,0,0,0,0,176,0,22,0,201,0,146,0,189,0,196,0,185,0,0,0,211,0,82,0,133,0,0,0,122,0,0,0,104,0,90,0,60,0,199,0,217,0,135,0,139,0,122,0,164,0,176,0,205,0,189,0,160,0,0,0,0,0,154,0,229,0,73,0,0,0,80,0,160,0,106,0,170,0,50,0,235,0,14,0,118,0,0,0,217,0);
signal scenario_full  : scenario_type := (0,0,0,0,115,31,9,31,149,31,240,31,218,31,78,31,2,31,246,31,5,31,138,31,139,31,139,30,139,29,239,31,56,31,7,31,195,31,221,31,138,31,54,31,87,31,25,31,23,31,193,31,84,31,126,31,149,31,83,31,248,31,248,30,126,31,7,31,156,31,156,30,156,29,226,31,130,31,20,31,146,31,161,31,220,31,14,31,68,31,3,31,156,31,90,31,243,31,21,31,21,30,242,31,214,31,214,30,214,29,97,31,51,31,124,31,75,31,75,30,32,31,201,31,79,31,195,31,23,31,19,31,209,31,209,30,175,31,3,31,79,31,105,31,222,31,45,31,173,31,17,31,17,30,33,31,176,31,176,30,33,31,57,31,153,31,163,31,248,31,34,31,176,31,45,31,45,30,45,29,251,31,251,30,144,31,201,31,201,30,201,29,27,31,119,31,156,31,132,31,132,30,132,29,40,31,40,30,243,31,136,31,2,31,165,31,165,30,136,31,168,31,168,30,136,31,213,31,26,31,27,31,159,31,226,31,142,31,9,31,138,31,230,31,171,31,82,31,88,31,233,31,138,31,1,31,194,31,52,31,237,31,201,31,60,31,180,31,37,31,135,31,41,31,96,31,152,31,183,31,39,31,215,31,154,31,29,31,29,30,29,29,29,28,162,31,103,31,41,31,220,31,223,31,116,31,66,31,230,31,144,31,58,31,28,31,18,31,10,31,31,31,134,31,148,31,108,31,108,30,99,31,110,31,129,31,90,31,247,31,247,30,27,31,172,31,64,31,240,31,59,31,208,31,208,30,246,31,115,31,186,31,193,31,7,31,20,31,73,31,215,31,215,30,120,31,62,31,142,31,235,31,149,31,164,31,164,30,124,31,74,31,164,31,163,31,154,31,77,31,20,31,20,30,225,31,38,31,38,30,38,29,38,28,38,27,39,31,124,31,124,30,34,31,53,31,201,31,112,31,6,31,156,31,126,31,103,31,152,31,160,31,242,31,242,30,224,31,169,31,169,30,105,31,26,31,39,31,133,31,169,31,17,31,109,31,109,30,81,31,65,31,117,31,144,31,137,31,218,31,32,31,32,30,14,31,34,31,235,31,235,30,128,31,247,31,20,31,248,31,179,31,179,30,48,31,9,31,9,30,135,31,143,31,215,31,95,31,56,31,56,30,56,29,184,31,106,31,228,31,228,30,228,29,85,31,105,31,114,31,178,31,123,31,123,30,79,31,252,31,155,31,26,31,205,31,205,30,192,31,222,31,101,31,101,30,101,29,101,28,110,31,212,31,170,31,64,31,115,31,193,31,145,31,106,31,135,31,146,31,37,31,37,30,226,31,32,31,100,31,34,31,34,30,26,31,3,31,72,31,226,31,122,31,117,31,110,31,53,31,226,31,226,30,243,31,106,31,106,30,106,29,58,31,58,30,119,31,74,31,74,30,162,31,77,31,119,31,186,31,186,30,23,31,129,31,193,31,178,31,178,30,252,31,252,30,153,31,76,31,76,30,76,29,226,31,222,31,209,31,119,31,253,31,253,30,183,31,183,30,113,31,26,31,198,31,2,31,2,30,234,31,234,30,167,31,19,31,167,31,171,31,171,30,81,31,89,31,89,30,11,31,145,31,254,31,12,31,12,30,249,31,14,31,69,31,9,31,59,31,154,31,118,31,254,31,191,31,214,31,214,30,153,31,153,30,20,31,96,31,58,31,27,31,125,31,82,31,53,31,15,31,100,31,217,31,69,31,204,31,204,30,35,31,143,31,59,31,216,31,229,31,188,31,147,31,147,30,111,31,51,31,51,30,252,31,32,31,132,31,111,31,27,31,140,31,140,30,50,31,81,31,81,30,81,29,81,28,73,31,73,30,132,31,244,31,131,31,173,31,158,31,191,31,140,31,34,31,34,30,75,31,24,31,5,31,30,31,236,31,147,31,167,31,167,30,165,31,151,31,151,30,194,31,95,31,40,31,162,31,179,31,158,31,123,31,163,31,239,31,18,31,146,31,238,31,8,31,8,30,8,29,8,28,181,31,181,30,100,31,5,31,30,31,203,31,234,31,82,31,46,31,38,31,60,31,16,31,4,31,67,31,175,31,149,31,179,31,238,31,29,31,14,31,190,31,190,30,173,31,193,31,104,31,104,30,190,31,190,30,120,31,101,31,141,31,20,31,205,31,153,31,91,31,91,30,91,29,34,31,232,31,232,30,189,31,57,31,132,31,195,31,203,31,203,30,217,31,92,31,53,31,10,31,10,30,135,31,135,30,200,31,200,30,46,31,9,31,90,31,90,30,55,31,229,31,105,31,117,31,117,30,142,31,178,31,90,31,250,31,16,31,70,31,70,30,209,31,209,30,56,31,23,31,113,31,113,30,113,29,113,28,176,31,22,31,201,31,146,31,189,31,196,31,185,31,185,30,211,31,82,31,133,31,133,30,122,31,122,30,104,31,90,31,60,31,199,31,217,31,135,31,139,31,122,31,164,31,176,31,205,31,189,31,160,31,160,30,160,29,154,31,229,31,73,31,73,30,80,31,160,31,106,31,170,31,50,31,235,31,14,31,118,31,118,30,217,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
