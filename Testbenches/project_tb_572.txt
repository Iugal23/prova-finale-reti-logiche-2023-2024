-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 397;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,127,0,177,0,82,0,214,0,0,0,37,0,252,0,188,0,11,0,83,0,41,0,121,0,48,0,110,0,89,0,235,0,121,0,131,0,176,0,0,0,79,0,220,0,0,0,0,0,228,0,82,0,74,0,0,0,8,0,64,0,159,0,121,0,242,0,0,0,162,0,153,0,150,0,64,0,56,0,108,0,180,0,218,0,0,0,5,0,128,0,194,0,77,0,231,0,217,0,210,0,0,0,0,0,206,0,9,0,46,0,117,0,0,0,60,0,171,0,0,0,36,0,42,0,103,0,65,0,179,0,0,0,123,0,88,0,47,0,121,0,0,0,102,0,69,0,0,0,161,0,0,0,78,0,164,0,185,0,0,0,0,0,186,0,89,0,154,0,173,0,173,0,0,0,237,0,175,0,150,0,14,0,0,0,232,0,76,0,46,0,108,0,0,0,88,0,217,0,11,0,192,0,0,0,7,0,0,0,245,0,123,0,59,0,150,0,79,0,39,0,107,0,206,0,173,0,249,0,0,0,158,0,212,0,202,0,73,0,137,0,99,0,0,0,9,0,0,0,145,0,0,0,83,0,81,0,121,0,195,0,0,0,249,0,107,0,0,0,0,0,39,0,86,0,189,0,156,0,52,0,23,0,246,0,227,0,0,0,57,0,0,0,80,0,225,0,64,0,123,0,177,0,0,0,150,0,164,0,112,0,34,0,19,0,0,0,0,0,230,0,116,0,235,0,106,0,152,0,97,0,52,0,230,0,0,0,146,0,94,0,31,0,0,0,26,0,0,0,0,0,0,0,0,0,8,0,10,0,0,0,234,0,159,0,59,0,216,0,198,0,0,0,0,0,0,0,83,0,0,0,119,0,131,0,136,0,146,0,219,0,7,0,0,0,87,0,221,0,0,0,127,0,213,0,70,0,113,0,0,0,92,0,255,0,33,0,0,0,0,0,41,0,16,0,0,0,211,0,0,0,108,0,82,0,44,0,33,0,137,0,217,0,99,0,171,0,0,0,91,0,221,0,253,0,60,0,54,0,185,0,0,0,0,0,0,0,248,0,0,0,113,0,3,0,0,0,0,0,209,0,134,0,0,0,217,0,229,0,204,0,242,0,161,0,112,0,69,0,12,0,191,0,6,0,18,0,9,0,119,0,0,0,49,0,166,0,0,0,84,0,187,0,60,0,0,0,12,0,202,0,239,0,139,0,122,0,0,0,201,0,76,0,92,0,61,0,215,0,29,0,69,0,90,0,0,0,188,0,0,0,124,0,200,0,202,0,171,0,0,0,0,0,196,0,176,0,0,0,245,0,186,0,228,0,128,0,39,0,57,0,75,0,203,0,132,0,21,0,21,0,147,0,6,0,3,0,0,0,147,0,140,0,66,0,79,0,255,0,117,0,114,0,8,0,16,0,26,0,107,0,0,0,15,0,0,0,210,0,0,0,164,0,213,0,0,0,236,0,121,0,0,0,92,0,37,0,186,0,247,0,117,0,56,0,65,0,226,0,56,0,243,0,0,0,0,0,38,0,0,0,0,0,114,0,17,0,127,0,212,0,0,0,246,0,98,0,40,0,35,0,220,0,209,0,171,0,157,0,98,0,86,0,0,0,0,0,98,0,94,0,114,0,152,0,183,0,4,0,106,0,0,0,0,0,189,0,166,0,4,0,0,0,24,0,232,0,0,0,215,0,0,0,210,0,40,0,39,0,113,0,0,0,0,0,68,0,60,0,194,0,11,0,7,0,121,0,207,0,98,0,138,0,133,0,27,0,84,0,223,0,0,0);
signal scenario_full  : scenario_type := (0,0,127,31,177,31,82,31,214,31,214,30,37,31,252,31,188,31,11,31,83,31,41,31,121,31,48,31,110,31,89,31,235,31,121,31,131,31,176,31,176,30,79,31,220,31,220,30,220,29,228,31,82,31,74,31,74,30,8,31,64,31,159,31,121,31,242,31,242,30,162,31,153,31,150,31,64,31,56,31,108,31,180,31,218,31,218,30,5,31,128,31,194,31,77,31,231,31,217,31,210,31,210,30,210,29,206,31,9,31,46,31,117,31,117,30,60,31,171,31,171,30,36,31,42,31,103,31,65,31,179,31,179,30,123,31,88,31,47,31,121,31,121,30,102,31,69,31,69,30,161,31,161,30,78,31,164,31,185,31,185,30,185,29,186,31,89,31,154,31,173,31,173,31,173,30,237,31,175,31,150,31,14,31,14,30,232,31,76,31,46,31,108,31,108,30,88,31,217,31,11,31,192,31,192,30,7,31,7,30,245,31,123,31,59,31,150,31,79,31,39,31,107,31,206,31,173,31,249,31,249,30,158,31,212,31,202,31,73,31,137,31,99,31,99,30,9,31,9,30,145,31,145,30,83,31,81,31,121,31,195,31,195,30,249,31,107,31,107,30,107,29,39,31,86,31,189,31,156,31,52,31,23,31,246,31,227,31,227,30,57,31,57,30,80,31,225,31,64,31,123,31,177,31,177,30,150,31,164,31,112,31,34,31,19,31,19,30,19,29,230,31,116,31,235,31,106,31,152,31,97,31,52,31,230,31,230,30,146,31,94,31,31,31,31,30,26,31,26,30,26,29,26,28,26,27,8,31,10,31,10,30,234,31,159,31,59,31,216,31,198,31,198,30,198,29,198,28,83,31,83,30,119,31,131,31,136,31,146,31,219,31,7,31,7,30,87,31,221,31,221,30,127,31,213,31,70,31,113,31,113,30,92,31,255,31,33,31,33,30,33,29,41,31,16,31,16,30,211,31,211,30,108,31,82,31,44,31,33,31,137,31,217,31,99,31,171,31,171,30,91,31,221,31,253,31,60,31,54,31,185,31,185,30,185,29,185,28,248,31,248,30,113,31,3,31,3,30,3,29,209,31,134,31,134,30,217,31,229,31,204,31,242,31,161,31,112,31,69,31,12,31,191,31,6,31,18,31,9,31,119,31,119,30,49,31,166,31,166,30,84,31,187,31,60,31,60,30,12,31,202,31,239,31,139,31,122,31,122,30,201,31,76,31,92,31,61,31,215,31,29,31,69,31,90,31,90,30,188,31,188,30,124,31,200,31,202,31,171,31,171,30,171,29,196,31,176,31,176,30,245,31,186,31,228,31,128,31,39,31,57,31,75,31,203,31,132,31,21,31,21,31,147,31,6,31,3,31,3,30,147,31,140,31,66,31,79,31,255,31,117,31,114,31,8,31,16,31,26,31,107,31,107,30,15,31,15,30,210,31,210,30,164,31,213,31,213,30,236,31,121,31,121,30,92,31,37,31,186,31,247,31,117,31,56,31,65,31,226,31,56,31,243,31,243,30,243,29,38,31,38,30,38,29,114,31,17,31,127,31,212,31,212,30,246,31,98,31,40,31,35,31,220,31,209,31,171,31,157,31,98,31,86,31,86,30,86,29,98,31,94,31,114,31,152,31,183,31,4,31,106,31,106,30,106,29,189,31,166,31,4,31,4,30,24,31,232,31,232,30,215,31,215,30,210,31,40,31,39,31,113,31,113,30,113,29,68,31,60,31,194,31,11,31,7,31,121,31,207,31,98,31,138,31,133,31,27,31,84,31,223,31,223,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
