-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 807;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (88,0,114,0,100,0,95,0,230,0,0,0,17,0,10,0,152,0,163,0,186,0,237,0,111,0,40,0,0,0,135,0,0,0,114,0,152,0,239,0,231,0,125,0,217,0,0,0,194,0,50,0,38,0,74,0,96,0,144,0,0,0,0,0,0,0,150,0,81,0,151,0,242,0,80,0,69,0,193,0,207,0,79,0,76,0,56,0,250,0,109,0,0,0,0,0,47,0,116,0,222,0,0,0,19,0,48,0,0,0,222,0,170,0,30,0,237,0,251,0,0,0,221,0,178,0,10,0,184,0,136,0,148,0,0,0,103,0,77,0,0,0,85,0,117,0,78,0,146,0,182,0,0,0,15,0,231,0,219,0,226,0,29,0,0,0,0,0,173,0,42,0,0,0,152,0,59,0,224,0,180,0,56,0,57,0,175,0,195,0,82,0,170,0,57,0,0,0,102,0,0,0,251,0,0,0,0,0,42,0,216,0,65,0,151,0,98,0,113,0,0,0,4,0,183,0,204,0,0,0,214,0,240,0,109,0,0,0,96,0,13,0,47,0,27,0,60,0,243,0,0,0,197,0,72,0,93,0,99,0,0,0,161,0,78,0,22,0,0,0,0,0,191,0,77,0,224,0,81,0,252,0,89,0,121,0,255,0,97,0,0,0,0,0,0,0,180,0,222,0,182,0,92,0,216,0,0,0,0,0,138,0,244,0,119,0,83,0,0,0,165,0,75,0,83,0,173,0,0,0,167,0,252,0,77,0,27,0,253,0,0,0,147,0,0,0,20,0,247,0,31,0,59,0,0,0,50,0,0,0,141,0,140,0,40,0,212,0,174,0,0,0,130,0,11,0,134,0,249,0,223,0,122,0,126,0,255,0,0,0,0,0,17,0,0,0,0,0,115,0,190,0,119,0,141,0,186,0,99,0,70,0,0,0,89,0,213,0,152,0,0,0,0,0,0,0,124,0,0,0,42,0,102,0,57,0,231,0,210,0,0,0,53,0,30,0,156,0,240,0,63,0,30,0,43,0,181,0,53,0,0,0,239,0,94,0,0,0,13,0,163,0,207,0,0,0,174,0,161,0,136,0,0,0,154,0,14,0,30,0,0,0,88,0,67,0,139,0,0,0,152,0,185,0,34,0,208,0,8,0,233,0,220,0,193,0,234,0,172,0,109,0,0,0,197,0,2,0,20,0,0,0,26,0,46,0,148,0,1,0,98,0,169,0,123,0,127,0,41,0,27,0,137,0,95,0,0,0,138,0,136,0,110,0,37,0,0,0,158,0,163,0,0,0,0,0,130,0,0,0,233,0,0,0,0,0,7,0,131,0,53,0,0,0,181,0,88,0,0,0,126,0,38,0,223,0,158,0,77,0,122,0,71,0,0,0,73,0,203,0,21,0,0,0,0,0,0,0,156,0,167,0,233,0,47,0,229,0,76,0,115,0,0,0,229,0,62,0,74,0,0,0,10,0,64,0,183,0,96,0,174,0,148,0,0,0,0,0,138,0,212,0,167,0,0,0,0,0,86,0,48,0,4,0,177,0,135,0,0,0,177,0,25,0,0,0,0,0,0,0,153,0,74,0,161,0,243,0,45,0,198,0,140,0,203,0,53,0,145,0,132,0,96,0,0,0,155,0,0,0,207,0,35,0,124,0,138,0,220,0,147,0,135,0,196,0,69,0,174,0,252,0,87,0,47,0,217,0,165,0,181,0,245,0,91,0,13,0,0,0,181,0,7,0,196,0,0,0,38,0,82,0,232,0,196,0,0,0,27,0,45,0,177,0,119,0,0,0,120,0,0,0,0,0,0,0,0,0,72,0,54,0,112,0,146,0,127,0,0,0,182,0,15,0,69,0,233,0,0,0,16,0,145,0,241,0,0,0,115,0,101,0,172,0,167,0,18,0,0,0,178,0,34,0,9,0,151,0,0,0,38,0,84,0,104,0,231,0,174,0,152,0,29,0,200,0,0,0,117,0,64,0,99,0,145,0,41,0,92,0,22,0,127,0,0,0,107,0,103,0,0,0,113,0,0,0,181,0,90,0,116,0,251,0,0,0,237,0,0,0,163,0,239,0,0,0,233,0,192,0,81,0,252,0,0,0,105,0,0,0,226,0,175,0,175,0,98,0,0,0,203,0,131,0,252,0,164,0,161,0,115,0,153,0,0,0,110,0,79,0,146,0,208,0,74,0,45,0,105,0,0,0,71,0,19,0,25,0,10,0,147,0,43,0,171,0,82,0,84,0,213,0,128,0,91,0,0,0,204,0,196,0,197,0,215,0,0,0,0,0,69,0,110,0,136,0,98,0,113,0,191,0,0,0,89,0,200,0,199,0,230,0,71,0,41,0,14,0,67,0,159,0,16,0,77,0,196,0,223,0,0,0,0,0,161,0,26,0,117,0,29,0,48,0,17,0,60,0,147,0,138,0,0,0,236,0,158,0,139,0,235,0,149,0,140,0,0,0,233,0,226,0,83,0,221,0,72,0,192,0,27,0,98,0,232,0,249,0,253,0,181,0,17,0,0,0,0,0,0,0,0,0,226,0,0,0,114,0,147,0,217,0,185,0,159,0,42,0,2,0,122,0,0,0,44,0,188,0,134,0,0,0,189,0,125,0,202,0,207,0,28,0,24,0,152,0,200,0,139,0,0,0,28,0,205,0,237,0,170,0,185,0,0,0,231,0,82,0,201,0,121,0,8,0,0,0,169,0,0,0,234,0,22,0,0,0,0,0,241,0,39,0,175,0,0,0,33,0,194,0,196,0,0,0,184,0,222,0,112,0,237,0,73,0,31,0,186,0,210,0,160,0,131,0,62,0,107,0,76,0,121,0,48,0,0,0,244,0,0,0,173,0,127,0,65,0,0,0,167,0,11,0,37,0,0,0,77,0,207,0,0,0,119,0,170,0,123,0,199,0,4,0,134,0,20,0,43,0,136,0,254,0,149,0,105,0,97,0,34,0,172,0,209,0,98,0,148,0,0,0,0,0,71,0,235,0,238,0,152,0,36,0,226,0,58,0,200,0,16,0,228,0,9,0,63,0,228,0,72,0,54,0,82,0,111,0,233,0,0,0,196,0,186,0,15,0,0,0,0,0,83,0,158,0,122,0,0,0,0,0,127,0,245,0,52,0,0,0,204,0,26,0,206,0,151,0,242,0,168,0,0,0,0,0,161,0,0,0,188,0,219,0,151,0,125,0,31,0,100,0,0,0,0,0,110,0,84,0,221,0,0,0,0,0,0,0,33,0,154,0,171,0,228,0,0,0,29,0,1,0,57,0,193,0,0,0,169,0,245,0,159,0,215,0,56,0,169,0,121,0,231,0,0,0,123,0,0,0,0,0,199,0,207,0,151,0,236,0,108,0,0,0,205,0,110,0,0,0,8,0,155,0,0,0,0,0,149,0,133,0,244,0,0,0,179,0,107,0,144,0,88,0,50,0,89,0,73,0,43,0,5,0,239,0,209,0,62,0,11,0,101,0,80,0,39,0,0,0,144,0,180,0,29,0,186,0,165,0,89,0,123,0,134,0,0,0,0,0,180,0,106,0,78,0,7,0,131,0,52,0,0,0,119,0,51,0,237,0,2,0,0,0,0,0,145,0,224,0,0,0,0,0,212,0);
signal scenario_full  : scenario_type := (88,31,114,31,100,31,95,31,230,31,230,30,17,31,10,31,152,31,163,31,186,31,237,31,111,31,40,31,40,30,135,31,135,30,114,31,152,31,239,31,231,31,125,31,217,31,217,30,194,31,50,31,38,31,74,31,96,31,144,31,144,30,144,29,144,28,150,31,81,31,151,31,242,31,80,31,69,31,193,31,207,31,79,31,76,31,56,31,250,31,109,31,109,30,109,29,47,31,116,31,222,31,222,30,19,31,48,31,48,30,222,31,170,31,30,31,237,31,251,31,251,30,221,31,178,31,10,31,184,31,136,31,148,31,148,30,103,31,77,31,77,30,85,31,117,31,78,31,146,31,182,31,182,30,15,31,231,31,219,31,226,31,29,31,29,30,29,29,173,31,42,31,42,30,152,31,59,31,224,31,180,31,56,31,57,31,175,31,195,31,82,31,170,31,57,31,57,30,102,31,102,30,251,31,251,30,251,29,42,31,216,31,65,31,151,31,98,31,113,31,113,30,4,31,183,31,204,31,204,30,214,31,240,31,109,31,109,30,96,31,13,31,47,31,27,31,60,31,243,31,243,30,197,31,72,31,93,31,99,31,99,30,161,31,78,31,22,31,22,30,22,29,191,31,77,31,224,31,81,31,252,31,89,31,121,31,255,31,97,31,97,30,97,29,97,28,180,31,222,31,182,31,92,31,216,31,216,30,216,29,138,31,244,31,119,31,83,31,83,30,165,31,75,31,83,31,173,31,173,30,167,31,252,31,77,31,27,31,253,31,253,30,147,31,147,30,20,31,247,31,31,31,59,31,59,30,50,31,50,30,141,31,140,31,40,31,212,31,174,31,174,30,130,31,11,31,134,31,249,31,223,31,122,31,126,31,255,31,255,30,255,29,17,31,17,30,17,29,115,31,190,31,119,31,141,31,186,31,99,31,70,31,70,30,89,31,213,31,152,31,152,30,152,29,152,28,124,31,124,30,42,31,102,31,57,31,231,31,210,31,210,30,53,31,30,31,156,31,240,31,63,31,30,31,43,31,181,31,53,31,53,30,239,31,94,31,94,30,13,31,163,31,207,31,207,30,174,31,161,31,136,31,136,30,154,31,14,31,30,31,30,30,88,31,67,31,139,31,139,30,152,31,185,31,34,31,208,31,8,31,233,31,220,31,193,31,234,31,172,31,109,31,109,30,197,31,2,31,20,31,20,30,26,31,46,31,148,31,1,31,98,31,169,31,123,31,127,31,41,31,27,31,137,31,95,31,95,30,138,31,136,31,110,31,37,31,37,30,158,31,163,31,163,30,163,29,130,31,130,30,233,31,233,30,233,29,7,31,131,31,53,31,53,30,181,31,88,31,88,30,126,31,38,31,223,31,158,31,77,31,122,31,71,31,71,30,73,31,203,31,21,31,21,30,21,29,21,28,156,31,167,31,233,31,47,31,229,31,76,31,115,31,115,30,229,31,62,31,74,31,74,30,10,31,64,31,183,31,96,31,174,31,148,31,148,30,148,29,138,31,212,31,167,31,167,30,167,29,86,31,48,31,4,31,177,31,135,31,135,30,177,31,25,31,25,30,25,29,25,28,153,31,74,31,161,31,243,31,45,31,198,31,140,31,203,31,53,31,145,31,132,31,96,31,96,30,155,31,155,30,207,31,35,31,124,31,138,31,220,31,147,31,135,31,196,31,69,31,174,31,252,31,87,31,47,31,217,31,165,31,181,31,245,31,91,31,13,31,13,30,181,31,7,31,196,31,196,30,38,31,82,31,232,31,196,31,196,30,27,31,45,31,177,31,119,31,119,30,120,31,120,30,120,29,120,28,120,27,72,31,54,31,112,31,146,31,127,31,127,30,182,31,15,31,69,31,233,31,233,30,16,31,145,31,241,31,241,30,115,31,101,31,172,31,167,31,18,31,18,30,178,31,34,31,9,31,151,31,151,30,38,31,84,31,104,31,231,31,174,31,152,31,29,31,200,31,200,30,117,31,64,31,99,31,145,31,41,31,92,31,22,31,127,31,127,30,107,31,103,31,103,30,113,31,113,30,181,31,90,31,116,31,251,31,251,30,237,31,237,30,163,31,239,31,239,30,233,31,192,31,81,31,252,31,252,30,105,31,105,30,226,31,175,31,175,31,98,31,98,30,203,31,131,31,252,31,164,31,161,31,115,31,153,31,153,30,110,31,79,31,146,31,208,31,74,31,45,31,105,31,105,30,71,31,19,31,25,31,10,31,147,31,43,31,171,31,82,31,84,31,213,31,128,31,91,31,91,30,204,31,196,31,197,31,215,31,215,30,215,29,69,31,110,31,136,31,98,31,113,31,191,31,191,30,89,31,200,31,199,31,230,31,71,31,41,31,14,31,67,31,159,31,16,31,77,31,196,31,223,31,223,30,223,29,161,31,26,31,117,31,29,31,48,31,17,31,60,31,147,31,138,31,138,30,236,31,158,31,139,31,235,31,149,31,140,31,140,30,233,31,226,31,83,31,221,31,72,31,192,31,27,31,98,31,232,31,249,31,253,31,181,31,17,31,17,30,17,29,17,28,17,27,226,31,226,30,114,31,147,31,217,31,185,31,159,31,42,31,2,31,122,31,122,30,44,31,188,31,134,31,134,30,189,31,125,31,202,31,207,31,28,31,24,31,152,31,200,31,139,31,139,30,28,31,205,31,237,31,170,31,185,31,185,30,231,31,82,31,201,31,121,31,8,31,8,30,169,31,169,30,234,31,22,31,22,30,22,29,241,31,39,31,175,31,175,30,33,31,194,31,196,31,196,30,184,31,222,31,112,31,237,31,73,31,31,31,186,31,210,31,160,31,131,31,62,31,107,31,76,31,121,31,48,31,48,30,244,31,244,30,173,31,127,31,65,31,65,30,167,31,11,31,37,31,37,30,77,31,207,31,207,30,119,31,170,31,123,31,199,31,4,31,134,31,20,31,43,31,136,31,254,31,149,31,105,31,97,31,34,31,172,31,209,31,98,31,148,31,148,30,148,29,71,31,235,31,238,31,152,31,36,31,226,31,58,31,200,31,16,31,228,31,9,31,63,31,228,31,72,31,54,31,82,31,111,31,233,31,233,30,196,31,186,31,15,31,15,30,15,29,83,31,158,31,122,31,122,30,122,29,127,31,245,31,52,31,52,30,204,31,26,31,206,31,151,31,242,31,168,31,168,30,168,29,161,31,161,30,188,31,219,31,151,31,125,31,31,31,100,31,100,30,100,29,110,31,84,31,221,31,221,30,221,29,221,28,33,31,154,31,171,31,228,31,228,30,29,31,1,31,57,31,193,31,193,30,169,31,245,31,159,31,215,31,56,31,169,31,121,31,231,31,231,30,123,31,123,30,123,29,199,31,207,31,151,31,236,31,108,31,108,30,205,31,110,31,110,30,8,31,155,31,155,30,155,29,149,31,133,31,244,31,244,30,179,31,107,31,144,31,88,31,50,31,89,31,73,31,43,31,5,31,239,31,209,31,62,31,11,31,101,31,80,31,39,31,39,30,144,31,180,31,29,31,186,31,165,31,89,31,123,31,134,31,134,30,134,29,180,31,106,31,78,31,7,31,131,31,52,31,52,30,119,31,51,31,237,31,2,31,2,30,2,29,145,31,224,31,224,30,224,29,212,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
