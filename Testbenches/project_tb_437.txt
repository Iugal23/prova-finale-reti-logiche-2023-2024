-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 504;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (202,0,167,0,203,0,112,0,6,0,46,0,171,0,171,0,0,0,0,0,34,0,0,0,97,0,0,0,42,0,179,0,132,0,63,0,130,0,83,0,54,0,47,0,0,0,230,0,42,0,33,0,146,0,148,0,0,0,212,0,192,0,0,0,0,0,187,0,78,0,122,0,0,0,0,0,138,0,130,0,192,0,152,0,0,0,210,0,99,0,0,0,107,0,186,0,241,0,178,0,62,0,0,0,7,0,84,0,0,0,114,0,76,0,184,0,204,0,67,0,63,0,85,0,102,0,179,0,0,0,23,0,145,0,231,0,163,0,0,0,200,0,119,0,169,0,211,0,183,0,241,0,31,0,115,0,0,0,179,0,249,0,125,0,36,0,5,0,0,0,54,0,156,0,139,0,87,0,254,0,0,0,98,0,142,0,125,0,193,0,0,0,13,0,49,0,201,0,0,0,40,0,98,0,152,0,0,0,171,0,0,0,215,0,200,0,0,0,220,0,0,0,137,0,65,0,0,0,15,0,0,0,228,0,83,0,37,0,166,0,144,0,113,0,4,0,0,0,199,0,173,0,0,0,247,0,248,0,142,0,152,0,66,0,251,0,176,0,250,0,201,0,149,0,0,0,25,0,0,0,199,0,94,0,0,0,141,0,176,0,90,0,80,0,174,0,44,0,0,0,210,0,97,0,195,0,231,0,0,0,211,0,0,0,76,0,76,0,172,0,91,0,0,0,0,0,48,0,94,0,20,0,0,0,164,0,154,0,84,0,225,0,7,0,0,0,96,0,0,0,63,0,248,0,19,0,61,0,18,0,144,0,0,0,67,0,109,0,11,0,236,0,136,0,191,0,197,0,97,0,0,0,222,0,187,0,118,0,37,0,4,0,0,0,172,0,0,0,168,0,214,0,210,0,13,0,136,0,48,0,0,0,159,0,0,0,91,0,0,0,195,0,33,0,60,0,249,0,7,0,186,0,175,0,27,0,203,0,153,0,76,0,174,0,89,0,252,0,67,0,207,0,80,0,0,0,205,0,0,0,134,0,144,0,101,0,208,0,0,0,141,0,241,0,175,0,233,0,60,0,161,0,235,0,0,0,224,0,0,0,0,0,6,0,22,0,0,0,100,0,255,0,1,0,149,0,20,0,217,0,15,0,6,0,0,0,10,0,92,0,147,0,36,0,187,0,42,0,0,0,69,0,107,0,61,0,224,0,138,0,253,0,104,0,168,0,0,0,113,0,127,0,107,0,37,0,39,0,0,0,0,0,155,0,120,0,137,0,0,0,23,0,71,0,0,0,161,0,178,0,137,0,121,0,124,0,192,0,253,0,21,0,76,0,228,0,116,0,28,0,136,0,199,0,140,0,211,0,21,0,63,0,199,0,118,0,235,0,95,0,64,0,0,0,185,0,231,0,209,0,0,0,143,0,236,0,0,0,209,0,152,0,149,0,0,0,77,0,105,0,233,0,232,0,153,0,22,0,0,0,159,0,103,0,32,0,0,0,186,0,240,0,5,0,246,0,0,0,186,0,149,0,0,0,158,0,0,0,112,0,8,0,119,0,244,0,208,0,222,0,0,0,57,0,72,0,247,0,125,0,16,0,168,0,14,0,83,0,0,0,0,0,78,0,48,0,208,0,213,0,36,0,55,0,91,0,0,0,0,0,78,0,226,0,5,0,0,0,0,0,118,0,86,0,0,0,119,0,39,0,137,0,146,0,7,0,71,0,134,0,58,0,117,0,0,0,20,0,0,0,111,0,0,0,220,0,134,0,28,0,0,0,53,0,0,0,3,0,27,0,81,0,0,0,220,0,143,0,64,0,0,0,0,0,0,0,171,0,80,0,156,0,0,0,8,0,232,0,53,0,0,0,0,0,183,0,0,0,114,0,159,0,0,0,0,0,0,0,200,0,82,0,187,0,115,0,164,0,149,0,0,0,0,0,14,0,255,0,173,0,0,0,136,0,51,0,91,0,250,0,157,0,35,0,106,0,254,0,0,0,154,0,227,0,185,0,175,0,13,0,191,0,160,0,0,0,0,0,101,0,66,0,0,0,39,0,171,0,0,0,39,0,0,0,196,0,81,0,252,0,128,0,147,0,197,0,119,0,0,0,71,0,0,0,192,0,94,0,54,0,74,0,125,0,148,0,36,0,161,0,128,0,137,0,12,0,93,0,8,0,88,0,15,0,137,0,151,0,8,0,135,0,68,0,76,0,51,0,108,0,243,0,175,0,243,0,186,0,0,0,106,0,161,0,0,0,4,0);
signal scenario_full  : scenario_type := (202,31,167,31,203,31,112,31,6,31,46,31,171,31,171,31,171,30,171,29,34,31,34,30,97,31,97,30,42,31,179,31,132,31,63,31,130,31,83,31,54,31,47,31,47,30,230,31,42,31,33,31,146,31,148,31,148,30,212,31,192,31,192,30,192,29,187,31,78,31,122,31,122,30,122,29,138,31,130,31,192,31,152,31,152,30,210,31,99,31,99,30,107,31,186,31,241,31,178,31,62,31,62,30,7,31,84,31,84,30,114,31,76,31,184,31,204,31,67,31,63,31,85,31,102,31,179,31,179,30,23,31,145,31,231,31,163,31,163,30,200,31,119,31,169,31,211,31,183,31,241,31,31,31,115,31,115,30,179,31,249,31,125,31,36,31,5,31,5,30,54,31,156,31,139,31,87,31,254,31,254,30,98,31,142,31,125,31,193,31,193,30,13,31,49,31,201,31,201,30,40,31,98,31,152,31,152,30,171,31,171,30,215,31,200,31,200,30,220,31,220,30,137,31,65,31,65,30,15,31,15,30,228,31,83,31,37,31,166,31,144,31,113,31,4,31,4,30,199,31,173,31,173,30,247,31,248,31,142,31,152,31,66,31,251,31,176,31,250,31,201,31,149,31,149,30,25,31,25,30,199,31,94,31,94,30,141,31,176,31,90,31,80,31,174,31,44,31,44,30,210,31,97,31,195,31,231,31,231,30,211,31,211,30,76,31,76,31,172,31,91,31,91,30,91,29,48,31,94,31,20,31,20,30,164,31,154,31,84,31,225,31,7,31,7,30,96,31,96,30,63,31,248,31,19,31,61,31,18,31,144,31,144,30,67,31,109,31,11,31,236,31,136,31,191,31,197,31,97,31,97,30,222,31,187,31,118,31,37,31,4,31,4,30,172,31,172,30,168,31,214,31,210,31,13,31,136,31,48,31,48,30,159,31,159,30,91,31,91,30,195,31,33,31,60,31,249,31,7,31,186,31,175,31,27,31,203,31,153,31,76,31,174,31,89,31,252,31,67,31,207,31,80,31,80,30,205,31,205,30,134,31,144,31,101,31,208,31,208,30,141,31,241,31,175,31,233,31,60,31,161,31,235,31,235,30,224,31,224,30,224,29,6,31,22,31,22,30,100,31,255,31,1,31,149,31,20,31,217,31,15,31,6,31,6,30,10,31,92,31,147,31,36,31,187,31,42,31,42,30,69,31,107,31,61,31,224,31,138,31,253,31,104,31,168,31,168,30,113,31,127,31,107,31,37,31,39,31,39,30,39,29,155,31,120,31,137,31,137,30,23,31,71,31,71,30,161,31,178,31,137,31,121,31,124,31,192,31,253,31,21,31,76,31,228,31,116,31,28,31,136,31,199,31,140,31,211,31,21,31,63,31,199,31,118,31,235,31,95,31,64,31,64,30,185,31,231,31,209,31,209,30,143,31,236,31,236,30,209,31,152,31,149,31,149,30,77,31,105,31,233,31,232,31,153,31,22,31,22,30,159,31,103,31,32,31,32,30,186,31,240,31,5,31,246,31,246,30,186,31,149,31,149,30,158,31,158,30,112,31,8,31,119,31,244,31,208,31,222,31,222,30,57,31,72,31,247,31,125,31,16,31,168,31,14,31,83,31,83,30,83,29,78,31,48,31,208,31,213,31,36,31,55,31,91,31,91,30,91,29,78,31,226,31,5,31,5,30,5,29,118,31,86,31,86,30,119,31,39,31,137,31,146,31,7,31,71,31,134,31,58,31,117,31,117,30,20,31,20,30,111,31,111,30,220,31,134,31,28,31,28,30,53,31,53,30,3,31,27,31,81,31,81,30,220,31,143,31,64,31,64,30,64,29,64,28,171,31,80,31,156,31,156,30,8,31,232,31,53,31,53,30,53,29,183,31,183,30,114,31,159,31,159,30,159,29,159,28,200,31,82,31,187,31,115,31,164,31,149,31,149,30,149,29,14,31,255,31,173,31,173,30,136,31,51,31,91,31,250,31,157,31,35,31,106,31,254,31,254,30,154,31,227,31,185,31,175,31,13,31,191,31,160,31,160,30,160,29,101,31,66,31,66,30,39,31,171,31,171,30,39,31,39,30,196,31,81,31,252,31,128,31,147,31,197,31,119,31,119,30,71,31,71,30,192,31,94,31,54,31,74,31,125,31,148,31,36,31,161,31,128,31,137,31,12,31,93,31,8,31,88,31,15,31,137,31,151,31,8,31,135,31,68,31,76,31,51,31,108,31,243,31,175,31,243,31,186,31,186,30,106,31,161,31,161,30,4,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
