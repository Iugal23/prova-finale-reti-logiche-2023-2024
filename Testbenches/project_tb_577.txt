-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 870;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (14,0,0,0,44,0,80,0,32,0,187,0,50,0,0,0,9,0,156,0,91,0,68,0,35,0,198,0,40,0,54,0,156,0,151,0,0,0,118,0,147,0,207,0,0,0,94,0,250,0,189,0,33,0,209,0,0,0,147,0,23,0,186,0,176,0,0,0,0,0,149,0,0,0,216,0,135,0,16,0,98,0,0,0,137,0,0,0,123,0,92,0,238,0,139,0,57,0,189,0,121,0,254,0,15,0,135,0,158,0,0,0,0,0,51,0,217,0,0,0,15,0,133,0,0,0,48,0,168,0,42,0,121,0,106,0,90,0,102,0,16,0,109,0,80,0,0,0,2,0,0,0,60,0,0,0,209,0,226,0,218,0,0,0,220,0,0,0,0,0,129,0,181,0,78,0,114,0,183,0,0,0,0,0,15,0,184,0,144,0,239,0,194,0,0,0,0,0,86,0,0,0,239,0,195,0,4,0,0,0,240,0,194,0,112,0,139,0,10,0,109,0,0,0,130,0,130,0,11,0,237,0,31,0,162,0,16,0,24,0,0,0,33,0,47,0,63,0,146,0,0,0,83,0,0,0,181,0,95,0,25,0,21,0,5,0,0,0,0,0,243,0,129,0,8,0,232,0,20,0,66,0,58,0,125,0,101,0,15,0,66,0,37,0,26,0,82,0,6,0,62,0,249,0,207,0,229,0,157,0,137,0,89,0,48,0,93,0,0,0,46,0,131,0,194,0,196,0,127,0,72,0,219,0,24,0,0,0,204,0,82,0,3,0,234,0,0,0,82,0,0,0,0,0,0,0,194,0,80,0,0,0,75,0,181,0,254,0,83,0,114,0,217,0,45,0,111,0,13,0,0,0,51,0,41,0,76,0,0,0,0,0,224,0,146,0,0,0,168,0,44,0,0,0,136,0,116,0,221,0,3,0,48,0,132,0,113,0,117,0,161,0,77,0,250,0,0,0,190,0,0,0,157,0,25,0,23,0,248,0,68,0,94,0,14,0,21,0,35,0,11,0,122,0,187,0,0,0,0,0,181,0,0,0,24,0,134,0,0,0,0,0,28,0,154,0,62,0,249,0,171,0,84,0,17,0,212,0,122,0,152,0,4,0,151,0,0,0,215,0,0,0,90,0,8,0,94,0,68,0,49,0,18,0,34,0,0,0,0,0,98,0,56,0,0,0,77,0,13,0,0,0,0,0,58,0,50,0,0,0,0,0,233,0,196,0,0,0,210,0,69,0,102,0,0,0,24,0,224,0,41,0,118,0,24,0,96,0,0,0,4,0,133,0,133,0,153,0,109,0,17,0,34,0,119,0,174,0,17,0,0,0,102,0,194,0,14,0,158,0,163,0,116,0,183,0,54,0,207,0,138,0,48,0,119,0,0,0,101,0,128,0,181,0,251,0,253,0,0,0,21,0,53,0,20,0,191,0,72,0,0,0,177,0,240,0,5,0,222,0,160,0,85,0,0,0,202,0,0,0,95,0,6,0,149,0,26,0,177,0,94,0,0,0,0,0,141,0,22,0,6,0,57,0,29,0,237,0,94,0,0,0,129,0,40,0,0,0,0,0,83,0,85,0,200,0,21,0,158,0,152,0,7,0,104,0,0,0,215,0,29,0,31,0,0,0,83,0,65,0,145,0,213,0,0,0,193,0,0,0,117,0,105,0,170,0,0,0,26,0,233,0,243,0,116,0,2,0,0,0,0,0,188,0,192,0,229,0,0,0,104,0,0,0,142,0,0,0,161,0,31,0,126,0,0,0,219,0,46,0,0,0,41,0,208,0,0,0,148,0,184,0,0,0,0,0,30,0,236,0,250,0,204,0,0,0,22,0,45,0,89,0,50,0,13,0,33,0,0,0,0,0,0,0,124,0,64,0,139,0,47,0,116,0,37,0,112,0,130,0,69,0,198,0,2,0,35,0,146,0,15,0,171,0,118,0,0,0,248,0,0,0,186,0,121,0,111,0,2,0,0,0,0,0,184,0,218,0,0,0,83,0,148,0,0,0,0,0,19,0,61,0,150,0,60,0,199,0,56,0,57,0,131,0,184,0,115,0,131,0,92,0,96,0,201,0,109,0,51,0,0,0,138,0,253,0,120,0,36,0,0,0,0,0,68,0,229,0,0,0,0,0,192,0,242,0,67,0,163,0,106,0,0,0,155,0,27,0,129,0,160,0,234,0,18,0,0,0,70,0,255,0,200,0,46,0,0,0,228,0,155,0,52,0,0,0,0,0,222,0,203,0,129,0,0,0,94,0,139,0,181,0,113,0,0,0,171,0,48,0,12,0,35,0,234,0,24,0,0,0,0,0,76,0,203,0,60,0,216,0,52,0,68,0,17,0,73,0,125,0,235,0,174,0,0,0,248,0,66,0,160,0,141,0,0,0,219,0,0,0,182,0,113,0,48,0,157,0,114,0,0,0,115,0,0,0,0,0,95,0,116,0,172,0,0,0,134,0,160,0,91,0,0,0,0,0,146,0,237,0,0,0,248,0,36,0,0,0,0,0,50,0,0,0,32,0,236,0,217,0,0,0,92,0,89,0,0,0,5,0,36,0,116,0,45,0,202,0,117,0,189,0,0,0,0,0,47,0,30,0,153,0,153,0,216,0,0,0,70,0,0,0,244,0,0,0,0,0,0,0,250,0,128,0,180,0,134,0,150,0,241,0,44,0,0,0,57,0,0,0,110,0,208,0,142,0,230,0,47,0,49,0,136,0,254,0,151,0,67,0,1,0,194,0,246,0,109,0,139,0,237,0,196,0,182,0,75,0,20,0,29,0,157,0,0,0,249,0,129,0,159,0,1,0,70,0,115,0,0,0,133,0,170,0,98,0,48,0,102,0,5,0,192,0,85,0,90,0,0,0,29,0,9,0,183,0,209,0,19,0,111,0,61,0,207,0,121,0,0,0,0,0,147,0,206,0,172,0,160,0,157,0,156,0,0,0,20,0,239,0,170,0,141,0,151,0,28,0,20,0,188,0,128,0,39,0,0,0,94,0,164,0,16,0,142,0,248,0,240,0,0,0,153,0,118,0,249,0,16,0,92,0,39,0,177,0,31,0,209,0,167,0,8,0,28,0,31,0,100,0,31,0,0,0,62,0,36,0,47,0,219,0,0,0,166,0,127,0,139,0,173,0,240,0,131,0,251,0,224,0,27,0,128,0,22,0,153,0,0,0,0,0,137,0,0,0,77,0,142,0,120,0,237,0,77,0,1,0,196,0,0,0,198,0,169,0,234,0,71,0,190,0,238,0,0,0,77,0,245,0,124,0,15,0,176,0,0,0,0,0,26,0,79,0,0,0,176,0,0,0,79,0,137,0,120,0,0,0,35,0,247,0,68,0,212,0,91,0,0,0,169,0,123,0,30,0,99,0,247,0,125,0,0,0,88,0,48,0,40,0,43,0,199,0,116,0,150,0,0,0,114,0,0,0,0,0,66,0,236,0,0,0,40,0,222,0,0,0,3,0,40,0,41,0,71,0,113,0,14,0,212,0,230,0,221,0,192,0,145,0,156,0,237,0,244,0,112,0,76,0,44,0,179,0,191,0,167,0,32,0,138,0,65,0,31,0,0,0,162,0,0,0,32,0,67,0,0,0,0,0,142,0,114,0,0,0,111,0,0,0,231,0,186,0,204,0,173,0,0,0,234,0,154,0,54,0,0,0,141,0,117,0,194,0,54,0,0,0,0,0,0,0,78,0,23,0,46,0,117,0,224,0,0,0,140,0,0,0,0,0,64,0,252,0,188,0,80,0,195,0,40,0,0,0,51,0,0,0,151,0,230,0,148,0,219,0,1,0,0,0,229,0,209,0,189,0,22,0,189,0,167,0,76,0,68,0,111,0,90,0,7,0,228,0,218,0,206,0,93,0,201,0,85,0,190,0,0,0,0,0);
signal scenario_full  : scenario_type := (14,31,14,30,44,31,80,31,32,31,187,31,50,31,50,30,9,31,156,31,91,31,68,31,35,31,198,31,40,31,54,31,156,31,151,31,151,30,118,31,147,31,207,31,207,30,94,31,250,31,189,31,33,31,209,31,209,30,147,31,23,31,186,31,176,31,176,30,176,29,149,31,149,30,216,31,135,31,16,31,98,31,98,30,137,31,137,30,123,31,92,31,238,31,139,31,57,31,189,31,121,31,254,31,15,31,135,31,158,31,158,30,158,29,51,31,217,31,217,30,15,31,133,31,133,30,48,31,168,31,42,31,121,31,106,31,90,31,102,31,16,31,109,31,80,31,80,30,2,31,2,30,60,31,60,30,209,31,226,31,218,31,218,30,220,31,220,30,220,29,129,31,181,31,78,31,114,31,183,31,183,30,183,29,15,31,184,31,144,31,239,31,194,31,194,30,194,29,86,31,86,30,239,31,195,31,4,31,4,30,240,31,194,31,112,31,139,31,10,31,109,31,109,30,130,31,130,31,11,31,237,31,31,31,162,31,16,31,24,31,24,30,33,31,47,31,63,31,146,31,146,30,83,31,83,30,181,31,95,31,25,31,21,31,5,31,5,30,5,29,243,31,129,31,8,31,232,31,20,31,66,31,58,31,125,31,101,31,15,31,66,31,37,31,26,31,82,31,6,31,62,31,249,31,207,31,229,31,157,31,137,31,89,31,48,31,93,31,93,30,46,31,131,31,194,31,196,31,127,31,72,31,219,31,24,31,24,30,204,31,82,31,3,31,234,31,234,30,82,31,82,30,82,29,82,28,194,31,80,31,80,30,75,31,181,31,254,31,83,31,114,31,217,31,45,31,111,31,13,31,13,30,51,31,41,31,76,31,76,30,76,29,224,31,146,31,146,30,168,31,44,31,44,30,136,31,116,31,221,31,3,31,48,31,132,31,113,31,117,31,161,31,77,31,250,31,250,30,190,31,190,30,157,31,25,31,23,31,248,31,68,31,94,31,14,31,21,31,35,31,11,31,122,31,187,31,187,30,187,29,181,31,181,30,24,31,134,31,134,30,134,29,28,31,154,31,62,31,249,31,171,31,84,31,17,31,212,31,122,31,152,31,4,31,151,31,151,30,215,31,215,30,90,31,8,31,94,31,68,31,49,31,18,31,34,31,34,30,34,29,98,31,56,31,56,30,77,31,13,31,13,30,13,29,58,31,50,31,50,30,50,29,233,31,196,31,196,30,210,31,69,31,102,31,102,30,24,31,224,31,41,31,118,31,24,31,96,31,96,30,4,31,133,31,133,31,153,31,109,31,17,31,34,31,119,31,174,31,17,31,17,30,102,31,194,31,14,31,158,31,163,31,116,31,183,31,54,31,207,31,138,31,48,31,119,31,119,30,101,31,128,31,181,31,251,31,253,31,253,30,21,31,53,31,20,31,191,31,72,31,72,30,177,31,240,31,5,31,222,31,160,31,85,31,85,30,202,31,202,30,95,31,6,31,149,31,26,31,177,31,94,31,94,30,94,29,141,31,22,31,6,31,57,31,29,31,237,31,94,31,94,30,129,31,40,31,40,30,40,29,83,31,85,31,200,31,21,31,158,31,152,31,7,31,104,31,104,30,215,31,29,31,31,31,31,30,83,31,65,31,145,31,213,31,213,30,193,31,193,30,117,31,105,31,170,31,170,30,26,31,233,31,243,31,116,31,2,31,2,30,2,29,188,31,192,31,229,31,229,30,104,31,104,30,142,31,142,30,161,31,31,31,126,31,126,30,219,31,46,31,46,30,41,31,208,31,208,30,148,31,184,31,184,30,184,29,30,31,236,31,250,31,204,31,204,30,22,31,45,31,89,31,50,31,13,31,33,31,33,30,33,29,33,28,124,31,64,31,139,31,47,31,116,31,37,31,112,31,130,31,69,31,198,31,2,31,35,31,146,31,15,31,171,31,118,31,118,30,248,31,248,30,186,31,121,31,111,31,2,31,2,30,2,29,184,31,218,31,218,30,83,31,148,31,148,30,148,29,19,31,61,31,150,31,60,31,199,31,56,31,57,31,131,31,184,31,115,31,131,31,92,31,96,31,201,31,109,31,51,31,51,30,138,31,253,31,120,31,36,31,36,30,36,29,68,31,229,31,229,30,229,29,192,31,242,31,67,31,163,31,106,31,106,30,155,31,27,31,129,31,160,31,234,31,18,31,18,30,70,31,255,31,200,31,46,31,46,30,228,31,155,31,52,31,52,30,52,29,222,31,203,31,129,31,129,30,94,31,139,31,181,31,113,31,113,30,171,31,48,31,12,31,35,31,234,31,24,31,24,30,24,29,76,31,203,31,60,31,216,31,52,31,68,31,17,31,73,31,125,31,235,31,174,31,174,30,248,31,66,31,160,31,141,31,141,30,219,31,219,30,182,31,113,31,48,31,157,31,114,31,114,30,115,31,115,30,115,29,95,31,116,31,172,31,172,30,134,31,160,31,91,31,91,30,91,29,146,31,237,31,237,30,248,31,36,31,36,30,36,29,50,31,50,30,32,31,236,31,217,31,217,30,92,31,89,31,89,30,5,31,36,31,116,31,45,31,202,31,117,31,189,31,189,30,189,29,47,31,30,31,153,31,153,31,216,31,216,30,70,31,70,30,244,31,244,30,244,29,244,28,250,31,128,31,180,31,134,31,150,31,241,31,44,31,44,30,57,31,57,30,110,31,208,31,142,31,230,31,47,31,49,31,136,31,254,31,151,31,67,31,1,31,194,31,246,31,109,31,139,31,237,31,196,31,182,31,75,31,20,31,29,31,157,31,157,30,249,31,129,31,159,31,1,31,70,31,115,31,115,30,133,31,170,31,98,31,48,31,102,31,5,31,192,31,85,31,90,31,90,30,29,31,9,31,183,31,209,31,19,31,111,31,61,31,207,31,121,31,121,30,121,29,147,31,206,31,172,31,160,31,157,31,156,31,156,30,20,31,239,31,170,31,141,31,151,31,28,31,20,31,188,31,128,31,39,31,39,30,94,31,164,31,16,31,142,31,248,31,240,31,240,30,153,31,118,31,249,31,16,31,92,31,39,31,177,31,31,31,209,31,167,31,8,31,28,31,31,31,100,31,31,31,31,30,62,31,36,31,47,31,219,31,219,30,166,31,127,31,139,31,173,31,240,31,131,31,251,31,224,31,27,31,128,31,22,31,153,31,153,30,153,29,137,31,137,30,77,31,142,31,120,31,237,31,77,31,1,31,196,31,196,30,198,31,169,31,234,31,71,31,190,31,238,31,238,30,77,31,245,31,124,31,15,31,176,31,176,30,176,29,26,31,79,31,79,30,176,31,176,30,79,31,137,31,120,31,120,30,35,31,247,31,68,31,212,31,91,31,91,30,169,31,123,31,30,31,99,31,247,31,125,31,125,30,88,31,48,31,40,31,43,31,199,31,116,31,150,31,150,30,114,31,114,30,114,29,66,31,236,31,236,30,40,31,222,31,222,30,3,31,40,31,41,31,71,31,113,31,14,31,212,31,230,31,221,31,192,31,145,31,156,31,237,31,244,31,112,31,76,31,44,31,179,31,191,31,167,31,32,31,138,31,65,31,31,31,31,30,162,31,162,30,32,31,67,31,67,30,67,29,142,31,114,31,114,30,111,31,111,30,231,31,186,31,204,31,173,31,173,30,234,31,154,31,54,31,54,30,141,31,117,31,194,31,54,31,54,30,54,29,54,28,78,31,23,31,46,31,117,31,224,31,224,30,140,31,140,30,140,29,64,31,252,31,188,31,80,31,195,31,40,31,40,30,51,31,51,30,151,31,230,31,148,31,219,31,1,31,1,30,229,31,209,31,189,31,22,31,189,31,167,31,76,31,68,31,111,31,90,31,7,31,228,31,218,31,206,31,93,31,201,31,85,31,190,31,190,30,190,29);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
