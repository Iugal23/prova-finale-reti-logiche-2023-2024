-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 502;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,203,0,0,0,159,0,61,0,111,0,133,0,192,0,12,0,0,0,107,0,74,0,139,0,191,0,88,0,95,0,218,0,23,0,151,0,101,0,37,0,0,0,194,0,253,0,0,0,86,0,181,0,141,0,0,0,0,0,80,0,83,0,102,0,0,0,248,0,0,0,121,0,0,0,198,0,189,0,130,0,9,0,98,0,185,0,142,0,124,0,48,0,217,0,217,0,121,0,180,0,0,0,35,0,69,0,249,0,3,0,0,0,144,0,7,0,0,0,162,0,0,0,47,0,0,0,103,0,0,0,3,0,0,0,116,0,0,0,74,0,72,0,124,0,149,0,116,0,34,0,70,0,103,0,63,0,36,0,125,0,55,0,130,0,0,0,216,0,236,0,93,0,56,0,135,0,90,0,84,0,218,0,215,0,10,0,0,0,168,0,40,0,241,0,128,0,0,0,152,0,0,0,0,0,84,0,190,0,1,0,54,0,51,0,235,0,133,0,99,0,0,0,39,0,0,0,164,0,144,0,163,0,34,0,0,0,0,0,218,0,78,0,93,0,49,0,223,0,59,0,186,0,0,0,0,0,0,0,0,0,209,0,28,0,58,0,237,0,43,0,0,0,82,0,122,0,123,0,0,0,239,0,180,0,129,0,0,0,54,0,176,0,77,0,0,0,163,0,227,0,226,0,142,0,0,0,242,0,237,0,240,0,240,0,153,0,179,0,0,0,235,0,38,0,0,0,147,0,147,0,48,0,163,0,29,0,156,0,0,0,183,0,152,0,159,0,224,0,153,0,0,0,177,0,177,0,0,0,72,0,171,0,109,0,77,0,193,0,128,0,23,0,0,0,149,0,16,0,217,0,199,0,0,0,114,0,254,0,28,0,163,0,214,0,0,0,17,0,0,0,43,0,80,0,163,0,108,0,191,0,75,0,193,0,255,0,16,0,101,0,19,0,0,0,223,0,160,0,62,0,172,0,217,0,222,0,104,0,0,0,252,0,220,0,0,0,198,0,161,0,19,0,137,0,200,0,199,0,76,0,5,0,254,0,220,0,48,0,169,0,0,0,194,0,0,0,46,0,152,0,169,0,212,0,196,0,88,0,129,0,95,0,202,0,58,0,190,0,254,0,146,0,19,0,0,0,0,0,163,0,192,0,201,0,163,0,109,0,79,0,141,0,0,0,249,0,8,0,215,0,189,0,135,0,0,0,228,0,186,0,92,0,1,0,201,0,135,0,163,0,180,0,0,0,0,0,102,0,106,0,197,0,169,0,173,0,7,0,14,0,64,0,90,0,144,0,204,0,147,0,145,0,225,0,109,0,0,0,0,0,207,0,130,0,14,0,136,0,0,0,217,0,216,0,239,0,0,0,244,0,13,0,159,0,95,0,0,0,0,0,84,0,194,0,21,0,27,0,143,0,51,0,0,0,209,0,57,0,225,0,236,0,51,0,3,0,109,0,29,0,79,0,47,0,72,0,75,0,37,0,48,0,255,0,0,0,182,0,237,0,115,0,211,0,152,0,0,0,117,0,0,0,37,0,171,0,21,0,15,0,178,0,111,0,255,0,42,0,161,0,35,0,133,0,0,0,190,0,25,0,163,0,61,0,209,0,205,0,72,0,168,0,205,0,162,0,0,0,0,0,44,0,92,0,201,0,0,0,170,0,13,0,208,0,249,0,204,0,181,0,0,0,189,0,79,0,0,0,170,0,123,0,200,0,106,0,93,0,170,0,206,0,15,0,212,0,229,0,178,0,88,0,10,0,234,0,222,0,233,0,104,0,164,0,243,0,227,0,78,0,31,0,229,0,88,0,41,0,92,0,0,0,142,0,162,0,199,0,0,0,71,0,242,0,115,0,71,0,78,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,133,0,207,0,186,0,9,0,222,0,36,0,186,0,51,0,128,0,73,0,4,0,17,0,0,0,125,0,191,0,85,0,246,0,118,0,246,0,10,0,0,0,67,0,0,0,58,0,202,0,0,0,0,0,230,0,55,0,249,0,0,0,239,0,18,0,33,0,174,0,77,0,180,0,0,0,107,0,0,0,212,0,211,0,61,0,103,0,140,0,0,0,0,0,47,0,109,0,240,0,213,0,141,0,187,0,166,0,120,0,0,0,182,0,203,0,44,0,36,0,87,0,126,0,0,0,200,0,156,0,18,0,62,0,233,0,29,0,164,0,230,0,0,0,137,0,0,0,225,0,157,0,243,0,195,0,31,0);
signal scenario_full  : scenario_type := (0,0,203,31,203,30,159,31,61,31,111,31,133,31,192,31,12,31,12,30,107,31,74,31,139,31,191,31,88,31,95,31,218,31,23,31,151,31,101,31,37,31,37,30,194,31,253,31,253,30,86,31,181,31,141,31,141,30,141,29,80,31,83,31,102,31,102,30,248,31,248,30,121,31,121,30,198,31,189,31,130,31,9,31,98,31,185,31,142,31,124,31,48,31,217,31,217,31,121,31,180,31,180,30,35,31,69,31,249,31,3,31,3,30,144,31,7,31,7,30,162,31,162,30,47,31,47,30,103,31,103,30,3,31,3,30,116,31,116,30,74,31,72,31,124,31,149,31,116,31,34,31,70,31,103,31,63,31,36,31,125,31,55,31,130,31,130,30,216,31,236,31,93,31,56,31,135,31,90,31,84,31,218,31,215,31,10,31,10,30,168,31,40,31,241,31,128,31,128,30,152,31,152,30,152,29,84,31,190,31,1,31,54,31,51,31,235,31,133,31,99,31,99,30,39,31,39,30,164,31,144,31,163,31,34,31,34,30,34,29,218,31,78,31,93,31,49,31,223,31,59,31,186,31,186,30,186,29,186,28,186,27,209,31,28,31,58,31,237,31,43,31,43,30,82,31,122,31,123,31,123,30,239,31,180,31,129,31,129,30,54,31,176,31,77,31,77,30,163,31,227,31,226,31,142,31,142,30,242,31,237,31,240,31,240,31,153,31,179,31,179,30,235,31,38,31,38,30,147,31,147,31,48,31,163,31,29,31,156,31,156,30,183,31,152,31,159,31,224,31,153,31,153,30,177,31,177,31,177,30,72,31,171,31,109,31,77,31,193,31,128,31,23,31,23,30,149,31,16,31,217,31,199,31,199,30,114,31,254,31,28,31,163,31,214,31,214,30,17,31,17,30,43,31,80,31,163,31,108,31,191,31,75,31,193,31,255,31,16,31,101,31,19,31,19,30,223,31,160,31,62,31,172,31,217,31,222,31,104,31,104,30,252,31,220,31,220,30,198,31,161,31,19,31,137,31,200,31,199,31,76,31,5,31,254,31,220,31,48,31,169,31,169,30,194,31,194,30,46,31,152,31,169,31,212,31,196,31,88,31,129,31,95,31,202,31,58,31,190,31,254,31,146,31,19,31,19,30,19,29,163,31,192,31,201,31,163,31,109,31,79,31,141,31,141,30,249,31,8,31,215,31,189,31,135,31,135,30,228,31,186,31,92,31,1,31,201,31,135,31,163,31,180,31,180,30,180,29,102,31,106,31,197,31,169,31,173,31,7,31,14,31,64,31,90,31,144,31,204,31,147,31,145,31,225,31,109,31,109,30,109,29,207,31,130,31,14,31,136,31,136,30,217,31,216,31,239,31,239,30,244,31,13,31,159,31,95,31,95,30,95,29,84,31,194,31,21,31,27,31,143,31,51,31,51,30,209,31,57,31,225,31,236,31,51,31,3,31,109,31,29,31,79,31,47,31,72,31,75,31,37,31,48,31,255,31,255,30,182,31,237,31,115,31,211,31,152,31,152,30,117,31,117,30,37,31,171,31,21,31,15,31,178,31,111,31,255,31,42,31,161,31,35,31,133,31,133,30,190,31,25,31,163,31,61,31,209,31,205,31,72,31,168,31,205,31,162,31,162,30,162,29,44,31,92,31,201,31,201,30,170,31,13,31,208,31,249,31,204,31,181,31,181,30,189,31,79,31,79,30,170,31,123,31,200,31,106,31,93,31,170,31,206,31,15,31,212,31,229,31,178,31,88,31,10,31,234,31,222,31,233,31,104,31,164,31,243,31,227,31,78,31,31,31,229,31,88,31,41,31,92,31,92,30,142,31,162,31,199,31,199,30,71,31,242,31,115,31,71,31,78,31,78,30,78,29,2,31,2,30,2,29,2,28,2,27,133,31,207,31,186,31,9,31,222,31,36,31,186,31,51,31,128,31,73,31,4,31,17,31,17,30,125,31,191,31,85,31,246,31,118,31,246,31,10,31,10,30,67,31,67,30,58,31,202,31,202,30,202,29,230,31,55,31,249,31,249,30,239,31,18,31,33,31,174,31,77,31,180,31,180,30,107,31,107,30,212,31,211,31,61,31,103,31,140,31,140,30,140,29,47,31,109,31,240,31,213,31,141,31,187,31,166,31,120,31,120,30,182,31,203,31,44,31,36,31,87,31,126,31,126,30,200,31,156,31,18,31,62,31,233,31,29,31,164,31,230,31,230,30,137,31,137,30,225,31,157,31,243,31,195,31,31,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
