-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 692;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (247,0,29,0,133,0,0,0,47,0,185,0,0,0,225,0,57,0,80,0,27,0,52,0,1,0,0,0,167,0,106,0,192,0,77,0,0,0,0,0,34,0,157,0,182,0,70,0,138,0,20,0,75,0,237,0,131,0,66,0,230,0,0,0,157,0,22,0,190,0,67,0,167,0,124,0,59,0,50,0,210,0,15,0,75,0,128,0,58,0,0,0,138,0,0,0,112,0,0,0,71,0,144,0,30,0,46,0,113,0,0,0,173,0,74,0,250,0,106,0,143,0,63,0,135,0,102,0,161,0,35,0,142,0,132,0,184,0,163,0,93,0,192,0,19,0,86,0,120,0,0,0,100,0,183,0,19,0,53,0,0,0,177,0,228,0,7,0,103,0,240,0,0,0,90,0,93,0,159,0,195,0,118,0,0,0,0,0,156,0,97,0,65,0,88,0,163,0,227,0,109,0,185,0,78,0,55,0,0,0,17,0,0,0,0,0,0,0,87,0,182,0,71,0,0,0,73,0,2,0,0,0,0,0,207,0,119,0,128,0,179,0,76,0,105,0,242,0,18,0,0,0,0,0,0,0,68,0,121,0,20,0,77,0,208,0,0,0,5,0,22,0,187,0,145,0,0,0,248,0,0,0,62,0,46,0,0,0,127,0,0,0,101,0,0,0,44,0,51,0,188,0,0,0,56,0,16,0,227,0,176,0,132,0,137,0,72,0,44,0,29,0,16,0,146,0,81,0,89,0,88,0,22,0,248,0,230,0,0,0,67,0,42,0,237,0,92,0,206,0,235,0,195,0,0,0,88,0,69,0,119,0,53,0,0,0,46,0,0,0,162,0,0,0,0,0,0,0,231,0,30,0,124,0,239,0,54,0,119,0,75,0,59,0,0,0,185,0,0,0,47,0,154,0,196,0,47,0,0,0,31,0,0,0,0,0,151,0,0,0,0,0,0,0,183,0,154,0,240,0,21,0,123,0,123,0,167,0,160,0,160,0,57,0,166,0,0,0,204,0,136,0,0,0,170,0,82,0,160,0,110,0,0,0,139,0,46,0,180,0,0,0,66,0,223,0,0,0,17,0,140,0,18,0,36,0,184,0,9,0,151,0,93,0,149,0,242,0,157,0,84,0,152,0,0,0,184,0,255,0,0,0,94,0,69,0,28,0,108,0,201,0,223,0,137,0,0,0,0,0,237,0,0,0,151,0,15,0,79,0,189,0,227,0,39,0,228,0,163,0,93,0,198,0,0,0,0,0,41,0,30,0,52,0,159,0,0,0,97,0,33,0,101,0,52,0,138,0,20,0,227,0,14,0,95,0,200,0,64,0,126,0,244,0,196,0,59,0,13,0,133,0,133,0,2,0,100,0,255,0,22,0,75,0,0,0,152,0,112,0,43,0,161,0,69,0,79,0,218,0,61,0,220,0,166,0,159,0,210,0,195,0,98,0,0,0,32,0,88,0,0,0,129,0,120,0,237,0,135,0,20,0,202,0,149,0,122,0,17,0,154,0,0,0,159,0,44,0,0,0,0,0,0,0,0,0,183,0,35,0,180,0,127,0,12,0,218,0,78,0,0,0,0,0,0,0,43,0,169,0,0,0,94,0,19,0,252,0,171,0,190,0,248,0,40,0,0,0,204,0,73,0,0,0,0,0,88,0,122,0,85,0,32,0,136,0,42,0,16,0,81,0,0,0,0,0,51,0,0,0,236,0,6,0,77,0,108,0,127,0,108,0,0,0,0,0,0,0,1,0,39,0,25,0,143,0,0,0,35,0,219,0,134,0,0,0,0,0,213,0,35,0,74,0,11,0,116,0,0,0,178,0,47,0,85,0,13,0,163,0,201,0,65,0,84,0,0,0,101,0,83,0,45,0,209,0,0,0,0,0,222,0,125,0,221,0,7,0,55,0,228,0,160,0,216,0,140,0,0,0,61,0,44,0,5,0,56,0,244,0,184,0,216,0,182,0,142,0,150,0,0,0,251,0,189,0,78,0,0,0,170,0,7,0,0,0,0,0,73,0,195,0,240,0,0,0,119,0,26,0,122,0,0,0,148,0,186,0,53,0,35,0,248,0,0,0,82,0,66,0,243,0,86,0,94,0,250,0,54,0,2,0,3,0,149,0,0,0,80,0,0,0,26,0,0,0,20,0,194,0,100,0,180,0,149,0,147,0,0,0,64,0,156,0,165,0,0,0,154,0,134,0,165,0,0,0,172,0,125,0,51,0,39,0,174,0,0,0,185,0,0,0,84,0,0,0,159,0,0,0,30,0,6,0,0,0,62,0,125,0,240,0,103,0,0,0,55,0,0,0,13,0,82,0,112,0,0,0,238,0,173,0,161,0,210,0,192,0,35,0,168,0,209,0,175,0,133,0,76,0,15,0,0,0,0,0,49,0,243,0,102,0,0,0,128,0,0,0,18,0,181,0,212,0,0,0,225,0,137,0,39,0,0,0,132,0,27,0,225,0,44,0,117,0,77,0,187,0,166,0,118,0,208,0,0,0,210,0,119,0,56,0,179,0,157,0,149,0,178,0,33,0,153,0,197,0,0,0,219,0,41,0,0,0,24,0,53,0,52,0,0,0,80,0,222,0,59,0,171,0,127,0,106,0,74,0,108,0,1,0,175,0,255,0,88,0,83,0,206,0,0,0,246,0,0,0,78,0,173,0,108,0,0,0,91,0,137,0,40,0,141,0,0,0,135,0,0,0,249,0,70,0,135,0,0,0,103,0,206,0,88,0,126,0,58,0,0,0,182,0,89,0,37,0,0,0,214,0,0,0,250,0,63,0,167,0,99,0,162,0,129,0,176,0,59,0,10,0,0,0,154,0,126,0,0,0,227,0,172,0,190,0,184,0,115,0,111,0,159,0,16,0,142,0,42,0,0,0,149,0,226,0,253,0,0,0,7,0,99,0,82,0,133,0,105,0,108,0,119,0,0,0,202,0,131,0,192,0,0,0,0,0,0,0,86,0,168,0,20,0,20,0,153,0,145,0,0,0,21,0,176,0,127,0,1,0,3,0,71,0,5,0,0,0,0,0,167,0,52,0,3,0,31,0,175,0,25,0,35,0,106,0,0,0,0,0,82,0,34,0,162,0,0,0);
signal scenario_full  : scenario_type := (247,31,29,31,133,31,133,30,47,31,185,31,185,30,225,31,57,31,80,31,27,31,52,31,1,31,1,30,167,31,106,31,192,31,77,31,77,30,77,29,34,31,157,31,182,31,70,31,138,31,20,31,75,31,237,31,131,31,66,31,230,31,230,30,157,31,22,31,190,31,67,31,167,31,124,31,59,31,50,31,210,31,15,31,75,31,128,31,58,31,58,30,138,31,138,30,112,31,112,30,71,31,144,31,30,31,46,31,113,31,113,30,173,31,74,31,250,31,106,31,143,31,63,31,135,31,102,31,161,31,35,31,142,31,132,31,184,31,163,31,93,31,192,31,19,31,86,31,120,31,120,30,100,31,183,31,19,31,53,31,53,30,177,31,228,31,7,31,103,31,240,31,240,30,90,31,93,31,159,31,195,31,118,31,118,30,118,29,156,31,97,31,65,31,88,31,163,31,227,31,109,31,185,31,78,31,55,31,55,30,17,31,17,30,17,29,17,28,87,31,182,31,71,31,71,30,73,31,2,31,2,30,2,29,207,31,119,31,128,31,179,31,76,31,105,31,242,31,18,31,18,30,18,29,18,28,68,31,121,31,20,31,77,31,208,31,208,30,5,31,22,31,187,31,145,31,145,30,248,31,248,30,62,31,46,31,46,30,127,31,127,30,101,31,101,30,44,31,51,31,188,31,188,30,56,31,16,31,227,31,176,31,132,31,137,31,72,31,44,31,29,31,16,31,146,31,81,31,89,31,88,31,22,31,248,31,230,31,230,30,67,31,42,31,237,31,92,31,206,31,235,31,195,31,195,30,88,31,69,31,119,31,53,31,53,30,46,31,46,30,162,31,162,30,162,29,162,28,231,31,30,31,124,31,239,31,54,31,119,31,75,31,59,31,59,30,185,31,185,30,47,31,154,31,196,31,47,31,47,30,31,31,31,30,31,29,151,31,151,30,151,29,151,28,183,31,154,31,240,31,21,31,123,31,123,31,167,31,160,31,160,31,57,31,166,31,166,30,204,31,136,31,136,30,170,31,82,31,160,31,110,31,110,30,139,31,46,31,180,31,180,30,66,31,223,31,223,30,17,31,140,31,18,31,36,31,184,31,9,31,151,31,93,31,149,31,242,31,157,31,84,31,152,31,152,30,184,31,255,31,255,30,94,31,69,31,28,31,108,31,201,31,223,31,137,31,137,30,137,29,237,31,237,30,151,31,15,31,79,31,189,31,227,31,39,31,228,31,163,31,93,31,198,31,198,30,198,29,41,31,30,31,52,31,159,31,159,30,97,31,33,31,101,31,52,31,138,31,20,31,227,31,14,31,95,31,200,31,64,31,126,31,244,31,196,31,59,31,13,31,133,31,133,31,2,31,100,31,255,31,22,31,75,31,75,30,152,31,112,31,43,31,161,31,69,31,79,31,218,31,61,31,220,31,166,31,159,31,210,31,195,31,98,31,98,30,32,31,88,31,88,30,129,31,120,31,237,31,135,31,20,31,202,31,149,31,122,31,17,31,154,31,154,30,159,31,44,31,44,30,44,29,44,28,44,27,183,31,35,31,180,31,127,31,12,31,218,31,78,31,78,30,78,29,78,28,43,31,169,31,169,30,94,31,19,31,252,31,171,31,190,31,248,31,40,31,40,30,204,31,73,31,73,30,73,29,88,31,122,31,85,31,32,31,136,31,42,31,16,31,81,31,81,30,81,29,51,31,51,30,236,31,6,31,77,31,108,31,127,31,108,31,108,30,108,29,108,28,1,31,39,31,25,31,143,31,143,30,35,31,219,31,134,31,134,30,134,29,213,31,35,31,74,31,11,31,116,31,116,30,178,31,47,31,85,31,13,31,163,31,201,31,65,31,84,31,84,30,101,31,83,31,45,31,209,31,209,30,209,29,222,31,125,31,221,31,7,31,55,31,228,31,160,31,216,31,140,31,140,30,61,31,44,31,5,31,56,31,244,31,184,31,216,31,182,31,142,31,150,31,150,30,251,31,189,31,78,31,78,30,170,31,7,31,7,30,7,29,73,31,195,31,240,31,240,30,119,31,26,31,122,31,122,30,148,31,186,31,53,31,35,31,248,31,248,30,82,31,66,31,243,31,86,31,94,31,250,31,54,31,2,31,3,31,149,31,149,30,80,31,80,30,26,31,26,30,20,31,194,31,100,31,180,31,149,31,147,31,147,30,64,31,156,31,165,31,165,30,154,31,134,31,165,31,165,30,172,31,125,31,51,31,39,31,174,31,174,30,185,31,185,30,84,31,84,30,159,31,159,30,30,31,6,31,6,30,62,31,125,31,240,31,103,31,103,30,55,31,55,30,13,31,82,31,112,31,112,30,238,31,173,31,161,31,210,31,192,31,35,31,168,31,209,31,175,31,133,31,76,31,15,31,15,30,15,29,49,31,243,31,102,31,102,30,128,31,128,30,18,31,181,31,212,31,212,30,225,31,137,31,39,31,39,30,132,31,27,31,225,31,44,31,117,31,77,31,187,31,166,31,118,31,208,31,208,30,210,31,119,31,56,31,179,31,157,31,149,31,178,31,33,31,153,31,197,31,197,30,219,31,41,31,41,30,24,31,53,31,52,31,52,30,80,31,222,31,59,31,171,31,127,31,106,31,74,31,108,31,1,31,175,31,255,31,88,31,83,31,206,31,206,30,246,31,246,30,78,31,173,31,108,31,108,30,91,31,137,31,40,31,141,31,141,30,135,31,135,30,249,31,70,31,135,31,135,30,103,31,206,31,88,31,126,31,58,31,58,30,182,31,89,31,37,31,37,30,214,31,214,30,250,31,63,31,167,31,99,31,162,31,129,31,176,31,59,31,10,31,10,30,154,31,126,31,126,30,227,31,172,31,190,31,184,31,115,31,111,31,159,31,16,31,142,31,42,31,42,30,149,31,226,31,253,31,253,30,7,31,99,31,82,31,133,31,105,31,108,31,119,31,119,30,202,31,131,31,192,31,192,30,192,29,192,28,86,31,168,31,20,31,20,31,153,31,145,31,145,30,21,31,176,31,127,31,1,31,3,31,71,31,5,31,5,30,5,29,167,31,52,31,3,31,31,31,175,31,25,31,35,31,106,31,106,30,106,29,82,31,34,31,162,31,162,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
