-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 444;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (2,0,46,0,242,0,0,0,235,0,68,0,109,0,0,0,221,0,125,0,207,0,203,0,168,0,29,0,88,0,234,0,161,0,0,0,0,0,0,0,0,0,242,0,33,0,0,0,14,0,90,0,0,0,197,0,0,0,25,0,233,0,26,0,0,0,0,0,164,0,131,0,193,0,57,0,142,0,0,0,160,0,0,0,35,0,71,0,0,0,86,0,74,0,0,0,36,0,227,0,226,0,226,0,143,0,8,0,242,0,222,0,149,0,87,0,109,0,121,0,78,0,0,0,183,0,142,0,129,0,76,0,18,0,114,0,76,0,202,0,17,0,242,0,180,0,0,0,211,0,150,0,0,0,0,0,184,0,225,0,117,0,42,0,235,0,213,0,51,0,179,0,111,0,158,0,150,0,196,0,193,0,212,0,13,0,0,0,109,0,0,0,166,0,253,0,0,0,214,0,36,0,110,0,250,0,215,0,169,0,111,0,228,0,75,0,18,0,18,0,206,0,120,0,174,0,214,0,80,0,136,0,67,0,105,0,0,0,213,0,229,0,192,0,12,0,254,0,0,0,46,0,98,0,19,0,220,0,160,0,160,0,53,0,61,0,234,0,10,0,14,0,34,0,77,0,46,0,0,0,0,0,117,0,230,0,216,0,178,0,254,0,120,0,31,0,202,0,170,0,87,0,249,0,233,0,125,0,173,0,0,0,0,0,0,0,39,0,200,0,199,0,143,0,24,0,207,0,0,0,171,0,3,0,225,0,92,0,114,0,0,0,14,0,73,0,47,0,82,0,22,0,210,0,11,0,103,0,48,0,0,0,245,0,0,0,139,0,101,0,54,0,45,0,12,0,226,0,4,0,42,0,222,0,0,0,189,0,0,0,151,0,0,0,167,0,0,0,101,0,87,0,251,0,0,0,34,0,0,0,59,0,196,0,148,0,117,0,11,0,0,0,215,0,84,0,0,0,41,0,108,0,143,0,129,0,200,0,0,0,190,0,209,0,0,0,154,0,178,0,169,0,251,0,0,0,0,0,0,0,126,0,140,0,122,0,9,0,142,0,26,0,0,0,0,0,188,0,51,0,113,0,210,0,0,0,152,0,163,0,0,0,0,0,206,0,201,0,86,0,73,0,53,0,221,0,0,0,228,0,79,0,84,0,108,0,186,0,78,0,169,0,68,0,2,0,112,0,72,0,9,0,152,0,34,0,0,0,138,0,231,0,17,0,0,0,121,0,196,0,15,0,0,0,0,0,74,0,0,0,80,0,246,0,182,0,239,0,0,0,14,0,101,0,29,0,170,0,31,0,204,0,190,0,238,0,25,0,97,0,0,0,127,0,202,0,219,0,0,0,0,0,0,0,35,0,168,0,157,0,56,0,229,0,0,0,0,0,0,0,0,0,0,0,73,0,117,0,53,0,30,0,0,0,17,0,244,0,255,0,9,0,163,0,0,0,245,0,0,0,207,0,55,0,109,0,135,0,0,0,192,0,67,0,54,0,14,0,167,0,0,0,88,0,193,0,252,0,0,0,10,0,0,0,64,0,0,0,11,0,0,0,239,0,47,0,25,0,8,0,210,0,212,0,57,0,106,0,133,0,0,0,127,0,0,0,232,0,64,0,148,0,49,0,184,0,20,0,169,0,0,0,57,0,199,0,52,0,0,0,158,0,96,0,155,0,0,0,0,0,88,0,0,0,95,0,0,0,212,0,0,0,14,0,136,0,198,0,123,0,35,0,242,0,50,0,14,0,41,0,194,0,0,0,64,0,152,0,102,0,45,0,229,0,162,0,90,0,83,0,110,0,180,0,33,0,0,0,0,0,131,0,3,0,0,0,235,0,68,0,177,0,0,0,129,0,190,0,24,0,248,0,244,0,191,0,0,0,173,0,0,0,135,0,209,0,186,0,0,0,0,0,78,0,137,0,84,0,0,0,208,0,197,0,0,0,119,0,254,0,183,0,83,0,0,0,186,0,41,0,122,0,105,0,0,0,103,0);
signal scenario_full  : scenario_type := (2,31,46,31,242,31,242,30,235,31,68,31,109,31,109,30,221,31,125,31,207,31,203,31,168,31,29,31,88,31,234,31,161,31,161,30,161,29,161,28,161,27,242,31,33,31,33,30,14,31,90,31,90,30,197,31,197,30,25,31,233,31,26,31,26,30,26,29,164,31,131,31,193,31,57,31,142,31,142,30,160,31,160,30,35,31,71,31,71,30,86,31,74,31,74,30,36,31,227,31,226,31,226,31,143,31,8,31,242,31,222,31,149,31,87,31,109,31,121,31,78,31,78,30,183,31,142,31,129,31,76,31,18,31,114,31,76,31,202,31,17,31,242,31,180,31,180,30,211,31,150,31,150,30,150,29,184,31,225,31,117,31,42,31,235,31,213,31,51,31,179,31,111,31,158,31,150,31,196,31,193,31,212,31,13,31,13,30,109,31,109,30,166,31,253,31,253,30,214,31,36,31,110,31,250,31,215,31,169,31,111,31,228,31,75,31,18,31,18,31,206,31,120,31,174,31,214,31,80,31,136,31,67,31,105,31,105,30,213,31,229,31,192,31,12,31,254,31,254,30,46,31,98,31,19,31,220,31,160,31,160,31,53,31,61,31,234,31,10,31,14,31,34,31,77,31,46,31,46,30,46,29,117,31,230,31,216,31,178,31,254,31,120,31,31,31,202,31,170,31,87,31,249,31,233,31,125,31,173,31,173,30,173,29,173,28,39,31,200,31,199,31,143,31,24,31,207,31,207,30,171,31,3,31,225,31,92,31,114,31,114,30,14,31,73,31,47,31,82,31,22,31,210,31,11,31,103,31,48,31,48,30,245,31,245,30,139,31,101,31,54,31,45,31,12,31,226,31,4,31,42,31,222,31,222,30,189,31,189,30,151,31,151,30,167,31,167,30,101,31,87,31,251,31,251,30,34,31,34,30,59,31,196,31,148,31,117,31,11,31,11,30,215,31,84,31,84,30,41,31,108,31,143,31,129,31,200,31,200,30,190,31,209,31,209,30,154,31,178,31,169,31,251,31,251,30,251,29,251,28,126,31,140,31,122,31,9,31,142,31,26,31,26,30,26,29,188,31,51,31,113,31,210,31,210,30,152,31,163,31,163,30,163,29,206,31,201,31,86,31,73,31,53,31,221,31,221,30,228,31,79,31,84,31,108,31,186,31,78,31,169,31,68,31,2,31,112,31,72,31,9,31,152,31,34,31,34,30,138,31,231,31,17,31,17,30,121,31,196,31,15,31,15,30,15,29,74,31,74,30,80,31,246,31,182,31,239,31,239,30,14,31,101,31,29,31,170,31,31,31,204,31,190,31,238,31,25,31,97,31,97,30,127,31,202,31,219,31,219,30,219,29,219,28,35,31,168,31,157,31,56,31,229,31,229,30,229,29,229,28,229,27,229,26,73,31,117,31,53,31,30,31,30,30,17,31,244,31,255,31,9,31,163,31,163,30,245,31,245,30,207,31,55,31,109,31,135,31,135,30,192,31,67,31,54,31,14,31,167,31,167,30,88,31,193,31,252,31,252,30,10,31,10,30,64,31,64,30,11,31,11,30,239,31,47,31,25,31,8,31,210,31,212,31,57,31,106,31,133,31,133,30,127,31,127,30,232,31,64,31,148,31,49,31,184,31,20,31,169,31,169,30,57,31,199,31,52,31,52,30,158,31,96,31,155,31,155,30,155,29,88,31,88,30,95,31,95,30,212,31,212,30,14,31,136,31,198,31,123,31,35,31,242,31,50,31,14,31,41,31,194,31,194,30,64,31,152,31,102,31,45,31,229,31,162,31,90,31,83,31,110,31,180,31,33,31,33,30,33,29,131,31,3,31,3,30,235,31,68,31,177,31,177,30,129,31,190,31,24,31,248,31,244,31,191,31,191,30,173,31,173,30,135,31,209,31,186,31,186,30,186,29,78,31,137,31,84,31,84,30,208,31,197,31,197,30,119,31,254,31,183,31,83,31,83,30,186,31,41,31,122,31,105,31,105,30,103,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
