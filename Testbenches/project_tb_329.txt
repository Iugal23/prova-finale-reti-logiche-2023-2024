-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 784;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (75,0,0,0,103,0,16,0,5,0,138,0,0,0,157,0,26,0,207,0,0,0,144,0,11,0,113,0,213,0,47,0,84,0,0,0,243,0,129,0,49,0,129,0,0,0,26,0,91,0,151,0,182,0,143,0,165,0,222,0,15,0,157,0,160,0,154,0,200,0,0,0,159,0,80,0,201,0,0,0,56,0,0,0,97,0,75,0,39,0,10,0,199,0,175,0,145,0,0,0,163,0,149,0,51,0,30,0,0,0,0,0,82,0,237,0,211,0,74,0,0,0,117,0,19,0,232,0,0,0,237,0,97,0,228,0,30,0,71,0,148,0,65,0,189,0,66,0,116,0,0,0,0,0,78,0,61,0,75,0,30,0,124,0,160,0,148,0,114,0,203,0,227,0,217,0,232,0,176,0,161,0,104,0,133,0,0,0,0,0,202,0,242,0,120,0,81,0,171,0,197,0,103,0,35,0,54,0,179,0,117,0,98,0,53,0,79,0,21,0,32,0,135,0,0,0,3,0,149,0,67,0,88,0,2,0,134,0,89,0,91,0,0,0,0,0,60,0,80,0,212,0,141,0,211,0,0,0,23,0,185,0,97,0,0,0,0,0,80,0,178,0,91,0,251,0,119,0,0,0,0,0,14,0,198,0,206,0,226,0,145,0,0,0,63,0,0,0,240,0,207,0,188,0,91,0,208,0,174,0,167,0,0,0,0,0,8,0,0,0,42,0,127,0,184,0,210,0,146,0,0,0,3,0,120,0,29,0,223,0,134,0,59,0,96,0,245,0,71,0,140,0,79,0,209,0,0,0,38,0,3,0,62,0,251,0,0,0,136,0,106,0,229,0,143,0,91,0,166,0,68,0,0,0,4,0,172,0,69,0,47,0,12,0,230,0,4,0,0,0,56,0,0,0,64,0,186,0,25,0,226,0,37,0,0,0,74,0,78,0,254,0,164,0,39,0,192,0,186,0,168,0,67,0,138,0,83,0,6,0,136,0,126,0,14,0,54,0,60,0,0,0,192,0,101,0,6,0,37,0,130,0,71,0,136,0,139,0,198,0,69,0,128,0,185,0,88,0,0,0,106,0,64,0,126,0,162,0,169,0,228,0,0,0,0,0,37,0,69,0,0,0,0,0,239,0,154,0,5,0,0,0,188,0,216,0,252,0,173,0,0,0,0,0,132,0,4,0,52,0,198,0,141,0,219,0,20,0,87,0,210,0,228,0,90,0,1,0,161,0,215,0,219,0,224,0,0,0,0,0,42,0,32,0,115,0,203,0,226,0,247,0,0,0,134,0,12,0,44,0,123,0,140,0,81,0,0,0,43,0,188,0,132,0,165,0,102,0,164,0,0,0,130,0,0,0,173,0,146,0,0,0,0,0,151,0,79,0,42,0,108,0,6,0,119,0,236,0,37,0,57,0,64,0,252,0,55,0,178,0,166,0,220,0,0,0,72,0,124,0,133,0,187,0,238,0,42,0,240,0,0,0,109,0,0,0,214,0,152,0,232,0,188,0,111,0,0,0,198,0,44,0,223,0,34,0,3,0,221,0,0,0,220,0,207,0,0,0,144,0,81,0,119,0,144,0,0,0,125,0,185,0,178,0,45,0,0,0,0,0,182,0,31,0,236,0,135,0,187,0,246,0,220,0,179,0,54,0,107,0,244,0,142,0,53,0,68,0,223,0,0,0,151,0,241,0,27,0,0,0,0,0,8,0,18,0,234,0,73,0,173,0,114,0,46,0,29,0,234,0,120,0,0,0,0,0,230,0,0,0,153,0,30,0,0,0,220,0,91,0,103,0,0,0,25,0,0,0,195,0,164,0,204,0,190,0,210,0,0,0,132,0,85,0,207,0,167,0,65,0,0,0,223,0,133,0,102,0,252,0,13,0,67,0,123,0,125,0,35,0,99,0,0,0,189,0,12,0,239,0,167,0,109,0,225,0,229,0,0,0,6,0,175,0,2,0,28,0,189,0,108,0,255,0,212,0,250,0,65,0,218,0,219,0,3,0,203,0,33,0,0,0,16,0,203,0,89,0,134,0,0,0,252,0,147,0,217,0,23,0,108,0,43,0,0,0,64,0,0,0,0,0,113,0,0,0,72,0,7,0,76,0,33,0,29,0,59,0,253,0,0,0,107,0,83,0,184,0,71,0,207,0,105,0,141,0,159,0,174,0,0,0,49,0,250,0,18,0,230,0,157,0,18,0,0,0,0,0,133,0,198,0,103,0,37,0,145,0,141,0,212,0,91,0,88,0,223,0,169,0,0,0,248,0,0,0,139,0,253,0,5,0,238,0,60,0,248,0,228,0,0,0,0,0,193,0,0,0,0,0,0,0,158,0,56,0,0,0,0,0,36,0,45,0,0,0,178,0,40,0,251,0,9,0,140,0,177,0,174,0,0,0,117,0,60,0,0,0,15,0,7,0,191,0,0,0,186,0,27,0,73,0,0,0,255,0,165,0,189,0,133,0,40,0,0,0,3,0,140,0,34,0,240,0,0,0,105,0,0,0,0,0,0,0,119,0,252,0,75,0,46,0,206,0,42,0,36,0,129,0,69,0,180,0,0,0,62,0,111,0,125,0,60,0,118,0,180,0,134,0,65,0,219,0,105,0,24,0,112,0,96,0,0,0,183,0,184,0,180,0,0,0,0,0,138,0,0,0,192,0,5,0,118,0,31,0,0,0,223,0,230,0,0,0,221,0,155,0,113,0,52,0,91,0,139,0,124,0,181,0,237,0,116,0,84,0,118,0,0,0,212,0,137,0,154,0,34,0,170,0,1,0,246,0,166,0,130,0,12,0,173,0,179,0,111,0,242,0,0,0,92,0,94,0,36,0,218,0,179,0,194,0,147,0,82,0,123,0,0,0,0,0,59,0,51,0,27,0,6,0,144,0,131,0,106,0,0,0,0,0,211,0,186,0,251,0,128,0,191,0,54,0,216,0,193,0,26,0,137,0,246,0,92,0,142,0,0,0,109,0,240,0,168,0,172,0,87,0,0,0,254,0,223,0,176,0,0,0,191,0,124,0,67,0,0,0,0,0,0,0,142,0,180,0,5,0,132,0,0,0,130,0,192,0,194,0,51,0,56,0,0,0,32,0,0,0,169,0,197,0,84,0,232,0,246,0,136,0,254,0,140,0,180,0,51,0,187,0,79,0,82,0,122,0,0,0,0,0,222,0,57,0,0,0,224,0,204,0,247,0,139,0,0,0,130,0,111,0,250,0,96,0,242,0,119,0,20,0,23,0,87,0,151,0,255,0,7,0,126,0,12,0,112,0,235,0,0,0,37,0,129,0,87,0,158,0,154,0,77,0,212,0,151,0,155,0,45,0,222,0,210,0,0,0,156,0,164,0,185,0,7,0,0,0,115,0,225,0,228,0,205,0,18,0,229,0,102,0,242,0,215,0,143,0,88,0,175,0,54,0,156,0,95,0,111,0,0,0,232,0,46,0,208,0,43,0,164,0,232,0,0,0,119,0,70,0,0,0,42,0,93,0,234,0,212,0,0,0);
signal scenario_full  : scenario_type := (75,31,75,30,103,31,16,31,5,31,138,31,138,30,157,31,26,31,207,31,207,30,144,31,11,31,113,31,213,31,47,31,84,31,84,30,243,31,129,31,49,31,129,31,129,30,26,31,91,31,151,31,182,31,143,31,165,31,222,31,15,31,157,31,160,31,154,31,200,31,200,30,159,31,80,31,201,31,201,30,56,31,56,30,97,31,75,31,39,31,10,31,199,31,175,31,145,31,145,30,163,31,149,31,51,31,30,31,30,30,30,29,82,31,237,31,211,31,74,31,74,30,117,31,19,31,232,31,232,30,237,31,97,31,228,31,30,31,71,31,148,31,65,31,189,31,66,31,116,31,116,30,116,29,78,31,61,31,75,31,30,31,124,31,160,31,148,31,114,31,203,31,227,31,217,31,232,31,176,31,161,31,104,31,133,31,133,30,133,29,202,31,242,31,120,31,81,31,171,31,197,31,103,31,35,31,54,31,179,31,117,31,98,31,53,31,79,31,21,31,32,31,135,31,135,30,3,31,149,31,67,31,88,31,2,31,134,31,89,31,91,31,91,30,91,29,60,31,80,31,212,31,141,31,211,31,211,30,23,31,185,31,97,31,97,30,97,29,80,31,178,31,91,31,251,31,119,31,119,30,119,29,14,31,198,31,206,31,226,31,145,31,145,30,63,31,63,30,240,31,207,31,188,31,91,31,208,31,174,31,167,31,167,30,167,29,8,31,8,30,42,31,127,31,184,31,210,31,146,31,146,30,3,31,120,31,29,31,223,31,134,31,59,31,96,31,245,31,71,31,140,31,79,31,209,31,209,30,38,31,3,31,62,31,251,31,251,30,136,31,106,31,229,31,143,31,91,31,166,31,68,31,68,30,4,31,172,31,69,31,47,31,12,31,230,31,4,31,4,30,56,31,56,30,64,31,186,31,25,31,226,31,37,31,37,30,74,31,78,31,254,31,164,31,39,31,192,31,186,31,168,31,67,31,138,31,83,31,6,31,136,31,126,31,14,31,54,31,60,31,60,30,192,31,101,31,6,31,37,31,130,31,71,31,136,31,139,31,198,31,69,31,128,31,185,31,88,31,88,30,106,31,64,31,126,31,162,31,169,31,228,31,228,30,228,29,37,31,69,31,69,30,69,29,239,31,154,31,5,31,5,30,188,31,216,31,252,31,173,31,173,30,173,29,132,31,4,31,52,31,198,31,141,31,219,31,20,31,87,31,210,31,228,31,90,31,1,31,161,31,215,31,219,31,224,31,224,30,224,29,42,31,32,31,115,31,203,31,226,31,247,31,247,30,134,31,12,31,44,31,123,31,140,31,81,31,81,30,43,31,188,31,132,31,165,31,102,31,164,31,164,30,130,31,130,30,173,31,146,31,146,30,146,29,151,31,79,31,42,31,108,31,6,31,119,31,236,31,37,31,57,31,64,31,252,31,55,31,178,31,166,31,220,31,220,30,72,31,124,31,133,31,187,31,238,31,42,31,240,31,240,30,109,31,109,30,214,31,152,31,232,31,188,31,111,31,111,30,198,31,44,31,223,31,34,31,3,31,221,31,221,30,220,31,207,31,207,30,144,31,81,31,119,31,144,31,144,30,125,31,185,31,178,31,45,31,45,30,45,29,182,31,31,31,236,31,135,31,187,31,246,31,220,31,179,31,54,31,107,31,244,31,142,31,53,31,68,31,223,31,223,30,151,31,241,31,27,31,27,30,27,29,8,31,18,31,234,31,73,31,173,31,114,31,46,31,29,31,234,31,120,31,120,30,120,29,230,31,230,30,153,31,30,31,30,30,220,31,91,31,103,31,103,30,25,31,25,30,195,31,164,31,204,31,190,31,210,31,210,30,132,31,85,31,207,31,167,31,65,31,65,30,223,31,133,31,102,31,252,31,13,31,67,31,123,31,125,31,35,31,99,31,99,30,189,31,12,31,239,31,167,31,109,31,225,31,229,31,229,30,6,31,175,31,2,31,28,31,189,31,108,31,255,31,212,31,250,31,65,31,218,31,219,31,3,31,203,31,33,31,33,30,16,31,203,31,89,31,134,31,134,30,252,31,147,31,217,31,23,31,108,31,43,31,43,30,64,31,64,30,64,29,113,31,113,30,72,31,7,31,76,31,33,31,29,31,59,31,253,31,253,30,107,31,83,31,184,31,71,31,207,31,105,31,141,31,159,31,174,31,174,30,49,31,250,31,18,31,230,31,157,31,18,31,18,30,18,29,133,31,198,31,103,31,37,31,145,31,141,31,212,31,91,31,88,31,223,31,169,31,169,30,248,31,248,30,139,31,253,31,5,31,238,31,60,31,248,31,228,31,228,30,228,29,193,31,193,30,193,29,193,28,158,31,56,31,56,30,56,29,36,31,45,31,45,30,178,31,40,31,251,31,9,31,140,31,177,31,174,31,174,30,117,31,60,31,60,30,15,31,7,31,191,31,191,30,186,31,27,31,73,31,73,30,255,31,165,31,189,31,133,31,40,31,40,30,3,31,140,31,34,31,240,31,240,30,105,31,105,30,105,29,105,28,119,31,252,31,75,31,46,31,206,31,42,31,36,31,129,31,69,31,180,31,180,30,62,31,111,31,125,31,60,31,118,31,180,31,134,31,65,31,219,31,105,31,24,31,112,31,96,31,96,30,183,31,184,31,180,31,180,30,180,29,138,31,138,30,192,31,5,31,118,31,31,31,31,30,223,31,230,31,230,30,221,31,155,31,113,31,52,31,91,31,139,31,124,31,181,31,237,31,116,31,84,31,118,31,118,30,212,31,137,31,154,31,34,31,170,31,1,31,246,31,166,31,130,31,12,31,173,31,179,31,111,31,242,31,242,30,92,31,94,31,36,31,218,31,179,31,194,31,147,31,82,31,123,31,123,30,123,29,59,31,51,31,27,31,6,31,144,31,131,31,106,31,106,30,106,29,211,31,186,31,251,31,128,31,191,31,54,31,216,31,193,31,26,31,137,31,246,31,92,31,142,31,142,30,109,31,240,31,168,31,172,31,87,31,87,30,254,31,223,31,176,31,176,30,191,31,124,31,67,31,67,30,67,29,67,28,142,31,180,31,5,31,132,31,132,30,130,31,192,31,194,31,51,31,56,31,56,30,32,31,32,30,169,31,197,31,84,31,232,31,246,31,136,31,254,31,140,31,180,31,51,31,187,31,79,31,82,31,122,31,122,30,122,29,222,31,57,31,57,30,224,31,204,31,247,31,139,31,139,30,130,31,111,31,250,31,96,31,242,31,119,31,20,31,23,31,87,31,151,31,255,31,7,31,126,31,12,31,112,31,235,31,235,30,37,31,129,31,87,31,158,31,154,31,77,31,212,31,151,31,155,31,45,31,222,31,210,31,210,30,156,31,164,31,185,31,7,31,7,30,115,31,225,31,228,31,205,31,18,31,229,31,102,31,242,31,215,31,143,31,88,31,175,31,54,31,156,31,95,31,111,31,111,30,232,31,46,31,208,31,43,31,164,31,232,31,232,30,119,31,70,31,70,30,42,31,93,31,234,31,212,31,212,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
