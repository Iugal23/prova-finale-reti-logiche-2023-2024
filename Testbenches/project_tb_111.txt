-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 690;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (27,0,187,0,0,0,0,0,5,0,223,0,159,0,175,0,0,0,199,0,192,0,253,0,0,0,170,0,153,0,211,0,171,0,174,0,13,0,220,0,244,0,93,0,190,0,79,0,0,0,51,0,0,0,150,0,251,0,68,0,182,0,44,0,163,0,207,0,97,0,70,0,247,0,225,0,0,0,195,0,165,0,206,0,135,0,231,0,253,0,97,0,222,0,185,0,0,0,0,0,158,0,68,0,58,0,0,0,104,0,90,0,40,0,204,0,0,0,190,0,188,0,200,0,203,0,49,0,251,0,251,0,145,0,224,0,35,0,194,0,207,0,31,0,0,0,79,0,157,0,191,0,84,0,205,0,97,0,113,0,246,0,35,0,78,0,22,0,69,0,117,0,226,0,0,0,0,0,24,0,153,0,79,0,185,0,204,0,223,0,181,0,114,0,78,0,0,0,36,0,20,0,162,0,9,0,221,0,57,0,0,0,176,0,241,0,174,0,117,0,57,0,246,0,78,0,224,0,55,0,0,0,126,0,0,0,226,0,71,0,40,0,36,0,107,0,0,0,225,0,41,0,252,0,0,0,125,0,61,0,0,0,179,0,105,0,60,0,0,0,0,0,224,0,201,0,75,0,162,0,224,0,191,0,0,0,232,0,157,0,234,0,169,0,76,0,51,0,123,0,127,0,142,0,193,0,155,0,0,0,215,0,194,0,0,0,0,0,17,0,0,0,232,0,0,0,237,0,246,0,84,0,94,0,130,0,246,0,56,0,0,0,0,0,186,0,0,0,12,0,102,0,148,0,146,0,121,0,76,0,3,0,205,0,58,0,0,0,0,0,0,0,64,0,49,0,41,0,67,0,185,0,195,0,100,0,0,0,210,0,37,0,0,0,39,0,156,0,200,0,188,0,73,0,132,0,0,0,104,0,147,0,27,0,0,0,130,0,208,0,157,0,221,0,114,0,193,0,167,0,245,0,0,0,131,0,196,0,41,0,0,0,174,0,232,0,129,0,79,0,198,0,162,0,202,0,211,0,182,0,61,0,178,0,134,0,205,0,227,0,57,0,83,0,232,0,0,0,109,0,79,0,0,0,171,0,247,0,33,0,169,0,0,0,121,0,234,0,44,0,171,0,110,0,0,0,61,0,106,0,70,0,152,0,108,0,140,0,39,0,111,0,105,0,0,0,124,0,10,0,176,0,112,0,167,0,0,0,213,0,188,0,164,0,0,0,147,0,78,0,156,0,0,0,161,0,122,0,73,0,0,0,106,0,65,0,0,0,217,0,20,0,117,0,216,0,122,0,113,0,209,0,31,0,62,0,175,0,0,0,213,0,0,0,138,0,0,0,192,0,250,0,0,0,136,0,206,0,156,0,0,0,49,0,196,0,179,0,217,0,0,0,6,0,212,0,255,0,137,0,119,0,233,0,192,0,215,0,149,0,93,0,117,0,72,0,227,0,144,0,89,0,207,0,151,0,114,0,57,0,157,0,52,0,64,0,109,0,202,0,103,0,104,0,0,0,208,0,61,0,0,0,221,0,69,0,57,0,0,0,94,0,90,0,235,0,139,0,223,0,213,0,141,0,0,0,41,0,95,0,204,0,13,0,105,0,40,0,168,0,0,0,181,0,97,0,94,0,0,0,106,0,0,0,0,0,198,0,27,0,0,0,201,0,93,0,0,0,70,0,245,0,158,0,87,0,135,0,161,0,0,0,83,0,55,0,0,0,41,0,14,0,0,0,0,0,123,0,41,0,224,0,0,0,0,0,147,0,181,0,0,0,62,0,0,0,133,0,233,0,124,0,43,0,0,0,132,0,92,0,178,0,0,0,39,0,0,0,74,0,224,0,123,0,36,0,0,0,144,0,124,0,36,0,22,0,123,0,0,0,168,0,0,0,236,0,245,0,122,0,136,0,0,0,165,0,0,0,0,0,109,0,0,0,135,0,73,0,251,0,106,0,195,0,147,0,26,0,117,0,212,0,98,0,59,0,171,0,122,0,115,0,2,0,51,0,146,0,169,0,0,0,31,0,0,0,7,0,221,0,10,0,0,0,25,0,0,0,124,0,64,0,0,0,186,0,193,0,73,0,114,0,5,0,91,0,120,0,0,0,222,0,242,0,187,0,174,0,16,0,26,0,161,0,60,0,48,0,62,0,227,0,129,0,3,0,21,0,0,0,30,0,182,0,128,0,27,0,251,0,41,0,92,0,227,0,5,0,94,0,228,0,213,0,213,0,0,0,14,0,17,0,85,0,8,0,14,0,0,0,37,0,233,0,181,0,159,0,21,0,212,0,0,0,0,0,0,0,170,0,141,0,146,0,138,0,58,0,0,0,166,0,152,0,124,0,127,0,66,0,47,0,0,0,211,0,75,0,167,0,243,0,223,0,97,0,174,0,154,0,30,0,180,0,181,0,199,0,217,0,204,0,202,0,181,0,30,0,226,0,236,0,229,0,131,0,0,0,195,0,189,0,5,0,222,0,0,0,15,0,45,0,183,0,85,0,238,0,253,0,50,0,7,0,0,0,0,0,109,0,63,0,60,0,220,0,16,0,0,0,140,0,213,0,100,0,1,0,224,0,64,0,90,0,0,0,255,0,135,0,0,0,232,0,41,0,150,0,101,0,0,0,0,0,185,0,218,0,86,0,124,0,162,0,0,0,0,0,252,0,107,0,115,0,61,0,188,0,0,0,35,0,0,0,0,0,116,0,220,0,18,0,156,0,99,0,88,0,202,0,234,0,235,0,234,0,88,0,151,0,33,0,239,0,11,0,192,0,35,0,0,0,0,0,0,0,199,0,0,0,0,0,225,0,21,0,87,0,104,0,13,0,185,0,95,0,0,0,0,0,0,0,243,0,127,0,0,0,235,0,0,0,199,0,182,0,0,0,20,0,0,0,219,0,0,0,244,0,145,0,132,0,23,0,176,0,0,0,224,0,226,0,216,0,254,0,93,0,149,0,0,0,174,0,202,0,137,0,15,0,125,0,87,0,159,0,0,0,124,0,241,0,209,0,129,0,231,0,80,0,58,0,97,0,97,0,97,0,44,0,177,0,0,0,174,0,0,0,203,0,173,0,0,0,220,0,232,0,233,0);
signal scenario_full  : scenario_type := (27,31,187,31,187,30,187,29,5,31,223,31,159,31,175,31,175,30,199,31,192,31,253,31,253,30,170,31,153,31,211,31,171,31,174,31,13,31,220,31,244,31,93,31,190,31,79,31,79,30,51,31,51,30,150,31,251,31,68,31,182,31,44,31,163,31,207,31,97,31,70,31,247,31,225,31,225,30,195,31,165,31,206,31,135,31,231,31,253,31,97,31,222,31,185,31,185,30,185,29,158,31,68,31,58,31,58,30,104,31,90,31,40,31,204,31,204,30,190,31,188,31,200,31,203,31,49,31,251,31,251,31,145,31,224,31,35,31,194,31,207,31,31,31,31,30,79,31,157,31,191,31,84,31,205,31,97,31,113,31,246,31,35,31,78,31,22,31,69,31,117,31,226,31,226,30,226,29,24,31,153,31,79,31,185,31,204,31,223,31,181,31,114,31,78,31,78,30,36,31,20,31,162,31,9,31,221,31,57,31,57,30,176,31,241,31,174,31,117,31,57,31,246,31,78,31,224,31,55,31,55,30,126,31,126,30,226,31,71,31,40,31,36,31,107,31,107,30,225,31,41,31,252,31,252,30,125,31,61,31,61,30,179,31,105,31,60,31,60,30,60,29,224,31,201,31,75,31,162,31,224,31,191,31,191,30,232,31,157,31,234,31,169,31,76,31,51,31,123,31,127,31,142,31,193,31,155,31,155,30,215,31,194,31,194,30,194,29,17,31,17,30,232,31,232,30,237,31,246,31,84,31,94,31,130,31,246,31,56,31,56,30,56,29,186,31,186,30,12,31,102,31,148,31,146,31,121,31,76,31,3,31,205,31,58,31,58,30,58,29,58,28,64,31,49,31,41,31,67,31,185,31,195,31,100,31,100,30,210,31,37,31,37,30,39,31,156,31,200,31,188,31,73,31,132,31,132,30,104,31,147,31,27,31,27,30,130,31,208,31,157,31,221,31,114,31,193,31,167,31,245,31,245,30,131,31,196,31,41,31,41,30,174,31,232,31,129,31,79,31,198,31,162,31,202,31,211,31,182,31,61,31,178,31,134,31,205,31,227,31,57,31,83,31,232,31,232,30,109,31,79,31,79,30,171,31,247,31,33,31,169,31,169,30,121,31,234,31,44,31,171,31,110,31,110,30,61,31,106,31,70,31,152,31,108,31,140,31,39,31,111,31,105,31,105,30,124,31,10,31,176,31,112,31,167,31,167,30,213,31,188,31,164,31,164,30,147,31,78,31,156,31,156,30,161,31,122,31,73,31,73,30,106,31,65,31,65,30,217,31,20,31,117,31,216,31,122,31,113,31,209,31,31,31,62,31,175,31,175,30,213,31,213,30,138,31,138,30,192,31,250,31,250,30,136,31,206,31,156,31,156,30,49,31,196,31,179,31,217,31,217,30,6,31,212,31,255,31,137,31,119,31,233,31,192,31,215,31,149,31,93,31,117,31,72,31,227,31,144,31,89,31,207,31,151,31,114,31,57,31,157,31,52,31,64,31,109,31,202,31,103,31,104,31,104,30,208,31,61,31,61,30,221,31,69,31,57,31,57,30,94,31,90,31,235,31,139,31,223,31,213,31,141,31,141,30,41,31,95,31,204,31,13,31,105,31,40,31,168,31,168,30,181,31,97,31,94,31,94,30,106,31,106,30,106,29,198,31,27,31,27,30,201,31,93,31,93,30,70,31,245,31,158,31,87,31,135,31,161,31,161,30,83,31,55,31,55,30,41,31,14,31,14,30,14,29,123,31,41,31,224,31,224,30,224,29,147,31,181,31,181,30,62,31,62,30,133,31,233,31,124,31,43,31,43,30,132,31,92,31,178,31,178,30,39,31,39,30,74,31,224,31,123,31,36,31,36,30,144,31,124,31,36,31,22,31,123,31,123,30,168,31,168,30,236,31,245,31,122,31,136,31,136,30,165,31,165,30,165,29,109,31,109,30,135,31,73,31,251,31,106,31,195,31,147,31,26,31,117,31,212,31,98,31,59,31,171,31,122,31,115,31,2,31,51,31,146,31,169,31,169,30,31,31,31,30,7,31,221,31,10,31,10,30,25,31,25,30,124,31,64,31,64,30,186,31,193,31,73,31,114,31,5,31,91,31,120,31,120,30,222,31,242,31,187,31,174,31,16,31,26,31,161,31,60,31,48,31,62,31,227,31,129,31,3,31,21,31,21,30,30,31,182,31,128,31,27,31,251,31,41,31,92,31,227,31,5,31,94,31,228,31,213,31,213,31,213,30,14,31,17,31,85,31,8,31,14,31,14,30,37,31,233,31,181,31,159,31,21,31,212,31,212,30,212,29,212,28,170,31,141,31,146,31,138,31,58,31,58,30,166,31,152,31,124,31,127,31,66,31,47,31,47,30,211,31,75,31,167,31,243,31,223,31,97,31,174,31,154,31,30,31,180,31,181,31,199,31,217,31,204,31,202,31,181,31,30,31,226,31,236,31,229,31,131,31,131,30,195,31,189,31,5,31,222,31,222,30,15,31,45,31,183,31,85,31,238,31,253,31,50,31,7,31,7,30,7,29,109,31,63,31,60,31,220,31,16,31,16,30,140,31,213,31,100,31,1,31,224,31,64,31,90,31,90,30,255,31,135,31,135,30,232,31,41,31,150,31,101,31,101,30,101,29,185,31,218,31,86,31,124,31,162,31,162,30,162,29,252,31,107,31,115,31,61,31,188,31,188,30,35,31,35,30,35,29,116,31,220,31,18,31,156,31,99,31,88,31,202,31,234,31,235,31,234,31,88,31,151,31,33,31,239,31,11,31,192,31,35,31,35,30,35,29,35,28,199,31,199,30,199,29,225,31,21,31,87,31,104,31,13,31,185,31,95,31,95,30,95,29,95,28,243,31,127,31,127,30,235,31,235,30,199,31,182,31,182,30,20,31,20,30,219,31,219,30,244,31,145,31,132,31,23,31,176,31,176,30,224,31,226,31,216,31,254,31,93,31,149,31,149,30,174,31,202,31,137,31,15,31,125,31,87,31,159,31,159,30,124,31,241,31,209,31,129,31,231,31,80,31,58,31,97,31,97,31,97,31,44,31,177,31,177,30,174,31,174,30,203,31,173,31,173,30,220,31,232,31,233,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
