-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 250;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (18,0,135,0,95,0,79,0,6,0,0,0,43,0,33,0,0,0,168,0,242,0,176,0,217,0,140,0,125,0,0,0,192,0,0,0,145,0,174,0,0,0,35,0,139,0,90,0,0,0,45,0,129,0,128,0,32,0,0,0,88,0,74,0,154,0,94,0,62,0,79,0,0,0,85,0,181,0,19,0,64,0,120,0,173,0,0,0,68,0,0,0,13,0,56,0,128,0,73,0,0,0,0,0,133,0,0,0,142,0,81,0,254,0,44,0,229,0,229,0,233,0,167,0,114,0,38,0,35,0,54,0,0,0,0,0,3,0,0,0,38,0,7,0,0,0,230,0,0,0,0,0,106,0,248,0,249,0,215,0,196,0,16,0,242,0,47,0,254,0,96,0,137,0,56,0,114,0,0,0,24,0,0,0,167,0,135,0,4,0,39,0,38,0,178,0,118,0,0,0,241,0,87,0,158,0,0,0,1,0,126,0,207,0,61,0,5,0,232,0,249,0,251,0,174,0,0,0,74,0,117,0,109,0,184,0,0,0,189,0,52,0,33,0,171,0,130,0,102,0,67,0,26,0,206,0,0,0,0,0,56,0,142,0,137,0,181,0,134,0,0,0,28,0,0,0,47,0,24,0,1,0,246,0,241,0,161,0,61,0,12,0,113,0,241,0,144,0,0,0,0,0,93,0,169,0,0,0,133,0,0,0,0,0,132,0,2,0,148,0,114,0,43,0,113,0,110,0,49,0,183,0,79,0,130,0,82,0,217,0,142,0,186,0,2,0,143,0,244,0,164,0,115,0,253,0,225,0,13,0,0,0,40,0,191,0,241,0,85,0,0,0,149,0,60,0,127,0,180,0,124,0,21,0,210,0,178,0,0,0,0,0,64,0,3,0,164,0,0,0,0,0,80,0,172,0,59,0,165,0,19,0,166,0,0,0,0,0,163,0,57,0,0,0,101,0,189,0,201,0,180,0,223,0,16,0,128,0,0,0,204,0,196,0,50,0,211,0,120,0,73,0,82,0,0,0,115,0,145,0,0,0,159,0,0,0,0,0,120,0,2,0,0,0,0,0,170,0,247,0,220,0,243,0,0,0,125,0,218,0,242,0,90,0,147,0,0,0,185,0);
signal scenario_full  : scenario_type := (18,31,135,31,95,31,79,31,6,31,6,30,43,31,33,31,33,30,168,31,242,31,176,31,217,31,140,31,125,31,125,30,192,31,192,30,145,31,174,31,174,30,35,31,139,31,90,31,90,30,45,31,129,31,128,31,32,31,32,30,88,31,74,31,154,31,94,31,62,31,79,31,79,30,85,31,181,31,19,31,64,31,120,31,173,31,173,30,68,31,68,30,13,31,56,31,128,31,73,31,73,30,73,29,133,31,133,30,142,31,81,31,254,31,44,31,229,31,229,31,233,31,167,31,114,31,38,31,35,31,54,31,54,30,54,29,3,31,3,30,38,31,7,31,7,30,230,31,230,30,230,29,106,31,248,31,249,31,215,31,196,31,16,31,242,31,47,31,254,31,96,31,137,31,56,31,114,31,114,30,24,31,24,30,167,31,135,31,4,31,39,31,38,31,178,31,118,31,118,30,241,31,87,31,158,31,158,30,1,31,126,31,207,31,61,31,5,31,232,31,249,31,251,31,174,31,174,30,74,31,117,31,109,31,184,31,184,30,189,31,52,31,33,31,171,31,130,31,102,31,67,31,26,31,206,31,206,30,206,29,56,31,142,31,137,31,181,31,134,31,134,30,28,31,28,30,47,31,24,31,1,31,246,31,241,31,161,31,61,31,12,31,113,31,241,31,144,31,144,30,144,29,93,31,169,31,169,30,133,31,133,30,133,29,132,31,2,31,148,31,114,31,43,31,113,31,110,31,49,31,183,31,79,31,130,31,82,31,217,31,142,31,186,31,2,31,143,31,244,31,164,31,115,31,253,31,225,31,13,31,13,30,40,31,191,31,241,31,85,31,85,30,149,31,60,31,127,31,180,31,124,31,21,31,210,31,178,31,178,30,178,29,64,31,3,31,164,31,164,30,164,29,80,31,172,31,59,31,165,31,19,31,166,31,166,30,166,29,163,31,57,31,57,30,101,31,189,31,201,31,180,31,223,31,16,31,128,31,128,30,204,31,196,31,50,31,211,31,120,31,73,31,82,31,82,30,115,31,145,31,145,30,159,31,159,30,159,29,120,31,2,31,2,30,2,29,170,31,247,31,220,31,243,31,243,30,125,31,218,31,242,31,90,31,147,31,147,30,185,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
