-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 863;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (156,0,229,0,153,0,0,0,102,0,0,0,186,0,0,0,106,0,85,0,127,0,83,0,0,0,19,0,11,0,112,0,96,0,128,0,73,0,5,0,115,0,215,0,0,0,0,0,186,0,7,0,119,0,140,0,109,0,52,0,176,0,0,0,143,0,27,0,151,0,0,0,129,0,138,0,23,0,41,0,0,0,212,0,132,0,0,0,0,0,0,0,179,0,102,0,190,0,125,0,0,0,196,0,143,0,185,0,197,0,143,0,162,0,64,0,79,0,109,0,29,0,4,0,90,0,205,0,0,0,0,0,211,0,175,0,0,0,0,0,213,0,47,0,167,0,5,0,225,0,221,0,97,0,0,0,0,0,75,0,61,0,0,0,109,0,0,0,0,0,79,0,0,0,0,0,58,0,82,0,231,0,0,0,171,0,156,0,0,0,242,0,175,0,223,0,73,0,91,0,234,0,0,0,81,0,31,0,79,0,22,0,108,0,0,0,149,0,204,0,115,0,204,0,201,0,12,0,189,0,126,0,0,0,27,0,1,0,224,0,100,0,0,0,57,0,97,0,0,0,111,0,15,0,15,0,68,0,251,0,57,0,0,0,138,0,0,0,11,0,0,0,210,0,182,0,170,0,145,0,165,0,61,0,137,0,192,0,210,0,140,0,243,0,139,0,0,0,1,0,204,0,95,0,78,0,152,0,211,0,0,0,0,0,251,0,0,0,0,0,72,0,170,0,88,0,253,0,60,0,88,0,236,0,109,0,81,0,176,0,0,0,21,0,196,0,140,0,127,0,147,0,174,0,95,0,255,0,77,0,97,0,6,0,80,0,0,0,213,0,0,0,11,0,101,0,244,0,156,0,32,0,221,0,16,0,123,0,17,0,0,0,7,0,71,0,169,0,39,0,230,0,0,0,97,0,0,0,64,0,54,0,208,0,39,0,85,0,22,0,64,0,165,0,0,0,191,0,55,0,136,0,55,0,145,0,0,0,86,0,47,0,154,0,131,0,0,0,160,0,51,0,146,0,121,0,30,0,175,0,184,0,127,0,35,0,240,0,200,0,24,0,196,0,64,0,60,0,238,0,224,0,165,0,197,0,66,0,128,0,0,0,210,0,209,0,206,0,107,0,149,0,0,0,83,0,131,0,44,0,0,0,117,0,192,0,27,0,221,0,126,0,210,0,0,0,194,0,0,0,72,0,206,0,251,0,249,0,243,0,39,0,255,0,114,0,54,0,187,0,0,0,0,0,46,0,234,0,213,0,188,0,115,0,83,0,244,0,11,0,60,0,220,0,154,0,121,0,247,0,0,0,188,0,122,0,172,0,214,0,0,0,197,0,102,0,191,0,213,0,0,0,221,0,87,0,83,0,174,0,194,0,19,0,237,0,146,0,169,0,14,0,28,0,8,0,52,0,254,0,27,0,47,0,0,0,148,0,214,0,209,0,90,0,43,0,0,0,0,0,0,0,47,0,242,0,8,0,0,0,136,0,0,0,186,0,0,0,32,0,253,0,85,0,105,0,193,0,151,0,241,0,84,0,150,0,0,0,124,0,245,0,135,0,0,0,191,0,250,0,0,0,244,0,89,0,188,0,238,0,170,0,0,0,10,0,192,0,16,0,128,0,88,0,85,0,0,0,123,0,201,0,71,0,82,0,137,0,46,0,115,0,107,0,71,0,70,0,91,0,56,0,0,0,0,0,185,0,145,0,119,0,0,0,0,0,19,0,54,0,173,0,70,0,0,0,61,0,58,0,203,0,82,0,0,0,106,0,179,0,233,0,23,0,211,0,154,0,41,0,109,0,137,0,83,0,0,0,208,0,56,0,155,0,34,0,0,0,0,0,37,0,82,0,154,0,193,0,0,0,229,0,0,0,203,0,2,0,190,0,128,0,235,0,0,0,161,0,41,0,0,0,213,0,182,0,124,0,188,0,85,0,238,0,100,0,222,0,166,0,33,0,70,0,7,0,0,0,8,0,174,0,60,0,26,0,148,0,101,0,58,0,0,0,106,0,220,0,86,0,0,0,99,0,73,0,201,0,93,0,132,0,106,0,151,0,114,0,0,0,22,0,0,0,109,0,25,0,60,0,145,0,249,0,103,0,0,0,192,0,26,0,0,0,198,0,182,0,18,0,234,0,249,0,165,0,21,0,56,0,27,0,31,0,223,0,49,0,121,0,140,0,90,0,0,0,183,0,235,0,245,0,0,0,0,0,57,0,47,0,0,0,149,0,201,0,129,0,169,0,236,0,166,0,0,0,46,0,0,0,191,0,0,0,81,0,215,0,95,0,156,0,63,0,157,0,17,0,0,0,0,0,139,0,218,0,0,0,65,0,0,0,0,0,199,0,47,0,2,0,29,0,222,0,249,0,242,0,152,0,0,0,51,0,242,0,15,0,0,0,47,0,204,0,13,0,46,0,72,0,237,0,199,0,0,0,100,0,0,0,0,0,66,0,112,0,0,0,186,0,153,0,149,0,0,0,203,0,218,0,0,0,0,0,207,0,216,0,41,0,0,0,244,0,0,0,117,0,0,0,105,0,243,0,197,0,110,0,236,0,0,0,128,0,227,0,247,0,175,0,75,0,59,0,34,0,152,0,166,0,235,0,103,0,39,0,27,0,196,0,0,0,113,0,39,0,241,0,0,0,128,0,35,0,51,0,0,0,131,0,0,0,92,0,0,0,0,0,132,0,125,0,0,0,233,0,185,0,68,0,91,0,9,0,131,0,0,0,81,0,69,0,0,0,39,0,2,0,21,0,0,0,196,0,126,0,90,0,182,0,132,0,0,0,187,0,0,0,10,0,84,0,0,0,238,0,161,0,217,0,14,0,32,0,120,0,210,0,17,0,60,0,185,0,220,0,214,0,76,0,132,0,15,0,220,0,210,0,216,0,4,0,0,0,0,0,174,0,0,0,56,0,31,0,186,0,165,0,190,0,180,0,89,0,96,0,233,0,0,0,189,0,202,0,136,0,128,0,244,0,113,0,175,0,249,0,255,0,0,0,0,0,0,0,216,0,56,0,202,0,44,0,188,0,61,0,133,0,159,0,233,0,94,0,151,0,0,0,193,0,143,0,95,0,237,0,175,0,229,0,0,0,0,0,0,0,206,0,191,0,234,0,72,0,85,0,232,0,177,0,122,0,149,0,249,0,43,0,248,0,251,0,246,0,212,0,218,0,191,0,8,0,228,0,87,0,71,0,146,0,79,0,176,0,211,0,111,0,147,0,22,0,255,0,82,0,201,0,177,0,124,0,0,0,134,0,119,0,50,0,64,0,254,0,157,0,116,0,182,0,0,0,181,0,126,0,0,0,206,0,0,0,11,0,0,0,0,0,0,0,0,0,48,0,0,0,100,0,214,0,143,0,49,0,164,0,76,0,204,0,38,0,18,0,107,0,46,0,61,0,0,0,38,0,125,0,159,0,4,0,251,0,0,0,31,0,120,0,164,0,177,0,142,0,191,0,54,0,75,0,248,0,169,0,0,0,235,0,173,0,0,0,2,0,0,0,31,0,83,0,242,0,168,0,0,0,32,0,17,0,190,0,0,0,168,0,87,0,47,0,0,0,134,0,163,0,100,0,0,0,195,0,0,0,0,0,204,0,134,0,254,0,98,0,161,0,246,0,57,0,151,0,127,0,0,0,122,0,41,0,201,0,134,0,149,0,0,0,0,0,111,0,46,0,173,0,159,0,5,0,0,0,179,0,31,0,6,0,251,0,185,0,135,0,183,0,168,0,26,0,249,0,214,0,31,0,96,0,174,0,0,0,0,0,27,0,49,0,174,0,0,0,12,0,144,0,80,0,0,0,0,0,105,0,0,0,0,0,149,0,226,0,204,0,154,0,0,0,94,0,13,0,8,0,218,0);
signal scenario_full  : scenario_type := (156,31,229,31,153,31,153,30,102,31,102,30,186,31,186,30,106,31,85,31,127,31,83,31,83,30,19,31,11,31,112,31,96,31,128,31,73,31,5,31,115,31,215,31,215,30,215,29,186,31,7,31,119,31,140,31,109,31,52,31,176,31,176,30,143,31,27,31,151,31,151,30,129,31,138,31,23,31,41,31,41,30,212,31,132,31,132,30,132,29,132,28,179,31,102,31,190,31,125,31,125,30,196,31,143,31,185,31,197,31,143,31,162,31,64,31,79,31,109,31,29,31,4,31,90,31,205,31,205,30,205,29,211,31,175,31,175,30,175,29,213,31,47,31,167,31,5,31,225,31,221,31,97,31,97,30,97,29,75,31,61,31,61,30,109,31,109,30,109,29,79,31,79,30,79,29,58,31,82,31,231,31,231,30,171,31,156,31,156,30,242,31,175,31,223,31,73,31,91,31,234,31,234,30,81,31,31,31,79,31,22,31,108,31,108,30,149,31,204,31,115,31,204,31,201,31,12,31,189,31,126,31,126,30,27,31,1,31,224,31,100,31,100,30,57,31,97,31,97,30,111,31,15,31,15,31,68,31,251,31,57,31,57,30,138,31,138,30,11,31,11,30,210,31,182,31,170,31,145,31,165,31,61,31,137,31,192,31,210,31,140,31,243,31,139,31,139,30,1,31,204,31,95,31,78,31,152,31,211,31,211,30,211,29,251,31,251,30,251,29,72,31,170,31,88,31,253,31,60,31,88,31,236,31,109,31,81,31,176,31,176,30,21,31,196,31,140,31,127,31,147,31,174,31,95,31,255,31,77,31,97,31,6,31,80,31,80,30,213,31,213,30,11,31,101,31,244,31,156,31,32,31,221,31,16,31,123,31,17,31,17,30,7,31,71,31,169,31,39,31,230,31,230,30,97,31,97,30,64,31,54,31,208,31,39,31,85,31,22,31,64,31,165,31,165,30,191,31,55,31,136,31,55,31,145,31,145,30,86,31,47,31,154,31,131,31,131,30,160,31,51,31,146,31,121,31,30,31,175,31,184,31,127,31,35,31,240,31,200,31,24,31,196,31,64,31,60,31,238,31,224,31,165,31,197,31,66,31,128,31,128,30,210,31,209,31,206,31,107,31,149,31,149,30,83,31,131,31,44,31,44,30,117,31,192,31,27,31,221,31,126,31,210,31,210,30,194,31,194,30,72,31,206,31,251,31,249,31,243,31,39,31,255,31,114,31,54,31,187,31,187,30,187,29,46,31,234,31,213,31,188,31,115,31,83,31,244,31,11,31,60,31,220,31,154,31,121,31,247,31,247,30,188,31,122,31,172,31,214,31,214,30,197,31,102,31,191,31,213,31,213,30,221,31,87,31,83,31,174,31,194,31,19,31,237,31,146,31,169,31,14,31,28,31,8,31,52,31,254,31,27,31,47,31,47,30,148,31,214,31,209,31,90,31,43,31,43,30,43,29,43,28,47,31,242,31,8,31,8,30,136,31,136,30,186,31,186,30,32,31,253,31,85,31,105,31,193,31,151,31,241,31,84,31,150,31,150,30,124,31,245,31,135,31,135,30,191,31,250,31,250,30,244,31,89,31,188,31,238,31,170,31,170,30,10,31,192,31,16,31,128,31,88,31,85,31,85,30,123,31,201,31,71,31,82,31,137,31,46,31,115,31,107,31,71,31,70,31,91,31,56,31,56,30,56,29,185,31,145,31,119,31,119,30,119,29,19,31,54,31,173,31,70,31,70,30,61,31,58,31,203,31,82,31,82,30,106,31,179,31,233,31,23,31,211,31,154,31,41,31,109,31,137,31,83,31,83,30,208,31,56,31,155,31,34,31,34,30,34,29,37,31,82,31,154,31,193,31,193,30,229,31,229,30,203,31,2,31,190,31,128,31,235,31,235,30,161,31,41,31,41,30,213,31,182,31,124,31,188,31,85,31,238,31,100,31,222,31,166,31,33,31,70,31,7,31,7,30,8,31,174,31,60,31,26,31,148,31,101,31,58,31,58,30,106,31,220,31,86,31,86,30,99,31,73,31,201,31,93,31,132,31,106,31,151,31,114,31,114,30,22,31,22,30,109,31,25,31,60,31,145,31,249,31,103,31,103,30,192,31,26,31,26,30,198,31,182,31,18,31,234,31,249,31,165,31,21,31,56,31,27,31,31,31,223,31,49,31,121,31,140,31,90,31,90,30,183,31,235,31,245,31,245,30,245,29,57,31,47,31,47,30,149,31,201,31,129,31,169,31,236,31,166,31,166,30,46,31,46,30,191,31,191,30,81,31,215,31,95,31,156,31,63,31,157,31,17,31,17,30,17,29,139,31,218,31,218,30,65,31,65,30,65,29,199,31,47,31,2,31,29,31,222,31,249,31,242,31,152,31,152,30,51,31,242,31,15,31,15,30,47,31,204,31,13,31,46,31,72,31,237,31,199,31,199,30,100,31,100,30,100,29,66,31,112,31,112,30,186,31,153,31,149,31,149,30,203,31,218,31,218,30,218,29,207,31,216,31,41,31,41,30,244,31,244,30,117,31,117,30,105,31,243,31,197,31,110,31,236,31,236,30,128,31,227,31,247,31,175,31,75,31,59,31,34,31,152,31,166,31,235,31,103,31,39,31,27,31,196,31,196,30,113,31,39,31,241,31,241,30,128,31,35,31,51,31,51,30,131,31,131,30,92,31,92,30,92,29,132,31,125,31,125,30,233,31,185,31,68,31,91,31,9,31,131,31,131,30,81,31,69,31,69,30,39,31,2,31,21,31,21,30,196,31,126,31,90,31,182,31,132,31,132,30,187,31,187,30,10,31,84,31,84,30,238,31,161,31,217,31,14,31,32,31,120,31,210,31,17,31,60,31,185,31,220,31,214,31,76,31,132,31,15,31,220,31,210,31,216,31,4,31,4,30,4,29,174,31,174,30,56,31,31,31,186,31,165,31,190,31,180,31,89,31,96,31,233,31,233,30,189,31,202,31,136,31,128,31,244,31,113,31,175,31,249,31,255,31,255,30,255,29,255,28,216,31,56,31,202,31,44,31,188,31,61,31,133,31,159,31,233,31,94,31,151,31,151,30,193,31,143,31,95,31,237,31,175,31,229,31,229,30,229,29,229,28,206,31,191,31,234,31,72,31,85,31,232,31,177,31,122,31,149,31,249,31,43,31,248,31,251,31,246,31,212,31,218,31,191,31,8,31,228,31,87,31,71,31,146,31,79,31,176,31,211,31,111,31,147,31,22,31,255,31,82,31,201,31,177,31,124,31,124,30,134,31,119,31,50,31,64,31,254,31,157,31,116,31,182,31,182,30,181,31,126,31,126,30,206,31,206,30,11,31,11,30,11,29,11,28,11,27,48,31,48,30,100,31,214,31,143,31,49,31,164,31,76,31,204,31,38,31,18,31,107,31,46,31,61,31,61,30,38,31,125,31,159,31,4,31,251,31,251,30,31,31,120,31,164,31,177,31,142,31,191,31,54,31,75,31,248,31,169,31,169,30,235,31,173,31,173,30,2,31,2,30,31,31,83,31,242,31,168,31,168,30,32,31,17,31,190,31,190,30,168,31,87,31,47,31,47,30,134,31,163,31,100,31,100,30,195,31,195,30,195,29,204,31,134,31,254,31,98,31,161,31,246,31,57,31,151,31,127,31,127,30,122,31,41,31,201,31,134,31,149,31,149,30,149,29,111,31,46,31,173,31,159,31,5,31,5,30,179,31,31,31,6,31,251,31,185,31,135,31,183,31,168,31,26,31,249,31,214,31,31,31,96,31,174,31,174,30,174,29,27,31,49,31,174,31,174,30,12,31,144,31,80,31,80,30,80,29,105,31,105,30,105,29,149,31,226,31,204,31,154,31,154,30,94,31,13,31,8,31,218,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
