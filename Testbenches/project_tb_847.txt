-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 510;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (213,0,174,0,22,0,236,0,63,0,30,0,147,0,0,0,89,0,171,0,0,0,100,0,55,0,135,0,213,0,46,0,231,0,0,0,36,0,14,0,120,0,0,0,228,0,188,0,251,0,0,0,65,0,216,0,0,0,56,0,18,0,27,0,65,0,125,0,170,0,0,0,199,0,232,0,252,0,136,0,6,0,52,0,0,0,0,0,0,0,197,0,39,0,0,0,42,0,94,0,0,0,209,0,182,0,0,0,0,0,61,0,95,0,58,0,48,0,181,0,129,0,214,0,0,0,174,0,61,0,0,0,130,0,61,0,237,0,4,0,0,0,76,0,217,0,11,0,203,0,0,0,158,0,0,0,81,0,164,0,111,0,0,0,135,0,49,0,0,0,7,0,88,0,72,0,147,0,0,0,34,0,63,0,35,0,104,0,58,0,247,0,6,0,198,0,241,0,91,0,187,0,0,0,0,0,0,0,95,0,250,0,125,0,18,0,153,0,209,0,0,0,187,0,221,0,224,0,59,0,183,0,116,0,21,0,13,0,71,0,61,0,216,0,129,0,0,0,57,0,179,0,123,0,20,0,164,0,252,0,0,0,56,0,0,0,48,0,0,0,0,0,182,0,147,0,184,0,166,0,67,0,0,0,106,0,231,0,215,0,173,0,160,0,251,0,174,0,207,0,0,0,126,0,29,0,14,0,0,0,20,0,0,0,112,0,171,0,55,0,0,0,248,0,12,0,216,0,182,0,102,0,0,0,202,0,207,0,123,0,0,0,22,0,168,0,89,0,0,0,169,0,0,0,91,0,119,0,191,0,195,0,93,0,0,0,0,0,81,0,0,0,152,0,93,0,9,0,139,0,232,0,238,0,167,0,136,0,165,0,254,0,121,0,65,0,242,0,124,0,71,0,139,0,112,0,45,0,0,0,5,0,23,0,68,0,186,0,233,0,0,0,54,0,0,0,106,0,117,0,125,0,0,0,217,0,151,0,165,0,218,0,220,0,218,0,158,0,0,0,0,0,164,0,122,0,172,0,72,0,50,0,75,0,0,0,210,0,122,0,0,0,0,0,58,0,116,0,104,0,199,0,184,0,16,0,194,0,0,0,117,0,62,0,112,0,164,0,0,0,201,0,109,0,93,0,129,0,190,0,156,0,210,0,198,0,141,0,96,0,111,0,148,0,3,0,37,0,241,0,217,0,113,0,25,0,62,0,0,0,242,0,173,0,117,0,123,0,244,0,240,0,233,0,200,0,163,0,22,0,31,0,90,0,167,0,227,0,50,0,0,0,240,0,70,0,114,0,0,0,81,0,0,0,122,0,0,0,0,0,83,0,0,0,98,0,240,0,27,0,254,0,76,0,21,0,136,0,243,0,134,0,0,0,191,0,24,0,138,0,154,0,15,0,169,0,92,0,120,0,0,0,107,0,0,0,107,0,91,0,172,0,152,0,67,0,228,0,66,0,12,0,81,0,97,0,130,0,71,0,98,0,172,0,1,0,164,0,111,0,120,0,73,0,172,0,247,0,244,0,81,0,105,0,44,0,0,0,87,0,0,0,140,0,42,0,0,0,9,0,0,0,180,0,144,0,149,0,97,0,223,0,0,0,226,0,39,0,52,0,51,0,31,0,91,0,247,0,38,0,28,0,145,0,0,0,206,0,140,0,228,0,171,0,2,0,101,0,130,0,176,0,4,0,175,0,14,0,216,0,0,0,105,0,249,0,173,0,113,0,191,0,130,0,59,0,0,0,4,0,0,0,0,0,246,0,65,0,94,0,5,0,92,0,234,0,220,0,134,0,8,0,162,0,37,0,8,0,80,0,115,0,207,0,0,0,213,0,140,0,248,0,190,0,123,0,190,0,0,0,252,0,172,0,12,0,0,0,111,0,0,0,171,0,60,0,248,0,206,0,138,0,55,0,5,0,51,0,169,0,0,0,0,0,123,0,184,0,36,0,192,0,0,0,0,0,241,0,42,0,164,0,212,0,250,0,89,0,0,0,0,0,53,0,149,0,75,0,130,0,206,0,55,0,105,0,180,0,66,0,0,0,252,0,97,0,0,0,0,0,99,0,0,0,0,0,111,0,72,0,90,0,0,0,149,0,33,0,0,0,95,0,0,0,163,0,7,0,94,0,10,0,151,0,255,0,0,0,0,0,112,0,0,0,0,0,43,0,94,0,210,0,60,0,0,0,246,0,178,0,0,0,78,0,85,0,194,0,214,0,221,0,90,0,56,0,0,0,33,0,25,0,0,0,197,0,0,0,9,0,203,0,200,0,141,0,0,0,106,0);
signal scenario_full  : scenario_type := (213,31,174,31,22,31,236,31,63,31,30,31,147,31,147,30,89,31,171,31,171,30,100,31,55,31,135,31,213,31,46,31,231,31,231,30,36,31,14,31,120,31,120,30,228,31,188,31,251,31,251,30,65,31,216,31,216,30,56,31,18,31,27,31,65,31,125,31,170,31,170,30,199,31,232,31,252,31,136,31,6,31,52,31,52,30,52,29,52,28,197,31,39,31,39,30,42,31,94,31,94,30,209,31,182,31,182,30,182,29,61,31,95,31,58,31,48,31,181,31,129,31,214,31,214,30,174,31,61,31,61,30,130,31,61,31,237,31,4,31,4,30,76,31,217,31,11,31,203,31,203,30,158,31,158,30,81,31,164,31,111,31,111,30,135,31,49,31,49,30,7,31,88,31,72,31,147,31,147,30,34,31,63,31,35,31,104,31,58,31,247,31,6,31,198,31,241,31,91,31,187,31,187,30,187,29,187,28,95,31,250,31,125,31,18,31,153,31,209,31,209,30,187,31,221,31,224,31,59,31,183,31,116,31,21,31,13,31,71,31,61,31,216,31,129,31,129,30,57,31,179,31,123,31,20,31,164,31,252,31,252,30,56,31,56,30,48,31,48,30,48,29,182,31,147,31,184,31,166,31,67,31,67,30,106,31,231,31,215,31,173,31,160,31,251,31,174,31,207,31,207,30,126,31,29,31,14,31,14,30,20,31,20,30,112,31,171,31,55,31,55,30,248,31,12,31,216,31,182,31,102,31,102,30,202,31,207,31,123,31,123,30,22,31,168,31,89,31,89,30,169,31,169,30,91,31,119,31,191,31,195,31,93,31,93,30,93,29,81,31,81,30,152,31,93,31,9,31,139,31,232,31,238,31,167,31,136,31,165,31,254,31,121,31,65,31,242,31,124,31,71,31,139,31,112,31,45,31,45,30,5,31,23,31,68,31,186,31,233,31,233,30,54,31,54,30,106,31,117,31,125,31,125,30,217,31,151,31,165,31,218,31,220,31,218,31,158,31,158,30,158,29,164,31,122,31,172,31,72,31,50,31,75,31,75,30,210,31,122,31,122,30,122,29,58,31,116,31,104,31,199,31,184,31,16,31,194,31,194,30,117,31,62,31,112,31,164,31,164,30,201,31,109,31,93,31,129,31,190,31,156,31,210,31,198,31,141,31,96,31,111,31,148,31,3,31,37,31,241,31,217,31,113,31,25,31,62,31,62,30,242,31,173,31,117,31,123,31,244,31,240,31,233,31,200,31,163,31,22,31,31,31,90,31,167,31,227,31,50,31,50,30,240,31,70,31,114,31,114,30,81,31,81,30,122,31,122,30,122,29,83,31,83,30,98,31,240,31,27,31,254,31,76,31,21,31,136,31,243,31,134,31,134,30,191,31,24,31,138,31,154,31,15,31,169,31,92,31,120,31,120,30,107,31,107,30,107,31,91,31,172,31,152,31,67,31,228,31,66,31,12,31,81,31,97,31,130,31,71,31,98,31,172,31,1,31,164,31,111,31,120,31,73,31,172,31,247,31,244,31,81,31,105,31,44,31,44,30,87,31,87,30,140,31,42,31,42,30,9,31,9,30,180,31,144,31,149,31,97,31,223,31,223,30,226,31,39,31,52,31,51,31,31,31,91,31,247,31,38,31,28,31,145,31,145,30,206,31,140,31,228,31,171,31,2,31,101,31,130,31,176,31,4,31,175,31,14,31,216,31,216,30,105,31,249,31,173,31,113,31,191,31,130,31,59,31,59,30,4,31,4,30,4,29,246,31,65,31,94,31,5,31,92,31,234,31,220,31,134,31,8,31,162,31,37,31,8,31,80,31,115,31,207,31,207,30,213,31,140,31,248,31,190,31,123,31,190,31,190,30,252,31,172,31,12,31,12,30,111,31,111,30,171,31,60,31,248,31,206,31,138,31,55,31,5,31,51,31,169,31,169,30,169,29,123,31,184,31,36,31,192,31,192,30,192,29,241,31,42,31,164,31,212,31,250,31,89,31,89,30,89,29,53,31,149,31,75,31,130,31,206,31,55,31,105,31,180,31,66,31,66,30,252,31,97,31,97,30,97,29,99,31,99,30,99,29,111,31,72,31,90,31,90,30,149,31,33,31,33,30,95,31,95,30,163,31,7,31,94,31,10,31,151,31,255,31,255,30,255,29,112,31,112,30,112,29,43,31,94,31,210,31,60,31,60,30,246,31,178,31,178,30,78,31,85,31,194,31,214,31,221,31,90,31,56,31,56,30,33,31,25,31,25,30,197,31,197,30,9,31,203,31,200,31,141,31,141,30,106,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
