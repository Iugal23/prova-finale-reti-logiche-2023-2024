-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 603;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (188,0,106,0,143,0,36,0,75,0,128,0,160,0,224,0,201,0,0,0,210,0,0,0,24,0,165,0,137,0,244,0,228,0,111,0,45,0,136,0,23,0,78,0,95,0,232,0,0,0,6,0,0,0,132,0,204,0,0,0,0,0,0,0,134,0,255,0,130,0,167,0,217,0,181,0,157,0,0,0,252,0,20,0,139,0,77,0,93,0,215,0,54,0,100,0,65,0,181,0,0,0,88,0,251,0,175,0,135,0,0,0,21,0,171,0,104,0,145,0,0,0,32,0,86,0,245,0,233,0,221,0,132,0,0,0,151,0,33,0,0,0,54,0,230,0,244,0,0,0,65,0,0,0,204,0,102,0,93,0,159,0,12,0,64,0,196,0,35,0,223,0,0,0,0,0,0,0,80,0,164,0,38,0,0,0,121,0,247,0,114,0,0,0,147,0,0,0,104,0,250,0,38,0,109,0,0,0,238,0,0,0,158,0,9,0,222,0,240,0,71,0,0,0,84,0,124,0,83,0,6,0,187,0,7,0,138,0,87,0,0,0,74,0,174,0,0,0,4,0,115,0,35,0,162,0,190,0,0,0,0,0,131,0,0,0,207,0,156,0,34,0,114,0,213,0,20,0,98,0,192,0,55,0,0,0,56,0,207,0,73,0,0,0,143,0,254,0,0,0,116,0,26,0,185,0,219,0,47,0,114,0,163,0,7,0,133,0,0,0,235,0,145,0,147,0,0,0,83,0,39,0,223,0,0,0,220,0,0,0,0,0,0,0,133,0,231,0,99,0,101,0,72,0,0,0,96,0,92,0,243,0,96,0,106,0,228,0,60,0,123,0,0,0,1,0,14,0,154,0,71,0,246,0,252,0,26,0,55,0,0,0,140,0,204,0,27,0,41,0,0,0,196,0,40,0,219,0,6,0,91,0,244,0,142,0,66,0,0,0,137,0,136,0,131,0,35,0,0,0,123,0,32,0,253,0,166,0,219,0,58,0,187,0,1,0,114,0,21,0,233,0,82,0,215,0,0,0,0,0,210,0,153,0,230,0,71,0,224,0,254,0,92,0,0,0,97,0,53,0,119,0,25,0,121,0,29,0,66,0,97,0,183,0,6,0,0,0,68,0,219,0,178,0,79,0,21,0,0,0,194,0,0,0,169,0,207,0,0,0,168,0,18,0,102,0,181,0,5,0,233,0,0,0,2,0,127,0,155,0,245,0,15,0,0,0,154,0,36,0,106,0,0,0,0,0,53,0,85,0,0,0,0,0,70,0,19,0,146,0,0,0,0,0,130,0,171,0,182,0,102,0,225,0,103,0,115,0,3,0,98,0,255,0,230,0,230,0,67,0,182,0,169,0,160,0,82,0,150,0,87,0,164,0,54,0,13,0,53,0,126,0,0,0,207,0,23,0,20,0,20,0,228,0,210,0,85,0,226,0,126,0,144,0,81,0,211,0,48,0,0,0,27,0,0,0,192,0,204,0,0,0,215,0,116,0,35,0,55,0,236,0,0,0,214,0,2,0,203,0,219,0,17,0,187,0,0,0,52,0,3,0,150,0,3,0,6,0,26,0,194,0,135,0,245,0,57,0,248,0,0,0,0,0,158,0,38,0,60,0,59,0,230,0,0,0,0,0,182,0,252,0,142,0,59,0,218,0,106,0,182,0,155,0,169,0,124,0,0,0,204,0,156,0,169,0,96,0,189,0,168,0,171,0,30,0,85,0,194,0,203,0,29,0,26,0,113,0,149,0,143,0,0,0,14,0,10,0,175,0,40,0,39,0,153,0,238,0,117,0,242,0,223,0,21,0,97,0,0,0,179,0,70,0,144,0,96,0,210,0,0,0,8,0,118,0,217,0,60,0,0,0,0,0,128,0,165,0,0,0,102,0,0,0,7,0,0,0,227,0,227,0,109,0,111,0,0,0,109,0,0,0,175,0,35,0,218,0,224,0,132,0,112,0,58,0,231,0,148,0,37,0,182,0,209,0,228,0,67,0,188,0,72,0,173,0,67,0,0,0,3,0,142,0,0,0,151,0,185,0,0,0,0,0,147,0,8,0,0,0,248,0,109,0,0,0,27,0,80,0,194,0,63,0,0,0,0,0,149,0,247,0,171,0,180,0,124,0,50,0,0,0,170,0,177,0,0,0,63,0,170,0,200,0,0,0,235,0,233,0,113,0,35,0,177,0,100,0,161,0,126,0,0,0,157,0,0,0,0,0,247,0,237,0,178,0,252,0,86,0,0,0,0,0,0,0,0,0,214,0,22,0,252,0,18,0,74,0,62,0,0,0,142,0,13,0,175,0,45,0,57,0,6,0,149,0,161,0,96,0,163,0,0,0,0,0,76,0,78,0,160,0,137,0,170,0,101,0,131,0,0,0,34,0,0,0,138,0,0,0,134,0,145,0,0,0,35,0,38,0,89,0,238,0,241,0,116,0,67,0,29,0,202,0,0,0,200,0,24,0,241,0,219,0,128,0,79,0,106,0,126,0,219,0,0,0,0,0,212,0,146,0,94,0,0,0,116,0,174,0,154,0,136,0,255,0,88,0,0,0,130,0,0,0,17,0,66,0,42,0,196,0,33,0,106,0,0,0,75,0,35,0,53,0,53,0,0,0,2,0,104,0,105,0,97,0,0,0,219,0,125,0,199,0,182,0,0,0,37,0,0,0,204,0,69,0,12,0,213,0,57,0,47,0,221,0);
signal scenario_full  : scenario_type := (188,31,106,31,143,31,36,31,75,31,128,31,160,31,224,31,201,31,201,30,210,31,210,30,24,31,165,31,137,31,244,31,228,31,111,31,45,31,136,31,23,31,78,31,95,31,232,31,232,30,6,31,6,30,132,31,204,31,204,30,204,29,204,28,134,31,255,31,130,31,167,31,217,31,181,31,157,31,157,30,252,31,20,31,139,31,77,31,93,31,215,31,54,31,100,31,65,31,181,31,181,30,88,31,251,31,175,31,135,31,135,30,21,31,171,31,104,31,145,31,145,30,32,31,86,31,245,31,233,31,221,31,132,31,132,30,151,31,33,31,33,30,54,31,230,31,244,31,244,30,65,31,65,30,204,31,102,31,93,31,159,31,12,31,64,31,196,31,35,31,223,31,223,30,223,29,223,28,80,31,164,31,38,31,38,30,121,31,247,31,114,31,114,30,147,31,147,30,104,31,250,31,38,31,109,31,109,30,238,31,238,30,158,31,9,31,222,31,240,31,71,31,71,30,84,31,124,31,83,31,6,31,187,31,7,31,138,31,87,31,87,30,74,31,174,31,174,30,4,31,115,31,35,31,162,31,190,31,190,30,190,29,131,31,131,30,207,31,156,31,34,31,114,31,213,31,20,31,98,31,192,31,55,31,55,30,56,31,207,31,73,31,73,30,143,31,254,31,254,30,116,31,26,31,185,31,219,31,47,31,114,31,163,31,7,31,133,31,133,30,235,31,145,31,147,31,147,30,83,31,39,31,223,31,223,30,220,31,220,30,220,29,220,28,133,31,231,31,99,31,101,31,72,31,72,30,96,31,92,31,243,31,96,31,106,31,228,31,60,31,123,31,123,30,1,31,14,31,154,31,71,31,246,31,252,31,26,31,55,31,55,30,140,31,204,31,27,31,41,31,41,30,196,31,40,31,219,31,6,31,91,31,244,31,142,31,66,31,66,30,137,31,136,31,131,31,35,31,35,30,123,31,32,31,253,31,166,31,219,31,58,31,187,31,1,31,114,31,21,31,233,31,82,31,215,31,215,30,215,29,210,31,153,31,230,31,71,31,224,31,254,31,92,31,92,30,97,31,53,31,119,31,25,31,121,31,29,31,66,31,97,31,183,31,6,31,6,30,68,31,219,31,178,31,79,31,21,31,21,30,194,31,194,30,169,31,207,31,207,30,168,31,18,31,102,31,181,31,5,31,233,31,233,30,2,31,127,31,155,31,245,31,15,31,15,30,154,31,36,31,106,31,106,30,106,29,53,31,85,31,85,30,85,29,70,31,19,31,146,31,146,30,146,29,130,31,171,31,182,31,102,31,225,31,103,31,115,31,3,31,98,31,255,31,230,31,230,31,67,31,182,31,169,31,160,31,82,31,150,31,87,31,164,31,54,31,13,31,53,31,126,31,126,30,207,31,23,31,20,31,20,31,228,31,210,31,85,31,226,31,126,31,144,31,81,31,211,31,48,31,48,30,27,31,27,30,192,31,204,31,204,30,215,31,116,31,35,31,55,31,236,31,236,30,214,31,2,31,203,31,219,31,17,31,187,31,187,30,52,31,3,31,150,31,3,31,6,31,26,31,194,31,135,31,245,31,57,31,248,31,248,30,248,29,158,31,38,31,60,31,59,31,230,31,230,30,230,29,182,31,252,31,142,31,59,31,218,31,106,31,182,31,155,31,169,31,124,31,124,30,204,31,156,31,169,31,96,31,189,31,168,31,171,31,30,31,85,31,194,31,203,31,29,31,26,31,113,31,149,31,143,31,143,30,14,31,10,31,175,31,40,31,39,31,153,31,238,31,117,31,242,31,223,31,21,31,97,31,97,30,179,31,70,31,144,31,96,31,210,31,210,30,8,31,118,31,217,31,60,31,60,30,60,29,128,31,165,31,165,30,102,31,102,30,7,31,7,30,227,31,227,31,109,31,111,31,111,30,109,31,109,30,175,31,35,31,218,31,224,31,132,31,112,31,58,31,231,31,148,31,37,31,182,31,209,31,228,31,67,31,188,31,72,31,173,31,67,31,67,30,3,31,142,31,142,30,151,31,185,31,185,30,185,29,147,31,8,31,8,30,248,31,109,31,109,30,27,31,80,31,194,31,63,31,63,30,63,29,149,31,247,31,171,31,180,31,124,31,50,31,50,30,170,31,177,31,177,30,63,31,170,31,200,31,200,30,235,31,233,31,113,31,35,31,177,31,100,31,161,31,126,31,126,30,157,31,157,30,157,29,247,31,237,31,178,31,252,31,86,31,86,30,86,29,86,28,86,27,214,31,22,31,252,31,18,31,74,31,62,31,62,30,142,31,13,31,175,31,45,31,57,31,6,31,149,31,161,31,96,31,163,31,163,30,163,29,76,31,78,31,160,31,137,31,170,31,101,31,131,31,131,30,34,31,34,30,138,31,138,30,134,31,145,31,145,30,35,31,38,31,89,31,238,31,241,31,116,31,67,31,29,31,202,31,202,30,200,31,24,31,241,31,219,31,128,31,79,31,106,31,126,31,219,31,219,30,219,29,212,31,146,31,94,31,94,30,116,31,174,31,154,31,136,31,255,31,88,31,88,30,130,31,130,30,17,31,66,31,42,31,196,31,33,31,106,31,106,30,75,31,35,31,53,31,53,31,53,30,2,31,104,31,105,31,97,31,97,30,219,31,125,31,199,31,182,31,182,30,37,31,37,30,204,31,69,31,12,31,213,31,57,31,47,31,221,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
