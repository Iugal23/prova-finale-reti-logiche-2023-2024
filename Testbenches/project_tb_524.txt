-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 776;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (238,0,0,0,234,0,213,0,0,0,103,0,210,0,178,0,104,0,160,0,55,0,236,0,107,0,122,0,177,0,54,0,173,0,22,0,0,0,2,0,48,0,230,0,187,0,108,0,138,0,159,0,231,0,87,0,180,0,111,0,80,0,240,0,47,0,20,0,0,0,29,0,35,0,74,0,144,0,0,0,0,0,8,0,28,0,11,0,17,0,203,0,134,0,218,0,0,0,251,0,0,0,215,0,117,0,94,0,208,0,60,0,106,0,0,0,187,0,56,0,128,0,28,0,63,0,239,0,203,0,0,0,209,0,0,0,72,0,156,0,125,0,69,0,232,0,0,0,52,0,207,0,167,0,159,0,8,0,15,0,170,0,101,0,60,0,145,0,0,0,228,0,161,0,174,0,50,0,151,0,214,0,80,0,190,0,253,0,0,0,143,0,112,0,147,0,103,0,145,0,0,0,108,0,230,0,170,0,0,0,52,0,184,0,0,0,0,0,9,0,106,0,182,0,169,0,240,0,225,0,39,0,0,0,137,0,0,0,82,0,1,0,0,0,125,0,112,0,83,0,14,0,22,0,201,0,167,0,213,0,34,0,65,0,13,0,152,0,0,0,75,0,0,0,229,0,233,0,209,0,66,0,44,0,97,0,209,0,0,0,0,0,71,0,82,0,0,0,0,0,0,0,225,0,0,0,158,0,112,0,26,0,81,0,195,0,48,0,55,0,227,0,113,0,42,0,141,0,106,0,156,0,162,0,151,0,0,0,0,0,102,0,176,0,162,0,62,0,1,0,56,0,77,0,137,0,5,0,0,0,177,0,36,0,0,0,0,0,59,0,164,0,8,0,124,0,54,0,146,0,220,0,148,0,0,0,52,0,89,0,221,0,252,0,169,0,252,0,131,0,103,0,183,0,17,0,192,0,153,0,0,0,234,0,245,0,6,0,106,0,237,0,215,0,176,0,0,0,0,0,0,0,0,0,230,0,234,0,0,0,53,0,221,0,153,0,115,0,191,0,0,0,117,0,106,0,0,0,110,0,129,0,0,0,127,0,29,0,0,0,0,0,0,0,45,0,70,0,162,0,136,0,252,0,4,0,106,0,68,0,169,0,0,0,146,0,195,0,162,0,188,0,17,0,77,0,9,0,0,0,0,0,0,0,110,0,53,0,206,0,81,0,115,0,63,0,67,0,161,0,253,0,205,0,163,0,92,0,167,0,0,0,108,0,14,0,233,0,187,0,198,0,210,0,0,0,11,0,20,0,19,0,0,0,201,0,108,0,191,0,99,0,0,0,181,0,195,0,236,0,27,0,46,0,165,0,199,0,158,0,47,0,0,0,9,0,40,0,251,0,52,0,184,0,190,0,251,0,0,0,229,0,35,0,5,0,93,0,118,0,130,0,246,0,47,0,159,0,167,0,152,0,31,0,0,0,234,0,74,0,195,0,209,0,184,0,96,0,0,0,210,0,0,0,102,0,212,0,84,0,0,0,0,0,0,0,36,0,84,0,178,0,182,0,13,0,0,0,0,0,74,0,201,0,236,0,71,0,163,0,186,0,255,0,0,0,252,0,144,0,254,0,113,0,0,0,210,0,84,0,241,0,186,0,0,0,166,0,5,0,221,0,119,0,119,0,207,0,166,0,202,0,222,0,192,0,253,0,102,0,135,0,71,0,157,0,9,0,229,0,91,0,165,0,0,0,91,0,195,0,233,0,0,0,0,0,2,0,100,0,72,0,236,0,72,0,234,0,181,0,96,0,0,0,52,0,164,0,73,0,39,0,0,0,152,0,0,0,155,0,61,0,228,0,0,0,167,0,0,0,140,0,207,0,222,0,135,0,0,0,105,0,0,0,189,0,221,0,215,0,0,0,0,0,0,0,65,0,43,0,163,0,107,0,184,0,0,0,168,0,65,0,15,0,71,0,0,0,25,0,232,0,44,0,86,0,183,0,0,0,48,0,79,0,103,0,125,0,138,0,3,0,74,0,133,0,213,0,75,0,124,0,120,0,0,0,104,0,136,0,0,0,88,0,144,0,169,0,154,0,212,0,24,0,125,0,196,0,36,0,220,0,131,0,181,0,81,0,21,0,191,0,243,0,61,0,142,0,196,0,40,0,21,0,142,0,162,0,0,0,72,0,0,0,108,0,0,0,207,0,117,0,180,0,120,0,65,0,90,0,47,0,239,0,0,0,47,0,73,0,13,0,0,0,57,0,215,0,0,0,0,0,235,0,51,0,157,0,69,0,0,0,0,0,215,0,222,0,160,0,0,0,0,0,34,0,173,0,183,0,51,0,172,0,241,0,241,0,102,0,174,0,160,0,73,0,149,0,126,0,151,0,221,0,62,0,0,0,31,0,145,0,221,0,52,0,219,0,157,0,203,0,230,0,138,0,201,0,200,0,59,0,235,0,72,0,225,0,66,0,166,0,81,0,189,0,88,0,212,0,192,0,0,0,177,0,0,0,72,0,56,0,208,0,56,0,81,0,158,0,194,0,14,0,11,0,0,0,94,0,45,0,61,0,0,0,225,0,242,0,173,0,0,0,2,0,15,0,0,0,221,0,126,0,0,0,65,0,24,0,216,0,147,0,138,0,207,0,225,0,176,0,45,0,17,0,90,0,227,0,241,0,0,0,82,0,200,0,0,0,228,0,173,0,123,0,121,0,107,0,118,0,227,0,84,0,26,0,0,0,27,0,57,0,221,0,0,0,0,0,95,0,191,0,19,0,152,0,0,0,93,0,114,0,71,0,234,0,174,0,57,0,119,0,80,0,26,0,241,0,0,0,86,0,0,0,140,0,125,0,158,0,27,0,14,0,95,0,152,0,173,0,6,0,0,0,171,0,103,0,227,0,176,0,207,0,25,0,70,0,58,0,0,0,144,0,90,0,8,0,118,0,137,0,71,0,251,0,106,0,29,0,206,0,159,0,221,0,97,0,0,0,113,0,55,0,191,0,57,0,0,0,153,0,0,0,21,0,25,0,0,0,102,0,116,0,33,0,134,0,140,0,118,0,239,0,0,0,0,0,0,0,193,0,83,0,14,0,43,0,177,0,10,0,254,0,219,0,206,0,23,0,0,0,113,0,50,0,153,0,196,0,0,0,100,0,198,0,0,0,78,0,41,0,21,0,0,0,0,0,89,0,23,0,0,0,155,0,0,0,0,0,200,0,81,0,11,0,26,0,130,0,194,0,0,0,0,0,160,0,93,0,185,0,141,0,20,0,61,0,104,0,169,0,51,0,138,0,0,0,236,0,0,0,170,0,33,0,149,0,129,0,237,0,91,0,48,0,117,0,96,0,170,0,0,0,99,0,29,0,209,0,11,0,172,0,217,0,41,0,0,0,178,0,216,0,110,0,81,0,185,0,245,0,157,0,19,0,44,0,34,0,39,0,133,0,0,0,163,0,226,0,46,0,27,0,162,0,240,0,61,0,26,0,0,0,90,0,151,0,220,0,164,0,113,0,80,0,151,0,230,0);
signal scenario_full  : scenario_type := (238,31,238,30,234,31,213,31,213,30,103,31,210,31,178,31,104,31,160,31,55,31,236,31,107,31,122,31,177,31,54,31,173,31,22,31,22,30,2,31,48,31,230,31,187,31,108,31,138,31,159,31,231,31,87,31,180,31,111,31,80,31,240,31,47,31,20,31,20,30,29,31,35,31,74,31,144,31,144,30,144,29,8,31,28,31,11,31,17,31,203,31,134,31,218,31,218,30,251,31,251,30,215,31,117,31,94,31,208,31,60,31,106,31,106,30,187,31,56,31,128,31,28,31,63,31,239,31,203,31,203,30,209,31,209,30,72,31,156,31,125,31,69,31,232,31,232,30,52,31,207,31,167,31,159,31,8,31,15,31,170,31,101,31,60,31,145,31,145,30,228,31,161,31,174,31,50,31,151,31,214,31,80,31,190,31,253,31,253,30,143,31,112,31,147,31,103,31,145,31,145,30,108,31,230,31,170,31,170,30,52,31,184,31,184,30,184,29,9,31,106,31,182,31,169,31,240,31,225,31,39,31,39,30,137,31,137,30,82,31,1,31,1,30,125,31,112,31,83,31,14,31,22,31,201,31,167,31,213,31,34,31,65,31,13,31,152,31,152,30,75,31,75,30,229,31,233,31,209,31,66,31,44,31,97,31,209,31,209,30,209,29,71,31,82,31,82,30,82,29,82,28,225,31,225,30,158,31,112,31,26,31,81,31,195,31,48,31,55,31,227,31,113,31,42,31,141,31,106,31,156,31,162,31,151,31,151,30,151,29,102,31,176,31,162,31,62,31,1,31,56,31,77,31,137,31,5,31,5,30,177,31,36,31,36,30,36,29,59,31,164,31,8,31,124,31,54,31,146,31,220,31,148,31,148,30,52,31,89,31,221,31,252,31,169,31,252,31,131,31,103,31,183,31,17,31,192,31,153,31,153,30,234,31,245,31,6,31,106,31,237,31,215,31,176,31,176,30,176,29,176,28,176,27,230,31,234,31,234,30,53,31,221,31,153,31,115,31,191,31,191,30,117,31,106,31,106,30,110,31,129,31,129,30,127,31,29,31,29,30,29,29,29,28,45,31,70,31,162,31,136,31,252,31,4,31,106,31,68,31,169,31,169,30,146,31,195,31,162,31,188,31,17,31,77,31,9,31,9,30,9,29,9,28,110,31,53,31,206,31,81,31,115,31,63,31,67,31,161,31,253,31,205,31,163,31,92,31,167,31,167,30,108,31,14,31,233,31,187,31,198,31,210,31,210,30,11,31,20,31,19,31,19,30,201,31,108,31,191,31,99,31,99,30,181,31,195,31,236,31,27,31,46,31,165,31,199,31,158,31,47,31,47,30,9,31,40,31,251,31,52,31,184,31,190,31,251,31,251,30,229,31,35,31,5,31,93,31,118,31,130,31,246,31,47,31,159,31,167,31,152,31,31,31,31,30,234,31,74,31,195,31,209,31,184,31,96,31,96,30,210,31,210,30,102,31,212,31,84,31,84,30,84,29,84,28,36,31,84,31,178,31,182,31,13,31,13,30,13,29,74,31,201,31,236,31,71,31,163,31,186,31,255,31,255,30,252,31,144,31,254,31,113,31,113,30,210,31,84,31,241,31,186,31,186,30,166,31,5,31,221,31,119,31,119,31,207,31,166,31,202,31,222,31,192,31,253,31,102,31,135,31,71,31,157,31,9,31,229,31,91,31,165,31,165,30,91,31,195,31,233,31,233,30,233,29,2,31,100,31,72,31,236,31,72,31,234,31,181,31,96,31,96,30,52,31,164,31,73,31,39,31,39,30,152,31,152,30,155,31,61,31,228,31,228,30,167,31,167,30,140,31,207,31,222,31,135,31,135,30,105,31,105,30,189,31,221,31,215,31,215,30,215,29,215,28,65,31,43,31,163,31,107,31,184,31,184,30,168,31,65,31,15,31,71,31,71,30,25,31,232,31,44,31,86,31,183,31,183,30,48,31,79,31,103,31,125,31,138,31,3,31,74,31,133,31,213,31,75,31,124,31,120,31,120,30,104,31,136,31,136,30,88,31,144,31,169,31,154,31,212,31,24,31,125,31,196,31,36,31,220,31,131,31,181,31,81,31,21,31,191,31,243,31,61,31,142,31,196,31,40,31,21,31,142,31,162,31,162,30,72,31,72,30,108,31,108,30,207,31,117,31,180,31,120,31,65,31,90,31,47,31,239,31,239,30,47,31,73,31,13,31,13,30,57,31,215,31,215,30,215,29,235,31,51,31,157,31,69,31,69,30,69,29,215,31,222,31,160,31,160,30,160,29,34,31,173,31,183,31,51,31,172,31,241,31,241,31,102,31,174,31,160,31,73,31,149,31,126,31,151,31,221,31,62,31,62,30,31,31,145,31,221,31,52,31,219,31,157,31,203,31,230,31,138,31,201,31,200,31,59,31,235,31,72,31,225,31,66,31,166,31,81,31,189,31,88,31,212,31,192,31,192,30,177,31,177,30,72,31,56,31,208,31,56,31,81,31,158,31,194,31,14,31,11,31,11,30,94,31,45,31,61,31,61,30,225,31,242,31,173,31,173,30,2,31,15,31,15,30,221,31,126,31,126,30,65,31,24,31,216,31,147,31,138,31,207,31,225,31,176,31,45,31,17,31,90,31,227,31,241,31,241,30,82,31,200,31,200,30,228,31,173,31,123,31,121,31,107,31,118,31,227,31,84,31,26,31,26,30,27,31,57,31,221,31,221,30,221,29,95,31,191,31,19,31,152,31,152,30,93,31,114,31,71,31,234,31,174,31,57,31,119,31,80,31,26,31,241,31,241,30,86,31,86,30,140,31,125,31,158,31,27,31,14,31,95,31,152,31,173,31,6,31,6,30,171,31,103,31,227,31,176,31,207,31,25,31,70,31,58,31,58,30,144,31,90,31,8,31,118,31,137,31,71,31,251,31,106,31,29,31,206,31,159,31,221,31,97,31,97,30,113,31,55,31,191,31,57,31,57,30,153,31,153,30,21,31,25,31,25,30,102,31,116,31,33,31,134,31,140,31,118,31,239,31,239,30,239,29,239,28,193,31,83,31,14,31,43,31,177,31,10,31,254,31,219,31,206,31,23,31,23,30,113,31,50,31,153,31,196,31,196,30,100,31,198,31,198,30,78,31,41,31,21,31,21,30,21,29,89,31,23,31,23,30,155,31,155,30,155,29,200,31,81,31,11,31,26,31,130,31,194,31,194,30,194,29,160,31,93,31,185,31,141,31,20,31,61,31,104,31,169,31,51,31,138,31,138,30,236,31,236,30,170,31,33,31,149,31,129,31,237,31,91,31,48,31,117,31,96,31,170,31,170,30,99,31,29,31,209,31,11,31,172,31,217,31,41,31,41,30,178,31,216,31,110,31,81,31,185,31,245,31,157,31,19,31,44,31,34,31,39,31,133,31,133,30,163,31,226,31,46,31,27,31,162,31,240,31,61,31,26,31,26,30,90,31,151,31,220,31,164,31,113,31,80,31,151,31,230,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
