-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 439;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (207,0,69,0,0,0,247,0,0,0,139,0,0,0,187,0,144,0,33,0,154,0,195,0,16,0,0,0,0,0,175,0,208,0,104,0,0,0,194,0,0,0,68,0,192,0,229,0,151,0,0,0,50,0,217,0,60,0,86,0,61,0,95,0,137,0,140,0,171,0,209,0,0,0,0,0,110,0,87,0,65,0,117,0,38,0,33,0,74,0,199,0,0,0,41,0,23,0,0,0,193,0,227,0,179,0,112,0,101,0,240,0,0,0,225,0,51,0,24,0,98,0,205,0,232,0,8,0,68,0,0,0,0,0,148,0,68,0,0,0,0,0,0,0,196,0,204,0,183,0,90,0,72,0,45,0,156,0,163,0,126,0,40,0,0,0,96,0,29,0,38,0,0,0,216,0,0,0,165,0,0,0,27,0,108,0,0,0,0,0,252,0,196,0,135,0,0,0,198,0,114,0,55,0,185,0,92,0,0,0,23,0,104,0,250,0,238,0,0,0,0,0,198,0,35,0,6,0,26,0,70,0,234,0,241,0,0,0,92,0,71,0,216,0,125,0,0,0,42,0,187,0,23,0,251,0,0,0,213,0,79,0,33,0,203,0,57,0,231,0,0,0,93,0,77,0,0,0,47,0,108,0,244,0,7,0,87,0,0,0,0,0,216,0,122,0,198,0,199,0,181,0,142,0,135,0,185,0,154,0,132,0,55,0,247,0,0,0,240,0,0,0,35,0,249,0,119,0,190,0,0,0,63,0,0,0,31,0,0,0,54,0,253,0,110,0,0,0,100,0,0,0,0,0,201,0,196,0,48,0,209,0,151,0,54,0,171,0,14,0,0,0,23,0,109,0,183,0,146,0,73,0,2,0,0,0,233,0,95,0,31,0,145,0,128,0,5,0,0,0,131,0,0,0,0,0,254,0,0,0,66,0,36,0,3,0,122,0,60,0,95,0,6,0,86,0,166,0,208,0,211,0,247,0,26,0,136,0,92,0,181,0,30,0,182,0,0,0,109,0,148,0,0,0,77,0,64,0,236,0,50,0,207,0,31,0,0,0,83,0,4,0,111,0,51,0,0,0,56,0,0,0,98,0,0,0,185,0,112,0,97,0,24,0,102,0,23,0,47,0,0,0,128,0,217,0,59,0,76,0,20,0,123,0,0,0,58,0,144,0,110,0,92,0,28,0,40,0,232,0,104,0,0,0,208,0,164,0,0,0,0,0,124,0,97,0,61,0,0,0,10,0,173,0,245,0,0,0,247,0,24,0,112,0,245,0,183,0,7,0,0,0,118,0,142,0,171,0,252,0,34,0,101,0,4,0,126,0,26,0,12,0,34,0,0,0,0,0,186,0,252,0,82,0,127,0,38,0,0,0,226,0,227,0,132,0,235,0,206,0,0,0,64,0,32,0,200,0,0,0,188,0,107,0,202,0,0,0,0,0,137,0,49,0,8,0,28,0,247,0,48,0,0,0,114,0,40,0,168,0,244,0,134,0,205,0,68,0,157,0,221,0,236,0,193,0,178,0,135,0,0,0,92,0,0,0,0,0,0,0,155,0,107,0,143,0,162,0,47,0,35,0,120,0,41,0,37,0,183,0,183,0,7,0,116,0,85,0,105,0,75,0,198,0,65,0,233,0,126,0,0,0,90,0,180,0,0,0,37,0,101,0,0,0,232,0,0,0,131,0,162,0,0,0,0,0,202,0,255,0,0,0,81,0,21,0,0,0,34,0,0,0,219,0,0,0,64,0,194,0,138,0,125,0,170,0,138,0,0,0,190,0,0,0,0,0,51,0,158,0,0,0,0,0,222,0,193,0,43,0,100,0,24,0,8,0,100,0,240,0,0,0,1,0,153,0,0,0,134,0,178,0,227,0,14,0,73,0,52,0,86,0,0,0,0,0,0,0,242,0,134,0,99,0,159,0,169,0,197,0,26,0,245,0,228,0,187,0,176,0,106,0,127,0,0,0,207,0);
signal scenario_full  : scenario_type := (207,31,69,31,69,30,247,31,247,30,139,31,139,30,187,31,144,31,33,31,154,31,195,31,16,31,16,30,16,29,175,31,208,31,104,31,104,30,194,31,194,30,68,31,192,31,229,31,151,31,151,30,50,31,217,31,60,31,86,31,61,31,95,31,137,31,140,31,171,31,209,31,209,30,209,29,110,31,87,31,65,31,117,31,38,31,33,31,74,31,199,31,199,30,41,31,23,31,23,30,193,31,227,31,179,31,112,31,101,31,240,31,240,30,225,31,51,31,24,31,98,31,205,31,232,31,8,31,68,31,68,30,68,29,148,31,68,31,68,30,68,29,68,28,196,31,204,31,183,31,90,31,72,31,45,31,156,31,163,31,126,31,40,31,40,30,96,31,29,31,38,31,38,30,216,31,216,30,165,31,165,30,27,31,108,31,108,30,108,29,252,31,196,31,135,31,135,30,198,31,114,31,55,31,185,31,92,31,92,30,23,31,104,31,250,31,238,31,238,30,238,29,198,31,35,31,6,31,26,31,70,31,234,31,241,31,241,30,92,31,71,31,216,31,125,31,125,30,42,31,187,31,23,31,251,31,251,30,213,31,79,31,33,31,203,31,57,31,231,31,231,30,93,31,77,31,77,30,47,31,108,31,244,31,7,31,87,31,87,30,87,29,216,31,122,31,198,31,199,31,181,31,142,31,135,31,185,31,154,31,132,31,55,31,247,31,247,30,240,31,240,30,35,31,249,31,119,31,190,31,190,30,63,31,63,30,31,31,31,30,54,31,253,31,110,31,110,30,100,31,100,30,100,29,201,31,196,31,48,31,209,31,151,31,54,31,171,31,14,31,14,30,23,31,109,31,183,31,146,31,73,31,2,31,2,30,233,31,95,31,31,31,145,31,128,31,5,31,5,30,131,31,131,30,131,29,254,31,254,30,66,31,36,31,3,31,122,31,60,31,95,31,6,31,86,31,166,31,208,31,211,31,247,31,26,31,136,31,92,31,181,31,30,31,182,31,182,30,109,31,148,31,148,30,77,31,64,31,236,31,50,31,207,31,31,31,31,30,83,31,4,31,111,31,51,31,51,30,56,31,56,30,98,31,98,30,185,31,112,31,97,31,24,31,102,31,23,31,47,31,47,30,128,31,217,31,59,31,76,31,20,31,123,31,123,30,58,31,144,31,110,31,92,31,28,31,40,31,232,31,104,31,104,30,208,31,164,31,164,30,164,29,124,31,97,31,61,31,61,30,10,31,173,31,245,31,245,30,247,31,24,31,112,31,245,31,183,31,7,31,7,30,118,31,142,31,171,31,252,31,34,31,101,31,4,31,126,31,26,31,12,31,34,31,34,30,34,29,186,31,252,31,82,31,127,31,38,31,38,30,226,31,227,31,132,31,235,31,206,31,206,30,64,31,32,31,200,31,200,30,188,31,107,31,202,31,202,30,202,29,137,31,49,31,8,31,28,31,247,31,48,31,48,30,114,31,40,31,168,31,244,31,134,31,205,31,68,31,157,31,221,31,236,31,193,31,178,31,135,31,135,30,92,31,92,30,92,29,92,28,155,31,107,31,143,31,162,31,47,31,35,31,120,31,41,31,37,31,183,31,183,31,7,31,116,31,85,31,105,31,75,31,198,31,65,31,233,31,126,31,126,30,90,31,180,31,180,30,37,31,101,31,101,30,232,31,232,30,131,31,162,31,162,30,162,29,202,31,255,31,255,30,81,31,21,31,21,30,34,31,34,30,219,31,219,30,64,31,194,31,138,31,125,31,170,31,138,31,138,30,190,31,190,30,190,29,51,31,158,31,158,30,158,29,222,31,193,31,43,31,100,31,24,31,8,31,100,31,240,31,240,30,1,31,153,31,153,30,134,31,178,31,227,31,14,31,73,31,52,31,86,31,86,30,86,29,86,28,242,31,134,31,99,31,159,31,169,31,197,31,26,31,245,31,228,31,187,31,176,31,106,31,127,31,127,30,207,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
