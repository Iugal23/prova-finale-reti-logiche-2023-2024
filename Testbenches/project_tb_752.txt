-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 726;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (141,0,35,0,194,0,139,0,243,0,56,0,237,0,0,0,0,0,127,0,200,0,206,0,114,0,0,0,0,0,37,0,11,0,116,0,163,0,89,0,124,0,63,0,108,0,52,0,80,0,150,0,125,0,145,0,0,0,108,0,0,0,31,0,62,0,0,0,39,0,221,0,19,0,0,0,128,0,13,0,107,0,43,0,168,0,0,0,168,0,0,0,2,0,101,0,0,0,40,0,193,0,185,0,18,0,179,0,0,0,22,0,99,0,0,0,0,0,14,0,0,0,18,0,23,0,0,0,0,0,0,0,145,0,182,0,247,0,49,0,134,0,0,0,0,0,237,0,170,0,90,0,139,0,231,0,13,0,160,0,117,0,0,0,108,0,7,0,202,0,189,0,0,0,188,0,195,0,0,0,30,0,167,0,92,0,0,0,11,0,241,0,153,0,53,0,207,0,171,0,69,0,100,0,145,0,0,0,51,0,0,0,51,0,188,0,16,0,15,0,0,0,179,0,0,0,109,0,225,0,0,0,0,0,113,0,185,0,76,0,61,0,234,0,189,0,107,0,167,0,171,0,198,0,31,0,0,0,90,0,212,0,135,0,176,0,0,0,42,0,108,0,93,0,172,0,149,0,63,0,36,0,165,0,141,0,0,0,137,0,0,0,9,0,17,0,15,0,38,0,49,0,0,0,229,0,0,0,183,0,77,0,222,0,114,0,0,0,76,0,36,0,62,0,0,0,255,0,242,0,0,0,112,0,132,0,170,0,0,0,0,0,7,0,143,0,0,0,186,0,248,0,229,0,149,0,144,0,0,0,153,0,230,0,95,0,211,0,107,0,0,0,167,0,0,0,225,0,207,0,0,0,29,0,100,0,158,0,0,0,0,0,0,0,107,0,53,0,170,0,156,0,176,0,190,0,46,0,0,0,238,0,78,0,0,0,116,0,129,0,201,0,0,0,33,0,54,0,0,0,0,0,206,0,26,0,189,0,204,0,0,0,186,0,184,0,81,0,173,0,50,0,164,0,233,0,130,0,98,0,14,0,0,0,16,0,60,0,114,0,92,0,58,0,0,0,0,0,157,0,14,0,0,0,142,0,109,0,0,0,0,0,0,0,169,0,102,0,0,0,0,0,245,0,0,0,81,0,0,0,111,0,0,0,189,0,0,0,0,0,79,0,241,0,0,0,234,0,150,0,62,0,158,0,89,0,0,0,127,0,27,0,60,0,115,0,27,0,151,0,142,0,0,0,167,0,146,0,250,0,127,0,80,0,164,0,165,0,0,0,19,0,112,0,37,0,227,0,137,0,47,0,101,0,185,0,167,0,76,0,134,0,53,0,0,0,10,0,186,0,0,0,71,0,0,0,222,0,21,0,101,0,196,0,132,0,191,0,78,0,0,0,246,0,0,0,0,0,235,0,114,0,133,0,86,0,149,0,0,0,182,0,0,0,189,0,144,0,0,0,162,0,54,0,226,0,42,0,47,0,196,0,177,0,234,0,227,0,94,0,100,0,207,0,0,0,186,0,181,0,222,0,0,0,0,0,3,0,124,0,5,0,92,0,134,0,17,0,0,0,231,0,24,0,0,0,75,0,222,0,162,0,21,0,129,0,205,0,0,0,16,0,56,0,166,0,124,0,14,0,98,0,141,0,87,0,0,0,0,0,65,0,127,0,206,0,117,0,230,0,152,0,0,0,41,0,104,0,163,0,70,0,17,0,4,0,118,0,0,0,224,0,205,0,43,0,35,0,0,0,108,0,10,0,142,0,251,0,38,0,0,0,74,0,88,0,0,0,0,0,250,0,81,0,87,0,185,0,210,0,0,0,125,0,40,0,237,0,131,0,128,0,16,0,6,0,0,0,138,0,0,0,247,0,8,0,60,0,0,0,139,0,168,0,77,0,40,0,102,0,103,0,21,0,35,0,0,0,158,0,32,0,51,0,108,0,96,0,0,0,212,0,191,0,132,0,90,0,194,0,163,0,175,0,205,0,114,0,53,0,175,0,10,0,0,0,0,0,213,0,152,0,20,0,0,0,248,0,177,0,255,0,150,0,0,0,83,0,121,0,223,0,100,0,173,0,143,0,207,0,69,0,52,0,205,0,0,0,156,0,213,0,66,0,7,0,41,0,0,0,219,0,140,0,0,0,198,0,180,0,232,0,17,0,186,0,80,0,134,0,168,0,0,0,0,0,75,0,112,0,73,0,0,0,197,0,122,0,172,0,39,0,0,0,244,0,235,0,166,0,29,0,78,0,230,0,42,0,16,0,210,0,0,0,0,0,90,0,0,0,0,0,120,0,0,0,192,0,209,0,180,0,55,0,207,0,0,0,69,0,25,0,174,0,74,0,194,0,104,0,0,0,201,0,225,0,0,0,193,0,137,0,33,0,247,0,58,0,186,0,186,0,9,0,220,0,163,0,242,0,81,0,54,0,194,0,0,0,202,0,225,0,20,0,180,0,251,0,126,0,243,0,214,0,86,0,0,0,0,0,215,0,207,0,0,0,0,0,99,0,119,0,206,0,199,0,191,0,161,0,141,0,87,0,77,0,222,0,91,0,158,0,213,0,9,0,29,0,101,0,191,0,91,0,0,0,53,0,0,0,168,0,207,0,163,0,140,0,41,0,58,0,54,0,0,0,0,0,0,0,73,0,250,0,120,0,136,0,95,0,33,0,92,0,39,0,0,0,132,0,214,0,0,0,111,0,155,0,51,0,134,0,246,0,184,0,0,0,74,0,129,0,217,0,137,0,142,0,75,0,186,0,253,0,85,0,163,0,224,0,23,0,186,0,22,0,0,0,163,0,44,0,213,0,2,0,88,0,0,0,0,0,214,0,189,0,0,0,29,0,236,0,119,0,0,0,9,0,222,0,254,0,76,0,108,0,36,0,34,0,0,0,75,0,238,0,0,0,131,0,131,0,0,0,0,0,45,0,146,0,78,0,205,0,102,0,27,0,135,0,0,0,0,0,213,0,2,0,41,0,176,0,126,0,95,0,241,0,0,0,0,0,64,0,36,0,0,0,65,0,222,0,118,0,0,0,0,0,248,0,241,0,176,0,229,0,244,0,8,0,223,0,0,0,0,0,1,0,0,0,212,0,9,0,30,0,174,0,0,0,152,0,81,0,82,0,122,0,167,0,0,0,0,0,215,0,232,0,0,0,160,0,207,0,55,0,0,0,229,0,238,0,18,0,0,0,0,0,254,0,166,0,132,0,57,0,0,0,62,0,0,0,0,0,134,0,161,0,183,0,116,0);
signal scenario_full  : scenario_type := (141,31,35,31,194,31,139,31,243,31,56,31,237,31,237,30,237,29,127,31,200,31,206,31,114,31,114,30,114,29,37,31,11,31,116,31,163,31,89,31,124,31,63,31,108,31,52,31,80,31,150,31,125,31,145,31,145,30,108,31,108,30,31,31,62,31,62,30,39,31,221,31,19,31,19,30,128,31,13,31,107,31,43,31,168,31,168,30,168,31,168,30,2,31,101,31,101,30,40,31,193,31,185,31,18,31,179,31,179,30,22,31,99,31,99,30,99,29,14,31,14,30,18,31,23,31,23,30,23,29,23,28,145,31,182,31,247,31,49,31,134,31,134,30,134,29,237,31,170,31,90,31,139,31,231,31,13,31,160,31,117,31,117,30,108,31,7,31,202,31,189,31,189,30,188,31,195,31,195,30,30,31,167,31,92,31,92,30,11,31,241,31,153,31,53,31,207,31,171,31,69,31,100,31,145,31,145,30,51,31,51,30,51,31,188,31,16,31,15,31,15,30,179,31,179,30,109,31,225,31,225,30,225,29,113,31,185,31,76,31,61,31,234,31,189,31,107,31,167,31,171,31,198,31,31,31,31,30,90,31,212,31,135,31,176,31,176,30,42,31,108,31,93,31,172,31,149,31,63,31,36,31,165,31,141,31,141,30,137,31,137,30,9,31,17,31,15,31,38,31,49,31,49,30,229,31,229,30,183,31,77,31,222,31,114,31,114,30,76,31,36,31,62,31,62,30,255,31,242,31,242,30,112,31,132,31,170,31,170,30,170,29,7,31,143,31,143,30,186,31,248,31,229,31,149,31,144,31,144,30,153,31,230,31,95,31,211,31,107,31,107,30,167,31,167,30,225,31,207,31,207,30,29,31,100,31,158,31,158,30,158,29,158,28,107,31,53,31,170,31,156,31,176,31,190,31,46,31,46,30,238,31,78,31,78,30,116,31,129,31,201,31,201,30,33,31,54,31,54,30,54,29,206,31,26,31,189,31,204,31,204,30,186,31,184,31,81,31,173,31,50,31,164,31,233,31,130,31,98,31,14,31,14,30,16,31,60,31,114,31,92,31,58,31,58,30,58,29,157,31,14,31,14,30,142,31,109,31,109,30,109,29,109,28,169,31,102,31,102,30,102,29,245,31,245,30,81,31,81,30,111,31,111,30,189,31,189,30,189,29,79,31,241,31,241,30,234,31,150,31,62,31,158,31,89,31,89,30,127,31,27,31,60,31,115,31,27,31,151,31,142,31,142,30,167,31,146,31,250,31,127,31,80,31,164,31,165,31,165,30,19,31,112,31,37,31,227,31,137,31,47,31,101,31,185,31,167,31,76,31,134,31,53,31,53,30,10,31,186,31,186,30,71,31,71,30,222,31,21,31,101,31,196,31,132,31,191,31,78,31,78,30,246,31,246,30,246,29,235,31,114,31,133,31,86,31,149,31,149,30,182,31,182,30,189,31,144,31,144,30,162,31,54,31,226,31,42,31,47,31,196,31,177,31,234,31,227,31,94,31,100,31,207,31,207,30,186,31,181,31,222,31,222,30,222,29,3,31,124,31,5,31,92,31,134,31,17,31,17,30,231,31,24,31,24,30,75,31,222,31,162,31,21,31,129,31,205,31,205,30,16,31,56,31,166,31,124,31,14,31,98,31,141,31,87,31,87,30,87,29,65,31,127,31,206,31,117,31,230,31,152,31,152,30,41,31,104,31,163,31,70,31,17,31,4,31,118,31,118,30,224,31,205,31,43,31,35,31,35,30,108,31,10,31,142,31,251,31,38,31,38,30,74,31,88,31,88,30,88,29,250,31,81,31,87,31,185,31,210,31,210,30,125,31,40,31,237,31,131,31,128,31,16,31,6,31,6,30,138,31,138,30,247,31,8,31,60,31,60,30,139,31,168,31,77,31,40,31,102,31,103,31,21,31,35,31,35,30,158,31,32,31,51,31,108,31,96,31,96,30,212,31,191,31,132,31,90,31,194,31,163,31,175,31,205,31,114,31,53,31,175,31,10,31,10,30,10,29,213,31,152,31,20,31,20,30,248,31,177,31,255,31,150,31,150,30,83,31,121,31,223,31,100,31,173,31,143,31,207,31,69,31,52,31,205,31,205,30,156,31,213,31,66,31,7,31,41,31,41,30,219,31,140,31,140,30,198,31,180,31,232,31,17,31,186,31,80,31,134,31,168,31,168,30,168,29,75,31,112,31,73,31,73,30,197,31,122,31,172,31,39,31,39,30,244,31,235,31,166,31,29,31,78,31,230,31,42,31,16,31,210,31,210,30,210,29,90,31,90,30,90,29,120,31,120,30,192,31,209,31,180,31,55,31,207,31,207,30,69,31,25,31,174,31,74,31,194,31,104,31,104,30,201,31,225,31,225,30,193,31,137,31,33,31,247,31,58,31,186,31,186,31,9,31,220,31,163,31,242,31,81,31,54,31,194,31,194,30,202,31,225,31,20,31,180,31,251,31,126,31,243,31,214,31,86,31,86,30,86,29,215,31,207,31,207,30,207,29,99,31,119,31,206,31,199,31,191,31,161,31,141,31,87,31,77,31,222,31,91,31,158,31,213,31,9,31,29,31,101,31,191,31,91,31,91,30,53,31,53,30,168,31,207,31,163,31,140,31,41,31,58,31,54,31,54,30,54,29,54,28,73,31,250,31,120,31,136,31,95,31,33,31,92,31,39,31,39,30,132,31,214,31,214,30,111,31,155,31,51,31,134,31,246,31,184,31,184,30,74,31,129,31,217,31,137,31,142,31,75,31,186,31,253,31,85,31,163,31,224,31,23,31,186,31,22,31,22,30,163,31,44,31,213,31,2,31,88,31,88,30,88,29,214,31,189,31,189,30,29,31,236,31,119,31,119,30,9,31,222,31,254,31,76,31,108,31,36,31,34,31,34,30,75,31,238,31,238,30,131,31,131,31,131,30,131,29,45,31,146,31,78,31,205,31,102,31,27,31,135,31,135,30,135,29,213,31,2,31,41,31,176,31,126,31,95,31,241,31,241,30,241,29,64,31,36,31,36,30,65,31,222,31,118,31,118,30,118,29,248,31,241,31,176,31,229,31,244,31,8,31,223,31,223,30,223,29,1,31,1,30,212,31,9,31,30,31,174,31,174,30,152,31,81,31,82,31,122,31,167,31,167,30,167,29,215,31,232,31,232,30,160,31,207,31,55,31,55,30,229,31,238,31,18,31,18,30,18,29,254,31,166,31,132,31,57,31,57,30,62,31,62,30,62,29,134,31,161,31,183,31,116,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
