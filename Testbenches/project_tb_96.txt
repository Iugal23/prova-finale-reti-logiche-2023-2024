-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 547;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (159,0,114,0,0,0,155,0,43,0,112,0,122,0,0,0,98,0,47,0,109,0,8,0,219,0,157,0,224,0,48,0,138,0,40,0,214,0,0,0,55,0,86,0,0,0,0,0,36,0,186,0,216,0,144,0,60,0,124,0,151,0,217,0,71,0,97,0,0,0,252,0,237,0,46,0,0,0,0,0,0,0,236,0,0,0,156,0,14,0,99,0,158,0,10,0,113,0,0,0,215,0,0,0,101,0,88,0,159,0,205,0,0,0,109,0,191,0,229,0,9,0,154,0,109,0,186,0,156,0,149,0,0,0,0,0,0,0,53,0,46,0,42,0,52,0,0,0,209,0,39,0,113,0,234,0,53,0,124,0,22,0,180,0,195,0,0,0,154,0,146,0,125,0,0,0,94,0,183,0,212,0,84,0,154,0,120,0,101,0,137,0,0,0,0,0,244,0,251,0,0,0,216,0,38,0,226,0,80,0,157,0,98,0,173,0,82,0,0,0,0,0,135,0,86,0,6,0,40,0,60,0,2,0,62,0,31,0,18,0,235,0,0,0,7,0,0,0,182,0,81,0,232,0,193,0,114,0,0,0,225,0,65,0,194,0,157,0,214,0,244,0,183,0,164,0,170,0,50,0,100,0,247,0,163,0,205,0,0,0,218,0,180,0,38,0,66,0,116,0,48,0,0,0,113,0,92,0,0,0,149,0,222,0,157,0,0,0,146,0,230,0,247,0,74,0,54,0,43,0,130,0,55,0,238,0,178,0,0,0,234,0,37,0,46,0,171,0,122,0,170,0,207,0,61,0,114,0,119,0,226,0,227,0,40,0,35,0,39,0,98,0,82,0,58,0,0,0,186,0,0,0,155,0,0,0,148,0,144,0,170,0,154,0,0,0,95,0,141,0,53,0,223,0,216,0,221,0,4,0,0,0,250,0,211,0,41,0,7,0,0,0,197,0,186,0,0,0,0,0,189,0,237,0,148,0,177,0,162,0,81,0,51,0,20,0,53,0,218,0,33,0,49,0,0,0,147,0,16,0,0,0,90,0,250,0,0,0,8,0,199,0,0,0,0,0,86,0,21,0,15,0,91,0,209,0,84,0,134,0,177,0,237,0,45,0,0,0,87,0,34,0,79,0,63,0,0,0,0,0,38,0,97,0,173,0,0,0,0,0,182,0,92,0,77,0,0,0,188,0,68,0,84,0,0,0,219,0,0,0,20,0,240,0,210,0,130,0,171,0,67,0,81,0,86,0,54,0,19,0,0,0,43,0,0,0,173,0,0,0,0,0,65,0,8,0,230,0,227,0,0,0,17,0,1,0,229,0,163,0,233,0,223,0,216,0,118,0,34,0,0,0,9,0,0,0,141,0,190,0,0,0,32,0,57,0,9,0,0,0,91,0,164,0,18,0,167,0,49,0,102,0,159,0,158,0,63,0,149,0,0,0,206,0,0,0,0,0,137,0,204,0,185,0,245,0,57,0,8,0,0,0,153,0,40,0,56,0,102,0,171,0,39,0,147,0,71,0,80,0,103,0,116,0,29,0,77,0,218,0,0,0,0,0,28,0,113,0,26,0,214,0,158,0,154,0,82,0,195,0,189,0,219,0,91,0,48,0,40,0,212,0,169,0,94,0,44,0,0,0,129,0,184,0,0,0,233,0,254,0,201,0,7,0,191,0,211,0,117,0,0,0,115,0,224,0,187,0,32,0,66,0,7,0,107,0,162,0,132,0,35,0,0,0,49,0,221,0,0,0,187,0,0,0,93,0,69,0,161,0,251,0,75,0,148,0,164,0,125,0,63,0,137,0,25,0,50,0,136,0,203,0,214,0,0,0,221,0,226,0,107,0,86,0,94,0,196,0,12,0,146,0,125,0,179,0,247,0,71,0,0,0,237,0,125,0,199,0,164,0,67,0,67,0,166,0,0,0,127,0,0,0,54,0,208,0,214,0,0,0,216,0,101,0,152,0,124,0,72,0,192,0,14,0,232,0,151,0,121,0,218,0,80,0,46,0,231,0,0,0,24,0,72,0,39,0,0,0,85,0,125,0,146,0,35,0,6,0,137,0,124,0,7,0,32,0,0,0,24,0,186,0,67,0,36,0,0,0,187,0,35,0,178,0,74,0,76,0,0,0,240,0,248,0,154,0,190,0,187,0,253,0,45,0,71,0,0,0,219,0,58,0,240,0,0,0,244,0,100,0,221,0,0,0,72,0,90,0,133,0,36,0,246,0,166,0,114,0,194,0,77,0,0,0,25,0,8,0,0,0,0,0,0,0,225,0,9,0,61,0,0,0,117,0,0,0,202,0,189,0,158,0,98,0,116,0,128,0,61,0,137,0,90,0,131,0,119,0,175,0,226,0,68,0,20,0,205,0,0,0,0,0,165,0,0,0,95,0,193,0,74,0,160,0,149,0,46,0,0,0,119,0,227,0,0,0,109,0,220,0,24,0,149,0);
signal scenario_full  : scenario_type := (159,31,114,31,114,30,155,31,43,31,112,31,122,31,122,30,98,31,47,31,109,31,8,31,219,31,157,31,224,31,48,31,138,31,40,31,214,31,214,30,55,31,86,31,86,30,86,29,36,31,186,31,216,31,144,31,60,31,124,31,151,31,217,31,71,31,97,31,97,30,252,31,237,31,46,31,46,30,46,29,46,28,236,31,236,30,156,31,14,31,99,31,158,31,10,31,113,31,113,30,215,31,215,30,101,31,88,31,159,31,205,31,205,30,109,31,191,31,229,31,9,31,154,31,109,31,186,31,156,31,149,31,149,30,149,29,149,28,53,31,46,31,42,31,52,31,52,30,209,31,39,31,113,31,234,31,53,31,124,31,22,31,180,31,195,31,195,30,154,31,146,31,125,31,125,30,94,31,183,31,212,31,84,31,154,31,120,31,101,31,137,31,137,30,137,29,244,31,251,31,251,30,216,31,38,31,226,31,80,31,157,31,98,31,173,31,82,31,82,30,82,29,135,31,86,31,6,31,40,31,60,31,2,31,62,31,31,31,18,31,235,31,235,30,7,31,7,30,182,31,81,31,232,31,193,31,114,31,114,30,225,31,65,31,194,31,157,31,214,31,244,31,183,31,164,31,170,31,50,31,100,31,247,31,163,31,205,31,205,30,218,31,180,31,38,31,66,31,116,31,48,31,48,30,113,31,92,31,92,30,149,31,222,31,157,31,157,30,146,31,230,31,247,31,74,31,54,31,43,31,130,31,55,31,238,31,178,31,178,30,234,31,37,31,46,31,171,31,122,31,170,31,207,31,61,31,114,31,119,31,226,31,227,31,40,31,35,31,39,31,98,31,82,31,58,31,58,30,186,31,186,30,155,31,155,30,148,31,144,31,170,31,154,31,154,30,95,31,141,31,53,31,223,31,216,31,221,31,4,31,4,30,250,31,211,31,41,31,7,31,7,30,197,31,186,31,186,30,186,29,189,31,237,31,148,31,177,31,162,31,81,31,51,31,20,31,53,31,218,31,33,31,49,31,49,30,147,31,16,31,16,30,90,31,250,31,250,30,8,31,199,31,199,30,199,29,86,31,21,31,15,31,91,31,209,31,84,31,134,31,177,31,237,31,45,31,45,30,87,31,34,31,79,31,63,31,63,30,63,29,38,31,97,31,173,31,173,30,173,29,182,31,92,31,77,31,77,30,188,31,68,31,84,31,84,30,219,31,219,30,20,31,240,31,210,31,130,31,171,31,67,31,81,31,86,31,54,31,19,31,19,30,43,31,43,30,173,31,173,30,173,29,65,31,8,31,230,31,227,31,227,30,17,31,1,31,229,31,163,31,233,31,223,31,216,31,118,31,34,31,34,30,9,31,9,30,141,31,190,31,190,30,32,31,57,31,9,31,9,30,91,31,164,31,18,31,167,31,49,31,102,31,159,31,158,31,63,31,149,31,149,30,206,31,206,30,206,29,137,31,204,31,185,31,245,31,57,31,8,31,8,30,153,31,40,31,56,31,102,31,171,31,39,31,147,31,71,31,80,31,103,31,116,31,29,31,77,31,218,31,218,30,218,29,28,31,113,31,26,31,214,31,158,31,154,31,82,31,195,31,189,31,219,31,91,31,48,31,40,31,212,31,169,31,94,31,44,31,44,30,129,31,184,31,184,30,233,31,254,31,201,31,7,31,191,31,211,31,117,31,117,30,115,31,224,31,187,31,32,31,66,31,7,31,107,31,162,31,132,31,35,31,35,30,49,31,221,31,221,30,187,31,187,30,93,31,69,31,161,31,251,31,75,31,148,31,164,31,125,31,63,31,137,31,25,31,50,31,136,31,203,31,214,31,214,30,221,31,226,31,107,31,86,31,94,31,196,31,12,31,146,31,125,31,179,31,247,31,71,31,71,30,237,31,125,31,199,31,164,31,67,31,67,31,166,31,166,30,127,31,127,30,54,31,208,31,214,31,214,30,216,31,101,31,152,31,124,31,72,31,192,31,14,31,232,31,151,31,121,31,218,31,80,31,46,31,231,31,231,30,24,31,72,31,39,31,39,30,85,31,125,31,146,31,35,31,6,31,137,31,124,31,7,31,32,31,32,30,24,31,186,31,67,31,36,31,36,30,187,31,35,31,178,31,74,31,76,31,76,30,240,31,248,31,154,31,190,31,187,31,253,31,45,31,71,31,71,30,219,31,58,31,240,31,240,30,244,31,100,31,221,31,221,30,72,31,90,31,133,31,36,31,246,31,166,31,114,31,194,31,77,31,77,30,25,31,8,31,8,30,8,29,8,28,225,31,9,31,61,31,61,30,117,31,117,30,202,31,189,31,158,31,98,31,116,31,128,31,61,31,137,31,90,31,131,31,119,31,175,31,226,31,68,31,20,31,205,31,205,30,205,29,165,31,165,30,95,31,193,31,74,31,160,31,149,31,46,31,46,30,119,31,227,31,227,30,109,31,220,31,24,31,149,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
