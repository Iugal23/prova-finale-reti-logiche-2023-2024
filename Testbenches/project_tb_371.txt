-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 474;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (130,0,16,0,60,0,75,0,8,0,223,0,0,0,236,0,173,0,238,0,89,0,152,0,161,0,59,0,0,0,0,0,213,0,224,0,0,0,11,0,34,0,176,0,0,0,189,0,48,0,254,0,55,0,0,0,123,0,160,0,203,0,113,0,192,0,201,0,0,0,0,0,249,0,84,0,0,0,0,0,0,0,102,0,24,0,222,0,136,0,105,0,239,0,0,0,17,0,229,0,0,0,0,0,169,0,74,0,96,0,81,0,0,0,31,0,0,0,242,0,0,0,0,0,95,0,225,0,236,0,139,0,0,0,0,0,222,0,112,0,0,0,60,0,0,0,40,0,42,0,193,0,86,0,95,0,52,0,28,0,30,0,147,0,21,0,158,0,0,0,157,0,7,0,76,0,0,0,0,0,148,0,145,0,221,0,44,0,96,0,233,0,3,0,11,0,104,0,13,0,0,0,193,0,163,0,226,0,0,0,27,0,127,0,0,0,12,0,231,0,104,0,234,0,228,0,0,0,18,0,18,0,0,0,49,0,9,0,50,0,123,0,91,0,149,0,98,0,224,0,113,0,92,0,13,0,0,0,224,0,26,0,84,0,10,0,186,0,175,0,216,0,196,0,67,0,133,0,112,0,38,0,0,0,0,0,160,0,206,0,161,0,159,0,158,0,102,0,98,0,79,0,198,0,230,0,0,0,87,0,63,0,118,0,173,0,9,0,2,0,160,0,204,0,14,0,224,0,207,0,54,0,202,0,0,0,207,0,243,0,0,0,62,0,113,0,163,0,63,0,142,0,151,0,71,0,86,0,249,0,120,0,0,0,76,0,143,0,53,0,200,0,0,0,222,0,84,0,0,0,126,0,95,0,203,0,54,0,21,0,231,0,62,0,0,0,0,0,15,0,119,0,209,0,27,0,249,0,11,0,0,0,0,0,25,0,92,0,0,0,253,0,43,0,52,0,15,0,112,0,163,0,0,0,155,0,88,0,1,0,52,0,179,0,6,0,0,0,240,0,233,0,47,0,0,0,178,0,207,0,191,0,0,0,12,0,221,0,0,0,61,0,124,0,215,0,79,0,215,0,0,0,154,0,141,0,176,0,179,0,230,0,28,0,0,0,249,0,162,0,169,0,232,0,49,0,125,0,86,0,0,0,88,0,106,0,35,0,153,0,0,0,0,0,237,0,116,0,250,0,208,0,79,0,176,0,211,0,1,0,18,0,0,0,196,0,18,0,254,0,0,0,0,0,127,0,0,0,135,0,138,0,199,0,157,0,20,0,219,0,44,0,163,0,29,0,86,0,190,0,194,0,0,0,177,0,37,0,87,0,101,0,0,0,206,0,58,0,185,0,104,0,95,0,42,0,102,0,208,0,0,0,239,0,222,0,0,0,89,0,0,0,1,0,77,0,175,0,127,0,84,0,246,0,49,0,43,0,221,0,26,0,100,0,216,0,190,0,10,0,34,0,112,0,134,0,0,0,60,0,119,0,20,0,86,0,232,0,35,0,56,0,22,0,218,0,18,0,238,0,35,0,93,0,5,0,182,0,208,0,178,0,95,0,129,0,0,0,9,0,1,0,175,0,64,0,0,0,244,0,0,0,224,0,151,0,57,0,166,0,103,0,77,0,85,0,239,0,136,0,29,0,0,0,237,0,0,0,188,0,149,0,7,0,17,0,200,0,115,0,219,0,0,0,1,0,0,0,122,0,214,0,56,0,0,0,246,0,107,0,141,0,0,0,89,0,126,0,155,0,0,0,0,0,177,0,166,0,171,0,32,0,145,0,121,0,0,0,149,0,121,0,221,0,0,0,143,0,11,0,0,0,0,0,154,0,0,0,67,0,143,0,0,0,70,0,18,0,0,0,148,0,246,0,90,0,0,0,192,0,0,0,104,0,237,0,213,0,134,0,186,0,228,0,222,0,79,0,51,0,185,0,253,0,79,0,181,0,132,0,224,0,0,0,194,0,96,0,127,0,35,0,170,0,0,0,124,0,249,0,0,0,223,0,55,0,15,0,0,0,104,0,209,0,77,0,163,0,129,0,252,0,153,0,224,0,30,0,0,0,12,0,178,0,156,0,198,0,0,0,191,0,0,0,113,0,0,0,181,0,55,0,143,0,229,0,0,0);
signal scenario_full  : scenario_type := (130,31,16,31,60,31,75,31,8,31,223,31,223,30,236,31,173,31,238,31,89,31,152,31,161,31,59,31,59,30,59,29,213,31,224,31,224,30,11,31,34,31,176,31,176,30,189,31,48,31,254,31,55,31,55,30,123,31,160,31,203,31,113,31,192,31,201,31,201,30,201,29,249,31,84,31,84,30,84,29,84,28,102,31,24,31,222,31,136,31,105,31,239,31,239,30,17,31,229,31,229,30,229,29,169,31,74,31,96,31,81,31,81,30,31,31,31,30,242,31,242,30,242,29,95,31,225,31,236,31,139,31,139,30,139,29,222,31,112,31,112,30,60,31,60,30,40,31,42,31,193,31,86,31,95,31,52,31,28,31,30,31,147,31,21,31,158,31,158,30,157,31,7,31,76,31,76,30,76,29,148,31,145,31,221,31,44,31,96,31,233,31,3,31,11,31,104,31,13,31,13,30,193,31,163,31,226,31,226,30,27,31,127,31,127,30,12,31,231,31,104,31,234,31,228,31,228,30,18,31,18,31,18,30,49,31,9,31,50,31,123,31,91,31,149,31,98,31,224,31,113,31,92,31,13,31,13,30,224,31,26,31,84,31,10,31,186,31,175,31,216,31,196,31,67,31,133,31,112,31,38,31,38,30,38,29,160,31,206,31,161,31,159,31,158,31,102,31,98,31,79,31,198,31,230,31,230,30,87,31,63,31,118,31,173,31,9,31,2,31,160,31,204,31,14,31,224,31,207,31,54,31,202,31,202,30,207,31,243,31,243,30,62,31,113,31,163,31,63,31,142,31,151,31,71,31,86,31,249,31,120,31,120,30,76,31,143,31,53,31,200,31,200,30,222,31,84,31,84,30,126,31,95,31,203,31,54,31,21,31,231,31,62,31,62,30,62,29,15,31,119,31,209,31,27,31,249,31,11,31,11,30,11,29,25,31,92,31,92,30,253,31,43,31,52,31,15,31,112,31,163,31,163,30,155,31,88,31,1,31,52,31,179,31,6,31,6,30,240,31,233,31,47,31,47,30,178,31,207,31,191,31,191,30,12,31,221,31,221,30,61,31,124,31,215,31,79,31,215,31,215,30,154,31,141,31,176,31,179,31,230,31,28,31,28,30,249,31,162,31,169,31,232,31,49,31,125,31,86,31,86,30,88,31,106,31,35,31,153,31,153,30,153,29,237,31,116,31,250,31,208,31,79,31,176,31,211,31,1,31,18,31,18,30,196,31,18,31,254,31,254,30,254,29,127,31,127,30,135,31,138,31,199,31,157,31,20,31,219,31,44,31,163,31,29,31,86,31,190,31,194,31,194,30,177,31,37,31,87,31,101,31,101,30,206,31,58,31,185,31,104,31,95,31,42,31,102,31,208,31,208,30,239,31,222,31,222,30,89,31,89,30,1,31,77,31,175,31,127,31,84,31,246,31,49,31,43,31,221,31,26,31,100,31,216,31,190,31,10,31,34,31,112,31,134,31,134,30,60,31,119,31,20,31,86,31,232,31,35,31,56,31,22,31,218,31,18,31,238,31,35,31,93,31,5,31,182,31,208,31,178,31,95,31,129,31,129,30,9,31,1,31,175,31,64,31,64,30,244,31,244,30,224,31,151,31,57,31,166,31,103,31,77,31,85,31,239,31,136,31,29,31,29,30,237,31,237,30,188,31,149,31,7,31,17,31,200,31,115,31,219,31,219,30,1,31,1,30,122,31,214,31,56,31,56,30,246,31,107,31,141,31,141,30,89,31,126,31,155,31,155,30,155,29,177,31,166,31,171,31,32,31,145,31,121,31,121,30,149,31,121,31,221,31,221,30,143,31,11,31,11,30,11,29,154,31,154,30,67,31,143,31,143,30,70,31,18,31,18,30,148,31,246,31,90,31,90,30,192,31,192,30,104,31,237,31,213,31,134,31,186,31,228,31,222,31,79,31,51,31,185,31,253,31,79,31,181,31,132,31,224,31,224,30,194,31,96,31,127,31,35,31,170,31,170,30,124,31,249,31,249,30,223,31,55,31,15,31,15,30,104,31,209,31,77,31,163,31,129,31,252,31,153,31,224,31,30,31,30,30,12,31,178,31,156,31,198,31,198,30,191,31,191,30,113,31,113,30,181,31,55,31,143,31,229,31,229,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
