-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 518;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,161,0,0,0,47,0,108,0,168,0,54,0,144,0,65,0,17,0,206,0,32,0,0,0,0,0,55,0,199,0,1,0,29,0,0,0,147,0,68,0,0,0,0,0,133,0,169,0,186,0,203,0,0,0,0,0,164,0,170,0,27,0,191,0,0,0,0,0,0,0,0,0,0,0,102,0,108,0,147,0,114,0,183,0,165,0,205,0,163,0,44,0,175,0,0,0,0,0,62,0,119,0,0,0,0,0,203,0,0,0,207,0,191,0,76,0,82,0,94,0,254,0,27,0,192,0,0,0,0,0,240,0,211,0,141,0,95,0,23,0,8,0,196,0,30,0,0,0,118,0,0,0,222,0,229,0,142,0,21,0,141,0,5,0,19,0,142,0,169,0,29,0,204,0,0,0,137,0,38,0,187,0,21,0,13,0,103,0,214,0,0,0,131,0,0,0,88,0,67,0,206,0,39,0,58,0,229,0,139,0,251,0,85,0,0,0,239,0,120,0,0,0,0,0,180,0,248,0,82,0,63,0,59,0,0,0,33,0,0,0,158,0,0,0,94,0,0,0,15,0,209,0,228,0,41,0,159,0,0,0,80,0,177,0,0,0,11,0,0,0,128,0,158,0,188,0,109,0,60,0,139,0,6,0,146,0,235,0,216,0,32,0,21,0,0,0,54,0,47,0,116,0,171,0,0,0,166,0,124,0,173,0,0,0,0,0,93,0,148,0,75,0,0,0,104,0,0,0,214,0,205,0,245,0,177,0,198,0,57,0,0,0,135,0,0,0,0,0,44,0,217,0,134,0,87,0,0,0,0,0,0,0,229,0,0,0,204,0,153,0,176,0,113,0,224,0,0,0,192,0,185,0,227,0,0,0,218,0,0,0,228,0,0,0,59,0,156,0,137,0,238,0,65,0,249,0,0,0,0,0,133,0,247,0,0,0,0,0,8,0,169,0,143,0,72,0,27,0,162,0,92,0,237,0,102,0,17,0,114,0,28,0,161,0,184,0,254,0,210,0,28,0,0,0,56,0,194,0,159,0,199,0,229,0,143,0,92,0,5,0,0,0,128,0,0,0,128,0,0,0,103,0,0,0,116,0,130,0,231,0,91,0,193,0,124,0,17,0,123,0,232,0,179,0,96,0,83,0,42,0,0,0,217,0,205,0,70,0,230,0,250,0,95,0,225,0,0,0,0,0,232,0,213,0,209,0,110,0,0,0,178,0,0,0,43,0,125,0,147,0,163,0,142,0,112,0,0,0,0,0,244,0,152,0,47,0,95,0,240,0,242,0,0,0,45,0,204,0,74,0,72,0,46,0,102,0,212,0,242,0,21,0,188,0,219,0,2,0,171,0,243,0,0,0,0,0,103,0,25,0,103,0,87,0,230,0,210,0,18,0,104,0,59,0,130,0,9,0,173,0,153,0,186,0,225,0,33,0,198,0,247,0,229,0,243,0,27,0,139,0,199,0,89,0,43,0,77,0,0,0,240,0,164,0,43,0,92,0,70,0,0,0,161,0,251,0,143,0,4,0,0,0,203,0,11,0,0,0,0,0,78,0,60,0,0,0,0,0,0,0,196,0,176,0,215,0,177,0,209,0,0,0,249,0,152,0,200,0,209,0,5,0,69,0,22,0,229,0,0,0,0,0,128,0,220,0,167,0,0,0,113,0,21,0,126,0,0,0,78,0,0,0,21,0,0,0,172,0,36,0,0,0,211,0,46,0,58,0,244,0,159,0,33,0,169,0,111,0,226,0,205,0,0,0,154,0,110,0,0,0,96,0,0,0,0,0,19,0,169,0,215,0,0,0,158,0,184,0,175,0,0,0,35,0,189,0,45,0,122,0,17,0,194,0,42,0,0,0,0,0,211,0,3,0,158,0,191,0,0,0,228,0,128,0,222,0,151,0,3,0,254,0,138,0,0,0,65,0,137,0,141,0,0,0,223,0,144,0,1,0,6,0,253,0,75,0,0,0,0,0,48,0,6,0,181,0,124,0,102,0,202,0,10,0,65,0,244,0,69,0,159,0,175,0,0,0,0,0,8,0,236,0,151,0,89,0,223,0,120,0,175,0,184,0,109,0,221,0,137,0,182,0,0,0,112,0,117,0,97,0,194,0,69,0,0,0,0,0,35,0,147,0,0,0,227,0,88,0,220,0,159,0,16,0,39,0,147,0,186,0,161,0,77,0,80,0,183,0,137,0,42,0,0,0,80,0,81,0,108,0,222,0,140,0,227,0,0,0,0,0,71,0,49,0,8,0,100,0,59,0,22,0,169,0,0,0,14,0,0,0,204,0,243,0,77,0,253,0,197,0,0,0,54,0);
signal scenario_full  : scenario_type := (0,0,161,31,161,30,47,31,108,31,168,31,54,31,144,31,65,31,17,31,206,31,32,31,32,30,32,29,55,31,199,31,1,31,29,31,29,30,147,31,68,31,68,30,68,29,133,31,169,31,186,31,203,31,203,30,203,29,164,31,170,31,27,31,191,31,191,30,191,29,191,28,191,27,191,26,102,31,108,31,147,31,114,31,183,31,165,31,205,31,163,31,44,31,175,31,175,30,175,29,62,31,119,31,119,30,119,29,203,31,203,30,207,31,191,31,76,31,82,31,94,31,254,31,27,31,192,31,192,30,192,29,240,31,211,31,141,31,95,31,23,31,8,31,196,31,30,31,30,30,118,31,118,30,222,31,229,31,142,31,21,31,141,31,5,31,19,31,142,31,169,31,29,31,204,31,204,30,137,31,38,31,187,31,21,31,13,31,103,31,214,31,214,30,131,31,131,30,88,31,67,31,206,31,39,31,58,31,229,31,139,31,251,31,85,31,85,30,239,31,120,31,120,30,120,29,180,31,248,31,82,31,63,31,59,31,59,30,33,31,33,30,158,31,158,30,94,31,94,30,15,31,209,31,228,31,41,31,159,31,159,30,80,31,177,31,177,30,11,31,11,30,128,31,158,31,188,31,109,31,60,31,139,31,6,31,146,31,235,31,216,31,32,31,21,31,21,30,54,31,47,31,116,31,171,31,171,30,166,31,124,31,173,31,173,30,173,29,93,31,148,31,75,31,75,30,104,31,104,30,214,31,205,31,245,31,177,31,198,31,57,31,57,30,135,31,135,30,135,29,44,31,217,31,134,31,87,31,87,30,87,29,87,28,229,31,229,30,204,31,153,31,176,31,113,31,224,31,224,30,192,31,185,31,227,31,227,30,218,31,218,30,228,31,228,30,59,31,156,31,137,31,238,31,65,31,249,31,249,30,249,29,133,31,247,31,247,30,247,29,8,31,169,31,143,31,72,31,27,31,162,31,92,31,237,31,102,31,17,31,114,31,28,31,161,31,184,31,254,31,210,31,28,31,28,30,56,31,194,31,159,31,199,31,229,31,143,31,92,31,5,31,5,30,128,31,128,30,128,31,128,30,103,31,103,30,116,31,130,31,231,31,91,31,193,31,124,31,17,31,123,31,232,31,179,31,96,31,83,31,42,31,42,30,217,31,205,31,70,31,230,31,250,31,95,31,225,31,225,30,225,29,232,31,213,31,209,31,110,31,110,30,178,31,178,30,43,31,125,31,147,31,163,31,142,31,112,31,112,30,112,29,244,31,152,31,47,31,95,31,240,31,242,31,242,30,45,31,204,31,74,31,72,31,46,31,102,31,212,31,242,31,21,31,188,31,219,31,2,31,171,31,243,31,243,30,243,29,103,31,25,31,103,31,87,31,230,31,210,31,18,31,104,31,59,31,130,31,9,31,173,31,153,31,186,31,225,31,33,31,198,31,247,31,229,31,243,31,27,31,139,31,199,31,89,31,43,31,77,31,77,30,240,31,164,31,43,31,92,31,70,31,70,30,161,31,251,31,143,31,4,31,4,30,203,31,11,31,11,30,11,29,78,31,60,31,60,30,60,29,60,28,196,31,176,31,215,31,177,31,209,31,209,30,249,31,152,31,200,31,209,31,5,31,69,31,22,31,229,31,229,30,229,29,128,31,220,31,167,31,167,30,113,31,21,31,126,31,126,30,78,31,78,30,21,31,21,30,172,31,36,31,36,30,211,31,46,31,58,31,244,31,159,31,33,31,169,31,111,31,226,31,205,31,205,30,154,31,110,31,110,30,96,31,96,30,96,29,19,31,169,31,215,31,215,30,158,31,184,31,175,31,175,30,35,31,189,31,45,31,122,31,17,31,194,31,42,31,42,30,42,29,211,31,3,31,158,31,191,31,191,30,228,31,128,31,222,31,151,31,3,31,254,31,138,31,138,30,65,31,137,31,141,31,141,30,223,31,144,31,1,31,6,31,253,31,75,31,75,30,75,29,48,31,6,31,181,31,124,31,102,31,202,31,10,31,65,31,244,31,69,31,159,31,175,31,175,30,175,29,8,31,236,31,151,31,89,31,223,31,120,31,175,31,184,31,109,31,221,31,137,31,182,31,182,30,112,31,117,31,97,31,194,31,69,31,69,30,69,29,35,31,147,31,147,30,227,31,88,31,220,31,159,31,16,31,39,31,147,31,186,31,161,31,77,31,80,31,183,31,137,31,42,31,42,30,80,31,81,31,108,31,222,31,140,31,227,31,227,30,227,29,71,31,49,31,8,31,100,31,59,31,22,31,169,31,169,30,14,31,14,30,204,31,243,31,77,31,253,31,197,31,197,30,54,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
