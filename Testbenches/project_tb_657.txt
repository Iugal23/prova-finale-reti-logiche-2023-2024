-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 988;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,251,0,40,0,91,0,153,0,140,0,82,0,0,0,106,0,30,0,42,0,124,0,127,0,89,0,84,0,220,0,66,0,82,0,112,0,0,0,225,0,30,0,252,0,126,0,0,0,187,0,0,0,192,0,45,0,148,0,196,0,0,0,0,0,65,0,238,0,234,0,14,0,113,0,234,0,35,0,22,0,3,0,248,0,245,0,211,0,140,0,100,0,127,0,44,0,0,0,85,0,138,0,40,0,27,0,46,0,76,0,0,0,240,0,190,0,168,0,5,0,166,0,0,0,87,0,109,0,0,0,244,0,104,0,233,0,0,0,0,0,48,0,222,0,206,0,0,0,130,0,9,0,139,0,24,0,6,0,84,0,23,0,166,0,248,0,193,0,62,0,224,0,0,0,0,0,144,0,36,0,221,0,195,0,18,0,6,0,0,0,23,0,155,0,203,0,48,0,183,0,0,0,116,0,111,0,0,0,155,0,191,0,13,0,133,0,111,0,0,0,206,0,252,0,38,0,49,0,0,0,44,0,146,0,0,0,155,0,166,0,0,0,119,0,0,0,192,0,161,0,120,0,0,0,200,0,0,0,193,0,73,0,104,0,184,0,0,0,54,0,79,0,207,0,224,0,159,0,85,0,243,0,5,0,126,0,76,0,231,0,168,0,148,0,157,0,48,0,237,0,172,0,37,0,220,0,0,0,194,0,39,0,0,0,216,0,152,0,0,0,209,0,174,0,0,0,0,0,14,0,127,0,121,0,229,0,30,0,38,0,136,0,0,0,144,0,0,0,77,0,0,0,0,0,34,0,57,0,182,0,0,0,236,0,5,0,230,0,73,0,87,0,158,0,0,0,84,0,115,0,115,0,50,0,33,0,0,0,0,0,215,0,71,0,0,0,154,0,137,0,34,0,192,0,0,0,0,0,157,0,63,0,0,0,0,0,84,0,0,0,21,0,124,0,186,0,0,0,222,0,218,0,164,0,69,0,107,0,0,0,178,0,89,0,148,0,161,0,171,0,152,0,0,0,16,0,62,0,164,0,234,0,224,0,118,0,135,0,23,0,0,0,189,0,51,0,30,0,0,0,135,0,136,0,187,0,1,0,147,0,126,0,154,0,165,0,108,0,0,0,159,0,127,0,88,0,202,0,55,0,133,0,125,0,87,0,154,0,88,0,46,0,144,0,207,0,231,0,70,0,0,0,0,0,30,0,103,0,0,0,123,0,73,0,116,0,0,0,234,0,236,0,177,0,109,0,162,0,10,0,168,0,21,0,138,0,21,0,98,0,233,0,188,0,171,0,122,0,113,0,137,0,206,0,71,0,107,0,0,0,83,0,112,0,35,0,227,0,204,0,61,0,194,0,106,0,155,0,218,0,197,0,67,0,194,0,250,0,0,0,0,0,64,0,44,0,157,0,238,0,61,0,0,0,158,0,104,0,0,0,41,0,250,0,10,0,129,0,172,0,40,0,0,0,152,0,182,0,213,0,0,0,223,0,79,0,219,0,0,0,147,0,1,0,76,0,113,0,214,0,233,0,159,0,0,0,0,0,0,0,192,0,202,0,3,0,93,0,20,0,57,0,60,0,251,0,176,0,20,0,112,0,72,0,36,0,0,0,58,0,2,0,194,0,253,0,245,0,0,0,245,0,131,0,0,0,0,0,134,0,48,0,87,0,235,0,4,0,53,0,120,0,44,0,69,0,240,0,2,0,168,0,147,0,144,0,212,0,5,0,185,0,222,0,109,0,178,0,103,0,0,0,250,0,0,0,0,0,82,0,177,0,0,0,129,0,24,0,247,0,36,0,170,0,202,0,176,0,241,0,0,0,174,0,149,0,90,0,212,0,36,0,139,0,227,0,207,0,0,0,184,0,178,0,0,0,13,0,48,0,173,0,1,0,0,0,142,0,169,0,244,0,149,0,229,0,128,0,0,0,92,0,26,0,0,0,147,0,156,0,151,0,72,0,19,0,245,0,38,0,66,0,0,0,4,0,184,0,189,0,76,0,35,0,0,0,84,0,235,0,248,0,54,0,172,0,129,0,0,0,149,0,85,0,63,0,119,0,0,0,211,0,155,0,28,0,12,0,117,0,182,0,47,0,0,0,0,0,0,0,0,0,25,0,238,0,0,0,63,0,230,0,33,0,146,0,43,0,0,0,0,0,21,0,219,0,86,0,248,0,168,0,90,0,232,0,14,0,0,0,0,0,119,0,34,0,51,0,139,0,14,0,0,0,59,0,0,0,47,0,217,0,222,0,235,0,24,0,176,0,157,0,0,0,1,0,195,0,87,0,104,0,207,0,208,0,148,0,15,0,187,0,0,0,123,0,190,0,21,0,181,0,0,0,120,0,97,0,0,0,204,0,175,0,145,0,144,0,229,0,84,0,0,0,0,0,102,0,210,0,202,0,14,0,0,0,6,0,32,0,154,0,155,0,117,0,197,0,234,0,230,0,109,0,96,0,0,0,108,0,180,0,0,0,27,0,72,0,47,0,201,0,117,0,217,0,14,0,71,0,0,0,75,0,135,0,116,0,224,0,138,0,166,0,169,0,206,0,221,0,115,0,113,0,145,0,9,0,80,0,241,0,40,0,117,0,110,0,212,0,51,0,0,0,90,0,243,0,0,0,188,0,81,0,194,0,161,0,0,0,103,0,35,0,233,0,236,0,181,0,27,0,22,0,0,0,93,0,110,0,0,0,235,0,237,0,129,0,136,0,57,0,120,0,246,0,242,0,0,0,0,0,155,0,248,0,5,0,227,0,157,0,232,0,116,0,0,0,240,0,78,0,201,0,97,0,70,0,55,0,240,0,23,0,145,0,148,0,0,0,199,0,192,0,0,0,87,0,0,0,88,0,0,0,0,0,147,0,98,0,0,0,95,0,51,0,105,0,133,0,16,0,48,0,0,0,156,0,0,0,174,0,0,0,248,0,230,0,138,0,82,0,187,0,37,0,252,0,0,0,0,0,0,0,175,0,65,0,157,0,192,0,0,0,0,0,200,0,141,0,219,0,0,0,0,0,203,0,244,0,25,0,33,0,232,0,0,0,99,0,244,0,36,0,135,0,182,0,233,0,164,0,209,0,134,0,180,0,18,0,0,0,229,0,6,0,0,0,233,0,81,0,105,0,117,0,103,0,165,0,225,0,0,0,0,0,0,0,156,0,0,0,52,0,0,0,172,0,214,0,0,0,88,0,0,0,0,0,252,0,253,0,128,0,60,0,106,0,227,0,0,0,50,0,121,0,188,0,220,0,37,0,55,0,190,0,222,0,140,0,181,0,200,0,0,0,192,0,226,0,0,0,107,0,56,0,74,0,45,0,5,0,109,0,179,0,74,0,208,0,95,0,50,0,0,0,0,0,0,0,59,0,0,0,56,0,38,0,0,0,75,0,170,0,0,0,0,0,76,0,3,0,69,0,219,0,243,0,173,0,218,0,90,0,123,0,0,0,247,0,146,0,238,0,1,0,245,0,46,0,0,0,76,0,170,0,16,0,50,0,0,0,121,0,21,0,2,0,0,0,177,0,194,0,0,0,66,0,73,0,154,0,177,0,64,0,175,0,119,0,32,0,0,0,149,0,27,0,69,0,127,0,235,0,92,0,254,0,93,0,102,0,0,0,136,0,108,0,246,0,55,0,66,0,193,0,34,0,119,0,178,0,164,0,203,0,218,0,90,0,254,0,0,0,0,0,200,0,83,0,0,0,98,0,0,0,0,0,163,0,205,0,241,0,98,0,14,0,35,0,111,0,112,0,149,0,0,0,181,0,175,0,0,0,0,0,7,0,61,0,0,0,0,0,123,0,175,0,84,0,0,0,0,0,217,0,111,0,0,0,45,0,209,0,152,0,59,0,0,0,0,0,187,0,0,0,110,0,208,0,34,0,120,0,200,0,46,0,187,0,169,0,251,0,253,0,15,0,88,0,205,0,227,0,201,0,111,0,0,0,0,0,18,0,177,0,0,0,7,0,220,0,72,0,178,0,240,0,216,0,54,0,14,0,0,0,112,0,174,0,0,0,0,0,14,0,181,0,192,0,196,0,0,0,0,0,253,0,0,0,43,0,247,0,0,0,19,0,0,0,150,0,237,0,252,0,99,0,0,0,0,0,98,0,121,0,134,0,186,0,0,0,116,0,213,0,50,0,173,0,63,0,86,0,86,0,66,0,135,0,173,0,22,0,66,0,78,0,77,0,242,0,186,0,124,0,93,0,227,0,242,0,26,0,0,0,253,0,71,0,10,0,104,0,30,0,69,0,11,0,138,0,215,0,189,0,0,0,131,0,234,0,154,0,0,0,0,0,0,0,0,0,164,0,115,0,12,0,0,0,240,0,171,0,127,0,0,0,33,0,146,0,67,0,0,0,1,0,228,0,202,0,8,0,42,0,93,0,80,0,0,0,0,0,92,0,0,0,253,0,164,0,0,0);
signal scenario_full  : scenario_type := (0,0,251,31,40,31,91,31,153,31,140,31,82,31,82,30,106,31,30,31,42,31,124,31,127,31,89,31,84,31,220,31,66,31,82,31,112,31,112,30,225,31,30,31,252,31,126,31,126,30,187,31,187,30,192,31,45,31,148,31,196,31,196,30,196,29,65,31,238,31,234,31,14,31,113,31,234,31,35,31,22,31,3,31,248,31,245,31,211,31,140,31,100,31,127,31,44,31,44,30,85,31,138,31,40,31,27,31,46,31,76,31,76,30,240,31,190,31,168,31,5,31,166,31,166,30,87,31,109,31,109,30,244,31,104,31,233,31,233,30,233,29,48,31,222,31,206,31,206,30,130,31,9,31,139,31,24,31,6,31,84,31,23,31,166,31,248,31,193,31,62,31,224,31,224,30,224,29,144,31,36,31,221,31,195,31,18,31,6,31,6,30,23,31,155,31,203,31,48,31,183,31,183,30,116,31,111,31,111,30,155,31,191,31,13,31,133,31,111,31,111,30,206,31,252,31,38,31,49,31,49,30,44,31,146,31,146,30,155,31,166,31,166,30,119,31,119,30,192,31,161,31,120,31,120,30,200,31,200,30,193,31,73,31,104,31,184,31,184,30,54,31,79,31,207,31,224,31,159,31,85,31,243,31,5,31,126,31,76,31,231,31,168,31,148,31,157,31,48,31,237,31,172,31,37,31,220,31,220,30,194,31,39,31,39,30,216,31,152,31,152,30,209,31,174,31,174,30,174,29,14,31,127,31,121,31,229,31,30,31,38,31,136,31,136,30,144,31,144,30,77,31,77,30,77,29,34,31,57,31,182,31,182,30,236,31,5,31,230,31,73,31,87,31,158,31,158,30,84,31,115,31,115,31,50,31,33,31,33,30,33,29,215,31,71,31,71,30,154,31,137,31,34,31,192,31,192,30,192,29,157,31,63,31,63,30,63,29,84,31,84,30,21,31,124,31,186,31,186,30,222,31,218,31,164,31,69,31,107,31,107,30,178,31,89,31,148,31,161,31,171,31,152,31,152,30,16,31,62,31,164,31,234,31,224,31,118,31,135,31,23,31,23,30,189,31,51,31,30,31,30,30,135,31,136,31,187,31,1,31,147,31,126,31,154,31,165,31,108,31,108,30,159,31,127,31,88,31,202,31,55,31,133,31,125,31,87,31,154,31,88,31,46,31,144,31,207,31,231,31,70,31,70,30,70,29,30,31,103,31,103,30,123,31,73,31,116,31,116,30,234,31,236,31,177,31,109,31,162,31,10,31,168,31,21,31,138,31,21,31,98,31,233,31,188,31,171,31,122,31,113,31,137,31,206,31,71,31,107,31,107,30,83,31,112,31,35,31,227,31,204,31,61,31,194,31,106,31,155,31,218,31,197,31,67,31,194,31,250,31,250,30,250,29,64,31,44,31,157,31,238,31,61,31,61,30,158,31,104,31,104,30,41,31,250,31,10,31,129,31,172,31,40,31,40,30,152,31,182,31,213,31,213,30,223,31,79,31,219,31,219,30,147,31,1,31,76,31,113,31,214,31,233,31,159,31,159,30,159,29,159,28,192,31,202,31,3,31,93,31,20,31,57,31,60,31,251,31,176,31,20,31,112,31,72,31,36,31,36,30,58,31,2,31,194,31,253,31,245,31,245,30,245,31,131,31,131,30,131,29,134,31,48,31,87,31,235,31,4,31,53,31,120,31,44,31,69,31,240,31,2,31,168,31,147,31,144,31,212,31,5,31,185,31,222,31,109,31,178,31,103,31,103,30,250,31,250,30,250,29,82,31,177,31,177,30,129,31,24,31,247,31,36,31,170,31,202,31,176,31,241,31,241,30,174,31,149,31,90,31,212,31,36,31,139,31,227,31,207,31,207,30,184,31,178,31,178,30,13,31,48,31,173,31,1,31,1,30,142,31,169,31,244,31,149,31,229,31,128,31,128,30,92,31,26,31,26,30,147,31,156,31,151,31,72,31,19,31,245,31,38,31,66,31,66,30,4,31,184,31,189,31,76,31,35,31,35,30,84,31,235,31,248,31,54,31,172,31,129,31,129,30,149,31,85,31,63,31,119,31,119,30,211,31,155,31,28,31,12,31,117,31,182,31,47,31,47,30,47,29,47,28,47,27,25,31,238,31,238,30,63,31,230,31,33,31,146,31,43,31,43,30,43,29,21,31,219,31,86,31,248,31,168,31,90,31,232,31,14,31,14,30,14,29,119,31,34,31,51,31,139,31,14,31,14,30,59,31,59,30,47,31,217,31,222,31,235,31,24,31,176,31,157,31,157,30,1,31,195,31,87,31,104,31,207,31,208,31,148,31,15,31,187,31,187,30,123,31,190,31,21,31,181,31,181,30,120,31,97,31,97,30,204,31,175,31,145,31,144,31,229,31,84,31,84,30,84,29,102,31,210,31,202,31,14,31,14,30,6,31,32,31,154,31,155,31,117,31,197,31,234,31,230,31,109,31,96,31,96,30,108,31,180,31,180,30,27,31,72,31,47,31,201,31,117,31,217,31,14,31,71,31,71,30,75,31,135,31,116,31,224,31,138,31,166,31,169,31,206,31,221,31,115,31,113,31,145,31,9,31,80,31,241,31,40,31,117,31,110,31,212,31,51,31,51,30,90,31,243,31,243,30,188,31,81,31,194,31,161,31,161,30,103,31,35,31,233,31,236,31,181,31,27,31,22,31,22,30,93,31,110,31,110,30,235,31,237,31,129,31,136,31,57,31,120,31,246,31,242,31,242,30,242,29,155,31,248,31,5,31,227,31,157,31,232,31,116,31,116,30,240,31,78,31,201,31,97,31,70,31,55,31,240,31,23,31,145,31,148,31,148,30,199,31,192,31,192,30,87,31,87,30,88,31,88,30,88,29,147,31,98,31,98,30,95,31,51,31,105,31,133,31,16,31,48,31,48,30,156,31,156,30,174,31,174,30,248,31,230,31,138,31,82,31,187,31,37,31,252,31,252,30,252,29,252,28,175,31,65,31,157,31,192,31,192,30,192,29,200,31,141,31,219,31,219,30,219,29,203,31,244,31,25,31,33,31,232,31,232,30,99,31,244,31,36,31,135,31,182,31,233,31,164,31,209,31,134,31,180,31,18,31,18,30,229,31,6,31,6,30,233,31,81,31,105,31,117,31,103,31,165,31,225,31,225,30,225,29,225,28,156,31,156,30,52,31,52,30,172,31,214,31,214,30,88,31,88,30,88,29,252,31,253,31,128,31,60,31,106,31,227,31,227,30,50,31,121,31,188,31,220,31,37,31,55,31,190,31,222,31,140,31,181,31,200,31,200,30,192,31,226,31,226,30,107,31,56,31,74,31,45,31,5,31,109,31,179,31,74,31,208,31,95,31,50,31,50,30,50,29,50,28,59,31,59,30,56,31,38,31,38,30,75,31,170,31,170,30,170,29,76,31,3,31,69,31,219,31,243,31,173,31,218,31,90,31,123,31,123,30,247,31,146,31,238,31,1,31,245,31,46,31,46,30,76,31,170,31,16,31,50,31,50,30,121,31,21,31,2,31,2,30,177,31,194,31,194,30,66,31,73,31,154,31,177,31,64,31,175,31,119,31,32,31,32,30,149,31,27,31,69,31,127,31,235,31,92,31,254,31,93,31,102,31,102,30,136,31,108,31,246,31,55,31,66,31,193,31,34,31,119,31,178,31,164,31,203,31,218,31,90,31,254,31,254,30,254,29,200,31,83,31,83,30,98,31,98,30,98,29,163,31,205,31,241,31,98,31,14,31,35,31,111,31,112,31,149,31,149,30,181,31,175,31,175,30,175,29,7,31,61,31,61,30,61,29,123,31,175,31,84,31,84,30,84,29,217,31,111,31,111,30,45,31,209,31,152,31,59,31,59,30,59,29,187,31,187,30,110,31,208,31,34,31,120,31,200,31,46,31,187,31,169,31,251,31,253,31,15,31,88,31,205,31,227,31,201,31,111,31,111,30,111,29,18,31,177,31,177,30,7,31,220,31,72,31,178,31,240,31,216,31,54,31,14,31,14,30,112,31,174,31,174,30,174,29,14,31,181,31,192,31,196,31,196,30,196,29,253,31,253,30,43,31,247,31,247,30,19,31,19,30,150,31,237,31,252,31,99,31,99,30,99,29,98,31,121,31,134,31,186,31,186,30,116,31,213,31,50,31,173,31,63,31,86,31,86,31,66,31,135,31,173,31,22,31,66,31,78,31,77,31,242,31,186,31,124,31,93,31,227,31,242,31,26,31,26,30,253,31,71,31,10,31,104,31,30,31,69,31,11,31,138,31,215,31,189,31,189,30,131,31,234,31,154,31,154,30,154,29,154,28,154,27,164,31,115,31,12,31,12,30,240,31,171,31,127,31,127,30,33,31,146,31,67,31,67,30,1,31,228,31,202,31,8,31,42,31,93,31,80,31,80,30,80,29,92,31,92,30,253,31,164,31,164,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
