-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 628;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (218,0,246,0,123,0,76,0,221,0,205,0,225,0,73,0,164,0,136,0,0,0,164,0,12,0,211,0,184,0,22,0,56,0,253,0,55,0,254,0,162,0,0,0,234,0,240,0,197,0,244,0,63,0,92,0,0,0,198,0,192,0,177,0,113,0,211,0,79,0,79,0,150,0,180,0,95,0,114,0,228,0,168,0,18,0,234,0,0,0,124,0,192,0,157,0,50,0,142,0,0,0,187,0,2,0,64,0,160,0,97,0,0,0,158,0,94,0,0,0,182,0,162,0,0,0,124,0,185,0,0,0,239,0,166,0,30,0,145,0,88,0,247,0,0,0,102,0,0,0,62,0,42,0,173,0,238,0,157,0,31,0,0,0,41,0,212,0,237,0,149,0,198,0,82,0,13,0,228,0,193,0,69,0,0,0,161,0,235,0,28,0,107,0,47,0,134,0,250,0,0,0,127,0,79,0,37,0,0,0,50,0,0,0,150,0,192,0,156,0,0,0,84,0,155,0,0,0,254,0,91,0,164,0,218,0,185,0,0,0,7,0,43,0,6,0,52,0,197,0,2,0,0,0,52,0,0,0,219,0,98,0,0,0,15,0,142,0,0,0,197,0,116,0,0,0,0,0,12,0,0,0,0,0,48,0,113,0,29,0,0,0,198,0,201,0,202,0,211,0,83,0,69,0,0,0,0,0,101,0,0,0,21,0,163,0,73,0,206,0,188,0,0,0,134,0,53,0,0,0,239,0,238,0,162,0,61,0,126,0,0,0,90,0,29,0,48,0,75,0,0,0,233,0,47,0,104,0,134,0,141,0,234,0,144,0,0,0,69,0,240,0,186,0,69,0,209,0,0,0,0,0,126,0,0,0,226,0,211,0,0,0,0,0,42,0,208,0,35,0,213,0,22,0,247,0,99,0,91,0,0,0,149,0,191,0,0,0,128,0,0,0,65,0,0,0,188,0,0,0,124,0,110,0,39,0,80,0,0,0,210,0,0,0,169,0,21,0,52,0,182,0,0,0,0,0,235,0,23,0,180,0,71,0,0,0,0,0,22,0,185,0,252,0,97,0,230,0,170,0,0,0,42,0,195,0,190,0,30,0,46,0,102,0,0,0,77,0,135,0,188,0,7,0,161,0,189,0,180,0,222,0,52,0,0,0,90,0,0,0,0,0,90,0,0,0,103,0,168,0,2,0,32,0,60,0,92,0,114,0,71,0,91,0,36,0,101,0,208,0,140,0,92,0,81,0,0,0,229,0,16,0,142,0,77,0,234,0,101,0,8,0,122,0,0,0,235,0,59,0,55,0,58,0,37,0,21,0,179,0,115,0,100,0,175,0,31,0,0,0,116,0,216,0,48,0,0,0,0,0,25,0,201,0,137,0,179,0,0,0,231,0,12,0,21,0,5,0,0,0,95,0,220,0,41,0,143,0,203,0,241,0,241,0,0,0,182,0,166,0,201,0,156,0,0,0,0,0,29,0,235,0,89,0,242,0,0,0,244,0,231,0,0,0,0,0,251,0,0,0,117,0,10,0,122,0,220,0,255,0,82,0,31,0,41,0,0,0,0,0,0,0,0,0,7,0,64,0,228,0,195,0,67,0,134,0,114,0,164,0,129,0,15,0,165,0,29,0,23,0,204,0,34,0,164,0,140,0,249,0,145,0,229,0,0,0,33,0,216,0,30,0,84,0,163,0,229,0,23,0,218,0,0,0,110,0,134,0,58,0,0,0,135,0,138,0,0,0,204,0,240,0,190,0,25,0,43,0,58,0,150,0,183,0,0,0,2,0,117,0,251,0,30,0,24,0,12,0,21,0,19,0,235,0,0,0,69,0,232,0,171,0,129,0,176,0,15,0,81,0,14,0,102,0,122,0,117,0,179,0,179,0,241,0,178,0,118,0,218,0,67,0,0,0,111,0,22,0,62,0,39,0,16,0,57,0,0,0,91,0,250,0,25,0,0,0,8,0,60,0,0,0,98,0,240,0,53,0,0,0,233,0,43,0,155,0,0,0,0,0,159,0,174,0,0,0,187,0,13,0,0,0,0,0,62,0,166,0,226,0,235,0,25,0,0,0,0,0,199,0,208,0,26,0,12,0,184,0,123,0,123,0,232,0,123,0,244,0,33,0,186,0,222,0,98,0,77,0,192,0,175,0,157,0,121,0,0,0,18,0,0,0,142,0,77,0,0,0,0,0,230,0,0,0,32,0,174,0,40,0,125,0,64,0,30,0,220,0,0,0,135,0,76,0,105,0,51,0,98,0,0,0,139,0,178,0,39,0,184,0,40,0,116,0,199,0,158,0,0,0,227,0,125,0,36,0,98,0,78,0,113,0,85,0,220,0,0,0,152,0,95,0,54,0,0,0,158,0,100,0,144,0,134,0,194,0,6,0,216,0,37,0,1,0,48,0,241,0,117,0,0,0,152,0,111,0,72,0,64,0,142,0,198,0,0,0,0,0,0,0,94,0,1,0,213,0,152,0,156,0,29,0,106,0,99,0,160,0,223,0,219,0,252,0,79,0,177,0,112,0,207,0,137,0,179,0,0,0,98,0,144,0,210,0,0,0,45,0,47,0,39,0,140,0,90,0,47,0,233,0,0,0,101,0,62,0,103,0,231,0,114,0,0,0,46,0,93,0,66,0,49,0,254,0,0,0,200,0,0,0,219,0,215,0,0,0,0,0,71,0,54,0,193,0,191,0,0,0,158,0,0,0,240,0,0,0,180,0,231,0,56,0,152,0,41,0,255,0,136,0,33,0,0,0,117,0,0,0,53,0,33,0,80,0,196,0,16,0,48,0,12,0,222,0,141,0);
signal scenario_full  : scenario_type := (218,31,246,31,123,31,76,31,221,31,205,31,225,31,73,31,164,31,136,31,136,30,164,31,12,31,211,31,184,31,22,31,56,31,253,31,55,31,254,31,162,31,162,30,234,31,240,31,197,31,244,31,63,31,92,31,92,30,198,31,192,31,177,31,113,31,211,31,79,31,79,31,150,31,180,31,95,31,114,31,228,31,168,31,18,31,234,31,234,30,124,31,192,31,157,31,50,31,142,31,142,30,187,31,2,31,64,31,160,31,97,31,97,30,158,31,94,31,94,30,182,31,162,31,162,30,124,31,185,31,185,30,239,31,166,31,30,31,145,31,88,31,247,31,247,30,102,31,102,30,62,31,42,31,173,31,238,31,157,31,31,31,31,30,41,31,212,31,237,31,149,31,198,31,82,31,13,31,228,31,193,31,69,31,69,30,161,31,235,31,28,31,107,31,47,31,134,31,250,31,250,30,127,31,79,31,37,31,37,30,50,31,50,30,150,31,192,31,156,31,156,30,84,31,155,31,155,30,254,31,91,31,164,31,218,31,185,31,185,30,7,31,43,31,6,31,52,31,197,31,2,31,2,30,52,31,52,30,219,31,98,31,98,30,15,31,142,31,142,30,197,31,116,31,116,30,116,29,12,31,12,30,12,29,48,31,113,31,29,31,29,30,198,31,201,31,202,31,211,31,83,31,69,31,69,30,69,29,101,31,101,30,21,31,163,31,73,31,206,31,188,31,188,30,134,31,53,31,53,30,239,31,238,31,162,31,61,31,126,31,126,30,90,31,29,31,48,31,75,31,75,30,233,31,47,31,104,31,134,31,141,31,234,31,144,31,144,30,69,31,240,31,186,31,69,31,209,31,209,30,209,29,126,31,126,30,226,31,211,31,211,30,211,29,42,31,208,31,35,31,213,31,22,31,247,31,99,31,91,31,91,30,149,31,191,31,191,30,128,31,128,30,65,31,65,30,188,31,188,30,124,31,110,31,39,31,80,31,80,30,210,31,210,30,169,31,21,31,52,31,182,31,182,30,182,29,235,31,23,31,180,31,71,31,71,30,71,29,22,31,185,31,252,31,97,31,230,31,170,31,170,30,42,31,195,31,190,31,30,31,46,31,102,31,102,30,77,31,135,31,188,31,7,31,161,31,189,31,180,31,222,31,52,31,52,30,90,31,90,30,90,29,90,31,90,30,103,31,168,31,2,31,32,31,60,31,92,31,114,31,71,31,91,31,36,31,101,31,208,31,140,31,92,31,81,31,81,30,229,31,16,31,142,31,77,31,234,31,101,31,8,31,122,31,122,30,235,31,59,31,55,31,58,31,37,31,21,31,179,31,115,31,100,31,175,31,31,31,31,30,116,31,216,31,48,31,48,30,48,29,25,31,201,31,137,31,179,31,179,30,231,31,12,31,21,31,5,31,5,30,95,31,220,31,41,31,143,31,203,31,241,31,241,31,241,30,182,31,166,31,201,31,156,31,156,30,156,29,29,31,235,31,89,31,242,31,242,30,244,31,231,31,231,30,231,29,251,31,251,30,117,31,10,31,122,31,220,31,255,31,82,31,31,31,41,31,41,30,41,29,41,28,41,27,7,31,64,31,228,31,195,31,67,31,134,31,114,31,164,31,129,31,15,31,165,31,29,31,23,31,204,31,34,31,164,31,140,31,249,31,145,31,229,31,229,30,33,31,216,31,30,31,84,31,163,31,229,31,23,31,218,31,218,30,110,31,134,31,58,31,58,30,135,31,138,31,138,30,204,31,240,31,190,31,25,31,43,31,58,31,150,31,183,31,183,30,2,31,117,31,251,31,30,31,24,31,12,31,21,31,19,31,235,31,235,30,69,31,232,31,171,31,129,31,176,31,15,31,81,31,14,31,102,31,122,31,117,31,179,31,179,31,241,31,178,31,118,31,218,31,67,31,67,30,111,31,22,31,62,31,39,31,16,31,57,31,57,30,91,31,250,31,25,31,25,30,8,31,60,31,60,30,98,31,240,31,53,31,53,30,233,31,43,31,155,31,155,30,155,29,159,31,174,31,174,30,187,31,13,31,13,30,13,29,62,31,166,31,226,31,235,31,25,31,25,30,25,29,199,31,208,31,26,31,12,31,184,31,123,31,123,31,232,31,123,31,244,31,33,31,186,31,222,31,98,31,77,31,192,31,175,31,157,31,121,31,121,30,18,31,18,30,142,31,77,31,77,30,77,29,230,31,230,30,32,31,174,31,40,31,125,31,64,31,30,31,220,31,220,30,135,31,76,31,105,31,51,31,98,31,98,30,139,31,178,31,39,31,184,31,40,31,116,31,199,31,158,31,158,30,227,31,125,31,36,31,98,31,78,31,113,31,85,31,220,31,220,30,152,31,95,31,54,31,54,30,158,31,100,31,144,31,134,31,194,31,6,31,216,31,37,31,1,31,48,31,241,31,117,31,117,30,152,31,111,31,72,31,64,31,142,31,198,31,198,30,198,29,198,28,94,31,1,31,213,31,152,31,156,31,29,31,106,31,99,31,160,31,223,31,219,31,252,31,79,31,177,31,112,31,207,31,137,31,179,31,179,30,98,31,144,31,210,31,210,30,45,31,47,31,39,31,140,31,90,31,47,31,233,31,233,30,101,31,62,31,103,31,231,31,114,31,114,30,46,31,93,31,66,31,49,31,254,31,254,30,200,31,200,30,219,31,215,31,215,30,215,29,71,31,54,31,193,31,191,31,191,30,158,31,158,30,240,31,240,30,180,31,231,31,56,31,152,31,41,31,255,31,136,31,33,31,33,30,117,31,117,30,53,31,33,31,80,31,196,31,16,31,48,31,12,31,222,31,141,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
