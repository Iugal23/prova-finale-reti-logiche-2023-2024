-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 260;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,245,0,0,0,0,0,225,0,80,0,0,0,159,0,88,0,35,0,125,0,42,0,20,0,165,0,144,0,0,0,196,0,154,0,212,0,103,0,50,0,0,0,47,0,102,0,131,0,129,0,0,0,56,0,136,0,0,0,76,0,98,0,0,0,0,0,0,0,254,0,142,0,171,0,31,0,0,0,5,0,0,0,19,0,0,0,111,0,74,0,168,0,80,0,81,0,214,0,0,0,35,0,47,0,0,0,8,0,200,0,0,0,3,0,152,0,160,0,21,0,141,0,147,0,0,0,78,0,135,0,184,0,37,0,0,0,32,0,122,0,67,0,72,0,67,0,65,0,0,0,0,0,149,0,60,0,92,0,155,0,151,0,33,0,53,0,0,0,192,0,82,0,96,0,246,0,84,0,122,0,0,0,173,0,173,0,74,0,219,0,100,0,242,0,0,0,181,0,0,0,5,0,59,0,223,0,53,0,19,0,110,0,19,0,220,0,118,0,17,0,190,0,132,0,90,0,3,0,158,0,170,0,107,0,115,0,0,0,0,0,222,0,0,0,49,0,111,0,195,0,242,0,94,0,195,0,121,0,213,0,236,0,160,0,57,0,115,0,104,0,0,0,177,0,57,0,0,0,253,0,159,0,0,0,200,0,87,0,26,0,122,0,39,0,117,0,169,0,167,0,0,0,201,0,60,0,59,0,121,0,0,0,114,0,203,0,213,0,0,0,31,0,227,0,68,0,9,0,65,0,112,0,0,0,0,0,167,0,0,0,83,0,0,0,0,0,0,0,22,0,12,0,216,0,112,0,89,0,184,0,0,0,0,0,9,0,111,0,93,0,0,0,69,0,0,0,33,0,227,0,0,0,110,0,254,0,141,0,69,0,0,0,39,0,74,0,0,0,188,0,0,0,61,0,28,0,54,0,0,0,0,0,142,0,179,0,21,0,0,0,107,0,21,0,140,0,45,0,64,0,238,0,0,0,139,0,91,0,58,0,0,0,195,0,0,0,181,0,0,0,41,0,85,0,140,0,96,0,122,0,206,0,138,0,0,0,0,0,107,0,14,0,124,0,6,0,83,0,0,0,130,0,127,0,58,0,0,0,0,0,0,0,57,0,0,0,0,0,174,0,29,0,106,0,57,0,231,0,91,0,0,0,60,0,72,0,20,0);
signal scenario_full  : scenario_type := (0,0,245,31,245,30,245,29,225,31,80,31,80,30,159,31,88,31,35,31,125,31,42,31,20,31,165,31,144,31,144,30,196,31,154,31,212,31,103,31,50,31,50,30,47,31,102,31,131,31,129,31,129,30,56,31,136,31,136,30,76,31,98,31,98,30,98,29,98,28,254,31,142,31,171,31,31,31,31,30,5,31,5,30,19,31,19,30,111,31,74,31,168,31,80,31,81,31,214,31,214,30,35,31,47,31,47,30,8,31,200,31,200,30,3,31,152,31,160,31,21,31,141,31,147,31,147,30,78,31,135,31,184,31,37,31,37,30,32,31,122,31,67,31,72,31,67,31,65,31,65,30,65,29,149,31,60,31,92,31,155,31,151,31,33,31,53,31,53,30,192,31,82,31,96,31,246,31,84,31,122,31,122,30,173,31,173,31,74,31,219,31,100,31,242,31,242,30,181,31,181,30,5,31,59,31,223,31,53,31,19,31,110,31,19,31,220,31,118,31,17,31,190,31,132,31,90,31,3,31,158,31,170,31,107,31,115,31,115,30,115,29,222,31,222,30,49,31,111,31,195,31,242,31,94,31,195,31,121,31,213,31,236,31,160,31,57,31,115,31,104,31,104,30,177,31,57,31,57,30,253,31,159,31,159,30,200,31,87,31,26,31,122,31,39,31,117,31,169,31,167,31,167,30,201,31,60,31,59,31,121,31,121,30,114,31,203,31,213,31,213,30,31,31,227,31,68,31,9,31,65,31,112,31,112,30,112,29,167,31,167,30,83,31,83,30,83,29,83,28,22,31,12,31,216,31,112,31,89,31,184,31,184,30,184,29,9,31,111,31,93,31,93,30,69,31,69,30,33,31,227,31,227,30,110,31,254,31,141,31,69,31,69,30,39,31,74,31,74,30,188,31,188,30,61,31,28,31,54,31,54,30,54,29,142,31,179,31,21,31,21,30,107,31,21,31,140,31,45,31,64,31,238,31,238,30,139,31,91,31,58,31,58,30,195,31,195,30,181,31,181,30,41,31,85,31,140,31,96,31,122,31,206,31,138,31,138,30,138,29,107,31,14,31,124,31,6,31,83,31,83,30,130,31,127,31,58,31,58,30,58,29,58,28,57,31,57,30,57,29,174,31,29,31,106,31,57,31,231,31,91,31,91,30,60,31,72,31,20,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
