-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 1020;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (77,0,140,0,216,0,144,0,151,0,159,0,173,0,208,0,37,0,0,0,9,0,12,0,136,0,174,0,230,0,0,0,206,0,0,0,95,0,0,0,171,0,16,0,96,0,0,0,0,0,0,0,164,0,85,0,172,0,231,0,166,0,92,0,255,0,0,0,216,0,75,0,146,0,0,0,0,0,194,0,0,0,0,0,118,0,202,0,115,0,237,0,112,0,255,0,151,0,238,0,210,0,213,0,175,0,16,0,244,0,143,0,0,0,167,0,120,0,0,0,94,0,102,0,228,0,176,0,89,0,49,0,0,0,210,0,0,0,29,0,113,0,175,0,0,0,0,0,122,0,79,0,0,0,145,0,10,0,113,0,25,0,212,0,239,0,0,0,156,0,122,0,251,0,106,0,73,0,211,0,227,0,38,0,0,0,173,0,0,0,154,0,116,0,0,0,76,0,38,0,247,0,194,0,139,0,34,0,43,0,222,0,102,0,61,0,74,0,44,0,83,0,162,0,0,0,132,0,45,0,34,0,163,0,0,0,0,0,194,0,66,0,0,0,232,0,68,0,32,0,0,0,172,0,63,0,53,0,78,0,0,0,192,0,71,0,0,0,191,0,145,0,231,0,208,0,151,0,0,0,53,0,203,0,46,0,0,0,146,0,232,0,26,0,195,0,105,0,0,0,113,0,0,0,99,0,0,0,193,0,203,0,0,0,0,0,0,0,179,0,204,0,0,0,211,0,237,0,0,0,125,0,141,0,8,0,158,0,0,0,0,0,0,0,55,0,238,0,0,0,219,0,0,0,47,0,82,0,224,0,216,0,81,0,209,0,161,0,15,0,192,0,0,0,52,0,28,0,247,0,0,0,0,0,171,0,218,0,13,0,99,0,159,0,100,0,225,0,202,0,0,0,0,0,55,0,77,0,133,0,243,0,29,0,219,0,136,0,0,0,151,0,0,0,188,0,0,0,0,0,146,0,0,0,0,0,0,0,101,0,155,0,168,0,31,0,142,0,0,0,14,0,4,0,207,0,138,0,195,0,177,0,236,0,0,0,16,0,14,0,0,0,169,0,110,0,145,0,8,0,249,0,8,0,4,0,22,0,168,0,0,0,0,0,255,0,178,0,107,0,0,0,53,0,153,0,0,0,117,0,195,0,51,0,130,0,255,0,52,0,152,0,129,0,0,0,9,0,37,0,164,0,78,0,97,0,59,0,87,0,0,0,127,0,186,0,5,0,77,0,0,0,38,0,192,0,108,0,116,0,65,0,0,0,38,0,197,0,240,0,192,0,151,0,26,0,70,0,0,0,0,0,95,0,239,0,141,0,46,0,168,0,98,0,234,0,8,0,135,0,228,0,78,0,216,0,201,0,85,0,65,0,84,0,250,0,67,0,10,0,185,0,178,0,132,0,49,0,131,0,71,0,105,0,16,0,212,0,104,0,85,0,0,0,73,0,253,0,192,0,24,0,0,0,161,0,209,0,187,0,180,0,172,0,15,0,200,0,80,0,166,0,10,0,62,0,95,0,232,0,173,0,192,0,158,0,96,0,0,0,228,0,146,0,101,0,231,0,206,0,0,0,255,0,172,0,151,0,106,0,16,0,0,0,79,0,63,0,0,0,0,0,0,0,0,0,136,0,180,0,105,0,133,0,145,0,59,0,95,0,169,0,100,0,142,0,241,0,249,0,28,0,105,0,46,0,31,0,0,0,188,0,0,0,25,0,130,0,0,0,211,0,209,0,126,0,80,0,18,0,214,0,0,0,215,0,63,0,0,0,24,0,96,0,20,0,73,0,126,0,0,0,250,0,100,0,246,0,177,0,190,0,139,0,221,0,175,0,0,0,0,0,214,0,0,0,57,0,248,0,138,0,152,0,42,0,78,0,40,0,206,0,202,0,56,0,124,0,168,0,148,0,0,0,0,0,21,0,0,0,0,0,231,0,7,0,0,0,2,0,0,0,0,0,0,0,71,0,102,0,64,0,207,0,178,0,48,0,243,0,0,0,130,0,228,0,42,0,237,0,248,0,118,0,0,0,203,0,0,0,0,0,251,0,0,0,213,0,23,0,246,0,240,0,49,0,67,0,144,0,198,0,243,0,180,0,0,0,236,0,20,0,111,0,160,0,113,0,197,0,0,0,49,0,63,0,158,0,7,0,76,0,199,0,0,0,0,0,66,0,101,0,244,0,244,0,20,0,201,0,0,0,254,0,160,0,106,0,0,0,0,0,0,0,223,0,105,0,166,0,0,0,9,0,167,0,81,0,0,0,75,0,165,0,58,0,225,0,0,0,100,0,2,0,11,0,0,0,206,0,231,0,42,0,0,0,69,0,111,0,144,0,62,0,241,0,113,0,221,0,240,0,30,0,0,0,173,0,0,0,238,0,0,0,152,0,115,0,17,0,77,0,0,0,34,0,234,0,84,0,0,0,91,0,143,0,0,0,201,0,101,0,112,0,206,0,5,0,166,0,9,0,240,0,173,0,123,0,0,0,145,0,0,0,85,0,21,0,12,0,109,0,0,0,150,0,0,0,99,0,0,0,0,0,69,0,161,0,234,0,16,0,219,0,43,0,81,0,120,0,89,0,199,0,44,0,250,0,147,0,140,0,98,0,100,0,131,0,133,0,0,0,20,0,164,0,107,0,134,0,17,0,245,0,191,0,72,0,45,0,197,0,21,0,0,0,165,0,156,0,0,0,104,0,23,0,63,0,107,0,133,0,196,0,49,0,15,0,0,0,240,0,95,0,139,0,114,0,24,0,0,0,109,0,66,0,3,0,17,0,152,0,39,0,110,0,121,0,88,0,74,0,23,0,129,0,0,0,61,0,0,0,0,0,127,0,244,0,106,0,0,0,0,0,134,0,133,0,0,0,224,0,150,0,0,0,28,0,109,0,78,0,103,0,0,0,224,0,55,0,0,0,0,0,128,0,98,0,225,0,90,0,0,0,17,0,177,0,198,0,0,0,0,0,20,0,132,0,183,0,223,0,141,0,99,0,175,0,169,0,214,0,45,0,228,0,248,0,0,0,0,0,106,0,12,0,63,0,188,0,237,0,75,0,0,0,164,0,0,0,0,0,110,0,8,0,110,0,0,0,0,0,93,0,20,0,0,0,61,0,53,0,178,0,79,0,6,0,0,0,134,0,0,0,138,0,242,0,51,0,9,0,0,0,50,0,164,0,194,0,43,0,170,0,0,0,17,0,0,0,13,0,104,0,251,0,217,0,0,0,0,0,1,0,72,0,0,0,24,0,203,0,170,0,117,0,75,0,0,0,0,0,94,0,189,0,0,0,196,0,244,0,107,0,78,0,95,0,26,0,98,0,224,0,90,0,196,0,82,0,0,0,98,0,225,0,0,0,0,0,0,0,75,0,8,0,0,0,107,0,137,0,0,0,124,0,69,0,246,0,134,0,216,0,175,0,91,0,151,0,207,0,0,0,170,0,40,0,150,0,4,0,85,0,151,0,0,0,123,0,197,0,209,0,215,0,145,0,0,0,0,0,223,0,77,0,229,0,13,0,175,0,212,0,156,0,0,0,26,0,139,0,24,0,106,0,29,0,35,0,202,0,28,0,66,0,127,0,76,0,135,0,103,0,37,0,27,0,92,0,239,0,250,0,13,0,123,0,102,0,0,0,0,0,92,0,209,0,144,0,119,0,116,0,136,0,75,0,0,0,135,0,220,0,194,0,164,0,51,0,151,0,86,0,11,0,221,0,31,0,93,0,106,0,32,0,0,0,0,0,137,0,195,0,52,0,0,0,146,0,122,0,136,0,244,0,245,0,226,0,211,0,0,0,216,0,140,0,226,0,0,0,237,0,118,0,104,0,217,0,81,0,200,0,0,0,127,0,82,0,37,0,254,0,201,0,98,0,142,0,106,0,0,0,250,0,15,0,225,0,150,0,2,0,9,0,0,0,151,0,0,0,154,0,68,0,76,0,0,0,0,0,107,0,52,0,85,0,108,0,0,0,142,0,22,0,31,0,205,0,182,0,149,0,0,0,153,0,50,0,182,0,137,0,178,0,17,0,135,0,60,0,143,0,198,0,93,0,250,0,0,0,71,0,69,0,58,0,0,0,19,0,49,0,42,0,246,0,253,0,127,0,0,0,178,0,48,0,0,0,243,0,127,0,215,0,0,0,179,0,32,0,0,0,240,0,0,0,216,0,186,0,100,0,37,0,112,0,225,0,42,0,246,0,161,0,45,0,0,0,30,0,110,0,138,0,80,0,212,0,0,0,6,0,202,0,230,0,93,0,173,0,250,0,133,0,0,0,53,0,140,0,175,0,5,0,183,0,0,0,219,0,148,0,201,0,134,0,157,0,72,0,192,0,137,0,179,0,0,0,8,0,209,0,0,0,236,0,91,0,9,0,207,0,160,0,0,0,222,0,48,0,105,0,211,0,107,0,0,0,13,0,0,0,237,0,47,0,219,0,181,0,0,0,93,0,118,0,158,0,158,0,0,0,141,0,3,0,179,0,70,0,243,0,0,0,77,0,70,0,0,0,8,0,158,0,232,0,65,0,0,0,50,0,0,0,76,0,195,0,0,0,0,0,0,0,220,0,3,0);
signal scenario_full  : scenario_type := (77,31,140,31,216,31,144,31,151,31,159,31,173,31,208,31,37,31,37,30,9,31,12,31,136,31,174,31,230,31,230,30,206,31,206,30,95,31,95,30,171,31,16,31,96,31,96,30,96,29,96,28,164,31,85,31,172,31,231,31,166,31,92,31,255,31,255,30,216,31,75,31,146,31,146,30,146,29,194,31,194,30,194,29,118,31,202,31,115,31,237,31,112,31,255,31,151,31,238,31,210,31,213,31,175,31,16,31,244,31,143,31,143,30,167,31,120,31,120,30,94,31,102,31,228,31,176,31,89,31,49,31,49,30,210,31,210,30,29,31,113,31,175,31,175,30,175,29,122,31,79,31,79,30,145,31,10,31,113,31,25,31,212,31,239,31,239,30,156,31,122,31,251,31,106,31,73,31,211,31,227,31,38,31,38,30,173,31,173,30,154,31,116,31,116,30,76,31,38,31,247,31,194,31,139,31,34,31,43,31,222,31,102,31,61,31,74,31,44,31,83,31,162,31,162,30,132,31,45,31,34,31,163,31,163,30,163,29,194,31,66,31,66,30,232,31,68,31,32,31,32,30,172,31,63,31,53,31,78,31,78,30,192,31,71,31,71,30,191,31,145,31,231,31,208,31,151,31,151,30,53,31,203,31,46,31,46,30,146,31,232,31,26,31,195,31,105,31,105,30,113,31,113,30,99,31,99,30,193,31,203,31,203,30,203,29,203,28,179,31,204,31,204,30,211,31,237,31,237,30,125,31,141,31,8,31,158,31,158,30,158,29,158,28,55,31,238,31,238,30,219,31,219,30,47,31,82,31,224,31,216,31,81,31,209,31,161,31,15,31,192,31,192,30,52,31,28,31,247,31,247,30,247,29,171,31,218,31,13,31,99,31,159,31,100,31,225,31,202,31,202,30,202,29,55,31,77,31,133,31,243,31,29,31,219,31,136,31,136,30,151,31,151,30,188,31,188,30,188,29,146,31,146,30,146,29,146,28,101,31,155,31,168,31,31,31,142,31,142,30,14,31,4,31,207,31,138,31,195,31,177,31,236,31,236,30,16,31,14,31,14,30,169,31,110,31,145,31,8,31,249,31,8,31,4,31,22,31,168,31,168,30,168,29,255,31,178,31,107,31,107,30,53,31,153,31,153,30,117,31,195,31,51,31,130,31,255,31,52,31,152,31,129,31,129,30,9,31,37,31,164,31,78,31,97,31,59,31,87,31,87,30,127,31,186,31,5,31,77,31,77,30,38,31,192,31,108,31,116,31,65,31,65,30,38,31,197,31,240,31,192,31,151,31,26,31,70,31,70,30,70,29,95,31,239,31,141,31,46,31,168,31,98,31,234,31,8,31,135,31,228,31,78,31,216,31,201,31,85,31,65,31,84,31,250,31,67,31,10,31,185,31,178,31,132,31,49,31,131,31,71,31,105,31,16,31,212,31,104,31,85,31,85,30,73,31,253,31,192,31,24,31,24,30,161,31,209,31,187,31,180,31,172,31,15,31,200,31,80,31,166,31,10,31,62,31,95,31,232,31,173,31,192,31,158,31,96,31,96,30,228,31,146,31,101,31,231,31,206,31,206,30,255,31,172,31,151,31,106,31,16,31,16,30,79,31,63,31,63,30,63,29,63,28,63,27,136,31,180,31,105,31,133,31,145,31,59,31,95,31,169,31,100,31,142,31,241,31,249,31,28,31,105,31,46,31,31,31,31,30,188,31,188,30,25,31,130,31,130,30,211,31,209,31,126,31,80,31,18,31,214,31,214,30,215,31,63,31,63,30,24,31,96,31,20,31,73,31,126,31,126,30,250,31,100,31,246,31,177,31,190,31,139,31,221,31,175,31,175,30,175,29,214,31,214,30,57,31,248,31,138,31,152,31,42,31,78,31,40,31,206,31,202,31,56,31,124,31,168,31,148,31,148,30,148,29,21,31,21,30,21,29,231,31,7,31,7,30,2,31,2,30,2,29,2,28,71,31,102,31,64,31,207,31,178,31,48,31,243,31,243,30,130,31,228,31,42,31,237,31,248,31,118,31,118,30,203,31,203,30,203,29,251,31,251,30,213,31,23,31,246,31,240,31,49,31,67,31,144,31,198,31,243,31,180,31,180,30,236,31,20,31,111,31,160,31,113,31,197,31,197,30,49,31,63,31,158,31,7,31,76,31,199,31,199,30,199,29,66,31,101,31,244,31,244,31,20,31,201,31,201,30,254,31,160,31,106,31,106,30,106,29,106,28,223,31,105,31,166,31,166,30,9,31,167,31,81,31,81,30,75,31,165,31,58,31,225,31,225,30,100,31,2,31,11,31,11,30,206,31,231,31,42,31,42,30,69,31,111,31,144,31,62,31,241,31,113,31,221,31,240,31,30,31,30,30,173,31,173,30,238,31,238,30,152,31,115,31,17,31,77,31,77,30,34,31,234,31,84,31,84,30,91,31,143,31,143,30,201,31,101,31,112,31,206,31,5,31,166,31,9,31,240,31,173,31,123,31,123,30,145,31,145,30,85,31,21,31,12,31,109,31,109,30,150,31,150,30,99,31,99,30,99,29,69,31,161,31,234,31,16,31,219,31,43,31,81,31,120,31,89,31,199,31,44,31,250,31,147,31,140,31,98,31,100,31,131,31,133,31,133,30,20,31,164,31,107,31,134,31,17,31,245,31,191,31,72,31,45,31,197,31,21,31,21,30,165,31,156,31,156,30,104,31,23,31,63,31,107,31,133,31,196,31,49,31,15,31,15,30,240,31,95,31,139,31,114,31,24,31,24,30,109,31,66,31,3,31,17,31,152,31,39,31,110,31,121,31,88,31,74,31,23,31,129,31,129,30,61,31,61,30,61,29,127,31,244,31,106,31,106,30,106,29,134,31,133,31,133,30,224,31,150,31,150,30,28,31,109,31,78,31,103,31,103,30,224,31,55,31,55,30,55,29,128,31,98,31,225,31,90,31,90,30,17,31,177,31,198,31,198,30,198,29,20,31,132,31,183,31,223,31,141,31,99,31,175,31,169,31,214,31,45,31,228,31,248,31,248,30,248,29,106,31,12,31,63,31,188,31,237,31,75,31,75,30,164,31,164,30,164,29,110,31,8,31,110,31,110,30,110,29,93,31,20,31,20,30,61,31,53,31,178,31,79,31,6,31,6,30,134,31,134,30,138,31,242,31,51,31,9,31,9,30,50,31,164,31,194,31,43,31,170,31,170,30,17,31,17,30,13,31,104,31,251,31,217,31,217,30,217,29,1,31,72,31,72,30,24,31,203,31,170,31,117,31,75,31,75,30,75,29,94,31,189,31,189,30,196,31,244,31,107,31,78,31,95,31,26,31,98,31,224,31,90,31,196,31,82,31,82,30,98,31,225,31,225,30,225,29,225,28,75,31,8,31,8,30,107,31,137,31,137,30,124,31,69,31,246,31,134,31,216,31,175,31,91,31,151,31,207,31,207,30,170,31,40,31,150,31,4,31,85,31,151,31,151,30,123,31,197,31,209,31,215,31,145,31,145,30,145,29,223,31,77,31,229,31,13,31,175,31,212,31,156,31,156,30,26,31,139,31,24,31,106,31,29,31,35,31,202,31,28,31,66,31,127,31,76,31,135,31,103,31,37,31,27,31,92,31,239,31,250,31,13,31,123,31,102,31,102,30,102,29,92,31,209,31,144,31,119,31,116,31,136,31,75,31,75,30,135,31,220,31,194,31,164,31,51,31,151,31,86,31,11,31,221,31,31,31,93,31,106,31,32,31,32,30,32,29,137,31,195,31,52,31,52,30,146,31,122,31,136,31,244,31,245,31,226,31,211,31,211,30,216,31,140,31,226,31,226,30,237,31,118,31,104,31,217,31,81,31,200,31,200,30,127,31,82,31,37,31,254,31,201,31,98,31,142,31,106,31,106,30,250,31,15,31,225,31,150,31,2,31,9,31,9,30,151,31,151,30,154,31,68,31,76,31,76,30,76,29,107,31,52,31,85,31,108,31,108,30,142,31,22,31,31,31,205,31,182,31,149,31,149,30,153,31,50,31,182,31,137,31,178,31,17,31,135,31,60,31,143,31,198,31,93,31,250,31,250,30,71,31,69,31,58,31,58,30,19,31,49,31,42,31,246,31,253,31,127,31,127,30,178,31,48,31,48,30,243,31,127,31,215,31,215,30,179,31,32,31,32,30,240,31,240,30,216,31,186,31,100,31,37,31,112,31,225,31,42,31,246,31,161,31,45,31,45,30,30,31,110,31,138,31,80,31,212,31,212,30,6,31,202,31,230,31,93,31,173,31,250,31,133,31,133,30,53,31,140,31,175,31,5,31,183,31,183,30,219,31,148,31,201,31,134,31,157,31,72,31,192,31,137,31,179,31,179,30,8,31,209,31,209,30,236,31,91,31,9,31,207,31,160,31,160,30,222,31,48,31,105,31,211,31,107,31,107,30,13,31,13,30,237,31,47,31,219,31,181,31,181,30,93,31,118,31,158,31,158,31,158,30,141,31,3,31,179,31,70,31,243,31,243,30,77,31,70,31,70,30,8,31,158,31,232,31,65,31,65,30,50,31,50,30,76,31,195,31,195,30,195,29,195,28,220,31,3,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
