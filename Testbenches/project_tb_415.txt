-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 707;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (87,0,60,0,236,0,119,0,186,0,0,0,94,0,20,0,10,0,61,0,43,0,0,0,15,0,7,0,0,0,17,0,112,0,250,0,120,0,0,0,119,0,0,0,40,0,208,0,89,0,91,0,58,0,56,0,252,0,192,0,53,0,55,0,255,0,93,0,73,0,35,0,1,0,161,0,6,0,117,0,79,0,241,0,166,0,198,0,0,0,254,0,224,0,120,0,10,0,6,0,11,0,80,0,18,0,38,0,247,0,96,0,0,0,245,0,144,0,25,0,90,0,193,0,240,0,83,0,51,0,195,0,46,0,252,0,0,0,66,0,56,0,52,0,222,0,250,0,0,0,44,0,128,0,47,0,0,0,225,0,231,0,72,0,200,0,0,0,173,0,33,0,35,0,30,0,69,0,11,0,195,0,135,0,174,0,54,0,209,0,181,0,0,0,0,0,83,0,119,0,188,0,183,0,91,0,90,0,96,0,46,0,224,0,146,0,29,0,0,0,144,0,80,0,117,0,74,0,12,0,199,0,20,0,237,0,58,0,0,0,0,0,54,0,253,0,64,0,141,0,72,0,0,0,46,0,93,0,30,0,115,0,0,0,77,0,0,0,190,0,34,0,225,0,0,0,18,0,88,0,0,0,53,0,40,0,0,0,80,0,236,0,89,0,19,0,152,0,60,0,122,0,51,0,177,0,251,0,73,0,161,0,9,0,0,0,91,0,221,0,30,0,140,0,199,0,15,0,103,0,226,0,45,0,144,0,0,0,152,0,251,0,143,0,0,0,32,0,84,0,86,0,0,0,82,0,0,0,0,0,144,0,186,0,176,0,56,0,148,0,205,0,148,0,164,0,200,0,30,0,100,0,121,0,160,0,13,0,105,0,210,0,42,0,47,0,135,0,178,0,21,0,239,0,179,0,0,0,12,0,135,0,130,0,214,0,0,0,254,0,174,0,57,0,163,0,115,0,0,0,0,0,236,0,7,0,0,0,29,0,0,0,149,0,238,0,224,0,52,0,113,0,141,0,52,0,53,0,0,0,172,0,9,0,170,0,176,0,114,0,168,0,225,0,8,0,0,0,0,0,240,0,65,0,104,0,90,0,31,0,179,0,90,0,202,0,18,0,124,0,15,0,52,0,45,0,214,0,0,0,203,0,10,0,186,0,34,0,3,0,235,0,80,0,48,0,235,0,161,0,31,0,205,0,25,0,75,0,210,0,0,0,0,0,178,0,0,0,0,0,201,0,61,0,239,0,207,0,173,0,108,0,0,0,0,0,117,0,96,0,162,0,49,0,61,0,0,0,110,0,19,0,10,0,108,0,200,0,0,0,146,0,64,0,60,0,224,0,198,0,161,0,210,0,174,0,0,0,64,0,76,0,0,0,239,0,128,0,0,0,0,0,228,0,0,0,91,0,0,0,0,0,66,0,0,0,237,0,134,0,193,0,255,0,11,0,124,0,55,0,93,0,229,0,35,0,61,0,255,0,0,0,91,0,10,0,230,0,201,0,59,0,0,0,191,0,193,0,0,0,32,0,122,0,214,0,145,0,132,0,145,0,114,0,167,0,203,0,66,0,237,0,0,0,207,0,0,0,176,0,251,0,136,0,236,0,246,0,0,0,62,0,0,0,184,0,0,0,32,0,86,0,36,0,255,0,192,0,120,0,0,0,158,0,218,0,0,0,0,0,0,0,171,0,0,0,78,0,216,0,248,0,231,0,124,0,42,0,162,0,230,0,108,0,142,0,139,0,77,0,0,0,0,0,96,0,56,0,119,0,52,0,88,0,85,0,238,0,27,0,0,0,0,0,130,0,0,0,199,0,49,0,143,0,0,0,201,0,196,0,169,0,235,0,214,0,128,0,0,0,177,0,78,0,68,0,186,0,13,0,124,0,148,0,207,0,4,0,50,0,3,0,0,0,0,0,244,0,122,0,126,0,252,0,54,0,0,0,66,0,211,0,90,0,234,0,22,0,18,0,252,0,160,0,18,0,254,0,0,0,47,0,52,0,224,0,0,0,0,0,174,0,0,0,119,0,12,0,33,0,12,0,150,0,38,0,28,0,211,0,26,0,52,0,0,0,117,0,86,0,213,0,104,0,35,0,48,0,238,0,236,0,0,0,49,0,31,0,224,0,29,0,144,0,0,0,79,0,113,0,145,0,0,0,0,0,209,0,64,0,16,0,63,0,0,0,0,0,146,0,240,0,89,0,51,0,249,0,74,0,0,0,40,0,161,0,66,0,0,0,250,0,49,0,16,0,125,0,0,0,8,0,0,0,0,0,0,0,12,0,13,0,80,0,0,0,212,0,194,0,52,0,239,0,52,0,170,0,81,0,143,0,90,0,11,0,220,0,211,0,235,0,249,0,226,0,0,0,0,0,227,0,146,0,84,0,112,0,167,0,114,0,0,0,162,0,0,0,7,0,117,0,0,0,0,0,13,0,147,0,242,0,0,0,130,0,10,0,56,0,27,0,177,0,175,0,166,0,237,0,132,0,0,0,181,0,217,0,1,0,127,0,0,0,0,0,0,0,0,0,191,0,11,0,26,0,153,0,94,0,29,0,0,0,146,0,233,0,0,0,215,0,109,0,85,0,33,0,101,0,180,0,0,0,28,0,245,0,0,0,230,0,90,0,72,0,195,0,28,0,0,0,48,0,225,0,94,0,227,0,161,0,17,0,229,0,104,0,213,0,46,0,15,0,180,0,56,0,247,0,0,0,240,0,223,0,0,0,134,0,35,0,0,0,1,0,124,0,87,0,242,0,197,0,132,0,10,0,214,0,94,0,79,0,0,0,83,0,0,0,157,0,184,0,52,0,243,0,127,0,0,0,76,0,14,0,109,0,0,0,198,0,42,0,12,0,167,0,240,0,0,0,0,0,184,0,174,0,0,0,145,0,204,0,0,0,187,0,210,0,137,0,253,0,90,0,88,0,0,0,0,0,0,0,0,0,210,0,112,0,230,0,0,0,119,0,218,0,221,0,0,0,16,0,167,0,55,0,115,0,100,0,251,0,237,0,216,0,44,0,118,0,161,0,0,0,0,0,9,0,145,0,46,0,176,0,79,0,167,0,37,0,106,0,62,0,55,0,27,0,166,0,125,0,233,0,200,0,32,0,239,0,160,0,170,0,253,0,176,0,22,0,119,0,0,0,0,0,0,0,98,0,208,0);
signal scenario_full  : scenario_type := (87,31,60,31,236,31,119,31,186,31,186,30,94,31,20,31,10,31,61,31,43,31,43,30,15,31,7,31,7,30,17,31,112,31,250,31,120,31,120,30,119,31,119,30,40,31,208,31,89,31,91,31,58,31,56,31,252,31,192,31,53,31,55,31,255,31,93,31,73,31,35,31,1,31,161,31,6,31,117,31,79,31,241,31,166,31,198,31,198,30,254,31,224,31,120,31,10,31,6,31,11,31,80,31,18,31,38,31,247,31,96,31,96,30,245,31,144,31,25,31,90,31,193,31,240,31,83,31,51,31,195,31,46,31,252,31,252,30,66,31,56,31,52,31,222,31,250,31,250,30,44,31,128,31,47,31,47,30,225,31,231,31,72,31,200,31,200,30,173,31,33,31,35,31,30,31,69,31,11,31,195,31,135,31,174,31,54,31,209,31,181,31,181,30,181,29,83,31,119,31,188,31,183,31,91,31,90,31,96,31,46,31,224,31,146,31,29,31,29,30,144,31,80,31,117,31,74,31,12,31,199,31,20,31,237,31,58,31,58,30,58,29,54,31,253,31,64,31,141,31,72,31,72,30,46,31,93,31,30,31,115,31,115,30,77,31,77,30,190,31,34,31,225,31,225,30,18,31,88,31,88,30,53,31,40,31,40,30,80,31,236,31,89,31,19,31,152,31,60,31,122,31,51,31,177,31,251,31,73,31,161,31,9,31,9,30,91,31,221,31,30,31,140,31,199,31,15,31,103,31,226,31,45,31,144,31,144,30,152,31,251,31,143,31,143,30,32,31,84,31,86,31,86,30,82,31,82,30,82,29,144,31,186,31,176,31,56,31,148,31,205,31,148,31,164,31,200,31,30,31,100,31,121,31,160,31,13,31,105,31,210,31,42,31,47,31,135,31,178,31,21,31,239,31,179,31,179,30,12,31,135,31,130,31,214,31,214,30,254,31,174,31,57,31,163,31,115,31,115,30,115,29,236,31,7,31,7,30,29,31,29,30,149,31,238,31,224,31,52,31,113,31,141,31,52,31,53,31,53,30,172,31,9,31,170,31,176,31,114,31,168,31,225,31,8,31,8,30,8,29,240,31,65,31,104,31,90,31,31,31,179,31,90,31,202,31,18,31,124,31,15,31,52,31,45,31,214,31,214,30,203,31,10,31,186,31,34,31,3,31,235,31,80,31,48,31,235,31,161,31,31,31,205,31,25,31,75,31,210,31,210,30,210,29,178,31,178,30,178,29,201,31,61,31,239,31,207,31,173,31,108,31,108,30,108,29,117,31,96,31,162,31,49,31,61,31,61,30,110,31,19,31,10,31,108,31,200,31,200,30,146,31,64,31,60,31,224,31,198,31,161,31,210,31,174,31,174,30,64,31,76,31,76,30,239,31,128,31,128,30,128,29,228,31,228,30,91,31,91,30,91,29,66,31,66,30,237,31,134,31,193,31,255,31,11,31,124,31,55,31,93,31,229,31,35,31,61,31,255,31,255,30,91,31,10,31,230,31,201,31,59,31,59,30,191,31,193,31,193,30,32,31,122,31,214,31,145,31,132,31,145,31,114,31,167,31,203,31,66,31,237,31,237,30,207,31,207,30,176,31,251,31,136,31,236,31,246,31,246,30,62,31,62,30,184,31,184,30,32,31,86,31,36,31,255,31,192,31,120,31,120,30,158,31,218,31,218,30,218,29,218,28,171,31,171,30,78,31,216,31,248,31,231,31,124,31,42,31,162,31,230,31,108,31,142,31,139,31,77,31,77,30,77,29,96,31,56,31,119,31,52,31,88,31,85,31,238,31,27,31,27,30,27,29,130,31,130,30,199,31,49,31,143,31,143,30,201,31,196,31,169,31,235,31,214,31,128,31,128,30,177,31,78,31,68,31,186,31,13,31,124,31,148,31,207,31,4,31,50,31,3,31,3,30,3,29,244,31,122,31,126,31,252,31,54,31,54,30,66,31,211,31,90,31,234,31,22,31,18,31,252,31,160,31,18,31,254,31,254,30,47,31,52,31,224,31,224,30,224,29,174,31,174,30,119,31,12,31,33,31,12,31,150,31,38,31,28,31,211,31,26,31,52,31,52,30,117,31,86,31,213,31,104,31,35,31,48,31,238,31,236,31,236,30,49,31,31,31,224,31,29,31,144,31,144,30,79,31,113,31,145,31,145,30,145,29,209,31,64,31,16,31,63,31,63,30,63,29,146,31,240,31,89,31,51,31,249,31,74,31,74,30,40,31,161,31,66,31,66,30,250,31,49,31,16,31,125,31,125,30,8,31,8,30,8,29,8,28,12,31,13,31,80,31,80,30,212,31,194,31,52,31,239,31,52,31,170,31,81,31,143,31,90,31,11,31,220,31,211,31,235,31,249,31,226,31,226,30,226,29,227,31,146,31,84,31,112,31,167,31,114,31,114,30,162,31,162,30,7,31,117,31,117,30,117,29,13,31,147,31,242,31,242,30,130,31,10,31,56,31,27,31,177,31,175,31,166,31,237,31,132,31,132,30,181,31,217,31,1,31,127,31,127,30,127,29,127,28,127,27,191,31,11,31,26,31,153,31,94,31,29,31,29,30,146,31,233,31,233,30,215,31,109,31,85,31,33,31,101,31,180,31,180,30,28,31,245,31,245,30,230,31,90,31,72,31,195,31,28,31,28,30,48,31,225,31,94,31,227,31,161,31,17,31,229,31,104,31,213,31,46,31,15,31,180,31,56,31,247,31,247,30,240,31,223,31,223,30,134,31,35,31,35,30,1,31,124,31,87,31,242,31,197,31,132,31,10,31,214,31,94,31,79,31,79,30,83,31,83,30,157,31,184,31,52,31,243,31,127,31,127,30,76,31,14,31,109,31,109,30,198,31,42,31,12,31,167,31,240,31,240,30,240,29,184,31,174,31,174,30,145,31,204,31,204,30,187,31,210,31,137,31,253,31,90,31,88,31,88,30,88,29,88,28,88,27,210,31,112,31,230,31,230,30,119,31,218,31,221,31,221,30,16,31,167,31,55,31,115,31,100,31,251,31,237,31,216,31,44,31,118,31,161,31,161,30,161,29,9,31,145,31,46,31,176,31,79,31,167,31,37,31,106,31,62,31,55,31,27,31,166,31,125,31,233,31,200,31,32,31,239,31,160,31,170,31,253,31,176,31,22,31,119,31,119,30,119,29,119,28,98,31,208,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
