-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 504;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (71,0,174,0,131,0,0,0,4,0,0,0,231,0,242,0,211,0,124,0,35,0,240,0,87,0,0,0,220,0,213,0,49,0,163,0,72,0,0,0,126,0,130,0,66,0,0,0,182,0,114,0,155,0,0,0,1,0,0,0,52,0,0,0,0,0,0,0,127,0,0,0,0,0,163,0,0,0,64,0,92,0,123,0,19,0,77,0,186,0,80,0,201,0,182,0,0,0,137,0,248,0,0,0,197,0,159,0,188,0,32,0,107,0,0,0,55,0,168,0,0,0,106,0,195,0,72,0,25,0,15,0,215,0,201,0,202,0,0,0,23,0,0,0,140,0,217,0,61,0,200,0,171,0,0,0,87,0,220,0,118,0,187,0,20,0,0,0,219,0,79,0,48,0,0,0,236,0,24,0,140,0,56,0,136,0,182,0,148,0,142,0,212,0,251,0,192,0,150,0,229,0,71,0,254,0,21,0,109,0,213,0,112,0,159,0,61,0,0,0,131,0,171,0,0,0,0,0,39,0,0,0,0,0,0,0,208,0,43,0,0,0,5,0,0,0,204,0,123,0,88,0,0,0,152,0,106,0,234,0,62,0,195,0,241,0,202,0,175,0,0,0,135,0,2,0,218,0,0,0,242,0,243,0,10,0,220,0,21,0,3,0,99,0,16,0,0,0,238,0,79,0,50,0,58,0,194,0,26,0,110,0,130,0,196,0,126,0,0,0,80,0,13,0,0,0,0,0,168,0,44,0,179,0,88,0,0,0,187,0,0,0,77,0,235,0,64,0,87,0,211,0,99,0,83,0,223,0,230,0,0,0,0,0,165,0,146,0,216,0,168,0,0,0,0,0,203,0,0,0,0,0,127,0,166,0,190,0,198,0,28,0,150,0,248,0,156,0,231,0,90,0,40,0,0,0,158,0,189,0,113,0,53,0,125,0,253,0,32,0,85,0,90,0,185,0,220,0,142,0,203,0,45,0,161,0,6,0,68,0,75,0,185,0,10,0,74,0,197,0,194,0,217,0,230,0,163,0,34,0,50,0,0,0,190,0,9,0,51,0,17,0,65,0,89,0,154,0,74,0,111,0,0,0,0,0,158,0,114,0,135,0,98,0,97,0,0,0,178,0,71,0,242,0,112,0,201,0,155,0,97,0,0,0,0,0,246,0,164,0,20,0,166,0,63,0,7,0,46,0,83,0,0,0,0,0,11,0,236,0,54,0,64,0,98,0,166,0,0,0,72,0,0,0,190,0,16,0,165,0,109,0,193,0,36,0,165,0,130,0,51,0,153,0,40,0,0,0,0,0,101,0,45,0,0,0,186,0,124,0,33,0,87,0,0,0,22,0,59,0,141,0,0,0,196,0,107,0,75,0,238,0,4,0,24,0,111,0,0,0,0,0,192,0,231,0,21,0,2,0,0,0,0,0,45,0,41,0,79,0,10,0,44,0,0,0,218,0,102,0,245,0,0,0,95,0,12,0,216,0,118,0,136,0,155,0,0,0,123,0,58,0,0,0,70,0,0,0,134,0,145,0,186,0,106,0,63,0,219,0,124,0,174,0,52,0,182,0,2,0,0,0,12,0,91,0,94,0,102,0,0,0,0,0,122,0,23,0,64,0,200,0,225,0,217,0,125,0,156,0,25,0,148,0,30,0,128,0,0,0,3,0,48,0,0,0,243,0,222,0,81,0,59,0,88,0,130,0,0,0,0,0,213,0,0,0,58,0,241,0,74,0,23,0,34,0,104,0,0,0,134,0,0,0,0,0,122,0,123,0,116,0,116,0,125,0,41,0,255,0,0,0,0,0,0,0,143,0,89,0,0,0,205,0,117,0,62,0,224,0,24,0,197,0,70,0,34,0,204,0,0,0,126,0,8,0,229,0,119,0,223,0,0,0,254,0,0,0,13,0,25,0,102,0,115,0,156,0,0,0,89,0,198,0,66,0,246,0,204,0,253,0,246,0,131,0,0,0,56,0,229,0,39,0,205,0,152,0,254,0,116,0,140,0,72,0,148,0,45,0,30,0,236,0,74,0,38,0,0,0,0,0,226,0,211,0,177,0,0,0,31,0,132,0,150,0,167,0,37,0,113,0,182,0,187,0,23,0,54,0,99,0,0,0,67,0,120,0,59,0,67,0,214,0,0,0,159,0,0,0,97,0,125,0,244,0,0,0,0,0,0,0,6,0,0,0,196,0,112,0,252,0,223,0,0,0,78,0,50,0,18,0,112,0,169,0,72,0,0,0,152,0,122,0,153,0,98,0);
signal scenario_full  : scenario_type := (71,31,174,31,131,31,131,30,4,31,4,30,231,31,242,31,211,31,124,31,35,31,240,31,87,31,87,30,220,31,213,31,49,31,163,31,72,31,72,30,126,31,130,31,66,31,66,30,182,31,114,31,155,31,155,30,1,31,1,30,52,31,52,30,52,29,52,28,127,31,127,30,127,29,163,31,163,30,64,31,92,31,123,31,19,31,77,31,186,31,80,31,201,31,182,31,182,30,137,31,248,31,248,30,197,31,159,31,188,31,32,31,107,31,107,30,55,31,168,31,168,30,106,31,195,31,72,31,25,31,15,31,215,31,201,31,202,31,202,30,23,31,23,30,140,31,217,31,61,31,200,31,171,31,171,30,87,31,220,31,118,31,187,31,20,31,20,30,219,31,79,31,48,31,48,30,236,31,24,31,140,31,56,31,136,31,182,31,148,31,142,31,212,31,251,31,192,31,150,31,229,31,71,31,254,31,21,31,109,31,213,31,112,31,159,31,61,31,61,30,131,31,171,31,171,30,171,29,39,31,39,30,39,29,39,28,208,31,43,31,43,30,5,31,5,30,204,31,123,31,88,31,88,30,152,31,106,31,234,31,62,31,195,31,241,31,202,31,175,31,175,30,135,31,2,31,218,31,218,30,242,31,243,31,10,31,220,31,21,31,3,31,99,31,16,31,16,30,238,31,79,31,50,31,58,31,194,31,26,31,110,31,130,31,196,31,126,31,126,30,80,31,13,31,13,30,13,29,168,31,44,31,179,31,88,31,88,30,187,31,187,30,77,31,235,31,64,31,87,31,211,31,99,31,83,31,223,31,230,31,230,30,230,29,165,31,146,31,216,31,168,31,168,30,168,29,203,31,203,30,203,29,127,31,166,31,190,31,198,31,28,31,150,31,248,31,156,31,231,31,90,31,40,31,40,30,158,31,189,31,113,31,53,31,125,31,253,31,32,31,85,31,90,31,185,31,220,31,142,31,203,31,45,31,161,31,6,31,68,31,75,31,185,31,10,31,74,31,197,31,194,31,217,31,230,31,163,31,34,31,50,31,50,30,190,31,9,31,51,31,17,31,65,31,89,31,154,31,74,31,111,31,111,30,111,29,158,31,114,31,135,31,98,31,97,31,97,30,178,31,71,31,242,31,112,31,201,31,155,31,97,31,97,30,97,29,246,31,164,31,20,31,166,31,63,31,7,31,46,31,83,31,83,30,83,29,11,31,236,31,54,31,64,31,98,31,166,31,166,30,72,31,72,30,190,31,16,31,165,31,109,31,193,31,36,31,165,31,130,31,51,31,153,31,40,31,40,30,40,29,101,31,45,31,45,30,186,31,124,31,33,31,87,31,87,30,22,31,59,31,141,31,141,30,196,31,107,31,75,31,238,31,4,31,24,31,111,31,111,30,111,29,192,31,231,31,21,31,2,31,2,30,2,29,45,31,41,31,79,31,10,31,44,31,44,30,218,31,102,31,245,31,245,30,95,31,12,31,216,31,118,31,136,31,155,31,155,30,123,31,58,31,58,30,70,31,70,30,134,31,145,31,186,31,106,31,63,31,219,31,124,31,174,31,52,31,182,31,2,31,2,30,12,31,91,31,94,31,102,31,102,30,102,29,122,31,23,31,64,31,200,31,225,31,217,31,125,31,156,31,25,31,148,31,30,31,128,31,128,30,3,31,48,31,48,30,243,31,222,31,81,31,59,31,88,31,130,31,130,30,130,29,213,31,213,30,58,31,241,31,74,31,23,31,34,31,104,31,104,30,134,31,134,30,134,29,122,31,123,31,116,31,116,31,125,31,41,31,255,31,255,30,255,29,255,28,143,31,89,31,89,30,205,31,117,31,62,31,224,31,24,31,197,31,70,31,34,31,204,31,204,30,126,31,8,31,229,31,119,31,223,31,223,30,254,31,254,30,13,31,25,31,102,31,115,31,156,31,156,30,89,31,198,31,66,31,246,31,204,31,253,31,246,31,131,31,131,30,56,31,229,31,39,31,205,31,152,31,254,31,116,31,140,31,72,31,148,31,45,31,30,31,236,31,74,31,38,31,38,30,38,29,226,31,211,31,177,31,177,30,31,31,132,31,150,31,167,31,37,31,113,31,182,31,187,31,23,31,54,31,99,31,99,30,67,31,120,31,59,31,67,31,214,31,214,30,159,31,159,30,97,31,125,31,244,31,244,30,244,29,244,28,6,31,6,30,196,31,112,31,252,31,223,31,223,30,78,31,50,31,18,31,112,31,169,31,72,31,72,30,152,31,122,31,153,31,98,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
