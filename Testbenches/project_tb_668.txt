-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 462;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (208,0,255,0,202,0,14,0,66,0,182,0,252,0,164,0,119,0,54,0,16,0,68,0,45,0,203,0,0,0,70,0,114,0,69,0,233,0,61,0,0,0,103,0,206,0,26,0,225,0,186,0,255,0,187,0,148,0,41,0,226,0,7,0,137,0,54,0,218,0,7,0,133,0,0,0,149,0,58,0,3,0,117,0,162,0,217,0,53,0,0,0,0,0,8,0,126,0,110,0,231,0,51,0,74,0,22,0,58,0,156,0,125,0,248,0,0,0,39,0,118,0,214,0,210,0,0,0,190,0,61,0,142,0,0,0,0,0,8,0,0,0,22,0,0,0,0,0,0,0,0,0,113,0,98,0,196,0,216,0,192,0,0,0,190,0,184,0,18,0,174,0,214,0,206,0,0,0,105,0,247,0,223,0,107,0,0,0,80,0,58,0,71,0,140,0,45,0,225,0,195,0,4,0,101,0,143,0,86,0,167,0,227,0,34,0,0,0,0,0,248,0,64,0,213,0,30,0,43,0,29,0,139,0,0,0,198,0,41,0,45,0,167,0,137,0,149,0,140,0,120,0,211,0,0,0,0,0,0,0,114,0,158,0,248,0,9,0,0,0,207,0,175,0,0,0,96,0,124,0,144,0,255,0,147,0,112,0,0,0,105,0,187,0,118,0,85,0,0,0,250,0,47,0,206,0,0,0,0,0,227,0,0,0,50,0,0,0,32,0,118,0,133,0,0,0,235,0,0,0,132,0,36,0,15,0,88,0,7,0,195,0,70,0,188,0,226,0,237,0,135,0,42,0,0,0,126,0,245,0,20,0,175,0,188,0,53,0,105,0,38,0,121,0,0,0,0,0,0,0,165,0,178,0,96,0,0,0,57,0,210,0,248,0,8,0,236,0,0,0,194,0,241,0,49,0,68,0,0,0,163,0,140,0,173,0,39,0,92,0,189,0,245,0,192,0,42,0,175,0,99,0,125,0,206,0,2,0,187,0,0,0,0,0,170,0,222,0,52,0,122,0,43,0,0,0,168,0,0,0,220,0,181,0,188,0,182,0,0,0,151,0,138,0,86,0,129,0,82,0,45,0,219,0,221,0,185,0,16,0,232,0,45,0,147,0,86,0,65,0,0,0,14,0,249,0,134,0,10,0,149,0,16,0,21,0,104,0,131,0,48,0,135,0,78,0,187,0,248,0,142,0,52,0,253,0,149,0,0,0,0,0,12,0,133,0,0,0,249,0,58,0,193,0,0,0,201,0,7,0,0,0,230,0,211,0,131,0,0,0,80,0,195,0,26,0,163,0,214,0,0,0,255,0,0,0,255,0,9,0,59,0,91,0,207,0,0,0,119,0,236,0,2,0,42,0,52,0,236,0,109,0,60,0,63,0,198,0,185,0,0,0,149,0,187,0,249,0,0,0,65,0,105,0,172,0,58,0,25,0,57,0,45,0,0,0,150,0,48,0,189,0,121,0,0,0,11,0,239,0,131,0,178,0,139,0,174,0,180,0,118,0,208,0,30,0,0,0,206,0,210,0,199,0,0,0,0,0,167,0,11,0,131,0,10,0,169,0,66,0,160,0,73,0,0,0,141,0,218,0,12,0,255,0,2,0,35,0,207,0,11,0,81,0,14,0,142,0,25,0,74,0,63,0,93,0,231,0,158,0,0,0,247,0,239,0,241,0,1,0,169,0,179,0,190,0,38,0,62,0,0,0,0,0,177,0,24,0,131,0,0,0,188,0,12,0,0,0,209,0,125,0,4,0,62,0,71,0,237,0,0,0,46,0,164,0,234,0,228,0,103,0,96,0,69,0,56,0,135,0,198,0,110,0,207,0,151,0,28,0,82,0,36,0,171,0,6,0,33,0,253,0,54,0,55,0,9,0,183,0,0,0,177,0,135,0,138,0,0,0,6,0,0,0,10,0,74,0,21,0,121,0,108,0,71,0,253,0,80,0,121,0,12,0,85,0,31,0,78,0,0,0,221,0,111,0,0,0,58,0,16,0,188,0,48,0,91,0,208,0,0,0,121,0,28,0,133,0,181,0,89,0,159,0,191,0,105,0,0,0,72,0,13,0);
signal scenario_full  : scenario_type := (208,31,255,31,202,31,14,31,66,31,182,31,252,31,164,31,119,31,54,31,16,31,68,31,45,31,203,31,203,30,70,31,114,31,69,31,233,31,61,31,61,30,103,31,206,31,26,31,225,31,186,31,255,31,187,31,148,31,41,31,226,31,7,31,137,31,54,31,218,31,7,31,133,31,133,30,149,31,58,31,3,31,117,31,162,31,217,31,53,31,53,30,53,29,8,31,126,31,110,31,231,31,51,31,74,31,22,31,58,31,156,31,125,31,248,31,248,30,39,31,118,31,214,31,210,31,210,30,190,31,61,31,142,31,142,30,142,29,8,31,8,30,22,31,22,30,22,29,22,28,22,27,113,31,98,31,196,31,216,31,192,31,192,30,190,31,184,31,18,31,174,31,214,31,206,31,206,30,105,31,247,31,223,31,107,31,107,30,80,31,58,31,71,31,140,31,45,31,225,31,195,31,4,31,101,31,143,31,86,31,167,31,227,31,34,31,34,30,34,29,248,31,64,31,213,31,30,31,43,31,29,31,139,31,139,30,198,31,41,31,45,31,167,31,137,31,149,31,140,31,120,31,211,31,211,30,211,29,211,28,114,31,158,31,248,31,9,31,9,30,207,31,175,31,175,30,96,31,124,31,144,31,255,31,147,31,112,31,112,30,105,31,187,31,118,31,85,31,85,30,250,31,47,31,206,31,206,30,206,29,227,31,227,30,50,31,50,30,32,31,118,31,133,31,133,30,235,31,235,30,132,31,36,31,15,31,88,31,7,31,195,31,70,31,188,31,226,31,237,31,135,31,42,31,42,30,126,31,245,31,20,31,175,31,188,31,53,31,105,31,38,31,121,31,121,30,121,29,121,28,165,31,178,31,96,31,96,30,57,31,210,31,248,31,8,31,236,31,236,30,194,31,241,31,49,31,68,31,68,30,163,31,140,31,173,31,39,31,92,31,189,31,245,31,192,31,42,31,175,31,99,31,125,31,206,31,2,31,187,31,187,30,187,29,170,31,222,31,52,31,122,31,43,31,43,30,168,31,168,30,220,31,181,31,188,31,182,31,182,30,151,31,138,31,86,31,129,31,82,31,45,31,219,31,221,31,185,31,16,31,232,31,45,31,147,31,86,31,65,31,65,30,14,31,249,31,134,31,10,31,149,31,16,31,21,31,104,31,131,31,48,31,135,31,78,31,187,31,248,31,142,31,52,31,253,31,149,31,149,30,149,29,12,31,133,31,133,30,249,31,58,31,193,31,193,30,201,31,7,31,7,30,230,31,211,31,131,31,131,30,80,31,195,31,26,31,163,31,214,31,214,30,255,31,255,30,255,31,9,31,59,31,91,31,207,31,207,30,119,31,236,31,2,31,42,31,52,31,236,31,109,31,60,31,63,31,198,31,185,31,185,30,149,31,187,31,249,31,249,30,65,31,105,31,172,31,58,31,25,31,57,31,45,31,45,30,150,31,48,31,189,31,121,31,121,30,11,31,239,31,131,31,178,31,139,31,174,31,180,31,118,31,208,31,30,31,30,30,206,31,210,31,199,31,199,30,199,29,167,31,11,31,131,31,10,31,169,31,66,31,160,31,73,31,73,30,141,31,218,31,12,31,255,31,2,31,35,31,207,31,11,31,81,31,14,31,142,31,25,31,74,31,63,31,93,31,231,31,158,31,158,30,247,31,239,31,241,31,1,31,169,31,179,31,190,31,38,31,62,31,62,30,62,29,177,31,24,31,131,31,131,30,188,31,12,31,12,30,209,31,125,31,4,31,62,31,71,31,237,31,237,30,46,31,164,31,234,31,228,31,103,31,96,31,69,31,56,31,135,31,198,31,110,31,207,31,151,31,28,31,82,31,36,31,171,31,6,31,33,31,253,31,54,31,55,31,9,31,183,31,183,30,177,31,135,31,138,31,138,30,6,31,6,30,10,31,74,31,21,31,121,31,108,31,71,31,253,31,80,31,121,31,12,31,85,31,31,31,78,31,78,30,221,31,111,31,111,30,58,31,16,31,188,31,48,31,91,31,208,31,208,30,121,31,28,31,133,31,181,31,89,31,159,31,191,31,105,31,105,30,72,31,13,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
