-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 797;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,0,0,0,0,216,0,188,0,12,0,252,0,104,0,174,0,162,0,78,0,0,0,234,0,236,0,34,0,0,0,110,0,80,0,0,0,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,0,250,0,0,0,251,0,205,0,94,0,0,0,253,0,163,0,252,0,5,0,230,0,163,0,0,0,103,0,176,0,5,0,228,0,73,0,36,0,69,0,155,0,0,0,0,0,99,0,29,0,0,0,204,0,232,0,97,0,0,0,168,0,0,0,79,0,136,0,143,0,0,0,0,0,0,0,0,0,93,0,94,0,40,0,0,0,241,0,5,0,0,0,65,0,188,0,0,0,66,0,32,0,161,0,26,0,143,0,0,0,239,0,185,0,0,0,119,0,19,0,104,0,0,0,94,0,21,0,253,0,0,0,0,0,155,0,127,0,5,0,17,0,0,0,180,0,80,0,0,0,118,0,0,0,199,0,0,0,232,0,207,0,107,0,0,0,61,0,0,0,126,0,19,0,0,0,18,0,10,0,230,0,49,0,0,0,0,0,232,0,169,0,0,0,146,0,18,0,20,0,0,0,192,0,200,0,173,0,107,0,65,0,240,0,74,0,154,0,181,0,2,0,203,0,50,0,0,0,162,0,52,0,0,0,190,0,253,0,163,0,0,0,158,0,164,0,30,0,55,0,219,0,90,0,137,0,101,0,15,0,0,0,0,0,123,0,93,0,162,0,193,0,59,0,30,0,249,0,140,0,185,0,176,0,250,0,92,0,6,0,95,0,142,0,165,0,138,0,201,0,223,0,0,0,5,0,0,0,25,0,117,0,0,0,71,0,14,0,77,0,166,0,111,0,49,0,248,0,199,0,224,0,72,0,90,0,108,0,197,0,99,0,141,0,0,0,174,0,228,0,228,0,0,0,247,0,164,0,0,0,186,0,195,0,196,0,10,0,154,0,237,0,0,0,115,0,98,0,151,0,118,0,17,0,216,0,147,0,82,0,81,0,89,0,83,0,222,0,187,0,0,0,46,0,0,0,168,0,128,0,185,0,182,0,231,0,92,0,142,0,120,0,36,0,0,0,120,0,175,0,6,0,239,0,155,0,219,0,110,0,166,0,224,0,246,0,40,0,91,0,60,0,94,0,29,0,14,0,0,0,140,0,214,0,219,0,149,0,247,0,241,0,177,0,239,0,145,0,41,0,222,0,0,0,112,0,81,0,9,0,33,0,29,0,119,0,0,0,217,0,56,0,119,0,176,0,248,0,72,0,172,0,140,0,231,0,63,0,41,0,126,0,194,0,220,0,0,0,108,0,0,0,179,0,127,0,147,0,0,0,44,0,92,0,104,0,243,0,185,0,14,0,121,0,87,0,0,0,248,0,187,0,188,0,214,0,127,0,211,0,0,0,0,0,191,0,41,0,210,0,0,0,223,0,166,0,170,0,0,0,76,0,170,0,216,0,240,0,0,0,113,0,19,0,100,0,132,0,13,0,0,0,0,0,0,0,126,0,169,0,146,0,60,0,199,0,0,0,24,0,0,0,162,0,0,0,75,0,236,0,0,0,182,0,203,0,241,0,60,0,160,0,0,0,211,0,0,0,234,0,93,0,17,0,0,0,249,0,25,0,174,0,0,0,30,0,254,0,139,0,0,0,189,0,188,0,56,0,0,0,34,0,237,0,0,0,101,0,230,0,53,0,0,0,110,0,0,0,215,0,103,0,0,0,242,0,134,0,124,0,206,0,111,0,202,0,172,0,12,0,50,0,115,0,0,0,101,0,147,0,0,0,190,0,25,0,0,0,0,0,27,0,109,0,255,0,133,0,187,0,64,0,36,0,14,0,35,0,0,0,0,0,152,0,105,0,190,0,0,0,101,0,199,0,0,0,105,0,214,0,132,0,61,0,36,0,236,0,50,0,189,0,225,0,22,0,202,0,233,0,223,0,240,0,6,0,41,0,91,0,72,0,96,0,81,0,0,0,13,0,221,0,203,0,254,0,152,0,246,0,236,0,47,0,214,0,190,0,242,0,0,0,0,0,115,0,249,0,87,0,0,0,241,0,60,0,164,0,82,0,2,0,47,0,145,0,103,0,0,0,131,0,140,0,23,0,79,0,146,0,201,0,210,0,37,0,217,0,0,0,128,0,177,0,0,0,223,0,244,0,204,0,0,0,246,0,131,0,197,0,254,0,224,0,247,0,185,0,0,0,230,0,250,0,209,0,0,0,193,0,178,0,215,0,217,0,100,0,45,0,192,0,141,0,139,0,163,0,150,0,18,0,0,0,96,0,111,0,28,0,209,0,14,0,89,0,29,0,231,0,0,0,160,0,12,0,206,0,0,0,115,0,0,0,95,0,146,0,145,0,49,0,34,0,96,0,112,0,7,0,103,0,158,0,0,0,122,0,47,0,0,0,101,0,253,0,0,0,0,0,20,0,222,0,13,0,183,0,0,0,136,0,91,0,190,0,0,0,0,0,120,0,182,0,124,0,110,0,223,0,182,0,162,0,161,0,44,0,0,0,252,0,20,0,120,0,229,0,0,0,154,0,156,0,0,0,215,0,30,0,48,0,83,0,76,0,0,0,26,0,135,0,128,0,125,0,0,0,189,0,96,0,2,0,144,0,224,0,46,0,223,0,33,0,0,0,92,0,32,0,82,0,77,0,37,0,221,0,19,0,200,0,104,0,52,0,0,0,248,0,0,0,0,0,155,0,155,0,42,0,244,0,0,0,108,0,0,0,129,0,219,0,162,0,29,0,0,0,29,0,103,0,83,0,0,0,76,0,202,0,0,0,22,0,44,0,205,0,245,0,9,0,101,0,0,0,138,0,0,0,62,0,0,0,0,0,53,0,178,0,198,0,195,0,172,0,210,0,112,0,150,0,110,0,66,0,0,0,40,0,188,0,0,0,0,0,75,0,161,0,74,0,154,0,74,0,246,0,103,0,0,0,195,0,202,0,24,0,209,0,167,0,212,0,13,0,103,0,87,0,0,0,0,0,0,0,37,0,191,0,0,0,253,0,0,0,43,0,19,0,179,0,218,0,70,0,87,0,28,0,44,0,172,0,98,0,0,0,100,0,172,0,3,0,29,0,23,0,109,0,2,0,248,0,64,0,0,0,119,0,221,0,0,0,125,0,154,0,108,0,61,0,233,0,229,0,14,0,118,0,183,0,66,0,58,0,69,0,131,0,245,0,124,0,166,0,61,0,179,0,84,0,74,0,0,0,220,0,0,0,0,0,145,0,183,0,198,0,155,0,121,0,65,0,134,0,63,0,95,0,0,0,62,0,117,0,16,0,197,0,65,0,139,0,246,0,241,0,61,0,70,0,150,0,0,0,135,0,144,0,147,0,16,0,137,0,44,0,170,0,149,0,81,0,218,0,0,0,49,0,173,0,252,0,227,0,207,0,0,0,180,0,0,0,247,0,6,0,0,0,0,0,0,0,117,0,93,0,193,0,7,0,107,0,18,0,138,0,33,0,199,0,46,0,73,0,147,0,145,0,114,0,74,0,132,0,222,0,216,0,0,0,64,0,0,0,57,0,126,0,198,0,135,0,94,0,150,0);
signal scenario_full  : scenario_type := (0,0,0,0,0,0,216,31,188,31,12,31,252,31,104,31,174,31,162,31,78,31,78,30,234,31,236,31,34,31,34,30,110,31,80,31,80,30,144,31,144,30,144,29,144,28,144,27,144,26,144,25,144,24,73,31,250,31,250,30,251,31,205,31,94,31,94,30,253,31,163,31,252,31,5,31,230,31,163,31,163,30,103,31,176,31,5,31,228,31,73,31,36,31,69,31,155,31,155,30,155,29,99,31,29,31,29,30,204,31,232,31,97,31,97,30,168,31,168,30,79,31,136,31,143,31,143,30,143,29,143,28,143,27,93,31,94,31,40,31,40,30,241,31,5,31,5,30,65,31,188,31,188,30,66,31,32,31,161,31,26,31,143,31,143,30,239,31,185,31,185,30,119,31,19,31,104,31,104,30,94,31,21,31,253,31,253,30,253,29,155,31,127,31,5,31,17,31,17,30,180,31,80,31,80,30,118,31,118,30,199,31,199,30,232,31,207,31,107,31,107,30,61,31,61,30,126,31,19,31,19,30,18,31,10,31,230,31,49,31,49,30,49,29,232,31,169,31,169,30,146,31,18,31,20,31,20,30,192,31,200,31,173,31,107,31,65,31,240,31,74,31,154,31,181,31,2,31,203,31,50,31,50,30,162,31,52,31,52,30,190,31,253,31,163,31,163,30,158,31,164,31,30,31,55,31,219,31,90,31,137,31,101,31,15,31,15,30,15,29,123,31,93,31,162,31,193,31,59,31,30,31,249,31,140,31,185,31,176,31,250,31,92,31,6,31,95,31,142,31,165,31,138,31,201,31,223,31,223,30,5,31,5,30,25,31,117,31,117,30,71,31,14,31,77,31,166,31,111,31,49,31,248,31,199,31,224,31,72,31,90,31,108,31,197,31,99,31,141,31,141,30,174,31,228,31,228,31,228,30,247,31,164,31,164,30,186,31,195,31,196,31,10,31,154,31,237,31,237,30,115,31,98,31,151,31,118,31,17,31,216,31,147,31,82,31,81,31,89,31,83,31,222,31,187,31,187,30,46,31,46,30,168,31,128,31,185,31,182,31,231,31,92,31,142,31,120,31,36,31,36,30,120,31,175,31,6,31,239,31,155,31,219,31,110,31,166,31,224,31,246,31,40,31,91,31,60,31,94,31,29,31,14,31,14,30,140,31,214,31,219,31,149,31,247,31,241,31,177,31,239,31,145,31,41,31,222,31,222,30,112,31,81,31,9,31,33,31,29,31,119,31,119,30,217,31,56,31,119,31,176,31,248,31,72,31,172,31,140,31,231,31,63,31,41,31,126,31,194,31,220,31,220,30,108,31,108,30,179,31,127,31,147,31,147,30,44,31,92,31,104,31,243,31,185,31,14,31,121,31,87,31,87,30,248,31,187,31,188,31,214,31,127,31,211,31,211,30,211,29,191,31,41,31,210,31,210,30,223,31,166,31,170,31,170,30,76,31,170,31,216,31,240,31,240,30,113,31,19,31,100,31,132,31,13,31,13,30,13,29,13,28,126,31,169,31,146,31,60,31,199,31,199,30,24,31,24,30,162,31,162,30,75,31,236,31,236,30,182,31,203,31,241,31,60,31,160,31,160,30,211,31,211,30,234,31,93,31,17,31,17,30,249,31,25,31,174,31,174,30,30,31,254,31,139,31,139,30,189,31,188,31,56,31,56,30,34,31,237,31,237,30,101,31,230,31,53,31,53,30,110,31,110,30,215,31,103,31,103,30,242,31,134,31,124,31,206,31,111,31,202,31,172,31,12,31,50,31,115,31,115,30,101,31,147,31,147,30,190,31,25,31,25,30,25,29,27,31,109,31,255,31,133,31,187,31,64,31,36,31,14,31,35,31,35,30,35,29,152,31,105,31,190,31,190,30,101,31,199,31,199,30,105,31,214,31,132,31,61,31,36,31,236,31,50,31,189,31,225,31,22,31,202,31,233,31,223,31,240,31,6,31,41,31,91,31,72,31,96,31,81,31,81,30,13,31,221,31,203,31,254,31,152,31,246,31,236,31,47,31,214,31,190,31,242,31,242,30,242,29,115,31,249,31,87,31,87,30,241,31,60,31,164,31,82,31,2,31,47,31,145,31,103,31,103,30,131,31,140,31,23,31,79,31,146,31,201,31,210,31,37,31,217,31,217,30,128,31,177,31,177,30,223,31,244,31,204,31,204,30,246,31,131,31,197,31,254,31,224,31,247,31,185,31,185,30,230,31,250,31,209,31,209,30,193,31,178,31,215,31,217,31,100,31,45,31,192,31,141,31,139,31,163,31,150,31,18,31,18,30,96,31,111,31,28,31,209,31,14,31,89,31,29,31,231,31,231,30,160,31,12,31,206,31,206,30,115,31,115,30,95,31,146,31,145,31,49,31,34,31,96,31,112,31,7,31,103,31,158,31,158,30,122,31,47,31,47,30,101,31,253,31,253,30,253,29,20,31,222,31,13,31,183,31,183,30,136,31,91,31,190,31,190,30,190,29,120,31,182,31,124,31,110,31,223,31,182,31,162,31,161,31,44,31,44,30,252,31,20,31,120,31,229,31,229,30,154,31,156,31,156,30,215,31,30,31,48,31,83,31,76,31,76,30,26,31,135,31,128,31,125,31,125,30,189,31,96,31,2,31,144,31,224,31,46,31,223,31,33,31,33,30,92,31,32,31,82,31,77,31,37,31,221,31,19,31,200,31,104,31,52,31,52,30,248,31,248,30,248,29,155,31,155,31,42,31,244,31,244,30,108,31,108,30,129,31,219,31,162,31,29,31,29,30,29,31,103,31,83,31,83,30,76,31,202,31,202,30,22,31,44,31,205,31,245,31,9,31,101,31,101,30,138,31,138,30,62,31,62,30,62,29,53,31,178,31,198,31,195,31,172,31,210,31,112,31,150,31,110,31,66,31,66,30,40,31,188,31,188,30,188,29,75,31,161,31,74,31,154,31,74,31,246,31,103,31,103,30,195,31,202,31,24,31,209,31,167,31,212,31,13,31,103,31,87,31,87,30,87,29,87,28,37,31,191,31,191,30,253,31,253,30,43,31,19,31,179,31,218,31,70,31,87,31,28,31,44,31,172,31,98,31,98,30,100,31,172,31,3,31,29,31,23,31,109,31,2,31,248,31,64,31,64,30,119,31,221,31,221,30,125,31,154,31,108,31,61,31,233,31,229,31,14,31,118,31,183,31,66,31,58,31,69,31,131,31,245,31,124,31,166,31,61,31,179,31,84,31,74,31,74,30,220,31,220,30,220,29,145,31,183,31,198,31,155,31,121,31,65,31,134,31,63,31,95,31,95,30,62,31,117,31,16,31,197,31,65,31,139,31,246,31,241,31,61,31,70,31,150,31,150,30,135,31,144,31,147,31,16,31,137,31,44,31,170,31,149,31,81,31,218,31,218,30,49,31,173,31,252,31,227,31,207,31,207,30,180,31,180,30,247,31,6,31,6,30,6,29,6,28,117,31,93,31,193,31,7,31,107,31,18,31,138,31,33,31,199,31,46,31,73,31,147,31,145,31,114,31,74,31,132,31,222,31,216,31,216,30,64,31,64,30,57,31,126,31,198,31,135,31,94,31,150,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
