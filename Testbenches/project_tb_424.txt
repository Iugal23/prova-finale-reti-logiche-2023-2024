-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 832;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,149,0,104,0,143,0,120,0,131,0,105,0,20,0,78,0,166,0,17,0,7,0,238,0,105,0,189,0,0,0,134,0,250,0,25,0,98,0,163,0,1,0,155,0,0,0,149,0,0,0,223,0,0,0,250,0,123,0,0,0,157,0,65,0,0,0,0,0,249,0,114,0,0,0,163,0,202,0,0,0,127,0,107,0,159,0,176,0,61,0,71,0,159,0,167,0,169,0,150,0,0,0,29,0,0,0,75,0,0,0,109,0,0,0,251,0,60,0,20,0,43,0,36,0,179,0,214,0,65,0,0,0,0,0,167,0,0,0,88,0,105,0,112,0,0,0,140,0,131,0,250,0,36,0,11,0,120,0,101,0,0,0,134,0,168,0,50,0,23,0,14,0,182,0,0,0,162,0,10,0,62,0,69,0,73,0,55,0,123,0,0,0,234,0,2,0,0,0,253,0,13,0,0,0,41,0,169,0,0,0,232,0,151,0,128,0,195,0,0,0,18,0,0,0,48,0,152,0,212,0,238,0,245,0,0,0,101,0,51,0,51,0,189,0,81,0,181,0,227,0,0,0,105,0,58,0,63,0,91,0,0,0,154,0,82,0,0,0,4,0,0,0,182,0,110,0,0,0,149,0,0,0,0,0,103,0,221,0,94,0,19,0,5,0,167,0,5,0,202,0,0,0,211,0,67,0,36,0,63,0,93,0,154,0,3,0,0,0,196,0,193,0,196,0,240,0,168,0,178,0,0,0,0,0,58,0,235,0,180,0,158,0,35,0,0,0,0,0,34,0,183,0,56,0,0,0,52,0,135,0,59,0,116,0,79,0,116,0,38,0,0,0,73,0,67,0,4,0,188,0,0,0,135,0,158,0,84,0,14,0,143,0,0,0,80,0,213,0,166,0,19,0,198,0,7,0,218,0,107,0,207,0,184,0,0,0,0,0,56,0,36,0,109,0,25,0,245,0,80,0,91,0,0,0,231,0,112,0,243,0,0,0,0,0,40,0,40,0,4,0,0,0,0,0,57,0,68,0,11,0,92,0,167,0,72,0,151,0,244,0,0,0,75,0,107,0,219,0,233,0,136,0,0,0,64,0,23,0,96,0,128,0,219,0,134,0,20,0,220,0,133,0,28,0,224,0,167,0,210,0,0,0,68,0,164,0,0,0,174,0,152,0,67,0,141,0,43,0,0,0,0,0,129,0,250,0,152,0,45,0,186,0,128,0,0,0,93,0,149,0,232,0,15,0,144,0,101,0,74,0,0,0,30,0,0,0,121,0,86,0,25,0,101,0,156,0,192,0,220,0,122,0,0,0,181,0,25,0,0,0,87,0,141,0,166,0,250,0,137,0,78,0,171,0,209,0,233,0,126,0,170,0,1,0,35,0,156,0,107,0,95,0,234,0,60,0,0,0,248,0,4,0,89,0,0,0,190,0,208,0,1,0,81,0,0,0,0,0,0,0,187,0,116,0,212,0,102,0,156,0,187,0,119,0,164,0,58,0,0,0,33,0,62,0,58,0,122,0,13,0,203,0,162,0,53,0,200,0,72,0,136,0,0,0,0,0,12,0,174,0,115,0,141,0,32,0,171,0,150,0,60,0,114,0,0,0,153,0,0,0,33,0,207,0,47,0,30,0,154,0,106,0,96,0,0,0,204,0,94,0,232,0,148,0,79,0,250,0,238,0,44,0,159,0,0,0,71,0,19,0,130,0,91,0,0,0,250,0,218,0,241,0,37,0,246,0,181,0,120,0,0,0,176,0,8,0,140,0,110,0,187,0,175,0,161,0,19,0,0,0,143,0,72,0,245,0,0,0,57,0,0,0,63,0,245,0,84,0,251,0,204,0,245,0,103,0,179,0,155,0,23,0,0,0,150,0,90,0,0,0,144,0,0,0,0,0,96,0,0,0,211,0,71,0,229,0,26,0,180,0,13,0,203,0,19,0,0,0,0,0,0,0,120,0,101,0,195,0,85,0,43,0,153,0,221,0,88,0,73,0,31,0,105,0,140,0,56,0,40,0,165,0,162,0,174,0,84,0,154,0,32,0,150,0,99,0,28,0,5,0,195,0,221,0,193,0,226,0,245,0,0,0,214,0,173,0,108,0,248,0,99,0,94,0,0,0,6,0,61,0,0,0,64,0,180,0,232,0,0,0,97,0,0,0,0,0,0,0,123,0,236,0,55,0,105,0,37,0,0,0,147,0,219,0,27,0,28,0,243,0,134,0,189,0,237,0,166,0,106,0,206,0,91,0,230,0,95,0,143,0,8,0,2,0,204,0,250,0,82,0,44,0,184,0,0,0,0,0,202,0,225,0,209,0,22,0,0,0,0,0,132,0,80,0,87,0,187,0,18,0,141,0,0,0,0,0,160,0,39,0,174,0,108,0,235,0,248,0,127,0,0,0,205,0,169,0,231,0,130,0,47,0,0,0,67,0,251,0,204,0,191,0,37,0,0,0,201,0,0,0,168,0,50,0,150,0,211,0,49,0,19,0,0,0,0,0,215,0,94,0,108,0,181,0,24,0,83,0,0,0,9,0,32,0,107,0,174,0,56,0,156,0,135,0,0,0,167,0,241,0,68,0,28,0,107,0,86,0,217,0,226,0,82,0,113,0,142,0,191,0,113,0,74,0,99,0,126,0,156,0,20,0,223,0,229,0,22,0,0,0,171,0,0,0,1,0,98,0,35,0,14,0,63,0,130,0,18,0,165,0,26,0,0,0,81,0,196,0,165,0,238,0,132,0,59,0,232,0,167,0,215,0,36,0,58,0,2,0,167,0,0,0,0,0,96,0,15,0,10,0,110,0,118,0,211,0,182,0,225,0,22,0,193,0,0,0,161,0,35,0,179,0,8,0,165,0,0,0,45,0,160,0,100,0,0,0,63,0,54,0,125,0,116,0,0,0,255,0,250,0,25,0,248,0,20,0,32,0,126,0,0,0,0,0,255,0,0,0,223,0,249,0,33,0,180,0,56,0,247,0,0,0,111,0,194,0,237,0,170,0,137,0,0,0,117,0,15,0,29,0,139,0,46,0,221,0,33,0,158,0,0,0,198,0,200,0,209,0,64,0,122,0,243,0,32,0,0,0,136,0,196,0,203,0,0,0,0,0,0,0,204,0,15,0,120,0,31,0,28,0,13,0,154,0,91,0,0,0,240,0,116,0,234,0,255,0,0,0,180,0,7,0,147,0,207,0,49,0,26,0,165,0,235,0,180,0,249,0,232,0,178,0,0,0,64,0,52,0,173,0,201,0,21,0,223,0,226,0,195,0,118,0,143,0,156,0,0,0,0,0,102,0,0,0,19,0,0,0,238,0,172,0,87,0,14,0,41,0,178,0,0,0,0,0,168,0,200,0,252,0,0,0,0,0,17,0,185,0,85,0,29,0,134,0,207,0,0,0,0,0,118,0,0,0,124,0,223,0,38,0,0,0,34,0,91,0,228,0,0,0,49,0,153,0,116,0,241,0,0,0,79,0,241,0,66,0,80,0,94,0,249,0,163,0,147,0,0,0,163,0,49,0,235,0,0,0,95,0,1,0,172,0,10,0,5,0,46,0,154,0,171,0,0,0,109,0,247,0,154,0,61,0,76,0,83,0,0,0,34,0,254,0,52,0,157,0,14,0,101,0,96,0,166,0,97,0,24,0,214,0,100,0,43,0,84,0,102,0,9,0,0,0,210,0,18,0,0,0,89,0,85,0,218,0,167,0,246,0,195,0,0,0);
signal scenario_full  : scenario_type := (0,0,149,31,104,31,143,31,120,31,131,31,105,31,20,31,78,31,166,31,17,31,7,31,238,31,105,31,189,31,189,30,134,31,250,31,25,31,98,31,163,31,1,31,155,31,155,30,149,31,149,30,223,31,223,30,250,31,123,31,123,30,157,31,65,31,65,30,65,29,249,31,114,31,114,30,163,31,202,31,202,30,127,31,107,31,159,31,176,31,61,31,71,31,159,31,167,31,169,31,150,31,150,30,29,31,29,30,75,31,75,30,109,31,109,30,251,31,60,31,20,31,43,31,36,31,179,31,214,31,65,31,65,30,65,29,167,31,167,30,88,31,105,31,112,31,112,30,140,31,131,31,250,31,36,31,11,31,120,31,101,31,101,30,134,31,168,31,50,31,23,31,14,31,182,31,182,30,162,31,10,31,62,31,69,31,73,31,55,31,123,31,123,30,234,31,2,31,2,30,253,31,13,31,13,30,41,31,169,31,169,30,232,31,151,31,128,31,195,31,195,30,18,31,18,30,48,31,152,31,212,31,238,31,245,31,245,30,101,31,51,31,51,31,189,31,81,31,181,31,227,31,227,30,105,31,58,31,63,31,91,31,91,30,154,31,82,31,82,30,4,31,4,30,182,31,110,31,110,30,149,31,149,30,149,29,103,31,221,31,94,31,19,31,5,31,167,31,5,31,202,31,202,30,211,31,67,31,36,31,63,31,93,31,154,31,3,31,3,30,196,31,193,31,196,31,240,31,168,31,178,31,178,30,178,29,58,31,235,31,180,31,158,31,35,31,35,30,35,29,34,31,183,31,56,31,56,30,52,31,135,31,59,31,116,31,79,31,116,31,38,31,38,30,73,31,67,31,4,31,188,31,188,30,135,31,158,31,84,31,14,31,143,31,143,30,80,31,213,31,166,31,19,31,198,31,7,31,218,31,107,31,207,31,184,31,184,30,184,29,56,31,36,31,109,31,25,31,245,31,80,31,91,31,91,30,231,31,112,31,243,31,243,30,243,29,40,31,40,31,4,31,4,30,4,29,57,31,68,31,11,31,92,31,167,31,72,31,151,31,244,31,244,30,75,31,107,31,219,31,233,31,136,31,136,30,64,31,23,31,96,31,128,31,219,31,134,31,20,31,220,31,133,31,28,31,224,31,167,31,210,31,210,30,68,31,164,31,164,30,174,31,152,31,67,31,141,31,43,31,43,30,43,29,129,31,250,31,152,31,45,31,186,31,128,31,128,30,93,31,149,31,232,31,15,31,144,31,101,31,74,31,74,30,30,31,30,30,121,31,86,31,25,31,101,31,156,31,192,31,220,31,122,31,122,30,181,31,25,31,25,30,87,31,141,31,166,31,250,31,137,31,78,31,171,31,209,31,233,31,126,31,170,31,1,31,35,31,156,31,107,31,95,31,234,31,60,31,60,30,248,31,4,31,89,31,89,30,190,31,208,31,1,31,81,31,81,30,81,29,81,28,187,31,116,31,212,31,102,31,156,31,187,31,119,31,164,31,58,31,58,30,33,31,62,31,58,31,122,31,13,31,203,31,162,31,53,31,200,31,72,31,136,31,136,30,136,29,12,31,174,31,115,31,141,31,32,31,171,31,150,31,60,31,114,31,114,30,153,31,153,30,33,31,207,31,47,31,30,31,154,31,106,31,96,31,96,30,204,31,94,31,232,31,148,31,79,31,250,31,238,31,44,31,159,31,159,30,71,31,19,31,130,31,91,31,91,30,250,31,218,31,241,31,37,31,246,31,181,31,120,31,120,30,176,31,8,31,140,31,110,31,187,31,175,31,161,31,19,31,19,30,143,31,72,31,245,31,245,30,57,31,57,30,63,31,245,31,84,31,251,31,204,31,245,31,103,31,179,31,155,31,23,31,23,30,150,31,90,31,90,30,144,31,144,30,144,29,96,31,96,30,211,31,71,31,229,31,26,31,180,31,13,31,203,31,19,31,19,30,19,29,19,28,120,31,101,31,195,31,85,31,43,31,153,31,221,31,88,31,73,31,31,31,105,31,140,31,56,31,40,31,165,31,162,31,174,31,84,31,154,31,32,31,150,31,99,31,28,31,5,31,195,31,221,31,193,31,226,31,245,31,245,30,214,31,173,31,108,31,248,31,99,31,94,31,94,30,6,31,61,31,61,30,64,31,180,31,232,31,232,30,97,31,97,30,97,29,97,28,123,31,236,31,55,31,105,31,37,31,37,30,147,31,219,31,27,31,28,31,243,31,134,31,189,31,237,31,166,31,106,31,206,31,91,31,230,31,95,31,143,31,8,31,2,31,204,31,250,31,82,31,44,31,184,31,184,30,184,29,202,31,225,31,209,31,22,31,22,30,22,29,132,31,80,31,87,31,187,31,18,31,141,31,141,30,141,29,160,31,39,31,174,31,108,31,235,31,248,31,127,31,127,30,205,31,169,31,231,31,130,31,47,31,47,30,67,31,251,31,204,31,191,31,37,31,37,30,201,31,201,30,168,31,50,31,150,31,211,31,49,31,19,31,19,30,19,29,215,31,94,31,108,31,181,31,24,31,83,31,83,30,9,31,32,31,107,31,174,31,56,31,156,31,135,31,135,30,167,31,241,31,68,31,28,31,107,31,86,31,217,31,226,31,82,31,113,31,142,31,191,31,113,31,74,31,99,31,126,31,156,31,20,31,223,31,229,31,22,31,22,30,171,31,171,30,1,31,98,31,35,31,14,31,63,31,130,31,18,31,165,31,26,31,26,30,81,31,196,31,165,31,238,31,132,31,59,31,232,31,167,31,215,31,36,31,58,31,2,31,167,31,167,30,167,29,96,31,15,31,10,31,110,31,118,31,211,31,182,31,225,31,22,31,193,31,193,30,161,31,35,31,179,31,8,31,165,31,165,30,45,31,160,31,100,31,100,30,63,31,54,31,125,31,116,31,116,30,255,31,250,31,25,31,248,31,20,31,32,31,126,31,126,30,126,29,255,31,255,30,223,31,249,31,33,31,180,31,56,31,247,31,247,30,111,31,194,31,237,31,170,31,137,31,137,30,117,31,15,31,29,31,139,31,46,31,221,31,33,31,158,31,158,30,198,31,200,31,209,31,64,31,122,31,243,31,32,31,32,30,136,31,196,31,203,31,203,30,203,29,203,28,204,31,15,31,120,31,31,31,28,31,13,31,154,31,91,31,91,30,240,31,116,31,234,31,255,31,255,30,180,31,7,31,147,31,207,31,49,31,26,31,165,31,235,31,180,31,249,31,232,31,178,31,178,30,64,31,52,31,173,31,201,31,21,31,223,31,226,31,195,31,118,31,143,31,156,31,156,30,156,29,102,31,102,30,19,31,19,30,238,31,172,31,87,31,14,31,41,31,178,31,178,30,178,29,168,31,200,31,252,31,252,30,252,29,17,31,185,31,85,31,29,31,134,31,207,31,207,30,207,29,118,31,118,30,124,31,223,31,38,31,38,30,34,31,91,31,228,31,228,30,49,31,153,31,116,31,241,31,241,30,79,31,241,31,66,31,80,31,94,31,249,31,163,31,147,31,147,30,163,31,49,31,235,31,235,30,95,31,1,31,172,31,10,31,5,31,46,31,154,31,171,31,171,30,109,31,247,31,154,31,61,31,76,31,83,31,83,30,34,31,254,31,52,31,157,31,14,31,101,31,96,31,166,31,97,31,24,31,214,31,100,31,43,31,84,31,102,31,9,31,9,30,210,31,18,31,18,30,89,31,85,31,218,31,167,31,246,31,195,31,195,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
