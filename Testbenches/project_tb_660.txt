-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 798;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (175,0,137,0,192,0,204,0,181,0,251,0,0,0,96,0,0,0,191,0,102,0,0,0,8,0,0,0,157,0,186,0,0,0,47,0,181,0,241,0,60,0,45,0,108,0,228,0,0,0,93,0,224,0,0,0,64,0,92,0,0,0,1,0,51,0,203,0,222,0,13,0,253,0,234,0,125,0,218,0,219,0,45,0,217,0,33,0,58,0,102,0,36,0,0,0,172,0,224,0,20,0,177,0,159,0,13,0,67,0,87,0,0,0,207,0,83,0,0,0,162,0,143,0,0,0,0,0,143,0,91,0,100,0,0,0,226,0,43,0,0,0,183,0,162,0,0,0,82,0,108,0,18,0,214,0,152,0,0,0,119,0,0,0,244,0,0,0,89,0,0,0,238,0,62,0,135,0,55,0,191,0,185,0,203,0,0,0,0,0,34,0,53,0,52,0,251,0,52,0,174,0,244,0,0,0,0,0,203,0,167,0,138,0,22,0,108,0,167,0,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,25,0,52,0,66,0,117,0,0,0,248,0,116,0,106,0,162,0,0,0,65,0,0,0,0,0,65,0,0,0,157,0,0,0,0,0,0,0,107,0,11,0,52,0,25,0,0,0,224,0,40,0,0,0,145,0,209,0,121,0,39,0,108,0,0,0,91,0,232,0,0,0,201,0,168,0,133,0,250,0,35,0,232,0,214,0,0,0,178,0,0,0,0,0,133,0,0,0,40,0,182,0,118,0,162,0,85,0,107,0,133,0,147,0,6,0,42,0,21,0,86,0,164,0,0,0,77,0,78,0,8,0,32,0,45,0,0,0,41,0,148,0,0,0,110,0,30,0,0,0,136,0,0,0,120,0,21,0,207,0,0,0,85,0,34,0,213,0,159,0,77,0,0,0,125,0,135,0,0,0,166,0,237,0,248,0,107,0,89,0,134,0,130,0,238,0,183,0,106,0,0,0,162,0,98,0,107,0,242,0,29,0,0,0,2,0,0,0,214,0,0,0,170,0,18,0,22,0,41,0,143,0,84,0,220,0,0,0,1,0,154,0,0,0,240,0,40,0,111,0,8,0,248,0,0,0,193,0,82,0,188,0,191,0,123,0,0,0,0,0,0,0,93,0,0,0,47,0,166,0,166,0,115,0,252,0,5,0,129,0,12,0,117,0,0,0,12,0,137,0,93,0,188,0,93,0,166,0,15,0,95,0,172,0,193,0,180,0,193,0,80,0,216,0,16,0,0,0,245,0,252,0,119,0,84,0,255,0,151,0,144,0,28,0,0,0,253,0,173,0,154,0,162,0,122,0,206,0,0,0,0,0,169,0,98,0,1,0,72,0,203,0,76,0,41,0,169,0,193,0,192,0,11,0,209,0,53,0,122,0,27,0,239,0,115,0,0,0,31,0,228,0,0,0,89,0,150,0,255,0,23,0,102,0,197,0,0,0,197,0,233,0,145,0,104,0,0,0,239,0,0,0,203,0,0,0,75,0,107,0,66,0,0,0,0,0,48,0,172,0,11,0,20,0,102,0,170,0,205,0,0,0,190,0,90,0,0,0,249,0,0,0,59,0,238,0,191,0,170,0,127,0,229,0,0,0,201,0,156,0,199,0,0,0,150,0,207,0,144,0,250,0,0,0,147,0,110,0,106,0,20,0,79,0,0,0,171,0,249,0,166,0,109,0,49,0,32,0,75,0,136,0,136,0,128,0,56,0,0,0,58,0,250,0,112,0,111,0,152,0,221,0,65,0,246,0,81,0,103,0,199,0,228,0,97,0,0,0,42,0,122,0,68,0,115,0,156,0,165,0,0,0,180,0,75,0,196,0,125,0,142,0,174,0,82,0,21,0,204,0,211,0,2,0,236,0,248,0,17,0,0,0,0,0,250,0,153,0,0,0,238,0,0,0,226,0,207,0,186,0,4,0,219,0,216,0,141,0,177,0,151,0,181,0,0,0,254,0,88,0,235,0,215,0,0,0,0,0,125,0,252,0,34,0,83,0,200,0,174,0,16,0,31,0,155,0,0,0,202,0,3,0,2,0,47,0,247,0,107,0,80,0,154,0,57,0,100,0,122,0,37,0,0,0,0,0,0,0,0,0,90,0,227,0,39,0,218,0,196,0,1,0,127,0,45,0,142,0,69,0,206,0,58,0,244,0,122,0,103,0,111,0,0,0,188,0,0,0,35,0,176,0,155,0,48,0,101,0,166,0,0,0,139,0,86,0,50,0,218,0,81,0,0,0,135,0,16,0,185,0,181,0,135,0,0,0,57,0,26,0,195,0,116,0,0,0,182,0,19,0,0,0,0,0,0,0,212,0,177,0,143,0,47,0,212,0,0,0,64,0,164,0,60,0,167,0,188,0,2,0,40,0,216,0,0,0,0,0,249,0,249,0,106,0,249,0,0,0,44,0,101,0,61,0,61,0,49,0,132,0,37,0,189,0,0,0,0,0,30,0,50,0,85,0,71,0,148,0,205,0,0,0,46,0,229,0,211,0,86,0,8,0,0,0,0,0,0,0,47,0,113,0,0,0,97,0,247,0,133,0,243,0,0,0,211,0,137,0,0,0,15,0,0,0,130,0,8,0,194,0,236,0,0,0,125,0,95,0,208,0,49,0,194,0,246,0,0,0,54,0,77,0,46,0,0,0,158,0,0,0,0,0,186,0,115,0,231,0,27,0,0,0,219,0,154,0,0,0,134,0,25,0,114,0,101,0,147,0,105,0,209,0,0,0,158,0,145,0,195,0,0,0,238,0,0,0,0,0,0,0,183,0,32,0,202,0,195,0,41,0,218,0,95,0,143,0,0,0,65,0,0,0,92,0,231,0,101,0,129,0,2,0,0,0,215,0,243,0,116,0,63,0,144,0,111,0,0,0,195,0,0,0,62,0,225,0,0,0,35,0,122,0,9,0,108,0,148,0,37,0,0,0,0,0,194,0,6,0,0,0,75,0,178,0,9,0,92,0,1,0,0,0,0,0,0,0,187,0,246,0,200,0,195,0,8,0,0,0,26,0,145,0,205,0,0,0,129,0,233,0,13,0,0,0,0,0,87,0,195,0,236,0,149,0,245,0,235,0,141,0,32,0,125,0,213,0,88,0,168,0,249,0,45,0,0,0,63,0,0,0,156,0,105,0,80,0,130,0,0,0,238,0,0,0,73,0,0,0,141,0,253,0,179,0,1,0,231,0,176,0,163,0,0,0,20,0,106,0,165,0,0,0,0,0,126,0,217,0,166,0,51,0,203,0,240,0,77,0,138,0,207,0,175,0,63,0,156,0,192,0,79,0,0,0,0,0,0,0,218,0,179,0,203,0,213,0,76,0,114,0,23,0,242,0,8,0,0,0,0,0,151,0,140,0,143,0,177,0,252,0,194,0,39,0,249,0,190,0,0,0,200,0,216,0,72,0,244,0,197,0,6,0,0,0,0,0,151,0,180,0,114,0,103,0,229,0,169,0,114,0,68,0,211,0,173,0,96,0,47,0,130,0,13,0,42,0,81,0,54,0,160,0,200,0,0,0,0,0,187,0,169,0,55,0,225,0);
signal scenario_full  : scenario_type := (175,31,137,31,192,31,204,31,181,31,251,31,251,30,96,31,96,30,191,31,102,31,102,30,8,31,8,30,157,31,186,31,186,30,47,31,181,31,241,31,60,31,45,31,108,31,228,31,228,30,93,31,224,31,224,30,64,31,92,31,92,30,1,31,51,31,203,31,222,31,13,31,253,31,234,31,125,31,218,31,219,31,45,31,217,31,33,31,58,31,102,31,36,31,36,30,172,31,224,31,20,31,177,31,159,31,13,31,67,31,87,31,87,30,207,31,83,31,83,30,162,31,143,31,143,30,143,29,143,31,91,31,100,31,100,30,226,31,43,31,43,30,183,31,162,31,162,30,82,31,108,31,18,31,214,31,152,31,152,30,119,31,119,30,244,31,244,30,89,31,89,30,238,31,62,31,135,31,55,31,191,31,185,31,203,31,203,30,203,29,34,31,53,31,52,31,251,31,52,31,174,31,244,31,244,30,244,29,203,31,167,31,138,31,22,31,108,31,167,31,230,31,230,30,230,29,230,28,230,27,230,26,230,25,230,24,230,23,122,31,25,31,52,31,66,31,117,31,117,30,248,31,116,31,106,31,162,31,162,30,65,31,65,30,65,29,65,31,65,30,157,31,157,30,157,29,157,28,107,31,11,31,52,31,25,31,25,30,224,31,40,31,40,30,145,31,209,31,121,31,39,31,108,31,108,30,91,31,232,31,232,30,201,31,168,31,133,31,250,31,35,31,232,31,214,31,214,30,178,31,178,30,178,29,133,31,133,30,40,31,182,31,118,31,162,31,85,31,107,31,133,31,147,31,6,31,42,31,21,31,86,31,164,31,164,30,77,31,78,31,8,31,32,31,45,31,45,30,41,31,148,31,148,30,110,31,30,31,30,30,136,31,136,30,120,31,21,31,207,31,207,30,85,31,34,31,213,31,159,31,77,31,77,30,125,31,135,31,135,30,166,31,237,31,248,31,107,31,89,31,134,31,130,31,238,31,183,31,106,31,106,30,162,31,98,31,107,31,242,31,29,31,29,30,2,31,2,30,214,31,214,30,170,31,18,31,22,31,41,31,143,31,84,31,220,31,220,30,1,31,154,31,154,30,240,31,40,31,111,31,8,31,248,31,248,30,193,31,82,31,188,31,191,31,123,31,123,30,123,29,123,28,93,31,93,30,47,31,166,31,166,31,115,31,252,31,5,31,129,31,12,31,117,31,117,30,12,31,137,31,93,31,188,31,93,31,166,31,15,31,95,31,172,31,193,31,180,31,193,31,80,31,216,31,16,31,16,30,245,31,252,31,119,31,84,31,255,31,151,31,144,31,28,31,28,30,253,31,173,31,154,31,162,31,122,31,206,31,206,30,206,29,169,31,98,31,1,31,72,31,203,31,76,31,41,31,169,31,193,31,192,31,11,31,209,31,53,31,122,31,27,31,239,31,115,31,115,30,31,31,228,31,228,30,89,31,150,31,255,31,23,31,102,31,197,31,197,30,197,31,233,31,145,31,104,31,104,30,239,31,239,30,203,31,203,30,75,31,107,31,66,31,66,30,66,29,48,31,172,31,11,31,20,31,102,31,170,31,205,31,205,30,190,31,90,31,90,30,249,31,249,30,59,31,238,31,191,31,170,31,127,31,229,31,229,30,201,31,156,31,199,31,199,30,150,31,207,31,144,31,250,31,250,30,147,31,110,31,106,31,20,31,79,31,79,30,171,31,249,31,166,31,109,31,49,31,32,31,75,31,136,31,136,31,128,31,56,31,56,30,58,31,250,31,112,31,111,31,152,31,221,31,65,31,246,31,81,31,103,31,199,31,228,31,97,31,97,30,42,31,122,31,68,31,115,31,156,31,165,31,165,30,180,31,75,31,196,31,125,31,142,31,174,31,82,31,21,31,204,31,211,31,2,31,236,31,248,31,17,31,17,30,17,29,250,31,153,31,153,30,238,31,238,30,226,31,207,31,186,31,4,31,219,31,216,31,141,31,177,31,151,31,181,31,181,30,254,31,88,31,235,31,215,31,215,30,215,29,125,31,252,31,34,31,83,31,200,31,174,31,16,31,31,31,155,31,155,30,202,31,3,31,2,31,47,31,247,31,107,31,80,31,154,31,57,31,100,31,122,31,37,31,37,30,37,29,37,28,37,27,90,31,227,31,39,31,218,31,196,31,1,31,127,31,45,31,142,31,69,31,206,31,58,31,244,31,122,31,103,31,111,31,111,30,188,31,188,30,35,31,176,31,155,31,48,31,101,31,166,31,166,30,139,31,86,31,50,31,218,31,81,31,81,30,135,31,16,31,185,31,181,31,135,31,135,30,57,31,26,31,195,31,116,31,116,30,182,31,19,31,19,30,19,29,19,28,212,31,177,31,143,31,47,31,212,31,212,30,64,31,164,31,60,31,167,31,188,31,2,31,40,31,216,31,216,30,216,29,249,31,249,31,106,31,249,31,249,30,44,31,101,31,61,31,61,31,49,31,132,31,37,31,189,31,189,30,189,29,30,31,50,31,85,31,71,31,148,31,205,31,205,30,46,31,229,31,211,31,86,31,8,31,8,30,8,29,8,28,47,31,113,31,113,30,97,31,247,31,133,31,243,31,243,30,211,31,137,31,137,30,15,31,15,30,130,31,8,31,194,31,236,31,236,30,125,31,95,31,208,31,49,31,194,31,246,31,246,30,54,31,77,31,46,31,46,30,158,31,158,30,158,29,186,31,115,31,231,31,27,31,27,30,219,31,154,31,154,30,134,31,25,31,114,31,101,31,147,31,105,31,209,31,209,30,158,31,145,31,195,31,195,30,238,31,238,30,238,29,238,28,183,31,32,31,202,31,195,31,41,31,218,31,95,31,143,31,143,30,65,31,65,30,92,31,231,31,101,31,129,31,2,31,2,30,215,31,243,31,116,31,63,31,144,31,111,31,111,30,195,31,195,30,62,31,225,31,225,30,35,31,122,31,9,31,108,31,148,31,37,31,37,30,37,29,194,31,6,31,6,30,75,31,178,31,9,31,92,31,1,31,1,30,1,29,1,28,187,31,246,31,200,31,195,31,8,31,8,30,26,31,145,31,205,31,205,30,129,31,233,31,13,31,13,30,13,29,87,31,195,31,236,31,149,31,245,31,235,31,141,31,32,31,125,31,213,31,88,31,168,31,249,31,45,31,45,30,63,31,63,30,156,31,105,31,80,31,130,31,130,30,238,31,238,30,73,31,73,30,141,31,253,31,179,31,1,31,231,31,176,31,163,31,163,30,20,31,106,31,165,31,165,30,165,29,126,31,217,31,166,31,51,31,203,31,240,31,77,31,138,31,207,31,175,31,63,31,156,31,192,31,79,31,79,30,79,29,79,28,218,31,179,31,203,31,213,31,76,31,114,31,23,31,242,31,8,31,8,30,8,29,151,31,140,31,143,31,177,31,252,31,194,31,39,31,249,31,190,31,190,30,200,31,216,31,72,31,244,31,197,31,6,31,6,30,6,29,151,31,180,31,114,31,103,31,229,31,169,31,114,31,68,31,211,31,173,31,96,31,47,31,130,31,13,31,42,31,81,31,54,31,160,31,200,31,200,30,200,29,187,31,169,31,55,31,225,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
