-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 407;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,254,0,128,0,0,0,80,0,96,0,0,0,229,0,0,0,155,0,33,0,121,0,96,0,0,0,172,0,100,0,0,0,39,0,99,0,116,0,0,0,239,0,0,0,125,0,207,0,0,0,100,0,115,0,50,0,0,0,48,0,191,0,0,0,109,0,233,0,52,0,0,0,115,0,84,0,254,0,9,0,112,0,0,0,0,0,236,0,220,0,53,0,117,0,114,0,6,0,229,0,152,0,0,0,61,0,33,0,210,0,11,0,192,0,219,0,128,0,212,0,0,0,230,0,0,0,208,0,231,0,246,0,63,0,45,0,209,0,135,0,74,0,13,0,0,0,175,0,182,0,0,0,185,0,0,0,140,0,0,0,130,0,0,0,27,0,24,0,0,0,148,0,114,0,89,0,0,0,0,0,0,0,147,0,6,0,197,0,158,0,25,0,59,0,75,0,36,0,245,0,27,0,248,0,33,0,189,0,60,0,161,0,136,0,235,0,106,0,203,0,0,0,0,0,79,0,140,0,0,0,87,0,113,0,35,0,30,0,57,0,196,0,65,0,0,0,39,0,0,0,127,0,199,0,0,0,144,0,184,0,233,0,144,0,0,0,129,0,108,0,93,0,0,0,130,0,200,0,57,0,122,0,192,0,40,0,0,0,238,0,219,0,0,0,144,0,217,0,38,0,148,0,0,0,0,0,218,0,206,0,124,0,181,0,48,0,216,0,189,0,42,0,244,0,204,0,230,0,246,0,0,0,224,0,188,0,28,0,0,0,0,0,228,0,0,0,110,0,0,0,122,0,0,0,0,0,0,0,0,0,242,0,150,0,244,0,240,0,15,0,209,0,0,0,131,0,226,0,132,0,173,0,31,0,174,0,0,0,242,0,121,0,215,0,210,0,160,0,163,0,251,0,174,0,0,0,111,0,160,0,55,0,183,0,0,0,159,0,212,0,96,0,187,0,162,0,0,0,176,0,168,0,212,0,185,0,66,0,161,0,0,0,213,0,86,0,0,0,222,0,52,0,112,0,149,0,1,0,46,0,242,0,0,0,228,0,155,0,0,0,211,0,113,0,191,0,72,0,126,0,65,0,36,0,185,0,23,0,237,0,128,0,83,0,239,0,150,0,152,0,132,0,0,0,0,0,39,0,0,0,139,0,120,0,50,0,22,0,0,0,0,0,82,0,255,0,188,0,235,0,106,0,22,0,168,0,129,0,90,0,217,0,0,0,14,0,157,0,72,0,202,0,39,0,226,0,146,0,225,0,251,0,131,0,0,0,48,0,0,0,64,0,237,0,0,0,0,0,238,0,101,0,0,0,4,0,226,0,66,0,196,0,78,0,228,0,198,0,81,0,0,0,144,0,0,0,0,0,0,0,0,0,228,0,125,0,116,0,56,0,215,0,236,0,121,0,100,0,208,0,195,0,163,0,0,0,156,0,118,0,120,0,0,0,21,0,161,0,236,0,227,0,119,0,0,0,26,0,109,0,252,0,169,0,130,0,241,0,193,0,115,0,0,0,1,0,0,0,48,0,127,0,173,0,0,0,79,0,131,0,217,0,97,0,0,0,121,0,0,0,14,0,13,0,90,0,163,0,158,0,167,0,226,0,96,0,45,0,156,0,98,0,0,0,15,0,123,0,26,0,133,0,100,0,0,0,227,0,47,0,151,0,148,0,113,0,51,0,160,0,176,0,79,0,8,0,0,0,39,0,103,0,230,0,106,0,151,0,159,0,0,0,157,0,241,0,0,0,85,0,51,0,90,0,109,0,46,0,133,0,83,0,39,0,0,0,26,0,161,0,29,0,158,0,31,0,171,0,217,0,145,0);
signal scenario_full  : scenario_type := (0,0,254,31,128,31,128,30,80,31,96,31,96,30,229,31,229,30,155,31,33,31,121,31,96,31,96,30,172,31,100,31,100,30,39,31,99,31,116,31,116,30,239,31,239,30,125,31,207,31,207,30,100,31,115,31,50,31,50,30,48,31,191,31,191,30,109,31,233,31,52,31,52,30,115,31,84,31,254,31,9,31,112,31,112,30,112,29,236,31,220,31,53,31,117,31,114,31,6,31,229,31,152,31,152,30,61,31,33,31,210,31,11,31,192,31,219,31,128,31,212,31,212,30,230,31,230,30,208,31,231,31,246,31,63,31,45,31,209,31,135,31,74,31,13,31,13,30,175,31,182,31,182,30,185,31,185,30,140,31,140,30,130,31,130,30,27,31,24,31,24,30,148,31,114,31,89,31,89,30,89,29,89,28,147,31,6,31,197,31,158,31,25,31,59,31,75,31,36,31,245,31,27,31,248,31,33,31,189,31,60,31,161,31,136,31,235,31,106,31,203,31,203,30,203,29,79,31,140,31,140,30,87,31,113,31,35,31,30,31,57,31,196,31,65,31,65,30,39,31,39,30,127,31,199,31,199,30,144,31,184,31,233,31,144,31,144,30,129,31,108,31,93,31,93,30,130,31,200,31,57,31,122,31,192,31,40,31,40,30,238,31,219,31,219,30,144,31,217,31,38,31,148,31,148,30,148,29,218,31,206,31,124,31,181,31,48,31,216,31,189,31,42,31,244,31,204,31,230,31,246,31,246,30,224,31,188,31,28,31,28,30,28,29,228,31,228,30,110,31,110,30,122,31,122,30,122,29,122,28,122,27,242,31,150,31,244,31,240,31,15,31,209,31,209,30,131,31,226,31,132,31,173,31,31,31,174,31,174,30,242,31,121,31,215,31,210,31,160,31,163,31,251,31,174,31,174,30,111,31,160,31,55,31,183,31,183,30,159,31,212,31,96,31,187,31,162,31,162,30,176,31,168,31,212,31,185,31,66,31,161,31,161,30,213,31,86,31,86,30,222,31,52,31,112,31,149,31,1,31,46,31,242,31,242,30,228,31,155,31,155,30,211,31,113,31,191,31,72,31,126,31,65,31,36,31,185,31,23,31,237,31,128,31,83,31,239,31,150,31,152,31,132,31,132,30,132,29,39,31,39,30,139,31,120,31,50,31,22,31,22,30,22,29,82,31,255,31,188,31,235,31,106,31,22,31,168,31,129,31,90,31,217,31,217,30,14,31,157,31,72,31,202,31,39,31,226,31,146,31,225,31,251,31,131,31,131,30,48,31,48,30,64,31,237,31,237,30,237,29,238,31,101,31,101,30,4,31,226,31,66,31,196,31,78,31,228,31,198,31,81,31,81,30,144,31,144,30,144,29,144,28,144,27,228,31,125,31,116,31,56,31,215,31,236,31,121,31,100,31,208,31,195,31,163,31,163,30,156,31,118,31,120,31,120,30,21,31,161,31,236,31,227,31,119,31,119,30,26,31,109,31,252,31,169,31,130,31,241,31,193,31,115,31,115,30,1,31,1,30,48,31,127,31,173,31,173,30,79,31,131,31,217,31,97,31,97,30,121,31,121,30,14,31,13,31,90,31,163,31,158,31,167,31,226,31,96,31,45,31,156,31,98,31,98,30,15,31,123,31,26,31,133,31,100,31,100,30,227,31,47,31,151,31,148,31,113,31,51,31,160,31,176,31,79,31,8,31,8,30,39,31,103,31,230,31,106,31,151,31,159,31,159,30,157,31,241,31,241,30,85,31,51,31,90,31,109,31,46,31,133,31,83,31,39,31,39,30,26,31,161,31,29,31,158,31,31,31,171,31,217,31,145,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
