-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 230;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (78,0,0,0,10,0,0,0,152,0,252,0,88,0,21,0,5,0,94,0,0,0,146,0,158,0,251,0,28,0,130,0,0,0,28,0,0,0,209,0,239,0,47,0,234,0,8,0,22,0,0,0,32,0,108,0,173,0,249,0,0,0,171,0,215,0,148,0,166,0,0,0,145,0,116,0,82,0,0,0,122,0,215,0,109,0,134,0,197,0,0,0,88,0,173,0,192,0,65,0,181,0,0,0,173,0,68,0,23,0,157,0,127,0,40,0,0,0,49,0,190,0,94,0,140,0,142,0,202,0,242,0,156,0,237,0,243,0,113,0,58,0,19,0,236,0,0,0,129,0,0,0,132,0,40,0,0,0,58,0,142,0,0,0,106,0,113,0,40,0,0,0,102,0,0,0,0,0,204,0,238,0,123,0,247,0,253,0,78,0,54,0,75,0,110,0,136,0,0,0,0,0,12,0,195,0,188,0,178,0,108,0,0,0,252,0,131,0,0,0,34,0,0,0,82,0,0,0,248,0,80,0,70,0,255,0,91,0,101,0,14,0,0,0,213,0,50,0,28,0,58,0,202,0,171,0,0,0,0,0,38,0,103,0,0,0,104,0,125,0,139,0,47,0,16,0,40,0,228,0,192,0,180,0,174,0,141,0,217,0,206,0,0,0,212,0,107,0,115,0,184,0,128,0,211,0,0,0,195,0,45,0,207,0,36,0,39,0,0,0,35,0,0,0,155,0,110,0,162,0,162,0,49,0,120,0,0,0,11,0,211,0,0,0,0,0,152,0,111,0,0,0,25,0,76,0,48,0,0,0,173,0,238,0,166,0,234,0,244,0,0,0,174,0,65,0,160,0,24,0,198,0,22,0,113,0,121,0,98,0,55,0,221,0,0,0,0,0,138,0,152,0,0,0,223,0,0,0,190,0,133,0,116,0,36,0,36,0,0,0,253,0,150,0,47,0,87,0,109,0,36,0,97,0,80,0,0,0,99,0,165,0,0,0,166,0,233,0,0,0,119,0,192,0,153,0,150,0,0,0);
signal scenario_full  : scenario_type := (78,31,78,30,10,31,10,30,152,31,252,31,88,31,21,31,5,31,94,31,94,30,146,31,158,31,251,31,28,31,130,31,130,30,28,31,28,30,209,31,239,31,47,31,234,31,8,31,22,31,22,30,32,31,108,31,173,31,249,31,249,30,171,31,215,31,148,31,166,31,166,30,145,31,116,31,82,31,82,30,122,31,215,31,109,31,134,31,197,31,197,30,88,31,173,31,192,31,65,31,181,31,181,30,173,31,68,31,23,31,157,31,127,31,40,31,40,30,49,31,190,31,94,31,140,31,142,31,202,31,242,31,156,31,237,31,243,31,113,31,58,31,19,31,236,31,236,30,129,31,129,30,132,31,40,31,40,30,58,31,142,31,142,30,106,31,113,31,40,31,40,30,102,31,102,30,102,29,204,31,238,31,123,31,247,31,253,31,78,31,54,31,75,31,110,31,136,31,136,30,136,29,12,31,195,31,188,31,178,31,108,31,108,30,252,31,131,31,131,30,34,31,34,30,82,31,82,30,248,31,80,31,70,31,255,31,91,31,101,31,14,31,14,30,213,31,50,31,28,31,58,31,202,31,171,31,171,30,171,29,38,31,103,31,103,30,104,31,125,31,139,31,47,31,16,31,40,31,228,31,192,31,180,31,174,31,141,31,217,31,206,31,206,30,212,31,107,31,115,31,184,31,128,31,211,31,211,30,195,31,45,31,207,31,36,31,39,31,39,30,35,31,35,30,155,31,110,31,162,31,162,31,49,31,120,31,120,30,11,31,211,31,211,30,211,29,152,31,111,31,111,30,25,31,76,31,48,31,48,30,173,31,238,31,166,31,234,31,244,31,244,30,174,31,65,31,160,31,24,31,198,31,22,31,113,31,121,31,98,31,55,31,221,31,221,30,221,29,138,31,152,31,152,30,223,31,223,30,190,31,133,31,116,31,36,31,36,31,36,30,253,31,150,31,47,31,87,31,109,31,36,31,97,31,80,31,80,30,99,31,165,31,165,30,166,31,233,31,233,30,119,31,192,31,153,31,150,31,150,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
