-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 279;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (95,0,139,0,235,0,33,0,44,0,229,0,0,0,111,0,0,0,150,0,0,0,52,0,196,0,0,0,210,0,7,0,21,0,242,0,117,0,208,0,250,0,206,0,103,0,66,0,0,0,0,0,93,0,15,0,0,0,139,0,0,0,0,0,189,0,151,0,0,0,166,0,190,0,55,0,0,0,0,0,57,0,21,0,112,0,82,0,41,0,146,0,123,0,11,0,43,0,58,0,0,0,140,0,85,0,35,0,172,0,0,0,41,0,0,0,16,0,209,0,129,0,135,0,174,0,172,0,0,0,48,0,163,0,145,0,129,0,78,0,207,0,125,0,63,0,56,0,0,0,229,0,37,0,118,0,87,0,0,0,229,0,154,0,0,0,243,0,53,0,0,0,215,0,0,0,0,0,174,0,178,0,0,0,234,0,77,0,206,0,153,0,66,0,94,0,0,0,82,0,200,0,157,0,62,0,143,0,237,0,0,0,234,0,222,0,171,0,62,0,128,0,125,0,62,0,253,0,150,0,71,0,103,0,19,0,0,0,236,0,222,0,27,0,0,0,229,0,0,0,0,0,228,0,85,0,130,0,7,0,190,0,192,0,239,0,123,0,68,0,213,0,117,0,211,0,130,0,13,0,171,0,233,0,136,0,106,0,0,0,152,0,56,0,206,0,145,0,3,0,180,0,171,0,35,0,38,0,0,0,8,0,19,0,104,0,107,0,0,0,59,0,53,0,21,0,0,0,54,0,0,0,0,0,249,0,0,0,147,0,137,0,71,0,72,0,139,0,195,0,0,0,39,0,255,0,205,0,146,0,91,0,0,0,85,0,132,0,229,0,69,0,0,0,216,0,168,0,88,0,247,0,232,0,17,0,174,0,71,0,253,0,18,0,90,0,75,0,0,0,121,0,0,0,12,0,206,0,67,0,214,0,213,0,19,0,71,0,246,0,247,0,254,0,102,0,123,0,0,0,173,0,154,0,236,0,195,0,110,0,244,0,29,0,102,0,0,0,27,0,0,0,86,0,0,0,178,0,0,0,3,0,3,0,138,0,102,0,23,0,251,0,128,0,114,0,8,0,174,0,129,0,0,0,180,0,0,0,108,0,26,0,245,0,63,0,239,0,230,0,192,0,131,0,204,0,101,0,163,0,187,0,183,0,0,0,137,0,232,0,38,0,11,0,136,0,0,0,4,0,19,0,66,0,241,0,253,0,214,0,35,0,0,0,0,0,125,0,129,0,147,0,147,0,171,0,90,0);
signal scenario_full  : scenario_type := (95,31,139,31,235,31,33,31,44,31,229,31,229,30,111,31,111,30,150,31,150,30,52,31,196,31,196,30,210,31,7,31,21,31,242,31,117,31,208,31,250,31,206,31,103,31,66,31,66,30,66,29,93,31,15,31,15,30,139,31,139,30,139,29,189,31,151,31,151,30,166,31,190,31,55,31,55,30,55,29,57,31,21,31,112,31,82,31,41,31,146,31,123,31,11,31,43,31,58,31,58,30,140,31,85,31,35,31,172,31,172,30,41,31,41,30,16,31,209,31,129,31,135,31,174,31,172,31,172,30,48,31,163,31,145,31,129,31,78,31,207,31,125,31,63,31,56,31,56,30,229,31,37,31,118,31,87,31,87,30,229,31,154,31,154,30,243,31,53,31,53,30,215,31,215,30,215,29,174,31,178,31,178,30,234,31,77,31,206,31,153,31,66,31,94,31,94,30,82,31,200,31,157,31,62,31,143,31,237,31,237,30,234,31,222,31,171,31,62,31,128,31,125,31,62,31,253,31,150,31,71,31,103,31,19,31,19,30,236,31,222,31,27,31,27,30,229,31,229,30,229,29,228,31,85,31,130,31,7,31,190,31,192,31,239,31,123,31,68,31,213,31,117,31,211,31,130,31,13,31,171,31,233,31,136,31,106,31,106,30,152,31,56,31,206,31,145,31,3,31,180,31,171,31,35,31,38,31,38,30,8,31,19,31,104,31,107,31,107,30,59,31,53,31,21,31,21,30,54,31,54,30,54,29,249,31,249,30,147,31,137,31,71,31,72,31,139,31,195,31,195,30,39,31,255,31,205,31,146,31,91,31,91,30,85,31,132,31,229,31,69,31,69,30,216,31,168,31,88,31,247,31,232,31,17,31,174,31,71,31,253,31,18,31,90,31,75,31,75,30,121,31,121,30,12,31,206,31,67,31,214,31,213,31,19,31,71,31,246,31,247,31,254,31,102,31,123,31,123,30,173,31,154,31,236,31,195,31,110,31,244,31,29,31,102,31,102,30,27,31,27,30,86,31,86,30,178,31,178,30,3,31,3,31,138,31,102,31,23,31,251,31,128,31,114,31,8,31,174,31,129,31,129,30,180,31,180,30,108,31,26,31,245,31,63,31,239,31,230,31,192,31,131,31,204,31,101,31,163,31,187,31,183,31,183,30,137,31,232,31,38,31,11,31,136,31,136,30,4,31,19,31,66,31,241,31,253,31,214,31,35,31,35,30,35,29,125,31,129,31,147,31,147,31,171,31,90,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
