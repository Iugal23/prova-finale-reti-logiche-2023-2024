-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 396;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (88,0,0,0,235,0,40,0,20,0,0,0,36,0,33,0,96,0,0,0,211,0,1,0,0,0,102,0,224,0,0,0,112,0,22,0,0,0,12,0,212,0,96,0,0,0,100,0,0,0,0,0,171,0,71,0,104,0,111,0,0,0,0,0,0,0,171,0,66,0,93,0,0,0,186,0,173,0,194,0,61,0,118,0,144,0,0,0,122,0,0,0,0,0,62,0,209,0,88,0,144,0,114,0,20,0,0,0,46,0,81,0,102,0,125,0,251,0,236,0,133,0,70,0,1,0,105,0,0,0,164,0,0,0,10,0,0,0,0,0,255,0,184,0,182,0,215,0,3,0,64,0,0,0,18,0,0,0,136,0,44,0,230,0,150,0,231,0,60,0,243,0,3,0,2,0,0,0,66,0,251,0,28,0,236,0,255,0,142,0,0,0,62,0,14,0,168,0,0,0,105,0,204,0,236,0,204,0,203,0,200,0,0,0,0,0,194,0,0,0,148,0,79,0,97,0,193,0,19,0,33,0,0,0,82,0,195,0,4,0,255,0,134,0,0,0,111,0,232,0,229,0,117,0,70,0,132,0,52,0,122,0,17,0,166,0,99,0,160,0,0,0,0,0,118,0,93,0,130,0,102,0,0,0,114,0,1,0,166,0,42,0,86,0,74,0,0,0,229,0,57,0,164,0,0,0,16,0,0,0,63,0,118,0,163,0,0,0,71,0,141,0,0,0,0,0,221,0,9,0,25,0,202,0,123,0,221,0,0,0,14,0,100,0,90,0,154,0,0,0,135,0,250,0,81,0,0,0,159,0,0,0,0,0,7,0,105,0,91,0,101,0,195,0,141,0,122,0,226,0,0,0,106,0,229,0,124,0,0,0,15,0,232,0,41,0,191,0,0,0,251,0,71,0,13,0,243,0,203,0,0,0,48,0,131,0,162,0,0,0,99,0,63,0,160,0,190,0,226,0,160,0,0,0,204,0,99,0,255,0,131,0,8,0,179,0,186,0,0,0,117,0,92,0,225,0,63,0,72,0,18,0,219,0,252,0,103,0,187,0,0,0,187,0,19,0,0,0,74,0,12,0,233,0,14,0,25,0,214,0,81,0,23,0,164,0,181,0,41,0,224,0,252,0,225,0,0,0,0,0,47,0,10,0,254,0,58,0,0,0,149,0,35,0,17,0,68,0,47,0,72,0,143,0,126,0,39,0,0,0,172,0,244,0,74,0,251,0,118,0,108,0,0,0,60,0,239,0,155,0,141,0,102,0,227,0,160,0,151,0,211,0,153,0,151,0,181,0,0,0,35,0,233,0,45,0,222,0,134,0,172,0,152,0,187,0,161,0,141,0,15,0,234,0,20,0,250,0,158,0,86,0,246,0,138,0,24,0,139,0,74,0,148,0,0,0,201,0,181,0,73,0,67,0,0,0,201,0,237,0,36,0,216,0,172,0,62,0,207,0,255,0,43,0,79,0,47,0,201,0,64,0,66,0,13,0,0,0,175,0,167,0,0,0,88,0,0,0,120,0,196,0,81,0,63,0,126,0,139,0,248,0,14,0,41,0,175,0,28,0,104,0,100,0,81,0,94,0,178,0,0,0,189,0,22,0,184,0,184,0,89,0,193,0,62,0,104,0,170,0,0,0,117,0,148,0,136,0,110,0,229,0,250,0,172,0,90,0,0,0,228,0,0,0,9,0,122,0,153,0,83,0,0,0,195,0,91,0,239,0,116,0,139,0,83,0,0,0,56,0,0,0,190,0,137,0,161,0,0,0,165,0);
signal scenario_full  : scenario_type := (88,31,88,30,235,31,40,31,20,31,20,30,36,31,33,31,96,31,96,30,211,31,1,31,1,30,102,31,224,31,224,30,112,31,22,31,22,30,12,31,212,31,96,31,96,30,100,31,100,30,100,29,171,31,71,31,104,31,111,31,111,30,111,29,111,28,171,31,66,31,93,31,93,30,186,31,173,31,194,31,61,31,118,31,144,31,144,30,122,31,122,30,122,29,62,31,209,31,88,31,144,31,114,31,20,31,20,30,46,31,81,31,102,31,125,31,251,31,236,31,133,31,70,31,1,31,105,31,105,30,164,31,164,30,10,31,10,30,10,29,255,31,184,31,182,31,215,31,3,31,64,31,64,30,18,31,18,30,136,31,44,31,230,31,150,31,231,31,60,31,243,31,3,31,2,31,2,30,66,31,251,31,28,31,236,31,255,31,142,31,142,30,62,31,14,31,168,31,168,30,105,31,204,31,236,31,204,31,203,31,200,31,200,30,200,29,194,31,194,30,148,31,79,31,97,31,193,31,19,31,33,31,33,30,82,31,195,31,4,31,255,31,134,31,134,30,111,31,232,31,229,31,117,31,70,31,132,31,52,31,122,31,17,31,166,31,99,31,160,31,160,30,160,29,118,31,93,31,130,31,102,31,102,30,114,31,1,31,166,31,42,31,86,31,74,31,74,30,229,31,57,31,164,31,164,30,16,31,16,30,63,31,118,31,163,31,163,30,71,31,141,31,141,30,141,29,221,31,9,31,25,31,202,31,123,31,221,31,221,30,14,31,100,31,90,31,154,31,154,30,135,31,250,31,81,31,81,30,159,31,159,30,159,29,7,31,105,31,91,31,101,31,195,31,141,31,122,31,226,31,226,30,106,31,229,31,124,31,124,30,15,31,232,31,41,31,191,31,191,30,251,31,71,31,13,31,243,31,203,31,203,30,48,31,131,31,162,31,162,30,99,31,63,31,160,31,190,31,226,31,160,31,160,30,204,31,99,31,255,31,131,31,8,31,179,31,186,31,186,30,117,31,92,31,225,31,63,31,72,31,18,31,219,31,252,31,103,31,187,31,187,30,187,31,19,31,19,30,74,31,12,31,233,31,14,31,25,31,214,31,81,31,23,31,164,31,181,31,41,31,224,31,252,31,225,31,225,30,225,29,47,31,10,31,254,31,58,31,58,30,149,31,35,31,17,31,68,31,47,31,72,31,143,31,126,31,39,31,39,30,172,31,244,31,74,31,251,31,118,31,108,31,108,30,60,31,239,31,155,31,141,31,102,31,227,31,160,31,151,31,211,31,153,31,151,31,181,31,181,30,35,31,233,31,45,31,222,31,134,31,172,31,152,31,187,31,161,31,141,31,15,31,234,31,20,31,250,31,158,31,86,31,246,31,138,31,24,31,139,31,74,31,148,31,148,30,201,31,181,31,73,31,67,31,67,30,201,31,237,31,36,31,216,31,172,31,62,31,207,31,255,31,43,31,79,31,47,31,201,31,64,31,66,31,13,31,13,30,175,31,167,31,167,30,88,31,88,30,120,31,196,31,81,31,63,31,126,31,139,31,248,31,14,31,41,31,175,31,28,31,104,31,100,31,81,31,94,31,178,31,178,30,189,31,22,31,184,31,184,31,89,31,193,31,62,31,104,31,170,31,170,30,117,31,148,31,136,31,110,31,229,31,250,31,172,31,90,31,90,30,228,31,228,30,9,31,122,31,153,31,83,31,83,30,195,31,91,31,239,31,116,31,139,31,83,31,83,30,56,31,56,30,190,31,137,31,161,31,161,30,165,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
