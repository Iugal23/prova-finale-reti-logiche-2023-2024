-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 667;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,251,0,0,0,212,0,102,0,217,0,0,0,189,0,168,0,179,0,0,0,234,0,153,0,198,0,72,0,10,0,173,0,61,0,11,0,170,0,32,0,0,0,177,0,178,0,53,0,0,0,160,0,19,0,0,0,138,0,168,0,193,0,111,0,85,0,117,0,246,0,235,0,0,0,74,0,191,0,227,0,254,0,255,0,57,0,0,0,63,0,239,0,34,0,87,0,0,0,85,0,1,0,154,0,0,0,176,0,13,0,91,0,149,0,182,0,254,0,222,0,207,0,0,0,111,0,0,0,112,0,65,0,46,0,185,0,92,0,167,0,0,0,151,0,239,0,151,0,102,0,114,0,0,0,84,0,0,0,251,0,0,0,182,0,143,0,214,0,35,0,84,0,2,0,0,0,243,0,169,0,93,0,0,0,206,0,197,0,100,0,222,0,158,0,0,0,10,0,252,0,251,0,190,0,22,0,0,0,164,0,200,0,153,0,204,0,209,0,34,0,0,0,84,0,249,0,48,0,0,0,0,0,252,0,168,0,191,0,152,0,0,0,106,0,101,0,188,0,0,0,0,0,102,0,0,0,146,0,72,0,137,0,0,0,229,0,65,0,190,0,42,0,151,0,19,0,120,0,11,0,254,0,255,0,36,0,165,0,128,0,0,0,108,0,0,0,247,0,0,0,19,0,218,0,0,0,59,0,156,0,101,0,97,0,0,0,68,0,179,0,151,0,77,0,61,0,187,0,0,0,50,0,135,0,220,0,28,0,31,0,135,0,145,0,131,0,233,0,164,0,52,0,0,0,182,0,44,0,178,0,183,0,137,0,0,0,251,0,57,0,62,0,91,0,71,0,174,0,192,0,0,0,85,0,156,0,219,0,242,0,238,0,0,0,185,0,57,0,0,0,51,0,237,0,0,0,141,0,0,0,0,0,0,0,246,0,103,0,209,0,0,0,0,0,0,0,0,0,8,0,160,0,139,0,187,0,0,0,209,0,206,0,114,0,220,0,109,0,23,0,17,0,216,0,185,0,0,0,31,0,5,0,138,0,0,0,218,0,200,0,34,0,135,0,110,0,95,0,171,0,149,0,154,0,150,0,46,0,195,0,250,0,80,0,237,0,196,0,108,0,88,0,95,0,0,0,197,0,47,0,0,0,170,0,167,0,0,0,234,0,111,0,0,0,185,0,225,0,189,0,0,0,182,0,224,0,0,0,222,0,170,0,255,0,215,0,0,0,170,0,97,0,38,0,108,0,134,0,0,0,147,0,201,0,20,0,14,0,253,0,151,0,232,0,165,0,0,0,52,0,0,0,36,0,0,0,91,0,127,0,244,0,48,0,87,0,0,0,128,0,155,0,71,0,202,0,7,0,188,0,0,0,0,0,139,0,137,0,236,0,206,0,54,0,72,0,0,0,230,0,146,0,43,0,191,0,50,0,0,0,153,0,188,0,184,0,144,0,9,0,95,0,0,0,226,0,0,0,5,0,141,0,199,0,0,0,102,0,110,0,13,0,0,0,149,0,9,0,153,0,89,0,230,0,0,0,0,0,67,0,70,0,6,0,183,0,228,0,244,0,210,0,233,0,0,0,51,0,0,0,0,0,109,0,172,0,2,0,22,0,224,0,41,0,0,0,12,0,0,0,0,0,252,0,47,0,199,0,70,0,21,0,95,0,186,0,0,0,124,0,233,0,245,0,0,0,109,0,0,0,37,0,196,0,154,0,166,0,132,0,146,0,0,0,225,0,10,0,36,0,0,0,37,0,97,0,180,0,169,0,154,0,170,0,0,0,231,0,0,0,167,0,11,0,52,0,127,0,0,0,130,0,131,0,102,0,197,0,0,0,245,0,0,0,190,0,25,0,54,0,84,0,161,0,73,0,220,0,206,0,0,0,176,0,0,0,2,0,85,0,0,0,106,0,180,0,203,0,0,0,197,0,0,0,0,0,52,0,131,0,11,0,60,0,192,0,139,0,20,0,129,0,214,0,0,0,62,0,167,0,237,0,81,0,204,0,24,0,89,0,117,0,126,0,0,0,0,0,142,0,198,0,187,0,182,0,91,0,0,0,0,0,0,0,26,0,112,0,0,0,0,0,53,0,159,0,0,0,106,0,253,0,162,0,227,0,206,0,0,0,10,0,0,0,196,0,110,0,0,0,0,0,59,0,0,0,100,0,102,0,9,0,188,0,247,0,47,0,19,0,119,0,143,0,176,0,43,0,0,0,247,0,146,0,142,0,140,0,0,0,69,0,0,0,0,0,168,0,176,0,14,0,99,0,151,0,170,0,89,0,47,0,0,0,0,0,254,0,244,0,0,0,242,0,166,0,184,0,119,0,0,0,25,0,0,0,16,0,111,0,134,0,214,0,40,0,213,0,141,0,238,0,0,0,85,0,245,0,0,0,67,0,177,0,72,0,244,0,250,0,7,0,224,0,132,0,42,0,45,0,0,0,21,0,6,0,0,0,0,0,46,0,0,0,205,0,12,0,152,0,207,0,0,0,74,0,132,0,86,0,20,0,0,0,76,0,7,0,140,0,0,0,108,0,0,0,141,0,199,0,2,0,105,0,134,0,0,0,8,0,176,0,91,0,122,0,251,0,0,0,0,0,0,0,101,0,246,0,0,0,0,0,83,0,0,0,116,0,0,0,0,0,105,0,0,0,91,0,135,0,161,0,205,0,78,0,134,0,230,0,80,0,12,0,111,0,0,0,0,0,83,0,0,0,91,0,0,0,33,0,0,0,0,0,192,0,87,0,0,0,133,0,49,0,130,0,186,0,16,0,48,0,134,0,185,0,51,0,120,0,0,0,39,0,169,0,20,0,146,0,36,0,0,0,3,0,180,0,84,0,0,0,127,0,139,0,65,0,61,0,111,0,73,0,0,0,70,0,71,0,74,0,85,0,24,0,161,0,62,0,59,0,150,0,4,0,173,0,164,0,75,0,110,0,174,0,201,0,238,0,0,0,31,0,0,0,134,0,101,0,10,0);
signal scenario_full  : scenario_type := (0,0,251,31,251,30,212,31,102,31,217,31,217,30,189,31,168,31,179,31,179,30,234,31,153,31,198,31,72,31,10,31,173,31,61,31,11,31,170,31,32,31,32,30,177,31,178,31,53,31,53,30,160,31,19,31,19,30,138,31,168,31,193,31,111,31,85,31,117,31,246,31,235,31,235,30,74,31,191,31,227,31,254,31,255,31,57,31,57,30,63,31,239,31,34,31,87,31,87,30,85,31,1,31,154,31,154,30,176,31,13,31,91,31,149,31,182,31,254,31,222,31,207,31,207,30,111,31,111,30,112,31,65,31,46,31,185,31,92,31,167,31,167,30,151,31,239,31,151,31,102,31,114,31,114,30,84,31,84,30,251,31,251,30,182,31,143,31,214,31,35,31,84,31,2,31,2,30,243,31,169,31,93,31,93,30,206,31,197,31,100,31,222,31,158,31,158,30,10,31,252,31,251,31,190,31,22,31,22,30,164,31,200,31,153,31,204,31,209,31,34,31,34,30,84,31,249,31,48,31,48,30,48,29,252,31,168,31,191,31,152,31,152,30,106,31,101,31,188,31,188,30,188,29,102,31,102,30,146,31,72,31,137,31,137,30,229,31,65,31,190,31,42,31,151,31,19,31,120,31,11,31,254,31,255,31,36,31,165,31,128,31,128,30,108,31,108,30,247,31,247,30,19,31,218,31,218,30,59,31,156,31,101,31,97,31,97,30,68,31,179,31,151,31,77,31,61,31,187,31,187,30,50,31,135,31,220,31,28,31,31,31,135,31,145,31,131,31,233,31,164,31,52,31,52,30,182,31,44,31,178,31,183,31,137,31,137,30,251,31,57,31,62,31,91,31,71,31,174,31,192,31,192,30,85,31,156,31,219,31,242,31,238,31,238,30,185,31,57,31,57,30,51,31,237,31,237,30,141,31,141,30,141,29,141,28,246,31,103,31,209,31,209,30,209,29,209,28,209,27,8,31,160,31,139,31,187,31,187,30,209,31,206,31,114,31,220,31,109,31,23,31,17,31,216,31,185,31,185,30,31,31,5,31,138,31,138,30,218,31,200,31,34,31,135,31,110,31,95,31,171,31,149,31,154,31,150,31,46,31,195,31,250,31,80,31,237,31,196,31,108,31,88,31,95,31,95,30,197,31,47,31,47,30,170,31,167,31,167,30,234,31,111,31,111,30,185,31,225,31,189,31,189,30,182,31,224,31,224,30,222,31,170,31,255,31,215,31,215,30,170,31,97,31,38,31,108,31,134,31,134,30,147,31,201,31,20,31,14,31,253,31,151,31,232,31,165,31,165,30,52,31,52,30,36,31,36,30,91,31,127,31,244,31,48,31,87,31,87,30,128,31,155,31,71,31,202,31,7,31,188,31,188,30,188,29,139,31,137,31,236,31,206,31,54,31,72,31,72,30,230,31,146,31,43,31,191,31,50,31,50,30,153,31,188,31,184,31,144,31,9,31,95,31,95,30,226,31,226,30,5,31,141,31,199,31,199,30,102,31,110,31,13,31,13,30,149,31,9,31,153,31,89,31,230,31,230,30,230,29,67,31,70,31,6,31,183,31,228,31,244,31,210,31,233,31,233,30,51,31,51,30,51,29,109,31,172,31,2,31,22,31,224,31,41,31,41,30,12,31,12,30,12,29,252,31,47,31,199,31,70,31,21,31,95,31,186,31,186,30,124,31,233,31,245,31,245,30,109,31,109,30,37,31,196,31,154,31,166,31,132,31,146,31,146,30,225,31,10,31,36,31,36,30,37,31,97,31,180,31,169,31,154,31,170,31,170,30,231,31,231,30,167,31,11,31,52,31,127,31,127,30,130,31,131,31,102,31,197,31,197,30,245,31,245,30,190,31,25,31,54,31,84,31,161,31,73,31,220,31,206,31,206,30,176,31,176,30,2,31,85,31,85,30,106,31,180,31,203,31,203,30,197,31,197,30,197,29,52,31,131,31,11,31,60,31,192,31,139,31,20,31,129,31,214,31,214,30,62,31,167,31,237,31,81,31,204,31,24,31,89,31,117,31,126,31,126,30,126,29,142,31,198,31,187,31,182,31,91,31,91,30,91,29,91,28,26,31,112,31,112,30,112,29,53,31,159,31,159,30,106,31,253,31,162,31,227,31,206,31,206,30,10,31,10,30,196,31,110,31,110,30,110,29,59,31,59,30,100,31,102,31,9,31,188,31,247,31,47,31,19,31,119,31,143,31,176,31,43,31,43,30,247,31,146,31,142,31,140,31,140,30,69,31,69,30,69,29,168,31,176,31,14,31,99,31,151,31,170,31,89,31,47,31,47,30,47,29,254,31,244,31,244,30,242,31,166,31,184,31,119,31,119,30,25,31,25,30,16,31,111,31,134,31,214,31,40,31,213,31,141,31,238,31,238,30,85,31,245,31,245,30,67,31,177,31,72,31,244,31,250,31,7,31,224,31,132,31,42,31,45,31,45,30,21,31,6,31,6,30,6,29,46,31,46,30,205,31,12,31,152,31,207,31,207,30,74,31,132,31,86,31,20,31,20,30,76,31,7,31,140,31,140,30,108,31,108,30,141,31,199,31,2,31,105,31,134,31,134,30,8,31,176,31,91,31,122,31,251,31,251,30,251,29,251,28,101,31,246,31,246,30,246,29,83,31,83,30,116,31,116,30,116,29,105,31,105,30,91,31,135,31,161,31,205,31,78,31,134,31,230,31,80,31,12,31,111,31,111,30,111,29,83,31,83,30,91,31,91,30,33,31,33,30,33,29,192,31,87,31,87,30,133,31,49,31,130,31,186,31,16,31,48,31,134,31,185,31,51,31,120,31,120,30,39,31,169,31,20,31,146,31,36,31,36,30,3,31,180,31,84,31,84,30,127,31,139,31,65,31,61,31,111,31,73,31,73,30,70,31,71,31,74,31,85,31,24,31,161,31,62,31,59,31,150,31,4,31,173,31,164,31,75,31,110,31,174,31,201,31,238,31,238,30,31,31,31,30,134,31,101,31,10,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
