-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 331;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (183,0,14,0,252,0,122,0,117,0,0,0,141,0,231,0,0,0,160,0,0,0,168,0,166,0,51,0,181,0,35,0,55,0,124,0,49,0,200,0,150,0,220,0,94,0,25,0,34,0,70,0,243,0,122,0,45,0,140,0,62,0,144,0,101,0,129,0,78,0,237,0,0,0,136,0,0,0,145,0,3,0,0,0,0,0,0,0,0,0,33,0,25,0,222,0,136,0,180,0,219,0,39,0,207,0,145,0,147,0,184,0,100,0,142,0,107,0,185,0,0,0,254,0,142,0,27,0,193,0,63,0,0,0,71,0,186,0,0,0,83,0,174,0,31,0,192,0,226,0,0,0,33,0,40,0,193,0,55,0,0,0,176,0,186,0,37,0,0,0,84,0,0,0,250,0,202,0,76,0,0,0,82,0,0,0,167,0,156,0,0,0,23,0,242,0,59,0,187,0,21,0,135,0,0,0,123,0,61,0,0,0,86,0,155,0,137,0,119,0,185,0,205,0,170,0,44,0,253,0,76,0,13,0,23,0,92,0,8,0,0,0,55,0,0,0,249,0,251,0,233,0,146,0,13,0,128,0,6,0,0,0,0,0,168,0,66,0,166,0,84,0,96,0,36,0,0,0,0,0,159,0,126,0,11,0,50,0,50,0,221,0,215,0,113,0,0,0,35,0,0,0,8,0,178,0,58,0,232,0,194,0,147,0,0,0,0,0,0,0,248,0,86,0,149,0,0,0,179,0,188,0,123,0,90,0,252,0,179,0,251,0,162,0,9,0,81,0,0,0,225,0,228,0,189,0,253,0,28,0,130,0,195,0,85,0,168,0,0,0,0,0,61,0,200,0,33,0,194,0,45,0,163,0,35,0,225,0,207,0,169,0,31,0,162,0,38,0,125,0,123,0,139,0,99,0,112,0,17,0,250,0,66,0,61,0,231,0,49,0,52,0,133,0,26,0,58,0,71,0,0,0,239,0,248,0,13,0,178,0,0,0,5,0,0,0,0,0,36,0,209,0,41,0,0,0,151,0,44,0,0,0,120,0,0,0,0,0,38,0,26,0,246,0,79,0,0,0,111,0,148,0,7,0,160,0,0,0,205,0,94,0,50,0,147,0,201,0,46,0,198,0,202,0,0,0,0,0,0,0,217,0,0,0,252,0,0,0,245,0,0,0,157,0,0,0,37,0,58,0,0,0,39,0,0,0,162,0,242,0,191,0,0,0,123,0,91,0,105,0,0,0,5,0,237,0,12,0,156,0,248,0,150,0,36,0,208,0,133,0,115,0,235,0,179,0,211,0,0,0,197,0,29,0,0,0,41,0,0,0,0,0,86,0,125,0,177,0,95,0,58,0,48,0,196,0,178,0,59,0,139,0,62,0,120,0,239,0,67,0,61,0,65,0,186,0,74,0,182,0,113,0,65,0,240,0,86,0,36,0,178,0,200,0,46,0,176,0,0,0,11,0,142,0,24,0,103,0,100,0,120,0);
signal scenario_full  : scenario_type := (183,31,14,31,252,31,122,31,117,31,117,30,141,31,231,31,231,30,160,31,160,30,168,31,166,31,51,31,181,31,35,31,55,31,124,31,49,31,200,31,150,31,220,31,94,31,25,31,34,31,70,31,243,31,122,31,45,31,140,31,62,31,144,31,101,31,129,31,78,31,237,31,237,30,136,31,136,30,145,31,3,31,3,30,3,29,3,28,3,27,33,31,25,31,222,31,136,31,180,31,219,31,39,31,207,31,145,31,147,31,184,31,100,31,142,31,107,31,185,31,185,30,254,31,142,31,27,31,193,31,63,31,63,30,71,31,186,31,186,30,83,31,174,31,31,31,192,31,226,31,226,30,33,31,40,31,193,31,55,31,55,30,176,31,186,31,37,31,37,30,84,31,84,30,250,31,202,31,76,31,76,30,82,31,82,30,167,31,156,31,156,30,23,31,242,31,59,31,187,31,21,31,135,31,135,30,123,31,61,31,61,30,86,31,155,31,137,31,119,31,185,31,205,31,170,31,44,31,253,31,76,31,13,31,23,31,92,31,8,31,8,30,55,31,55,30,249,31,251,31,233,31,146,31,13,31,128,31,6,31,6,30,6,29,168,31,66,31,166,31,84,31,96,31,36,31,36,30,36,29,159,31,126,31,11,31,50,31,50,31,221,31,215,31,113,31,113,30,35,31,35,30,8,31,178,31,58,31,232,31,194,31,147,31,147,30,147,29,147,28,248,31,86,31,149,31,149,30,179,31,188,31,123,31,90,31,252,31,179,31,251,31,162,31,9,31,81,31,81,30,225,31,228,31,189,31,253,31,28,31,130,31,195,31,85,31,168,31,168,30,168,29,61,31,200,31,33,31,194,31,45,31,163,31,35,31,225,31,207,31,169,31,31,31,162,31,38,31,125,31,123,31,139,31,99,31,112,31,17,31,250,31,66,31,61,31,231,31,49,31,52,31,133,31,26,31,58,31,71,31,71,30,239,31,248,31,13,31,178,31,178,30,5,31,5,30,5,29,36,31,209,31,41,31,41,30,151,31,44,31,44,30,120,31,120,30,120,29,38,31,26,31,246,31,79,31,79,30,111,31,148,31,7,31,160,31,160,30,205,31,94,31,50,31,147,31,201,31,46,31,198,31,202,31,202,30,202,29,202,28,217,31,217,30,252,31,252,30,245,31,245,30,157,31,157,30,37,31,58,31,58,30,39,31,39,30,162,31,242,31,191,31,191,30,123,31,91,31,105,31,105,30,5,31,237,31,12,31,156,31,248,31,150,31,36,31,208,31,133,31,115,31,235,31,179,31,211,31,211,30,197,31,29,31,29,30,41,31,41,30,41,29,86,31,125,31,177,31,95,31,58,31,48,31,196,31,178,31,59,31,139,31,62,31,120,31,239,31,67,31,61,31,65,31,186,31,74,31,182,31,113,31,65,31,240,31,86,31,36,31,178,31,200,31,46,31,176,31,176,30,11,31,142,31,24,31,103,31,100,31,120,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
