-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 863;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (53,0,85,0,186,0,8,0,52,0,95,0,7,0,154,0,104,0,0,0,18,0,181,0,101,0,33,0,54,0,57,0,0,0,0,0,171,0,206,0,158,0,29,0,107,0,0,0,171,0,66,0,78,0,88,0,0,0,0,0,234,0,40,0,76,0,13,0,28,0,31,0,18,0,172,0,172,0,0,0,138,0,164,0,55,0,102,0,158,0,231,0,239,0,0,0,135,0,0,0,160,0,42,0,180,0,0,0,139,0,112,0,238,0,42,0,2,0,0,0,178,0,247,0,70,0,30,0,0,0,120,0,0,0,0,0,79,0,27,0,0,0,0,0,102,0,233,0,42,0,0,0,124,0,188,0,171,0,0,0,184,0,167,0,0,0,0,0,58,0,255,0,169,0,81,0,160,0,65,0,0,0,104,0,92,0,0,0,64,0,148,0,53,0,20,0,93,0,0,0,215,0,228,0,52,0,118,0,18,0,99,0,194,0,195,0,0,0,0,0,35,0,96,0,176,0,0,0,199,0,0,0,33,0,146,0,0,0,206,0,128,0,150,0,2,0,236,0,46,0,77,0,240,0,22,0,129,0,74,0,178,0,98,0,10,0,39,0,238,0,187,0,10,0,0,0,106,0,186,0,39,0,164,0,255,0,175,0,78,0,138,0,101,0,10,0,163,0,69,0,0,0,6,0,84,0,38,0,53,0,232,0,0,0,0,0,0,0,0,0,0,0,233,0,75,0,150,0,21,0,100,0,134,0,150,0,176,0,0,0,176,0,107,0,40,0,24,0,214,0,0,0,98,0,248,0,193,0,0,0,201,0,72,0,105,0,205,0,248,0,111,0,193,0,203,0,53,0,75,0,121,0,221,0,144,0,31,0,0,0,87,0,1,0,47,0,138,0,0,0,238,0,0,0,0,0,0,0,0,0,11,0,106,0,0,0,251,0,218,0,130,0,217,0,212,0,182,0,57,0,67,0,146,0,153,0,35,0,1,0,94,0,201,0,179,0,153,0,206,0,141,0,54,0,0,0,92,0,192,0,205,0,46,0,59,0,58,0,85,0,131,0,246,0,224,0,0,0,0,0,248,0,11,0,83,0,175,0,172,0,0,0,19,0,209,0,0,0,0,0,79,0,0,0,109,0,120,0,111,0,17,0,0,0,0,0,255,0,240,0,110,0,56,0,4,0,0,0,0,0,134,0,104,0,111,0,33,0,90,0,110,0,0,0,232,0,0,0,102,0,109,0,238,0,0,0,160,0,81,0,3,0,138,0,0,0,233,0,217,0,0,0,37,0,216,0,174,0,250,0,105,0,0,0,101,0,112,0,162,0,80,0,62,0,36,0,139,0,0,0,162,0,47,0,117,0,216,0,133,0,234,0,226,0,132,0,191,0,187,0,81,0,238,0,228,0,0,0,131,0,149,0,3,0,7,0,0,0,50,0,93,0,101,0,45,0,0,0,186,0,228,0,46,0,204,0,214,0,77,0,139,0,0,0,0,0,215,0,89,0,110,0,130,0,245,0,56,0,161,0,226,0,216,0,211,0,104,0,43,0,230,0,0,0,37,0,117,0,215,0,21,0,212,0,0,0,0,0,1,0,147,0,219,0,198,0,112,0,250,0,192,0,0,0,19,0,9,0,255,0,121,0,214,0,154,0,0,0,227,0,0,0,0,0,240,0,199,0,14,0,68,0,56,0,233,0,124,0,207,0,0,0,48,0,249,0,0,0,0,0,17,0,159,0,125,0,32,0,225,0,29,0,193,0,98,0,70,0,0,0,28,0,88,0,24,0,254,0,4,0,17,0,60,0,70,0,70,0,107,0,0,0,228,0,230,0,2,0,226,0,25,0,143,0,164,0,0,0,7,0,0,0,112,0,235,0,17,0,0,0,176,0,124,0,149,0,230,0,140,0,60,0,216,0,215,0,52,0,0,0,0,0,247,0,0,0,8,0,13,0,223,0,95,0,0,0,174,0,82,0,89,0,225,0,0,0,237,0,135,0,251,0,212,0,55,0,18,0,17,0,0,0,0,0,162,0,0,0,207,0,11,0,72,0,177,0,94,0,45,0,163,0,7,0,132,0,66,0,122,0,0,0,40,0,38,0,123,0,125,0,211,0,226,0,236,0,19,0,0,0,0,0,238,0,42,0,114,0,215,0,154,0,0,0,140,0,55,0,244,0,0,0,176,0,164,0,212,0,196,0,103,0,23,0,193,0,29,0,194,0,35,0,237,0,127,0,32,0,98,0,152,0,162,0,0,0,102,0,149,0,130,0,177,0,92,0,0,0,133,0,0,0,172,0,231,0,192,0,230,0,0,0,0,0,208,0,216,0,211,0,0,0,1,0,78,0,0,0,0,0,166,0,176,0,0,0,40,0,143,0,224,0,173,0,226,0,0,0,109,0,0,0,233,0,0,0,41,0,198,0,230,0,32,0,41,0,208,0,109,0,168,0,88,0,129,0,10,0,248,0,244,0,122,0,0,0,86,0,0,0,81,0,87,0,55,0,0,0,98,0,115,0,10,0,142,0,0,0,196,0,0,0,237,0,34,0,69,0,95,0,53,0,145,0,4,0,215,0,160,0,5,0,239,0,46,0,179,0,120,0,191,0,246,0,245,0,59,0,182,0,160,0,94,0,28,0,0,0,167,0,65,0,208,0,0,0,220,0,11,0,240,0,184,0,0,0,107,0,87,0,60,0,0,0,21,0,20,0,41,0,139,0,208,0,104,0,0,0,94,0,0,0,226,0,159,0,80,0,190,0,12,0,94,0,9,0,15,0,149,0,36,0,76,0,0,0,88,0,50,0,45,0,249,0,147,0,43,0,0,0,33,0,0,0,68,0,0,0,234,0,143,0,129,0,169,0,17,0,226,0,173,0,127,0,30,0,0,0,239,0,0,0,107,0,170,0,190,0,0,0,137,0,0,0,106,0,0,0,158,0,6,0,238,0,0,0,40,0,63,0,84,0,0,0,250,0,147,0,95,0,23,0,209,0,186,0,200,0,2,0,87,0,127,0,0,0,0,0,243,0,211,0,123,0,126,0,198,0,0,0,0,0,211,0,134,0,0,0,0,0,0,0,126,0,215,0,0,0,37,0,76,0,240,0,0,0,123,0,33,0,169,0,59,0,0,0,136,0,96,0,49,0,124,0,68,0,20,0,66,0,0,0,11,0,0,0,21,0,23,0,0,0,215,0,161,0,140,0,0,0,0,0,100,0,114,0,107,0,0,0,215,0,97,0,95,0,91,0,43,0,0,0,110,0,111,0,0,0,0,0,85,0,107,0,60,0,61,0,68,0,173,0,0,0,170,0,239,0,205,0,172,0,245,0,187,0,109,0,1,0,129,0,0,0,243,0,200,0,43,0,120,0,85,0,225,0,182,0,12,0,197,0,190,0,100,0,0,0,0,0,165,0,235,0,142,0,218,0,227,0,0,0,222,0,125,0,120,0,12,0,4,0,124,0,0,0,143,0,120,0,107,0,103,0,205,0,0,0,29,0,121,0,136,0,200,0,28,0,16,0,56,0,227,0,167,0,95,0,114,0,78,0,167,0,3,0,34,0,19,0,0,0,22,0,86,0,57,0,111,0,10,0,192,0,0,0,179,0,15,0,104,0,58,0,135,0,0,0,107,0,205,0,45,0,210,0,189,0,96,0,234,0,98,0,178,0,35,0,132,0,131,0,104,0,125,0,169,0,0,0,5,0,34,0,217,0,22,0,142,0,80,0,0,0,63,0,203,0,187,0,79,0,49,0,59,0,111,0,25,0,69,0,118,0,173,0,215,0,16,0,0,0,104,0,126,0,107,0,136,0,99,0,161,0,107,0,130,0,3,0,26,0,127,0,154,0,31,0,143,0,0,0,58,0,242,0);
signal scenario_full  : scenario_type := (53,31,85,31,186,31,8,31,52,31,95,31,7,31,154,31,104,31,104,30,18,31,181,31,101,31,33,31,54,31,57,31,57,30,57,29,171,31,206,31,158,31,29,31,107,31,107,30,171,31,66,31,78,31,88,31,88,30,88,29,234,31,40,31,76,31,13,31,28,31,31,31,18,31,172,31,172,31,172,30,138,31,164,31,55,31,102,31,158,31,231,31,239,31,239,30,135,31,135,30,160,31,42,31,180,31,180,30,139,31,112,31,238,31,42,31,2,31,2,30,178,31,247,31,70,31,30,31,30,30,120,31,120,30,120,29,79,31,27,31,27,30,27,29,102,31,233,31,42,31,42,30,124,31,188,31,171,31,171,30,184,31,167,31,167,30,167,29,58,31,255,31,169,31,81,31,160,31,65,31,65,30,104,31,92,31,92,30,64,31,148,31,53,31,20,31,93,31,93,30,215,31,228,31,52,31,118,31,18,31,99,31,194,31,195,31,195,30,195,29,35,31,96,31,176,31,176,30,199,31,199,30,33,31,146,31,146,30,206,31,128,31,150,31,2,31,236,31,46,31,77,31,240,31,22,31,129,31,74,31,178,31,98,31,10,31,39,31,238,31,187,31,10,31,10,30,106,31,186,31,39,31,164,31,255,31,175,31,78,31,138,31,101,31,10,31,163,31,69,31,69,30,6,31,84,31,38,31,53,31,232,31,232,30,232,29,232,28,232,27,232,26,233,31,75,31,150,31,21,31,100,31,134,31,150,31,176,31,176,30,176,31,107,31,40,31,24,31,214,31,214,30,98,31,248,31,193,31,193,30,201,31,72,31,105,31,205,31,248,31,111,31,193,31,203,31,53,31,75,31,121,31,221,31,144,31,31,31,31,30,87,31,1,31,47,31,138,31,138,30,238,31,238,30,238,29,238,28,238,27,11,31,106,31,106,30,251,31,218,31,130,31,217,31,212,31,182,31,57,31,67,31,146,31,153,31,35,31,1,31,94,31,201,31,179,31,153,31,206,31,141,31,54,31,54,30,92,31,192,31,205,31,46,31,59,31,58,31,85,31,131,31,246,31,224,31,224,30,224,29,248,31,11,31,83,31,175,31,172,31,172,30,19,31,209,31,209,30,209,29,79,31,79,30,109,31,120,31,111,31,17,31,17,30,17,29,255,31,240,31,110,31,56,31,4,31,4,30,4,29,134,31,104,31,111,31,33,31,90,31,110,31,110,30,232,31,232,30,102,31,109,31,238,31,238,30,160,31,81,31,3,31,138,31,138,30,233,31,217,31,217,30,37,31,216,31,174,31,250,31,105,31,105,30,101,31,112,31,162,31,80,31,62,31,36,31,139,31,139,30,162,31,47,31,117,31,216,31,133,31,234,31,226,31,132,31,191,31,187,31,81,31,238,31,228,31,228,30,131,31,149,31,3,31,7,31,7,30,50,31,93,31,101,31,45,31,45,30,186,31,228,31,46,31,204,31,214,31,77,31,139,31,139,30,139,29,215,31,89,31,110,31,130,31,245,31,56,31,161,31,226,31,216,31,211,31,104,31,43,31,230,31,230,30,37,31,117,31,215,31,21,31,212,31,212,30,212,29,1,31,147,31,219,31,198,31,112,31,250,31,192,31,192,30,19,31,9,31,255,31,121,31,214,31,154,31,154,30,227,31,227,30,227,29,240,31,199,31,14,31,68,31,56,31,233,31,124,31,207,31,207,30,48,31,249,31,249,30,249,29,17,31,159,31,125,31,32,31,225,31,29,31,193,31,98,31,70,31,70,30,28,31,88,31,24,31,254,31,4,31,17,31,60,31,70,31,70,31,107,31,107,30,228,31,230,31,2,31,226,31,25,31,143,31,164,31,164,30,7,31,7,30,112,31,235,31,17,31,17,30,176,31,124,31,149,31,230,31,140,31,60,31,216,31,215,31,52,31,52,30,52,29,247,31,247,30,8,31,13,31,223,31,95,31,95,30,174,31,82,31,89,31,225,31,225,30,237,31,135,31,251,31,212,31,55,31,18,31,17,31,17,30,17,29,162,31,162,30,207,31,11,31,72,31,177,31,94,31,45,31,163,31,7,31,132,31,66,31,122,31,122,30,40,31,38,31,123,31,125,31,211,31,226,31,236,31,19,31,19,30,19,29,238,31,42,31,114,31,215,31,154,31,154,30,140,31,55,31,244,31,244,30,176,31,164,31,212,31,196,31,103,31,23,31,193,31,29,31,194,31,35,31,237,31,127,31,32,31,98,31,152,31,162,31,162,30,102,31,149,31,130,31,177,31,92,31,92,30,133,31,133,30,172,31,231,31,192,31,230,31,230,30,230,29,208,31,216,31,211,31,211,30,1,31,78,31,78,30,78,29,166,31,176,31,176,30,40,31,143,31,224,31,173,31,226,31,226,30,109,31,109,30,233,31,233,30,41,31,198,31,230,31,32,31,41,31,208,31,109,31,168,31,88,31,129,31,10,31,248,31,244,31,122,31,122,30,86,31,86,30,81,31,87,31,55,31,55,30,98,31,115,31,10,31,142,31,142,30,196,31,196,30,237,31,34,31,69,31,95,31,53,31,145,31,4,31,215,31,160,31,5,31,239,31,46,31,179,31,120,31,191,31,246,31,245,31,59,31,182,31,160,31,94,31,28,31,28,30,167,31,65,31,208,31,208,30,220,31,11,31,240,31,184,31,184,30,107,31,87,31,60,31,60,30,21,31,20,31,41,31,139,31,208,31,104,31,104,30,94,31,94,30,226,31,159,31,80,31,190,31,12,31,94,31,9,31,15,31,149,31,36,31,76,31,76,30,88,31,50,31,45,31,249,31,147,31,43,31,43,30,33,31,33,30,68,31,68,30,234,31,143,31,129,31,169,31,17,31,226,31,173,31,127,31,30,31,30,30,239,31,239,30,107,31,170,31,190,31,190,30,137,31,137,30,106,31,106,30,158,31,6,31,238,31,238,30,40,31,63,31,84,31,84,30,250,31,147,31,95,31,23,31,209,31,186,31,200,31,2,31,87,31,127,31,127,30,127,29,243,31,211,31,123,31,126,31,198,31,198,30,198,29,211,31,134,31,134,30,134,29,134,28,126,31,215,31,215,30,37,31,76,31,240,31,240,30,123,31,33,31,169,31,59,31,59,30,136,31,96,31,49,31,124,31,68,31,20,31,66,31,66,30,11,31,11,30,21,31,23,31,23,30,215,31,161,31,140,31,140,30,140,29,100,31,114,31,107,31,107,30,215,31,97,31,95,31,91,31,43,31,43,30,110,31,111,31,111,30,111,29,85,31,107,31,60,31,61,31,68,31,173,31,173,30,170,31,239,31,205,31,172,31,245,31,187,31,109,31,1,31,129,31,129,30,243,31,200,31,43,31,120,31,85,31,225,31,182,31,12,31,197,31,190,31,100,31,100,30,100,29,165,31,235,31,142,31,218,31,227,31,227,30,222,31,125,31,120,31,12,31,4,31,124,31,124,30,143,31,120,31,107,31,103,31,205,31,205,30,29,31,121,31,136,31,200,31,28,31,16,31,56,31,227,31,167,31,95,31,114,31,78,31,167,31,3,31,34,31,19,31,19,30,22,31,86,31,57,31,111,31,10,31,192,31,192,30,179,31,15,31,104,31,58,31,135,31,135,30,107,31,205,31,45,31,210,31,189,31,96,31,234,31,98,31,178,31,35,31,132,31,131,31,104,31,125,31,169,31,169,30,5,31,34,31,217,31,22,31,142,31,80,31,80,30,63,31,203,31,187,31,79,31,49,31,59,31,111,31,25,31,69,31,118,31,173,31,215,31,16,31,16,30,104,31,126,31,107,31,136,31,99,31,161,31,107,31,130,31,3,31,26,31,127,31,154,31,31,31,143,31,143,30,58,31,242,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
