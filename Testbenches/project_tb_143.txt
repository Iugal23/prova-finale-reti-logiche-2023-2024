-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 315;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (84,0,0,0,0,0,4,0,0,0,33,0,231,0,204,0,188,0,97,0,166,0,78,0,83,0,0,0,66,0,192,0,158,0,34,0,130,0,137,0,79,0,101,0,186,0,68,0,152,0,224,0,0,0,49,0,0,0,0,0,212,0,1,0,112,0,161,0,0,0,182,0,200,0,149,0,57,0,223,0,0,0,158,0,221,0,0,0,132,0,133,0,246,0,176,0,26,0,168,0,127,0,0,0,0,0,49,0,117,0,21,0,144,0,0,0,241,0,0,0,253,0,137,0,30,0,191,0,31,0,39,0,159,0,89,0,0,0,0,0,155,0,230,0,0,0,180,0,127,0,28,0,136,0,0,0,117,0,154,0,166,0,0,0,252,0,0,0,34,0,16,0,0,0,193,0,13,0,0,0,142,0,163,0,25,0,71,0,97,0,249,0,0,0,48,0,56,0,38,0,159,0,0,0,15,0,192,0,184,0,254,0,131,0,0,0,149,0,61,0,72,0,24,0,0,0,41,0,162,0,209,0,253,0,0,0,55,0,118,0,0,0,142,0,32,0,137,0,63,0,77,0,176,0,0,0,0,0,0,0,0,0,0,0,249,0,89,0,238,0,0,0,166,0,168,0,181,0,91,0,137,0,9,0,0,0,199,0,144,0,50,0,0,0,155,0,0,0,107,0,161,0,35,0,92,0,118,0,142,0,49,0,0,0,171,0,240,0,13,0,244,0,112,0,0,0,122,0,0,0,104,0,183,0,76,0,238,0,79,0,92,0,0,0,21,0,204,0,200,0,0,0,4,0,61,0,0,0,21,0,34,0,164,0,150,0,43,0,79,0,201,0,27,0,3,0,54,0,0,0,162,0,44,0,14,0,236,0,108,0,0,0,58,0,7,0,157,0,67,0,0,0,0,0,0,0,7,0,190,0,147,0,237,0,0,0,0,0,201,0,113,0,213,0,219,0,157,0,0,0,66,0,61,0,63,0,0,0,0,0,0,0,0,0,42,0,182,0,181,0,0,0,231,0,0,0,3,0,155,0,87,0,0,0,0,0,195,0,189,0,152,0,0,0,162,0,12,0,0,0,67,0,11,0,212,0,197,0,27,0,98,0,211,0,198,0,95,0,179,0,100,0,65,0,163,0,42,0,0,0,251,0,0,0,0,0,7,0,172,0,0,0,35,0,0,0,206,0,216,0,77,0,182,0,227,0,188,0,182,0,86,0,0,0,39,0,0,0,59,0,138,0,119,0,182,0,224,0,245,0,66,0,0,0,182,0,0,0,0,0,35,0,249,0,168,0,128,0,54,0,19,0,0,0,0,0,90,0,0,0,168,0,150,0,0,0,0,0,80,0,100,0,106,0,87,0,11,0,211,0,10,0,0,0,113,0,192,0,5,0,206,0,198,0,178,0,182,0,26,0);
signal scenario_full  : scenario_type := (84,31,84,30,84,29,4,31,4,30,33,31,231,31,204,31,188,31,97,31,166,31,78,31,83,31,83,30,66,31,192,31,158,31,34,31,130,31,137,31,79,31,101,31,186,31,68,31,152,31,224,31,224,30,49,31,49,30,49,29,212,31,1,31,112,31,161,31,161,30,182,31,200,31,149,31,57,31,223,31,223,30,158,31,221,31,221,30,132,31,133,31,246,31,176,31,26,31,168,31,127,31,127,30,127,29,49,31,117,31,21,31,144,31,144,30,241,31,241,30,253,31,137,31,30,31,191,31,31,31,39,31,159,31,89,31,89,30,89,29,155,31,230,31,230,30,180,31,127,31,28,31,136,31,136,30,117,31,154,31,166,31,166,30,252,31,252,30,34,31,16,31,16,30,193,31,13,31,13,30,142,31,163,31,25,31,71,31,97,31,249,31,249,30,48,31,56,31,38,31,159,31,159,30,15,31,192,31,184,31,254,31,131,31,131,30,149,31,61,31,72,31,24,31,24,30,41,31,162,31,209,31,253,31,253,30,55,31,118,31,118,30,142,31,32,31,137,31,63,31,77,31,176,31,176,30,176,29,176,28,176,27,176,26,249,31,89,31,238,31,238,30,166,31,168,31,181,31,91,31,137,31,9,31,9,30,199,31,144,31,50,31,50,30,155,31,155,30,107,31,161,31,35,31,92,31,118,31,142,31,49,31,49,30,171,31,240,31,13,31,244,31,112,31,112,30,122,31,122,30,104,31,183,31,76,31,238,31,79,31,92,31,92,30,21,31,204,31,200,31,200,30,4,31,61,31,61,30,21,31,34,31,164,31,150,31,43,31,79,31,201,31,27,31,3,31,54,31,54,30,162,31,44,31,14,31,236,31,108,31,108,30,58,31,7,31,157,31,67,31,67,30,67,29,67,28,7,31,190,31,147,31,237,31,237,30,237,29,201,31,113,31,213,31,219,31,157,31,157,30,66,31,61,31,63,31,63,30,63,29,63,28,63,27,42,31,182,31,181,31,181,30,231,31,231,30,3,31,155,31,87,31,87,30,87,29,195,31,189,31,152,31,152,30,162,31,12,31,12,30,67,31,11,31,212,31,197,31,27,31,98,31,211,31,198,31,95,31,179,31,100,31,65,31,163,31,42,31,42,30,251,31,251,30,251,29,7,31,172,31,172,30,35,31,35,30,206,31,216,31,77,31,182,31,227,31,188,31,182,31,86,31,86,30,39,31,39,30,59,31,138,31,119,31,182,31,224,31,245,31,66,31,66,30,182,31,182,30,182,29,35,31,249,31,168,31,128,31,54,31,19,31,19,30,19,29,90,31,90,30,168,31,150,31,150,30,150,29,80,31,100,31,106,31,87,31,11,31,211,31,10,31,10,30,113,31,192,31,5,31,206,31,198,31,178,31,182,31,26,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
