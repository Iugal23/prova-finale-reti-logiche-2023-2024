-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 863;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (230,0,0,0,26,0,163,0,236,0,82,0,10,0,151,0,7,0,0,0,61,0,144,0,0,0,15,0,6,0,96,0,231,0,143,0,3,0,0,0,254,0,71,0,153,0,146,0,195,0,207,0,0,0,97,0,8,0,228,0,135,0,0,0,53,0,39,0,138,0,0,0,35,0,171,0,0,0,10,0,72,0,189,0,163,0,86,0,41,0,220,0,89,0,0,0,0,0,21,0,0,0,33,0,106,0,19,0,68,0,71,0,0,0,36,0,189,0,185,0,182,0,37,0,0,0,83,0,4,0,132,0,17,0,16,0,22,0,80,0,254,0,6,0,121,0,155,0,18,0,0,0,165,0,228,0,109,0,234,0,46,0,1,0,0,0,67,0,0,0,245,0,0,0,212,0,160,0,128,0,67,0,92,0,184,0,86,0,228,0,169,0,248,0,137,0,234,0,0,0,69,0,0,0,56,0,172,0,137,0,0,0,37,0,130,0,116,0,159,0,7,0,189,0,102,0,63,0,83,0,68,0,4,0,91,0,0,0,146,0,200,0,0,0,0,0,0,0,248,0,203,0,44,0,0,0,10,0,11,0,198,0,239,0,58,0,94,0,201,0,28,0,19,0,233,0,122,0,0,0,202,0,235,0,37,0,132,0,61,0,28,0,114,0,21,0,114,0,0,0,214,0,166,0,154,0,131,0,255,0,31,0,0,0,22,0,233,0,240,0,143,0,198,0,247,0,119,0,5,0,11,0,37,0,0,0,72,0,102,0,0,0,0,0,231,0,101,0,132,0,123,0,143,0,150,0,236,0,0,0,194,0,82,0,55,0,45,0,169,0,0,0,72,0,141,0,128,0,232,0,83,0,130,0,149,0,26,0,194,0,204,0,232,0,192,0,176,0,254,0,195,0,70,0,17,0,0,0,178,0,98,0,0,0,250,0,0,0,45,0,37,0,0,0,37,0,187,0,24,0,134,0,90,0,111,0,51,0,62,0,0,0,90,0,156,0,0,0,45,0,128,0,94,0,146,0,55,0,41,0,15,0,11,0,147,0,5,0,178,0,148,0,7,0,7,0,216,0,241,0,89,0,193,0,192,0,0,0,9,0,231,0,55,0,0,0,0,0,173,0,47,0,239,0,114,0,80,0,82,0,7,0,127,0,192,0,42,0,133,0,128,0,0,0,0,0,165,0,163,0,204,0,43,0,43,0,113,0,0,0,29,0,77,0,0,0,3,0,228,0,74,0,112,0,176,0,62,0,0,0,247,0,35,0,34,0,151,0,119,0,181,0,177,0,0,0,67,0,32,0,149,0,168,0,3,0,190,0,12,0,0,0,202,0,186,0,104,0,202,0,3,0,221,0,217,0,69,0,216,0,217,0,78,0,32,0,144,0,55,0,99,0,193,0,169,0,138,0,50,0,99,0,165,0,31,0,105,0,124,0,67,0,119,0,86,0,0,0,145,0,113,0,0,0,150,0,4,0,0,0,175,0,116,0,198,0,19,0,93,0,17,0,159,0,157,0,148,0,0,0,39,0,95,0,211,0,189,0,0,0,0,0,8,0,0,0,41,0,221,0,0,0,0,0,184,0,0,0,0,0,162,0,0,0,251,0,243,0,8,0,0,0,58,0,65,0,190,0,200,0,205,0,15,0,100,0,0,0,65,0,17,0,243,0,49,0,127,0,121,0,69,0,118,0,81,0,0,0,193,0,77,0,144,0,210,0,13,0,20,0,205,0,196,0,0,0,20,0,243,0,24,0,0,0,8,0,87,0,176,0,31,0,160,0,250,0,107,0,59,0,0,0,0,0,109,0,23,0,191,0,0,0,13,0,192,0,66,0,245,0,117,0,137,0,126,0,0,0,164,0,0,0,146,0,5,0,153,0,0,0,57,0,133,0,152,0,0,0,42,0,0,0,245,0,22,0,52,0,0,0,254,0,121,0,6,0,189,0,25,0,63,0,74,0,73,0,86,0,0,0,0,0,120,0,181,0,230,0,144,0,195,0,183,0,25,0,18,0,204,0,45,0,247,0,0,0,0,0,255,0,0,0,14,0,18,0,9,0,0,0,0,0,213,0,44,0,203,0,59,0,11,0,0,0,232,0,222,0,83,0,210,0,26,0,0,0,99,0,49,0,106,0,0,0,196,0,155,0,0,0,223,0,0,0,110,0,0,0,181,0,0,0,191,0,194,0,7,0,54,0,121,0,0,0,222,0,72,0,34,0,223,0,108,0,229,0,0,0,160,0,175,0,39,0,71,0,70,0,74,0,58,0,0,0,148,0,175,0,185,0,0,0,234,0,208,0,170,0,124,0,91,0,151,0,0,0,39,0,139,0,103,0,167,0,46,0,137,0,179,0,50,0,60,0,254,0,220,0,65,0,0,0,96,0,57,0,254,0,222,0,248,0,0,0,131,0,245,0,243,0,229,0,26,0,93,0,0,0,0,0,9,0,20,0,0,0,90,0,0,0,254,0,0,0,228,0,0,0,19,0,132,0,152,0,184,0,73,0,209,0,215,0,49,0,89,0,14,0,38,0,0,0,6,0,175,0,76,0,248,0,150,0,199,0,129,0,40,0,110,0,249,0,218,0,153,0,140,0,78,0,56,0,50,0,0,0,170,0,148,0,110,0,0,0,0,0,53,0,50,0,0,0,160,0,173,0,74,0,131,0,189,0,111,0,124,0,74,0,208,0,232,0,221,0,0,0,207,0,135,0,0,0,219,0,167,0,216,0,0,0,4,0,191,0,174,0,197,0,114,0,0,0,233,0,220,0,0,0,119,0,106,0,162,0,200,0,239,0,124,0,225,0,176,0,125,0,90,0,53,0,0,0,195,0,25,0,147,0,147,0,243,0,0,0,115,0,45,0,172,0,211,0,62,0,160,0,0,0,60,0,205,0,0,0,155,0,68,0,0,0,30,0,32,0,199,0,42,0,152,0,125,0,254,0,245,0,19,0,99,0,122,0,81,0,200,0,135,0,19,0,21,0,214,0,188,0,238,0,237,0,144,0,252,0,63,0,17,0,70,0,246,0,130,0,238,0,203,0,8,0,162,0,178,0,223,0,169,0,72,0,0,0,77,0,165,0,99,0,90,0,37,0,203,0,61,0,54,0,101,0,206,0,33,0,168,0,0,0,0,0,9,0,51,0,178,0,65,0,0,0,160,0,134,0,62,0,59,0,145,0,108,0,149,0,31,0,190,0,0,0,74,0,0,0,208,0,8,0,51,0,90,0,0,0,0,0,0,0,242,0,127,0,76,0,155,0,31,0,147,0,0,0,102,0,111,0,164,0,193,0,141,0,174,0,86,0,252,0,60,0,53,0,49,0,0,0,54,0,39,0,0,0,155,0,210,0,0,0,179,0,111,0,243,0,253,0,167,0,77,0,148,0,43,0,236,0,183,0,122,0,0,0,23,0,0,0,143,0,43,0,83,0,0,0,49,0,111,0,241,0,250,0,166,0,155,0,0,0,0,0,0,0,180,0,27,0,218,0,0,0,101,0,12,0,0,0,50,0,213,0,2,0,247,0,222,0,193,0,245,0,169,0,193,0,17,0,13,0,172,0,0,0,95,0,242,0,72,0,31,0,0,0,180,0,49,0,126,0,44,0,0,0,93,0,244,0,24,0,22,0,33,0,11,0,0,0,104,0,40,0,0,0,39,0,44,0,0,0,63,0,187,0,103,0,162,0,142,0,50,0,0,0,48,0,75,0,19,0,197,0,204,0,40,0,0,0,146,0,187,0,0,0,111,0,0,0,20,0,51,0,113,0,0,0,0,0,13,0,57,0,140,0,54,0,7,0,0,0,132,0,0,0,0,0,212,0,0,0,137,0,228,0,0,0,204,0,196,0,8,0,82,0,223,0,168,0);
signal scenario_full  : scenario_type := (230,31,230,30,26,31,163,31,236,31,82,31,10,31,151,31,7,31,7,30,61,31,144,31,144,30,15,31,6,31,96,31,231,31,143,31,3,31,3,30,254,31,71,31,153,31,146,31,195,31,207,31,207,30,97,31,8,31,228,31,135,31,135,30,53,31,39,31,138,31,138,30,35,31,171,31,171,30,10,31,72,31,189,31,163,31,86,31,41,31,220,31,89,31,89,30,89,29,21,31,21,30,33,31,106,31,19,31,68,31,71,31,71,30,36,31,189,31,185,31,182,31,37,31,37,30,83,31,4,31,132,31,17,31,16,31,22,31,80,31,254,31,6,31,121,31,155,31,18,31,18,30,165,31,228,31,109,31,234,31,46,31,1,31,1,30,67,31,67,30,245,31,245,30,212,31,160,31,128,31,67,31,92,31,184,31,86,31,228,31,169,31,248,31,137,31,234,31,234,30,69,31,69,30,56,31,172,31,137,31,137,30,37,31,130,31,116,31,159,31,7,31,189,31,102,31,63,31,83,31,68,31,4,31,91,31,91,30,146,31,200,31,200,30,200,29,200,28,248,31,203,31,44,31,44,30,10,31,11,31,198,31,239,31,58,31,94,31,201,31,28,31,19,31,233,31,122,31,122,30,202,31,235,31,37,31,132,31,61,31,28,31,114,31,21,31,114,31,114,30,214,31,166,31,154,31,131,31,255,31,31,31,31,30,22,31,233,31,240,31,143,31,198,31,247,31,119,31,5,31,11,31,37,31,37,30,72,31,102,31,102,30,102,29,231,31,101,31,132,31,123,31,143,31,150,31,236,31,236,30,194,31,82,31,55,31,45,31,169,31,169,30,72,31,141,31,128,31,232,31,83,31,130,31,149,31,26,31,194,31,204,31,232,31,192,31,176,31,254,31,195,31,70,31,17,31,17,30,178,31,98,31,98,30,250,31,250,30,45,31,37,31,37,30,37,31,187,31,24,31,134,31,90,31,111,31,51,31,62,31,62,30,90,31,156,31,156,30,45,31,128,31,94,31,146,31,55,31,41,31,15,31,11,31,147,31,5,31,178,31,148,31,7,31,7,31,216,31,241,31,89,31,193,31,192,31,192,30,9,31,231,31,55,31,55,30,55,29,173,31,47,31,239,31,114,31,80,31,82,31,7,31,127,31,192,31,42,31,133,31,128,31,128,30,128,29,165,31,163,31,204,31,43,31,43,31,113,31,113,30,29,31,77,31,77,30,3,31,228,31,74,31,112,31,176,31,62,31,62,30,247,31,35,31,34,31,151,31,119,31,181,31,177,31,177,30,67,31,32,31,149,31,168,31,3,31,190,31,12,31,12,30,202,31,186,31,104,31,202,31,3,31,221,31,217,31,69,31,216,31,217,31,78,31,32,31,144,31,55,31,99,31,193,31,169,31,138,31,50,31,99,31,165,31,31,31,105,31,124,31,67,31,119,31,86,31,86,30,145,31,113,31,113,30,150,31,4,31,4,30,175,31,116,31,198,31,19,31,93,31,17,31,159,31,157,31,148,31,148,30,39,31,95,31,211,31,189,31,189,30,189,29,8,31,8,30,41,31,221,31,221,30,221,29,184,31,184,30,184,29,162,31,162,30,251,31,243,31,8,31,8,30,58,31,65,31,190,31,200,31,205,31,15,31,100,31,100,30,65,31,17,31,243,31,49,31,127,31,121,31,69,31,118,31,81,31,81,30,193,31,77,31,144,31,210,31,13,31,20,31,205,31,196,31,196,30,20,31,243,31,24,31,24,30,8,31,87,31,176,31,31,31,160,31,250,31,107,31,59,31,59,30,59,29,109,31,23,31,191,31,191,30,13,31,192,31,66,31,245,31,117,31,137,31,126,31,126,30,164,31,164,30,146,31,5,31,153,31,153,30,57,31,133,31,152,31,152,30,42,31,42,30,245,31,22,31,52,31,52,30,254,31,121,31,6,31,189,31,25,31,63,31,74,31,73,31,86,31,86,30,86,29,120,31,181,31,230,31,144,31,195,31,183,31,25,31,18,31,204,31,45,31,247,31,247,30,247,29,255,31,255,30,14,31,18,31,9,31,9,30,9,29,213,31,44,31,203,31,59,31,11,31,11,30,232,31,222,31,83,31,210,31,26,31,26,30,99,31,49,31,106,31,106,30,196,31,155,31,155,30,223,31,223,30,110,31,110,30,181,31,181,30,191,31,194,31,7,31,54,31,121,31,121,30,222,31,72,31,34,31,223,31,108,31,229,31,229,30,160,31,175,31,39,31,71,31,70,31,74,31,58,31,58,30,148,31,175,31,185,31,185,30,234,31,208,31,170,31,124,31,91,31,151,31,151,30,39,31,139,31,103,31,167,31,46,31,137,31,179,31,50,31,60,31,254,31,220,31,65,31,65,30,96,31,57,31,254,31,222,31,248,31,248,30,131,31,245,31,243,31,229,31,26,31,93,31,93,30,93,29,9,31,20,31,20,30,90,31,90,30,254,31,254,30,228,31,228,30,19,31,132,31,152,31,184,31,73,31,209,31,215,31,49,31,89,31,14,31,38,31,38,30,6,31,175,31,76,31,248,31,150,31,199,31,129,31,40,31,110,31,249,31,218,31,153,31,140,31,78,31,56,31,50,31,50,30,170,31,148,31,110,31,110,30,110,29,53,31,50,31,50,30,160,31,173,31,74,31,131,31,189,31,111,31,124,31,74,31,208,31,232,31,221,31,221,30,207,31,135,31,135,30,219,31,167,31,216,31,216,30,4,31,191,31,174,31,197,31,114,31,114,30,233,31,220,31,220,30,119,31,106,31,162,31,200,31,239,31,124,31,225,31,176,31,125,31,90,31,53,31,53,30,195,31,25,31,147,31,147,31,243,31,243,30,115,31,45,31,172,31,211,31,62,31,160,31,160,30,60,31,205,31,205,30,155,31,68,31,68,30,30,31,32,31,199,31,42,31,152,31,125,31,254,31,245,31,19,31,99,31,122,31,81,31,200,31,135,31,19,31,21,31,214,31,188,31,238,31,237,31,144,31,252,31,63,31,17,31,70,31,246,31,130,31,238,31,203,31,8,31,162,31,178,31,223,31,169,31,72,31,72,30,77,31,165,31,99,31,90,31,37,31,203,31,61,31,54,31,101,31,206,31,33,31,168,31,168,30,168,29,9,31,51,31,178,31,65,31,65,30,160,31,134,31,62,31,59,31,145,31,108,31,149,31,31,31,190,31,190,30,74,31,74,30,208,31,8,31,51,31,90,31,90,30,90,29,90,28,242,31,127,31,76,31,155,31,31,31,147,31,147,30,102,31,111,31,164,31,193,31,141,31,174,31,86,31,252,31,60,31,53,31,49,31,49,30,54,31,39,31,39,30,155,31,210,31,210,30,179,31,111,31,243,31,253,31,167,31,77,31,148,31,43,31,236,31,183,31,122,31,122,30,23,31,23,30,143,31,43,31,83,31,83,30,49,31,111,31,241,31,250,31,166,31,155,31,155,30,155,29,155,28,180,31,27,31,218,31,218,30,101,31,12,31,12,30,50,31,213,31,2,31,247,31,222,31,193,31,245,31,169,31,193,31,17,31,13,31,172,31,172,30,95,31,242,31,72,31,31,31,31,30,180,31,49,31,126,31,44,31,44,30,93,31,244,31,24,31,22,31,33,31,11,31,11,30,104,31,40,31,40,30,39,31,44,31,44,30,63,31,187,31,103,31,162,31,142,31,50,31,50,30,48,31,75,31,19,31,197,31,204,31,40,31,40,30,146,31,187,31,187,30,111,31,111,30,20,31,51,31,113,31,113,30,113,29,13,31,57,31,140,31,54,31,7,31,7,30,132,31,132,30,132,29,212,31,212,30,137,31,228,31,228,30,204,31,196,31,8,31,82,31,223,31,168,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
