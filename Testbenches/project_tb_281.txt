-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 978;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (214,0,133,0,91,0,252,0,0,0,244,0,234,0,64,0,103,0,0,0,45,0,60,0,245,0,96,0,104,0,17,0,93,0,159,0,196,0,0,0,58,0,0,0,189,0,150,0,3,0,219,0,181,0,43,0,98,0,0,0,0,0,94,0,33,0,184,0,240,0,0,0,15,0,95,0,38,0,200,0,72,0,221,0,113,0,172,0,220,0,214,0,42,0,0,0,0,0,81,0,19,0,217,0,143,0,113,0,205,0,92,0,206,0,42,0,176,0,0,0,0,0,160,0,178,0,0,0,180,0,222,0,89,0,86,0,0,0,0,0,60,0,228,0,198,0,140,0,84,0,0,0,214,0,86,0,10,0,82,0,136,0,0,0,222,0,70,0,0,0,43,0,208,0,195,0,219,0,218,0,92,0,0,0,83,0,77,0,0,0,0,0,0,0,203,0,1,0,59,0,186,0,240,0,112,0,189,0,235,0,114,0,157,0,66,0,27,0,37,0,66,0,0,0,144,0,186,0,138,0,85,0,120,0,62,0,0,0,0,0,0,0,225,0,29,0,202,0,0,0,121,0,0,0,164,0,228,0,0,0,198,0,71,0,0,0,0,0,162,0,91,0,134,0,0,0,253,0,74,0,133,0,72,0,253,0,241,0,212,0,75,0,0,0,239,0,97,0,195,0,121,0,64,0,181,0,218,0,0,0,65,0,2,0,153,0,46,0,64,0,240,0,118,0,0,0,100,0,58,0,106,0,144,0,118,0,160,0,139,0,0,0,236,0,0,0,0,0,57,0,101,0,178,0,82,0,0,0,8,0,239,0,0,0,0,0,15,0,166,0,44,0,150,0,189,0,234,0,38,0,47,0,217,0,252,0,73,0,0,0,159,0,7,0,147,0,0,0,0,0,248,0,178,0,250,0,0,0,211,0,101,0,193,0,42,0,0,0,153,0,144,0,98,0,138,0,0,0,161,0,253,0,179,0,197,0,52,0,144,0,232,0,231,0,45,0,139,0,199,0,105,0,49,0,231,0,163,0,146,0,36,0,131,0,198,0,0,0,71,0,173,0,32,0,11,0,27,0,89,0,175,0,110,0,20,0,0,0,188,0,76,0,206,0,24,0,137,0,235,0,85,0,226,0,106,0,0,0,212,0,58,0,0,0,123,0,41,0,0,0,122,0,197,0,119,0,141,0,180,0,75,0,86,0,216,0,0,0,67,0,201,0,0,0,177,0,136,0,178,0,9,0,69,0,61,0,0,0,44,0,242,0,0,0,0,0,227,0,78,0,179,0,210,0,4,0,1,0,177,0,21,0,190,0,223,0,34,0,0,0,43,0,255,0,247,0,21,0,171,0,31,0,163,0,27,0,80,0,143,0,113,0,18,0,166,0,183,0,1,0,195,0,12,0,91,0,33,0,116,0,71,0,197,0,192,0,97,0,50,0,14,0,177,0,133,0,0,0,113,0,97,0,0,0,81,0,189,0,111,0,21,0,0,0,134,0,112,0,0,0,157,0,177,0,62,0,198,0,128,0,193,0,194,0,32,0,160,0,27,0,11,0,44,0,242,0,111,0,254,0,63,0,120,0,0,0,140,0,189,0,205,0,175,0,76,0,197,0,58,0,0,0,0,0,192,0,9,0,60,0,98,0,0,0,0,0,0,0,24,0,4,0,159,0,166,0,158,0,202,0,0,0,185,0,0,0,74,0,86,0,98,0,131,0,233,0,26,0,97,0,17,0,153,0,140,0,0,0,0,0,0,0,47,0,0,0,179,0,143,0,83,0,12,0,50,0,36,0,44,0,231,0,45,0,149,0,142,0,249,0,138,0,79,0,0,0,0,0,12,0,0,0,3,0,0,0,11,0,219,0,250,0,31,0,90,0,19,0,222,0,164,0,160,0,125,0,141,0,46,0,10,0,36,0,171,0,0,0,76,0,0,0,0,0,0,0,29,0,105,0,213,0,211,0,190,0,179,0,101,0,14,0,202,0,234,0,31,0,0,0,32,0,240,0,60,0,0,0,153,0,215,0,66,0,0,0,0,0,43,0,68,0,12,0,0,0,0,0,198,0,0,0,247,0,94,0,171,0,81,0,197,0,0,0,225,0,201,0,25,0,6,0,124,0,0,0,34,0,82,0,32,0,130,0,137,0,75,0,0,0,27,0,191,0,0,0,0,0,2,0,107,0,123,0,228,0,134,0,42,0,0,0,95,0,145,0,0,0,61,0,142,0,154,0,124,0,213,0,104,0,103,0,158,0,193,0,47,0,91,0,223,0,0,0,125,0,83,0,0,0,53,0,0,0,175,0,101,0,158,0,85,0,0,0,207,0,97,0,65,0,245,0,137,0,200,0,206,0,0,0,0,0,157,0,124,0,62,0,0,0,18,0,42,0,88,0,0,0,89,0,32,0,61,0,27,0,0,0,16,0,0,0,239,0,200,0,230,0,248,0,8,0,100,0,232,0,0,0,20,0,29,0,47,0,209,0,156,0,183,0,185,0,153,0,48,0,225,0,236,0,194,0,240,0,41,0,131,0,162,0,196,0,167,0,0,0,232,0,184,0,0,0,245,0,0,0,212,0,7,0,221,0,22,0,198,0,204,0,24,0,0,0,48,0,0,0,235,0,0,0,106,0,56,0,157,0,151,0,236,0,141,0,214,0,0,0,0,0,0,0,232,0,0,0,241,0,0,0,113,0,88,0,35,0,187,0,224,0,20,0,38,0,251,0,138,0,125,0,176,0,0,0,246,0,121,0,0,0,21,0,90,0,16,0,157,0,0,0,124,0,0,0,103,0,149,0,83,0,0,0,205,0,91,0,230,0,0,0,0,0,29,0,217,0,118,0,10,0,0,0,108,0,110,0,234,0,254,0,41,0,0,0,242,0,0,0,175,0,0,0,32,0,0,0,61,0,77,0,122,0,106,0,114,0,152,0,222,0,98,0,28,0,77,0,230,0,0,0,44,0,0,0,0,0,220,0,246,0,23,0,119,0,0,0,72,0,172,0,41,0,0,0,0,0,156,0,233,0,72,0,199,0,191,0,0,0,9,0,244,0,170,0,100,0,0,0,67,0,125,0,39,0,0,0,35,0,7,0,202,0,27,0,245,0,2,0,69,0,103,0,103,0,221,0,141,0,94,0,81,0,80,0,0,0,204,0,44,0,41,0,0,0,0,0,163,0,194,0,102,0,0,0,84,0,135,0,27,0,0,0,193,0,230,0,76,0,0,0,194,0,0,0,227,0,162,0,0,0,0,0,0,0,0,0,136,0,0,0,79,0,23,0,231,0,162,0,171,0,251,0,36,0,130,0,254,0,254,0,181,0,0,0,0,0,38,0,140,0,0,0,18,0,235,0,153,0,13,0,0,0,88,0,42,0,0,0,219,0,54,0,32,0,19,0,219,0,67,0,210,0,56,0,217,0,27,0,229,0,62,0,151,0,0,0,38,0,249,0,131,0,117,0,0,0,122,0,180,0,0,0,249,0,0,0,57,0,38,0,53,0,9,0,76,0,86,0,198,0,0,0,225,0,153,0,198,0,29,0,115,0,109,0,197,0,206,0,237,0,180,0,188,0,95,0,0,0,0,0,0,0,253,0,223,0,203,0,14,0,0,0,0,0,42,0,170,0,91,0,239,0,249,0,0,0,207,0,152,0,89,0,138,0,230,0,42,0,132,0,141,0,88,0,197,0,0,0,46,0,232,0,44,0,242,0,105,0,0,0,132,0,0,0,43,0,89,0,29,0,213,0,35,0,90,0,206,0,0,0,216,0,0,0,52,0,0,0,70,0,176,0,25,0,0,0,211,0,0,0,0,0,154,0,237,0,106,0,170,0,119,0,121,0,127,0,3,0,137,0,162,0,0,0,0,0,0,0,68,0,185,0,0,0,5,0,144,0,43,0,13,0,243,0,199,0,214,0,0,0,0,0,101,0,42,0,5,0,216,0,58,0,117,0,81,0,0,0,187,0,228,0,0,0,123,0,187,0,71,0,214,0,0,0,234,0,218,0,0,0,0,0,11,0,251,0,101,0,42,0,251,0,221,0,0,0,204,0,104,0,94,0,123,0,42,0,0,0,98,0,169,0,129,0,123,0,177,0,231,0,81,0,155,0,228,0,0,0,227,0,150,0,85,0,218,0,161,0,5,0,181,0,80,0,159,0,2,0,56,0,0,0,195,0,199,0,0,0,0,0,209,0,0,0,88,0,205,0,67,0,0,0,0,0,112,0,42,0,214,0,207,0,199,0,244,0,81,0,20,0,53,0,184,0,190,0,235,0,0,0,55,0,103,0,242,0,191,0,194,0,172,0,188,0,215,0,231,0,208,0,200,0,0,0,19,0,0,0,62,0,165,0,189,0,0,0,191,0,125,0,125,0,212,0,3,0,106,0);
signal scenario_full  : scenario_type := (214,31,133,31,91,31,252,31,252,30,244,31,234,31,64,31,103,31,103,30,45,31,60,31,245,31,96,31,104,31,17,31,93,31,159,31,196,31,196,30,58,31,58,30,189,31,150,31,3,31,219,31,181,31,43,31,98,31,98,30,98,29,94,31,33,31,184,31,240,31,240,30,15,31,95,31,38,31,200,31,72,31,221,31,113,31,172,31,220,31,214,31,42,31,42,30,42,29,81,31,19,31,217,31,143,31,113,31,205,31,92,31,206,31,42,31,176,31,176,30,176,29,160,31,178,31,178,30,180,31,222,31,89,31,86,31,86,30,86,29,60,31,228,31,198,31,140,31,84,31,84,30,214,31,86,31,10,31,82,31,136,31,136,30,222,31,70,31,70,30,43,31,208,31,195,31,219,31,218,31,92,31,92,30,83,31,77,31,77,30,77,29,77,28,203,31,1,31,59,31,186,31,240,31,112,31,189,31,235,31,114,31,157,31,66,31,27,31,37,31,66,31,66,30,144,31,186,31,138,31,85,31,120,31,62,31,62,30,62,29,62,28,225,31,29,31,202,31,202,30,121,31,121,30,164,31,228,31,228,30,198,31,71,31,71,30,71,29,162,31,91,31,134,31,134,30,253,31,74,31,133,31,72,31,253,31,241,31,212,31,75,31,75,30,239,31,97,31,195,31,121,31,64,31,181,31,218,31,218,30,65,31,2,31,153,31,46,31,64,31,240,31,118,31,118,30,100,31,58,31,106,31,144,31,118,31,160,31,139,31,139,30,236,31,236,30,236,29,57,31,101,31,178,31,82,31,82,30,8,31,239,31,239,30,239,29,15,31,166,31,44,31,150,31,189,31,234,31,38,31,47,31,217,31,252,31,73,31,73,30,159,31,7,31,147,31,147,30,147,29,248,31,178,31,250,31,250,30,211,31,101,31,193,31,42,31,42,30,153,31,144,31,98,31,138,31,138,30,161,31,253,31,179,31,197,31,52,31,144,31,232,31,231,31,45,31,139,31,199,31,105,31,49,31,231,31,163,31,146,31,36,31,131,31,198,31,198,30,71,31,173,31,32,31,11,31,27,31,89,31,175,31,110,31,20,31,20,30,188,31,76,31,206,31,24,31,137,31,235,31,85,31,226,31,106,31,106,30,212,31,58,31,58,30,123,31,41,31,41,30,122,31,197,31,119,31,141,31,180,31,75,31,86,31,216,31,216,30,67,31,201,31,201,30,177,31,136,31,178,31,9,31,69,31,61,31,61,30,44,31,242,31,242,30,242,29,227,31,78,31,179,31,210,31,4,31,1,31,177,31,21,31,190,31,223,31,34,31,34,30,43,31,255,31,247,31,21,31,171,31,31,31,163,31,27,31,80,31,143,31,113,31,18,31,166,31,183,31,1,31,195,31,12,31,91,31,33,31,116,31,71,31,197,31,192,31,97,31,50,31,14,31,177,31,133,31,133,30,113,31,97,31,97,30,81,31,189,31,111,31,21,31,21,30,134,31,112,31,112,30,157,31,177,31,62,31,198,31,128,31,193,31,194,31,32,31,160,31,27,31,11,31,44,31,242,31,111,31,254,31,63,31,120,31,120,30,140,31,189,31,205,31,175,31,76,31,197,31,58,31,58,30,58,29,192,31,9,31,60,31,98,31,98,30,98,29,98,28,24,31,4,31,159,31,166,31,158,31,202,31,202,30,185,31,185,30,74,31,86,31,98,31,131,31,233,31,26,31,97,31,17,31,153,31,140,31,140,30,140,29,140,28,47,31,47,30,179,31,143,31,83,31,12,31,50,31,36,31,44,31,231,31,45,31,149,31,142,31,249,31,138,31,79,31,79,30,79,29,12,31,12,30,3,31,3,30,11,31,219,31,250,31,31,31,90,31,19,31,222,31,164,31,160,31,125,31,141,31,46,31,10,31,36,31,171,31,171,30,76,31,76,30,76,29,76,28,29,31,105,31,213,31,211,31,190,31,179,31,101,31,14,31,202,31,234,31,31,31,31,30,32,31,240,31,60,31,60,30,153,31,215,31,66,31,66,30,66,29,43,31,68,31,12,31,12,30,12,29,198,31,198,30,247,31,94,31,171,31,81,31,197,31,197,30,225,31,201,31,25,31,6,31,124,31,124,30,34,31,82,31,32,31,130,31,137,31,75,31,75,30,27,31,191,31,191,30,191,29,2,31,107,31,123,31,228,31,134,31,42,31,42,30,95,31,145,31,145,30,61,31,142,31,154,31,124,31,213,31,104,31,103,31,158,31,193,31,47,31,91,31,223,31,223,30,125,31,83,31,83,30,53,31,53,30,175,31,101,31,158,31,85,31,85,30,207,31,97,31,65,31,245,31,137,31,200,31,206,31,206,30,206,29,157,31,124,31,62,31,62,30,18,31,42,31,88,31,88,30,89,31,32,31,61,31,27,31,27,30,16,31,16,30,239,31,200,31,230,31,248,31,8,31,100,31,232,31,232,30,20,31,29,31,47,31,209,31,156,31,183,31,185,31,153,31,48,31,225,31,236,31,194,31,240,31,41,31,131,31,162,31,196,31,167,31,167,30,232,31,184,31,184,30,245,31,245,30,212,31,7,31,221,31,22,31,198,31,204,31,24,31,24,30,48,31,48,30,235,31,235,30,106,31,56,31,157,31,151,31,236,31,141,31,214,31,214,30,214,29,214,28,232,31,232,30,241,31,241,30,113,31,88,31,35,31,187,31,224,31,20,31,38,31,251,31,138,31,125,31,176,31,176,30,246,31,121,31,121,30,21,31,90,31,16,31,157,31,157,30,124,31,124,30,103,31,149,31,83,31,83,30,205,31,91,31,230,31,230,30,230,29,29,31,217,31,118,31,10,31,10,30,108,31,110,31,234,31,254,31,41,31,41,30,242,31,242,30,175,31,175,30,32,31,32,30,61,31,77,31,122,31,106,31,114,31,152,31,222,31,98,31,28,31,77,31,230,31,230,30,44,31,44,30,44,29,220,31,246,31,23,31,119,31,119,30,72,31,172,31,41,31,41,30,41,29,156,31,233,31,72,31,199,31,191,31,191,30,9,31,244,31,170,31,100,31,100,30,67,31,125,31,39,31,39,30,35,31,7,31,202,31,27,31,245,31,2,31,69,31,103,31,103,31,221,31,141,31,94,31,81,31,80,31,80,30,204,31,44,31,41,31,41,30,41,29,163,31,194,31,102,31,102,30,84,31,135,31,27,31,27,30,193,31,230,31,76,31,76,30,194,31,194,30,227,31,162,31,162,30,162,29,162,28,162,27,136,31,136,30,79,31,23,31,231,31,162,31,171,31,251,31,36,31,130,31,254,31,254,31,181,31,181,30,181,29,38,31,140,31,140,30,18,31,235,31,153,31,13,31,13,30,88,31,42,31,42,30,219,31,54,31,32,31,19,31,219,31,67,31,210,31,56,31,217,31,27,31,229,31,62,31,151,31,151,30,38,31,249,31,131,31,117,31,117,30,122,31,180,31,180,30,249,31,249,30,57,31,38,31,53,31,9,31,76,31,86,31,198,31,198,30,225,31,153,31,198,31,29,31,115,31,109,31,197,31,206,31,237,31,180,31,188,31,95,31,95,30,95,29,95,28,253,31,223,31,203,31,14,31,14,30,14,29,42,31,170,31,91,31,239,31,249,31,249,30,207,31,152,31,89,31,138,31,230,31,42,31,132,31,141,31,88,31,197,31,197,30,46,31,232,31,44,31,242,31,105,31,105,30,132,31,132,30,43,31,89,31,29,31,213,31,35,31,90,31,206,31,206,30,216,31,216,30,52,31,52,30,70,31,176,31,25,31,25,30,211,31,211,30,211,29,154,31,237,31,106,31,170,31,119,31,121,31,127,31,3,31,137,31,162,31,162,30,162,29,162,28,68,31,185,31,185,30,5,31,144,31,43,31,13,31,243,31,199,31,214,31,214,30,214,29,101,31,42,31,5,31,216,31,58,31,117,31,81,31,81,30,187,31,228,31,228,30,123,31,187,31,71,31,214,31,214,30,234,31,218,31,218,30,218,29,11,31,251,31,101,31,42,31,251,31,221,31,221,30,204,31,104,31,94,31,123,31,42,31,42,30,98,31,169,31,129,31,123,31,177,31,231,31,81,31,155,31,228,31,228,30,227,31,150,31,85,31,218,31,161,31,5,31,181,31,80,31,159,31,2,31,56,31,56,30,195,31,199,31,199,30,199,29,209,31,209,30,88,31,205,31,67,31,67,30,67,29,112,31,42,31,214,31,207,31,199,31,244,31,81,31,20,31,53,31,184,31,190,31,235,31,235,30,55,31,103,31,242,31,191,31,194,31,172,31,188,31,215,31,231,31,208,31,200,31,200,30,19,31,19,30,62,31,165,31,189,31,189,30,191,31,125,31,125,31,212,31,3,31,106,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
