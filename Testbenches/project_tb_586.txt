-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 1007;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (153,0,0,0,9,0,47,0,18,0,157,0,75,0,214,0,77,0,194,0,129,0,40,0,60,0,151,0,72,0,64,0,90,0,16,0,19,0,16,0,252,0,0,0,253,0,0,0,33,0,215,0,137,0,177,0,141,0,98,0,100,0,201,0,147,0,101,0,253,0,71,0,85,0,43,0,0,0,88,0,0,0,119,0,212,0,104,0,35,0,20,0,0,0,206,0,49,0,170,0,20,0,0,0,105,0,0,0,33,0,104,0,156,0,23,0,114,0,229,0,251,0,0,0,45,0,72,0,0,0,198,0,96,0,100,0,209,0,91,0,146,0,171,0,176,0,0,0,26,0,73,0,55,0,0,0,106,0,248,0,53,0,0,0,130,0,146,0,220,0,0,0,240,0,190,0,165,0,0,0,222,0,205,0,0,0,69,0,70,0,253,0,0,0,0,0,0,0,84,0,193,0,64,0,0,0,185,0,80,0,156,0,160,0,54,0,11,0,241,0,179,0,172,0,150,0,198,0,184,0,0,0,95,0,42,0,79,0,121,0,0,0,161,0,44,0,64,0,13,0,80,0,141,0,14,0,119,0,0,0,11,0,0,0,34,0,0,0,162,0,144,0,107,0,207,0,0,0,0,0,182,0,88,0,0,0,108,0,222,0,199,0,26,0,97,0,0,0,236,0,80,0,83,0,187,0,201,0,120,0,166,0,175,0,32,0,146,0,142,0,110,0,146,0,255,0,38,0,95,0,50,0,4,0,114,0,0,0,47,0,249,0,223,0,0,0,3,0,45,0,81,0,80,0,53,0,118,0,0,0,240,0,211,0,144,0,246,0,0,0,0,0,26,0,96,0,233,0,98,0,0,0,192,0,14,0,42,0,44,0,34,0,0,0,162,0,0,0,198,0,238,0,41,0,61,0,108,0,82,0,138,0,106,0,224,0,7,0,142,0,0,0,120,0,86,0,120,0,162,0,0,0,0,0,67,0,0,0,211,0,130,0,224,0,85,0,16,0,113,0,195,0,22,0,14,0,174,0,185,0,30,0,120,0,152,0,98,0,174,0,56,0,180,0,161,0,0,0,0,0,0,0,44,0,0,0,185,0,82,0,127,0,55,0,185,0,0,0,238,0,73,0,208,0,117,0,0,0,221,0,127,0,105,0,22,0,192,0,173,0,4,0,141,0,162,0,76,0,250,0,228,0,150,0,0,0,27,0,255,0,0,0,193,0,207,0,222,0,0,0,116,0,88,0,236,0,43,0,34,0,177,0,243,0,25,0,217,0,45,0,163,0,190,0,13,0,172,0,135,0,0,0,34,0,238,0,174,0,0,0,65,0,213,0,174,0,149,0,0,0,0,0,232,0,222,0,146,0,117,0,15,0,0,0,140,0,191,0,131,0,0,0,122,0,178,0,70,0,45,0,247,0,165,0,245,0,0,0,0,0,141,0,193,0,130,0,191,0,161,0,208,0,41,0,0,0,88,0,235,0,214,0,0,0,0,0,7,0,0,0,22,0,0,0,0,0,132,0,0,0,178,0,76,0,70,0,39,0,226,0,110,0,8,0,0,0,135,0,158,0,188,0,248,0,147,0,117,0,142,0,117,0,170,0,183,0,48,0,196,0,18,0,0,0,67,0,68,0,215,0,0,0,0,0,67,0,207,0,199,0,0,0,0,0,189,0,98,0,173,0,94,0,205,0,17,0,254,0,0,0,139,0,157,0,0,0,211,0,200,0,0,0,93,0,183,0,0,0,0,0,187,0,86,0,0,0,203,0,111,0,76,0,71,0,0,0,53,0,189,0,129,0,48,0,39,0,0,0,209,0,5,0,35,0,245,0,77,0,195,0,214,0,61,0,73,0,183,0,247,0,28,0,51,0,152,0,102,0,228,0,44,0,112,0,137,0,0,0,172,0,64,0,220,0,141,0,168,0,0,0,124,0,58,0,0,0,185,0,81,0,40,0,66,0,41,0,145,0,14,0,177,0,21,0,216,0,53,0,134,0,224,0,182,0,204,0,110,0,249,0,149,0,158,0,103,0,0,0,243,0,101,0,0,0,0,0,159,0,2,0,98,0,201,0,199,0,44,0,84,0,20,0,79,0,226,0,49,0,241,0,180,0,0,0,0,0,160,0,154,0,37,0,201,0,89,0,0,0,148,0,142,0,0,0,0,0,0,0,55,0,81,0,0,0,0,0,251,0,66,0,239,0,198,0,64,0,0,0,0,0,30,0,250,0,83,0,0,0,0,0,88,0,142,0,246,0,85,0,43,0,42,0,55,0,0,0,27,0,134,0,141,0,70,0,71,0,20,0,64,0,182,0,0,0,191,0,128,0,0,0,1,0,0,0,0,0,111,0,175,0,50,0,233,0,223,0,6,0,198,0,253,0,207,0,249,0,0,0,105,0,114,0,14,0,0,0,43,0,66,0,186,0,0,0,0,0,130,0,141,0,110,0,241,0,36,0,0,0,0,0,199,0,73,0,33,0,108,0,101,0,64,0,144,0,143,0,30,0,166,0,65,0,219,0,0,0,36,0,92,0,217,0,96,0,114,0,200,0,192,0,217,0,64,0,58,0,15,0,107,0,13,0,0,0,236,0,201,0,171,0,163,0,196,0,58,0,89,0,143,0,44,0,0,0,65,0,180,0,118,0,168,0,219,0,0,0,243,0,0,0,106,0,86,0,35,0,191,0,84,0,176,0,101,0,44,0,39,0,0,0,50,0,203,0,193,0,146,0,0,0,173,0,97,0,48,0,0,0,141,0,105,0,69,0,219,0,30,0,221,0,0,0,193,0,140,0,236,0,0,0,248,0,0,0,122,0,209,0,46,0,32,0,162,0,77,0,145,0,0,0,197,0,149,0,150,0,21,0,130,0,76,0,220,0,7,0,202,0,82,0,210,0,0,0,14,0,0,0,101,0,0,0,32,0,160,0,227,0,153,0,176,0,8,0,0,0,25,0,32,0,64,0,162,0,150,0,25,0,33,0,160,0,199,0,0,0,9,0,165,0,0,0,6,0,226,0,209,0,37,0,234,0,201,0,253,0,0,0,75,0,0,0,89,0,135,0,183,0,226,0,177,0,0,0,56,0,239,0,167,0,179,0,0,0,45,0,44,0,0,0,174,0,80,0,170,0,0,0,53,0,225,0,47,0,0,0,105,0,187,0,143,0,0,0,70,0,0,0,0,0,32,0,0,0,116,0,0,0,198,0,90,0,189,0,21,0,112,0,11,0,0,0,206,0,117,0,0,0,239,0,158,0,162,0,233,0,123,0,0,0,0,0,9,0,0,0,86,0,0,0,0,0,151,0,252,0,212,0,187,0,164,0,241,0,0,0,0,0,159,0,158,0,0,0,0,0,0,0,37,0,0,0,226,0,0,0,85,0,120,0,226,0,215,0,97,0,171,0,199,0,0,0,0,0,156,0,0,0,116,0,0,0,166,0,224,0,77,0,254,0,9,0,38,0,0,0,229,0,0,0,69,0,213,0,77,0,223,0,148,0,253,0,20,0,96,0,0,0,0,0,86,0,0,0,144,0,243,0,231,0,36,0,0,0,120,0,25,0,0,0,222,0,211,0,248,0,245,0,0,0,0,0,68,0,206,0,96,0,0,0,222,0,7,0,204,0,103,0,0,0,64,0,142,0,0,0,84,0,87,0,210,0,65,0,193,0,0,0,0,0,0,0,76,0,0,0,100,0,112,0,0,0,133,0,133,0,0,0,23,0,226,0,119,0,123,0,130,0,204,0,75,0,52,0,55,0,139,0,43,0,218,0,215,0,183,0,246,0,60,0,22,0,203,0,210,0,92,0,1,0,0,0,57,0,173,0,70,0,178,0,159,0,107,0,0,0,187,0,0,0,63,0,160,0,226,0,198,0,103,0,131,0,0,0,84,0,155,0,246,0,233,0,131,0,230,0,253,0,0,0,219,0,241,0,75,0,31,0,223,0,0,0,0,0,6,0,51,0,0,0,120,0,170,0,165,0,186,0,34,0,0,0,5,0,14,0,75,0,196,0,152,0,134,0,18,0,0,0,77,0,0,0,0,0,155,0,187,0,152,0,107,0,121,0,114,0,0,0,233,0,135,0,80,0,189,0,0,0,0,0,186,0,27,0,0,0,0,0,242,0,204,0,67,0,236,0,93,0,199,0,36,0,17,0,156,0,0,0,197,0,107,0,72,0,66,0,230,0,33,0,214,0,98,0,214,0,168,0,111,0,37,0,56,0,223,0,57,0,54,0,43,0,0,0,40,0,4,0,0,0,111,0,24,0,54,0,0,0,24,0,221,0,110,0,29,0,0,0,70,0,226,0,180,0,0,0,147,0,138,0,119,0,29,0,71,0,166,0,80,0,85,0,0,0,228,0,0,0,227,0,240,0,122,0,235,0,99,0,0,0,12,0,18,0,0,0,186,0,121,0,10,0,235,0,168,0,114,0,0,0,72,0,0,0,0,0,199,0,212,0,0,0,18,0,0,0,113,0,93,0,46,0,37,0,0,0,244,0,84,0,187,0,0,0);
signal scenario_full  : scenario_type := (153,31,153,30,9,31,47,31,18,31,157,31,75,31,214,31,77,31,194,31,129,31,40,31,60,31,151,31,72,31,64,31,90,31,16,31,19,31,16,31,252,31,252,30,253,31,253,30,33,31,215,31,137,31,177,31,141,31,98,31,100,31,201,31,147,31,101,31,253,31,71,31,85,31,43,31,43,30,88,31,88,30,119,31,212,31,104,31,35,31,20,31,20,30,206,31,49,31,170,31,20,31,20,30,105,31,105,30,33,31,104,31,156,31,23,31,114,31,229,31,251,31,251,30,45,31,72,31,72,30,198,31,96,31,100,31,209,31,91,31,146,31,171,31,176,31,176,30,26,31,73,31,55,31,55,30,106,31,248,31,53,31,53,30,130,31,146,31,220,31,220,30,240,31,190,31,165,31,165,30,222,31,205,31,205,30,69,31,70,31,253,31,253,30,253,29,253,28,84,31,193,31,64,31,64,30,185,31,80,31,156,31,160,31,54,31,11,31,241,31,179,31,172,31,150,31,198,31,184,31,184,30,95,31,42,31,79,31,121,31,121,30,161,31,44,31,64,31,13,31,80,31,141,31,14,31,119,31,119,30,11,31,11,30,34,31,34,30,162,31,144,31,107,31,207,31,207,30,207,29,182,31,88,31,88,30,108,31,222,31,199,31,26,31,97,31,97,30,236,31,80,31,83,31,187,31,201,31,120,31,166,31,175,31,32,31,146,31,142,31,110,31,146,31,255,31,38,31,95,31,50,31,4,31,114,31,114,30,47,31,249,31,223,31,223,30,3,31,45,31,81,31,80,31,53,31,118,31,118,30,240,31,211,31,144,31,246,31,246,30,246,29,26,31,96,31,233,31,98,31,98,30,192,31,14,31,42,31,44,31,34,31,34,30,162,31,162,30,198,31,238,31,41,31,61,31,108,31,82,31,138,31,106,31,224,31,7,31,142,31,142,30,120,31,86,31,120,31,162,31,162,30,162,29,67,31,67,30,211,31,130,31,224,31,85,31,16,31,113,31,195,31,22,31,14,31,174,31,185,31,30,31,120,31,152,31,98,31,174,31,56,31,180,31,161,31,161,30,161,29,161,28,44,31,44,30,185,31,82,31,127,31,55,31,185,31,185,30,238,31,73,31,208,31,117,31,117,30,221,31,127,31,105,31,22,31,192,31,173,31,4,31,141,31,162,31,76,31,250,31,228,31,150,31,150,30,27,31,255,31,255,30,193,31,207,31,222,31,222,30,116,31,88,31,236,31,43,31,34,31,177,31,243,31,25,31,217,31,45,31,163,31,190,31,13,31,172,31,135,31,135,30,34,31,238,31,174,31,174,30,65,31,213,31,174,31,149,31,149,30,149,29,232,31,222,31,146,31,117,31,15,31,15,30,140,31,191,31,131,31,131,30,122,31,178,31,70,31,45,31,247,31,165,31,245,31,245,30,245,29,141,31,193,31,130,31,191,31,161,31,208,31,41,31,41,30,88,31,235,31,214,31,214,30,214,29,7,31,7,30,22,31,22,30,22,29,132,31,132,30,178,31,76,31,70,31,39,31,226,31,110,31,8,31,8,30,135,31,158,31,188,31,248,31,147,31,117,31,142,31,117,31,170,31,183,31,48,31,196,31,18,31,18,30,67,31,68,31,215,31,215,30,215,29,67,31,207,31,199,31,199,30,199,29,189,31,98,31,173,31,94,31,205,31,17,31,254,31,254,30,139,31,157,31,157,30,211,31,200,31,200,30,93,31,183,31,183,30,183,29,187,31,86,31,86,30,203,31,111,31,76,31,71,31,71,30,53,31,189,31,129,31,48,31,39,31,39,30,209,31,5,31,35,31,245,31,77,31,195,31,214,31,61,31,73,31,183,31,247,31,28,31,51,31,152,31,102,31,228,31,44,31,112,31,137,31,137,30,172,31,64,31,220,31,141,31,168,31,168,30,124,31,58,31,58,30,185,31,81,31,40,31,66,31,41,31,145,31,14,31,177,31,21,31,216,31,53,31,134,31,224,31,182,31,204,31,110,31,249,31,149,31,158,31,103,31,103,30,243,31,101,31,101,30,101,29,159,31,2,31,98,31,201,31,199,31,44,31,84,31,20,31,79,31,226,31,49,31,241,31,180,31,180,30,180,29,160,31,154,31,37,31,201,31,89,31,89,30,148,31,142,31,142,30,142,29,142,28,55,31,81,31,81,30,81,29,251,31,66,31,239,31,198,31,64,31,64,30,64,29,30,31,250,31,83,31,83,30,83,29,88,31,142,31,246,31,85,31,43,31,42,31,55,31,55,30,27,31,134,31,141,31,70,31,71,31,20,31,64,31,182,31,182,30,191,31,128,31,128,30,1,31,1,30,1,29,111,31,175,31,50,31,233,31,223,31,6,31,198,31,253,31,207,31,249,31,249,30,105,31,114,31,14,31,14,30,43,31,66,31,186,31,186,30,186,29,130,31,141,31,110,31,241,31,36,31,36,30,36,29,199,31,73,31,33,31,108,31,101,31,64,31,144,31,143,31,30,31,166,31,65,31,219,31,219,30,36,31,92,31,217,31,96,31,114,31,200,31,192,31,217,31,64,31,58,31,15,31,107,31,13,31,13,30,236,31,201,31,171,31,163,31,196,31,58,31,89,31,143,31,44,31,44,30,65,31,180,31,118,31,168,31,219,31,219,30,243,31,243,30,106,31,86,31,35,31,191,31,84,31,176,31,101,31,44,31,39,31,39,30,50,31,203,31,193,31,146,31,146,30,173,31,97,31,48,31,48,30,141,31,105,31,69,31,219,31,30,31,221,31,221,30,193,31,140,31,236,31,236,30,248,31,248,30,122,31,209,31,46,31,32,31,162,31,77,31,145,31,145,30,197,31,149,31,150,31,21,31,130,31,76,31,220,31,7,31,202,31,82,31,210,31,210,30,14,31,14,30,101,31,101,30,32,31,160,31,227,31,153,31,176,31,8,31,8,30,25,31,32,31,64,31,162,31,150,31,25,31,33,31,160,31,199,31,199,30,9,31,165,31,165,30,6,31,226,31,209,31,37,31,234,31,201,31,253,31,253,30,75,31,75,30,89,31,135,31,183,31,226,31,177,31,177,30,56,31,239,31,167,31,179,31,179,30,45,31,44,31,44,30,174,31,80,31,170,31,170,30,53,31,225,31,47,31,47,30,105,31,187,31,143,31,143,30,70,31,70,30,70,29,32,31,32,30,116,31,116,30,198,31,90,31,189,31,21,31,112,31,11,31,11,30,206,31,117,31,117,30,239,31,158,31,162,31,233,31,123,31,123,30,123,29,9,31,9,30,86,31,86,30,86,29,151,31,252,31,212,31,187,31,164,31,241,31,241,30,241,29,159,31,158,31,158,30,158,29,158,28,37,31,37,30,226,31,226,30,85,31,120,31,226,31,215,31,97,31,171,31,199,31,199,30,199,29,156,31,156,30,116,31,116,30,166,31,224,31,77,31,254,31,9,31,38,31,38,30,229,31,229,30,69,31,213,31,77,31,223,31,148,31,253,31,20,31,96,31,96,30,96,29,86,31,86,30,144,31,243,31,231,31,36,31,36,30,120,31,25,31,25,30,222,31,211,31,248,31,245,31,245,30,245,29,68,31,206,31,96,31,96,30,222,31,7,31,204,31,103,31,103,30,64,31,142,31,142,30,84,31,87,31,210,31,65,31,193,31,193,30,193,29,193,28,76,31,76,30,100,31,112,31,112,30,133,31,133,31,133,30,23,31,226,31,119,31,123,31,130,31,204,31,75,31,52,31,55,31,139,31,43,31,218,31,215,31,183,31,246,31,60,31,22,31,203,31,210,31,92,31,1,31,1,30,57,31,173,31,70,31,178,31,159,31,107,31,107,30,187,31,187,30,63,31,160,31,226,31,198,31,103,31,131,31,131,30,84,31,155,31,246,31,233,31,131,31,230,31,253,31,253,30,219,31,241,31,75,31,31,31,223,31,223,30,223,29,6,31,51,31,51,30,120,31,170,31,165,31,186,31,34,31,34,30,5,31,14,31,75,31,196,31,152,31,134,31,18,31,18,30,77,31,77,30,77,29,155,31,187,31,152,31,107,31,121,31,114,31,114,30,233,31,135,31,80,31,189,31,189,30,189,29,186,31,27,31,27,30,27,29,242,31,204,31,67,31,236,31,93,31,199,31,36,31,17,31,156,31,156,30,197,31,107,31,72,31,66,31,230,31,33,31,214,31,98,31,214,31,168,31,111,31,37,31,56,31,223,31,57,31,54,31,43,31,43,30,40,31,4,31,4,30,111,31,24,31,54,31,54,30,24,31,221,31,110,31,29,31,29,30,70,31,226,31,180,31,180,30,147,31,138,31,119,31,29,31,71,31,166,31,80,31,85,31,85,30,228,31,228,30,227,31,240,31,122,31,235,31,99,31,99,30,12,31,18,31,18,30,186,31,121,31,10,31,235,31,168,31,114,31,114,30,72,31,72,30,72,29,199,31,212,31,212,30,18,31,18,30,113,31,93,31,46,31,37,31,37,30,244,31,84,31,187,31,187,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
