-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 728;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,221,0,0,0,147,0,98,0,182,0,0,0,107,0,0,0,42,0,192,0,11,0,0,0,246,0,105,0,40,0,203,0,231,0,225,0,0,0,0,0,129,0,99,0,100,0,0,0,182,0,202,0,252,0,187,0,160,0,61,0,0,0,125,0,95,0,160,0,248,0,74,0,30,0,0,0,0,0,0,0,0,0,55,0,0,0,84,0,161,0,98,0,217,0,71,0,120,0,245,0,35,0,47,0,73,0,124,0,128,0,0,0,0,0,102,0,69,0,0,0,47,0,38,0,0,0,128,0,63,0,36,0,99,0,8,0,90,0,250,0,113,0,153,0,0,0,163,0,183,0,124,0,203,0,0,0,0,0,127,0,236,0,185,0,145,0,101,0,37,0,11,0,0,0,28,0,0,0,198,0,101,0,7,0,0,0,103,0,0,0,4,0,47,0,242,0,214,0,250,0,74,0,80,0,42,0,108,0,0,0,0,0,83,0,224,0,236,0,0,0,244,0,0,0,68,0,138,0,68,0,92,0,107,0,192,0,0,0,150,0,0,0,227,0,187,0,255,0,1,0,0,0,50,0,132,0,68,0,122,0,44,0,0,0,213,0,24,0,0,0,33,0,109,0,237,0,0,0,128,0,60,0,181,0,74,0,123,0,0,0,163,0,90,0,61,0,172,0,0,0,217,0,69,0,252,0,58,0,144,0,78,0,0,0,230,0,71,0,35,0,196,0,125,0,0,0,27,0,115,0,52,0,68,0,154,0,142,0,159,0,0,0,37,0,0,0,24,0,51,0,185,0,59,0,114,0,0,0,169,0,101,0,0,0,48,0,0,0,177,0,237,0,120,0,0,0,93,0,194,0,206,0,135,0,0,0,199,0,172,0,14,0,0,0,91,0,233,0,0,0,64,0,255,0,100,0,208,0,0,0,87,0,224,0,120,0,0,0,143,0,224,0,155,0,18,0,169,0,52,0,175,0,0,0,0,0,89,0,37,0,149,0,180,0,20,0,0,0,18,0,0,0,220,0,170,0,163,0,102,0,160,0,121,0,27,0,152,0,68,0,180,0,2,0,95,0,72,0,116,0,0,0,57,0,50,0,35,0,198,0,71,0,0,0,24,0,149,0,37,0,233,0,0,0,0,0,31,0,158,0,116,0,0,0,94,0,161,0,158,0,25,0,153,0,159,0,232,0,0,0,4,0,0,0,30,0,213,0,147,0,88,0,6,0,62,0,8,0,161,0,37,0,15,0,73,0,252,0,159,0,114,0,99,0,228,0,239,0,65,0,0,0,159,0,15,0,0,0,8,0,230,0,123,0,26,0,0,0,204,0,26,0,52,0,100,0,246,0,189,0,189,0,18,0,67,0,172,0,0,0,201,0,0,0,0,0,25,0,6,0,0,0,163,0,240,0,250,0,0,0,3,0,131,0,121,0,131,0,47,0,75,0,0,0,190,0,140,0,237,0,116,0,109,0,160,0,152,0,93,0,252,0,8,0,103,0,146,0,0,0,0,0,67,0,69,0,0,0,141,0,200,0,0,0,0,0,117,0,17,0,209,0,77,0,71,0,226,0,15,0,0,0,126,0,0,0,0,0,0,0,224,0,97,0,204,0,68,0,61,0,148,0,200,0,0,0,32,0,154,0,0,0,0,0,239,0,183,0,61,0,152,0,250,0,167,0,144,0,74,0,175,0,143,0,234,0,229,0,37,0,235,0,115,0,0,0,182,0,196,0,95,0,19,0,157,0,0,0,214,0,159,0,195,0,208,0,0,0,153,0,87,0,0,0,168,0,232,0,239,0,0,0,215,0,159,0,61,0,0,0,79,0,0,0,0,0,138,0,95,0,5,0,0,0,22,0,165,0,148,0,48,0,10,0,0,0,227,0,0,0,17,0,0,0,0,0,26,0,231,0,224,0,0,0,27,0,201,0,0,0,115,0,34,0,0,0,129,0,0,0,10,0,0,0,48,0,0,0,0,0,219,0,57,0,11,0,191,0,0,0,177,0,223,0,0,0,29,0,103,0,95,0,0,0,114,0,118,0,0,0,44,0,29,0,2,0,0,0,0,0,100,0,62,0,106,0,0,0,149,0,0,0,103,0,203,0,0,0,123,0,199,0,182,0,227,0,128,0,249,0,253,0,58,0,107,0,194,0,0,0,87,0,192,0,11,0,95,0,0,0,172,0,194,0,0,0,49,0,54,0,122,0,24,0,244,0,31,0,199,0,0,0,86,0,209,0,0,0,141,0,210,0,156,0,0,0,108,0,37,0,0,0,111,0,36,0,0,0,13,0,59,0,0,0,126,0,13,0,0,0,212,0,224,0,246,0,0,0,0,0,57,0,10,0,5,0,84,0,0,0,140,0,235,0,15,0,188,0,201,0,54,0,254,0,19,0,82,0,109,0,246,0,232,0,102,0,53,0,95,0,250,0,30,0,125,0,239,0,14,0,0,0,139,0,227,0,0,0,247,0,209,0,119,0,235,0,129,0,0,0,86,0,0,0,216,0,193,0,78,0,0,0,2,0,224,0,0,0,192,0,127,0,67,0,0,0,225,0,111,0,46,0,0,0,210,0,99,0,203,0,0,0,14,0,0,0,205,0,161,0,153,0,49,0,28,0,114,0,247,0,0,0,169,0,0,0,0,0,137,0,66,0,0,0,0,0,144,0,179,0,80,0,0,0,138,0,56,0,4,0,215,0,173,0,212,0,15,0,0,0,156,0,0,0,53,0,0,0,0,0,234,0,174,0,19,0,0,0,27,0,82,0,0,0,0,0,164,0,206,0,136,0,0,0,115,0,158,0,9,0,171,0,56,0,242,0,3,0,115,0,27,0,202,0,34,0,0,0,11,0,138,0,88,0,0,0,109,0,99,0,4,0,75,0,41,0,34,0,116,0,197,0,25,0,53,0,10,0,0,0,99,0,68,0,54,0,89,0,0,0,0,0,0,0,69,0,118,0,0,0,1,0,0,0,178,0,188,0,0,0,162,0,127,0,61,0,114,0,254,0,0,0,0,0,79,0,207,0,100,0,163,0,180,0,241,0,152,0,97,0,8,0,0,0,173,0,26,0,0,0,129,0,0,0,0,0,113,0,130,0,210,0,0,0,0,0,33,0,0,0,0,0,2,0,11,0,213,0,0,0,36,0,66,0,0,0,197,0,197,0,189,0,0,0,195,0,0,0,70,0,198,0,211,0,0,0,0,0,72,0,0,0,200,0,173,0,0,0,39,0,105,0,249,0,0,0,239,0,163,0,109,0,0,0);
signal scenario_full  : scenario_type := (0,0,221,31,221,30,147,31,98,31,182,31,182,30,107,31,107,30,42,31,192,31,11,31,11,30,246,31,105,31,40,31,203,31,231,31,225,31,225,30,225,29,129,31,99,31,100,31,100,30,182,31,202,31,252,31,187,31,160,31,61,31,61,30,125,31,95,31,160,31,248,31,74,31,30,31,30,30,30,29,30,28,30,27,55,31,55,30,84,31,161,31,98,31,217,31,71,31,120,31,245,31,35,31,47,31,73,31,124,31,128,31,128,30,128,29,102,31,69,31,69,30,47,31,38,31,38,30,128,31,63,31,36,31,99,31,8,31,90,31,250,31,113,31,153,31,153,30,163,31,183,31,124,31,203,31,203,30,203,29,127,31,236,31,185,31,145,31,101,31,37,31,11,31,11,30,28,31,28,30,198,31,101,31,7,31,7,30,103,31,103,30,4,31,47,31,242,31,214,31,250,31,74,31,80,31,42,31,108,31,108,30,108,29,83,31,224,31,236,31,236,30,244,31,244,30,68,31,138,31,68,31,92,31,107,31,192,31,192,30,150,31,150,30,227,31,187,31,255,31,1,31,1,30,50,31,132,31,68,31,122,31,44,31,44,30,213,31,24,31,24,30,33,31,109,31,237,31,237,30,128,31,60,31,181,31,74,31,123,31,123,30,163,31,90,31,61,31,172,31,172,30,217,31,69,31,252,31,58,31,144,31,78,31,78,30,230,31,71,31,35,31,196,31,125,31,125,30,27,31,115,31,52,31,68,31,154,31,142,31,159,31,159,30,37,31,37,30,24,31,51,31,185,31,59,31,114,31,114,30,169,31,101,31,101,30,48,31,48,30,177,31,237,31,120,31,120,30,93,31,194,31,206,31,135,31,135,30,199,31,172,31,14,31,14,30,91,31,233,31,233,30,64,31,255,31,100,31,208,31,208,30,87,31,224,31,120,31,120,30,143,31,224,31,155,31,18,31,169,31,52,31,175,31,175,30,175,29,89,31,37,31,149,31,180,31,20,31,20,30,18,31,18,30,220,31,170,31,163,31,102,31,160,31,121,31,27,31,152,31,68,31,180,31,2,31,95,31,72,31,116,31,116,30,57,31,50,31,35,31,198,31,71,31,71,30,24,31,149,31,37,31,233,31,233,30,233,29,31,31,158,31,116,31,116,30,94,31,161,31,158,31,25,31,153,31,159,31,232,31,232,30,4,31,4,30,30,31,213,31,147,31,88,31,6,31,62,31,8,31,161,31,37,31,15,31,73,31,252,31,159,31,114,31,99,31,228,31,239,31,65,31,65,30,159,31,15,31,15,30,8,31,230,31,123,31,26,31,26,30,204,31,26,31,52,31,100,31,246,31,189,31,189,31,18,31,67,31,172,31,172,30,201,31,201,30,201,29,25,31,6,31,6,30,163,31,240,31,250,31,250,30,3,31,131,31,121,31,131,31,47,31,75,31,75,30,190,31,140,31,237,31,116,31,109,31,160,31,152,31,93,31,252,31,8,31,103,31,146,31,146,30,146,29,67,31,69,31,69,30,141,31,200,31,200,30,200,29,117,31,17,31,209,31,77,31,71,31,226,31,15,31,15,30,126,31,126,30,126,29,126,28,224,31,97,31,204,31,68,31,61,31,148,31,200,31,200,30,32,31,154,31,154,30,154,29,239,31,183,31,61,31,152,31,250,31,167,31,144,31,74,31,175,31,143,31,234,31,229,31,37,31,235,31,115,31,115,30,182,31,196,31,95,31,19,31,157,31,157,30,214,31,159,31,195,31,208,31,208,30,153,31,87,31,87,30,168,31,232,31,239,31,239,30,215,31,159,31,61,31,61,30,79,31,79,30,79,29,138,31,95,31,5,31,5,30,22,31,165,31,148,31,48,31,10,31,10,30,227,31,227,30,17,31,17,30,17,29,26,31,231,31,224,31,224,30,27,31,201,31,201,30,115,31,34,31,34,30,129,31,129,30,10,31,10,30,48,31,48,30,48,29,219,31,57,31,11,31,191,31,191,30,177,31,223,31,223,30,29,31,103,31,95,31,95,30,114,31,118,31,118,30,44,31,29,31,2,31,2,30,2,29,100,31,62,31,106,31,106,30,149,31,149,30,103,31,203,31,203,30,123,31,199,31,182,31,227,31,128,31,249,31,253,31,58,31,107,31,194,31,194,30,87,31,192,31,11,31,95,31,95,30,172,31,194,31,194,30,49,31,54,31,122,31,24,31,244,31,31,31,199,31,199,30,86,31,209,31,209,30,141,31,210,31,156,31,156,30,108,31,37,31,37,30,111,31,36,31,36,30,13,31,59,31,59,30,126,31,13,31,13,30,212,31,224,31,246,31,246,30,246,29,57,31,10,31,5,31,84,31,84,30,140,31,235,31,15,31,188,31,201,31,54,31,254,31,19,31,82,31,109,31,246,31,232,31,102,31,53,31,95,31,250,31,30,31,125,31,239,31,14,31,14,30,139,31,227,31,227,30,247,31,209,31,119,31,235,31,129,31,129,30,86,31,86,30,216,31,193,31,78,31,78,30,2,31,224,31,224,30,192,31,127,31,67,31,67,30,225,31,111,31,46,31,46,30,210,31,99,31,203,31,203,30,14,31,14,30,205,31,161,31,153,31,49,31,28,31,114,31,247,31,247,30,169,31,169,30,169,29,137,31,66,31,66,30,66,29,144,31,179,31,80,31,80,30,138,31,56,31,4,31,215,31,173,31,212,31,15,31,15,30,156,31,156,30,53,31,53,30,53,29,234,31,174,31,19,31,19,30,27,31,82,31,82,30,82,29,164,31,206,31,136,31,136,30,115,31,158,31,9,31,171,31,56,31,242,31,3,31,115,31,27,31,202,31,34,31,34,30,11,31,138,31,88,31,88,30,109,31,99,31,4,31,75,31,41,31,34,31,116,31,197,31,25,31,53,31,10,31,10,30,99,31,68,31,54,31,89,31,89,30,89,29,89,28,69,31,118,31,118,30,1,31,1,30,178,31,188,31,188,30,162,31,127,31,61,31,114,31,254,31,254,30,254,29,79,31,207,31,100,31,163,31,180,31,241,31,152,31,97,31,8,31,8,30,173,31,26,31,26,30,129,31,129,30,129,29,113,31,130,31,210,31,210,30,210,29,33,31,33,30,33,29,2,31,11,31,213,31,213,30,36,31,66,31,66,30,197,31,197,31,189,31,189,30,195,31,195,30,70,31,198,31,211,31,211,30,211,29,72,31,72,30,200,31,173,31,173,30,39,31,105,31,249,31,249,30,239,31,163,31,109,31,109,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
