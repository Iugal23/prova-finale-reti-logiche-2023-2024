-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 777;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (11,0,123,0,61,0,90,0,0,0,184,0,248,0,31,0,0,0,245,0,179,0,165,0,249,0,0,0,156,0,108,0,113,0,141,0,247,0,1,0,0,0,239,0,12,0,82,0,71,0,0,0,201,0,198,0,153,0,34,0,224,0,0,0,79,0,35,0,78,0,0,0,100,0,241,0,229,0,176,0,0,0,63,0,143,0,162,0,167,0,75,0,226,0,220,0,150,0,214,0,0,0,75,0,0,0,86,0,223,0,0,0,24,0,0,0,0,0,126,0,229,0,0,0,0,0,0,0,250,0,238,0,225,0,217,0,5,0,241,0,31,0,132,0,144,0,140,0,32,0,233,0,100,0,80,0,0,0,232,0,223,0,91,0,253,0,149,0,21,0,168,0,0,0,69,0,194,0,111,0,145,0,0,0,141,0,54,0,0,0,15,0,22,0,0,0,247,0,81,0,18,0,227,0,227,0,181,0,186,0,227,0,207,0,166,0,0,0,61,0,62,0,98,0,116,0,124,0,161,0,215,0,233,0,103,0,0,0,187,0,213,0,252,0,137,0,77,0,226,0,94,0,192,0,0,0,172,0,128,0,0,0,0,0,0,0,140,0,254,0,0,0,189,0,7,0,0,0,80,0,62,0,146,0,122,0,0,0,22,0,181,0,59,0,17,0,62,0,183,0,151,0,55,0,206,0,143,0,0,0,109,0,59,0,244,0,147,0,233,0,227,0,144,0,0,0,233,0,231,0,212,0,189,0,252,0,159,0,20,0,98,0,14,0,211,0,17,0,248,0,42,0,161,0,201,0,0,0,23,0,228,0,0,0,198,0,0,0,16,0,0,0,0,0,6,0,11,0,71,0,0,0,0,0,87,0,137,0,97,0,99,0,179,0,247,0,252,0,219,0,110,0,100,0,40,0,16,0,44,0,119,0,58,0,156,0,177,0,0,0,146,0,58,0,72,0,234,0,0,0,148,0,240,0,241,0,128,0,59,0,40,0,8,0,103,0,7,0,85,0,33,0,52,0,136,0,238,0,0,0,43,0,24,0,11,0,0,0,247,0,23,0,0,0,0,0,40,0,134,0,240,0,93,0,27,0,208,0,0,0,232,0,176,0,0,0,32,0,194,0,58,0,97,0,64,0,0,0,136,0,107,0,153,0,107,0,217,0,18,0,235,0,116,0,251,0,136,0,50,0,118,0,175,0,217,0,189,0,160,0,156,0,245,0,2,0,243,0,0,0,128,0,0,0,0,0,201,0,18,0,34,0,0,0,61,0,170,0,109,0,17,0,227,0,190,0,0,0,0,0,203,0,113,0,87,0,169,0,116,0,20,0,0,0,209,0,18,0,185,0,44,0,143,0,86,0,129,0,16,0,24,0,0,0,250,0,193,0,51,0,222,0,230,0,238,0,51,0,196,0,0,0,0,0,0,0,0,0,44,0,79,0,42,0,33,0,152,0,34,0,250,0,163,0,0,0,81,0,78,0,0,0,37,0,87,0,32,0,144,0,66,0,122,0,0,0,0,0,6,0,52,0,0,0,238,0,0,0,0,0,89,0,57,0,45,0,150,0,211,0,46,0,0,0,50,0,0,0,104,0,238,0,0,0,104,0,0,0,210,0,0,0,11,0,0,0,152,0,0,0,210,0,57,0,101,0,199,0,237,0,0,0,183,0,0,0,0,0,35,0,116,0,189,0,110,0,18,0,139,0,65,0,122,0,187,0,54,0,169,0,86,0,69,0,101,0,207,0,173,0,171,0,64,0,233,0,87,0,111,0,195,0,0,0,78,0,39,0,12,0,21,0,130,0,193,0,0,0,244,0,206,0,0,0,66,0,13,0,117,0,234,0,25,0,176,0,90,0,81,0,220,0,0,0,72,0,236,0,237,0,85,0,169,0,193,0,125,0,23,0,0,0,0,0,0,0,50,0,130,0,37,0,0,0,19,0,113,0,0,0,0,0,0,0,76,0,190,0,70,0,0,0,37,0,34,0,204,0,0,0,21,0,0,0,160,0,0,0,60,0,69,0,0,0,157,0,196,0,108,0,74,0,0,0,0,0,154,0,120,0,105,0,67,0,130,0,161,0,45,0,79,0,0,0,169,0,117,0,173,0,0,0,174,0,0,0,159,0,237,0,201,0,0,0,163,0,183,0,136,0,209,0,152,0,141,0,205,0,68,0,100,0,119,0,95,0,249,0,0,0,203,0,39,0,38,0,78,0,235,0,188,0,44,0,150,0,107,0,159,0,166,0,179,0,62,0,221,0,161,0,57,0,7,0,229,0,127,0,109,0,158,0,92,0,0,0,247,0,20,0,135,0,100,0,0,0,237,0,92,0,198,0,0,0,0,0,0,0,90,0,103,0,0,0,1,0,0,0,194,0,114,0,17,0,166,0,36,0,148,0,66,0,162,0,186,0,0,0,126,0,234,0,7,0,0,0,255,0,0,0,40,0,112,0,161,0,122,0,194,0,0,0,214,0,90,0,218,0,98,0,179,0,177,0,250,0,167,0,0,0,118,0,155,0,180,0,134,0,242,0,202,0,6,0,87,0,1,0,50,0,0,0,20,0,0,0,180,0,30,0,122,0,0,0,225,0,104,0,150,0,0,0,190,0,231,0,149,0,0,0,143,0,201,0,0,0,108,0,132,0,191,0,0,0,79,0,95,0,108,0,0,0,58,0,125,0,80,0,237,0,214,0,196,0,224,0,0,0,146,0,0,0,172,0,0,0,85,0,132,0,251,0,0,0,50,0,148,0,183,0,60,0,181,0,0,0,0,0,0,0,12,0,105,0,49,0,179,0,0,0,238,0,157,0,19,0,93,0,0,0,29,0,139,0,0,0,151,0,0,0,82,0,199,0,69,0,99,0,196,0,132,0,11,0,163,0,155,0,176,0,0,0,0,0,0,0,167,0,46,0,249,0,80,0,167,0,67,0,141,0,29,0,192,0,163,0,12,0,199,0,0,0,80,0,0,0,0,0,181,0,0,0,0,0,5,0,135,0,4,0,88,0,201,0,164,0,74,0,201,0,175,0,136,0,215,0,113,0,212,0,159,0,229,0,33,0,16,0,37,0,84,0,211,0,22,0,86,0,84,0,92,0,0,0,238,0,143,0,40,0,135,0,215,0,0,0,79,0,169,0,41,0,157,0,154,0,0,0,0,0,168,0,27,0,207,0,114,0,154,0,72,0,120,0,0,0,192,0,69,0,120,0,226,0,106,0,138,0,207,0,229,0,60,0,69,0,143,0,109,0,196,0,65,0,40,0,0,0,88,0,188,0,114,0,11,0,218,0,0,0,178,0,15,0,70,0,11,0,216,0,0,0,1,0,0,0,52,0,30,0,124,0,105,0,0,0,4,0,91,0,49,0,184,0,219,0,0,0,106,0,216,0,14,0,0,0,161,0,208,0,252,0,12,0,213,0,161,0,84,0,0,0,0,0,0,0,24,0,125,0,202,0,0,0,195,0,13,0,0,0,255,0,37,0);
signal scenario_full  : scenario_type := (11,31,123,31,61,31,90,31,90,30,184,31,248,31,31,31,31,30,245,31,179,31,165,31,249,31,249,30,156,31,108,31,113,31,141,31,247,31,1,31,1,30,239,31,12,31,82,31,71,31,71,30,201,31,198,31,153,31,34,31,224,31,224,30,79,31,35,31,78,31,78,30,100,31,241,31,229,31,176,31,176,30,63,31,143,31,162,31,167,31,75,31,226,31,220,31,150,31,214,31,214,30,75,31,75,30,86,31,223,31,223,30,24,31,24,30,24,29,126,31,229,31,229,30,229,29,229,28,250,31,238,31,225,31,217,31,5,31,241,31,31,31,132,31,144,31,140,31,32,31,233,31,100,31,80,31,80,30,232,31,223,31,91,31,253,31,149,31,21,31,168,31,168,30,69,31,194,31,111,31,145,31,145,30,141,31,54,31,54,30,15,31,22,31,22,30,247,31,81,31,18,31,227,31,227,31,181,31,186,31,227,31,207,31,166,31,166,30,61,31,62,31,98,31,116,31,124,31,161,31,215,31,233,31,103,31,103,30,187,31,213,31,252,31,137,31,77,31,226,31,94,31,192,31,192,30,172,31,128,31,128,30,128,29,128,28,140,31,254,31,254,30,189,31,7,31,7,30,80,31,62,31,146,31,122,31,122,30,22,31,181,31,59,31,17,31,62,31,183,31,151,31,55,31,206,31,143,31,143,30,109,31,59,31,244,31,147,31,233,31,227,31,144,31,144,30,233,31,231,31,212,31,189,31,252,31,159,31,20,31,98,31,14,31,211,31,17,31,248,31,42,31,161,31,201,31,201,30,23,31,228,31,228,30,198,31,198,30,16,31,16,30,16,29,6,31,11,31,71,31,71,30,71,29,87,31,137,31,97,31,99,31,179,31,247,31,252,31,219,31,110,31,100,31,40,31,16,31,44,31,119,31,58,31,156,31,177,31,177,30,146,31,58,31,72,31,234,31,234,30,148,31,240,31,241,31,128,31,59,31,40,31,8,31,103,31,7,31,85,31,33,31,52,31,136,31,238,31,238,30,43,31,24,31,11,31,11,30,247,31,23,31,23,30,23,29,40,31,134,31,240,31,93,31,27,31,208,31,208,30,232,31,176,31,176,30,32,31,194,31,58,31,97,31,64,31,64,30,136,31,107,31,153,31,107,31,217,31,18,31,235,31,116,31,251,31,136,31,50,31,118,31,175,31,217,31,189,31,160,31,156,31,245,31,2,31,243,31,243,30,128,31,128,30,128,29,201,31,18,31,34,31,34,30,61,31,170,31,109,31,17,31,227,31,190,31,190,30,190,29,203,31,113,31,87,31,169,31,116,31,20,31,20,30,209,31,18,31,185,31,44,31,143,31,86,31,129,31,16,31,24,31,24,30,250,31,193,31,51,31,222,31,230,31,238,31,51,31,196,31,196,30,196,29,196,28,196,27,44,31,79,31,42,31,33,31,152,31,34,31,250,31,163,31,163,30,81,31,78,31,78,30,37,31,87,31,32,31,144,31,66,31,122,31,122,30,122,29,6,31,52,31,52,30,238,31,238,30,238,29,89,31,57,31,45,31,150,31,211,31,46,31,46,30,50,31,50,30,104,31,238,31,238,30,104,31,104,30,210,31,210,30,11,31,11,30,152,31,152,30,210,31,57,31,101,31,199,31,237,31,237,30,183,31,183,30,183,29,35,31,116,31,189,31,110,31,18,31,139,31,65,31,122,31,187,31,54,31,169,31,86,31,69,31,101,31,207,31,173,31,171,31,64,31,233,31,87,31,111,31,195,31,195,30,78,31,39,31,12,31,21,31,130,31,193,31,193,30,244,31,206,31,206,30,66,31,13,31,117,31,234,31,25,31,176,31,90,31,81,31,220,31,220,30,72,31,236,31,237,31,85,31,169,31,193,31,125,31,23,31,23,30,23,29,23,28,50,31,130,31,37,31,37,30,19,31,113,31,113,30,113,29,113,28,76,31,190,31,70,31,70,30,37,31,34,31,204,31,204,30,21,31,21,30,160,31,160,30,60,31,69,31,69,30,157,31,196,31,108,31,74,31,74,30,74,29,154,31,120,31,105,31,67,31,130,31,161,31,45,31,79,31,79,30,169,31,117,31,173,31,173,30,174,31,174,30,159,31,237,31,201,31,201,30,163,31,183,31,136,31,209,31,152,31,141,31,205,31,68,31,100,31,119,31,95,31,249,31,249,30,203,31,39,31,38,31,78,31,235,31,188,31,44,31,150,31,107,31,159,31,166,31,179,31,62,31,221,31,161,31,57,31,7,31,229,31,127,31,109,31,158,31,92,31,92,30,247,31,20,31,135,31,100,31,100,30,237,31,92,31,198,31,198,30,198,29,198,28,90,31,103,31,103,30,1,31,1,30,194,31,114,31,17,31,166,31,36,31,148,31,66,31,162,31,186,31,186,30,126,31,234,31,7,31,7,30,255,31,255,30,40,31,112,31,161,31,122,31,194,31,194,30,214,31,90,31,218,31,98,31,179,31,177,31,250,31,167,31,167,30,118,31,155,31,180,31,134,31,242,31,202,31,6,31,87,31,1,31,50,31,50,30,20,31,20,30,180,31,30,31,122,31,122,30,225,31,104,31,150,31,150,30,190,31,231,31,149,31,149,30,143,31,201,31,201,30,108,31,132,31,191,31,191,30,79,31,95,31,108,31,108,30,58,31,125,31,80,31,237,31,214,31,196,31,224,31,224,30,146,31,146,30,172,31,172,30,85,31,132,31,251,31,251,30,50,31,148,31,183,31,60,31,181,31,181,30,181,29,181,28,12,31,105,31,49,31,179,31,179,30,238,31,157,31,19,31,93,31,93,30,29,31,139,31,139,30,151,31,151,30,82,31,199,31,69,31,99,31,196,31,132,31,11,31,163,31,155,31,176,31,176,30,176,29,176,28,167,31,46,31,249,31,80,31,167,31,67,31,141,31,29,31,192,31,163,31,12,31,199,31,199,30,80,31,80,30,80,29,181,31,181,30,181,29,5,31,135,31,4,31,88,31,201,31,164,31,74,31,201,31,175,31,136,31,215,31,113,31,212,31,159,31,229,31,33,31,16,31,37,31,84,31,211,31,22,31,86,31,84,31,92,31,92,30,238,31,143,31,40,31,135,31,215,31,215,30,79,31,169,31,41,31,157,31,154,31,154,30,154,29,168,31,27,31,207,31,114,31,154,31,72,31,120,31,120,30,192,31,69,31,120,31,226,31,106,31,138,31,207,31,229,31,60,31,69,31,143,31,109,31,196,31,65,31,40,31,40,30,88,31,188,31,114,31,11,31,218,31,218,30,178,31,15,31,70,31,11,31,216,31,216,30,1,31,1,30,52,31,30,31,124,31,105,31,105,30,4,31,91,31,49,31,184,31,219,31,219,30,106,31,216,31,14,31,14,30,161,31,208,31,252,31,12,31,213,31,161,31,84,31,84,30,84,29,84,28,24,31,125,31,202,31,202,30,195,31,13,31,13,30,255,31,37,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
