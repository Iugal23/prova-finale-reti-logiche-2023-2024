-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 943;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (255,0,248,0,139,0,0,0,212,0,255,0,0,0,0,0,136,0,114,0,0,0,65,0,179,0,0,0,188,0,0,0,90,0,57,0,227,0,0,0,217,0,114,0,87,0,0,0,237,0,34,0,0,0,0,0,0,0,0,0,21,0,0,0,138,0,73,0,116,0,136,0,183,0,89,0,166,0,194,0,253,0,220,0,67,0,0,0,98,0,146,0,0,0,199,0,0,0,97,0,99,0,25,0,126,0,150,0,127,0,6,0,52,0,214,0,136,0,166,0,7,0,0,0,67,0,107,0,45,0,14,0,85,0,233,0,234,0,12,0,0,0,10,0,15,0,0,0,204,0,30,0,136,0,142,0,223,0,68,0,59,0,24,0,29,0,39,0,213,0,4,0,0,0,9,0,242,0,150,0,180,0,199,0,97,0,225,0,153,0,127,0,0,0,81,0,0,0,8,0,228,0,191,0,238,0,192,0,177,0,118,0,238,0,167,0,80,0,172,0,102,0,91,0,0,0,247,0,30,0,123,0,0,0,166,0,99,0,198,0,59,0,212,0,89,0,232,0,82,0,0,0,37,0,168,0,0,0,166,0,9,0,35,0,73,0,197,0,0,0,236,0,0,0,0,0,164,0,0,0,35,0,239,0,2,0,114,0,208,0,95,0,156,0,139,0,0,0,0,0,41,0,164,0,242,0,90,0,43,0,12,0,196,0,84,0,0,0,68,0,135,0,41,0,0,0,243,0,213,0,102,0,0,0,92,0,106,0,86,0,167,0,205,0,59,0,0,0,188,0,46,0,235,0,114,0,212,0,243,0,0,0,95,0,75,0,173,0,10,0,62,0,214,0,162,0,250,0,107,0,122,0,82,0,100,0,146,0,202,0,235,0,151,0,0,0,190,0,234,0,0,0,59,0,163,0,177,0,100,0,200,0,214,0,163,0,0,0,0,0,151,0,0,0,15,0,0,0,0,0,248,0,43,0,242,0,0,0,97,0,55,0,238,0,112,0,41,0,0,0,80,0,125,0,0,0,176,0,0,0,213,0,0,0,89,0,13,0,17,0,33,0,175,0,162,0,115,0,11,0,0,0,9,0,200,0,0,0,152,0,254,0,115,0,116,0,31,0,14,0,167,0,116,0,125,0,37,0,0,0,69,0,59,0,226,0,250,0,209,0,133,0,198,0,32,0,98,0,220,0,228,0,222,0,0,0,104,0,30,0,223,0,0,0,57,0,97,0,0,0,170,0,48,0,131,0,175,0,236,0,5,0,69,0,247,0,178,0,81,0,185,0,25,0,233,0,123,0,71,0,0,0,224,0,126,0,0,0,80,0,175,0,163,0,0,0,122,0,97,0,107,0,224,0,241,0,136,0,159,0,0,0,188,0,0,0,0,0,165,0,185,0,104,0,58,0,52,0,0,0,189,0,180,0,102,0,0,0,67,0,81,0,0,0,30,0,30,0,28,0,0,0,192,0,74,0,0,0,0,0,0,0,0,0,193,0,201,0,152,0,182,0,0,0,253,0,5,0,0,0,155,0,46,0,0,0,108,0,189,0,0,0,161,0,76,0,141,0,206,0,87,0,203,0,11,0,147,0,147,0,163,0,120,0,204,0,100,0,0,0,199,0,130,0,85,0,59,0,215,0,0,0,255,0,221,0,128,0,85,0,107,0,218,0,33,0,0,0,95,0,125,0,17,0,24,0,118,0,67,0,115,0,151,0,35,0,160,0,0,0,48,0,0,0,139,0,147,0,220,0,0,0,122,0,110,0,67,0,0,0,38,0,211,0,0,0,185,0,68,0,78,0,143,0,214,0,64,0,19,0,0,0,119,0,206,0,99,0,32,0,82,0,11,0,37,0,0,0,140,0,166,0,34,0,0,0,209,0,0,0,37,0,73,0,47,0,2,0,22,0,45,0,139,0,0,0,216,0,106,0,0,0,184,0,0,0,0,0,118,0,0,0,0,0,247,0,36,0,105,0,60,0,215,0,181,0,94,0,68,0,52,0,135,0,204,0,191,0,0,0,0,0,104,0,110,0,147,0,27,0,84,0,171,0,221,0,134,0,46,0,82,0,0,0,124,0,172,0,168,0,135,0,98,0,0,0,0,0,162,0,0,0,205,0,43,0,171,0,150,0,72,0,0,0,86,0,230,0,103,0,172,0,48,0,66,0,156,0,0,0,200,0,0,0,60,0,191,0,239,0,202,0,32,0,59,0,95,0,70,0,82,0,0,0,85,0,0,0,158,0,68,0,0,0,85,0,0,0,164,0,232,0,29,0,5,0,54,0,77,0,24,0,88,0,112,0,0,0,200,0,117,0,79,0,0,0,63,0,208,0,251,0,0,0,145,0,157,0,245,0,148,0,245,0,0,0,235,0,0,0,79,0,211,0,0,0,70,0,0,0,198,0,240,0,0,0,145,0,0,0,133,0,151,0,0,0,182,0,87,0,37,0,239,0,6,0,210,0,39,0,109,0,103,0,8,0,177,0,28,0,181,0,58,0,0,0,32,0,183,0,40,0,81,0,220,0,25,0,172,0,226,0,126,0,33,0,162,0,0,0,131,0,0,0,0,0,133,0,220,0,252,0,108,0,186,0,161,0,219,0,94,0,0,0,102,0,0,0,245,0,0,0,120,0,3,0,156,0,72,0,210,0,103,0,83,0,0,0,43,0,133,0,0,0,96,0,0,0,152,0,0,0,0,0,24,0,29,0,0,0,36,0,0,0,192,0,151,0,41,0,0,0,0,0,126,0,158,0,0,0,101,0,121,0,206,0,134,0,0,0,217,0,60,0,0,0,63,0,86,0,228,0,180,0,243,0,0,0,0,0,157,0,67,0,0,0,101,0,20,0,79,0,149,0,54,0,185,0,71,0,174,0,200,0,225,0,165,0,224,0,103,0,198,0,0,0,183,0,0,0,245,0,1,0,2,0,100,0,187,0,145,0,194,0,135,0,132,0,240,0,105,0,199,0,132,0,199,0,229,0,213,0,172,0,138,0,87,0,0,0,103,0,97,0,15,0,229,0,0,0,72,0,59,0,0,0,57,0,189,0,0,0,218,0,0,0,6,0,0,0,160,0,218,0,1,0,15,0,99,0,236,0,218,0,219,0,105,0,96,0,183,0,66,0,0,0,53,0,24,0,212,0,188,0,119,0,173,0,190,0,68,0,16,0,59,0,133,0,174,0,81,0,25,0,200,0,8,0,24,0,0,0,8,0,100,0,224,0,113,0,55,0,237,0,240,0,0,0,66,0,57,0,163,0,78,0,0,0,248,0,185,0,153,0,213,0,25,0,97,0,251,0,232,0,135,0,229,0,0,0,126,0,74,0,114,0,183,0,248,0,77,0,153,0,0,0,179,0,253,0,15,0,24,0,216,0,185,0,103,0,156,0,25,0,136,0,130,0,132,0,0,0,205,0,115,0,133,0,0,0,0,0,1,0,186,0,162,0,146,0,145,0,114,0,0,0,0,0,249,0,209,0,0,0,0,0,85,0,254,0,67,0,121,0,53,0,187,0,0,0,128,0,75,0,79,0,214,0,159,0,57,0,189,0,73,0,201,0,106,0,87,0,225,0,0,0,67,0,179,0,251,0,0,0,224,0,220,0,66,0,210,0,87,0,238,0,107,0,61,0,0,0,192,0,115,0,0,0,243,0,0,0,93,0,49,0,77,0,208,0,0,0,92,0,172,0,85,0,0,0,0,0,152,0,0,0,120,0,0,0,247,0,10,0,136,0,235,0,109,0,0,0,234,0,117,0,0,0,218,0,221,0,123,0,246,0,0,0,236,0,144,0,116,0,0,0,86,0,124,0,153,0,0,0,19,0,76,0,10,0,0,0,0,0,214,0,81,0,110,0,24,0,37,0,0,0,102,0,78,0,163,0,70,0,0,0,180,0,99,0,0,0,55,0,38,0,11,0,52,0,26,0,3,0,37,0,160,0,0,0,180,0,245,0,201,0,126,0,96,0,195,0,207,0,0,0,45,0,17,0,186,0,216,0,171,0,48,0,69,0,143,0,39,0,73,0,0,0,127,0,128,0,97,0,4,0,88,0,251,0,247,0,175,0,0,0,128,0,68,0,167,0,193,0,0,0,152,0,104,0,153,0,55,0,0,0,90,0,0,0,2,0,0,0,0,0,9,0,241,0,75,0,30,0,0,0,48,0,83,0,41,0,0,0,0,0,33,0,0,0,128,0,183,0,178,0,130,0,137,0,115,0,247,0,0,0);
signal scenario_full  : scenario_type := (255,31,248,31,139,31,139,30,212,31,255,31,255,30,255,29,136,31,114,31,114,30,65,31,179,31,179,30,188,31,188,30,90,31,57,31,227,31,227,30,217,31,114,31,87,31,87,30,237,31,34,31,34,30,34,29,34,28,34,27,21,31,21,30,138,31,73,31,116,31,136,31,183,31,89,31,166,31,194,31,253,31,220,31,67,31,67,30,98,31,146,31,146,30,199,31,199,30,97,31,99,31,25,31,126,31,150,31,127,31,6,31,52,31,214,31,136,31,166,31,7,31,7,30,67,31,107,31,45,31,14,31,85,31,233,31,234,31,12,31,12,30,10,31,15,31,15,30,204,31,30,31,136,31,142,31,223,31,68,31,59,31,24,31,29,31,39,31,213,31,4,31,4,30,9,31,242,31,150,31,180,31,199,31,97,31,225,31,153,31,127,31,127,30,81,31,81,30,8,31,228,31,191,31,238,31,192,31,177,31,118,31,238,31,167,31,80,31,172,31,102,31,91,31,91,30,247,31,30,31,123,31,123,30,166,31,99,31,198,31,59,31,212,31,89,31,232,31,82,31,82,30,37,31,168,31,168,30,166,31,9,31,35,31,73,31,197,31,197,30,236,31,236,30,236,29,164,31,164,30,35,31,239,31,2,31,114,31,208,31,95,31,156,31,139,31,139,30,139,29,41,31,164,31,242,31,90,31,43,31,12,31,196,31,84,31,84,30,68,31,135,31,41,31,41,30,243,31,213,31,102,31,102,30,92,31,106,31,86,31,167,31,205,31,59,31,59,30,188,31,46,31,235,31,114,31,212,31,243,31,243,30,95,31,75,31,173,31,10,31,62,31,214,31,162,31,250,31,107,31,122,31,82,31,100,31,146,31,202,31,235,31,151,31,151,30,190,31,234,31,234,30,59,31,163,31,177,31,100,31,200,31,214,31,163,31,163,30,163,29,151,31,151,30,15,31,15,30,15,29,248,31,43,31,242,31,242,30,97,31,55,31,238,31,112,31,41,31,41,30,80,31,125,31,125,30,176,31,176,30,213,31,213,30,89,31,13,31,17,31,33,31,175,31,162,31,115,31,11,31,11,30,9,31,200,31,200,30,152,31,254,31,115,31,116,31,31,31,14,31,167,31,116,31,125,31,37,31,37,30,69,31,59,31,226,31,250,31,209,31,133,31,198,31,32,31,98,31,220,31,228,31,222,31,222,30,104,31,30,31,223,31,223,30,57,31,97,31,97,30,170,31,48,31,131,31,175,31,236,31,5,31,69,31,247,31,178,31,81,31,185,31,25,31,233,31,123,31,71,31,71,30,224,31,126,31,126,30,80,31,175,31,163,31,163,30,122,31,97,31,107,31,224,31,241,31,136,31,159,31,159,30,188,31,188,30,188,29,165,31,185,31,104,31,58,31,52,31,52,30,189,31,180,31,102,31,102,30,67,31,81,31,81,30,30,31,30,31,28,31,28,30,192,31,74,31,74,30,74,29,74,28,74,27,193,31,201,31,152,31,182,31,182,30,253,31,5,31,5,30,155,31,46,31,46,30,108,31,189,31,189,30,161,31,76,31,141,31,206,31,87,31,203,31,11,31,147,31,147,31,163,31,120,31,204,31,100,31,100,30,199,31,130,31,85,31,59,31,215,31,215,30,255,31,221,31,128,31,85,31,107,31,218,31,33,31,33,30,95,31,125,31,17,31,24,31,118,31,67,31,115,31,151,31,35,31,160,31,160,30,48,31,48,30,139,31,147,31,220,31,220,30,122,31,110,31,67,31,67,30,38,31,211,31,211,30,185,31,68,31,78,31,143,31,214,31,64,31,19,31,19,30,119,31,206,31,99,31,32,31,82,31,11,31,37,31,37,30,140,31,166,31,34,31,34,30,209,31,209,30,37,31,73,31,47,31,2,31,22,31,45,31,139,31,139,30,216,31,106,31,106,30,184,31,184,30,184,29,118,31,118,30,118,29,247,31,36,31,105,31,60,31,215,31,181,31,94,31,68,31,52,31,135,31,204,31,191,31,191,30,191,29,104,31,110,31,147,31,27,31,84,31,171,31,221,31,134,31,46,31,82,31,82,30,124,31,172,31,168,31,135,31,98,31,98,30,98,29,162,31,162,30,205,31,43,31,171,31,150,31,72,31,72,30,86,31,230,31,103,31,172,31,48,31,66,31,156,31,156,30,200,31,200,30,60,31,191,31,239,31,202,31,32,31,59,31,95,31,70,31,82,31,82,30,85,31,85,30,158,31,68,31,68,30,85,31,85,30,164,31,232,31,29,31,5,31,54,31,77,31,24,31,88,31,112,31,112,30,200,31,117,31,79,31,79,30,63,31,208,31,251,31,251,30,145,31,157,31,245,31,148,31,245,31,245,30,235,31,235,30,79,31,211,31,211,30,70,31,70,30,198,31,240,31,240,30,145,31,145,30,133,31,151,31,151,30,182,31,87,31,37,31,239,31,6,31,210,31,39,31,109,31,103,31,8,31,177,31,28,31,181,31,58,31,58,30,32,31,183,31,40,31,81,31,220,31,25,31,172,31,226,31,126,31,33,31,162,31,162,30,131,31,131,30,131,29,133,31,220,31,252,31,108,31,186,31,161,31,219,31,94,31,94,30,102,31,102,30,245,31,245,30,120,31,3,31,156,31,72,31,210,31,103,31,83,31,83,30,43,31,133,31,133,30,96,31,96,30,152,31,152,30,152,29,24,31,29,31,29,30,36,31,36,30,192,31,151,31,41,31,41,30,41,29,126,31,158,31,158,30,101,31,121,31,206,31,134,31,134,30,217,31,60,31,60,30,63,31,86,31,228,31,180,31,243,31,243,30,243,29,157,31,67,31,67,30,101,31,20,31,79,31,149,31,54,31,185,31,71,31,174,31,200,31,225,31,165,31,224,31,103,31,198,31,198,30,183,31,183,30,245,31,1,31,2,31,100,31,187,31,145,31,194,31,135,31,132,31,240,31,105,31,199,31,132,31,199,31,229,31,213,31,172,31,138,31,87,31,87,30,103,31,97,31,15,31,229,31,229,30,72,31,59,31,59,30,57,31,189,31,189,30,218,31,218,30,6,31,6,30,160,31,218,31,1,31,15,31,99,31,236,31,218,31,219,31,105,31,96,31,183,31,66,31,66,30,53,31,24,31,212,31,188,31,119,31,173,31,190,31,68,31,16,31,59,31,133,31,174,31,81,31,25,31,200,31,8,31,24,31,24,30,8,31,100,31,224,31,113,31,55,31,237,31,240,31,240,30,66,31,57,31,163,31,78,31,78,30,248,31,185,31,153,31,213,31,25,31,97,31,251,31,232,31,135,31,229,31,229,30,126,31,74,31,114,31,183,31,248,31,77,31,153,31,153,30,179,31,253,31,15,31,24,31,216,31,185,31,103,31,156,31,25,31,136,31,130,31,132,31,132,30,205,31,115,31,133,31,133,30,133,29,1,31,186,31,162,31,146,31,145,31,114,31,114,30,114,29,249,31,209,31,209,30,209,29,85,31,254,31,67,31,121,31,53,31,187,31,187,30,128,31,75,31,79,31,214,31,159,31,57,31,189,31,73,31,201,31,106,31,87,31,225,31,225,30,67,31,179,31,251,31,251,30,224,31,220,31,66,31,210,31,87,31,238,31,107,31,61,31,61,30,192,31,115,31,115,30,243,31,243,30,93,31,49,31,77,31,208,31,208,30,92,31,172,31,85,31,85,30,85,29,152,31,152,30,120,31,120,30,247,31,10,31,136,31,235,31,109,31,109,30,234,31,117,31,117,30,218,31,221,31,123,31,246,31,246,30,236,31,144,31,116,31,116,30,86,31,124,31,153,31,153,30,19,31,76,31,10,31,10,30,10,29,214,31,81,31,110,31,24,31,37,31,37,30,102,31,78,31,163,31,70,31,70,30,180,31,99,31,99,30,55,31,38,31,11,31,52,31,26,31,3,31,37,31,160,31,160,30,180,31,245,31,201,31,126,31,96,31,195,31,207,31,207,30,45,31,17,31,186,31,216,31,171,31,48,31,69,31,143,31,39,31,73,31,73,30,127,31,128,31,97,31,4,31,88,31,251,31,247,31,175,31,175,30,128,31,68,31,167,31,193,31,193,30,152,31,104,31,153,31,55,31,55,30,90,31,90,30,2,31,2,30,2,29,9,31,241,31,75,31,30,31,30,30,48,31,83,31,41,31,41,30,41,29,33,31,33,30,128,31,183,31,178,31,130,31,137,31,115,31,247,31,247,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
