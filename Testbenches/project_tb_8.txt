-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 745;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (199,0,123,0,41,0,0,0,0,0,158,0,0,0,227,0,0,0,0,0,239,0,127,0,180,0,0,0,0,0,153,0,121,0,152,0,0,0,149,0,24,0,1,0,104,0,0,0,7,0,162,0,0,0,117,0,0,0,0,0,96,0,28,0,20,0,0,0,0,0,251,0,36,0,163,0,198,0,204,0,38,0,234,0,224,0,119,0,35,0,48,0,210,0,244,0,47,0,124,0,251,0,0,0,139,0,0,0,152,0,168,0,77,0,122,0,166,0,53,0,208,0,86,0,216,0,193,0,150,0,187,0,211,0,0,0,155,0,134,0,0,0,126,0,25,0,0,0,213,0,41,0,221,0,142,0,0,0,108,0,208,0,49,0,52,0,35,0,0,0,76,0,61,0,102,0,231,0,192,0,0,0,218,0,0,0,0,0,127,0,37,0,0,0,0,0,189,0,178,0,253,0,23,0,51,0,218,0,189,0,225,0,106,0,13,0,8,0,224,0,239,0,208,0,133,0,0,0,185,0,0,0,187,0,196,0,88,0,0,0,0,0,164,0,252,0,76,0,18,0,153,0,165,0,0,0,15,0,0,0,171,0,182,0,152,0,97,0,148,0,246,0,82,0,53,0,176,0,129,0,252,0,149,0,0,0,0,0,223,0,108,0,215,0,94,0,173,0,126,0,91,0,149,0,161,0,230,0,245,0,0,0,103,0,0,0,0,0,236,0,0,0,177,0,0,0,89,0,231,0,0,0,175,0,62,0,103,0,160,0,116,0,159,0,0,0,214,0,204,0,204,0,103,0,80,0,97,0,0,0,146,0,192,0,0,0,131,0,187,0,57,0,41,0,176,0,121,0,0,0,0,0,183,0,33,0,101,0,88,0,167,0,79,0,230,0,224,0,96,0,180,0,0,0,18,0,58,0,8,0,239,0,182,0,4,0,78,0,142,0,0,0,71,0,0,0,241,0,176,0,55,0,85,0,86,0,14,0,235,0,45,0,165,0,221,0,220,0,0,0,81,0,0,0,12,0,152,0,234,0,0,0,3,0,187,0,74,0,86,0,132,0,74,0,214,0,189,0,174,0,43,0,0,0,242,0,242,0,46,0,145,0,105,0,0,0,249,0,56,0,167,0,10,0,0,0,0,0,194,0,56,0,92,0,0,0,6,0,247,0,69,0,0,0,155,0,91,0,0,0,160,0,110,0,239,0,0,0,0,0,76,0,207,0,0,0,211,0,35,0,0,0,244,0,18,0,168,0,0,0,0,0,202,0,77,0,72,0,0,0,0,0,229,0,229,0,0,0,71,0,72,0,207,0,63,0,38,0,26,0,119,0,73,0,0,0,0,0,21,0,0,0,209,0,0,0,136,0,107,0,115,0,0,0,0,0,7,0,100,0,9,0,193,0,181,0,96,0,232,0,0,0,82,0,214,0,217,0,50,0,57,0,0,0,114,0,236,0,0,0,0,0,94,0,4,0,246,0,71,0,0,0,182,0,252,0,0,0,246,0,178,0,214,0,168,0,25,0,91,0,37,0,107,0,186,0,49,0,3,0,118,0,93,0,165,0,64,0,133,0,141,0,251,0,13,0,139,0,49,0,59,0,201,0,0,0,186,0,52,0,83,0,203,0,222,0,182,0,227,0,9,0,246,0,0,0,165,0,203,0,7,0,154,0,0,0,0,0,0,0,182,0,173,0,118,0,181,0,71,0,203,0,0,0,157,0,175,0,87,0,176,0,182,0,91,0,0,0,64,0,24,0,108,0,0,0,11,0,10,0,0,0,107,0,160,0,155,0,105,0,143,0,0,0,81,0,230,0,234,0,198,0,218,0,159,0,252,0,58,0,0,0,22,0,0,0,237,0,0,0,68,0,253,0,214,0,152,0,127,0,67,0,0,0,149,0,89,0,0,0,57,0,154,0,246,0,0,0,117,0,90,0,93,0,39,0,96,0,135,0,155,0,0,0,0,0,221,0,0,0,0,0,147,0,0,0,13,0,58,0,181,0,94,0,207,0,186,0,152,0,98,0,77,0,0,0,70,0,36,0,115,0,96,0,125,0,221,0,0,0,0,0,110,0,145,0,89,0,26,0,172,0,116,0,56,0,77,0,185,0,87,0,0,0,245,0,189,0,25,0,153,0,91,0,162,0,10,0,0,0,222,0,213,0,0,0,211,0,0,0,50,0,242,0,0,0,189,0,152,0,66,0,136,0,150,0,84,0,150,0,0,0,0,0,99,0,109,0,235,0,235,0,90,0,216,0,121,0,0,0,0,0,77,0,95,0,158,0,0,0,179,0,45,0,209,0,159,0,99,0,64,0,56,0,0,0,104,0,0,0,178,0,206,0,191,0,55,0,0,0,50,0,55,0,175,0,97,0,0,0,96,0,33,0,43,0,247,0,174,0,191,0,188,0,138,0,25,0,0,0,0,0,109,0,105,0,0,0,0,0,196,0,217,0,199,0,13,0,203,0,79,0,71,0,255,0,2,0,67,0,190,0,133,0,194,0,0,0,241,0,154,0,248,0,68,0,106,0,23,0,109,0,60,0,0,0,38,0,245,0,120,0,58,0,168,0,0,0,99,0,199,0,28,0,0,0,0,0,239,0,177,0,63,0,208,0,0,0,2,0,0,0,85,0,1,0,152,0,0,0,1,0,40,0,203,0,222,0,153,0,117,0,14,0,163,0,171,0,21,0,6,0,66,0,180,0,0,0,152,0,176,0,0,0,252,0,202,0,128,0,161,0,68,0,126,0,98,0,28,0,252,0,39,0,105,0,219,0,120,0,0,0,251,0,78,0,99,0,208,0,0,0,218,0,115,0,0,0,134,0,15,0,0,0,96,0,225,0,46,0,179,0,176,0,176,0,47,0,188,0,0,0,172,0,208,0,86,0,226,0,72,0,144,0,0,0,0,0,0,0,13,0,16,0,77,0,172,0,0,0,63,0,119,0,82,0,22,0,138,0,168,0,0,0,33,0,126,0,197,0,0,0,0,0,186,0,64,0,241,0,211,0,163,0,108,0,154,0,59,0,1,0,146,0,42,0,0,0,74,0,32,0,85,0,0,0,0,0,149,0,37,0,150,0,0,0,175,0,111,0,69,0,131,0,164,0,0,0,162,0,13,0,235,0,84,0,214,0,0,0,0,0,171,0,174,0,161,0,121,0,209,0,160,0,38,0,200,0,166,0,200,0,157,0,190,0,0,0,109,0,0,0,168,0,235,0,131,0,13,0,186,0,0,0,123,0,164,0,0,0,0,0,0,0,184,0,244,0,230,0,16,0,101,0,84,0,3,0,219,0,167,0,159,0,139,0,0,0,57,0,198,0,218,0,234,0,114,0,0,0);
signal scenario_full  : scenario_type := (199,31,123,31,41,31,41,30,41,29,158,31,158,30,227,31,227,30,227,29,239,31,127,31,180,31,180,30,180,29,153,31,121,31,152,31,152,30,149,31,24,31,1,31,104,31,104,30,7,31,162,31,162,30,117,31,117,30,117,29,96,31,28,31,20,31,20,30,20,29,251,31,36,31,163,31,198,31,204,31,38,31,234,31,224,31,119,31,35,31,48,31,210,31,244,31,47,31,124,31,251,31,251,30,139,31,139,30,152,31,168,31,77,31,122,31,166,31,53,31,208,31,86,31,216,31,193,31,150,31,187,31,211,31,211,30,155,31,134,31,134,30,126,31,25,31,25,30,213,31,41,31,221,31,142,31,142,30,108,31,208,31,49,31,52,31,35,31,35,30,76,31,61,31,102,31,231,31,192,31,192,30,218,31,218,30,218,29,127,31,37,31,37,30,37,29,189,31,178,31,253,31,23,31,51,31,218,31,189,31,225,31,106,31,13,31,8,31,224,31,239,31,208,31,133,31,133,30,185,31,185,30,187,31,196,31,88,31,88,30,88,29,164,31,252,31,76,31,18,31,153,31,165,31,165,30,15,31,15,30,171,31,182,31,152,31,97,31,148,31,246,31,82,31,53,31,176,31,129,31,252,31,149,31,149,30,149,29,223,31,108,31,215,31,94,31,173,31,126,31,91,31,149,31,161,31,230,31,245,31,245,30,103,31,103,30,103,29,236,31,236,30,177,31,177,30,89,31,231,31,231,30,175,31,62,31,103,31,160,31,116,31,159,31,159,30,214,31,204,31,204,31,103,31,80,31,97,31,97,30,146,31,192,31,192,30,131,31,187,31,57,31,41,31,176,31,121,31,121,30,121,29,183,31,33,31,101,31,88,31,167,31,79,31,230,31,224,31,96,31,180,31,180,30,18,31,58,31,8,31,239,31,182,31,4,31,78,31,142,31,142,30,71,31,71,30,241,31,176,31,55,31,85,31,86,31,14,31,235,31,45,31,165,31,221,31,220,31,220,30,81,31,81,30,12,31,152,31,234,31,234,30,3,31,187,31,74,31,86,31,132,31,74,31,214,31,189,31,174,31,43,31,43,30,242,31,242,31,46,31,145,31,105,31,105,30,249,31,56,31,167,31,10,31,10,30,10,29,194,31,56,31,92,31,92,30,6,31,247,31,69,31,69,30,155,31,91,31,91,30,160,31,110,31,239,31,239,30,239,29,76,31,207,31,207,30,211,31,35,31,35,30,244,31,18,31,168,31,168,30,168,29,202,31,77,31,72,31,72,30,72,29,229,31,229,31,229,30,71,31,72,31,207,31,63,31,38,31,26,31,119,31,73,31,73,30,73,29,21,31,21,30,209,31,209,30,136,31,107,31,115,31,115,30,115,29,7,31,100,31,9,31,193,31,181,31,96,31,232,31,232,30,82,31,214,31,217,31,50,31,57,31,57,30,114,31,236,31,236,30,236,29,94,31,4,31,246,31,71,31,71,30,182,31,252,31,252,30,246,31,178,31,214,31,168,31,25,31,91,31,37,31,107,31,186,31,49,31,3,31,118,31,93,31,165,31,64,31,133,31,141,31,251,31,13,31,139,31,49,31,59,31,201,31,201,30,186,31,52,31,83,31,203,31,222,31,182,31,227,31,9,31,246,31,246,30,165,31,203,31,7,31,154,31,154,30,154,29,154,28,182,31,173,31,118,31,181,31,71,31,203,31,203,30,157,31,175,31,87,31,176,31,182,31,91,31,91,30,64,31,24,31,108,31,108,30,11,31,10,31,10,30,107,31,160,31,155,31,105,31,143,31,143,30,81,31,230,31,234,31,198,31,218,31,159,31,252,31,58,31,58,30,22,31,22,30,237,31,237,30,68,31,253,31,214,31,152,31,127,31,67,31,67,30,149,31,89,31,89,30,57,31,154,31,246,31,246,30,117,31,90,31,93,31,39,31,96,31,135,31,155,31,155,30,155,29,221,31,221,30,221,29,147,31,147,30,13,31,58,31,181,31,94,31,207,31,186,31,152,31,98,31,77,31,77,30,70,31,36,31,115,31,96,31,125,31,221,31,221,30,221,29,110,31,145,31,89,31,26,31,172,31,116,31,56,31,77,31,185,31,87,31,87,30,245,31,189,31,25,31,153,31,91,31,162,31,10,31,10,30,222,31,213,31,213,30,211,31,211,30,50,31,242,31,242,30,189,31,152,31,66,31,136,31,150,31,84,31,150,31,150,30,150,29,99,31,109,31,235,31,235,31,90,31,216,31,121,31,121,30,121,29,77,31,95,31,158,31,158,30,179,31,45,31,209,31,159,31,99,31,64,31,56,31,56,30,104,31,104,30,178,31,206,31,191,31,55,31,55,30,50,31,55,31,175,31,97,31,97,30,96,31,33,31,43,31,247,31,174,31,191,31,188,31,138,31,25,31,25,30,25,29,109,31,105,31,105,30,105,29,196,31,217,31,199,31,13,31,203,31,79,31,71,31,255,31,2,31,67,31,190,31,133,31,194,31,194,30,241,31,154,31,248,31,68,31,106,31,23,31,109,31,60,31,60,30,38,31,245,31,120,31,58,31,168,31,168,30,99,31,199,31,28,31,28,30,28,29,239,31,177,31,63,31,208,31,208,30,2,31,2,30,85,31,1,31,152,31,152,30,1,31,40,31,203,31,222,31,153,31,117,31,14,31,163,31,171,31,21,31,6,31,66,31,180,31,180,30,152,31,176,31,176,30,252,31,202,31,128,31,161,31,68,31,126,31,98,31,28,31,252,31,39,31,105,31,219,31,120,31,120,30,251,31,78,31,99,31,208,31,208,30,218,31,115,31,115,30,134,31,15,31,15,30,96,31,225,31,46,31,179,31,176,31,176,31,47,31,188,31,188,30,172,31,208,31,86,31,226,31,72,31,144,31,144,30,144,29,144,28,13,31,16,31,77,31,172,31,172,30,63,31,119,31,82,31,22,31,138,31,168,31,168,30,33,31,126,31,197,31,197,30,197,29,186,31,64,31,241,31,211,31,163,31,108,31,154,31,59,31,1,31,146,31,42,31,42,30,74,31,32,31,85,31,85,30,85,29,149,31,37,31,150,31,150,30,175,31,111,31,69,31,131,31,164,31,164,30,162,31,13,31,235,31,84,31,214,31,214,30,214,29,171,31,174,31,161,31,121,31,209,31,160,31,38,31,200,31,166,31,200,31,157,31,190,31,190,30,109,31,109,30,168,31,235,31,131,31,13,31,186,31,186,30,123,31,164,31,164,30,164,29,164,28,184,31,244,31,230,31,16,31,101,31,84,31,3,31,219,31,167,31,159,31,139,31,139,30,57,31,198,31,218,31,234,31,114,31,114,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
