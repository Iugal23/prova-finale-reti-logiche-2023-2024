-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 797;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,182,0,91,0,0,0,22,0,57,0,131,0,74,0,77,0,0,0,207,0,182,0,193,0,125,0,8,0,55,0,0,0,102,0,0,0,232,0,139,0,80,0,192,0,0,0,237,0,121,0,164,0,170,0,0,0,167,0,154,0,113,0,231,0,111,0,109,0,226,0,92,0,220,0,20,0,178,0,0,0,9,0,63,0,0,0,251,0,176,0,0,0,159,0,105,0,235,0,77,0,7,0,166,0,0,0,0,0,218,0,0,0,0,0,178,0,0,0,0,0,0,0,131,0,176,0,0,0,0,0,234,0,164,0,115,0,0,0,0,0,61,0,0,0,176,0,0,0,21,0,79,0,51,0,249,0,182,0,74,0,230,0,190,0,219,0,250,0,0,0,148,0,116,0,2,0,83,0,194,0,0,0,172,0,45,0,66,0,0,0,167,0,220,0,0,0,11,0,60,0,29,0,23,0,131,0,207,0,194,0,24,0,73,0,227,0,0,0,112,0,84,0,4,0,52,0,17,0,1,0,83,0,0,0,0,0,139,0,37,0,40,0,253,0,27,0,0,0,0,0,0,0,0,0,7,0,153,0,165,0,0,0,145,0,251,0,232,0,78,0,27,0,247,0,144,0,228,0,186,0,0,0,118,0,42,0,0,0,113,0,167,0,62,0,0,0,156,0,223,0,15,0,0,0,179,0,231,0,0,0,157,0,66,0,0,0,41,0,118,0,58,0,107,0,45,0,114,0,113,0,94,0,186,0,51,0,59,0,0,0,204,0,0,0,54,0,30,0,0,0,232,0,193,0,0,0,20,0,104,0,130,0,0,0,178,0,95,0,239,0,21,0,92,0,125,0,202,0,0,0,17,0,157,0,245,0,151,0,174,0,42,0,0,0,47,0,237,0,183,0,0,0,169,0,186,0,0,0,5,0,84,0,111,0,242,0,40,0,78,0,54,0,132,0,0,0,113,0,238,0,120,0,202,0,18,0,42,0,24,0,0,0,21,0,168,0,143,0,244,0,0,0,74,0,73,0,109,0,160,0,66,0,72,0,157,0,32,0,4,0,173,0,0,0,124,0,0,0,251,0,247,0,24,0,186,0,141,0,193,0,77,0,0,0,49,0,0,0,196,0,0,0,0,0,0,0,82,0,0,0,67,0,0,0,252,0,40,0,170,0,223,0,161,0,209,0,186,0,193,0,159,0,236,0,240,0,0,0,165,0,0,0,122,0,81,0,216,0,38,0,0,0,0,0,188,0,161,0,0,0,199,0,216,0,108,0,212,0,0,0,31,0,0,0,72,0,140,0,41,0,55,0,163,0,196,0,218,0,89,0,243,0,0,0,0,0,182,0,0,0,33,0,64,0,28,0,0,0,0,0,117,0,0,0,0,0,232,0,166,0,112,0,152,0,229,0,84,0,195,0,130,0,101,0,0,0,103,0,0,0,229,0,0,0,164,0,233,0,59,0,161,0,43,0,128,0,0,0,53,0,151,0,233,0,144,0,137,0,40,0,38,0,0,0,139,0,0,0,141,0,81,0,140,0,222,0,198,0,73,0,0,0,0,0,183,0,0,0,0,0,75,0,0,0,188,0,0,0,0,0,0,0,36,0,195,0,62,0,54,0,138,0,187,0,32,0,55,0,175,0,92,0,99,0,140,0,210,0,28,0,100,0,56,0,177,0,153,0,226,0,165,0,0,0,178,0,157,0,64,0,0,0,0,0,215,0,90,0,144,0,213,0,0,0,0,0,0,0,42,0,0,0,77,0,0,0,48,0,42,0,254,0,0,0,3,0,241,0,83,0,88,0,56,0,87,0,254,0,210,0,4,0,223,0,99,0,201,0,0,0,86,0,106,0,114,0,9,0,179,0,0,0,229,0,33,0,77,0,158,0,168,0,112,0,0,0,225,0,43,0,141,0,8,0,86,0,167,0,166,0,158,0,95,0,136,0,151,0,96,0,0,0,38,0,23,0,78,0,204,0,44,0,227,0,49,0,0,0,181,0,121,0,0,0,0,0,3,0,0,0,71,0,209,0,0,0,76,0,133,0,0,0,0,0,231,0,0,0,85,0,67,0,217,0,219,0,0,0,75,0,0,0,252,0,122,0,235,0,0,0,158,0,185,0,0,0,19,0,160,0,131,0,0,0,0,0,32,0,142,0,216,0,197,0,198,0,213,0,0,0,25,0,208,0,112,0,98,0,4,0,0,0,91,0,26,0,0,0,0,0,236,0,127,0,197,0,140,0,69,0,0,0,105,0,110,0,87,0,127,0,70,0,51,0,72,0,67,0,0,0,236,0,10,0,13,0,0,0,224,0,32,0,187,0,0,0,162,0,230,0,245,0,0,0,0,0,122,0,122,0,192,0,168,0,159,0,0,0,95,0,66,0,0,0,95,0,129,0,0,0,0,0,0,0,15,0,14,0,143,0,0,0,35,0,0,0,122,0,232,0,166,0,214,0,171,0,149,0,34,0,16,0,0,0,219,0,53,0,53,0,91,0,0,0,196,0,69,0,74,0,17,0,177,0,5,0,56,0,122,0,203,0,36,0,46,0,34,0,105,0,153,0,0,0,63,0,225,0,37,0,0,0,232,0,0,0,11,0,95,0,217,0,0,0,163,0,0,0,34,0,208,0,0,0,243,0,112,0,104,0,70,0,33,0,0,0,31,0,0,0,216,0,0,0,139,0,160,0,0,0,172,0,40,0,148,0,155,0,115,0,0,0,33,0,115,0,195,0,196,0,175,0,242,0,254,0,115,0,0,0,64,0,0,0,137,0,0,0,0,0,0,0,225,0,116,0,38,0,116,0,72,0,0,0,225,0,197,0,0,0,104,0,0,0,166,0,165,0,160,0,204,0,156,0,25,0,144,0,159,0,167,0,160,0,197,0,160,0,0,0,52,0,37,0,0,0,35,0,190,0,11,0,0,0,87,0,229,0,103,0,189,0,212,0,0,0,156,0,8,0,152,0,87,0,38,0,220,0,232,0,0,0,72,0,154,0,171,0,246,0,0,0,3,0,131,0,235,0,148,0,237,0,242,0,167,0,46,0,70,0,0,0,6,0,167,0,0,0,22,0,130,0,105,0,172,0,0,0,0,0,253,0,117,0,11,0,185,0,31,0,164,0,26,0,251,0,246,0,0,0,111,0,194,0,168,0,66,0,204,0,236,0,10,0,234,0,0,0,0,0,0,0,0,0,99,0,0,0,112,0,249,0,103,0,194,0,190,0,48,0,83,0,169,0,0,0,26,0,91,0,231,0,0,0,74,0,52,0,103,0,167,0,0,0,75,0,192,0,27,0,157,0,40,0,210,0,211,0,67,0,157,0,5,0,93,0,0,0,2,0,180,0,0,0,63,0,126,0,158,0,113,0,0,0,219,0,54,0,7,0,101,0,151,0,80,0,68,0,112,0,148,0,197,0,208,0,0,0,0,0,64,0,221,0,16,0,239,0,125,0,53,0,0,0,211,0,0,0,126,0,254,0,51,0,0,0,190,0,80,0,251,0,86,0,97,0,0,0,73,0,18,0,197,0,205,0,0,0,60,0,0,0,198,0,142,0,89,0,156,0,58,0);
signal scenario_full  : scenario_type := (0,0,182,31,91,31,91,30,22,31,57,31,131,31,74,31,77,31,77,30,207,31,182,31,193,31,125,31,8,31,55,31,55,30,102,31,102,30,232,31,139,31,80,31,192,31,192,30,237,31,121,31,164,31,170,31,170,30,167,31,154,31,113,31,231,31,111,31,109,31,226,31,92,31,220,31,20,31,178,31,178,30,9,31,63,31,63,30,251,31,176,31,176,30,159,31,105,31,235,31,77,31,7,31,166,31,166,30,166,29,218,31,218,30,218,29,178,31,178,30,178,29,178,28,131,31,176,31,176,30,176,29,234,31,164,31,115,31,115,30,115,29,61,31,61,30,176,31,176,30,21,31,79,31,51,31,249,31,182,31,74,31,230,31,190,31,219,31,250,31,250,30,148,31,116,31,2,31,83,31,194,31,194,30,172,31,45,31,66,31,66,30,167,31,220,31,220,30,11,31,60,31,29,31,23,31,131,31,207,31,194,31,24,31,73,31,227,31,227,30,112,31,84,31,4,31,52,31,17,31,1,31,83,31,83,30,83,29,139,31,37,31,40,31,253,31,27,31,27,30,27,29,27,28,27,27,7,31,153,31,165,31,165,30,145,31,251,31,232,31,78,31,27,31,247,31,144,31,228,31,186,31,186,30,118,31,42,31,42,30,113,31,167,31,62,31,62,30,156,31,223,31,15,31,15,30,179,31,231,31,231,30,157,31,66,31,66,30,41,31,118,31,58,31,107,31,45,31,114,31,113,31,94,31,186,31,51,31,59,31,59,30,204,31,204,30,54,31,30,31,30,30,232,31,193,31,193,30,20,31,104,31,130,31,130,30,178,31,95,31,239,31,21,31,92,31,125,31,202,31,202,30,17,31,157,31,245,31,151,31,174,31,42,31,42,30,47,31,237,31,183,31,183,30,169,31,186,31,186,30,5,31,84,31,111,31,242,31,40,31,78,31,54,31,132,31,132,30,113,31,238,31,120,31,202,31,18,31,42,31,24,31,24,30,21,31,168,31,143,31,244,31,244,30,74,31,73,31,109,31,160,31,66,31,72,31,157,31,32,31,4,31,173,31,173,30,124,31,124,30,251,31,247,31,24,31,186,31,141,31,193,31,77,31,77,30,49,31,49,30,196,31,196,30,196,29,196,28,82,31,82,30,67,31,67,30,252,31,40,31,170,31,223,31,161,31,209,31,186,31,193,31,159,31,236,31,240,31,240,30,165,31,165,30,122,31,81,31,216,31,38,31,38,30,38,29,188,31,161,31,161,30,199,31,216,31,108,31,212,31,212,30,31,31,31,30,72,31,140,31,41,31,55,31,163,31,196,31,218,31,89,31,243,31,243,30,243,29,182,31,182,30,33,31,64,31,28,31,28,30,28,29,117,31,117,30,117,29,232,31,166,31,112,31,152,31,229,31,84,31,195,31,130,31,101,31,101,30,103,31,103,30,229,31,229,30,164,31,233,31,59,31,161,31,43,31,128,31,128,30,53,31,151,31,233,31,144,31,137,31,40,31,38,31,38,30,139,31,139,30,141,31,81,31,140,31,222,31,198,31,73,31,73,30,73,29,183,31,183,30,183,29,75,31,75,30,188,31,188,30,188,29,188,28,36,31,195,31,62,31,54,31,138,31,187,31,32,31,55,31,175,31,92,31,99,31,140,31,210,31,28,31,100,31,56,31,177,31,153,31,226,31,165,31,165,30,178,31,157,31,64,31,64,30,64,29,215,31,90,31,144,31,213,31,213,30,213,29,213,28,42,31,42,30,77,31,77,30,48,31,42,31,254,31,254,30,3,31,241,31,83,31,88,31,56,31,87,31,254,31,210,31,4,31,223,31,99,31,201,31,201,30,86,31,106,31,114,31,9,31,179,31,179,30,229,31,33,31,77,31,158,31,168,31,112,31,112,30,225,31,43,31,141,31,8,31,86,31,167,31,166,31,158,31,95,31,136,31,151,31,96,31,96,30,38,31,23,31,78,31,204,31,44,31,227,31,49,31,49,30,181,31,121,31,121,30,121,29,3,31,3,30,71,31,209,31,209,30,76,31,133,31,133,30,133,29,231,31,231,30,85,31,67,31,217,31,219,31,219,30,75,31,75,30,252,31,122,31,235,31,235,30,158,31,185,31,185,30,19,31,160,31,131,31,131,30,131,29,32,31,142,31,216,31,197,31,198,31,213,31,213,30,25,31,208,31,112,31,98,31,4,31,4,30,91,31,26,31,26,30,26,29,236,31,127,31,197,31,140,31,69,31,69,30,105,31,110,31,87,31,127,31,70,31,51,31,72,31,67,31,67,30,236,31,10,31,13,31,13,30,224,31,32,31,187,31,187,30,162,31,230,31,245,31,245,30,245,29,122,31,122,31,192,31,168,31,159,31,159,30,95,31,66,31,66,30,95,31,129,31,129,30,129,29,129,28,15,31,14,31,143,31,143,30,35,31,35,30,122,31,232,31,166,31,214,31,171,31,149,31,34,31,16,31,16,30,219,31,53,31,53,31,91,31,91,30,196,31,69,31,74,31,17,31,177,31,5,31,56,31,122,31,203,31,36,31,46,31,34,31,105,31,153,31,153,30,63,31,225,31,37,31,37,30,232,31,232,30,11,31,95,31,217,31,217,30,163,31,163,30,34,31,208,31,208,30,243,31,112,31,104,31,70,31,33,31,33,30,31,31,31,30,216,31,216,30,139,31,160,31,160,30,172,31,40,31,148,31,155,31,115,31,115,30,33,31,115,31,195,31,196,31,175,31,242,31,254,31,115,31,115,30,64,31,64,30,137,31,137,30,137,29,137,28,225,31,116,31,38,31,116,31,72,31,72,30,225,31,197,31,197,30,104,31,104,30,166,31,165,31,160,31,204,31,156,31,25,31,144,31,159,31,167,31,160,31,197,31,160,31,160,30,52,31,37,31,37,30,35,31,190,31,11,31,11,30,87,31,229,31,103,31,189,31,212,31,212,30,156,31,8,31,152,31,87,31,38,31,220,31,232,31,232,30,72,31,154,31,171,31,246,31,246,30,3,31,131,31,235,31,148,31,237,31,242,31,167,31,46,31,70,31,70,30,6,31,167,31,167,30,22,31,130,31,105,31,172,31,172,30,172,29,253,31,117,31,11,31,185,31,31,31,164,31,26,31,251,31,246,31,246,30,111,31,194,31,168,31,66,31,204,31,236,31,10,31,234,31,234,30,234,29,234,28,234,27,99,31,99,30,112,31,249,31,103,31,194,31,190,31,48,31,83,31,169,31,169,30,26,31,91,31,231,31,231,30,74,31,52,31,103,31,167,31,167,30,75,31,192,31,27,31,157,31,40,31,210,31,211,31,67,31,157,31,5,31,93,31,93,30,2,31,180,31,180,30,63,31,126,31,158,31,113,31,113,30,219,31,54,31,7,31,101,31,151,31,80,31,68,31,112,31,148,31,197,31,208,31,208,30,208,29,64,31,221,31,16,31,239,31,125,31,53,31,53,30,211,31,211,30,126,31,254,31,51,31,51,30,190,31,80,31,251,31,86,31,97,31,97,30,73,31,18,31,197,31,205,31,205,30,60,31,60,30,198,31,142,31,89,31,156,31,58,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
