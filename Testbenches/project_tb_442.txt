-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 945;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (188,0,0,0,57,0,0,0,8,0,140,0,4,0,227,0,115,0,0,0,220,0,0,0,247,0,12,0,228,0,224,0,81,0,0,0,148,0,105,0,68,0,0,0,175,0,36,0,42,0,42,0,24,0,184,0,63,0,203,0,20,0,0,0,180,0,106,0,54,0,73,0,167,0,74,0,0,0,0,0,0,0,0,0,207,0,73,0,0,0,115,0,99,0,185,0,63,0,39,0,86,0,0,0,25,0,98,0,38,0,0,0,193,0,117,0,178,0,41,0,128,0,113,0,236,0,0,0,148,0,233,0,0,0,0,0,0,0,102,0,18,0,0,0,122,0,229,0,22,0,186,0,0,0,181,0,22,0,191,0,176,0,158,0,94,0,127,0,7,0,228,0,18,0,227,0,25,0,0,0,173,0,74,0,198,0,185,0,91,0,148,0,242,0,99,0,16,0,184,0,231,0,24,0,0,0,180,0,95,0,194,0,0,0,253,0,250,0,98,0,18,0,12,0,20,0,80,0,0,0,54,0,134,0,211,0,29,0,229,0,187,0,0,0,199,0,246,0,0,0,218,0,228,0,47,0,0,0,62,0,85,0,90,0,89,0,0,0,177,0,179,0,89,0,0,0,180,0,126,0,0,0,190,0,0,0,58,0,6,0,116,0,16,0,120,0,253,0,211,0,0,0,89,0,0,0,93,0,11,0,54,0,181,0,13,0,0,0,35,0,171,0,157,0,238,0,0,0,0,0,0,0,99,0,0,0,200,0,113,0,232,0,203,0,101,0,109,0,119,0,116,0,16,0,231,0,246,0,0,0,242,0,54,0,88,0,198,0,0,0,138,0,80,0,122,0,0,0,171,0,157,0,0,0,30,0,112,0,198,0,243,0,106,0,0,0,181,0,246,0,184,0,120,0,240,0,15,0,0,0,167,0,180,0,0,0,156,0,0,0,0,0,232,0,210,0,99,0,113,0,0,0,130,0,203,0,0,0,204,0,105,0,0,0,79,0,0,0,8,0,32,0,77,0,0,0,203,0,179,0,10,0,0,0,233,0,15,0,238,0,59,0,47,0,0,0,212,0,88,0,199,0,118,0,38,0,64,0,232,0,120,0,253,0,68,0,85,0,13,0,78,0,0,0,0,0,32,0,76,0,187,0,0,0,23,0,145,0,0,0,152,0,49,0,53,0,213,0,105,0,159,0,247,0,0,0,95,0,233,0,19,0,40,0,182,0,219,0,48,0,36,0,25,0,240,0,127,0,27,0,25,0,36,0,139,0,51,0,74,0,124,0,195,0,18,0,3,0,116,0,127,0,97,0,0,0,40,0,156,0,239,0,17,0,156,0,0,0,3,0,159,0,0,0,73,0,0,0,0,0,26,0,108,0,0,0,5,0,154,0,153,0,254,0,221,0,187,0,147,0,0,0,141,0,87,0,0,0,0,0,102,0,0,0,138,0,0,0,124,0,156,0,17,0,201,0,137,0,0,0,0,0,183,0,0,0,70,0,150,0,25,0,47,0,58,0,87,0,180,0,95,0,0,0,0,0,237,0,3,0,127,0,107,0,138,0,164,0,209,0,0,0,171,0,0,0,231,0,0,0,27,0,0,0,68,0,99,0,134,0,208,0,170,0,158,0,0,0,126,0,29,0,227,0,86,0,246,0,217,0,170,0,63,0,250,0,60,0,106,0,35,0,0,0,23,0,0,0,247,0,165,0,115,0,0,0,17,0,80,0,106,0,0,0,23,0,0,0,195,0,64,0,18,0,201,0,0,0,0,0,178,0,0,0,170,0,244,0,81,0,239,0,224,0,73,0,204,0,62,0,0,0,104,0,6,0,0,0,238,0,10,0,60,0,220,0,144,0,0,0,0,0,70,0,203,0,236,0,95,0,216,0,0,0,205,0,0,0,142,0,1,0,137,0,0,0,175,0,63,0,0,0,43,0,11,0,172,0,92,0,85,0,208,0,19,0,131,0,139,0,0,0,233,0,115,0,0,0,202,0,90,0,99,0,13,0,0,0,0,0,71,0,232,0,75,0,0,0,161,0,243,0,130,0,0,0,26,0,143,0,227,0,0,0,64,0,123,0,33,0,189,0,0,0,0,0,0,0,28,0,70,0,3,0,101,0,141,0,212,0,244,0,137,0,165,0,54,0,205,0,39,0,100,0,66,0,117,0,46,0,0,0,99,0,51,0,118,0,0,0,0,0,0,0,225,0,14,0,117,0,130,0,151,0,227,0,112,0,112,0,57,0,158,0,204,0,0,0,0,0,89,0,139,0,243,0,103,0,196,0,95,0,134,0,25,0,210,0,25,0,185,0,206,0,7,0,0,0,134,0,79,0,23,0,100,0,0,0,102,0,65,0,140,0,150,0,64,0,212,0,130,0,0,0,144,0,88,0,0,0,89,0,197,0,124,0,245,0,41,0,0,0,103,0,239,0,128,0,0,0,111,0,10,0,242,0,76,0,199,0,198,0,69,0,0,0,50,0,140,0,123,0,239,0,0,0,102,0,231,0,96,0,136,0,217,0,0,0,156,0,91,0,228,0,0,0,115,0,48,0,241,0,125,0,81,0,0,0,152,0,93,0,229,0,99,0,45,0,204,0,72,0,94,0,150,0,78,0,248,0,159,0,251,0,0,0,63,0,129,0,55,0,29,0,0,0,195,0,52,0,190,0,241,0,136,0,123,0,16,0,0,0,202,0,214,0,5,0,0,0,22,0,127,0,172,0,132,0,214,0,0,0,76,0,225,0,0,0,77,0,124,0,14,0,226,0,83,0,4,0,23,0,37,0,42,0,246,0,54,0,209,0,188,0,210,0,0,0,201,0,55,0,168,0,147,0,0,0,138,0,242,0,104,0,0,0,145,0,143,0,87,0,0,0,7,0,28,0,46,0,230,0,41,0,42,0,44,0,226,0,216,0,104,0,234,0,181,0,0,0,106,0,135,0,105,0,44,0,15,0,0,0,0,0,0,0,0,0,63,0,179,0,154,0,122,0,83,0,0,0,0,0,145,0,159,0,62,0,0,0,198,0,16,0,22,0,152,0,172,0,129,0,0,0,173,0,185,0,70,0,53,0,0,0,0,0,0,0,93,0,171,0,178,0,149,0,0,0,186,0,254,0,152,0,0,0,114,0,205,0,229,0,214,0,133,0,0,0,246,0,212,0,23,0,27,0,199,0,236,0,0,0,40,0,143,0,92,0,210,0,149,0,98,0,203,0,218,0,0,0,205,0,151,0,241,0,247,0,199,0,0,0,176,0,76,0,168,0,6,0,0,0,0,0,89,0,244,0,176,0,249,0,245,0,245,0,36,0,110,0,158,0,0,0,91,0,1,0,142,0,41,0,250,0,10,0,231,0,216,0,240,0,239,0,249,0,47,0,132,0,191,0,94,0,234,0,188,0,0,0,0,0,24,0,0,0,119,0,70,0,229,0,2,0,0,0,0,0,27,0,0,0,117,0,0,0,0,0,164,0,98,0,0,0,3,0,172,0,198,0,0,0,11,0,0,0,179,0,16,0,133,0,94,0,99,0,93,0,3,0,247,0,0,0,21,0,91,0,0,0,160,0,215,0,0,0,125,0,214,0,153,0,37,0,156,0,0,0,172,0,0,0,91,0,0,0,92,0,243,0,105,0,208,0,173,0,200,0,105,0,0,0,70,0,225,0,186,0,195,0,81,0,110,0,84,0,90,0,33,0,240,0,0,0,57,0,25,0,0,0,127,0,254,0,123,0,94,0,248,0,33,0,38,0,109,0,199,0,147,0,0,0,160,0,185,0,0,0,110,0,199,0,121,0,66,0,136,0,11,0,198,0,6,0,206,0,0,0,0,0,93,0,66,0,218,0,0,0,43,0,139,0,54,0,76,0,0,0,239,0,253,0,0,0,129,0,42,0,214,0,54,0,110,0,130,0,96,0,1,0,0,0,192,0,151,0,203,0,55,0,31,0,0,0,202,0,78,0,0,0,252,0,165,0,0,0,196,0,113,0,198,0,151,0,7,0,246,0,0,0,91,0,0,0,11,0,126,0,79,0,133,0,253,0,13,0,13,0,6,0,180,0,0,0,121,0,60,0,0,0,199,0,137,0,0,0,76,0,51,0,0,0,190,0,0,0,6,0,0,0,167,0,155,0,254,0,173,0,219,0,20,0,96,0,49,0,187,0,0,0,131,0,171,0,64,0,243,0,0,0,0,0,178,0,57,0,119,0,8,0,127,0,255,0,33,0,211,0,243,0);
signal scenario_full  : scenario_type := (188,31,188,30,57,31,57,30,8,31,140,31,4,31,227,31,115,31,115,30,220,31,220,30,247,31,12,31,228,31,224,31,81,31,81,30,148,31,105,31,68,31,68,30,175,31,36,31,42,31,42,31,24,31,184,31,63,31,203,31,20,31,20,30,180,31,106,31,54,31,73,31,167,31,74,31,74,30,74,29,74,28,74,27,207,31,73,31,73,30,115,31,99,31,185,31,63,31,39,31,86,31,86,30,25,31,98,31,38,31,38,30,193,31,117,31,178,31,41,31,128,31,113,31,236,31,236,30,148,31,233,31,233,30,233,29,233,28,102,31,18,31,18,30,122,31,229,31,22,31,186,31,186,30,181,31,22,31,191,31,176,31,158,31,94,31,127,31,7,31,228,31,18,31,227,31,25,31,25,30,173,31,74,31,198,31,185,31,91,31,148,31,242,31,99,31,16,31,184,31,231,31,24,31,24,30,180,31,95,31,194,31,194,30,253,31,250,31,98,31,18,31,12,31,20,31,80,31,80,30,54,31,134,31,211,31,29,31,229,31,187,31,187,30,199,31,246,31,246,30,218,31,228,31,47,31,47,30,62,31,85,31,90,31,89,31,89,30,177,31,179,31,89,31,89,30,180,31,126,31,126,30,190,31,190,30,58,31,6,31,116,31,16,31,120,31,253,31,211,31,211,30,89,31,89,30,93,31,11,31,54,31,181,31,13,31,13,30,35,31,171,31,157,31,238,31,238,30,238,29,238,28,99,31,99,30,200,31,113,31,232,31,203,31,101,31,109,31,119,31,116,31,16,31,231,31,246,31,246,30,242,31,54,31,88,31,198,31,198,30,138,31,80,31,122,31,122,30,171,31,157,31,157,30,30,31,112,31,198,31,243,31,106,31,106,30,181,31,246,31,184,31,120,31,240,31,15,31,15,30,167,31,180,31,180,30,156,31,156,30,156,29,232,31,210,31,99,31,113,31,113,30,130,31,203,31,203,30,204,31,105,31,105,30,79,31,79,30,8,31,32,31,77,31,77,30,203,31,179,31,10,31,10,30,233,31,15,31,238,31,59,31,47,31,47,30,212,31,88,31,199,31,118,31,38,31,64,31,232,31,120,31,253,31,68,31,85,31,13,31,78,31,78,30,78,29,32,31,76,31,187,31,187,30,23,31,145,31,145,30,152,31,49,31,53,31,213,31,105,31,159,31,247,31,247,30,95,31,233,31,19,31,40,31,182,31,219,31,48,31,36,31,25,31,240,31,127,31,27,31,25,31,36,31,139,31,51,31,74,31,124,31,195,31,18,31,3,31,116,31,127,31,97,31,97,30,40,31,156,31,239,31,17,31,156,31,156,30,3,31,159,31,159,30,73,31,73,30,73,29,26,31,108,31,108,30,5,31,154,31,153,31,254,31,221,31,187,31,147,31,147,30,141,31,87,31,87,30,87,29,102,31,102,30,138,31,138,30,124,31,156,31,17,31,201,31,137,31,137,30,137,29,183,31,183,30,70,31,150,31,25,31,47,31,58,31,87,31,180,31,95,31,95,30,95,29,237,31,3,31,127,31,107,31,138,31,164,31,209,31,209,30,171,31,171,30,231,31,231,30,27,31,27,30,68,31,99,31,134,31,208,31,170,31,158,31,158,30,126,31,29,31,227,31,86,31,246,31,217,31,170,31,63,31,250,31,60,31,106,31,35,31,35,30,23,31,23,30,247,31,165,31,115,31,115,30,17,31,80,31,106,31,106,30,23,31,23,30,195,31,64,31,18,31,201,31,201,30,201,29,178,31,178,30,170,31,244,31,81,31,239,31,224,31,73,31,204,31,62,31,62,30,104,31,6,31,6,30,238,31,10,31,60,31,220,31,144,31,144,30,144,29,70,31,203,31,236,31,95,31,216,31,216,30,205,31,205,30,142,31,1,31,137,31,137,30,175,31,63,31,63,30,43,31,11,31,172,31,92,31,85,31,208,31,19,31,131,31,139,31,139,30,233,31,115,31,115,30,202,31,90,31,99,31,13,31,13,30,13,29,71,31,232,31,75,31,75,30,161,31,243,31,130,31,130,30,26,31,143,31,227,31,227,30,64,31,123,31,33,31,189,31,189,30,189,29,189,28,28,31,70,31,3,31,101,31,141,31,212,31,244,31,137,31,165,31,54,31,205,31,39,31,100,31,66,31,117,31,46,31,46,30,99,31,51,31,118,31,118,30,118,29,118,28,225,31,14,31,117,31,130,31,151,31,227,31,112,31,112,31,57,31,158,31,204,31,204,30,204,29,89,31,139,31,243,31,103,31,196,31,95,31,134,31,25,31,210,31,25,31,185,31,206,31,7,31,7,30,134,31,79,31,23,31,100,31,100,30,102,31,65,31,140,31,150,31,64,31,212,31,130,31,130,30,144,31,88,31,88,30,89,31,197,31,124,31,245,31,41,31,41,30,103,31,239,31,128,31,128,30,111,31,10,31,242,31,76,31,199,31,198,31,69,31,69,30,50,31,140,31,123,31,239,31,239,30,102,31,231,31,96,31,136,31,217,31,217,30,156,31,91,31,228,31,228,30,115,31,48,31,241,31,125,31,81,31,81,30,152,31,93,31,229,31,99,31,45,31,204,31,72,31,94,31,150,31,78,31,248,31,159,31,251,31,251,30,63,31,129,31,55,31,29,31,29,30,195,31,52,31,190,31,241,31,136,31,123,31,16,31,16,30,202,31,214,31,5,31,5,30,22,31,127,31,172,31,132,31,214,31,214,30,76,31,225,31,225,30,77,31,124,31,14,31,226,31,83,31,4,31,23,31,37,31,42,31,246,31,54,31,209,31,188,31,210,31,210,30,201,31,55,31,168,31,147,31,147,30,138,31,242,31,104,31,104,30,145,31,143,31,87,31,87,30,7,31,28,31,46,31,230,31,41,31,42,31,44,31,226,31,216,31,104,31,234,31,181,31,181,30,106,31,135,31,105,31,44,31,15,31,15,30,15,29,15,28,15,27,63,31,179,31,154,31,122,31,83,31,83,30,83,29,145,31,159,31,62,31,62,30,198,31,16,31,22,31,152,31,172,31,129,31,129,30,173,31,185,31,70,31,53,31,53,30,53,29,53,28,93,31,171,31,178,31,149,31,149,30,186,31,254,31,152,31,152,30,114,31,205,31,229,31,214,31,133,31,133,30,246,31,212,31,23,31,27,31,199,31,236,31,236,30,40,31,143,31,92,31,210,31,149,31,98,31,203,31,218,31,218,30,205,31,151,31,241,31,247,31,199,31,199,30,176,31,76,31,168,31,6,31,6,30,6,29,89,31,244,31,176,31,249,31,245,31,245,31,36,31,110,31,158,31,158,30,91,31,1,31,142,31,41,31,250,31,10,31,231,31,216,31,240,31,239,31,249,31,47,31,132,31,191,31,94,31,234,31,188,31,188,30,188,29,24,31,24,30,119,31,70,31,229,31,2,31,2,30,2,29,27,31,27,30,117,31,117,30,117,29,164,31,98,31,98,30,3,31,172,31,198,31,198,30,11,31,11,30,179,31,16,31,133,31,94,31,99,31,93,31,3,31,247,31,247,30,21,31,91,31,91,30,160,31,215,31,215,30,125,31,214,31,153,31,37,31,156,31,156,30,172,31,172,30,91,31,91,30,92,31,243,31,105,31,208,31,173,31,200,31,105,31,105,30,70,31,225,31,186,31,195,31,81,31,110,31,84,31,90,31,33,31,240,31,240,30,57,31,25,31,25,30,127,31,254,31,123,31,94,31,248,31,33,31,38,31,109,31,199,31,147,31,147,30,160,31,185,31,185,30,110,31,199,31,121,31,66,31,136,31,11,31,198,31,6,31,206,31,206,30,206,29,93,31,66,31,218,31,218,30,43,31,139,31,54,31,76,31,76,30,239,31,253,31,253,30,129,31,42,31,214,31,54,31,110,31,130,31,96,31,1,31,1,30,192,31,151,31,203,31,55,31,31,31,31,30,202,31,78,31,78,30,252,31,165,31,165,30,196,31,113,31,198,31,151,31,7,31,246,31,246,30,91,31,91,30,11,31,126,31,79,31,133,31,253,31,13,31,13,31,6,31,180,31,180,30,121,31,60,31,60,30,199,31,137,31,137,30,76,31,51,31,51,30,190,31,190,30,6,31,6,30,167,31,155,31,254,31,173,31,219,31,20,31,96,31,49,31,187,31,187,30,131,31,171,31,64,31,243,31,243,30,243,29,178,31,57,31,119,31,8,31,127,31,255,31,33,31,211,31,243,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
