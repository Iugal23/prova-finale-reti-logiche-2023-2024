-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 950;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (238,0,125,0,0,0,0,0,14,0,72,0,232,0,253,0,93,0,54,0,216,0,50,0,224,0,144,0,86,0,40,0,213,0,90,0,234,0,10,0,255,0,47,0,223,0,120,0,0,0,51,0,130,0,6,0,0,0,111,0,30,0,144,0,0,0,20,0,0,0,0,0,0,0,136,0,189,0,169,0,237,0,222,0,179,0,48,0,55,0,2,0,150,0,241,0,200,0,124,0,169,0,219,0,86,0,104,0,185,0,195,0,204,0,1,0,99,0,115,0,68,0,85,0,253,0,0,0,0,0,9,0,105,0,189,0,0,0,241,0,217,0,133,0,65,0,0,0,188,0,30,0,17,0,115,0,86,0,116,0,126,0,0,0,96,0,0,0,45,0,118,0,0,0,213,0,29,0,206,0,238,0,121,0,215,0,133,0,247,0,222,0,0,0,241,0,30,0,133,0,8,0,37,0,115,0,16,0,147,0,246,0,0,0,33,0,0,0,0,0,175,0,0,0,24,0,0,0,121,0,0,0,21,0,217,0,19,0,4,0,107,0,38,0,101,0,72,0,29,0,203,0,0,0,239,0,0,0,204,0,107,0,74,0,187,0,235,0,199,0,0,0,64,0,1,0,0,0,12,0,156,0,222,0,119,0,157,0,86,0,198,0,51,0,0,0,151,0,106,0,0,0,74,0,43,0,142,0,248,0,145,0,146,0,13,0,22,0,22,0,37,0,111,0,63,0,124,0,0,0,226,0,0,0,132,0,151,0,58,0,221,0,152,0,23,0,48,0,120,0,56,0,216,0,207,0,133,0,0,0,0,0,130,0,0,0,62,0,0,0,0,0,156,0,147,0,182,0,124,0,20,0,56,0,207,0,44,0,166,0,136,0,163,0,0,0,28,0,80,0,0,0,183,0,119,0,0,0,33,0,5,0,89,0,113,0,33,0,0,0,0,0,28,0,83,0,123,0,0,0,0,0,44,0,190,0,0,0,0,0,168,0,0,0,0,0,230,0,137,0,0,0,0,0,12,0,169,0,190,0,73,0,96,0,0,0,0,0,149,0,95,0,63,0,54,0,8,0,53,0,48,0,43,0,27,0,79,0,154,0,128,0,118,0,157,0,119,0,0,0,80,0,0,0,74,0,181,0,195,0,225,0,0,0,55,0,229,0,114,0,0,0,239,0,53,0,90,0,0,0,15,0,192,0,206,0,76,0,242,0,24,0,102,0,239,0,58,0,105,0,108,0,0,0,169,0,168,0,58,0,49,0,198,0,255,0,173,0,99,0,95,0,193,0,39,0,197,0,211,0,187,0,167,0,66,0,202,0,183,0,16,0,184,0,59,0,0,0,196,0,201,0,32,0,0,0,39,0,17,0,139,0,0,0,30,0,205,0,0,0,0,0,0,0,0,0,63,0,185,0,155,0,38,0,225,0,0,0,0,0,49,0,147,0,2,0,0,0,236,0,30,0,143,0,225,0,194,0,0,0,196,0,165,0,234,0,154,0,165,0,0,0,3,0,109,0,0,0,0,0,34,0,0,0,118,0,244,0,89,0,0,0,105,0,163,0,0,0,206,0,186,0,52,0,239,0,127,0,0,0,251,0,0,0,156,0,0,0,36,0,202,0,166,0,232,0,0,0,34,0,0,0,0,0,250,0,197,0,210,0,163,0,0,0,69,0,0,0,32,0,8,0,73,0,162,0,0,0,86,0,119,0,150,0,43,0,252,0,0,0,249,0,191,0,68,0,145,0,134,0,228,0,17,0,141,0,1,0,34,0,146,0,192,0,18,0,0,0,146,0,21,0,155,0,15,0,52,0,143,0,171,0,209,0,117,0,197,0,108,0,129,0,156,0,207,0,93,0,79,0,12,0,68,0,237,0,39,0,118,0,74,0,149,0,79,0,13,0,98,0,0,0,33,0,116,0,0,0,160,0,0,0,0,0,83,0,227,0,90,0,151,0,65,0,0,0,0,0,0,0,0,0,234,0,22,0,0,0,158,0,0,0,8,0,242,0,217,0,86,0,211,0,186,0,0,0,147,0,66,0,167,0,193,0,182,0,248,0,27,0,152,0,161,0,0,0,206,0,183,0,179,0,202,0,0,0,190,0,11,0,0,0,174,0,39,0,0,0,234,0,134,0,56,0,166,0,68,0,131,0,76,0,171,0,62,0,82,0,166,0,119,0,0,0,152,0,161,0,37,0,0,0,223,0,239,0,0,0,0,0,99,0,50,0,19,0,136,0,91,0,22,0,169,0,34,0,162,0,130,0,139,0,19,0,226,0,234,0,11,0,109,0,187,0,91,0,8,0,0,0,119,0,187,0,222,0,214,0,0,0,55,0,0,0,194,0,63,0,0,0,163,0,50,0,3,0,123,0,106,0,225,0,170,0,0,0,222,0,0,0,42,0,154,0,0,0,50,0,6,0,94,0,0,0,0,0,33,0,107,0,0,0,69,0,13,0,92,0,104,0,0,0,92,0,66,0,102,0,4,0,62,0,46,0,68,0,144,0,98,0,0,0,250,0,65,0,249,0,0,0,0,0,0,0,108,0,156,0,65,0,16,0,0,0,102,0,0,0,10,0,253,0,46,0,119,0,0,0,112,0,179,0,0,0,61,0,7,0,92,0,219,0,222,0,81,0,225,0,145,0,234,0,178,0,204,0,162,0,34,0,0,0,174,0,76,0,0,0,147,0,0,0,255,0,0,0,17,0,0,0,0,0,0,0,38,0,0,0,28,0,0,0,34,0,112,0,148,0,19,0,155,0,136,0,0,0,3,0,108,0,193,0,144,0,0,0,0,0,188,0,204,0,137,0,152,0,5,0,226,0,128,0,36,0,221,0,103,0,183,0,40,0,14,0,140,0,0,0,167,0,152,0,149,0,0,0,210,0,180,0,212,0,101,0,93,0,90,0,217,0,193,0,0,0,45,0,179,0,58,0,196,0,8,0,146,0,0,0,106,0,0,0,173,0,249,0,72,0,134,0,151,0,135,0,111,0,163,0,51,0,148,0,226,0,34,0,0,0,64,0,0,0,0,0,246,0,175,0,231,0,7,0,17,0,231,0,22,0,223,0,208,0,186,0,4,0,0,0,204,0,0,0,194,0,36,0,133,0,0,0,242,0,0,0,103,0,242,0,0,0,0,0,88,0,150,0,60,0,15,0,0,0,29,0,144,0,0,0,4,0,0,0,235,0,0,0,131,0,123,0,8,0,216,0,0,0,193,0,106,0,86,0,126,0,0,0,46,0,85,0,171,0,55,0,14,0,21,0,0,0,91,0,115,0,206,0,26,0,0,0,163,0,108,0,209,0,0,0,200,0,0,0,120,0,77,0,215,0,203,0,104,0,0,0,209,0,34,0,32,0,93,0,75,0,222,0,156,0,246,0,223,0,55,0,247,0,0,0,209,0,208,0,35,0,247,0,178,0,0,0,171,0,189,0,184,0,33,0,168,0,0,0,0,0,43,0,0,0,173,0,237,0,0,0,222,0,183,0,0,0,185,0,36,0,144,0,209,0,166,0,44,0,208,0,85,0,185,0,52,0,0,0,0,0,123,0,50,0,178,0,84,0,63,0,222,0,96,0,147,0,169,0,91,0,42,0,154,0,80,0,13,0,19,0,59,0,43,0,38,0,136,0,0,0,37,0,7,0,50,0,119,0,96,0,250,0,119,0,139,0,63,0,64,0,0,0,0,0,137,0,176,0,93,0,147,0,43,0,0,0,0,0,88,0,176,0,0,0,59,0,0,0,0,0,84,0,128,0,234,0,58,0,235,0,40,0,71,0,18,0,129,0,26,0,0,0,235,0,147,0,162,0,15,0,169,0,233,0,121,0,173,0,34,0,90,0,154,0,217,0,59,0,0,0,0,0,230,0,221,0,0,0,66,0,191,0,0,0,247,0,0,0,36,0,0,0,0,0,75,0,0,0,49,0,0,0,0,0,169,0,130,0,64,0,118,0,0,0,191,0,243,0,0,0,120,0,0,0,229,0,52,0,0,0,145,0,177,0,112,0,110,0,77,0,17,0,221,0,249,0,121,0,206,0,59,0,125,0,0,0,0,0,182,0,214,0,249,0,253,0,85,0,0,0,32,0,0,0,84,0,0,0,64,0,33,0,135,0,128,0,133,0,47,0,13,0,209,0,246,0,192,0,71,0,99,0,164,0,16,0,29,0,128,0,235,0,19,0,167,0,0,0,0,0,125,0,179,0,0,0,111,0,66,0,0,0,182,0,221,0,50,0,0,0,67,0,0,0,151,0);
signal scenario_full  : scenario_type := (238,31,125,31,125,30,125,29,14,31,72,31,232,31,253,31,93,31,54,31,216,31,50,31,224,31,144,31,86,31,40,31,213,31,90,31,234,31,10,31,255,31,47,31,223,31,120,31,120,30,51,31,130,31,6,31,6,30,111,31,30,31,144,31,144,30,20,31,20,30,20,29,20,28,136,31,189,31,169,31,237,31,222,31,179,31,48,31,55,31,2,31,150,31,241,31,200,31,124,31,169,31,219,31,86,31,104,31,185,31,195,31,204,31,1,31,99,31,115,31,68,31,85,31,253,31,253,30,253,29,9,31,105,31,189,31,189,30,241,31,217,31,133,31,65,31,65,30,188,31,30,31,17,31,115,31,86,31,116,31,126,31,126,30,96,31,96,30,45,31,118,31,118,30,213,31,29,31,206,31,238,31,121,31,215,31,133,31,247,31,222,31,222,30,241,31,30,31,133,31,8,31,37,31,115,31,16,31,147,31,246,31,246,30,33,31,33,30,33,29,175,31,175,30,24,31,24,30,121,31,121,30,21,31,217,31,19,31,4,31,107,31,38,31,101,31,72,31,29,31,203,31,203,30,239,31,239,30,204,31,107,31,74,31,187,31,235,31,199,31,199,30,64,31,1,31,1,30,12,31,156,31,222,31,119,31,157,31,86,31,198,31,51,31,51,30,151,31,106,31,106,30,74,31,43,31,142,31,248,31,145,31,146,31,13,31,22,31,22,31,37,31,111,31,63,31,124,31,124,30,226,31,226,30,132,31,151,31,58,31,221,31,152,31,23,31,48,31,120,31,56,31,216,31,207,31,133,31,133,30,133,29,130,31,130,30,62,31,62,30,62,29,156,31,147,31,182,31,124,31,20,31,56,31,207,31,44,31,166,31,136,31,163,31,163,30,28,31,80,31,80,30,183,31,119,31,119,30,33,31,5,31,89,31,113,31,33,31,33,30,33,29,28,31,83,31,123,31,123,30,123,29,44,31,190,31,190,30,190,29,168,31,168,30,168,29,230,31,137,31,137,30,137,29,12,31,169,31,190,31,73,31,96,31,96,30,96,29,149,31,95,31,63,31,54,31,8,31,53,31,48,31,43,31,27,31,79,31,154,31,128,31,118,31,157,31,119,31,119,30,80,31,80,30,74,31,181,31,195,31,225,31,225,30,55,31,229,31,114,31,114,30,239,31,53,31,90,31,90,30,15,31,192,31,206,31,76,31,242,31,24,31,102,31,239,31,58,31,105,31,108,31,108,30,169,31,168,31,58,31,49,31,198,31,255,31,173,31,99,31,95,31,193,31,39,31,197,31,211,31,187,31,167,31,66,31,202,31,183,31,16,31,184,31,59,31,59,30,196,31,201,31,32,31,32,30,39,31,17,31,139,31,139,30,30,31,205,31,205,30,205,29,205,28,205,27,63,31,185,31,155,31,38,31,225,31,225,30,225,29,49,31,147,31,2,31,2,30,236,31,30,31,143,31,225,31,194,31,194,30,196,31,165,31,234,31,154,31,165,31,165,30,3,31,109,31,109,30,109,29,34,31,34,30,118,31,244,31,89,31,89,30,105,31,163,31,163,30,206,31,186,31,52,31,239,31,127,31,127,30,251,31,251,30,156,31,156,30,36,31,202,31,166,31,232,31,232,30,34,31,34,30,34,29,250,31,197,31,210,31,163,31,163,30,69,31,69,30,32,31,8,31,73,31,162,31,162,30,86,31,119,31,150,31,43,31,252,31,252,30,249,31,191,31,68,31,145,31,134,31,228,31,17,31,141,31,1,31,34,31,146,31,192,31,18,31,18,30,146,31,21,31,155,31,15,31,52,31,143,31,171,31,209,31,117,31,197,31,108,31,129,31,156,31,207,31,93,31,79,31,12,31,68,31,237,31,39,31,118,31,74,31,149,31,79,31,13,31,98,31,98,30,33,31,116,31,116,30,160,31,160,30,160,29,83,31,227,31,90,31,151,31,65,31,65,30,65,29,65,28,65,27,234,31,22,31,22,30,158,31,158,30,8,31,242,31,217,31,86,31,211,31,186,31,186,30,147,31,66,31,167,31,193,31,182,31,248,31,27,31,152,31,161,31,161,30,206,31,183,31,179,31,202,31,202,30,190,31,11,31,11,30,174,31,39,31,39,30,234,31,134,31,56,31,166,31,68,31,131,31,76,31,171,31,62,31,82,31,166,31,119,31,119,30,152,31,161,31,37,31,37,30,223,31,239,31,239,30,239,29,99,31,50,31,19,31,136,31,91,31,22,31,169,31,34,31,162,31,130,31,139,31,19,31,226,31,234,31,11,31,109,31,187,31,91,31,8,31,8,30,119,31,187,31,222,31,214,31,214,30,55,31,55,30,194,31,63,31,63,30,163,31,50,31,3,31,123,31,106,31,225,31,170,31,170,30,222,31,222,30,42,31,154,31,154,30,50,31,6,31,94,31,94,30,94,29,33,31,107,31,107,30,69,31,13,31,92,31,104,31,104,30,92,31,66,31,102,31,4,31,62,31,46,31,68,31,144,31,98,31,98,30,250,31,65,31,249,31,249,30,249,29,249,28,108,31,156,31,65,31,16,31,16,30,102,31,102,30,10,31,253,31,46,31,119,31,119,30,112,31,179,31,179,30,61,31,7,31,92,31,219,31,222,31,81,31,225,31,145,31,234,31,178,31,204,31,162,31,34,31,34,30,174,31,76,31,76,30,147,31,147,30,255,31,255,30,17,31,17,30,17,29,17,28,38,31,38,30,28,31,28,30,34,31,112,31,148,31,19,31,155,31,136,31,136,30,3,31,108,31,193,31,144,31,144,30,144,29,188,31,204,31,137,31,152,31,5,31,226,31,128,31,36,31,221,31,103,31,183,31,40,31,14,31,140,31,140,30,167,31,152,31,149,31,149,30,210,31,180,31,212,31,101,31,93,31,90,31,217,31,193,31,193,30,45,31,179,31,58,31,196,31,8,31,146,31,146,30,106,31,106,30,173,31,249,31,72,31,134,31,151,31,135,31,111,31,163,31,51,31,148,31,226,31,34,31,34,30,64,31,64,30,64,29,246,31,175,31,231,31,7,31,17,31,231,31,22,31,223,31,208,31,186,31,4,31,4,30,204,31,204,30,194,31,36,31,133,31,133,30,242,31,242,30,103,31,242,31,242,30,242,29,88,31,150,31,60,31,15,31,15,30,29,31,144,31,144,30,4,31,4,30,235,31,235,30,131,31,123,31,8,31,216,31,216,30,193,31,106,31,86,31,126,31,126,30,46,31,85,31,171,31,55,31,14,31,21,31,21,30,91,31,115,31,206,31,26,31,26,30,163,31,108,31,209,31,209,30,200,31,200,30,120,31,77,31,215,31,203,31,104,31,104,30,209,31,34,31,32,31,93,31,75,31,222,31,156,31,246,31,223,31,55,31,247,31,247,30,209,31,208,31,35,31,247,31,178,31,178,30,171,31,189,31,184,31,33,31,168,31,168,30,168,29,43,31,43,30,173,31,237,31,237,30,222,31,183,31,183,30,185,31,36,31,144,31,209,31,166,31,44,31,208,31,85,31,185,31,52,31,52,30,52,29,123,31,50,31,178,31,84,31,63,31,222,31,96,31,147,31,169,31,91,31,42,31,154,31,80,31,13,31,19,31,59,31,43,31,38,31,136,31,136,30,37,31,7,31,50,31,119,31,96,31,250,31,119,31,139,31,63,31,64,31,64,30,64,29,137,31,176,31,93,31,147,31,43,31,43,30,43,29,88,31,176,31,176,30,59,31,59,30,59,29,84,31,128,31,234,31,58,31,235,31,40,31,71,31,18,31,129,31,26,31,26,30,235,31,147,31,162,31,15,31,169,31,233,31,121,31,173,31,34,31,90,31,154,31,217,31,59,31,59,30,59,29,230,31,221,31,221,30,66,31,191,31,191,30,247,31,247,30,36,31,36,30,36,29,75,31,75,30,49,31,49,30,49,29,169,31,130,31,64,31,118,31,118,30,191,31,243,31,243,30,120,31,120,30,229,31,52,31,52,30,145,31,177,31,112,31,110,31,77,31,17,31,221,31,249,31,121,31,206,31,59,31,125,31,125,30,125,29,182,31,214,31,249,31,253,31,85,31,85,30,32,31,32,30,84,31,84,30,64,31,33,31,135,31,128,31,133,31,47,31,13,31,209,31,246,31,192,31,71,31,99,31,164,31,16,31,29,31,128,31,235,31,19,31,167,31,167,30,167,29,125,31,179,31,179,30,111,31,66,31,66,30,182,31,221,31,50,31,50,30,67,31,67,30,151,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
