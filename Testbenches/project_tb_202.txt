-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 387;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (204,0,80,0,182,0,244,0,214,0,16,0,109,0,114,0,0,0,196,0,178,0,233,0,56,0,54,0,240,0,150,0,0,0,254,0,187,0,105,0,33,0,115,0,0,0,0,0,210,0,77,0,208,0,178,0,222,0,82,0,0,0,204,0,18,0,92,0,0,0,241,0,0,0,10,0,216,0,127,0,224,0,61,0,0,0,0,0,246,0,49,0,50,0,134,0,22,0,130,0,0,0,34,0,165,0,251,0,92,0,0,0,104,0,240,0,245,0,162,0,176,0,72,0,148,0,223,0,0,0,152,0,173,0,239,0,0,0,0,0,104,0,112,0,126,0,184,0,50,0,175,0,216,0,27,0,170,0,57,0,13,0,21,0,45,0,40,0,203,0,198,0,36,0,230,0,247,0,0,0,0,0,212,0,139,0,57,0,251,0,245,0,86,0,106,0,0,0,83,0,242,0,125,0,251,0,198,0,47,0,253,0,61,0,94,0,123,0,0,0,0,0,31,0,180,0,158,0,0,0,203,0,61,0,219,0,193,0,0,0,234,0,132,0,215,0,251,0,24,0,33,0,70,0,121,0,250,0,169,0,114,0,251,0,172,0,0,0,205,0,201,0,204,0,0,0,208,0,0,0,0,0,0,0,217,0,78,0,12,0,51,0,26,0,31,0,79,0,227,0,139,0,0,0,0,0,0,0,146,0,57,0,53,0,58,0,38,0,79,0,0,0,56,0,27,0,11,0,54,0,74,0,132,0,25,0,153,0,240,0,22,0,113,0,230,0,191,0,68,0,171,0,89,0,63,0,118,0,0,0,127,0,136,0,209,0,169,0,164,0,4,0,126,0,223,0,233,0,2,0,187,0,108,0,202,0,240,0,144,0,117,0,243,0,155,0,0,0,173,0,225,0,138,0,0,0,203,0,61,0,69,0,119,0,44,0,52,0,49,0,92,0,249,0,139,0,0,0,223,0,0,0,31,0,118,0,0,0,1,0,87,0,45,0,0,0,167,0,145,0,22,0,250,0,117,0,240,0,201,0,87,0,231,0,31,0,199,0,28,0,0,0,80,0,95,0,35,0,206,0,0,0,0,0,200,0,217,0,194,0,211,0,0,0,237,0,36,0,22,0,156,0,170,0,64,0,160,0,89,0,0,0,20,0,0,0,36,0,60,0,0,0,125,0,0,0,129,0,11,0,62,0,0,0,227,0,25,0,182,0,0,0,238,0,94,0,176,0,0,0,78,0,71,0,208,0,0,0,102,0,28,0,21,0,176,0,71,0,115,0,154,0,0,0,97,0,160,0,40,0,211,0,147,0,234,0,33,0,224,0,99,0,36,0,140,0,87,0,220,0,165,0,206,0,43,0,159,0,0,0,0,0,247,0,164,0,176,0,0,0,176,0,115,0,135,0,65,0,86,0,0,0,243,0,20,0,197,0,57,0,0,0,24,0,182,0,14,0,186,0,195,0,0,0,127,0,163,0,152,0,43,0,3,0,58,0,0,0,115,0,204,0,162,0,62,0,104,0,20,0,8,0,215,0,253,0,30,0,0,0,178,0,39,0,66,0,20,0,0,0,134,0,109,0,35,0,253,0,214,0,56,0,147,0,203,0,176,0,0,0,170,0,0,0,208,0,106,0,0,0,0,0,216,0,0,0,73,0,48,0,0,0,201,0,0,0,0,0,53,0,23,0,46,0,0,0,0,0,71,0,114,0,98,0,129,0,54,0,0,0,197,0,237,0);
signal scenario_full  : scenario_type := (204,31,80,31,182,31,244,31,214,31,16,31,109,31,114,31,114,30,196,31,178,31,233,31,56,31,54,31,240,31,150,31,150,30,254,31,187,31,105,31,33,31,115,31,115,30,115,29,210,31,77,31,208,31,178,31,222,31,82,31,82,30,204,31,18,31,92,31,92,30,241,31,241,30,10,31,216,31,127,31,224,31,61,31,61,30,61,29,246,31,49,31,50,31,134,31,22,31,130,31,130,30,34,31,165,31,251,31,92,31,92,30,104,31,240,31,245,31,162,31,176,31,72,31,148,31,223,31,223,30,152,31,173,31,239,31,239,30,239,29,104,31,112,31,126,31,184,31,50,31,175,31,216,31,27,31,170,31,57,31,13,31,21,31,45,31,40,31,203,31,198,31,36,31,230,31,247,31,247,30,247,29,212,31,139,31,57,31,251,31,245,31,86,31,106,31,106,30,83,31,242,31,125,31,251,31,198,31,47,31,253,31,61,31,94,31,123,31,123,30,123,29,31,31,180,31,158,31,158,30,203,31,61,31,219,31,193,31,193,30,234,31,132,31,215,31,251,31,24,31,33,31,70,31,121,31,250,31,169,31,114,31,251,31,172,31,172,30,205,31,201,31,204,31,204,30,208,31,208,30,208,29,208,28,217,31,78,31,12,31,51,31,26,31,31,31,79,31,227,31,139,31,139,30,139,29,139,28,146,31,57,31,53,31,58,31,38,31,79,31,79,30,56,31,27,31,11,31,54,31,74,31,132,31,25,31,153,31,240,31,22,31,113,31,230,31,191,31,68,31,171,31,89,31,63,31,118,31,118,30,127,31,136,31,209,31,169,31,164,31,4,31,126,31,223,31,233,31,2,31,187,31,108,31,202,31,240,31,144,31,117,31,243,31,155,31,155,30,173,31,225,31,138,31,138,30,203,31,61,31,69,31,119,31,44,31,52,31,49,31,92,31,249,31,139,31,139,30,223,31,223,30,31,31,118,31,118,30,1,31,87,31,45,31,45,30,167,31,145,31,22,31,250,31,117,31,240,31,201,31,87,31,231,31,31,31,199,31,28,31,28,30,80,31,95,31,35,31,206,31,206,30,206,29,200,31,217,31,194,31,211,31,211,30,237,31,36,31,22,31,156,31,170,31,64,31,160,31,89,31,89,30,20,31,20,30,36,31,60,31,60,30,125,31,125,30,129,31,11,31,62,31,62,30,227,31,25,31,182,31,182,30,238,31,94,31,176,31,176,30,78,31,71,31,208,31,208,30,102,31,28,31,21,31,176,31,71,31,115,31,154,31,154,30,97,31,160,31,40,31,211,31,147,31,234,31,33,31,224,31,99,31,36,31,140,31,87,31,220,31,165,31,206,31,43,31,159,31,159,30,159,29,247,31,164,31,176,31,176,30,176,31,115,31,135,31,65,31,86,31,86,30,243,31,20,31,197,31,57,31,57,30,24,31,182,31,14,31,186,31,195,31,195,30,127,31,163,31,152,31,43,31,3,31,58,31,58,30,115,31,204,31,162,31,62,31,104,31,20,31,8,31,215,31,253,31,30,31,30,30,178,31,39,31,66,31,20,31,20,30,134,31,109,31,35,31,253,31,214,31,56,31,147,31,203,31,176,31,176,30,170,31,170,30,208,31,106,31,106,30,106,29,216,31,216,30,73,31,48,31,48,30,201,31,201,30,201,29,53,31,23,31,46,31,46,30,46,29,71,31,114,31,98,31,129,31,54,31,54,30,197,31,237,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
