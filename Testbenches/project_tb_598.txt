-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 466;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (237,0,206,0,249,0,102,0,0,0,0,0,211,0,95,0,107,0,201,0,101,0,169,0,51,0,165,0,86,0,193,0,0,0,250,0,132,0,0,0,137,0,63,0,69,0,0,0,68,0,134,0,221,0,12,0,93,0,89,0,237,0,57,0,39,0,195,0,173,0,0,0,161,0,23,0,105,0,11,0,195,0,187,0,245,0,247,0,0,0,182,0,80,0,64,0,0,0,146,0,147,0,91,0,217,0,91,0,114,0,0,0,206,0,203,0,0,0,207,0,0,0,2,0,149,0,88,0,173,0,199,0,96,0,172,0,251,0,195,0,157,0,210,0,5,0,122,0,0,0,60,0,92,0,198,0,20,0,87,0,71,0,0,0,0,0,39,0,0,0,78,0,194,0,138,0,27,0,127,0,136,0,0,0,0,0,118,0,0,0,43,0,182,0,129,0,34,0,179,0,0,0,230,0,128,0,241,0,100,0,203,0,78,0,91,0,94,0,208,0,64,0,122,0,196,0,123,0,67,0,0,0,248,0,0,0,66,0,0,0,75,0,229,0,163,0,0,0,142,0,194,0,0,0,0,0,221,0,198,0,31,0,78,0,49,0,230,0,0,0,190,0,235,0,14,0,154,0,146,0,86,0,106,0,0,0,21,0,53,0,228,0,84,0,30,0,13,0,33,0,0,0,0,0,55,0,218,0,211,0,159,0,156,0,78,0,138,0,85,0,172,0,108,0,155,0,150,0,228,0,244,0,0,0,148,0,124,0,139,0,203,0,217,0,239,0,101,0,145,0,0,0,212,0,132,0,0,0,170,0,226,0,113,0,137,0,210,0,71,0,117,0,201,0,208,0,87,0,0,0,0,0,224,0,110,0,226,0,22,0,55,0,60,0,183,0,60,0,0,0,170,0,163,0,0,0,105,0,183,0,222,0,129,0,72,0,237,0,253,0,219,0,0,0,24,0,1,0,168,0,17,0,90,0,38,0,130,0,0,0,150,0,217,0,0,0,100,0,204,0,204,0,0,0,38,0,80,0,111,0,228,0,0,0,243,0,0,0,74,0,0,0,0,0,59,0,32,0,88,0,185,0,131,0,0,0,53,0,144,0,10,0,235,0,0,0,0,0,62,0,50,0,0,0,177,0,42,0,140,0,102,0,48,0,247,0,0,0,187,0,224,0,174,0,7,0,173,0,71,0,26,0,128,0,184,0,0,0,30,0,60,0,0,0,121,0,213,0,135,0,0,0,15,0,0,0,199,0,200,0,0,0,0,0,134,0,217,0,0,0,214,0,194,0,101,0,64,0,9,0,144,0,133,0,183,0,236,0,188,0,46,0,107,0,0,0,200,0,0,0,139,0,203,0,251,0,12,0,237,0,233,0,244,0,168,0,0,0,0,0,0,0,152,0,92,0,34,0,226,0,190,0,255,0,254,0,178,0,241,0,0,0,230,0,53,0,48,0,0,0,195,0,0,0,255,0,25,0,212,0,133,0,247,0,14,0,128,0,138,0,0,0,254,0,0,0,0,0,250,0,38,0,204,0,0,0,243,0,44,0,133,0,253,0,82,0,165,0,185,0,78,0,136,0,194,0,142,0,0,0,155,0,65,0,22,0,132,0,189,0,39,0,81,0,61,0,0,0,93,0,26,0,170,0,186,0,175,0,62,0,235,0,0,0,0,0,250,0,52,0,79,0,181,0,183,0,238,0,221,0,62,0,0,0,0,0,0,0,107,0,200,0,50,0,0,0,0,0,254,0,0,0,222,0,70,0,115,0,0,0,0,0,161,0,0,0,0,0,94,0,82,0,77,0,18,0,133,0,131,0,143,0,250,0,186,0,231,0,224,0,93,0,248,0,52,0,197,0,0,0,0,0,19,0,127,0,242,0,70,0,249,0,0,0,86,0,16,0,0,0,114,0,202,0,9,0,143,0,36,0,141,0,0,0,0,0,239,0,98,0,179,0,226,0,198,0,126,0,29,0,75,0,181,0,0,0,92,0,251,0,111,0,228,0,146,0,23,0,160,0,0,0,247,0,0,0,50,0,36,0,222,0,122,0,76,0,246,0,170,0,84,0,26,0,0,0,40,0,241,0,207,0);
signal scenario_full  : scenario_type := (237,31,206,31,249,31,102,31,102,30,102,29,211,31,95,31,107,31,201,31,101,31,169,31,51,31,165,31,86,31,193,31,193,30,250,31,132,31,132,30,137,31,63,31,69,31,69,30,68,31,134,31,221,31,12,31,93,31,89,31,237,31,57,31,39,31,195,31,173,31,173,30,161,31,23,31,105,31,11,31,195,31,187,31,245,31,247,31,247,30,182,31,80,31,64,31,64,30,146,31,147,31,91,31,217,31,91,31,114,31,114,30,206,31,203,31,203,30,207,31,207,30,2,31,149,31,88,31,173,31,199,31,96,31,172,31,251,31,195,31,157,31,210,31,5,31,122,31,122,30,60,31,92,31,198,31,20,31,87,31,71,31,71,30,71,29,39,31,39,30,78,31,194,31,138,31,27,31,127,31,136,31,136,30,136,29,118,31,118,30,43,31,182,31,129,31,34,31,179,31,179,30,230,31,128,31,241,31,100,31,203,31,78,31,91,31,94,31,208,31,64,31,122,31,196,31,123,31,67,31,67,30,248,31,248,30,66,31,66,30,75,31,229,31,163,31,163,30,142,31,194,31,194,30,194,29,221,31,198,31,31,31,78,31,49,31,230,31,230,30,190,31,235,31,14,31,154,31,146,31,86,31,106,31,106,30,21,31,53,31,228,31,84,31,30,31,13,31,33,31,33,30,33,29,55,31,218,31,211,31,159,31,156,31,78,31,138,31,85,31,172,31,108,31,155,31,150,31,228,31,244,31,244,30,148,31,124,31,139,31,203,31,217,31,239,31,101,31,145,31,145,30,212,31,132,31,132,30,170,31,226,31,113,31,137,31,210,31,71,31,117,31,201,31,208,31,87,31,87,30,87,29,224,31,110,31,226,31,22,31,55,31,60,31,183,31,60,31,60,30,170,31,163,31,163,30,105,31,183,31,222,31,129,31,72,31,237,31,253,31,219,31,219,30,24,31,1,31,168,31,17,31,90,31,38,31,130,31,130,30,150,31,217,31,217,30,100,31,204,31,204,31,204,30,38,31,80,31,111,31,228,31,228,30,243,31,243,30,74,31,74,30,74,29,59,31,32,31,88,31,185,31,131,31,131,30,53,31,144,31,10,31,235,31,235,30,235,29,62,31,50,31,50,30,177,31,42,31,140,31,102,31,48,31,247,31,247,30,187,31,224,31,174,31,7,31,173,31,71,31,26,31,128,31,184,31,184,30,30,31,60,31,60,30,121,31,213,31,135,31,135,30,15,31,15,30,199,31,200,31,200,30,200,29,134,31,217,31,217,30,214,31,194,31,101,31,64,31,9,31,144,31,133,31,183,31,236,31,188,31,46,31,107,31,107,30,200,31,200,30,139,31,203,31,251,31,12,31,237,31,233,31,244,31,168,31,168,30,168,29,168,28,152,31,92,31,34,31,226,31,190,31,255,31,254,31,178,31,241,31,241,30,230,31,53,31,48,31,48,30,195,31,195,30,255,31,25,31,212,31,133,31,247,31,14,31,128,31,138,31,138,30,254,31,254,30,254,29,250,31,38,31,204,31,204,30,243,31,44,31,133,31,253,31,82,31,165,31,185,31,78,31,136,31,194,31,142,31,142,30,155,31,65,31,22,31,132,31,189,31,39,31,81,31,61,31,61,30,93,31,26,31,170,31,186,31,175,31,62,31,235,31,235,30,235,29,250,31,52,31,79,31,181,31,183,31,238,31,221,31,62,31,62,30,62,29,62,28,107,31,200,31,50,31,50,30,50,29,254,31,254,30,222,31,70,31,115,31,115,30,115,29,161,31,161,30,161,29,94,31,82,31,77,31,18,31,133,31,131,31,143,31,250,31,186,31,231,31,224,31,93,31,248,31,52,31,197,31,197,30,197,29,19,31,127,31,242,31,70,31,249,31,249,30,86,31,16,31,16,30,114,31,202,31,9,31,143,31,36,31,141,31,141,30,141,29,239,31,98,31,179,31,226,31,198,31,126,31,29,31,75,31,181,31,181,30,92,31,251,31,111,31,228,31,146,31,23,31,160,31,160,30,247,31,247,30,50,31,36,31,222,31,122,31,76,31,246,31,170,31,84,31,26,31,26,30,40,31,241,31,207,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
