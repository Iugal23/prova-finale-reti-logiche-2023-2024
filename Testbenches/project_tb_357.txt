-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 293;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (249,0,36,0,191,0,0,0,16,0,63,0,68,0,185,0,121,0,209,0,0,0,95,0,80,0,0,0,35,0,0,0,153,0,229,0,0,0,73,0,13,0,165,0,0,0,148,0,189,0,61,0,0,0,208,0,0,0,208,0,135,0,50,0,224,0,148,0,0,0,0,0,179,0,0,0,187,0,102,0,0,0,247,0,155,0,138,0,111,0,121,0,70,0,124,0,227,0,0,0,0,0,0,0,0,0,70,0,0,0,170,0,55,0,200,0,247,0,250,0,17,0,186,0,0,0,0,0,4,0,125,0,0,0,243,0,93,0,164,0,113,0,150,0,0,0,187,0,49,0,0,0,102,0,84,0,0,0,58,0,207,0,115,0,142,0,154,0,230,0,0,0,233,0,168,0,35,0,89,0,195,0,0,0,217,0,180,0,150,0,3,0,10,0,246,0,12,0,0,0,0,0,105,0,218,0,133,0,42,0,236,0,254,0,192,0,127,0,10,0,0,0,147,0,0,0,11,0,123,0,0,0,100,0,20,0,84,0,0,0,98,0,5,0,0,0,191,0,0,0,0,0,145,0,83,0,61,0,0,0,75,0,61,0,152,0,157,0,143,0,53,0,116,0,220,0,33,0,0,0,110,0,2,0,72,0,245,0,242,0,0,0,0,0,0,0,246,0,163,0,240,0,129,0,0,0,86,0,0,0,159,0,116,0,111,0,49,0,245,0,76,0,8,0,152,0,79,0,126,0,0,0,104,0,225,0,242,0,53,0,152,0,46,0,0,0,172,0,4,0,31,0,110,0,44,0,9,0,21,0,0,0,0,0,0,0,233,0,118,0,28,0,228,0,0,0,91,0,209,0,28,0,0,0,132,0,0,0,0,0,183,0,0,0,65,0,66,0,132,0,33,0,184,0,172,0,108,0,59,0,43,0,81,0,192,0,168,0,213,0,252,0,24,0,113,0,93,0,0,0,24,0,23,0,185,0,106,0,0,0,53,0,0,0,91,0,0,0,139,0,0,0,72,0,4,0,0,0,96,0,0,0,54,0,188,0,0,0,20,0,84,0,225,0,44,0,142,0,0,0,246,0,95,0,0,0,106,0,253,0,203,0,182,0,0,0,35,0,151,0,176,0,107,0,137,0,54,0,0,0,139,0,192,0,28,0,108,0,205,0,147,0,79,0,147,0,48,0,17,0,169,0,115,0,188,0,0,0,241,0,228,0,247,0,0,0,150,0,255,0,77,0,0,0,216,0,39,0,23,0,0,0,61,0,0,0,225,0,16,0,154,0,137,0,86,0,132,0,127,0,87,0,68,0,148,0);
signal scenario_full  : scenario_type := (249,31,36,31,191,31,191,30,16,31,63,31,68,31,185,31,121,31,209,31,209,30,95,31,80,31,80,30,35,31,35,30,153,31,229,31,229,30,73,31,13,31,165,31,165,30,148,31,189,31,61,31,61,30,208,31,208,30,208,31,135,31,50,31,224,31,148,31,148,30,148,29,179,31,179,30,187,31,102,31,102,30,247,31,155,31,138,31,111,31,121,31,70,31,124,31,227,31,227,30,227,29,227,28,227,27,70,31,70,30,170,31,55,31,200,31,247,31,250,31,17,31,186,31,186,30,186,29,4,31,125,31,125,30,243,31,93,31,164,31,113,31,150,31,150,30,187,31,49,31,49,30,102,31,84,31,84,30,58,31,207,31,115,31,142,31,154,31,230,31,230,30,233,31,168,31,35,31,89,31,195,31,195,30,217,31,180,31,150,31,3,31,10,31,246,31,12,31,12,30,12,29,105,31,218,31,133,31,42,31,236,31,254,31,192,31,127,31,10,31,10,30,147,31,147,30,11,31,123,31,123,30,100,31,20,31,84,31,84,30,98,31,5,31,5,30,191,31,191,30,191,29,145,31,83,31,61,31,61,30,75,31,61,31,152,31,157,31,143,31,53,31,116,31,220,31,33,31,33,30,110,31,2,31,72,31,245,31,242,31,242,30,242,29,242,28,246,31,163,31,240,31,129,31,129,30,86,31,86,30,159,31,116,31,111,31,49,31,245,31,76,31,8,31,152,31,79,31,126,31,126,30,104,31,225,31,242,31,53,31,152,31,46,31,46,30,172,31,4,31,31,31,110,31,44,31,9,31,21,31,21,30,21,29,21,28,233,31,118,31,28,31,228,31,228,30,91,31,209,31,28,31,28,30,132,31,132,30,132,29,183,31,183,30,65,31,66,31,132,31,33,31,184,31,172,31,108,31,59,31,43,31,81,31,192,31,168,31,213,31,252,31,24,31,113,31,93,31,93,30,24,31,23,31,185,31,106,31,106,30,53,31,53,30,91,31,91,30,139,31,139,30,72,31,4,31,4,30,96,31,96,30,54,31,188,31,188,30,20,31,84,31,225,31,44,31,142,31,142,30,246,31,95,31,95,30,106,31,253,31,203,31,182,31,182,30,35,31,151,31,176,31,107,31,137,31,54,31,54,30,139,31,192,31,28,31,108,31,205,31,147,31,79,31,147,31,48,31,17,31,169,31,115,31,188,31,188,30,241,31,228,31,247,31,247,30,150,31,255,31,77,31,77,30,216,31,39,31,23,31,23,30,61,31,61,30,225,31,16,31,154,31,137,31,86,31,132,31,127,31,87,31,68,31,148,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
