-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 221;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (217,0,95,0,139,0,224,0,155,0,135,0,204,0,153,0,35,0,131,0,12,0,112,0,160,0,181,0,205,0,5,0,238,0,178,0,52,0,142,0,0,0,0,0,254,0,185,0,97,0,0,0,121,0,99,0,19,0,151,0,58,0,42,0,0,0,44,0,222,0,221,0,140,0,66,0,2,0,128,0,0,0,143,0,7,0,239,0,92,0,81,0,245,0,25,0,249,0,218,0,145,0,44,0,147,0,0,0,23,0,241,0,63,0,121,0,78,0,214,0,227,0,253,0,0,0,0,0,0,0,196,0,0,0,0,0,9,0,179,0,65,0,246,0,97,0,237,0,0,0,39,0,179,0,251,0,15,0,208,0,143,0,12,0,193,0,132,0,252,0,41,0,17,0,246,0,248,0,0,0,45,0,116,0,163,0,6,0,120,0,243,0,32,0,238,0,0,0,241,0,254,0,0,0,153,0,0,0,64,0,156,0,8,0,79,0,76,0,159,0,165,0,164,0,0,0,70,0,254,0,190,0,156,0,0,0,185,0,236,0,171,0,22,0,105,0,231,0,42,0,224,0,169,0,212,0,243,0,149,0,6,0,0,0,203,0,233,0,244,0,112,0,0,0,88,0,109,0,0,0,0,0,161,0,83,0,123,0,220,0,202,0,0,0,186,0,180,0,0,0,230,0,209,0,98,0,147,0,170,0,0,0,156,0,167,0,140,0,48,0,178,0,58,0,216,0,95,0,167,0,153,0,155,0,158,0,65,0,143,0,135,0,245,0,102,0,24,0,30,0,153,0,169,0,107,0,0,0,0,0,163,0,229,0,131,0,0,0,64,0,193,0,0,0,16,0,190,0,197,0,210,0,212,0,214,0,119,0,104,0,70,0,0,0,38,0,237,0,0,0,0,0,125,0,41,0,164,0,73,0,11,0,140,0,68,0,255,0,21,0,41,0,231,0,19,0,2,0,140,0,110,0,235,0,44,0,42,0,128,0,178,0);
signal scenario_full  : scenario_type := (217,31,95,31,139,31,224,31,155,31,135,31,204,31,153,31,35,31,131,31,12,31,112,31,160,31,181,31,205,31,5,31,238,31,178,31,52,31,142,31,142,30,142,29,254,31,185,31,97,31,97,30,121,31,99,31,19,31,151,31,58,31,42,31,42,30,44,31,222,31,221,31,140,31,66,31,2,31,128,31,128,30,143,31,7,31,239,31,92,31,81,31,245,31,25,31,249,31,218,31,145,31,44,31,147,31,147,30,23,31,241,31,63,31,121,31,78,31,214,31,227,31,253,31,253,30,253,29,253,28,196,31,196,30,196,29,9,31,179,31,65,31,246,31,97,31,237,31,237,30,39,31,179,31,251,31,15,31,208,31,143,31,12,31,193,31,132,31,252,31,41,31,17,31,246,31,248,31,248,30,45,31,116,31,163,31,6,31,120,31,243,31,32,31,238,31,238,30,241,31,254,31,254,30,153,31,153,30,64,31,156,31,8,31,79,31,76,31,159,31,165,31,164,31,164,30,70,31,254,31,190,31,156,31,156,30,185,31,236,31,171,31,22,31,105,31,231,31,42,31,224,31,169,31,212,31,243,31,149,31,6,31,6,30,203,31,233,31,244,31,112,31,112,30,88,31,109,31,109,30,109,29,161,31,83,31,123,31,220,31,202,31,202,30,186,31,180,31,180,30,230,31,209,31,98,31,147,31,170,31,170,30,156,31,167,31,140,31,48,31,178,31,58,31,216,31,95,31,167,31,153,31,155,31,158,31,65,31,143,31,135,31,245,31,102,31,24,31,30,31,153,31,169,31,107,31,107,30,107,29,163,31,229,31,131,31,131,30,64,31,193,31,193,30,16,31,190,31,197,31,210,31,212,31,214,31,119,31,104,31,70,31,70,30,38,31,237,31,237,30,237,29,125,31,41,31,164,31,73,31,11,31,140,31,68,31,255,31,21,31,41,31,231,31,19,31,2,31,140,31,110,31,235,31,44,31,42,31,128,31,178,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
