-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 708;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (179,0,0,0,140,0,137,0,219,0,52,0,252,0,178,0,213,0,0,0,254,0,185,0,67,0,219,0,0,0,189,0,39,0,241,0,189,0,239,0,102,0,208,0,219,0,188,0,79,0,0,0,0,0,103,0,0,0,148,0,0,0,111,0,205,0,167,0,0,0,38,0,178,0,183,0,0,0,237,0,102,0,0,0,239,0,111,0,59,0,37,0,0,0,0,0,28,0,83,0,104,0,233,0,74,0,63,0,27,0,5,0,238,0,53,0,73,0,175,0,26,0,224,0,51,0,122,0,176,0,128,0,26,0,193,0,77,0,0,0,92,0,0,0,0,0,127,0,143,0,32,0,176,0,8,0,239,0,74,0,0,0,162,0,244,0,188,0,173,0,107,0,101,0,0,0,225,0,208,0,67,0,129,0,33,0,161,0,32,0,0,0,0,0,90,0,132,0,192,0,63,0,0,0,36,0,15,0,193,0,39,0,0,0,182,0,0,0,184,0,152,0,0,0,55,0,39,0,210,0,25,0,12,0,26,0,42,0,16,0,153,0,27,0,241,0,173,0,68,0,52,0,0,0,134,0,78,0,197,0,0,0,76,0,0,0,185,0,127,0,0,0,0,0,220,0,43,0,134,0,39,0,156,0,16,0,7,0,166,0,83,0,184,0,176,0,0,0,68,0,29,0,26,0,3,0,217,0,0,0,0,0,137,0,222,0,138,0,202,0,0,0,255,0,243,0,5,0,244,0,92,0,85,0,106,0,39,0,171,0,35,0,23,0,0,0,159,0,228,0,237,0,168,0,0,0,42,0,0,0,179,0,43,0,42,0,25,0,0,0,0,0,238,0,201,0,168,0,190,0,0,0,86,0,0,0,0,0,39,0,55,0,7,0,103,0,54,0,206,0,189,0,233,0,37,0,8,0,63,0,0,0,236,0,164,0,35,0,89,0,95,0,100,0,95,0,210,0,46,0,253,0,130,0,0,0,27,0,0,0,0,0,0,0,238,0,198,0,0,0,0,0,186,0,167,0,243,0,0,0,92,0,133,0,115,0,129,0,182,0,10,0,77,0,222,0,30,0,133,0,17,0,153,0,0,0,182,0,204,0,54,0,252,0,60,0,0,0,171,0,56,0,187,0,0,0,86,0,11,0,0,0,199,0,177,0,236,0,124,0,173,0,158,0,112,0,163,0,0,0,145,0,74,0,0,0,34,0,169,0,171,0,251,0,22,0,118,0,0,0,199,0,14,0,190,0,146,0,239,0,0,0,170,0,252,0,22,0,0,0,221,0,0,0,20,0,163,0,91,0,13,0,0,0,0,0,118,0,10,0,0,0,15,0,40,0,40,0,86,0,103,0,192,0,173,0,248,0,0,0,118,0,241,0,132,0,40,0,0,0,139,0,150,0,1,0,69,0,76,0,80,0,0,0,75,0,178,0,0,0,140,0,243,0,162,0,11,0,172,0,0,0,0,0,10,0,137,0,233,0,16,0,0,0,0,0,254,0,0,0,46,0,25,0,56,0,110,0,20,0,103,0,73,0,254,0,61,0,36,0,216,0,15,0,226,0,0,0,0,0,237,0,0,0,128,0,132,0,0,0,212,0,212,0,231,0,221,0,225,0,0,0,138,0,44,0,204,0,46,0,141,0,0,0,58,0,158,0,185,0,237,0,152,0,252,0,0,0,139,0,157,0,236,0,32,0,249,0,139,0,193,0,34,0,26,0,245,0,112,0,0,0,48,0,0,0,13,0,209,0,29,0,183,0,174,0,142,0,0,0,98,0,141,0,134,0,112,0,16,0,174,0,97,0,51,0,204,0,0,0,0,0,82,0,38,0,93,0,162,0,67,0,6,0,101,0,65,0,71,0,112,0,37,0,250,0,22,0,118,0,0,0,9,0,154,0,166,0,134,0,105,0,130,0,0,0,13,0,156,0,0,0,22,0,175,0,196,0,119,0,0,0,89,0,0,0,144,0,50,0,90,0,184,0,198,0,210,0,140,0,45,0,216,0,255,0,0,0,179,0,109,0,206,0,2,0,194,0,15,0,0,0,105,0,72,0,212,0,0,0,91,0,77,0,174,0,114,0,0,0,201,0,190,0,7,0,0,0,170,0,178,0,241,0,144,0,128,0,179,0,0,0,133,0,13,0,35,0,0,0,115,0,87,0,191,0,0,0,0,0,22,0,26,0,136,0,146,0,247,0,0,0,190,0,178,0,15,0,89,0,120,0,27,0,138,0,129,0,0,0,156,0,100,0,81,0,195,0,0,0,126,0,92,0,166,0,159,0,46,0,0,0,137,0,86,0,109,0,0,0,196,0,109,0,0,0,16,0,228,0,120,0,0,0,111,0,188,0,211,0,108,0,239,0,246,0,0,0,37,0,174,0,32,0,121,0,171,0,219,0,160,0,65,0,233,0,207,0,0,0,142,0,248,0,0,0,189,0,38,0,185,0,49,0,0,0,1,0,68,0,0,0,0,0,125,0,53,0,184,0,184,0,253,0,251,0,103,0,28,0,0,0,149,0,177,0,129,0,50,0,0,0,20,0,165,0,50,0,61,0,60,0,94,0,66,0,165,0,0,0,0,0,225,0,172,0,99,0,96,0,0,0,198,0,59,0,244,0,100,0,174,0,250,0,247,0,172,0,66,0,31,0,0,0,249,0,0,0,40,0,31,0,0,0,189,0,140,0,195,0,92,0,190,0,0,0,255,0,159,0,0,0,82,0,180,0,9,0,94,0,162,0,0,0,85,0,44,0,248,0,0,0,207,0,0,0,123,0,69,0,137,0,31,0,230,0,236,0,42,0,0,0,21,0,0,0,0,0,18,0,110,0,0,0,110,0,255,0,159,0,87,0,222,0,190,0,27,0,95,0,244,0,152,0,2,0,140,0,96,0,106,0,110,0,97,0,207,0,0,0,127,0,216,0,0,0,0,0,0,0,168,0,181,0,0,0,241,0,153,0,25,0,170,0,0,0,0,0,17,0,98,0,188,0,225,0,4,0,234,0,146,0,55,0,99,0,153,0,0,0,220,0,131,0,188,0,86,0,241,0,223,0,140,0,141,0,0,0,143,0,243,0,57,0,100,0,217,0,79,0,19,0,88,0,94,0,137,0,216,0,192,0,38,0,182,0,230,0,196,0,228,0,135,0,161,0,58,0,0,0,0,0,210,0,0,0);
signal scenario_full  : scenario_type := (179,31,179,30,140,31,137,31,219,31,52,31,252,31,178,31,213,31,213,30,254,31,185,31,67,31,219,31,219,30,189,31,39,31,241,31,189,31,239,31,102,31,208,31,219,31,188,31,79,31,79,30,79,29,103,31,103,30,148,31,148,30,111,31,205,31,167,31,167,30,38,31,178,31,183,31,183,30,237,31,102,31,102,30,239,31,111,31,59,31,37,31,37,30,37,29,28,31,83,31,104,31,233,31,74,31,63,31,27,31,5,31,238,31,53,31,73,31,175,31,26,31,224,31,51,31,122,31,176,31,128,31,26,31,193,31,77,31,77,30,92,31,92,30,92,29,127,31,143,31,32,31,176,31,8,31,239,31,74,31,74,30,162,31,244,31,188,31,173,31,107,31,101,31,101,30,225,31,208,31,67,31,129,31,33,31,161,31,32,31,32,30,32,29,90,31,132,31,192,31,63,31,63,30,36,31,15,31,193,31,39,31,39,30,182,31,182,30,184,31,152,31,152,30,55,31,39,31,210,31,25,31,12,31,26,31,42,31,16,31,153,31,27,31,241,31,173,31,68,31,52,31,52,30,134,31,78,31,197,31,197,30,76,31,76,30,185,31,127,31,127,30,127,29,220,31,43,31,134,31,39,31,156,31,16,31,7,31,166,31,83,31,184,31,176,31,176,30,68,31,29,31,26,31,3,31,217,31,217,30,217,29,137,31,222,31,138,31,202,31,202,30,255,31,243,31,5,31,244,31,92,31,85,31,106,31,39,31,171,31,35,31,23,31,23,30,159,31,228,31,237,31,168,31,168,30,42,31,42,30,179,31,43,31,42,31,25,31,25,30,25,29,238,31,201,31,168,31,190,31,190,30,86,31,86,30,86,29,39,31,55,31,7,31,103,31,54,31,206,31,189,31,233,31,37,31,8,31,63,31,63,30,236,31,164,31,35,31,89,31,95,31,100,31,95,31,210,31,46,31,253,31,130,31,130,30,27,31,27,30,27,29,27,28,238,31,198,31,198,30,198,29,186,31,167,31,243,31,243,30,92,31,133,31,115,31,129,31,182,31,10,31,77,31,222,31,30,31,133,31,17,31,153,31,153,30,182,31,204,31,54,31,252,31,60,31,60,30,171,31,56,31,187,31,187,30,86,31,11,31,11,30,199,31,177,31,236,31,124,31,173,31,158,31,112,31,163,31,163,30,145,31,74,31,74,30,34,31,169,31,171,31,251,31,22,31,118,31,118,30,199,31,14,31,190,31,146,31,239,31,239,30,170,31,252,31,22,31,22,30,221,31,221,30,20,31,163,31,91,31,13,31,13,30,13,29,118,31,10,31,10,30,15,31,40,31,40,31,86,31,103,31,192,31,173,31,248,31,248,30,118,31,241,31,132,31,40,31,40,30,139,31,150,31,1,31,69,31,76,31,80,31,80,30,75,31,178,31,178,30,140,31,243,31,162,31,11,31,172,31,172,30,172,29,10,31,137,31,233,31,16,31,16,30,16,29,254,31,254,30,46,31,25,31,56,31,110,31,20,31,103,31,73,31,254,31,61,31,36,31,216,31,15,31,226,31,226,30,226,29,237,31,237,30,128,31,132,31,132,30,212,31,212,31,231,31,221,31,225,31,225,30,138,31,44,31,204,31,46,31,141,31,141,30,58,31,158,31,185,31,237,31,152,31,252,31,252,30,139,31,157,31,236,31,32,31,249,31,139,31,193,31,34,31,26,31,245,31,112,31,112,30,48,31,48,30,13,31,209,31,29,31,183,31,174,31,142,31,142,30,98,31,141,31,134,31,112,31,16,31,174,31,97,31,51,31,204,31,204,30,204,29,82,31,38,31,93,31,162,31,67,31,6,31,101,31,65,31,71,31,112,31,37,31,250,31,22,31,118,31,118,30,9,31,154,31,166,31,134,31,105,31,130,31,130,30,13,31,156,31,156,30,22,31,175,31,196,31,119,31,119,30,89,31,89,30,144,31,50,31,90,31,184,31,198,31,210,31,140,31,45,31,216,31,255,31,255,30,179,31,109,31,206,31,2,31,194,31,15,31,15,30,105,31,72,31,212,31,212,30,91,31,77,31,174,31,114,31,114,30,201,31,190,31,7,31,7,30,170,31,178,31,241,31,144,31,128,31,179,31,179,30,133,31,13,31,35,31,35,30,115,31,87,31,191,31,191,30,191,29,22,31,26,31,136,31,146,31,247,31,247,30,190,31,178,31,15,31,89,31,120,31,27,31,138,31,129,31,129,30,156,31,100,31,81,31,195,31,195,30,126,31,92,31,166,31,159,31,46,31,46,30,137,31,86,31,109,31,109,30,196,31,109,31,109,30,16,31,228,31,120,31,120,30,111,31,188,31,211,31,108,31,239,31,246,31,246,30,37,31,174,31,32,31,121,31,171,31,219,31,160,31,65,31,233,31,207,31,207,30,142,31,248,31,248,30,189,31,38,31,185,31,49,31,49,30,1,31,68,31,68,30,68,29,125,31,53,31,184,31,184,31,253,31,251,31,103,31,28,31,28,30,149,31,177,31,129,31,50,31,50,30,20,31,165,31,50,31,61,31,60,31,94,31,66,31,165,31,165,30,165,29,225,31,172,31,99,31,96,31,96,30,198,31,59,31,244,31,100,31,174,31,250,31,247,31,172,31,66,31,31,31,31,30,249,31,249,30,40,31,31,31,31,30,189,31,140,31,195,31,92,31,190,31,190,30,255,31,159,31,159,30,82,31,180,31,9,31,94,31,162,31,162,30,85,31,44,31,248,31,248,30,207,31,207,30,123,31,69,31,137,31,31,31,230,31,236,31,42,31,42,30,21,31,21,30,21,29,18,31,110,31,110,30,110,31,255,31,159,31,87,31,222,31,190,31,27,31,95,31,244,31,152,31,2,31,140,31,96,31,106,31,110,31,97,31,207,31,207,30,127,31,216,31,216,30,216,29,216,28,168,31,181,31,181,30,241,31,153,31,25,31,170,31,170,30,170,29,17,31,98,31,188,31,225,31,4,31,234,31,146,31,55,31,99,31,153,31,153,30,220,31,131,31,188,31,86,31,241,31,223,31,140,31,141,31,141,30,143,31,243,31,57,31,100,31,217,31,79,31,19,31,88,31,94,31,137,31,216,31,192,31,38,31,182,31,230,31,196,31,228,31,135,31,161,31,58,31,58,30,58,29,210,31,210,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
