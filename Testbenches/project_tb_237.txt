-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 329;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (140,0,194,0,87,0,0,0,106,0,91,0,28,0,92,0,122,0,174,0,239,0,0,0,87,0,0,0,0,0,0,0,51,0,184,0,68,0,83,0,74,0,143,0,0,0,211,0,115,0,207,0,189,0,177,0,112,0,0,0,87,0,0,0,237,0,76,0,0,0,164,0,238,0,240,0,170,0,85,0,110,0,95,0,220,0,180,0,0,0,239,0,38,0,0,0,96,0,110,0,0,0,0,0,0,0,166,0,249,0,196,0,0,0,104,0,205,0,122,0,61,0,185,0,37,0,69,0,221,0,0,0,92,0,0,0,151,0,0,0,214,0,68,0,19,0,244,0,0,0,63,0,135,0,0,0,15,0,0,0,220,0,147,0,42,0,150,0,198,0,136,0,201,0,18,0,123,0,227,0,110,0,244,0,207,0,105,0,82,0,155,0,212,0,0,0,156,0,116,0,0,0,0,0,189,0,90,0,11,0,0,0,94,0,194,0,0,0,0,0,0,0,0,0,85,0,106,0,17,0,0,0,19,0,165,0,235,0,0,0,0,0,195,0,237,0,224,0,131,0,223,0,119,0,176,0,21,0,117,0,129,0,84,0,236,0,64,0,0,0,0,0,144,0,37,0,105,0,0,0,157,0,0,0,0,0,247,0,0,0,125,0,0,0,47,0,109,0,210,0,59,0,0,0,155,0,109,0,57,0,8,0,129,0,22,0,166,0,143,0,250,0,176,0,0,0,176,0,141,0,119,0,177,0,7,0,183,0,10,0,175,0,20,0,170,0,81,0,228,0,0,0,113,0,0,0,193,0,21,0,121,0,21,0,101,0,244,0,210,0,245,0,221,0,177,0,212,0,0,0,0,0,0,0,28,0,233,0,176,0,0,0,157,0,0,0,157,0,0,0,27,0,226,0,12,0,98,0,99,0,183,0,146,0,203,0,130,0,211,0,102,0,8,0,14,0,23,0,73,0,239,0,234,0,139,0,195,0,0,0,0,0,223,0,0,0,111,0,15,0,150,0,21,0,105,0,52,0,139,0,38,0,228,0,112,0,94,0,96,0,190,0,22,0,99,0,0,0,136,0,220,0,212,0,127,0,41,0,142,0,170,0,251,0,215,0,5,0,177,0,66,0,76,0,103,0,198,0,149,0,44,0,209,0,249,0,197,0,230,0,155,0,25,0,170,0,155,0,144,0,143,0,216,0,222,0,0,0,220,0,192,0,0,0,136,0,175,0,66,0,70,0,11,0,219,0,0,0,79,0,132,0,12,0,0,0,252,0,152,0,99,0,246,0,0,0,90,0,0,0,229,0,26,0,0,0,26,0,0,0,142,0,0,0,174,0,235,0,13,0,115,0,0,0,174,0,186,0,63,0,0,0,141,0,59,0,3,0,0,0,0,0,28,0,114,0,6,0,233,0,0,0,0,0,108,0,96,0,152,0,136,0,110,0,202,0,142,0,15,0,0,0,68,0,164,0,67,0);
signal scenario_full  : scenario_type := (140,31,194,31,87,31,87,30,106,31,91,31,28,31,92,31,122,31,174,31,239,31,239,30,87,31,87,30,87,29,87,28,51,31,184,31,68,31,83,31,74,31,143,31,143,30,211,31,115,31,207,31,189,31,177,31,112,31,112,30,87,31,87,30,237,31,76,31,76,30,164,31,238,31,240,31,170,31,85,31,110,31,95,31,220,31,180,31,180,30,239,31,38,31,38,30,96,31,110,31,110,30,110,29,110,28,166,31,249,31,196,31,196,30,104,31,205,31,122,31,61,31,185,31,37,31,69,31,221,31,221,30,92,31,92,30,151,31,151,30,214,31,68,31,19,31,244,31,244,30,63,31,135,31,135,30,15,31,15,30,220,31,147,31,42,31,150,31,198,31,136,31,201,31,18,31,123,31,227,31,110,31,244,31,207,31,105,31,82,31,155,31,212,31,212,30,156,31,116,31,116,30,116,29,189,31,90,31,11,31,11,30,94,31,194,31,194,30,194,29,194,28,194,27,85,31,106,31,17,31,17,30,19,31,165,31,235,31,235,30,235,29,195,31,237,31,224,31,131,31,223,31,119,31,176,31,21,31,117,31,129,31,84,31,236,31,64,31,64,30,64,29,144,31,37,31,105,31,105,30,157,31,157,30,157,29,247,31,247,30,125,31,125,30,47,31,109,31,210,31,59,31,59,30,155,31,109,31,57,31,8,31,129,31,22,31,166,31,143,31,250,31,176,31,176,30,176,31,141,31,119,31,177,31,7,31,183,31,10,31,175,31,20,31,170,31,81,31,228,31,228,30,113,31,113,30,193,31,21,31,121,31,21,31,101,31,244,31,210,31,245,31,221,31,177,31,212,31,212,30,212,29,212,28,28,31,233,31,176,31,176,30,157,31,157,30,157,31,157,30,27,31,226,31,12,31,98,31,99,31,183,31,146,31,203,31,130,31,211,31,102,31,8,31,14,31,23,31,73,31,239,31,234,31,139,31,195,31,195,30,195,29,223,31,223,30,111,31,15,31,150,31,21,31,105,31,52,31,139,31,38,31,228,31,112,31,94,31,96,31,190,31,22,31,99,31,99,30,136,31,220,31,212,31,127,31,41,31,142,31,170,31,251,31,215,31,5,31,177,31,66,31,76,31,103,31,198,31,149,31,44,31,209,31,249,31,197,31,230,31,155,31,25,31,170,31,155,31,144,31,143,31,216,31,222,31,222,30,220,31,192,31,192,30,136,31,175,31,66,31,70,31,11,31,219,31,219,30,79,31,132,31,12,31,12,30,252,31,152,31,99,31,246,31,246,30,90,31,90,30,229,31,26,31,26,30,26,31,26,30,142,31,142,30,174,31,235,31,13,31,115,31,115,30,174,31,186,31,63,31,63,30,141,31,59,31,3,31,3,30,3,29,28,31,114,31,6,31,233,31,233,30,233,29,108,31,96,31,152,31,136,31,110,31,202,31,142,31,15,31,15,30,68,31,164,31,67,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
