-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 162;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (212,0,0,0,150,0,67,0,182,0,123,0,180,0,160,0,36,0,194,0,110,0,63,0,0,0,0,0,60,0,66,0,236,0,90,0,100,0,170,0,203,0,138,0,186,0,137,0,37,0,71,0,173,0,39,0,169,0,155,0,0,0,0,0,254,0,124,0,197,0,119,0,67,0,182,0,230,0,193,0,36,0,55,0,121,0,191,0,0,0,165,0,3,0,0,0,100,0,230,0,221,0,0,0,156,0,48,0,9,0,0,0,226,0,214,0,2,0,190,0,49,0,212,0,0,0,0,0,220,0,175,0,0,0,113,0,24,0,249,0,0,0,143,0,0,0,0,0,155,0,11,0,57,0,22,0,143,0,82,0,239,0,95,0,0,0,192,0,237,0,189,0,31,0,2,0,0,0,240,0,102,0,26,0,0,0,77,0,60,0,0,0,3,0,215,0,0,0,235,0,61,0,201,0,94,0,253,0,6,0,150,0,16,0,0,0,0,0,0,0,203,0,230,0,0,0,132,0,27,0,70,0,183,0,239,0,176,0,118,0,169,0,160,0,45,0,66,0,207,0,0,0,113,0,139,0,17,0,230,0,115,0,98,0,209,0,204,0,100,0,0,0,91,0,0,0,205,0,137,0,215,0,0,0,72,0,223,0,200,0,215,0,249,0,183,0,109,0,53,0,22,0,225,0,95,0,214,0,131,0,77,0,0,0,248,0,0,0,118,0,166,0,123,0);
signal scenario_full  : scenario_type := (212,31,212,30,150,31,67,31,182,31,123,31,180,31,160,31,36,31,194,31,110,31,63,31,63,30,63,29,60,31,66,31,236,31,90,31,100,31,170,31,203,31,138,31,186,31,137,31,37,31,71,31,173,31,39,31,169,31,155,31,155,30,155,29,254,31,124,31,197,31,119,31,67,31,182,31,230,31,193,31,36,31,55,31,121,31,191,31,191,30,165,31,3,31,3,30,100,31,230,31,221,31,221,30,156,31,48,31,9,31,9,30,226,31,214,31,2,31,190,31,49,31,212,31,212,30,212,29,220,31,175,31,175,30,113,31,24,31,249,31,249,30,143,31,143,30,143,29,155,31,11,31,57,31,22,31,143,31,82,31,239,31,95,31,95,30,192,31,237,31,189,31,31,31,2,31,2,30,240,31,102,31,26,31,26,30,77,31,60,31,60,30,3,31,215,31,215,30,235,31,61,31,201,31,94,31,253,31,6,31,150,31,16,31,16,30,16,29,16,28,203,31,230,31,230,30,132,31,27,31,70,31,183,31,239,31,176,31,118,31,169,31,160,31,45,31,66,31,207,31,207,30,113,31,139,31,17,31,230,31,115,31,98,31,209,31,204,31,100,31,100,30,91,31,91,30,205,31,137,31,215,31,215,30,72,31,223,31,200,31,215,31,249,31,183,31,109,31,53,31,22,31,225,31,95,31,214,31,131,31,77,31,77,30,248,31,248,30,118,31,166,31,123,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
