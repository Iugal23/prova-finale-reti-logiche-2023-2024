-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 706;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (186,0,0,0,224,0,0,0,215,0,0,0,91,0,201,0,0,0,0,0,199,0,0,0,187,0,38,0,213,0,0,0,39,0,229,0,116,0,220,0,0,0,212,0,73,0,142,0,162,0,0,0,28,0,12,0,220,0,10,0,92,0,23,0,0,0,0,0,203,0,111,0,89,0,249,0,60,0,231,0,218,0,111,0,167,0,156,0,0,0,152,0,133,0,171,0,0,0,224,0,56,0,167,0,61,0,178,0,225,0,90,0,32,0,108,0,160,0,248,0,96,0,4,0,81,0,199,0,101,0,0,0,17,0,181,0,0,0,141,0,215,0,10,0,4,0,234,0,100,0,59,0,183,0,88,0,14,0,130,0,91,0,0,0,235,0,43,0,191,0,0,0,0,0,125,0,153,0,27,0,119,0,99,0,225,0,187,0,31,0,130,0,49,0,188,0,0,0,253,0,0,0,198,0,0,0,137,0,47,0,53,0,141,0,164,0,119,0,92,0,104,0,213,0,172,0,0,0,0,0,134,0,52,0,122,0,134,0,0,0,0,0,0,0,104,0,189,0,0,0,28,0,36,0,14,0,147,0,148,0,31,0,179,0,31,0,212,0,200,0,0,0,238,0,0,0,0,0,89,0,227,0,227,0,150,0,123,0,58,0,56,0,129,0,1,0,151,0,0,0,55,0,26,0,0,0,27,0,97,0,229,0,246,0,0,0,0,0,102,0,167,0,40,0,166,0,0,0,21,0,94,0,38,0,137,0,248,0,0,0,250,0,110,0,28,0,237,0,53,0,49,0,4,0,210,0,9,0,139,0,65,0,21,0,243,0,168,0,109,0,50,0,240,0,29,0,189,0,227,0,227,0,102,0,59,0,138,0,1,0,189,0,157,0,115,0,35,0,9,0,12,0,177,0,177,0,56,0,230,0,0,0,0,0,47,0,0,0,167,0,60,0,244,0,0,0,218,0,33,0,125,0,101,0,150,0,223,0,0,0,0,0,115,0,0,0,158,0,8,0,249,0,153,0,52,0,79,0,0,0,169,0,116,0,16,0,0,0,196,0,235,0,0,0,36,0,0,0,111,0,95,0,128,0,238,0,224,0,105,0,160,0,193,0,185,0,0,0,209,0,63,0,0,0,118,0,89,0,242,0,0,0,213,0,0,0,61,0,138,0,246,0,197,0,0,0,0,0,2,0,0,0,187,0,183,0,201,0,0,0,145,0,248,0,24,0,156,0,148,0,30,0,105,0,14,0,121,0,122,0,128,0,0,0,240,0,207,0,94,0,51,0,135,0,81,0,11,0,12,0,42,0,76,0,158,0,253,0,236,0,76,0,238,0,8,0,69,0,132,0,35,0,82,0,224,0,133,0,134,0,183,0,168,0,250,0,16,0,147,0,126,0,152,0,158,0,15,0,36,0,245,0,117,0,249,0,146,0,170,0,0,0,100,0,34,0,185,0,86,0,174,0,235,0,34,0,0,0,168,0,82,0,234,0,0,0,0,0,221,0,140,0,0,0,107,0,147,0,0,0,156,0,210,0,68,0,0,0,46,0,208,0,61,0,194,0,205,0,131,0,27,0,0,0,183,0,130,0,74,0,55,0,252,0,137,0,248,0,165,0,204,0,0,0,0,0,211,0,30,0,58,0,0,0,73,0,0,0,0,0,58,0,0,0,211,0,42,0,3,0,215,0,3,0,194,0,124,0,110,0,159,0,231,0,0,0,107,0,123,0,0,0,251,0,0,0,0,0,101,0,71,0,32,0,191,0,0,0,28,0,18,0,152,0,200,0,158,0,200,0,31,0,80,0,43,0,104,0,21,0,106,0,0,0,0,0,141,0,159,0,78,0,111,0,0,0,71,0,0,0,120,0,138,0,0,0,0,0,218,0,22,0,128,0,27,0,232,0,234,0,200,0,24,0,65,0,226,0,73,0,115,0,176,0,183,0,231,0,246,0,54,0,0,0,14,0,10,0,0,0,205,0,0,0,163,0,207,0,213,0,193,0,179,0,221,0,11,0,0,0,0,0,144,0,134,0,0,0,56,0,76,0,231,0,0,0,20,0,0,0,0,0,97,0,91,0,188,0,73,0,116,0,57,0,0,0,85,0,58,0,247,0,0,0,0,0,33,0,86,0,164,0,0,0,63,0,255,0,205,0,46,0,0,0,93,0,115,0,0,0,126,0,176,0,233,0,148,0,0,0,42,0,232,0,205,0,214,0,0,0,71,0,73,0,224,0,91,0,120,0,103,0,0,0,71,0,204,0,0,0,180,0,85,0,114,0,0,0,73,0,83,0,0,0,0,0,0,0,248,0,220,0,220,0,135,0,0,0,0,0,63,0,0,0,30,0,240,0,183,0,61,0,231,0,25,0,99,0,249,0,237,0,0,0,220,0,146,0,29,0,0,0,18,0,192,0,129,0,0,0,113,0,144,0,28,0,46,0,105,0,115,0,73,0,0,0,149,0,243,0,111,0,59,0,0,0,0,0,22,0,6,0,93,0,43,0,199,0,221,0,0,0,200,0,85,0,253,0,26,0,0,0,0,0,6,0,0,0,183,0,156,0,172,0,68,0,103,0,64,0,79,0,122,0,122,0,0,0,101,0,237,0,0,0,0,0,0,0,188,0,176,0,254,0,105,0,61,0,240,0,10,0,183,0,0,0,0,0,0,0,0,0,11,0,84,0,200,0,83,0,96,0,0,0,98,0,80,0,230,0,186,0,226,0,190,0,0,0,161,0,92,0,199,0,26,0,52,0,180,0,201,0,79,0,119,0,98,0,4,0,64,0,229,0,83,0,203,0,130,0,157,0,56,0,200,0,48,0,89,0,85,0,205,0,27,0,1,0,210,0,0,0,138,0,0,0,0,0,145,0,212,0,104,0,94,0,0,0,141,0,74,0,0,0,186,0,245,0,126,0,30,0,138,0,83,0,251,0,0,0,223,0,176,0,134,0,116,0,71,0,203,0,163,0,122,0,197,0,249,0,224,0,187,0,39,0,158,0,43,0,3,0,38,0,246,0,214,0,59,0,84,0,0,0,199,0,7,0,117,0,150,0,18,0,21,0,125,0,59,0,78,0,19,0,252,0,45,0,127,0,202,0,51,0,0,0,101,0,78,0,0,0,57,0,107,0,93,0,225,0,46,0,0,0,132,0,163,0,141,0,222,0);
signal scenario_full  : scenario_type := (186,31,186,30,224,31,224,30,215,31,215,30,91,31,201,31,201,30,201,29,199,31,199,30,187,31,38,31,213,31,213,30,39,31,229,31,116,31,220,31,220,30,212,31,73,31,142,31,162,31,162,30,28,31,12,31,220,31,10,31,92,31,23,31,23,30,23,29,203,31,111,31,89,31,249,31,60,31,231,31,218,31,111,31,167,31,156,31,156,30,152,31,133,31,171,31,171,30,224,31,56,31,167,31,61,31,178,31,225,31,90,31,32,31,108,31,160,31,248,31,96,31,4,31,81,31,199,31,101,31,101,30,17,31,181,31,181,30,141,31,215,31,10,31,4,31,234,31,100,31,59,31,183,31,88,31,14,31,130,31,91,31,91,30,235,31,43,31,191,31,191,30,191,29,125,31,153,31,27,31,119,31,99,31,225,31,187,31,31,31,130,31,49,31,188,31,188,30,253,31,253,30,198,31,198,30,137,31,47,31,53,31,141,31,164,31,119,31,92,31,104,31,213,31,172,31,172,30,172,29,134,31,52,31,122,31,134,31,134,30,134,29,134,28,104,31,189,31,189,30,28,31,36,31,14,31,147,31,148,31,31,31,179,31,31,31,212,31,200,31,200,30,238,31,238,30,238,29,89,31,227,31,227,31,150,31,123,31,58,31,56,31,129,31,1,31,151,31,151,30,55,31,26,31,26,30,27,31,97,31,229,31,246,31,246,30,246,29,102,31,167,31,40,31,166,31,166,30,21,31,94,31,38,31,137,31,248,31,248,30,250,31,110,31,28,31,237,31,53,31,49,31,4,31,210,31,9,31,139,31,65,31,21,31,243,31,168,31,109,31,50,31,240,31,29,31,189,31,227,31,227,31,102,31,59,31,138,31,1,31,189,31,157,31,115,31,35,31,9,31,12,31,177,31,177,31,56,31,230,31,230,30,230,29,47,31,47,30,167,31,60,31,244,31,244,30,218,31,33,31,125,31,101,31,150,31,223,31,223,30,223,29,115,31,115,30,158,31,8,31,249,31,153,31,52,31,79,31,79,30,169,31,116,31,16,31,16,30,196,31,235,31,235,30,36,31,36,30,111,31,95,31,128,31,238,31,224,31,105,31,160,31,193,31,185,31,185,30,209,31,63,31,63,30,118,31,89,31,242,31,242,30,213,31,213,30,61,31,138,31,246,31,197,31,197,30,197,29,2,31,2,30,187,31,183,31,201,31,201,30,145,31,248,31,24,31,156,31,148,31,30,31,105,31,14,31,121,31,122,31,128,31,128,30,240,31,207,31,94,31,51,31,135,31,81,31,11,31,12,31,42,31,76,31,158,31,253,31,236,31,76,31,238,31,8,31,69,31,132,31,35,31,82,31,224,31,133,31,134,31,183,31,168,31,250,31,16,31,147,31,126,31,152,31,158,31,15,31,36,31,245,31,117,31,249,31,146,31,170,31,170,30,100,31,34,31,185,31,86,31,174,31,235,31,34,31,34,30,168,31,82,31,234,31,234,30,234,29,221,31,140,31,140,30,107,31,147,31,147,30,156,31,210,31,68,31,68,30,46,31,208,31,61,31,194,31,205,31,131,31,27,31,27,30,183,31,130,31,74,31,55,31,252,31,137,31,248,31,165,31,204,31,204,30,204,29,211,31,30,31,58,31,58,30,73,31,73,30,73,29,58,31,58,30,211,31,42,31,3,31,215,31,3,31,194,31,124,31,110,31,159,31,231,31,231,30,107,31,123,31,123,30,251,31,251,30,251,29,101,31,71,31,32,31,191,31,191,30,28,31,18,31,152,31,200,31,158,31,200,31,31,31,80,31,43,31,104,31,21,31,106,31,106,30,106,29,141,31,159,31,78,31,111,31,111,30,71,31,71,30,120,31,138,31,138,30,138,29,218,31,22,31,128,31,27,31,232,31,234,31,200,31,24,31,65,31,226,31,73,31,115,31,176,31,183,31,231,31,246,31,54,31,54,30,14,31,10,31,10,30,205,31,205,30,163,31,207,31,213,31,193,31,179,31,221,31,11,31,11,30,11,29,144,31,134,31,134,30,56,31,76,31,231,31,231,30,20,31,20,30,20,29,97,31,91,31,188,31,73,31,116,31,57,31,57,30,85,31,58,31,247,31,247,30,247,29,33,31,86,31,164,31,164,30,63,31,255,31,205,31,46,31,46,30,93,31,115,31,115,30,126,31,176,31,233,31,148,31,148,30,42,31,232,31,205,31,214,31,214,30,71,31,73,31,224,31,91,31,120,31,103,31,103,30,71,31,204,31,204,30,180,31,85,31,114,31,114,30,73,31,83,31,83,30,83,29,83,28,248,31,220,31,220,31,135,31,135,30,135,29,63,31,63,30,30,31,240,31,183,31,61,31,231,31,25,31,99,31,249,31,237,31,237,30,220,31,146,31,29,31,29,30,18,31,192,31,129,31,129,30,113,31,144,31,28,31,46,31,105,31,115,31,73,31,73,30,149,31,243,31,111,31,59,31,59,30,59,29,22,31,6,31,93,31,43,31,199,31,221,31,221,30,200,31,85,31,253,31,26,31,26,30,26,29,6,31,6,30,183,31,156,31,172,31,68,31,103,31,64,31,79,31,122,31,122,31,122,30,101,31,237,31,237,30,237,29,237,28,188,31,176,31,254,31,105,31,61,31,240,31,10,31,183,31,183,30,183,29,183,28,183,27,11,31,84,31,200,31,83,31,96,31,96,30,98,31,80,31,230,31,186,31,226,31,190,31,190,30,161,31,92,31,199,31,26,31,52,31,180,31,201,31,79,31,119,31,98,31,4,31,64,31,229,31,83,31,203,31,130,31,157,31,56,31,200,31,48,31,89,31,85,31,205,31,27,31,1,31,210,31,210,30,138,31,138,30,138,29,145,31,212,31,104,31,94,31,94,30,141,31,74,31,74,30,186,31,245,31,126,31,30,31,138,31,83,31,251,31,251,30,223,31,176,31,134,31,116,31,71,31,203,31,163,31,122,31,197,31,249,31,224,31,187,31,39,31,158,31,43,31,3,31,38,31,246,31,214,31,59,31,84,31,84,30,199,31,7,31,117,31,150,31,18,31,21,31,125,31,59,31,78,31,19,31,252,31,45,31,127,31,202,31,51,31,51,30,101,31,78,31,78,30,57,31,107,31,93,31,225,31,46,31,46,30,132,31,163,31,141,31,222,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
