-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 781;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (116,0,62,0,64,0,106,0,30,0,157,0,232,0,248,0,50,0,202,0,183,0,100,0,24,0,94,0,0,0,4,0,17,0,208,0,24,0,148,0,237,0,19,0,73,0,86,0,87,0,168,0,129,0,0,0,92,0,4,0,136,0,248,0,22,0,157,0,165,0,199,0,0,0,117,0,124,0,212,0,84,0,185,0,15,0,109,0,3,0,28,0,87,0,227,0,0,0,148,0,235,0,234,0,0,0,134,0,148,0,27,0,23,0,0,0,215,0,251,0,54,0,18,0,179,0,7,0,174,0,49,0,142,0,95,0,252,0,0,0,217,0,152,0,0,0,0,0,157,0,218,0,101,0,0,0,10,0,205,0,255,0,58,0,231,0,101,0,163,0,36,0,44,0,29,0,0,0,169,0,38,0,124,0,112,0,219,0,0,0,0,0,12,0,135,0,73,0,71,0,224,0,213,0,91,0,0,0,241,0,172,0,69,0,100,0,32,0,48,0,241,0,0,0,195,0,243,0,164,0,0,0,191,0,144,0,140,0,43,0,102,0,209,0,197,0,160,0,0,0,142,0,28,0,0,0,133,0,129,0,170,0,61,0,109,0,86,0,46,0,66,0,118,0,21,0,0,0,234,0,118,0,112,0,0,0,103,0,243,0,211,0,0,0,235,0,97,0,143,0,155,0,123,0,107,0,0,0,0,0,62,0,0,0,0,0,166,0,49,0,202,0,234,0,30,0,205,0,165,0,0,0,86,0,198,0,255,0,0,0,0,0,110,0,169,0,123,0,65,0,62,0,129,0,159,0,64,0,193,0,0,0,43,0,0,0,125,0,0,0,35,0,14,0,0,0,0,0,185,0,34,0,191,0,0,0,59,0,82,0,116,0,127,0,147,0,0,0,163,0,0,0,124,0,20,0,227,0,227,0,12,0,0,0,181,0,0,0,83,0,53,0,110,0,0,0,239,0,153,0,69,0,0,0,107,0,108,0,0,0,179,0,0,0,13,0,199,0,217,0,123,0,141,0,0,0,171,0,147,0,0,0,78,0,40,0,66,0,118,0,180,0,193,0,123,0,250,0,90,0,33,0,108,0,139,0,246,0,234,0,0,0,56,0,6,0,238,0,0,0,0,0,228,0,103,0,8,0,0,0,107,0,243,0,184,0,121,0,137,0,121,0,95,0,78,0,88,0,118,0,200,0,63,0,160,0,172,0,198,0,66,0,38,0,0,0,18,0,23,0,0,0,112,0,164,0,228,0,0,0,161,0,106,0,34,0,106,0,250,0,221,0,220,0,0,0,19,0,95,0,214,0,200,0,0,0,0,0,26,0,59,0,83,0,186,0,191,0,95,0,243,0,241,0,235,0,143,0,74,0,61,0,184,0,186,0,140,0,113,0,232,0,43,0,212,0,31,0,124,0,0,0,75,0,192,0,0,0,163,0,38,0,81,0,25,0,242,0,0,0,0,0,133,0,34,0,126,0,10,0,84,0,0,0,140,0,55,0,51,0,201,0,0,0,107,0,3,0,84,0,123,0,183,0,132,0,113,0,36,0,121,0,200,0,234,0,37,0,23,0,17,0,173,0,205,0,0,0,32,0,77,0,240,0,253,0,57,0,0,0,0,0,133,0,184,0,7,0,61,0,0,0,93,0,0,0,221,0,4,0,0,0,154,0,102,0,147,0,0,0,225,0,117,0,240,0,179,0,172,0,0,0,126,0,235,0,144,0,0,0,0,0,33,0,138,0,57,0,0,0,0,0,46,0,32,0,31,0,9,0,240,0,42,0,78,0,247,0,25,0,213,0,81,0,182,0,207,0,0,0,193,0,159,0,148,0,103,0,238,0,227,0,61,0,167,0,64,0,204,0,55,0,0,0,48,0,143,0,241,0,219,0,0,0,0,0,13,0,1,0,198,0,219,0,26,0,139,0,0,0,49,0,0,0,0,0,21,0,0,0,0,0,150,0,0,0,71,0,71,0,3,0,142,0,110,0,246,0,21,0,165,0,0,0,206,0,2,0,218,0,47,0,0,0,72,0,0,0,59,0,0,0,139,0,0,0,0,0,235,0,100,0,0,0,99,0,152,0,210,0,36,0,0,0,0,0,23,0,113,0,79,0,223,0,0,0,0,0,189,0,0,0,105,0,65,0,0,0,31,0,0,0,187,0,128,0,207,0,22,0,191,0,3,0,63,0,222,0,219,0,46,0,184,0,128,0,75,0,0,0,218,0,38,0,188,0,237,0,39,0,23,0,0,0,249,0,103,0,247,0,24,0,19,0,59,0,88,0,53,0,140,0,127,0,0,0,38,0,182,0,0,0,0,0,254,0,0,0,0,0,0,0,165,0,0,0,141,0,0,0,0,0,173,0,0,0,195,0,0,0,97,0,217,0,227,0,213,0,31,0,131,0,3,0,230,0,108,0,0,0,212,0,210,0,2,0,0,0,69,0,152,0,202,0,0,0,166,0,185,0,0,0,101,0,234,0,0,0,201,0,88,0,30,0,239,0,197,0,211,0,0,0,75,0,98,0,100,0,220,0,131,0,98,0,11,0,19,0,0,0,0,0,163,0,51,0,30,0,49,0,218,0,221,0,113,0,65,0,151,0,130,0,208,0,27,0,50,0,243,0,249,0,0,0,19,0,58,0,0,0,154,0,150,0,26,0,121,0,141,0,0,0,163,0,108,0,227,0,0,0,161,0,45,0,8,0,64,0,213,0,31,0,91,0,45,0,0,0,236,0,0,0,233,0,145,0,172,0,255,0,100,0,0,0,156,0,141,0,0,0,95,0,219,0,136,0,219,0,97,0,0,0,255,0,29,0,252,0,75,0,80,0,173,0,206,0,210,0,211,0,46,0,23,0,217,0,57,0,0,0,43,0,113,0,0,0,110,0,103,0,35,0,131,0,187,0,119,0,86,0,0,0,149,0,123,0,224,0,77,0,0,0,196,0,101,0,0,0,0,0,0,0,80,0,103,0,235,0,127,0,138,0,123,0,22,0,127,0,0,0,150,0,0,0,0,0,178,0,91,0,211,0,227,0,249,0,0,0,252,0,60,0,209,0,127,0,140,0,0,0,231,0,76,0,242,0,0,0,0,0,109,0,71,0,0,0,0,0,0,0,4,0,182,0,0,0,188,0,216,0,76,0,3,0,94,0,83,0,227,0,210,0,49,0,0,0,149,0,219,0,10,0,0,0,0,0,0,0,60,0,62,0,12,0,76,0,50,0,65,0,191,0,6,0,176,0,59,0,128,0,0,0,0,0,235,0,213,0,0,0,143,0,0,0,200,0,71,0,235,0,140,0,39,0,79,0,0,0,66,0,149,0,131,0,0,0,0,0,223,0,66,0,0,0,131,0,239,0,239,0,127,0,254,0,0,0,3,0,94,0,144,0,170,0,0,0,0,0,44,0,0,0,202,0,146,0,91,0,99,0,0,0,38,0,3,0,0,0,38,0,25,0,82,0,253,0,114,0,162,0,79,0,74,0,16,0,194,0,129,0,0,0);
signal scenario_full  : scenario_type := (116,31,62,31,64,31,106,31,30,31,157,31,232,31,248,31,50,31,202,31,183,31,100,31,24,31,94,31,94,30,4,31,17,31,208,31,24,31,148,31,237,31,19,31,73,31,86,31,87,31,168,31,129,31,129,30,92,31,4,31,136,31,248,31,22,31,157,31,165,31,199,31,199,30,117,31,124,31,212,31,84,31,185,31,15,31,109,31,3,31,28,31,87,31,227,31,227,30,148,31,235,31,234,31,234,30,134,31,148,31,27,31,23,31,23,30,215,31,251,31,54,31,18,31,179,31,7,31,174,31,49,31,142,31,95,31,252,31,252,30,217,31,152,31,152,30,152,29,157,31,218,31,101,31,101,30,10,31,205,31,255,31,58,31,231,31,101,31,163,31,36,31,44,31,29,31,29,30,169,31,38,31,124,31,112,31,219,31,219,30,219,29,12,31,135,31,73,31,71,31,224,31,213,31,91,31,91,30,241,31,172,31,69,31,100,31,32,31,48,31,241,31,241,30,195,31,243,31,164,31,164,30,191,31,144,31,140,31,43,31,102,31,209,31,197,31,160,31,160,30,142,31,28,31,28,30,133,31,129,31,170,31,61,31,109,31,86,31,46,31,66,31,118,31,21,31,21,30,234,31,118,31,112,31,112,30,103,31,243,31,211,31,211,30,235,31,97,31,143,31,155,31,123,31,107,31,107,30,107,29,62,31,62,30,62,29,166,31,49,31,202,31,234,31,30,31,205,31,165,31,165,30,86,31,198,31,255,31,255,30,255,29,110,31,169,31,123,31,65,31,62,31,129,31,159,31,64,31,193,31,193,30,43,31,43,30,125,31,125,30,35,31,14,31,14,30,14,29,185,31,34,31,191,31,191,30,59,31,82,31,116,31,127,31,147,31,147,30,163,31,163,30,124,31,20,31,227,31,227,31,12,31,12,30,181,31,181,30,83,31,53,31,110,31,110,30,239,31,153,31,69,31,69,30,107,31,108,31,108,30,179,31,179,30,13,31,199,31,217,31,123,31,141,31,141,30,171,31,147,31,147,30,78,31,40,31,66,31,118,31,180,31,193,31,123,31,250,31,90,31,33,31,108,31,139,31,246,31,234,31,234,30,56,31,6,31,238,31,238,30,238,29,228,31,103,31,8,31,8,30,107,31,243,31,184,31,121,31,137,31,121,31,95,31,78,31,88,31,118,31,200,31,63,31,160,31,172,31,198,31,66,31,38,31,38,30,18,31,23,31,23,30,112,31,164,31,228,31,228,30,161,31,106,31,34,31,106,31,250,31,221,31,220,31,220,30,19,31,95,31,214,31,200,31,200,30,200,29,26,31,59,31,83,31,186,31,191,31,95,31,243,31,241,31,235,31,143,31,74,31,61,31,184,31,186,31,140,31,113,31,232,31,43,31,212,31,31,31,124,31,124,30,75,31,192,31,192,30,163,31,38,31,81,31,25,31,242,31,242,30,242,29,133,31,34,31,126,31,10,31,84,31,84,30,140,31,55,31,51,31,201,31,201,30,107,31,3,31,84,31,123,31,183,31,132,31,113,31,36,31,121,31,200,31,234,31,37,31,23,31,17,31,173,31,205,31,205,30,32,31,77,31,240,31,253,31,57,31,57,30,57,29,133,31,184,31,7,31,61,31,61,30,93,31,93,30,221,31,4,31,4,30,154,31,102,31,147,31,147,30,225,31,117,31,240,31,179,31,172,31,172,30,126,31,235,31,144,31,144,30,144,29,33,31,138,31,57,31,57,30,57,29,46,31,32,31,31,31,9,31,240,31,42,31,78,31,247,31,25,31,213,31,81,31,182,31,207,31,207,30,193,31,159,31,148,31,103,31,238,31,227,31,61,31,167,31,64,31,204,31,55,31,55,30,48,31,143,31,241,31,219,31,219,30,219,29,13,31,1,31,198,31,219,31,26,31,139,31,139,30,49,31,49,30,49,29,21,31,21,30,21,29,150,31,150,30,71,31,71,31,3,31,142,31,110,31,246,31,21,31,165,31,165,30,206,31,2,31,218,31,47,31,47,30,72,31,72,30,59,31,59,30,139,31,139,30,139,29,235,31,100,31,100,30,99,31,152,31,210,31,36,31,36,30,36,29,23,31,113,31,79,31,223,31,223,30,223,29,189,31,189,30,105,31,65,31,65,30,31,31,31,30,187,31,128,31,207,31,22,31,191,31,3,31,63,31,222,31,219,31,46,31,184,31,128,31,75,31,75,30,218,31,38,31,188,31,237,31,39,31,23,31,23,30,249,31,103,31,247,31,24,31,19,31,59,31,88,31,53,31,140,31,127,31,127,30,38,31,182,31,182,30,182,29,254,31,254,30,254,29,254,28,165,31,165,30,141,31,141,30,141,29,173,31,173,30,195,31,195,30,97,31,217,31,227,31,213,31,31,31,131,31,3,31,230,31,108,31,108,30,212,31,210,31,2,31,2,30,69,31,152,31,202,31,202,30,166,31,185,31,185,30,101,31,234,31,234,30,201,31,88,31,30,31,239,31,197,31,211,31,211,30,75,31,98,31,100,31,220,31,131,31,98,31,11,31,19,31,19,30,19,29,163,31,51,31,30,31,49,31,218,31,221,31,113,31,65,31,151,31,130,31,208,31,27,31,50,31,243,31,249,31,249,30,19,31,58,31,58,30,154,31,150,31,26,31,121,31,141,31,141,30,163,31,108,31,227,31,227,30,161,31,45,31,8,31,64,31,213,31,31,31,91,31,45,31,45,30,236,31,236,30,233,31,145,31,172,31,255,31,100,31,100,30,156,31,141,31,141,30,95,31,219,31,136,31,219,31,97,31,97,30,255,31,29,31,252,31,75,31,80,31,173,31,206,31,210,31,211,31,46,31,23,31,217,31,57,31,57,30,43,31,113,31,113,30,110,31,103,31,35,31,131,31,187,31,119,31,86,31,86,30,149,31,123,31,224,31,77,31,77,30,196,31,101,31,101,30,101,29,101,28,80,31,103,31,235,31,127,31,138,31,123,31,22,31,127,31,127,30,150,31,150,30,150,29,178,31,91,31,211,31,227,31,249,31,249,30,252,31,60,31,209,31,127,31,140,31,140,30,231,31,76,31,242,31,242,30,242,29,109,31,71,31,71,30,71,29,71,28,4,31,182,31,182,30,188,31,216,31,76,31,3,31,94,31,83,31,227,31,210,31,49,31,49,30,149,31,219,31,10,31,10,30,10,29,10,28,60,31,62,31,12,31,76,31,50,31,65,31,191,31,6,31,176,31,59,31,128,31,128,30,128,29,235,31,213,31,213,30,143,31,143,30,200,31,71,31,235,31,140,31,39,31,79,31,79,30,66,31,149,31,131,31,131,30,131,29,223,31,66,31,66,30,131,31,239,31,239,31,127,31,254,31,254,30,3,31,94,31,144,31,170,31,170,30,170,29,44,31,44,30,202,31,146,31,91,31,99,31,99,30,38,31,3,31,3,30,38,31,25,31,82,31,253,31,114,31,162,31,79,31,74,31,16,31,194,31,129,31,129,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
