-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 332;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (159,0,2,0,177,0,0,0,29,0,46,0,65,0,96,0,74,0,96,0,0,0,215,0,0,0,69,0,232,0,88,0,210,0,64,0,189,0,0,0,55,0,32,0,63,0,0,0,147,0,250,0,122,0,2,0,68,0,0,0,187,0,100,0,8,0,0,0,117,0,20,0,0,0,248,0,65,0,224,0,149,0,126,0,0,0,115,0,0,0,0,0,0,0,0,0,0,0,192,0,178,0,245,0,30,0,74,0,255,0,0,0,0,0,205,0,48,0,230,0,65,0,0,0,244,0,79,0,50,0,210,0,171,0,0,0,208,0,0,0,11,0,207,0,246,0,48,0,238,0,113,0,88,0,165,0,80,0,221,0,95,0,37,0,7,0,255,0,186,0,114,0,31,0,235,0,118,0,27,0,206,0,176,0,0,0,231,0,0,0,46,0,190,0,0,0,76,0,0,0,81,0,102,0,94,0,127,0,0,0,0,0,114,0,217,0,0,0,33,0,0,0,39,0,177,0,64,0,0,0,174,0,216,0,37,0,236,0,68,0,0,0,107,0,108,0,0,0,187,0,55,0,14,0,181,0,215,0,148,0,37,0,13,0,171,0,0,0,190,0,160,0,26,0,41,0,145,0,80,0,52,0,178,0,229,0,136,0,100,0,13,0,251,0,0,0,127,0,234,0,75,0,47,0,0,0,0,0,0,0,208,0,226,0,63,0,192,0,250,0,55,0,0,0,253,0,0,0,0,0,218,0,236,0,0,0,0,0,205,0,233,0,168,0,64,0,0,0,36,0,83,0,175,0,189,0,0,0,0,0,87,0,206,0,0,0,0,0,116,0,128,0,82,0,231,0,228,0,126,0,22,0,12,0,72,0,204,0,12,0,239,0,161,0,23,0,150,0,0,0,62,0,7,0,71,0,131,0,156,0,0,0,60,0,43,0,228,0,0,0,162,0,165,0,120,0,41,0,93,0,152,0,0,0,100,0,30,0,0,0,158,0,176,0,0,0,31,0,3,0,133,0,108,0,69,0,27,0,43,0,210,0,202,0,115,0,65,0,84,0,140,0,107,0,33,0,39,0,244,0,63,0,33,0,72,0,0,0,0,0,160,0,1,0,0,0,59,0,36,0,96,0,0,0,97,0,0,0,158,0,217,0,0,0,0,0,37,0,0,0,88,0,58,0,93,0,16,0,25,0,233,0,63,0,11,0,126,0,231,0,136,0,0,0,199,0,10,0,167,0,82,0,179,0,18,0,134,0,0,0,249,0,213,0,192,0,67,0,247,0,0,0,227,0,223,0,134,0,0,0,155,0,184,0,52,0,237,0,175,0,0,0,82,0,0,0,115,0,137,0,68,0,0,0,0,0,210,0,72,0,224,0,42,0,225,0,2,0,0,0,101,0,218,0,223,0,54,0,0,0,68,0,196,0,191,0,145,0,15,0,208,0,0,0,9,0,63,0,79,0,248,0,210,0,6,0,251,0,96,0,21,0,196,0);
signal scenario_full  : scenario_type := (159,31,2,31,177,31,177,30,29,31,46,31,65,31,96,31,74,31,96,31,96,30,215,31,215,30,69,31,232,31,88,31,210,31,64,31,189,31,189,30,55,31,32,31,63,31,63,30,147,31,250,31,122,31,2,31,68,31,68,30,187,31,100,31,8,31,8,30,117,31,20,31,20,30,248,31,65,31,224,31,149,31,126,31,126,30,115,31,115,30,115,29,115,28,115,27,115,26,192,31,178,31,245,31,30,31,74,31,255,31,255,30,255,29,205,31,48,31,230,31,65,31,65,30,244,31,79,31,50,31,210,31,171,31,171,30,208,31,208,30,11,31,207,31,246,31,48,31,238,31,113,31,88,31,165,31,80,31,221,31,95,31,37,31,7,31,255,31,186,31,114,31,31,31,235,31,118,31,27,31,206,31,176,31,176,30,231,31,231,30,46,31,190,31,190,30,76,31,76,30,81,31,102,31,94,31,127,31,127,30,127,29,114,31,217,31,217,30,33,31,33,30,39,31,177,31,64,31,64,30,174,31,216,31,37,31,236,31,68,31,68,30,107,31,108,31,108,30,187,31,55,31,14,31,181,31,215,31,148,31,37,31,13,31,171,31,171,30,190,31,160,31,26,31,41,31,145,31,80,31,52,31,178,31,229,31,136,31,100,31,13,31,251,31,251,30,127,31,234,31,75,31,47,31,47,30,47,29,47,28,208,31,226,31,63,31,192,31,250,31,55,31,55,30,253,31,253,30,253,29,218,31,236,31,236,30,236,29,205,31,233,31,168,31,64,31,64,30,36,31,83,31,175,31,189,31,189,30,189,29,87,31,206,31,206,30,206,29,116,31,128,31,82,31,231,31,228,31,126,31,22,31,12,31,72,31,204,31,12,31,239,31,161,31,23,31,150,31,150,30,62,31,7,31,71,31,131,31,156,31,156,30,60,31,43,31,228,31,228,30,162,31,165,31,120,31,41,31,93,31,152,31,152,30,100,31,30,31,30,30,158,31,176,31,176,30,31,31,3,31,133,31,108,31,69,31,27,31,43,31,210,31,202,31,115,31,65,31,84,31,140,31,107,31,33,31,39,31,244,31,63,31,33,31,72,31,72,30,72,29,160,31,1,31,1,30,59,31,36,31,96,31,96,30,97,31,97,30,158,31,217,31,217,30,217,29,37,31,37,30,88,31,58,31,93,31,16,31,25,31,233,31,63,31,11,31,126,31,231,31,136,31,136,30,199,31,10,31,167,31,82,31,179,31,18,31,134,31,134,30,249,31,213,31,192,31,67,31,247,31,247,30,227,31,223,31,134,31,134,30,155,31,184,31,52,31,237,31,175,31,175,30,82,31,82,30,115,31,137,31,68,31,68,30,68,29,210,31,72,31,224,31,42,31,225,31,2,31,2,30,101,31,218,31,223,31,54,31,54,30,68,31,196,31,191,31,145,31,15,31,208,31,208,30,9,31,63,31,79,31,248,31,210,31,6,31,251,31,96,31,21,31,196,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
