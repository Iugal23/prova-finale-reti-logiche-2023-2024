-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 448;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (34,0,0,0,227,0,166,0,244,0,232,0,108,0,176,0,0,0,159,0,100,0,222,0,0,0,97,0,97,0,0,0,186,0,110,0,173,0,231,0,53,0,119,0,19,0,0,0,0,0,123,0,50,0,244,0,207,0,87,0,55,0,108,0,224,0,252,0,2,0,23,0,40,0,98,0,0,0,78,0,111,0,158,0,100,0,0,0,20,0,152,0,144,0,215,0,109,0,90,0,52,0,0,0,41,0,21,0,0,0,51,0,5,0,142,0,55,0,0,0,189,0,13,0,208,0,0,0,138,0,48,0,137,0,128,0,0,0,79,0,216,0,0,0,112,0,0,0,10,0,0,0,117,0,95,0,149,0,233,0,196,0,173,0,191,0,0,0,86,0,27,0,0,0,67,0,171,0,21,0,46,0,148,0,65,0,2,0,32,0,250,0,0,0,0,0,47,0,146,0,168,0,230,0,179,0,0,0,143,0,247,0,71,0,205,0,44,0,76,0,142,0,0,0,100,0,138,0,4,0,0,0,239,0,0,0,237,0,73,0,42,0,244,0,82,0,190,0,241,0,213,0,105,0,52,0,0,0,49,0,141,0,216,0,156,0,0,0,96,0,38,0,137,0,172,0,116,0,134,0,3,0,132,0,0,0,0,0,198,0,105,0,244,0,92,0,0,0,64,0,217,0,242,0,140,0,30,0,235,0,51,0,92,0,0,0,120,0,220,0,0,0,47,0,0,0,26,0,197,0,143,0,211,0,54,0,99,0,233,0,121,0,223,0,0,0,69,0,7,0,189,0,103,0,1,0,0,0,229,0,145,0,179,0,155,0,105,0,43,0,0,0,97,0,0,0,55,0,73,0,48,0,0,0,198,0,150,0,103,0,0,0,54,0,0,0,154,0,0,0,0,0,0,0,0,0,45,0,0,0,48,0,97,0,0,0,51,0,67,0,220,0,61,0,0,0,155,0,0,0,65,0,40,0,53,0,192,0,0,0,207,0,141,0,97,0,69,0,44,0,98,0,86,0,210,0,0,0,43,0,205,0,173,0,131,0,68,0,42,0,172,0,242,0,227,0,32,0,175,0,12,0,16,0,45,0,87,0,206,0,0,0,0,0,161,0,0,0,71,0,76,0,186,0,250,0,110,0,104,0,0,0,0,0,158,0,84,0,31,0,0,0,80,0,48,0,211,0,156,0,153,0,0,0,189,0,224,0,125,0,0,0,70,0,235,0,215,0,191,0,0,0,181,0,232,0,128,0,162,0,155,0,0,0,201,0,66,0,178,0,36,0,182,0,241,0,248,0,221,0,95,0,65,0,0,0,235,0,0,0,55,0,167,0,46,0,98,0,0,0,0,0,61,0,186,0,0,0,138,0,0,0,0,0,229,0,142,0,196,0,0,0,0,0,0,0,11,0,0,0,76,0,195,0,227,0,193,0,0,0,253,0,90,0,8,0,0,0,243,0,209,0,0,0,181,0,116,0,0,0,108,0,140,0,85,0,164,0,0,0,84,0,23,0,165,0,216,0,0,0,0,0,0,0,18,0,0,0,0,0,169,0,163,0,0,0,53,0,117,0,0,0,154,0,0,0,251,0,184,0,49,0,171,0,0,0,33,0,109,0,120,0,93,0,0,0,135,0,80,0,174,0,171,0,62,0,37,0,0,0,156,0,226,0,0,0,125,0,57,0,0,0,152,0,121,0,22,0,27,0,89,0,217,0,13,0,125,0,143,0,0,0,19,0,13,0,39,0,193,0,53,0,0,0,199,0,0,0,64,0,0,0,0,0,0,0,29,0,20,0,132,0,70,0,0,0,169,0,169,0,156,0,50,0,239,0,235,0,252,0,0,0,54,0,0,0,158,0,67,0,139,0,221,0,0,0,237,0,75,0,0,0,109,0,95,0,150,0,11,0,111,0,0,0,0,0,26,0,0,0,0,0,23,0,182,0,158,0,0,0,56,0,0,0,150,0,109,0,187,0,157,0,0,0,143,0,37,0,12,0,3,0,227,0,21,0);
signal scenario_full  : scenario_type := (34,31,34,30,227,31,166,31,244,31,232,31,108,31,176,31,176,30,159,31,100,31,222,31,222,30,97,31,97,31,97,30,186,31,110,31,173,31,231,31,53,31,119,31,19,31,19,30,19,29,123,31,50,31,244,31,207,31,87,31,55,31,108,31,224,31,252,31,2,31,23,31,40,31,98,31,98,30,78,31,111,31,158,31,100,31,100,30,20,31,152,31,144,31,215,31,109,31,90,31,52,31,52,30,41,31,21,31,21,30,51,31,5,31,142,31,55,31,55,30,189,31,13,31,208,31,208,30,138,31,48,31,137,31,128,31,128,30,79,31,216,31,216,30,112,31,112,30,10,31,10,30,117,31,95,31,149,31,233,31,196,31,173,31,191,31,191,30,86,31,27,31,27,30,67,31,171,31,21,31,46,31,148,31,65,31,2,31,32,31,250,31,250,30,250,29,47,31,146,31,168,31,230,31,179,31,179,30,143,31,247,31,71,31,205,31,44,31,76,31,142,31,142,30,100,31,138,31,4,31,4,30,239,31,239,30,237,31,73,31,42,31,244,31,82,31,190,31,241,31,213,31,105,31,52,31,52,30,49,31,141,31,216,31,156,31,156,30,96,31,38,31,137,31,172,31,116,31,134,31,3,31,132,31,132,30,132,29,198,31,105,31,244,31,92,31,92,30,64,31,217,31,242,31,140,31,30,31,235,31,51,31,92,31,92,30,120,31,220,31,220,30,47,31,47,30,26,31,197,31,143,31,211,31,54,31,99,31,233,31,121,31,223,31,223,30,69,31,7,31,189,31,103,31,1,31,1,30,229,31,145,31,179,31,155,31,105,31,43,31,43,30,97,31,97,30,55,31,73,31,48,31,48,30,198,31,150,31,103,31,103,30,54,31,54,30,154,31,154,30,154,29,154,28,154,27,45,31,45,30,48,31,97,31,97,30,51,31,67,31,220,31,61,31,61,30,155,31,155,30,65,31,40,31,53,31,192,31,192,30,207,31,141,31,97,31,69,31,44,31,98,31,86,31,210,31,210,30,43,31,205,31,173,31,131,31,68,31,42,31,172,31,242,31,227,31,32,31,175,31,12,31,16,31,45,31,87,31,206,31,206,30,206,29,161,31,161,30,71,31,76,31,186,31,250,31,110,31,104,31,104,30,104,29,158,31,84,31,31,31,31,30,80,31,48,31,211,31,156,31,153,31,153,30,189,31,224,31,125,31,125,30,70,31,235,31,215,31,191,31,191,30,181,31,232,31,128,31,162,31,155,31,155,30,201,31,66,31,178,31,36,31,182,31,241,31,248,31,221,31,95,31,65,31,65,30,235,31,235,30,55,31,167,31,46,31,98,31,98,30,98,29,61,31,186,31,186,30,138,31,138,30,138,29,229,31,142,31,196,31,196,30,196,29,196,28,11,31,11,30,76,31,195,31,227,31,193,31,193,30,253,31,90,31,8,31,8,30,243,31,209,31,209,30,181,31,116,31,116,30,108,31,140,31,85,31,164,31,164,30,84,31,23,31,165,31,216,31,216,30,216,29,216,28,18,31,18,30,18,29,169,31,163,31,163,30,53,31,117,31,117,30,154,31,154,30,251,31,184,31,49,31,171,31,171,30,33,31,109,31,120,31,93,31,93,30,135,31,80,31,174,31,171,31,62,31,37,31,37,30,156,31,226,31,226,30,125,31,57,31,57,30,152,31,121,31,22,31,27,31,89,31,217,31,13,31,125,31,143,31,143,30,19,31,13,31,39,31,193,31,53,31,53,30,199,31,199,30,64,31,64,30,64,29,64,28,29,31,20,31,132,31,70,31,70,30,169,31,169,31,156,31,50,31,239,31,235,31,252,31,252,30,54,31,54,30,158,31,67,31,139,31,221,31,221,30,237,31,75,31,75,30,109,31,95,31,150,31,11,31,111,31,111,30,111,29,26,31,26,30,26,29,23,31,182,31,158,31,158,30,56,31,56,30,150,31,109,31,187,31,157,31,157,30,143,31,37,31,12,31,3,31,227,31,21,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
