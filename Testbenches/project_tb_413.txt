-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 775;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (30,0,5,0,54,0,208,0,15,0,149,0,0,0,221,0,0,0,156,0,85,0,47,0,248,0,90,0,235,0,85,0,194,0,231,0,186,0,142,0,246,0,0,0,200,0,59,0,243,0,151,0,78,0,209,0,89,0,0,0,0,0,131,0,164,0,235,0,181,0,138,0,248,0,122,0,173,0,0,0,0,0,109,0,42,0,0,0,46,0,138,0,151,0,0,0,128,0,0,0,59,0,184,0,0,0,57,0,0,0,147,0,125,0,215,0,164,0,72,0,200,0,175,0,118,0,232,0,94,0,202,0,0,0,87,0,8,0,118,0,0,0,0,0,125,0,85,0,106,0,62,0,230,0,160,0,6,0,2,0,104,0,229,0,0,0,255,0,0,0,93,0,211,0,0,0,11,0,152,0,3,0,242,0,136,0,0,0,135,0,0,0,104,0,0,0,212,0,0,0,109,0,219,0,190,0,0,0,115,0,176,0,183,0,204,0,0,0,36,0,147,0,198,0,0,0,143,0,0,0,200,0,62,0,130,0,199,0,0,0,50,0,101,0,160,0,36,0,0,0,149,0,13,0,187,0,18,0,122,0,217,0,64,0,0,0,113,0,65,0,170,0,0,0,65,0,98,0,0,0,0,0,245,0,21,0,248,0,179,0,96,0,210,0,0,0,61,0,142,0,0,0,101,0,59,0,179,0,0,0,114,0,0,0,230,0,0,0,9,0,51,0,0,0,19,0,231,0,132,0,124,0,70,0,210,0,88,0,95,0,236,0,98,0,35,0,0,0,104,0,103,0,234,0,160,0,246,0,0,0,0,0,0,0,175,0,64,0,56,0,21,0,0,0,6,0,91,0,56,0,0,0,125,0,100,0,183,0,46,0,0,0,224,0,32,0,149,0,76,0,0,0,251,0,231,0,84,0,252,0,221,0,55,0,0,0,183,0,0,0,136,0,201,0,157,0,0,0,0,0,92,0,38,0,67,0,254,0,126,0,251,0,127,0,197,0,228,0,115,0,251,0,179,0,0,0,0,0,213,0,20,0,186,0,122,0,49,0,45,0,58,0,167,0,37,0,60,0,218,0,34,0,47,0,76,0,124,0,105,0,0,0,0,0,253,0,0,0,148,0,235,0,70,0,92,0,39,0,226,0,230,0,46,0,98,0,159,0,0,0,0,0,16,0,90,0,0,0,9,0,0,0,214,0,0,0,202,0,120,0,214,0,42,0,217,0,56,0,140,0,4,0,199,0,247,0,34,0,168,0,81,0,203,0,2,0,25,0,242,0,233,0,1,0,43,0,92,0,252,0,10,0,0,0,203,0,0,0,250,0,128,0,62,0,152,0,223,0,0,0,0,0,0,0,40,0,0,0,191,0,75,0,74,0,0,0,0,0,91,0,17,0,118,0,102,0,19,0,133,0,0,0,82,0,114,0,249,0,0,0,0,0,195,0,250,0,0,0,207,0,113,0,145,0,219,0,119,0,0,0,192,0,117,0,164,0,2,0,52,0,237,0,205,0,156,0,146,0,194,0,12,0,8,0,0,0,18,0,140,0,242,0,80,0,0,0,12,0,77,0,134,0,193,0,170,0,137,0,99,0,170,0,82,0,140,0,5,0,0,0,115,0,0,0,235,0,0,0,0,0,0,0,184,0,142,0,172,0,210,0,140,0,218,0,228,0,18,0,136,0,139,0,103,0,53,0,158,0,7,0,27,0,237,0,0,0,145,0,40,0,97,0,113,0,237,0,9,0,243,0,235,0,105,0,50,0,70,0,144,0,208,0,0,0,121,0,0,0,176,0,92,0,3,0,188,0,155,0,181,0,215,0,193,0,205,0,17,0,225,0,80,0,218,0,202,0,241,0,0,0,146,0,243,0,0,0,157,0,45,0,0,0,0,0,11,0,120,0,43,0,112,0,202,0,187,0,6,0,126,0,37,0,194,0,78,0,235,0,67,0,233,0,0,0,52,0,0,0,10,0,222,0,170,0,111,0,100,0,0,0,191,0,103,0,0,0,0,0,134,0,163,0,7,0,0,0,0,0,121,0,0,0,104,0,26,0,193,0,58,0,146,0,5,0,91,0,72,0,161,0,230,0,126,0,0,0,245,0,54,0,14,0,89,0,23,0,113,0,61,0,236,0,101,0,134,0,32,0,192,0,70,0,72,0,0,0,152,0,188,0,58,0,128,0,111,0,139,0,110,0,252,0,0,0,173,0,157,0,102,0,182,0,218,0,20,0,47,0,41,0,53,0,12,0,79,0,26,0,46,0,85,0,236,0,90,0,26,0,24,0,199,0,252,0,0,0,150,0,0,0,200,0,117,0,65,0,117,0,0,0,4,0,114,0,158,0,242,0,222,0,248,0,185,0,0,0,81,0,57,0,169,0,125,0,46,0,254,0,25,0,55,0,228,0,0,0,86,0,129,0,23,0,210,0,0,0,164,0,0,0,221,0,20,0,238,0,106,0,183,0,135,0,125,0,137,0,187,0,193,0,36,0,153,0,0,0,214,0,208,0,92,0,232,0,166,0,179,0,18,0,229,0,185,0,56,0,0,0,138,0,142,0,31,0,161,0,19,0,137,0,40,0,169,0,192,0,134,0,76,0,101,0,0,0,21,0,0,0,0,0,158,0,101,0,69,0,167,0,74,0,0,0,0,0,61,0,75,0,105,0,255,0,0,0,35,0,111,0,0,0,0,0,177,0,223,0,25,0,59,0,187,0,69,0,154,0,46,0,0,0,33,0,52,0,51,0,86,0,181,0,157,0,0,0,124,0,150,0,176,0,233,0,95,0,179,0,74,0,251,0,34,0,30,0,121,0,252,0,58,0,170,0,0,0,110,0,189,0,249,0,0,0,63,0,225,0,110,0,0,0,175,0,71,0,180,0,225,0,222,0,183,0,156,0,116,0,209,0,207,0,0,0,107,0,38,0,248,0,233,0,249,0,0,0,255,0,5,0,204,0,109,0,0,0,188,0,0,0,0,0,71,0,0,0,190,0,221,0,104,0,66,0,0,0,97,0,128,0,0,0,79,0,13,0,0,0,144,0,136,0,14,0,195,0,28,0,164,0,0,0,169,0,180,0,76,0,222,0,70,0,4,0,108,0,75,0,31,0,0,0,129,0,67,0,156,0,104,0,96,0,0,0,0,0,18,0,0,0,32,0,15,0,39,0,200,0,47,0,0,0,0,0,87,0,120,0,208,0,68,0,120,0,10,0,139,0,112,0,136,0,0,0,182,0,13,0,144,0,0,0,143,0,112,0,132,0,152,0,41,0,175,0,108,0,0,0,0,0,122,0,252,0,92,0,191,0,4,0,241,0,24,0,112,0,58,0,229,0,101,0,254,0,113,0,219,0,36,0,183,0,87,0,90,0,29,0,128,0,14,0,0,0,0,0,0,0,132,0,18,0,4,0,218,0,207,0,100,0,204,0,0,0,0,0,21,0,191,0,0,0,0,0,14,0,203,0,254,0,0,0);
signal scenario_full  : scenario_type := (30,31,5,31,54,31,208,31,15,31,149,31,149,30,221,31,221,30,156,31,85,31,47,31,248,31,90,31,235,31,85,31,194,31,231,31,186,31,142,31,246,31,246,30,200,31,59,31,243,31,151,31,78,31,209,31,89,31,89,30,89,29,131,31,164,31,235,31,181,31,138,31,248,31,122,31,173,31,173,30,173,29,109,31,42,31,42,30,46,31,138,31,151,31,151,30,128,31,128,30,59,31,184,31,184,30,57,31,57,30,147,31,125,31,215,31,164,31,72,31,200,31,175,31,118,31,232,31,94,31,202,31,202,30,87,31,8,31,118,31,118,30,118,29,125,31,85,31,106,31,62,31,230,31,160,31,6,31,2,31,104,31,229,31,229,30,255,31,255,30,93,31,211,31,211,30,11,31,152,31,3,31,242,31,136,31,136,30,135,31,135,30,104,31,104,30,212,31,212,30,109,31,219,31,190,31,190,30,115,31,176,31,183,31,204,31,204,30,36,31,147,31,198,31,198,30,143,31,143,30,200,31,62,31,130,31,199,31,199,30,50,31,101,31,160,31,36,31,36,30,149,31,13,31,187,31,18,31,122,31,217,31,64,31,64,30,113,31,65,31,170,31,170,30,65,31,98,31,98,30,98,29,245,31,21,31,248,31,179,31,96,31,210,31,210,30,61,31,142,31,142,30,101,31,59,31,179,31,179,30,114,31,114,30,230,31,230,30,9,31,51,31,51,30,19,31,231,31,132,31,124,31,70,31,210,31,88,31,95,31,236,31,98,31,35,31,35,30,104,31,103,31,234,31,160,31,246,31,246,30,246,29,246,28,175,31,64,31,56,31,21,31,21,30,6,31,91,31,56,31,56,30,125,31,100,31,183,31,46,31,46,30,224,31,32,31,149,31,76,31,76,30,251,31,231,31,84,31,252,31,221,31,55,31,55,30,183,31,183,30,136,31,201,31,157,31,157,30,157,29,92,31,38,31,67,31,254,31,126,31,251,31,127,31,197,31,228,31,115,31,251,31,179,31,179,30,179,29,213,31,20,31,186,31,122,31,49,31,45,31,58,31,167,31,37,31,60,31,218,31,34,31,47,31,76,31,124,31,105,31,105,30,105,29,253,31,253,30,148,31,235,31,70,31,92,31,39,31,226,31,230,31,46,31,98,31,159,31,159,30,159,29,16,31,90,31,90,30,9,31,9,30,214,31,214,30,202,31,120,31,214,31,42,31,217,31,56,31,140,31,4,31,199,31,247,31,34,31,168,31,81,31,203,31,2,31,25,31,242,31,233,31,1,31,43,31,92,31,252,31,10,31,10,30,203,31,203,30,250,31,128,31,62,31,152,31,223,31,223,30,223,29,223,28,40,31,40,30,191,31,75,31,74,31,74,30,74,29,91,31,17,31,118,31,102,31,19,31,133,31,133,30,82,31,114,31,249,31,249,30,249,29,195,31,250,31,250,30,207,31,113,31,145,31,219,31,119,31,119,30,192,31,117,31,164,31,2,31,52,31,237,31,205,31,156,31,146,31,194,31,12,31,8,31,8,30,18,31,140,31,242,31,80,31,80,30,12,31,77,31,134,31,193,31,170,31,137,31,99,31,170,31,82,31,140,31,5,31,5,30,115,31,115,30,235,31,235,30,235,29,235,28,184,31,142,31,172,31,210,31,140,31,218,31,228,31,18,31,136,31,139,31,103,31,53,31,158,31,7,31,27,31,237,31,237,30,145,31,40,31,97,31,113,31,237,31,9,31,243,31,235,31,105,31,50,31,70,31,144,31,208,31,208,30,121,31,121,30,176,31,92,31,3,31,188,31,155,31,181,31,215,31,193,31,205,31,17,31,225,31,80,31,218,31,202,31,241,31,241,30,146,31,243,31,243,30,157,31,45,31,45,30,45,29,11,31,120,31,43,31,112,31,202,31,187,31,6,31,126,31,37,31,194,31,78,31,235,31,67,31,233,31,233,30,52,31,52,30,10,31,222,31,170,31,111,31,100,31,100,30,191,31,103,31,103,30,103,29,134,31,163,31,7,31,7,30,7,29,121,31,121,30,104,31,26,31,193,31,58,31,146,31,5,31,91,31,72,31,161,31,230,31,126,31,126,30,245,31,54,31,14,31,89,31,23,31,113,31,61,31,236,31,101,31,134,31,32,31,192,31,70,31,72,31,72,30,152,31,188,31,58,31,128,31,111,31,139,31,110,31,252,31,252,30,173,31,157,31,102,31,182,31,218,31,20,31,47,31,41,31,53,31,12,31,79,31,26,31,46,31,85,31,236,31,90,31,26,31,24,31,199,31,252,31,252,30,150,31,150,30,200,31,117,31,65,31,117,31,117,30,4,31,114,31,158,31,242,31,222,31,248,31,185,31,185,30,81,31,57,31,169,31,125,31,46,31,254,31,25,31,55,31,228,31,228,30,86,31,129,31,23,31,210,31,210,30,164,31,164,30,221,31,20,31,238,31,106,31,183,31,135,31,125,31,137,31,187,31,193,31,36,31,153,31,153,30,214,31,208,31,92,31,232,31,166,31,179,31,18,31,229,31,185,31,56,31,56,30,138,31,142,31,31,31,161,31,19,31,137,31,40,31,169,31,192,31,134,31,76,31,101,31,101,30,21,31,21,30,21,29,158,31,101,31,69,31,167,31,74,31,74,30,74,29,61,31,75,31,105,31,255,31,255,30,35,31,111,31,111,30,111,29,177,31,223,31,25,31,59,31,187,31,69,31,154,31,46,31,46,30,33,31,52,31,51,31,86,31,181,31,157,31,157,30,124,31,150,31,176,31,233,31,95,31,179,31,74,31,251,31,34,31,30,31,121,31,252,31,58,31,170,31,170,30,110,31,189,31,249,31,249,30,63,31,225,31,110,31,110,30,175,31,71,31,180,31,225,31,222,31,183,31,156,31,116,31,209,31,207,31,207,30,107,31,38,31,248,31,233,31,249,31,249,30,255,31,5,31,204,31,109,31,109,30,188,31,188,30,188,29,71,31,71,30,190,31,221,31,104,31,66,31,66,30,97,31,128,31,128,30,79,31,13,31,13,30,144,31,136,31,14,31,195,31,28,31,164,31,164,30,169,31,180,31,76,31,222,31,70,31,4,31,108,31,75,31,31,31,31,30,129,31,67,31,156,31,104,31,96,31,96,30,96,29,18,31,18,30,32,31,15,31,39,31,200,31,47,31,47,30,47,29,87,31,120,31,208,31,68,31,120,31,10,31,139,31,112,31,136,31,136,30,182,31,13,31,144,31,144,30,143,31,112,31,132,31,152,31,41,31,175,31,108,31,108,30,108,29,122,31,252,31,92,31,191,31,4,31,241,31,24,31,112,31,58,31,229,31,101,31,254,31,113,31,219,31,36,31,183,31,87,31,90,31,29,31,128,31,14,31,14,30,14,29,14,28,132,31,18,31,4,31,218,31,207,31,100,31,204,31,204,30,204,29,21,31,191,31,191,30,191,29,14,31,203,31,254,31,254,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
