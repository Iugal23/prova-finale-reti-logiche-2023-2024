-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 826;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (114,0,141,0,213,0,45,0,224,0,87,0,0,0,44,0,0,0,0,0,198,0,176,0,14,0,0,0,203,0,0,0,11,0,148,0,0,0,0,0,96,0,100,0,78,0,176,0,124,0,145,0,0,0,83,0,14,0,168,0,249,0,34,0,149,0,163,0,245,0,0,0,27,0,128,0,155,0,116,0,228,0,49,0,202,0,136,0,70,0,134,0,95,0,2,0,0,0,11,0,2,0,155,0,102,0,208,0,16,0,184,0,251,0,0,0,196,0,66,0,144,0,176,0,235,0,122,0,133,0,0,0,96,0,0,0,250,0,78,0,41,0,217,0,62,0,166,0,104,0,107,0,94,0,212,0,179,0,42,0,228,0,144,0,6,0,140,0,57,0,240,0,157,0,105,0,83,0,93,0,0,0,189,0,178,0,0,0,166,0,73,0,136,0,178,0,0,0,0,0,0,0,52,0,48,0,42,0,24,0,0,0,0,0,158,0,36,0,44,0,134,0,191,0,204,0,69,0,0,0,0,0,203,0,0,0,0,0,0,0,202,0,80,0,209,0,24,0,60,0,128,0,242,0,88,0,221,0,231,0,218,0,0,0,114,0,42,0,230,0,0,0,66,0,112,0,131,0,129,0,244,0,20,0,130,0,85,0,161,0,0,0,165,0,85,0,139,0,167,0,238,0,138,0,44,0,0,0,123,0,91,0,27,0,59,0,224,0,15,0,9,0,122,0,135,0,27,0,84,0,80,0,20,0,79,0,221,0,201,0,216,0,0,0,87,0,40,0,107,0,0,0,144,0,151,0,201,0,54,0,0,0,51,0,0,0,104,0,143,0,12,0,153,0,132,0,0,0,169,0,35,0,45,0,164,0,16,0,0,0,79,0,25,0,9,0,206,0,180,0,28,0,225,0,237,0,228,0,190,0,0,0,254,0,0,0,211,0,159,0,243,0,0,0,87,0,0,0,173,0,0,0,76,0,96,0,44,0,0,0,39,0,83,0,51,0,0,0,118,0,162,0,143,0,133,0,247,0,0,0,96,0,86,0,241,0,75,0,0,0,0,0,73,0,69,0,187,0,107,0,53,0,147,0,0,0,219,0,112,0,50,0,170,0,0,0,20,0,228,0,131,0,62,0,0,0,0,0,0,0,24,0,220,0,211,0,196,0,217,0,179,0,104,0,248,0,0,0,160,0,63,0,133,0,21,0,160,0,169,0,27,0,0,0,0,0,130,0,43,0,104,0,0,0,0,0,0,0,0,0,44,0,0,0,10,0,26,0,96,0,221,0,97,0,109,0,50,0,19,0,233,0,56,0,94,0,177,0,191,0,0,0,138,0,27,0,0,0,219,0,0,0,162,0,11,0,0,0,115,0,224,0,42,0,46,0,221,0,0,0,205,0,167,0,103,0,119,0,155,0,0,0,175,0,207,0,219,0,0,0,0,0,148,0,222,0,216,0,0,0,113,0,42,0,73,0,63,0,84,0,126,0,182,0,50,0,168,0,0,0,104,0,140,0,251,0,0,0,159,0,244,0,245,0,0,0,0,0,0,0,203,0,114,0,3,0,30,0,59,0,254,0,58,0,62,0,0,0,78,0,239,0,6,0,92,0,186,0,186,0,171,0,0,0,75,0,111,0,94,0,45,0,5,0,147,0,0,0,0,0,158,0,13,0,0,0,0,0,0,0,0,0,232,0,211,0,142,0,0,0,222,0,209,0,85,0,198,0,103,0,234,0,161,0,141,0,252,0,85,0,249,0,100,0,13,0,0,0,21,0,134,0,242,0,135,0,149,0,0,0,140,0,0,0,244,0,50,0,50,0,126,0,242,0,194,0,210,0,0,0,32,0,109,0,189,0,150,0,177,0,212,0,194,0,164,0,0,0,9,0,106,0,0,0,37,0,164,0,0,0,0,0,0,0,63,0,205,0,0,0,30,0,71,0,185,0,120,0,126,0,178,0,0,0,208,0,176,0,0,0,58,0,139,0,0,0,149,0,53,0,160,0,0,0,27,0,141,0,119,0,249,0,49,0,84,0,50,0,214,0,185,0,13,0,84,0,26,0,93,0,100,0,47,0,6,0,0,0,26,0,129,0,76,0,193,0,0,0,160,0,237,0,25,0,189,0,0,0,231,0,30,0,0,0,185,0,230,0,51,0,237,0,125,0,211,0,0,0,209,0,255,0,171,0,66,0,202,0,0,0,62,0,94,0,0,0,83,0,96,0,0,0,63,0,0,0,221,0,165,0,202,0,0,0,100,0,58,0,209,0,63,0,0,0,245,0,243,0,27,0,226,0,254,0,162,0,11,0,89,0,244,0,12,0,161,0,0,0,199,0,52,0,40,0,225,0,0,0,41,0,21,0,23,0,193,0,101,0,102,0,110,0,0,0,193,0,46,0,235,0,102,0,84,0,0,0,0,0,155,0,58,0,135,0,0,0,110,0,0,0,249,0,224,0,176,0,0,0,144,0,133,0,245,0,71,0,143,0,122,0,70,0,0,0,63,0,101,0,251,0,68,0,157,0,128,0,148,0,0,0,0,0,172,0,158,0,119,0,13,0,0,0,113,0,147,0,102,0,0,0,186,0,75,0,111,0,181,0,13,0,94,0,15,0,0,0,37,0,144,0,66,0,35,0,13,0,27,0,3,0,214,0,233,0,161,0,236,0,253,0,79,0,94,0,0,0,206,0,0,0,254,0,57,0,0,0,201,0,86,0,202,0,87,0,0,0,0,0,1,0,108,0,134,0,109,0,53,0,21,0,13,0,186,0,94,0,124,0,32,0,113,0,136,0,184,0,240,0,14,0,42,0,144,0,233,0,175,0,0,0,64,0,0,0,26,0,0,0,103,0,0,0,0,0,105,0,74,0,112,0,0,0,117,0,86,0,99,0,146,0,137,0,0,0,27,0,170,0,245,0,101,0,51,0,0,0,73,0,13,0,109,0,0,0,133,0,195,0,90,0,0,0,105,0,138,0,144,0,213,0,0,0,103,0,7,0,249,0,163,0,0,0,75,0,249,0,161,0,56,0,214,0,134,0,66,0,25,0,159,0,222,0,228,0,93,0,105,0,69,0,41,0,0,0,74,0,141,0,166,0,109,0,93,0,210,0,0,0,83,0,230,0,0,0,122,0,0,0,0,0,0,0,0,0,204,0,45,0,161,0,61,0,111,0,115,0,226,0,0,0,8,0,176,0,238,0,225,0,230,0,0,0,0,0,220,0,0,0,26,0,50,0,78,0,215,0,183,0,145,0,131,0,44,0,188,0,162,0,166,0,178,0,15,0,2,0,125,0,186,0,121,0,0,0,158,0,254,0,56,0,0,0,48,0,111,0,0,0,196,0,176,0,27,0,0,0,0,0,201,0,243,0,219,0,51,0,161,0,0,0,48,0,177,0,71,0,199,0,152,0,31,0,107,0,188,0,154,0,113,0,216,0,87,0,242,0,136,0,126,0,45,0,0,0,0,0,0,0,232,0,0,0,252,0,96,0,112,0,13,0,131,0,19,0,39,0,0,0,59,0,144,0,153,0,120,0,162,0,16,0,32,0,31,0,0,0,136,0,249,0,196,0,221,0,11,0,79,0,121,0,152,0,141,0,0,0,170,0,0,0,220,0,156,0,0,0,0,0,130,0,8,0,139,0,0,0,76,0,0,0,185,0,94,0,0,0,180,0,214,0,25,0,157,0,87,0,200,0,63,0,35,0);
signal scenario_full  : scenario_type := (114,31,141,31,213,31,45,31,224,31,87,31,87,30,44,31,44,30,44,29,198,31,176,31,14,31,14,30,203,31,203,30,11,31,148,31,148,30,148,29,96,31,100,31,78,31,176,31,124,31,145,31,145,30,83,31,14,31,168,31,249,31,34,31,149,31,163,31,245,31,245,30,27,31,128,31,155,31,116,31,228,31,49,31,202,31,136,31,70,31,134,31,95,31,2,31,2,30,11,31,2,31,155,31,102,31,208,31,16,31,184,31,251,31,251,30,196,31,66,31,144,31,176,31,235,31,122,31,133,31,133,30,96,31,96,30,250,31,78,31,41,31,217,31,62,31,166,31,104,31,107,31,94,31,212,31,179,31,42,31,228,31,144,31,6,31,140,31,57,31,240,31,157,31,105,31,83,31,93,31,93,30,189,31,178,31,178,30,166,31,73,31,136,31,178,31,178,30,178,29,178,28,52,31,48,31,42,31,24,31,24,30,24,29,158,31,36,31,44,31,134,31,191,31,204,31,69,31,69,30,69,29,203,31,203,30,203,29,203,28,202,31,80,31,209,31,24,31,60,31,128,31,242,31,88,31,221,31,231,31,218,31,218,30,114,31,42,31,230,31,230,30,66,31,112,31,131,31,129,31,244,31,20,31,130,31,85,31,161,31,161,30,165,31,85,31,139,31,167,31,238,31,138,31,44,31,44,30,123,31,91,31,27,31,59,31,224,31,15,31,9,31,122,31,135,31,27,31,84,31,80,31,20,31,79,31,221,31,201,31,216,31,216,30,87,31,40,31,107,31,107,30,144,31,151,31,201,31,54,31,54,30,51,31,51,30,104,31,143,31,12,31,153,31,132,31,132,30,169,31,35,31,45,31,164,31,16,31,16,30,79,31,25,31,9,31,206,31,180,31,28,31,225,31,237,31,228,31,190,31,190,30,254,31,254,30,211,31,159,31,243,31,243,30,87,31,87,30,173,31,173,30,76,31,96,31,44,31,44,30,39,31,83,31,51,31,51,30,118,31,162,31,143,31,133,31,247,31,247,30,96,31,86,31,241,31,75,31,75,30,75,29,73,31,69,31,187,31,107,31,53,31,147,31,147,30,219,31,112,31,50,31,170,31,170,30,20,31,228,31,131,31,62,31,62,30,62,29,62,28,24,31,220,31,211,31,196,31,217,31,179,31,104,31,248,31,248,30,160,31,63,31,133,31,21,31,160,31,169,31,27,31,27,30,27,29,130,31,43,31,104,31,104,30,104,29,104,28,104,27,44,31,44,30,10,31,26,31,96,31,221,31,97,31,109,31,50,31,19,31,233,31,56,31,94,31,177,31,191,31,191,30,138,31,27,31,27,30,219,31,219,30,162,31,11,31,11,30,115,31,224,31,42,31,46,31,221,31,221,30,205,31,167,31,103,31,119,31,155,31,155,30,175,31,207,31,219,31,219,30,219,29,148,31,222,31,216,31,216,30,113,31,42,31,73,31,63,31,84,31,126,31,182,31,50,31,168,31,168,30,104,31,140,31,251,31,251,30,159,31,244,31,245,31,245,30,245,29,245,28,203,31,114,31,3,31,30,31,59,31,254,31,58,31,62,31,62,30,78,31,239,31,6,31,92,31,186,31,186,31,171,31,171,30,75,31,111,31,94,31,45,31,5,31,147,31,147,30,147,29,158,31,13,31,13,30,13,29,13,28,13,27,232,31,211,31,142,31,142,30,222,31,209,31,85,31,198,31,103,31,234,31,161,31,141,31,252,31,85,31,249,31,100,31,13,31,13,30,21,31,134,31,242,31,135,31,149,31,149,30,140,31,140,30,244,31,50,31,50,31,126,31,242,31,194,31,210,31,210,30,32,31,109,31,189,31,150,31,177,31,212,31,194,31,164,31,164,30,9,31,106,31,106,30,37,31,164,31,164,30,164,29,164,28,63,31,205,31,205,30,30,31,71,31,185,31,120,31,126,31,178,31,178,30,208,31,176,31,176,30,58,31,139,31,139,30,149,31,53,31,160,31,160,30,27,31,141,31,119,31,249,31,49,31,84,31,50,31,214,31,185,31,13,31,84,31,26,31,93,31,100,31,47,31,6,31,6,30,26,31,129,31,76,31,193,31,193,30,160,31,237,31,25,31,189,31,189,30,231,31,30,31,30,30,185,31,230,31,51,31,237,31,125,31,211,31,211,30,209,31,255,31,171,31,66,31,202,31,202,30,62,31,94,31,94,30,83,31,96,31,96,30,63,31,63,30,221,31,165,31,202,31,202,30,100,31,58,31,209,31,63,31,63,30,245,31,243,31,27,31,226,31,254,31,162,31,11,31,89,31,244,31,12,31,161,31,161,30,199,31,52,31,40,31,225,31,225,30,41,31,21,31,23,31,193,31,101,31,102,31,110,31,110,30,193,31,46,31,235,31,102,31,84,31,84,30,84,29,155,31,58,31,135,31,135,30,110,31,110,30,249,31,224,31,176,31,176,30,144,31,133,31,245,31,71,31,143,31,122,31,70,31,70,30,63,31,101,31,251,31,68,31,157,31,128,31,148,31,148,30,148,29,172,31,158,31,119,31,13,31,13,30,113,31,147,31,102,31,102,30,186,31,75,31,111,31,181,31,13,31,94,31,15,31,15,30,37,31,144,31,66,31,35,31,13,31,27,31,3,31,214,31,233,31,161,31,236,31,253,31,79,31,94,31,94,30,206,31,206,30,254,31,57,31,57,30,201,31,86,31,202,31,87,31,87,30,87,29,1,31,108,31,134,31,109,31,53,31,21,31,13,31,186,31,94,31,124,31,32,31,113,31,136,31,184,31,240,31,14,31,42,31,144,31,233,31,175,31,175,30,64,31,64,30,26,31,26,30,103,31,103,30,103,29,105,31,74,31,112,31,112,30,117,31,86,31,99,31,146,31,137,31,137,30,27,31,170,31,245,31,101,31,51,31,51,30,73,31,13,31,109,31,109,30,133,31,195,31,90,31,90,30,105,31,138,31,144,31,213,31,213,30,103,31,7,31,249,31,163,31,163,30,75,31,249,31,161,31,56,31,214,31,134,31,66,31,25,31,159,31,222,31,228,31,93,31,105,31,69,31,41,31,41,30,74,31,141,31,166,31,109,31,93,31,210,31,210,30,83,31,230,31,230,30,122,31,122,30,122,29,122,28,122,27,204,31,45,31,161,31,61,31,111,31,115,31,226,31,226,30,8,31,176,31,238,31,225,31,230,31,230,30,230,29,220,31,220,30,26,31,50,31,78,31,215,31,183,31,145,31,131,31,44,31,188,31,162,31,166,31,178,31,15,31,2,31,125,31,186,31,121,31,121,30,158,31,254,31,56,31,56,30,48,31,111,31,111,30,196,31,176,31,27,31,27,30,27,29,201,31,243,31,219,31,51,31,161,31,161,30,48,31,177,31,71,31,199,31,152,31,31,31,107,31,188,31,154,31,113,31,216,31,87,31,242,31,136,31,126,31,45,31,45,30,45,29,45,28,232,31,232,30,252,31,96,31,112,31,13,31,131,31,19,31,39,31,39,30,59,31,144,31,153,31,120,31,162,31,16,31,32,31,31,31,31,30,136,31,249,31,196,31,221,31,11,31,79,31,121,31,152,31,141,31,141,30,170,31,170,30,220,31,156,31,156,30,156,29,130,31,8,31,139,31,139,30,76,31,76,30,185,31,94,31,94,30,180,31,214,31,25,31,157,31,87,31,200,31,63,31,35,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
