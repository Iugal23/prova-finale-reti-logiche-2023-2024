-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 448;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (234,0,207,0,78,0,85,0,241,0,0,0,231,0,0,0,230,0,166,0,147,0,121,0,177,0,70,0,19,0,62,0,208,0,251,0,95,0,195,0,93,0,0,0,33,0,88,0,196,0,125,0,112,0,107,0,254,0,0,0,0,0,236,0,106,0,97,0,0,0,130,0,109,0,242,0,151,0,119,0,250,0,0,0,98,0,145,0,103,0,0,0,59,0,134,0,220,0,27,0,136,0,114,0,0,0,164,0,204,0,194,0,218,0,233,0,235,0,227,0,140,0,92,0,229,0,30,0,194,0,22,0,242,0,185,0,123,0,233,0,48,0,91,0,148,0,149,0,149,0,203,0,216,0,217,0,104,0,43,0,135,0,127,0,0,0,0,0,198,0,118,0,233,0,235,0,22,0,0,0,77,0,219,0,236,0,55,0,22,0,141,0,38,0,0,0,0,0,137,0,16,0,0,0,86,0,0,0,11,0,0,0,18,0,157,0,94,0,244,0,10,0,179,0,0,0,104,0,228,0,135,0,49,0,0,0,239,0,252,0,106,0,158,0,232,0,201,0,189,0,7,0,0,0,149,0,127,0,106,0,58,0,221,0,45,0,244,0,0,0,0,0,185,0,170,0,0,0,183,0,0,0,0,0,110,0,173,0,165,0,0,0,113,0,87,0,38,0,184,0,0,0,0,0,140,0,156,0,1,0,0,0,231,0,199,0,16,0,225,0,134,0,95,0,195,0,0,0,244,0,146,0,132,0,247,0,218,0,0,0,31,0,10,0,181,0,214,0,0,0,0,0,201,0,67,0,249,0,14,0,157,0,151,0,131,0,90,0,0,0,144,0,35,0,151,0,133,0,20,0,97,0,0,0,156,0,0,0,172,0,67,0,0,0,189,0,168,0,164,0,205,0,249,0,26,0,0,0,20,0,53,0,121,0,210,0,72,0,172,0,208,0,26,0,0,0,0,0,0,0,48,0,39,0,171,0,0,0,166,0,224,0,0,0,151,0,143,0,240,0,136,0,250,0,200,0,0,0,141,0,149,0,12,0,106,0,0,0,166,0,238,0,192,0,220,0,220,0,10,0,68,0,108,0,202,0,194,0,108,0,0,0,127,0,1,0,70,0,150,0,0,0,117,0,142,0,138,0,0,0,243,0,0,0,22,0,26,0,11,0,0,0,0,0,124,0,144,0,0,0,183,0,88,0,141,0,238,0,185,0,68,0,0,0,3,0,85,0,0,0,188,0,0,0,223,0,0,0,100,0,246,0,3,0,0,0,0,0,194,0,0,0,98,0,44,0,106,0,0,0,105,0,31,0,94,0,247,0,255,0,123,0,0,0,0,0,195,0,106,0,0,0,0,0,62,0,159,0,164,0,40,0,1,0,145,0,0,0,20,0,254,0,85,0,241,0,182,0,0,0,205,0,213,0,7,0,10,0,195,0,248,0,168,0,231,0,0,0,0,0,184,0,237,0,52,0,167,0,248,0,130,0,211,0,131,0,120,0,41,0,191,0,102,0,215,0,190,0,12,0,251,0,247,0,0,0,159,0,230,0,29,0,234,0,241,0,110,0,0,0,66,0,0,0,236,0,247,0,124,0,201,0,135,0,1,0,22,0,117,0,221,0,0,0,94,0,177,0,124,0,18,0,63,0,119,0,34,0,59,0,0,0,0,0,156,0,40,0,110,0,114,0,184,0,157,0,21,0,0,0,0,0,84,0,101,0,202,0,54,0,137,0,251,0,12,0,207,0,3,0,152,0,146,0,51,0,104,0,128,0,73,0,0,0,249,0,186,0,229,0,0,0,52,0,0,0,218,0,125,0,119,0,210,0,0,0,0,0,225,0,23,0,149,0,0,0,0,0,72,0,0,0,0,0,6,0,26,0,80,0,107,0,0,0,244,0,0,0,0,0,154,0,97,0,5,0,0,0,96,0,0,0,33,0,29,0,254,0,144,0,60,0,1,0,154,0,39,0,17,0,0,0,207,0,86,0,0,0,78,0,126,0,244,0,132,0);
signal scenario_full  : scenario_type := (234,31,207,31,78,31,85,31,241,31,241,30,231,31,231,30,230,31,166,31,147,31,121,31,177,31,70,31,19,31,62,31,208,31,251,31,95,31,195,31,93,31,93,30,33,31,88,31,196,31,125,31,112,31,107,31,254,31,254,30,254,29,236,31,106,31,97,31,97,30,130,31,109,31,242,31,151,31,119,31,250,31,250,30,98,31,145,31,103,31,103,30,59,31,134,31,220,31,27,31,136,31,114,31,114,30,164,31,204,31,194,31,218,31,233,31,235,31,227,31,140,31,92,31,229,31,30,31,194,31,22,31,242,31,185,31,123,31,233,31,48,31,91,31,148,31,149,31,149,31,203,31,216,31,217,31,104,31,43,31,135,31,127,31,127,30,127,29,198,31,118,31,233,31,235,31,22,31,22,30,77,31,219,31,236,31,55,31,22,31,141,31,38,31,38,30,38,29,137,31,16,31,16,30,86,31,86,30,11,31,11,30,18,31,157,31,94,31,244,31,10,31,179,31,179,30,104,31,228,31,135,31,49,31,49,30,239,31,252,31,106,31,158,31,232,31,201,31,189,31,7,31,7,30,149,31,127,31,106,31,58,31,221,31,45,31,244,31,244,30,244,29,185,31,170,31,170,30,183,31,183,30,183,29,110,31,173,31,165,31,165,30,113,31,87,31,38,31,184,31,184,30,184,29,140,31,156,31,1,31,1,30,231,31,199,31,16,31,225,31,134,31,95,31,195,31,195,30,244,31,146,31,132,31,247,31,218,31,218,30,31,31,10,31,181,31,214,31,214,30,214,29,201,31,67,31,249,31,14,31,157,31,151,31,131,31,90,31,90,30,144,31,35,31,151,31,133,31,20,31,97,31,97,30,156,31,156,30,172,31,67,31,67,30,189,31,168,31,164,31,205,31,249,31,26,31,26,30,20,31,53,31,121,31,210,31,72,31,172,31,208,31,26,31,26,30,26,29,26,28,48,31,39,31,171,31,171,30,166,31,224,31,224,30,151,31,143,31,240,31,136,31,250,31,200,31,200,30,141,31,149,31,12,31,106,31,106,30,166,31,238,31,192,31,220,31,220,31,10,31,68,31,108,31,202,31,194,31,108,31,108,30,127,31,1,31,70,31,150,31,150,30,117,31,142,31,138,31,138,30,243,31,243,30,22,31,26,31,11,31,11,30,11,29,124,31,144,31,144,30,183,31,88,31,141,31,238,31,185,31,68,31,68,30,3,31,85,31,85,30,188,31,188,30,223,31,223,30,100,31,246,31,3,31,3,30,3,29,194,31,194,30,98,31,44,31,106,31,106,30,105,31,31,31,94,31,247,31,255,31,123,31,123,30,123,29,195,31,106,31,106,30,106,29,62,31,159,31,164,31,40,31,1,31,145,31,145,30,20,31,254,31,85,31,241,31,182,31,182,30,205,31,213,31,7,31,10,31,195,31,248,31,168,31,231,31,231,30,231,29,184,31,237,31,52,31,167,31,248,31,130,31,211,31,131,31,120,31,41,31,191,31,102,31,215,31,190,31,12,31,251,31,247,31,247,30,159,31,230,31,29,31,234,31,241,31,110,31,110,30,66,31,66,30,236,31,247,31,124,31,201,31,135,31,1,31,22,31,117,31,221,31,221,30,94,31,177,31,124,31,18,31,63,31,119,31,34,31,59,31,59,30,59,29,156,31,40,31,110,31,114,31,184,31,157,31,21,31,21,30,21,29,84,31,101,31,202,31,54,31,137,31,251,31,12,31,207,31,3,31,152,31,146,31,51,31,104,31,128,31,73,31,73,30,249,31,186,31,229,31,229,30,52,31,52,30,218,31,125,31,119,31,210,31,210,30,210,29,225,31,23,31,149,31,149,30,149,29,72,31,72,30,72,29,6,31,26,31,80,31,107,31,107,30,244,31,244,30,244,29,154,31,97,31,5,31,5,30,96,31,96,30,33,31,29,31,254,31,144,31,60,31,1,31,154,31,39,31,17,31,17,30,207,31,86,31,86,30,78,31,126,31,244,31,132,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
