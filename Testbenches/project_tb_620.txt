-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 718;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (49,0,29,0,122,0,59,0,225,0,188,0,32,0,117,0,153,0,0,0,94,0,56,0,0,0,22,0,0,0,117,0,50,0,215,0,0,0,0,0,6,0,237,0,255,0,224,0,27,0,213,0,0,0,0,0,1,0,79,0,0,0,22,0,195,0,125,0,3,0,194,0,185,0,205,0,0,0,173,0,177,0,20,0,200,0,57,0,107,0,4,0,247,0,72,0,112,0,206,0,222,0,39,0,0,0,119,0,7,0,68,0,73,0,79,0,23,0,66,0,155,0,143,0,53,0,5,0,119,0,93,0,176,0,117,0,160,0,125,0,0,0,117,0,102,0,250,0,10,0,184,0,51,0,106,0,128,0,34,0,0,0,0,0,130,0,156,0,218,0,73,0,169,0,254,0,0,0,21,0,128,0,51,0,95,0,133,0,0,0,191,0,0,0,99,0,59,0,237,0,0,0,167,0,205,0,75,0,204,0,155,0,181,0,76,0,14,0,237,0,20,0,102,0,67,0,0,0,172,0,17,0,218,0,163,0,30,0,13,0,13,0,132,0,168,0,2,0,0,0,25,0,104,0,76,0,0,0,86,0,6,0,188,0,41,0,0,0,215,0,140,0,38,0,0,0,136,0,239,0,156,0,27,0,54,0,45,0,251,0,243,0,42,0,0,0,114,0,0,0,34,0,0,0,136,0,0,0,158,0,153,0,0,0,55,0,235,0,179,0,103,0,0,0,88,0,208,0,0,0,0,0,140,0,197,0,222,0,0,0,0,0,245,0,123,0,0,0,177,0,114,0,0,0,189,0,234,0,30,0,0,0,109,0,220,0,95,0,121,0,0,0,0,0,212,0,133,0,236,0,0,0,119,0,0,0,0,0,133,0,78,0,0,0,0,0,84,0,207,0,99,0,74,0,0,0,13,0,225,0,15,0,0,0,0,0,103,0,197,0,217,0,177,0,191,0,117,0,180,0,0,0,0,0,98,0,208,0,177,0,82,0,35,0,162,0,108,0,120,0,38,0,126,0,0,0,233,0,19,0,153,0,0,0,180,0,192,0,243,0,0,0,207,0,0,0,172,0,130,0,0,0,89,0,0,0,181,0,0,0,107,0,182,0,0,0,201,0,166,0,252,0,0,0,52,0,225,0,0,0,0,0,94,0,6,0,24,0,202,0,118,0,0,0,0,0,142,0,142,0,0,0,127,0,47,0,225,0,222,0,166,0,0,0,255,0,53,0,160,0,147,0,24,0,84,0,187,0,61,0,208,0,224,0,0,0,124,0,43,0,150,0,198,0,129,0,55,0,154,0,161,0,176,0,18,0,112,0,117,0,20,0,36,0,27,0,0,0,185,0,18,0,191,0,156,0,245,0,8,0,83,0,253,0,77,0,249,0,102,0,76,0,195,0,71,0,177,0,0,0,0,0,3,0,114,0,69,0,124,0,250,0,0,0,80,0,130,0,202,0,227,0,239,0,235,0,0,0,226,0,161,0,0,0,100,0,0,0,169,0,99,0,202,0,237,0,195,0,185,0,52,0,0,0,8,0,145,0,214,0,112,0,67,0,39,0,45,0,201,0,0,0,0,0,234,0,136,0,50,0,25,0,0,0,5,0,0,0,119,0,29,0,242,0,0,0,100,0,210,0,128,0,0,0,0,0,63,0,36,0,0,0,184,0,235,0,58,0,9,0,128,0,62,0,178,0,51,0,198,0,0,0,23,0,22,0,134,0,183,0,0,0,245,0,168,0,162,0,243,0,38,0,80,0,243,0,223,0,4,0,0,0,161,0,105,0,0,0,0,0,139,0,0,0,75,0,132,0,28,0,206,0,120,0,0,0,187,0,242,0,190,0,202,0,6,0,200,0,8,0,210,0,249,0,70,0,0,0,99,0,224,0,171,0,28,0,47,0,147,0,0,0,0,0,109,0,77,0,208,0,0,0,0,0,146,0,70,0,33,0,117,0,41,0,0,0,246,0,53,0,114,0,0,0,12,0,93,0,25,0,93,0,238,0,11,0,152,0,209,0,242,0,252,0,123,0,28,0,0,0,245,0,118,0,0,0,0,0,0,0,86,0,161,0,0,0,0,0,167,0,32,0,246,0,174,0,176,0,33,0,222,0,117,0,167,0,87,0,250,0,239,0,0,0,37,0,10,0,170,0,179,0,228,0,27,0,140,0,67,0,49,0,131,0,59,0,179,0,0,0,103,0,0,0,247,0,109,0,0,0,33,0,0,0,66,0,150,0,0,0,100,0,129,0,0,0,0,0,46,0,223,0,0,0,71,0,234,0,175,0,111,0,16,0,132,0,0,0,200,0,81,0,134,0,99,0,177,0,57,0,130,0,215,0,31,0,0,0,243,0,91,0,214,0,61,0,46,0,168,0,95,0,4,0,173,0,38,0,246,0,147,0,204,0,148,0,15,0,35,0,52,0,192,0,21,0,185,0,181,0,114,0,0,0,141,0,185,0,22,0,108,0,92,0,135,0,0,0,9,0,147,0,240,0,0,0,233,0,64,0,116,0,186,0,148,0,102,0,245,0,0,0,108,0,0,0,30,0,0,0,0,0,143,0,116,0,84,0,183,0,178,0,185,0,230,0,12,0,233,0,211,0,1,0,0,0,0,0,0,0,85,0,138,0,75,0,6,0,0,0,24,0,17,0,3,0,19,0,21,0,103,0,78,0,217,0,113,0,99,0,67,0,58,0,129,0,243,0,198,0,246,0,45,0,125,0,101,0,6,0,234,0,6,0,0,0,162,0,8,0,0,0,0,0,102,0,0,0,40,0,254,0,54,0,68,0,0,0,66,0,169,0,0,0,0,0,216,0,90,0,188,0,16,0,238,0,7,0,107,0,148,0,88,0,0,0,0,0,225,0,243,0,4,0,205,0,0,0,108,0,21,0,118,0,208,0,129,0,69,0,0,0,62,0,252,0,0,0,27,0,182,0,0,0,119,0,46,0,72,0,172,0,229,0,53,0,61,0,119,0,0,0,116,0,230,0,117,0,80,0,95,0,0,0,0,0,187,0,164,0,255,0,6,0,143,0,88,0,130,0,0,0,113,0,63,0,42,0,178,0,214,0,133,0,184,0,235,0,0,0,99,0,91,0,118,0,138,0,0,0,0,0,90,0,0,0,120,0,49,0,139,0,0,0,157,0,108,0,210,0,0,0,231,0,88,0,0,0,50,0,0,0,70,0,19,0,211,0,205,0,169,0,0,0,184,0);
signal scenario_full  : scenario_type := (49,31,29,31,122,31,59,31,225,31,188,31,32,31,117,31,153,31,153,30,94,31,56,31,56,30,22,31,22,30,117,31,50,31,215,31,215,30,215,29,6,31,237,31,255,31,224,31,27,31,213,31,213,30,213,29,1,31,79,31,79,30,22,31,195,31,125,31,3,31,194,31,185,31,205,31,205,30,173,31,177,31,20,31,200,31,57,31,107,31,4,31,247,31,72,31,112,31,206,31,222,31,39,31,39,30,119,31,7,31,68,31,73,31,79,31,23,31,66,31,155,31,143,31,53,31,5,31,119,31,93,31,176,31,117,31,160,31,125,31,125,30,117,31,102,31,250,31,10,31,184,31,51,31,106,31,128,31,34,31,34,30,34,29,130,31,156,31,218,31,73,31,169,31,254,31,254,30,21,31,128,31,51,31,95,31,133,31,133,30,191,31,191,30,99,31,59,31,237,31,237,30,167,31,205,31,75,31,204,31,155,31,181,31,76,31,14,31,237,31,20,31,102,31,67,31,67,30,172,31,17,31,218,31,163,31,30,31,13,31,13,31,132,31,168,31,2,31,2,30,25,31,104,31,76,31,76,30,86,31,6,31,188,31,41,31,41,30,215,31,140,31,38,31,38,30,136,31,239,31,156,31,27,31,54,31,45,31,251,31,243,31,42,31,42,30,114,31,114,30,34,31,34,30,136,31,136,30,158,31,153,31,153,30,55,31,235,31,179,31,103,31,103,30,88,31,208,31,208,30,208,29,140,31,197,31,222,31,222,30,222,29,245,31,123,31,123,30,177,31,114,31,114,30,189,31,234,31,30,31,30,30,109,31,220,31,95,31,121,31,121,30,121,29,212,31,133,31,236,31,236,30,119,31,119,30,119,29,133,31,78,31,78,30,78,29,84,31,207,31,99,31,74,31,74,30,13,31,225,31,15,31,15,30,15,29,103,31,197,31,217,31,177,31,191,31,117,31,180,31,180,30,180,29,98,31,208,31,177,31,82,31,35,31,162,31,108,31,120,31,38,31,126,31,126,30,233,31,19,31,153,31,153,30,180,31,192,31,243,31,243,30,207,31,207,30,172,31,130,31,130,30,89,31,89,30,181,31,181,30,107,31,182,31,182,30,201,31,166,31,252,31,252,30,52,31,225,31,225,30,225,29,94,31,6,31,24,31,202,31,118,31,118,30,118,29,142,31,142,31,142,30,127,31,47,31,225,31,222,31,166,31,166,30,255,31,53,31,160,31,147,31,24,31,84,31,187,31,61,31,208,31,224,31,224,30,124,31,43,31,150,31,198,31,129,31,55,31,154,31,161,31,176,31,18,31,112,31,117,31,20,31,36,31,27,31,27,30,185,31,18,31,191,31,156,31,245,31,8,31,83,31,253,31,77,31,249,31,102,31,76,31,195,31,71,31,177,31,177,30,177,29,3,31,114,31,69,31,124,31,250,31,250,30,80,31,130,31,202,31,227,31,239,31,235,31,235,30,226,31,161,31,161,30,100,31,100,30,169,31,99,31,202,31,237,31,195,31,185,31,52,31,52,30,8,31,145,31,214,31,112,31,67,31,39,31,45,31,201,31,201,30,201,29,234,31,136,31,50,31,25,31,25,30,5,31,5,30,119,31,29,31,242,31,242,30,100,31,210,31,128,31,128,30,128,29,63,31,36,31,36,30,184,31,235,31,58,31,9,31,128,31,62,31,178,31,51,31,198,31,198,30,23,31,22,31,134,31,183,31,183,30,245,31,168,31,162,31,243,31,38,31,80,31,243,31,223,31,4,31,4,30,161,31,105,31,105,30,105,29,139,31,139,30,75,31,132,31,28,31,206,31,120,31,120,30,187,31,242,31,190,31,202,31,6,31,200,31,8,31,210,31,249,31,70,31,70,30,99,31,224,31,171,31,28,31,47,31,147,31,147,30,147,29,109,31,77,31,208,31,208,30,208,29,146,31,70,31,33,31,117,31,41,31,41,30,246,31,53,31,114,31,114,30,12,31,93,31,25,31,93,31,238,31,11,31,152,31,209,31,242,31,252,31,123,31,28,31,28,30,245,31,118,31,118,30,118,29,118,28,86,31,161,31,161,30,161,29,167,31,32,31,246,31,174,31,176,31,33,31,222,31,117,31,167,31,87,31,250,31,239,31,239,30,37,31,10,31,170,31,179,31,228,31,27,31,140,31,67,31,49,31,131,31,59,31,179,31,179,30,103,31,103,30,247,31,109,31,109,30,33,31,33,30,66,31,150,31,150,30,100,31,129,31,129,30,129,29,46,31,223,31,223,30,71,31,234,31,175,31,111,31,16,31,132,31,132,30,200,31,81,31,134,31,99,31,177,31,57,31,130,31,215,31,31,31,31,30,243,31,91,31,214,31,61,31,46,31,168,31,95,31,4,31,173,31,38,31,246,31,147,31,204,31,148,31,15,31,35,31,52,31,192,31,21,31,185,31,181,31,114,31,114,30,141,31,185,31,22,31,108,31,92,31,135,31,135,30,9,31,147,31,240,31,240,30,233,31,64,31,116,31,186,31,148,31,102,31,245,31,245,30,108,31,108,30,30,31,30,30,30,29,143,31,116,31,84,31,183,31,178,31,185,31,230,31,12,31,233,31,211,31,1,31,1,30,1,29,1,28,85,31,138,31,75,31,6,31,6,30,24,31,17,31,3,31,19,31,21,31,103,31,78,31,217,31,113,31,99,31,67,31,58,31,129,31,243,31,198,31,246,31,45,31,125,31,101,31,6,31,234,31,6,31,6,30,162,31,8,31,8,30,8,29,102,31,102,30,40,31,254,31,54,31,68,31,68,30,66,31,169,31,169,30,169,29,216,31,90,31,188,31,16,31,238,31,7,31,107,31,148,31,88,31,88,30,88,29,225,31,243,31,4,31,205,31,205,30,108,31,21,31,118,31,208,31,129,31,69,31,69,30,62,31,252,31,252,30,27,31,182,31,182,30,119,31,46,31,72,31,172,31,229,31,53,31,61,31,119,31,119,30,116,31,230,31,117,31,80,31,95,31,95,30,95,29,187,31,164,31,255,31,6,31,143,31,88,31,130,31,130,30,113,31,63,31,42,31,178,31,214,31,133,31,184,31,235,31,235,30,99,31,91,31,118,31,138,31,138,30,138,29,90,31,90,30,120,31,49,31,139,31,139,30,157,31,108,31,210,31,210,30,231,31,88,31,88,30,50,31,50,30,70,31,19,31,211,31,205,31,169,31,169,30,184,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
