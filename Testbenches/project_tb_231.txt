-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 657;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,208,0,217,0,74,0,80,0,242,0,41,0,182,0,104,0,174,0,40,0,0,0,176,0,0,0,123,0,58,0,0,0,57,0,234,0,205,0,165,0,208,0,0,0,80,0,200,0,176,0,242,0,19,0,221,0,150,0,0,0,2,0,153,0,85,0,86,0,161,0,250,0,100,0,235,0,246,0,236,0,120,0,0,0,207,0,250,0,176,0,116,0,200,0,29,0,99,0,12,0,69,0,241,0,244,0,197,0,0,0,170,0,215,0,81,0,156,0,0,0,0,0,243,0,0,0,167,0,204,0,219,0,5,0,158,0,0,0,180,0,15,0,0,0,225,0,42,0,0,0,106,0,0,0,251,0,154,0,0,0,129,0,228,0,230,0,0,0,112,0,171,0,0,0,82,0,90,0,0,0,0,0,0,0,202,0,61,0,73,0,185,0,53,0,94,0,173,0,0,0,0,0,69,0,215,0,44,0,0,0,74,0,120,0,194,0,24,0,240,0,57,0,0,0,67,0,241,0,114,0,158,0,150,0,240,0,43,0,0,0,17,0,31,0,0,0,50,0,120,0,185,0,242,0,0,0,209,0,147,0,40,0,211,0,249,0,71,0,223,0,37,0,20,0,0,0,56,0,0,0,64,0,78,0,18,0,230,0,100,0,115,0,0,0,0,0,72,0,242,0,201,0,254,0,235,0,0,0,246,0,120,0,81,0,35,0,103,0,0,0,92,0,227,0,0,0,162,0,182,0,104,0,152,0,167,0,21,0,0,0,163,0,179,0,173,0,232,0,0,0,149,0,0,0,91,0,31,0,29,0,215,0,143,0,138,0,124,0,109,0,198,0,226,0,121,0,65,0,0,0,0,0,0,0,234,0,43,0,41,0,0,0,127,0,67,0,0,0,21,0,72,0,0,0,76,0,226,0,0,0,230,0,100,0,247,0,182,0,119,0,33,0,118,0,174,0,24,0,141,0,0,0,203,0,31,0,132,0,20,0,111,0,219,0,35,0,88,0,249,0,0,0,82,0,209,0,71,0,0,0,252,0,0,0,56,0,230,0,107,0,171,0,147,0,0,0,0,0,52,0,210,0,199,0,0,0,80,0,200,0,173,0,171,0,29,0,0,0,106,0,184,0,159,0,206,0,0,0,48,0,14,0,140,0,194,0,57,0,156,0,99,0,0,0,181,0,154,0,13,0,241,0,0,0,71,0,50,0,42,0,0,0,79,0,191,0,0,0,236,0,108,0,30,0,225,0,136,0,0,0,0,0,42,0,13,0,23,0,135,0,31,0,71,0,213,0,115,0,78,0,0,0,119,0,96,0,77,0,106,0,229,0,227,0,116,0,158,0,55,0,0,0,25,0,85,0,184,0,0,0,167,0,131,0,48,0,213,0,152,0,113,0,118,0,101,0,215,0,119,0,82,0,105,0,0,0,149,0,109,0,242,0,24,0,54,0,115,0,0,0,214,0,211,0,0,0,116,0,118,0,240,0,219,0,179,0,0,0,232,0,1,0,248,0,177,0,102,0,5,0,0,0,178,0,191,0,25,0,238,0,0,0,28,0,88,0,107,0,0,0,1,0,229,0,106,0,0,0,59,0,0,0,185,0,204,0,81,0,0,0,230,0,104,0,137,0,55,0,33,0,0,0,174,0,52,0,0,0,232,0,0,0,0,0,153,0,142,0,237,0,155,0,231,0,137,0,0,0,171,0,166,0,124,0,119,0,206,0,13,0,206,0,84,0,207,0,25,0,165,0,23,0,194,0,240,0,5,0,0,0,7,0,154,0,250,0,0,0,0,0,176,0,104,0,0,0,63,0,144,0,16,0,119,0,114,0,0,0,124,0,102,0,1,0,6,0,0,0,105,0,190,0,0,0,0,0,0,0,0,0,146,0,216,0,114,0,63,0,29,0,35,0,176,0,150,0,40,0,212,0,1,0,33,0,21,0,126,0,203,0,78,0,87,0,184,0,166,0,0,0,246,0,176,0,192,0,167,0,251,0,0,0,20,0,96,0,0,0,78,0,172,0,104,0,0,0,42,0,0,0,241,0,158,0,70,0,191,0,5,0,130,0,28,0,0,0,54,0,162,0,81,0,0,0,33,0,25,0,0,0,115,0,98,0,114,0,24,0,113,0,197,0,241,0,99,0,19,0,0,0,106,0,129,0,176,0,0,0,202,0,3,0,222,0,226,0,95,0,31,0,92,0,0,0,129,0,137,0,17,0,227,0,152,0,187,0,172,0,0,0,217,0,122,0,46,0,46,0,248,0,174,0,185,0,72,0,93,0,103,0,156,0,0,0,110,0,143,0,213,0,0,0,32,0,87,0,0,0,214,0,216,0,140,0,0,0,210,0,175,0,150,0,27,0,73,0,0,0,44,0,70,0,52,0,17,0,14,0,0,0,99,0,0,0,191,0,200,0,142,0,160,0,237,0,72,0,169,0,87,0,0,0,245,0,235,0,0,0,0,0,48,0,86,0,216,0,129,0,127,0,187,0,247,0,72,0,100,0,152,0,156,0,245,0,0,0,14,0,0,0,61,0,238,0,205,0,0,0,167,0,168,0,171,0,35,0,174,0,140,0,199,0,115,0,142,0,224,0,146,0,28,0,187,0,13,0,194,0,0,0,8,0,194,0,207,0,0,0,74,0,152,0,181,0,229,0,15,0,98,0,205,0,7,0,123,0,90,0,133,0,77,0,34,0,0,0,0,0,149,0,93,0,249,0,0,0,0,0,218,0,109,0,79,0,176,0,170,0,136,0,0,0,155,0,177,0,237,0,0,0,0,0,71,0,0,0,163,0,83,0,13,0,153,0,230,0,26,0,91,0,115,0,0,0,49,0,133,0,230,0,147,0,38,0,45,0,186,0,0,0,104,0,55,0,161,0,0,0,161,0,120,0,193,0,63,0,132,0,71,0,241,0,244,0,194,0,108,0,0,0,52,0);
signal scenario_full  : scenario_type := (0,0,208,31,217,31,74,31,80,31,242,31,41,31,182,31,104,31,174,31,40,31,40,30,176,31,176,30,123,31,58,31,58,30,57,31,234,31,205,31,165,31,208,31,208,30,80,31,200,31,176,31,242,31,19,31,221,31,150,31,150,30,2,31,153,31,85,31,86,31,161,31,250,31,100,31,235,31,246,31,236,31,120,31,120,30,207,31,250,31,176,31,116,31,200,31,29,31,99,31,12,31,69,31,241,31,244,31,197,31,197,30,170,31,215,31,81,31,156,31,156,30,156,29,243,31,243,30,167,31,204,31,219,31,5,31,158,31,158,30,180,31,15,31,15,30,225,31,42,31,42,30,106,31,106,30,251,31,154,31,154,30,129,31,228,31,230,31,230,30,112,31,171,31,171,30,82,31,90,31,90,30,90,29,90,28,202,31,61,31,73,31,185,31,53,31,94,31,173,31,173,30,173,29,69,31,215,31,44,31,44,30,74,31,120,31,194,31,24,31,240,31,57,31,57,30,67,31,241,31,114,31,158,31,150,31,240,31,43,31,43,30,17,31,31,31,31,30,50,31,120,31,185,31,242,31,242,30,209,31,147,31,40,31,211,31,249,31,71,31,223,31,37,31,20,31,20,30,56,31,56,30,64,31,78,31,18,31,230,31,100,31,115,31,115,30,115,29,72,31,242,31,201,31,254,31,235,31,235,30,246,31,120,31,81,31,35,31,103,31,103,30,92,31,227,31,227,30,162,31,182,31,104,31,152,31,167,31,21,31,21,30,163,31,179,31,173,31,232,31,232,30,149,31,149,30,91,31,31,31,29,31,215,31,143,31,138,31,124,31,109,31,198,31,226,31,121,31,65,31,65,30,65,29,65,28,234,31,43,31,41,31,41,30,127,31,67,31,67,30,21,31,72,31,72,30,76,31,226,31,226,30,230,31,100,31,247,31,182,31,119,31,33,31,118,31,174,31,24,31,141,31,141,30,203,31,31,31,132,31,20,31,111,31,219,31,35,31,88,31,249,31,249,30,82,31,209,31,71,31,71,30,252,31,252,30,56,31,230,31,107,31,171,31,147,31,147,30,147,29,52,31,210,31,199,31,199,30,80,31,200,31,173,31,171,31,29,31,29,30,106,31,184,31,159,31,206,31,206,30,48,31,14,31,140,31,194,31,57,31,156,31,99,31,99,30,181,31,154,31,13,31,241,31,241,30,71,31,50,31,42,31,42,30,79,31,191,31,191,30,236,31,108,31,30,31,225,31,136,31,136,30,136,29,42,31,13,31,23,31,135,31,31,31,71,31,213,31,115,31,78,31,78,30,119,31,96,31,77,31,106,31,229,31,227,31,116,31,158,31,55,31,55,30,25,31,85,31,184,31,184,30,167,31,131,31,48,31,213,31,152,31,113,31,118,31,101,31,215,31,119,31,82,31,105,31,105,30,149,31,109,31,242,31,24,31,54,31,115,31,115,30,214,31,211,31,211,30,116,31,118,31,240,31,219,31,179,31,179,30,232,31,1,31,248,31,177,31,102,31,5,31,5,30,178,31,191,31,25,31,238,31,238,30,28,31,88,31,107,31,107,30,1,31,229,31,106,31,106,30,59,31,59,30,185,31,204,31,81,31,81,30,230,31,104,31,137,31,55,31,33,31,33,30,174,31,52,31,52,30,232,31,232,30,232,29,153,31,142,31,237,31,155,31,231,31,137,31,137,30,171,31,166,31,124,31,119,31,206,31,13,31,206,31,84,31,207,31,25,31,165,31,23,31,194,31,240,31,5,31,5,30,7,31,154,31,250,31,250,30,250,29,176,31,104,31,104,30,63,31,144,31,16,31,119,31,114,31,114,30,124,31,102,31,1,31,6,31,6,30,105,31,190,31,190,30,190,29,190,28,190,27,146,31,216,31,114,31,63,31,29,31,35,31,176,31,150,31,40,31,212,31,1,31,33,31,21,31,126,31,203,31,78,31,87,31,184,31,166,31,166,30,246,31,176,31,192,31,167,31,251,31,251,30,20,31,96,31,96,30,78,31,172,31,104,31,104,30,42,31,42,30,241,31,158,31,70,31,191,31,5,31,130,31,28,31,28,30,54,31,162,31,81,31,81,30,33,31,25,31,25,30,115,31,98,31,114,31,24,31,113,31,197,31,241,31,99,31,19,31,19,30,106,31,129,31,176,31,176,30,202,31,3,31,222,31,226,31,95,31,31,31,92,31,92,30,129,31,137,31,17,31,227,31,152,31,187,31,172,31,172,30,217,31,122,31,46,31,46,31,248,31,174,31,185,31,72,31,93,31,103,31,156,31,156,30,110,31,143,31,213,31,213,30,32,31,87,31,87,30,214,31,216,31,140,31,140,30,210,31,175,31,150,31,27,31,73,31,73,30,44,31,70,31,52,31,17,31,14,31,14,30,99,31,99,30,191,31,200,31,142,31,160,31,237,31,72,31,169,31,87,31,87,30,245,31,235,31,235,30,235,29,48,31,86,31,216,31,129,31,127,31,187,31,247,31,72,31,100,31,152,31,156,31,245,31,245,30,14,31,14,30,61,31,238,31,205,31,205,30,167,31,168,31,171,31,35,31,174,31,140,31,199,31,115,31,142,31,224,31,146,31,28,31,187,31,13,31,194,31,194,30,8,31,194,31,207,31,207,30,74,31,152,31,181,31,229,31,15,31,98,31,205,31,7,31,123,31,90,31,133,31,77,31,34,31,34,30,34,29,149,31,93,31,249,31,249,30,249,29,218,31,109,31,79,31,176,31,170,31,136,31,136,30,155,31,177,31,237,31,237,30,237,29,71,31,71,30,163,31,83,31,13,31,153,31,230,31,26,31,91,31,115,31,115,30,49,31,133,31,230,31,147,31,38,31,45,31,186,31,186,30,104,31,55,31,161,31,161,30,161,31,120,31,193,31,63,31,132,31,71,31,241,31,244,31,194,31,108,31,108,30,52,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
