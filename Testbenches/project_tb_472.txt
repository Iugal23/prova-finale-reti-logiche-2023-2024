-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 384;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (183,0,0,0,39,0,126,0,52,0,73,0,65,0,0,0,223,0,219,0,0,0,157,0,244,0,229,0,44,0,0,0,221,0,157,0,214,0,91,0,51,0,242,0,145,0,40,0,119,0,234,0,161,0,90,0,83,0,0,0,14,0,0,0,9,0,6,0,235,0,80,0,112,0,190,0,0,0,42,0,0,0,160,0,0,0,201,0,190,0,218,0,76,0,255,0,37,0,119,0,122,0,24,0,106,0,50,0,27,0,162,0,98,0,188,0,0,0,99,0,112,0,164,0,59,0,144,0,0,0,33,0,193,0,112,0,62,0,228,0,196,0,0,0,48,0,216,0,214,0,54,0,187,0,246,0,18,0,66,0,190,0,133,0,158,0,0,0,215,0,0,0,110,0,0,0,39,0,137,0,195,0,57,0,245,0,142,0,132,0,136,0,172,0,43,0,114,0,65,0,178,0,146,0,0,0,103,0,0,0,235,0,72,0,0,0,9,0,144,0,64,0,63,0,86,0,41,0,0,0,191,0,0,0,158,0,0,0,247,0,0,0,146,0,0,0,102,0,0,0,120,0,32,0,0,0,59,0,172,0,17,0,167,0,203,0,121,0,207,0,161,0,78,0,31,0,67,0,244,0,0,0,114,0,188,0,80,0,239,0,141,0,51,0,217,0,0,0,133,0,56,0,92,0,1,0,38,0,184,0,0,0,19,0,0,0,20,0,0,0,0,0,254,0,104,0,25,0,0,0,127,0,98,0,0,0,98,0,198,0,185,0,176,0,178,0,123,0,12,0,0,0,156,0,0,0,245,0,142,0,145,0,130,0,164,0,46,0,18,0,89,0,74,0,255,0,0,0,0,0,0,0,111,0,0,0,107,0,78,0,159,0,110,0,222,0,175,0,233,0,95,0,71,0,141,0,0,0,143,0,37,0,26,0,15,0,182,0,246,0,150,0,182,0,234,0,153,0,75,0,234,0,110,0,67,0,0,0,29,0,14,0,238,0,164,0,0,0,0,0,159,0,69,0,0,0,78,0,72,0,96,0,174,0,94,0,221,0,62,0,183,0,130,0,29,0,244,0,168,0,0,0,6,0,31,0,75,0,190,0,51,0,0,0,209,0,142,0,240,0,83,0,227,0,237,0,200,0,118,0,86,0,178,0,235,0,180,0,0,0,126,0,234,0,62,0,207,0,220,0,0,0,0,0,0,0,175,0,229,0,0,0,141,0,104,0,36,0,116,0,110,0,137,0,108,0,0,0,131,0,0,0,253,0,87,0,230,0,0,0,145,0,59,0,0,0,7,0,100,0,0,0,207,0,174,0,154,0,0,0,141,0,130,0,90,0,124,0,32,0,49,0,237,0,120,0,22,0,53,0,225,0,0,0,237,0,228,0,17,0,18,0,0,0,136,0,0,0,0,0,0,0,128,0,230,0,255,0,166,0,228,0,0,0,118,0,151,0,4,0,201,0,195,0,225,0,211,0,0,0,62,0,179,0,15,0,126,0,168,0,164,0,192,0,64,0,241,0,109,0,83,0,0,0,28,0,172,0,0,0,176,0,148,0,215,0,38,0,112,0,149,0,170,0,0,0,60,0,205,0,188,0,113,0,130,0,33,0,1,0,253,0,192,0,182,0,149,0,0,0,216,0,179,0,84,0,207,0,102,0,191,0,152,0,76,0,102,0,145,0,0,0,243,0,0,0,84,0,0,0,0,0,156,0,196,0,160,0);
signal scenario_full  : scenario_type := (183,31,183,30,39,31,126,31,52,31,73,31,65,31,65,30,223,31,219,31,219,30,157,31,244,31,229,31,44,31,44,30,221,31,157,31,214,31,91,31,51,31,242,31,145,31,40,31,119,31,234,31,161,31,90,31,83,31,83,30,14,31,14,30,9,31,6,31,235,31,80,31,112,31,190,31,190,30,42,31,42,30,160,31,160,30,201,31,190,31,218,31,76,31,255,31,37,31,119,31,122,31,24,31,106,31,50,31,27,31,162,31,98,31,188,31,188,30,99,31,112,31,164,31,59,31,144,31,144,30,33,31,193,31,112,31,62,31,228,31,196,31,196,30,48,31,216,31,214,31,54,31,187,31,246,31,18,31,66,31,190,31,133,31,158,31,158,30,215,31,215,30,110,31,110,30,39,31,137,31,195,31,57,31,245,31,142,31,132,31,136,31,172,31,43,31,114,31,65,31,178,31,146,31,146,30,103,31,103,30,235,31,72,31,72,30,9,31,144,31,64,31,63,31,86,31,41,31,41,30,191,31,191,30,158,31,158,30,247,31,247,30,146,31,146,30,102,31,102,30,120,31,32,31,32,30,59,31,172,31,17,31,167,31,203,31,121,31,207,31,161,31,78,31,31,31,67,31,244,31,244,30,114,31,188,31,80,31,239,31,141,31,51,31,217,31,217,30,133,31,56,31,92,31,1,31,38,31,184,31,184,30,19,31,19,30,20,31,20,30,20,29,254,31,104,31,25,31,25,30,127,31,98,31,98,30,98,31,198,31,185,31,176,31,178,31,123,31,12,31,12,30,156,31,156,30,245,31,142,31,145,31,130,31,164,31,46,31,18,31,89,31,74,31,255,31,255,30,255,29,255,28,111,31,111,30,107,31,78,31,159,31,110,31,222,31,175,31,233,31,95,31,71,31,141,31,141,30,143,31,37,31,26,31,15,31,182,31,246,31,150,31,182,31,234,31,153,31,75,31,234,31,110,31,67,31,67,30,29,31,14,31,238,31,164,31,164,30,164,29,159,31,69,31,69,30,78,31,72,31,96,31,174,31,94,31,221,31,62,31,183,31,130,31,29,31,244,31,168,31,168,30,6,31,31,31,75,31,190,31,51,31,51,30,209,31,142,31,240,31,83,31,227,31,237,31,200,31,118,31,86,31,178,31,235,31,180,31,180,30,126,31,234,31,62,31,207,31,220,31,220,30,220,29,220,28,175,31,229,31,229,30,141,31,104,31,36,31,116,31,110,31,137,31,108,31,108,30,131,31,131,30,253,31,87,31,230,31,230,30,145,31,59,31,59,30,7,31,100,31,100,30,207,31,174,31,154,31,154,30,141,31,130,31,90,31,124,31,32,31,49,31,237,31,120,31,22,31,53,31,225,31,225,30,237,31,228,31,17,31,18,31,18,30,136,31,136,30,136,29,136,28,128,31,230,31,255,31,166,31,228,31,228,30,118,31,151,31,4,31,201,31,195,31,225,31,211,31,211,30,62,31,179,31,15,31,126,31,168,31,164,31,192,31,64,31,241,31,109,31,83,31,83,30,28,31,172,31,172,30,176,31,148,31,215,31,38,31,112,31,149,31,170,31,170,30,60,31,205,31,188,31,113,31,130,31,33,31,1,31,253,31,192,31,182,31,149,31,149,30,216,31,179,31,84,31,207,31,102,31,191,31,152,31,76,31,102,31,145,31,145,30,243,31,243,30,84,31,84,30,84,29,156,31,196,31,160,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
