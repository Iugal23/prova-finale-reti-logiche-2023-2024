-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 259;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (166,0,139,0,151,0,181,0,0,0,0,0,251,0,210,0,120,0,54,0,82,0,90,0,195,0,211,0,0,0,23,0,17,0,201,0,27,0,28,0,0,0,170,0,32,0,76,0,136,0,146,0,195,0,2,0,185,0,0,0,48,0,57,0,157,0,103,0,243,0,167,0,17,0,199,0,0,0,0,0,231,0,200,0,246,0,214,0,206,0,29,0,95,0,69,0,0,0,0,0,203,0,0,0,0,0,48,0,33,0,0,0,61,0,76,0,105,0,77,0,69,0,15,0,26,0,97,0,0,0,0,0,23,0,151,0,0,0,71,0,2,0,50,0,149,0,205,0,153,0,233,0,0,0,79,0,6,0,153,0,129,0,74,0,150,0,174,0,31,0,0,0,20,0,0,0,0,0,249,0,157,0,0,0,218,0,38,0,111,0,0,0,132,0,17,0,0,0,231,0,239,0,12,0,74,0,113,0,15,0,124,0,11,0,83,0,0,0,0,0,128,0,0,0,0,0,4,0,81,0,5,0,0,0,236,0,133,0,43,0,238,0,158,0,0,0,152,0,236,0,0,0,142,0,240,0,0,0,250,0,238,0,83,0,55,0,172,0,246,0,110,0,45,0,82,0,147,0,0,0,20,0,231,0,109,0,251,0,137,0,115,0,0,0,0,0,76,0,205,0,1,0,123,0,0,0,52,0,216,0,104,0,193,0,228,0,0,0,0,0,6,0,199,0,64,0,2,0,205,0,193,0,28,0,0,0,82,0,248,0,161,0,226,0,5,0,205,0,210,0,92,0,167,0,96,0,48,0,0,0,0,0,137,0,120,0,118,0,85,0,19,0,163,0,39,0,174,0,53,0,0,0,0,0,131,0,0,0,243,0,40,0,109,0,0,0,71,0,187,0,207,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,78,0,201,0,168,0,0,0,13,0,100,0,151,0,57,0,62,0,162,0,44,0,167,0,232,0,32,0,131,0,148,0,149,0,52,0,230,0,124,0,87,0,51,0,42,0,108,0,248,0,155,0,146,0,64,0,20,0,24,0,24,0,166,0,253,0,108,0,187,0,142,0,92,0,37,0,0,0,0,0,0,0,166,0,139,0,21,0,31,0,57,0,157,0,248,0,76,0,0,0,196,0);
signal scenario_full  : scenario_type := (166,31,139,31,151,31,181,31,181,30,181,29,251,31,210,31,120,31,54,31,82,31,90,31,195,31,211,31,211,30,23,31,17,31,201,31,27,31,28,31,28,30,170,31,32,31,76,31,136,31,146,31,195,31,2,31,185,31,185,30,48,31,57,31,157,31,103,31,243,31,167,31,17,31,199,31,199,30,199,29,231,31,200,31,246,31,214,31,206,31,29,31,95,31,69,31,69,30,69,29,203,31,203,30,203,29,48,31,33,31,33,30,61,31,76,31,105,31,77,31,69,31,15,31,26,31,97,31,97,30,97,29,23,31,151,31,151,30,71,31,2,31,50,31,149,31,205,31,153,31,233,31,233,30,79,31,6,31,153,31,129,31,74,31,150,31,174,31,31,31,31,30,20,31,20,30,20,29,249,31,157,31,157,30,218,31,38,31,111,31,111,30,132,31,17,31,17,30,231,31,239,31,12,31,74,31,113,31,15,31,124,31,11,31,83,31,83,30,83,29,128,31,128,30,128,29,4,31,81,31,5,31,5,30,236,31,133,31,43,31,238,31,158,31,158,30,152,31,236,31,236,30,142,31,240,31,240,30,250,31,238,31,83,31,55,31,172,31,246,31,110,31,45,31,82,31,147,31,147,30,20,31,231,31,109,31,251,31,137,31,115,31,115,30,115,29,76,31,205,31,1,31,123,31,123,30,52,31,216,31,104,31,193,31,228,31,228,30,228,29,6,31,199,31,64,31,2,31,205,31,193,31,28,31,28,30,82,31,248,31,161,31,226,31,5,31,205,31,210,31,92,31,167,31,96,31,48,31,48,30,48,29,137,31,120,31,118,31,85,31,19,31,163,31,39,31,174,31,53,31,53,30,53,29,131,31,131,30,243,31,40,31,109,31,109,30,71,31,187,31,207,31,207,30,101,31,101,30,101,29,101,28,101,27,101,26,78,31,201,31,168,31,168,30,13,31,100,31,151,31,57,31,62,31,162,31,44,31,167,31,232,31,32,31,131,31,148,31,149,31,52,31,230,31,124,31,87,31,51,31,42,31,108,31,248,31,155,31,146,31,64,31,20,31,24,31,24,31,166,31,253,31,108,31,187,31,142,31,92,31,37,31,37,30,37,29,37,28,166,31,139,31,21,31,31,31,57,31,157,31,248,31,76,31,76,30,196,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
