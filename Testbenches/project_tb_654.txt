-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 468;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (86,0,62,0,123,0,196,0,34,0,148,0,0,0,186,0,68,0,6,0,0,0,10,0,29,0,0,0,80,0,35,0,0,0,0,0,52,0,101,0,187,0,192,0,195,0,151,0,125,0,154,0,164,0,17,0,232,0,103,0,188,0,21,0,0,0,205,0,68,0,57,0,166,0,96,0,65,0,222,0,24,0,203,0,56,0,0,0,211,0,40,0,34,0,254,0,0,0,75,0,179,0,108,0,0,0,90,0,216,0,117,0,215,0,200,0,238,0,0,0,66,0,228,0,0,0,20,0,167,0,43,0,0,0,75,0,0,0,25,0,0,0,129,0,5,0,166,0,112,0,0,0,195,0,164,0,0,0,83,0,230,0,162,0,0,0,53,0,63,0,68,0,254,0,155,0,0,0,28,0,0,0,138,0,0,0,15,0,245,0,78,0,95,0,0,0,204,0,199,0,86,0,32,0,0,0,124,0,192,0,194,0,228,0,0,0,43,0,0,0,16,0,0,0,79,0,13,0,7,0,0,0,84,0,96,0,26,0,58,0,0,0,139,0,157,0,231,0,136,0,0,0,128,0,32,0,71,0,77,0,44,0,255,0,232,0,62,0,105,0,132,0,90,0,224,0,109,0,151,0,32,0,241,0,167,0,0,0,48,0,250,0,4,0,182,0,202,0,98,0,5,0,69,0,192,0,0,0,0,0,93,0,0,0,0,0,59,0,132,0,50,0,135,0,215,0,168,0,0,0,21,0,193,0,107,0,0,0,29,0,49,0,29,0,240,0,108,0,232,0,70,0,207,0,0,0,49,0,176,0,208,0,56,0,34,0,173,0,0,0,0,0,0,0,249,0,10,0,98,0,0,0,0,0,231,0,118,0,240,0,194,0,0,0,155,0,233,0,53,0,0,0,147,0,187,0,28,0,0,0,0,0,126,0,79,0,82,0,0,0,184,0,124,0,48,0,2,0,76,0,0,0,0,0,0,0,2,0,40,0,250,0,25,0,207,0,84,0,219,0,11,0,0,0,69,0,0,0,0,0,33,0,248,0,241,0,0,0,14,0,0,0,72,0,0,0,142,0,139,0,0,0,41,0,6,0,176,0,0,0,186,0,74,0,223,0,19,0,104,0,149,0,178,0,229,0,140,0,250,0,65,0,223,0,84,0,7,0,76,0,184,0,0,0,134,0,0,0,248,0,0,0,234,0,20,0,203,0,0,0,183,0,3,0,79,0,127,0,161,0,43,0,33,0,0,0,115,0,21,0,0,0,237,0,214,0,0,0,22,0,48,0,95,0,216,0,79,0,209,0,0,0,46,0,0,0,220,0,137,0,84,0,0,0,1,0,0,0,216,0,255,0,224,0,142,0,123,0,101,0,138,0,0,0,223,0,230,0,0,0,0,0,92,0,67,0,185,0,14,0,189,0,44,0,22,0,88,0,225,0,37,0,164,0,193,0,22,0,137,0,0,0,187,0,0,0,69,0,130,0,48,0,57,0,0,0,0,0,140,0,173,0,195,0,169,0,184,0,143,0,223,0,241,0,145,0,0,0,177,0,0,0,0,0,0,0,0,0,0,0,121,0,238,0,233,0,0,0,0,0,92,0,203,0,248,0,254,0,20,0,0,0,176,0,19,0,32,0,0,0,230,0,202,0,46,0,158,0,0,0,18,0,101,0,117,0,94,0,247,0,0,0,195,0,150,0,0,0,4,0,109,0,220,0,46,0,0,0,10,0,37,0,31,0,90,0,0,0,109,0,159,0,13,0,117,0,71,0,152,0,231,0,129,0,77,0,0,0,116,0,29,0,51,0,246,0,117,0,79,0,0,0,107,0,140,0,212,0,183,0,162,0,103,0,0,0,144,0,75,0,32,0,166,0,161,0,96,0,183,0,56,0,18,0,0,0,254,0,216,0,41,0,117,0,32,0,0,0,158,0,24,0,0,0,39,0,243,0,100,0,131,0,223,0,0,0,16,0,39,0,34,0,195,0,68,0,41,0,113,0,172,0,38,0,170,0,241,0,161,0,125,0,183,0,129,0,9,0,52,0,17,0,93,0,10,0,147,0,58,0,221,0,0,0,244,0,159,0,54,0,0,0,0,0,101,0);
signal scenario_full  : scenario_type := (86,31,62,31,123,31,196,31,34,31,148,31,148,30,186,31,68,31,6,31,6,30,10,31,29,31,29,30,80,31,35,31,35,30,35,29,52,31,101,31,187,31,192,31,195,31,151,31,125,31,154,31,164,31,17,31,232,31,103,31,188,31,21,31,21,30,205,31,68,31,57,31,166,31,96,31,65,31,222,31,24,31,203,31,56,31,56,30,211,31,40,31,34,31,254,31,254,30,75,31,179,31,108,31,108,30,90,31,216,31,117,31,215,31,200,31,238,31,238,30,66,31,228,31,228,30,20,31,167,31,43,31,43,30,75,31,75,30,25,31,25,30,129,31,5,31,166,31,112,31,112,30,195,31,164,31,164,30,83,31,230,31,162,31,162,30,53,31,63,31,68,31,254,31,155,31,155,30,28,31,28,30,138,31,138,30,15,31,245,31,78,31,95,31,95,30,204,31,199,31,86,31,32,31,32,30,124,31,192,31,194,31,228,31,228,30,43,31,43,30,16,31,16,30,79,31,13,31,7,31,7,30,84,31,96,31,26,31,58,31,58,30,139,31,157,31,231,31,136,31,136,30,128,31,32,31,71,31,77,31,44,31,255,31,232,31,62,31,105,31,132,31,90,31,224,31,109,31,151,31,32,31,241,31,167,31,167,30,48,31,250,31,4,31,182,31,202,31,98,31,5,31,69,31,192,31,192,30,192,29,93,31,93,30,93,29,59,31,132,31,50,31,135,31,215,31,168,31,168,30,21,31,193,31,107,31,107,30,29,31,49,31,29,31,240,31,108,31,232,31,70,31,207,31,207,30,49,31,176,31,208,31,56,31,34,31,173,31,173,30,173,29,173,28,249,31,10,31,98,31,98,30,98,29,231,31,118,31,240,31,194,31,194,30,155,31,233,31,53,31,53,30,147,31,187,31,28,31,28,30,28,29,126,31,79,31,82,31,82,30,184,31,124,31,48,31,2,31,76,31,76,30,76,29,76,28,2,31,40,31,250,31,25,31,207,31,84,31,219,31,11,31,11,30,69,31,69,30,69,29,33,31,248,31,241,31,241,30,14,31,14,30,72,31,72,30,142,31,139,31,139,30,41,31,6,31,176,31,176,30,186,31,74,31,223,31,19,31,104,31,149,31,178,31,229,31,140,31,250,31,65,31,223,31,84,31,7,31,76,31,184,31,184,30,134,31,134,30,248,31,248,30,234,31,20,31,203,31,203,30,183,31,3,31,79,31,127,31,161,31,43,31,33,31,33,30,115,31,21,31,21,30,237,31,214,31,214,30,22,31,48,31,95,31,216,31,79,31,209,31,209,30,46,31,46,30,220,31,137,31,84,31,84,30,1,31,1,30,216,31,255,31,224,31,142,31,123,31,101,31,138,31,138,30,223,31,230,31,230,30,230,29,92,31,67,31,185,31,14,31,189,31,44,31,22,31,88,31,225,31,37,31,164,31,193,31,22,31,137,31,137,30,187,31,187,30,69,31,130,31,48,31,57,31,57,30,57,29,140,31,173,31,195,31,169,31,184,31,143,31,223,31,241,31,145,31,145,30,177,31,177,30,177,29,177,28,177,27,177,26,121,31,238,31,233,31,233,30,233,29,92,31,203,31,248,31,254,31,20,31,20,30,176,31,19,31,32,31,32,30,230,31,202,31,46,31,158,31,158,30,18,31,101,31,117,31,94,31,247,31,247,30,195,31,150,31,150,30,4,31,109,31,220,31,46,31,46,30,10,31,37,31,31,31,90,31,90,30,109,31,159,31,13,31,117,31,71,31,152,31,231,31,129,31,77,31,77,30,116,31,29,31,51,31,246,31,117,31,79,31,79,30,107,31,140,31,212,31,183,31,162,31,103,31,103,30,144,31,75,31,32,31,166,31,161,31,96,31,183,31,56,31,18,31,18,30,254,31,216,31,41,31,117,31,32,31,32,30,158,31,24,31,24,30,39,31,243,31,100,31,131,31,223,31,223,30,16,31,39,31,34,31,195,31,68,31,41,31,113,31,172,31,38,31,170,31,241,31,161,31,125,31,183,31,129,31,9,31,52,31,17,31,93,31,10,31,147,31,58,31,221,31,221,30,244,31,159,31,54,31,54,30,54,29,101,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
