-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 828;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (153,0,209,0,165,0,108,0,58,0,33,0,0,0,35,0,55,0,0,0,155,0,78,0,108,0,77,0,234,0,239,0,98,0,0,0,0,0,132,0,135,0,39,0,126,0,0,0,170,0,0,0,253,0,36,0,51,0,210,0,0,0,115,0,85,0,0,0,86,0,71,0,0,0,57,0,69,0,0,0,142,0,86,0,85,0,36,0,217,0,0,0,82,0,115,0,159,0,230,0,131,0,189,0,217,0,0,0,19,0,249,0,31,0,165,0,170,0,219,0,0,0,106,0,159,0,36,0,76,0,224,0,109,0,243,0,151,0,182,0,255,0,174,0,125,0,0,0,0,0,20,0,255,0,233,0,150,0,110,0,54,0,54,0,205,0,0,0,0,0,234,0,145,0,184,0,62,0,166,0,188,0,131,0,169,0,47,0,0,0,158,0,43,0,231,0,0,0,59,0,69,0,11,0,115,0,79,0,184,0,94,0,167,0,11,0,187,0,0,0,102,0,249,0,0,0,36,0,0,0,45,0,41,0,213,0,178,0,59,0,0,0,51,0,105,0,6,0,0,0,172,0,0,0,15,0,0,0,183,0,0,0,197,0,67,0,202,0,209,0,173,0,15,0,0,0,161,0,217,0,114,0,219,0,85,0,0,0,196,0,218,0,53,0,203,0,67,0,83,0,53,0,59,0,153,0,0,0,141,0,14,0,3,0,43,0,74,0,249,0,76,0,106,0,77,0,14,0,174,0,156,0,92,0,55,0,234,0,44,0,51,0,31,0,44,0,245,0,141,0,14,0,0,0,253,0,118,0,168,0,23,0,232,0,94,0,92,0,213,0,0,0,119,0,5,0,203,0,15,0,190,0,108,0,0,0,203,0,223,0,28,0,56,0,163,0,18,0,69,0,102,0,179,0,74,0,85,0,132,0,155,0,39,0,62,0,119,0,0,0,0,0,177,0,248,0,125,0,95,0,111,0,0,0,0,0,102,0,224,0,39,0,200,0,172,0,24,0,0,0,230,0,130,0,176,0,0,0,38,0,215,0,105,0,90,0,164,0,228,0,232,0,0,0,0,0,0,0,26,0,89,0,85,0,147,0,199,0,51,0,0,0,86,0,7,0,98,0,21,0,15,0,143,0,74,0,0,0,11,0,197,0,72,0,40,0,30,0,140,0,53,0,155,0,101,0,70,0,104,0,26,0,231,0,126,0,234,0,227,0,101,0,49,0,135,0,0,0,144,0,0,0,172,0,99,0,0,0,8,0,113,0,63,0,0,0,250,0,234,0,1,0,0,0,145,0,152,0,149,0,186,0,0,0,164,0,0,0,0,0,0,0,0,0,0,0,84,0,254,0,0,0,0,0,213,0,132,0,46,0,0,0,0,0,224,0,0,0,59,0,157,0,149,0,125,0,121,0,56,0,171,0,0,0,141,0,115,0,34,0,186,0,0,0,205,0,82,0,59,0,0,0,0,0,0,0,118,0,32,0,72,0,108,0,0,0,57,0,153,0,166,0,171,0,123,0,230,0,241,0,200,0,141,0,0,0,195,0,86,0,105,0,141,0,206,0,96,0,17,0,53,0,80,0,1,0,10,0,146,0,48,0,24,0,221,0,35,0,1,0,100,0,0,0,87,0,182,0,117,0,105,0,209,0,233,0,0,0,43,0,2,0,7,0,67,0,54,0,161,0,35,0,56,0,176,0,0,0,152,0,93,0,112,0,35,0,99,0,160,0,0,0,46,0,208,0,0,0,2,0,0,0,40,0,0,0,0,0,130,0,81,0,128,0,164,0,8,0,187,0,173,0,0,0,170,0,0,0,8,0,149,0,0,0,153,0,243,0,227,0,49,0,4,0,236,0,216,0,93,0,20,0,24,0,176,0,184,0,203,0,124,0,115,0,84,0,159,0,132,0,0,0,0,0,186,0,49,0,106,0,41,0,253,0,93,0,105,0,201,0,124,0,0,0,0,0,250,0,56,0,184,0,6,0,95,0,154,0,95,0,166,0,202,0,158,0,0,0,240,0,232,0,132,0,143,0,61,0,143,0,165,0,0,0,76,0,20,0,37,0,189,0,172,0,50,0,127,0,60,0,192,0,249,0,0,0,53,0,28,0,2,0,239,0,0,0,0,0,186,0,105,0,169,0,108,0,80,0,72,0,198,0,73,0,223,0,218,0,115,0,152,0,218,0,194,0,135,0,0,0,46,0,137,0,198,0,128,0,242,0,164,0,0,0,6,0,196,0,0,0,188,0,230,0,14,0,0,0,54,0,0,0,201,0,239,0,142,0,0,0,195,0,103,0,62,0,78,0,138,0,0,0,154,0,89,0,0,0,73,0,241,0,185,0,0,0,0,0,191,0,82,0,204,0,130,0,116,0,242,0,170,0,226,0,9,0,88,0,77,0,85,0,189,0,32,0,46,0,169,0,46,0,82,0,0,0,13,0,123,0,157,0,136,0,21,0,172,0,25,0,209,0,82,0,0,0,0,0,1,0,232,0,237,0,156,0,0,0,23,0,143,0,149,0,235,0,131,0,5,0,225,0,0,0,132,0,213,0,120,0,109,0,120,0,158,0,109,0,241,0,42,0,82,0,247,0,251,0,254,0,171,0,200,0,134,0,25,0,159,0,0,0,0,0,21,0,251,0,253,0,177,0,187,0,169,0,113,0,7,0,97,0,241,0,171,0,109,0,134,0,136,0,251,0,81,0,225,0,24,0,0,0,248,0,146,0,207,0,50,0,144,0,183,0,151,0,0,0,71,0,140,0,122,0,0,0,0,0,93,0,46,0,98,0,52,0,249,0,174,0,30,0,242,0,145,0,200,0,59,0,251,0,235,0,187,0,159,0,141,0,0,0,250,0,104,0,106,0,63,0,186,0,141,0,130,0,131,0,0,0,204,0,38,0,151,0,104,0,182,0,169,0,21,0,105,0,81,0,186,0,76,0,22,0,0,0,255,0,92,0,42,0,0,0,71,0,0,0,167,0,155,0,61,0,138,0,91,0,209,0,200,0,33,0,185,0,247,0,211,0,60,0,94,0,74,0,0,0,110,0,0,0,178,0,213,0,0,0,167,0,248,0,0,0,218,0,0,0,116,0,211,0,191,0,178,0,92,0,241,0,201,0,131,0,218,0,62,0,184,0,174,0,218,0,154,0,0,0,0,0,0,0,205,0,0,0,18,0,171,0,33,0,192,0,0,0,38,0,159,0,195,0,130,0,239,0,236,0,212,0,34,0,0,0,0,0,106,0,201,0,98,0,206,0,233,0,207,0,145,0,118,0,83,0,79,0,242,0,0,0,24,0,125,0,225,0,161,0,53,0,9,0,112,0,193,0,236,0,108,0,0,0,1,0,159,0,107,0,3,0,186,0,74,0,0,0,132,0,80,0,223,0,26,0,44,0,226,0,231,0,103,0,255,0,255,0,133,0,241,0,0,0,99,0,3,0,94,0,207,0,179,0,109,0,56,0,120,0,42,0,242,0,225,0,3,0,239,0,48,0,181,0,0,0,172,0,164,0,184,0,0,0,178,0,0,0,38,0,244,0,0,0,114,0,97,0,183,0,192,0,33,0,54,0,126,0,141,0,42,0,0,0,193,0,0,0,0,0,86,0,50,0,78,0,253,0,99,0,0,0,121,0,0,0,40,0,242,0,0,0,225,0,0,0,199,0,0,0,83,0,68,0,50,0,185,0,0,0,0,0,37,0,0,0,52,0);
signal scenario_full  : scenario_type := (153,31,209,31,165,31,108,31,58,31,33,31,33,30,35,31,55,31,55,30,155,31,78,31,108,31,77,31,234,31,239,31,98,31,98,30,98,29,132,31,135,31,39,31,126,31,126,30,170,31,170,30,253,31,36,31,51,31,210,31,210,30,115,31,85,31,85,30,86,31,71,31,71,30,57,31,69,31,69,30,142,31,86,31,85,31,36,31,217,31,217,30,82,31,115,31,159,31,230,31,131,31,189,31,217,31,217,30,19,31,249,31,31,31,165,31,170,31,219,31,219,30,106,31,159,31,36,31,76,31,224,31,109,31,243,31,151,31,182,31,255,31,174,31,125,31,125,30,125,29,20,31,255,31,233,31,150,31,110,31,54,31,54,31,205,31,205,30,205,29,234,31,145,31,184,31,62,31,166,31,188,31,131,31,169,31,47,31,47,30,158,31,43,31,231,31,231,30,59,31,69,31,11,31,115,31,79,31,184,31,94,31,167,31,11,31,187,31,187,30,102,31,249,31,249,30,36,31,36,30,45,31,41,31,213,31,178,31,59,31,59,30,51,31,105,31,6,31,6,30,172,31,172,30,15,31,15,30,183,31,183,30,197,31,67,31,202,31,209,31,173,31,15,31,15,30,161,31,217,31,114,31,219,31,85,31,85,30,196,31,218,31,53,31,203,31,67,31,83,31,53,31,59,31,153,31,153,30,141,31,14,31,3,31,43,31,74,31,249,31,76,31,106,31,77,31,14,31,174,31,156,31,92,31,55,31,234,31,44,31,51,31,31,31,44,31,245,31,141,31,14,31,14,30,253,31,118,31,168,31,23,31,232,31,94,31,92,31,213,31,213,30,119,31,5,31,203,31,15,31,190,31,108,31,108,30,203,31,223,31,28,31,56,31,163,31,18,31,69,31,102,31,179,31,74,31,85,31,132,31,155,31,39,31,62,31,119,31,119,30,119,29,177,31,248,31,125,31,95,31,111,31,111,30,111,29,102,31,224,31,39,31,200,31,172,31,24,31,24,30,230,31,130,31,176,31,176,30,38,31,215,31,105,31,90,31,164,31,228,31,232,31,232,30,232,29,232,28,26,31,89,31,85,31,147,31,199,31,51,31,51,30,86,31,7,31,98,31,21,31,15,31,143,31,74,31,74,30,11,31,197,31,72,31,40,31,30,31,140,31,53,31,155,31,101,31,70,31,104,31,26,31,231,31,126,31,234,31,227,31,101,31,49,31,135,31,135,30,144,31,144,30,172,31,99,31,99,30,8,31,113,31,63,31,63,30,250,31,234,31,1,31,1,30,145,31,152,31,149,31,186,31,186,30,164,31,164,30,164,29,164,28,164,27,164,26,84,31,254,31,254,30,254,29,213,31,132,31,46,31,46,30,46,29,224,31,224,30,59,31,157,31,149,31,125,31,121,31,56,31,171,31,171,30,141,31,115,31,34,31,186,31,186,30,205,31,82,31,59,31,59,30,59,29,59,28,118,31,32,31,72,31,108,31,108,30,57,31,153,31,166,31,171,31,123,31,230,31,241,31,200,31,141,31,141,30,195,31,86,31,105,31,141,31,206,31,96,31,17,31,53,31,80,31,1,31,10,31,146,31,48,31,24,31,221,31,35,31,1,31,100,31,100,30,87,31,182,31,117,31,105,31,209,31,233,31,233,30,43,31,2,31,7,31,67,31,54,31,161,31,35,31,56,31,176,31,176,30,152,31,93,31,112,31,35,31,99,31,160,31,160,30,46,31,208,31,208,30,2,31,2,30,40,31,40,30,40,29,130,31,81,31,128,31,164,31,8,31,187,31,173,31,173,30,170,31,170,30,8,31,149,31,149,30,153,31,243,31,227,31,49,31,4,31,236,31,216,31,93,31,20,31,24,31,176,31,184,31,203,31,124,31,115,31,84,31,159,31,132,31,132,30,132,29,186,31,49,31,106,31,41,31,253,31,93,31,105,31,201,31,124,31,124,30,124,29,250,31,56,31,184,31,6,31,95,31,154,31,95,31,166,31,202,31,158,31,158,30,240,31,232,31,132,31,143,31,61,31,143,31,165,31,165,30,76,31,20,31,37,31,189,31,172,31,50,31,127,31,60,31,192,31,249,31,249,30,53,31,28,31,2,31,239,31,239,30,239,29,186,31,105,31,169,31,108,31,80,31,72,31,198,31,73,31,223,31,218,31,115,31,152,31,218,31,194,31,135,31,135,30,46,31,137,31,198,31,128,31,242,31,164,31,164,30,6,31,196,31,196,30,188,31,230,31,14,31,14,30,54,31,54,30,201,31,239,31,142,31,142,30,195,31,103,31,62,31,78,31,138,31,138,30,154,31,89,31,89,30,73,31,241,31,185,31,185,30,185,29,191,31,82,31,204,31,130,31,116,31,242,31,170,31,226,31,9,31,88,31,77,31,85,31,189,31,32,31,46,31,169,31,46,31,82,31,82,30,13,31,123,31,157,31,136,31,21,31,172,31,25,31,209,31,82,31,82,30,82,29,1,31,232,31,237,31,156,31,156,30,23,31,143,31,149,31,235,31,131,31,5,31,225,31,225,30,132,31,213,31,120,31,109,31,120,31,158,31,109,31,241,31,42,31,82,31,247,31,251,31,254,31,171,31,200,31,134,31,25,31,159,31,159,30,159,29,21,31,251,31,253,31,177,31,187,31,169,31,113,31,7,31,97,31,241,31,171,31,109,31,134,31,136,31,251,31,81,31,225,31,24,31,24,30,248,31,146,31,207,31,50,31,144,31,183,31,151,31,151,30,71,31,140,31,122,31,122,30,122,29,93,31,46,31,98,31,52,31,249,31,174,31,30,31,242,31,145,31,200,31,59,31,251,31,235,31,187,31,159,31,141,31,141,30,250,31,104,31,106,31,63,31,186,31,141,31,130,31,131,31,131,30,204,31,38,31,151,31,104,31,182,31,169,31,21,31,105,31,81,31,186,31,76,31,22,31,22,30,255,31,92,31,42,31,42,30,71,31,71,30,167,31,155,31,61,31,138,31,91,31,209,31,200,31,33,31,185,31,247,31,211,31,60,31,94,31,74,31,74,30,110,31,110,30,178,31,213,31,213,30,167,31,248,31,248,30,218,31,218,30,116,31,211,31,191,31,178,31,92,31,241,31,201,31,131,31,218,31,62,31,184,31,174,31,218,31,154,31,154,30,154,29,154,28,205,31,205,30,18,31,171,31,33,31,192,31,192,30,38,31,159,31,195,31,130,31,239,31,236,31,212,31,34,31,34,30,34,29,106,31,201,31,98,31,206,31,233,31,207,31,145,31,118,31,83,31,79,31,242,31,242,30,24,31,125,31,225,31,161,31,53,31,9,31,112,31,193,31,236,31,108,31,108,30,1,31,159,31,107,31,3,31,186,31,74,31,74,30,132,31,80,31,223,31,26,31,44,31,226,31,231,31,103,31,255,31,255,31,133,31,241,31,241,30,99,31,3,31,94,31,207,31,179,31,109,31,56,31,120,31,42,31,242,31,225,31,3,31,239,31,48,31,181,31,181,30,172,31,164,31,184,31,184,30,178,31,178,30,38,31,244,31,244,30,114,31,97,31,183,31,192,31,33,31,54,31,126,31,141,31,42,31,42,30,193,31,193,30,193,29,86,31,50,31,78,31,253,31,99,31,99,30,121,31,121,30,40,31,242,31,242,30,225,31,225,30,199,31,199,30,83,31,68,31,50,31,185,31,185,30,185,29,37,31,37,30,52,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
