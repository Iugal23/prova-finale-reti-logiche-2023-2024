-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 977;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (118,0,0,0,126,0,131,0,83,0,215,0,0,0,73,0,194,0,209,0,109,0,0,0,120,0,0,0,40,0,132,0,244,0,88,0,184,0,35,0,109,0,161,0,175,0,114,0,133,0,167,0,32,0,253,0,0,0,204,0,0,0,139,0,0,0,0,0,143,0,115,0,234,0,54,0,221,0,192,0,157,0,105,0,187,0,0,0,48,0,0,0,0,0,31,0,81,0,0,0,170,0,16,0,149,0,63,0,4,0,168,0,0,0,183,0,0,0,239,0,0,0,24,0,17,0,210,0,178,0,112,0,120,0,69,0,158,0,81,0,57,0,103,0,127,0,240,0,215,0,0,0,169,0,23,0,163,0,55,0,142,0,0,0,20,0,160,0,244,0,170,0,217,0,0,0,136,0,130,0,0,0,77,0,0,0,162,0,223,0,90,0,234,0,190,0,165,0,60,0,83,0,11,0,199,0,18,0,70,0,79,0,35,0,54,0,64,0,0,0,107,0,23,0,66,0,144,0,89,0,84,0,179,0,0,0,96,0,206,0,202,0,15,0,0,0,243,0,188,0,48,0,36,0,0,0,31,0,0,0,0,0,222,0,188,0,51,0,62,0,116,0,159,0,138,0,95,0,207,0,0,0,0,0,0,0,46,0,211,0,165,0,254,0,207,0,141,0,127,0,75,0,46,0,206,0,0,0,11,0,231,0,202,0,172,0,35,0,178,0,50,0,0,0,0,0,104,0,247,0,0,0,235,0,0,0,0,0,67,0,211,0,70,0,91,0,187,0,210,0,253,0,104,0,183,0,64,0,24,0,3,0,116,0,0,0,190,0,24,0,0,0,212,0,144,0,180,0,0,0,201,0,183,0,231,0,0,0,30,0,14,0,0,0,74,0,251,0,74,0,231,0,13,0,0,0,56,0,183,0,0,0,247,0,28,0,89,0,103,0,191,0,99,0,96,0,0,0,10,0,206,0,160,0,31,0,225,0,71,0,79,0,42,0,0,0,47,0,27,0,46,0,156,0,37,0,163,0,0,0,245,0,91,0,234,0,71,0,90,0,196,0,0,0,0,0,192,0,0,0,0,0,113,0,29,0,254,0,172,0,202,0,0,0,0,0,201,0,154,0,56,0,246,0,94,0,230,0,0,0,8,0,41,0,112,0,176,0,48,0,0,0,144,0,78,0,68,0,169,0,145,0,0,0,243,0,37,0,57,0,34,0,99,0,117,0,22,0,201,0,45,0,0,0,253,0,159,0,13,0,0,0,0,0,167,0,140,0,173,0,55,0,214,0,207,0,116,0,211,0,98,0,185,0,5,0,39,0,244,0,0,0,0,0,124,0,243,0,115,0,57,0,95,0,101,0,111,0,71,0,117,0,0,0,91,0,141,0,211,0,0,0,188,0,199,0,209,0,0,0,130,0,52,0,26,0,192,0,55,0,143,0,191,0,62,0,191,0,86,0,41,0,224,0,0,0,14,0,105,0,220,0,110,0,204,0,0,0,92,0,0,0,0,0,240,0,0,0,46,0,230,0,178,0,29,0,0,0,251,0,183,0,187,0,197,0,59,0,255,0,166,0,68,0,9,0,225,0,169,0,205,0,230,0,156,0,181,0,237,0,92,0,0,0,189,0,114,0,227,0,136,0,239,0,0,0,171,0,24,0,53,0,192,0,12,0,83,0,226,0,192,0,0,0,182,0,90,0,24,0,0,0,0,0,36,0,135,0,0,0,67,0,35,0,187,0,106,0,111,0,57,0,111,0,113,0,203,0,151,0,214,0,6,0,76,0,115,0,146,0,0,0,47,0,253,0,0,0,11,0,145,0,14,0,110,0,163,0,8,0,72,0,130,0,13,0,86,0,203,0,27,0,213,0,43,0,242,0,29,0,82,0,0,0,174,0,115,0,31,0,207,0,140,0,195,0,247,0,193,0,0,0,108,0,0,0,57,0,156,0,103,0,64,0,18,0,25,0,0,0,0,0,218,0,96,0,0,0,182,0,0,0,113,0,0,0,128,0,84,0,91,0,180,0,0,0,0,0,0,0,152,0,31,0,87,0,238,0,0,0,124,0,55,0,213,0,176,0,113,0,157,0,10,0,113,0,178,0,0,0,37,0,85,0,57,0,26,0,41,0,118,0,83,0,27,0,4,0,27,0,0,0,47,0,0,0,243,0,0,0,148,0,66,0,126,0,0,0,6,0,224,0,229,0,228,0,128,0,108,0,102,0,0,0,0,0,134,0,0,0,0,0,242,0,209,0,155,0,185,0,227,0,243,0,73,0,194,0,64,0,0,0,83,0,99,0,111,0,0,0,82,0,111,0,77,0,89,0,135,0,249,0,0,0,235,0,246,0,130,0,2,0,80,0,0,0,181,0,123,0,25,0,71,0,118,0,47,0,206,0,0,0,179,0,130,0,172,0,170,0,0,0,58,0,236,0,0,0,158,0,232,0,0,0,237,0,86,0,249,0,72,0,93,0,61,0,210,0,96,0,0,0,202,0,0,0,118,0,56,0,131,0,19,0,247,0,239,0,231,0,0,0,81,0,159,0,199,0,181,0,255,0,220,0,0,0,0,0,51,0,0,0,141,0,0,0,24,0,59,0,126,0,95,0,101,0,119,0,0,0,234,0,0,0,46,0,0,0,160,0,200,0,57,0,22,0,24,0,31,0,120,0,81,0,220,0,192,0,0,0,0,0,30,0,185,0,50,0,0,0,72,0,227,0,42,0,109,0,134,0,0,0,0,0,70,0,240,0,17,0,243,0,75,0,0,0,166,0,137,0,94,0,0,0,100,0,69,0,16,0,0,0,42,0,155,0,57,0,217,0,0,0,0,0,0,0,0,0,69,0,113,0,0,0,242,0,177,0,241,0,0,0,59,0,162,0,0,0,141,0,188,0,178,0,242,0,147,0,207,0,69,0,11,0,10,0,189,0,75,0,195,0,112,0,0,0,18,0,113,0,0,0,2,0,190,0,167,0,9,0,14,0,156,0,170,0,42,0,0,0,238,0,190,0,0,0,198,0,88,0,150,0,0,0,234,0,226,0,36,0,44,0,141,0,138,0,36,0,205,0,113,0,174,0,130,0,69,0,128,0,143,0,156,0,0,0,75,0,81,0,152,0,0,0,53,0,0,0,240,0,70,0,69,0,143,0,214,0,0,0,22,0,58,0,228,0,0,0,245,0,196,0,133,0,48,0,0,0,188,0,245,0,155,0,52,0,232,0,250,0,245,0,0,0,61,0,54,0,1,0,251,0,0,0,215,0,220,0,246,0,83,0,168,0,91,0,17,0,16,0,178,0,108,0,193,0,174,0,234,0,21,0,109,0,175,0,0,0,174,0,166,0,0,0,206,0,75,0,20,0,248,0,126,0,93,0,226,0,168,0,0,0,240,0,0,0,5,0,145,0,224,0,251,0,58,0,129,0,0,0,14,0,231,0,15,0,72,0,13,0,116,0,235,0,80,0,35,0,49,0,73,0,0,0,14,0,135,0,122,0,187,0,143,0,107,0,154,0,24,0,27,0,192,0,89,0,4,0,221,0,0,0,0,0,26,0,197,0,115,0,120,0,39,0,212,0,78,0,212,0,254,0,211,0,252,0,233,0,9,0,119,0,0,0,123,0,69,0,223,0,0,0,0,0,86,0,0,0,0,0,129,0,0,0,113,0,182,0,213,0,44,0,0,0,232,0,23,0,146,0,0,0,0,0,161,0,0,0,188,0,85,0,201,0,146,0,0,0,167,0,175,0,146,0,12,0,38,0,52,0,134,0,163,0,0,0,0,0,82,0,208,0,223,0,0,0,206,0,75,0,147,0,231,0,123,0,0,0,90,0,0,0,101,0,79,0,45,0,40,0,8,0,39,0,1,0,25,0,60,0,194,0,182,0,0,0,115,0,229,0,195,0,187,0,208,0,182,0,132,0,36,0,239,0,38,0,0,0,0,0,136,0,104,0,103,0,54,0,0,0,159,0,0,0,0,0,0,0,75,0,104,0,17,0,55,0,181,0,0,0,207,0,25,0,77,0,45,0,211,0,4,0,165,0,236,0,54,0,157,0,47,0,109,0,173,0,0,0,228,0,27,0,97,0,163,0,73,0,59,0,0,0,0,0,56,0,184,0,5,0,143,0,85,0,110,0,66,0,146,0,11,0,78,0,0,0,238,0,15,0,142,0,0,0,46,0,73,0,17,0,64,0,52,0,92,0,0,0,188,0,79,0,241,0,190,0,59,0,232,0,43,0,176,0,227,0,0,0,113,0,0,0,0,0,62,0,23,0,0,0,188,0,225,0,107,0,101,0,232,0,146,0,71,0,20,0,63,0,235,0,42,0,0,0,189,0,21,0,0,0,150,0,0,0,175,0,239,0,0,0,47,0,113,0);
signal scenario_full  : scenario_type := (118,31,118,30,126,31,131,31,83,31,215,31,215,30,73,31,194,31,209,31,109,31,109,30,120,31,120,30,40,31,132,31,244,31,88,31,184,31,35,31,109,31,161,31,175,31,114,31,133,31,167,31,32,31,253,31,253,30,204,31,204,30,139,31,139,30,139,29,143,31,115,31,234,31,54,31,221,31,192,31,157,31,105,31,187,31,187,30,48,31,48,30,48,29,31,31,81,31,81,30,170,31,16,31,149,31,63,31,4,31,168,31,168,30,183,31,183,30,239,31,239,30,24,31,17,31,210,31,178,31,112,31,120,31,69,31,158,31,81,31,57,31,103,31,127,31,240,31,215,31,215,30,169,31,23,31,163,31,55,31,142,31,142,30,20,31,160,31,244,31,170,31,217,31,217,30,136,31,130,31,130,30,77,31,77,30,162,31,223,31,90,31,234,31,190,31,165,31,60,31,83,31,11,31,199,31,18,31,70,31,79,31,35,31,54,31,64,31,64,30,107,31,23,31,66,31,144,31,89,31,84,31,179,31,179,30,96,31,206,31,202,31,15,31,15,30,243,31,188,31,48,31,36,31,36,30,31,31,31,30,31,29,222,31,188,31,51,31,62,31,116,31,159,31,138,31,95,31,207,31,207,30,207,29,207,28,46,31,211,31,165,31,254,31,207,31,141,31,127,31,75,31,46,31,206,31,206,30,11,31,231,31,202,31,172,31,35,31,178,31,50,31,50,30,50,29,104,31,247,31,247,30,235,31,235,30,235,29,67,31,211,31,70,31,91,31,187,31,210,31,253,31,104,31,183,31,64,31,24,31,3,31,116,31,116,30,190,31,24,31,24,30,212,31,144,31,180,31,180,30,201,31,183,31,231,31,231,30,30,31,14,31,14,30,74,31,251,31,74,31,231,31,13,31,13,30,56,31,183,31,183,30,247,31,28,31,89,31,103,31,191,31,99,31,96,31,96,30,10,31,206,31,160,31,31,31,225,31,71,31,79,31,42,31,42,30,47,31,27,31,46,31,156,31,37,31,163,31,163,30,245,31,91,31,234,31,71,31,90,31,196,31,196,30,196,29,192,31,192,30,192,29,113,31,29,31,254,31,172,31,202,31,202,30,202,29,201,31,154,31,56,31,246,31,94,31,230,31,230,30,8,31,41,31,112,31,176,31,48,31,48,30,144,31,78,31,68,31,169,31,145,31,145,30,243,31,37,31,57,31,34,31,99,31,117,31,22,31,201,31,45,31,45,30,253,31,159,31,13,31,13,30,13,29,167,31,140,31,173,31,55,31,214,31,207,31,116,31,211,31,98,31,185,31,5,31,39,31,244,31,244,30,244,29,124,31,243,31,115,31,57,31,95,31,101,31,111,31,71,31,117,31,117,30,91,31,141,31,211,31,211,30,188,31,199,31,209,31,209,30,130,31,52,31,26,31,192,31,55,31,143,31,191,31,62,31,191,31,86,31,41,31,224,31,224,30,14,31,105,31,220,31,110,31,204,31,204,30,92,31,92,30,92,29,240,31,240,30,46,31,230,31,178,31,29,31,29,30,251,31,183,31,187,31,197,31,59,31,255,31,166,31,68,31,9,31,225,31,169,31,205,31,230,31,156,31,181,31,237,31,92,31,92,30,189,31,114,31,227,31,136,31,239,31,239,30,171,31,24,31,53,31,192,31,12,31,83,31,226,31,192,31,192,30,182,31,90,31,24,31,24,30,24,29,36,31,135,31,135,30,67,31,35,31,187,31,106,31,111,31,57,31,111,31,113,31,203,31,151,31,214,31,6,31,76,31,115,31,146,31,146,30,47,31,253,31,253,30,11,31,145,31,14,31,110,31,163,31,8,31,72,31,130,31,13,31,86,31,203,31,27,31,213,31,43,31,242,31,29,31,82,31,82,30,174,31,115,31,31,31,207,31,140,31,195,31,247,31,193,31,193,30,108,31,108,30,57,31,156,31,103,31,64,31,18,31,25,31,25,30,25,29,218,31,96,31,96,30,182,31,182,30,113,31,113,30,128,31,84,31,91,31,180,31,180,30,180,29,180,28,152,31,31,31,87,31,238,31,238,30,124,31,55,31,213,31,176,31,113,31,157,31,10,31,113,31,178,31,178,30,37,31,85,31,57,31,26,31,41,31,118,31,83,31,27,31,4,31,27,31,27,30,47,31,47,30,243,31,243,30,148,31,66,31,126,31,126,30,6,31,224,31,229,31,228,31,128,31,108,31,102,31,102,30,102,29,134,31,134,30,134,29,242,31,209,31,155,31,185,31,227,31,243,31,73,31,194,31,64,31,64,30,83,31,99,31,111,31,111,30,82,31,111,31,77,31,89,31,135,31,249,31,249,30,235,31,246,31,130,31,2,31,80,31,80,30,181,31,123,31,25,31,71,31,118,31,47,31,206,31,206,30,179,31,130,31,172,31,170,31,170,30,58,31,236,31,236,30,158,31,232,31,232,30,237,31,86,31,249,31,72,31,93,31,61,31,210,31,96,31,96,30,202,31,202,30,118,31,56,31,131,31,19,31,247,31,239,31,231,31,231,30,81,31,159,31,199,31,181,31,255,31,220,31,220,30,220,29,51,31,51,30,141,31,141,30,24,31,59,31,126,31,95,31,101,31,119,31,119,30,234,31,234,30,46,31,46,30,160,31,200,31,57,31,22,31,24,31,31,31,120,31,81,31,220,31,192,31,192,30,192,29,30,31,185,31,50,31,50,30,72,31,227,31,42,31,109,31,134,31,134,30,134,29,70,31,240,31,17,31,243,31,75,31,75,30,166,31,137,31,94,31,94,30,100,31,69,31,16,31,16,30,42,31,155,31,57,31,217,31,217,30,217,29,217,28,217,27,69,31,113,31,113,30,242,31,177,31,241,31,241,30,59,31,162,31,162,30,141,31,188,31,178,31,242,31,147,31,207,31,69,31,11,31,10,31,189,31,75,31,195,31,112,31,112,30,18,31,113,31,113,30,2,31,190,31,167,31,9,31,14,31,156,31,170,31,42,31,42,30,238,31,190,31,190,30,198,31,88,31,150,31,150,30,234,31,226,31,36,31,44,31,141,31,138,31,36,31,205,31,113,31,174,31,130,31,69,31,128,31,143,31,156,31,156,30,75,31,81,31,152,31,152,30,53,31,53,30,240,31,70,31,69,31,143,31,214,31,214,30,22,31,58,31,228,31,228,30,245,31,196,31,133,31,48,31,48,30,188,31,245,31,155,31,52,31,232,31,250,31,245,31,245,30,61,31,54,31,1,31,251,31,251,30,215,31,220,31,246,31,83,31,168,31,91,31,17,31,16,31,178,31,108,31,193,31,174,31,234,31,21,31,109,31,175,31,175,30,174,31,166,31,166,30,206,31,75,31,20,31,248,31,126,31,93,31,226,31,168,31,168,30,240,31,240,30,5,31,145,31,224,31,251,31,58,31,129,31,129,30,14,31,231,31,15,31,72,31,13,31,116,31,235,31,80,31,35,31,49,31,73,31,73,30,14,31,135,31,122,31,187,31,143,31,107,31,154,31,24,31,27,31,192,31,89,31,4,31,221,31,221,30,221,29,26,31,197,31,115,31,120,31,39,31,212,31,78,31,212,31,254,31,211,31,252,31,233,31,9,31,119,31,119,30,123,31,69,31,223,31,223,30,223,29,86,31,86,30,86,29,129,31,129,30,113,31,182,31,213,31,44,31,44,30,232,31,23,31,146,31,146,30,146,29,161,31,161,30,188,31,85,31,201,31,146,31,146,30,167,31,175,31,146,31,12,31,38,31,52,31,134,31,163,31,163,30,163,29,82,31,208,31,223,31,223,30,206,31,75,31,147,31,231,31,123,31,123,30,90,31,90,30,101,31,79,31,45,31,40,31,8,31,39,31,1,31,25,31,60,31,194,31,182,31,182,30,115,31,229,31,195,31,187,31,208,31,182,31,132,31,36,31,239,31,38,31,38,30,38,29,136,31,104,31,103,31,54,31,54,30,159,31,159,30,159,29,159,28,75,31,104,31,17,31,55,31,181,31,181,30,207,31,25,31,77,31,45,31,211,31,4,31,165,31,236,31,54,31,157,31,47,31,109,31,173,31,173,30,228,31,27,31,97,31,163,31,73,31,59,31,59,30,59,29,56,31,184,31,5,31,143,31,85,31,110,31,66,31,146,31,11,31,78,31,78,30,238,31,15,31,142,31,142,30,46,31,73,31,17,31,64,31,52,31,92,31,92,30,188,31,79,31,241,31,190,31,59,31,232,31,43,31,176,31,227,31,227,30,113,31,113,30,113,29,62,31,23,31,23,30,188,31,225,31,107,31,101,31,232,31,146,31,71,31,20,31,63,31,235,31,42,31,42,30,189,31,21,31,21,30,150,31,150,30,175,31,239,31,239,30,47,31,113,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
