-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 940;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (54,0,6,0,200,0,175,0,220,0,150,0,33,0,0,0,101,0,0,0,181,0,73,0,183,0,76,0,241,0,181,0,0,0,174,0,10,0,0,0,42,0,154,0,40,0,110,0,101,0,132,0,23,0,62,0,232,0,150,0,0,0,206,0,228,0,7,0,220,0,0,0,10,0,171,0,0,0,26,0,203,0,104,0,75,0,119,0,37,0,0,0,140,0,171,0,0,0,221,0,0,0,109,0,154,0,60,0,128,0,16,0,0,0,13,0,190,0,97,0,0,0,55,0,0,0,0,0,7,0,136,0,80,0,193,0,204,0,16,0,221,0,155,0,125,0,8,0,253,0,15,0,182,0,0,0,206,0,226,0,53,0,0,0,224,0,141,0,252,0,203,0,58,0,124,0,238,0,123,0,211,0,85,0,138,0,0,0,160,0,72,0,88,0,0,0,92,0,233,0,7,0,235,0,73,0,0,0,26,0,0,0,0,0,102,0,13,0,0,0,194,0,192,0,10,0,6,0,30,0,163,0,30,0,81,0,209,0,86,0,26,0,108,0,32,0,221,0,0,0,228,0,60,0,0,0,31,0,145,0,0,0,24,0,98,0,134,0,97,0,121,0,56,0,205,0,0,0,235,0,52,0,0,0,48,0,0,0,105,0,224,0,240,0,0,0,216,0,204,0,21,0,85,0,159,0,255,0,185,0,157,0,19,0,0,0,60,0,7,0,5,0,78,0,176,0,178,0,133,0,169,0,111,0,0,0,173,0,0,0,188,0,210,0,71,0,92,0,0,0,0,0,29,0,156,0,213,0,106,0,8,0,158,0,250,0,174,0,44,0,0,0,0,0,0,0,111,0,0,0,241,0,120,0,143,0,47,0,54,0,164,0,102,0,162,0,245,0,0,0,124,0,238,0,120,0,135,0,251,0,0,0,0,0,0,0,0,0,117,0,0,0,30,0,0,0,0,0,110,0,140,0,209,0,0,0,112,0,28,0,234,0,233,0,28,0,110,0,18,0,0,0,82,0,250,0,117,0,144,0,79,0,143,0,194,0,0,0,78,0,229,0,61,0,35,0,0,0,69,0,17,0,51,0,153,0,0,0,0,0,68,0,250,0,0,0,29,0,77,0,145,0,0,0,62,0,0,0,212,0,3,0,248,0,239,0,220,0,168,0,74,0,113,0,222,0,129,0,0,0,97,0,73,0,207,0,0,0,48,0,113,0,0,0,88,0,127,0,192,0,250,0,130,0,91,0,172,0,228,0,168,0,165,0,244,0,0,0,237,0,230,0,126,0,46,0,61,0,0,0,73,0,139,0,234,0,17,0,0,0,153,0,0,0,0,0,129,0,113,0,155,0,182,0,80,0,168,0,0,0,0,0,0,0,170,0,0,0,75,0,0,0,202,0,32,0,0,0,184,0,77,0,54,0,64,0,107,0,251,0,244,0,0,0,106,0,111,0,143,0,185,0,255,0,126,0,64,0,252,0,198,0,241,0,222,0,247,0,153,0,235,0,240,0,36,0,156,0,8,0,54,0,0,0,139,0,138,0,123,0,215,0,0,0,236,0,240,0,61,0,175,0,0,0,152,0,215,0,76,0,86,0,0,0,193,0,103,0,215,0,83,0,175,0,78,0,51,0,0,0,79,0,190,0,230,0,142,0,10,0,178,0,0,0,58,0,0,0,0,0,238,0,0,0,93,0,194,0,170,0,50,0,53,0,170,0,81,0,130,0,173,0,74,0,0,0,0,0,242,0,28,0,105,0,0,0,207,0,127,0,199,0,240,0,214,0,250,0,208,0,155,0,36,0,207,0,249,0,63,0,55,0,0,0,123,0,103,0,110,0,0,0,0,0,0,0,0,0,226,0,221,0,228,0,0,0,235,0,0,0,237,0,0,0,109,0,0,0,45,0,170,0,0,0,0,0,171,0,0,0,43,0,109,0,238,0,0,0,0,0,0,0,64,0,0,0,125,0,227,0,0,0,50,0,119,0,113,0,0,0,54,0,227,0,0,0,0,0,0,0,0,0,0,0,88,0,228,0,0,0,89,0,68,0,134,0,0,0,51,0,36,0,126,0,149,0,146,0,0,0,34,0,151,0,0,0,125,0,195,0,0,0,100,0,60,0,196,0,160,0,0,0,0,0,0,0,0,0,39,0,220,0,234,0,252,0,0,0,0,0,0,0,162,0,202,0,52,0,0,0,0,0,0,0,0,0,47,0,122,0,207,0,111,0,0,0,23,0,43,0,243,0,90,0,195,0,180,0,0,0,22,0,243,0,28,0,62,0,108,0,234,0,115,0,0,0,247,0,242,0,109,0,38,0,3,0,0,0,21,0,0,0,242,0,214,0,225,0,91,0,123,0,100,0,91,0,248,0,172,0,0,0,63,0,92,0,217,0,195,0,11,0,136,0,199,0,211,0,78,0,11,0,152,0,82,0,150,0,251,0,0,0,133,0,213,0,139,0,42,0,110,0,163,0,142,0,134,0,52,0,0,0,30,0,155,0,169,0,0,0,227,0,59,0,219,0,90,0,30,0,242,0,117,0,160,0,9,0,45,0,51,0,207,0,235,0,1,0,0,0,0,0,127,0,24,0,0,0,0,0,136,0,137,0,0,0,2,0,158,0,25,0,31,0,41,0,63,0,88,0,224,0,255,0,173,0,51,0,0,0,237,0,222,0,228,0,186,0,209,0,237,0,98,0,161,0,125,0,80,0,134,0,111,0,99,0,167,0,0,0,155,0,45,0,56,0,0,0,0,0,183,0,174,0,20,0,235,0,44,0,169,0,75,0,114,0,0,0,103,0,249,0,0,0,81,0,65,0,0,0,96,0,65,0,0,0,164,0,84,0,71,0,27,0,222,0,206,0,243,0,237,0,239,0,0,0,0,0,0,0,211,0,0,0,217,0,219,0,79,0,125,0,0,0,248,0,201,0,0,0,229,0,94,0,83,0,38,0,29,0,235,0,23,0,0,0,7,0,205,0,24,0,57,0,0,0,149,0,0,0,107,0,0,0,128,0,10,0,193,0,124,0,143,0,156,0,46,0,49,0,0,0,232,0,232,0,65,0,4,0,187,0,52,0,213,0,119,0,0,0,136,0,0,0,74,0,35,0,249,0,209,0,88,0,15,0,41,0,254,0,147,0,22,0,0,0,0,0,0,0,0,0,0,0,77,0,247,0,228,0,56,0,20,0,0,0,247,0,221,0,118,0,55,0,105,0,191,0,116,0,123,0,0,0,0,0,67,0,147,0,211,0,104,0,84,0,174,0,173,0,2,0,0,0,242,0,0,0,252,0,234,0,73,0,252,0,172,0,229,0,0,0,122,0,64,0,241,0,169,0,0,0,126,0,245,0,218,0,168,0,79,0,162,0,151,0,130,0,173,0,0,0,87,0,210,0,205,0,235,0,125,0,0,0,195,0,171,0,0,0,194,0,196,0,2,0,186,0,254,0,173,0,106,0,200,0,0,0,43,0,210,0,212,0,60,0,167,0,178,0,73,0,167,0,215,0,139,0,0,0,163,0,59,0,171,0,50,0,0,0,6,0,2,0,219,0,60,0,103,0,151,0,0,0,37,0,47,0,144,0,191,0,250,0,0,0,0,0,0,0,184,0,227,0,78,0,64,0,193,0,13,0,77,0,225,0,0,0,229,0,0,0,205,0,16,0,246,0,54,0,203,0,0,0,206,0,131,0,245,0,0,0,193,0,0,0,175,0,0,0,143,0,63,0,127,0,123,0,147,0,200,0,252,0,26,0,67,0,28,0,0,0,98,0,68,0,232,0,170,0,0,0,1,0,75,0,0,0,188,0,149,0,0,0,159,0,96,0,77,0,236,0,208,0,75,0,117,0,13,0,0,0,0,0,229,0,92,0,78,0,158,0,186,0,55,0,45,0,49,0,120,0,155,0,230,0,0,0,232,0,250,0,206,0,0,0,179,0,124,0,109,0,144,0,159,0,247,0,201,0,0,0,0,0,81,0,255,0,117,0,186,0,86,0,142,0,193,0,0,0,226,0,0,0,0,0,136,0,111,0,182,0,30,0,224,0,39,0,0,0,0,0,0,0,68,0,0,0,173,0,88,0,172,0,216,0,115,0,205,0,227,0,17,0,29,0,43,0,153,0,29,0,232,0,17,0,154,0,100,0,141,0,178,0,100,0,147,0,0,0,161,0,168,0,87,0,64,0,192,0,0,0,109,0,0,0,29,0,212,0);
signal scenario_full  : scenario_type := (54,31,6,31,200,31,175,31,220,31,150,31,33,31,33,30,101,31,101,30,181,31,73,31,183,31,76,31,241,31,181,31,181,30,174,31,10,31,10,30,42,31,154,31,40,31,110,31,101,31,132,31,23,31,62,31,232,31,150,31,150,30,206,31,228,31,7,31,220,31,220,30,10,31,171,31,171,30,26,31,203,31,104,31,75,31,119,31,37,31,37,30,140,31,171,31,171,30,221,31,221,30,109,31,154,31,60,31,128,31,16,31,16,30,13,31,190,31,97,31,97,30,55,31,55,30,55,29,7,31,136,31,80,31,193,31,204,31,16,31,221,31,155,31,125,31,8,31,253,31,15,31,182,31,182,30,206,31,226,31,53,31,53,30,224,31,141,31,252,31,203,31,58,31,124,31,238,31,123,31,211,31,85,31,138,31,138,30,160,31,72,31,88,31,88,30,92,31,233,31,7,31,235,31,73,31,73,30,26,31,26,30,26,29,102,31,13,31,13,30,194,31,192,31,10,31,6,31,30,31,163,31,30,31,81,31,209,31,86,31,26,31,108,31,32,31,221,31,221,30,228,31,60,31,60,30,31,31,145,31,145,30,24,31,98,31,134,31,97,31,121,31,56,31,205,31,205,30,235,31,52,31,52,30,48,31,48,30,105,31,224,31,240,31,240,30,216,31,204,31,21,31,85,31,159,31,255,31,185,31,157,31,19,31,19,30,60,31,7,31,5,31,78,31,176,31,178,31,133,31,169,31,111,31,111,30,173,31,173,30,188,31,210,31,71,31,92,31,92,30,92,29,29,31,156,31,213,31,106,31,8,31,158,31,250,31,174,31,44,31,44,30,44,29,44,28,111,31,111,30,241,31,120,31,143,31,47,31,54,31,164,31,102,31,162,31,245,31,245,30,124,31,238,31,120,31,135,31,251,31,251,30,251,29,251,28,251,27,117,31,117,30,30,31,30,30,30,29,110,31,140,31,209,31,209,30,112,31,28,31,234,31,233,31,28,31,110,31,18,31,18,30,82,31,250,31,117,31,144,31,79,31,143,31,194,31,194,30,78,31,229,31,61,31,35,31,35,30,69,31,17,31,51,31,153,31,153,30,153,29,68,31,250,31,250,30,29,31,77,31,145,31,145,30,62,31,62,30,212,31,3,31,248,31,239,31,220,31,168,31,74,31,113,31,222,31,129,31,129,30,97,31,73,31,207,31,207,30,48,31,113,31,113,30,88,31,127,31,192,31,250,31,130,31,91,31,172,31,228,31,168,31,165,31,244,31,244,30,237,31,230,31,126,31,46,31,61,31,61,30,73,31,139,31,234,31,17,31,17,30,153,31,153,30,153,29,129,31,113,31,155,31,182,31,80,31,168,31,168,30,168,29,168,28,170,31,170,30,75,31,75,30,202,31,32,31,32,30,184,31,77,31,54,31,64,31,107,31,251,31,244,31,244,30,106,31,111,31,143,31,185,31,255,31,126,31,64,31,252,31,198,31,241,31,222,31,247,31,153,31,235,31,240,31,36,31,156,31,8,31,54,31,54,30,139,31,138,31,123,31,215,31,215,30,236,31,240,31,61,31,175,31,175,30,152,31,215,31,76,31,86,31,86,30,193,31,103,31,215,31,83,31,175,31,78,31,51,31,51,30,79,31,190,31,230,31,142,31,10,31,178,31,178,30,58,31,58,30,58,29,238,31,238,30,93,31,194,31,170,31,50,31,53,31,170,31,81,31,130,31,173,31,74,31,74,30,74,29,242,31,28,31,105,31,105,30,207,31,127,31,199,31,240,31,214,31,250,31,208,31,155,31,36,31,207,31,249,31,63,31,55,31,55,30,123,31,103,31,110,31,110,30,110,29,110,28,110,27,226,31,221,31,228,31,228,30,235,31,235,30,237,31,237,30,109,31,109,30,45,31,170,31,170,30,170,29,171,31,171,30,43,31,109,31,238,31,238,30,238,29,238,28,64,31,64,30,125,31,227,31,227,30,50,31,119,31,113,31,113,30,54,31,227,31,227,30,227,29,227,28,227,27,227,26,88,31,228,31,228,30,89,31,68,31,134,31,134,30,51,31,36,31,126,31,149,31,146,31,146,30,34,31,151,31,151,30,125,31,195,31,195,30,100,31,60,31,196,31,160,31,160,30,160,29,160,28,160,27,39,31,220,31,234,31,252,31,252,30,252,29,252,28,162,31,202,31,52,31,52,30,52,29,52,28,52,27,47,31,122,31,207,31,111,31,111,30,23,31,43,31,243,31,90,31,195,31,180,31,180,30,22,31,243,31,28,31,62,31,108,31,234,31,115,31,115,30,247,31,242,31,109,31,38,31,3,31,3,30,21,31,21,30,242,31,214,31,225,31,91,31,123,31,100,31,91,31,248,31,172,31,172,30,63,31,92,31,217,31,195,31,11,31,136,31,199,31,211,31,78,31,11,31,152,31,82,31,150,31,251,31,251,30,133,31,213,31,139,31,42,31,110,31,163,31,142,31,134,31,52,31,52,30,30,31,155,31,169,31,169,30,227,31,59,31,219,31,90,31,30,31,242,31,117,31,160,31,9,31,45,31,51,31,207,31,235,31,1,31,1,30,1,29,127,31,24,31,24,30,24,29,136,31,137,31,137,30,2,31,158,31,25,31,31,31,41,31,63,31,88,31,224,31,255,31,173,31,51,31,51,30,237,31,222,31,228,31,186,31,209,31,237,31,98,31,161,31,125,31,80,31,134,31,111,31,99,31,167,31,167,30,155,31,45,31,56,31,56,30,56,29,183,31,174,31,20,31,235,31,44,31,169,31,75,31,114,31,114,30,103,31,249,31,249,30,81,31,65,31,65,30,96,31,65,31,65,30,164,31,84,31,71,31,27,31,222,31,206,31,243,31,237,31,239,31,239,30,239,29,239,28,211,31,211,30,217,31,219,31,79,31,125,31,125,30,248,31,201,31,201,30,229,31,94,31,83,31,38,31,29,31,235,31,23,31,23,30,7,31,205,31,24,31,57,31,57,30,149,31,149,30,107,31,107,30,128,31,10,31,193,31,124,31,143,31,156,31,46,31,49,31,49,30,232,31,232,31,65,31,4,31,187,31,52,31,213,31,119,31,119,30,136,31,136,30,74,31,35,31,249,31,209,31,88,31,15,31,41,31,254,31,147,31,22,31,22,30,22,29,22,28,22,27,22,26,77,31,247,31,228,31,56,31,20,31,20,30,247,31,221,31,118,31,55,31,105,31,191,31,116,31,123,31,123,30,123,29,67,31,147,31,211,31,104,31,84,31,174,31,173,31,2,31,2,30,242,31,242,30,252,31,234,31,73,31,252,31,172,31,229,31,229,30,122,31,64,31,241,31,169,31,169,30,126,31,245,31,218,31,168,31,79,31,162,31,151,31,130,31,173,31,173,30,87,31,210,31,205,31,235,31,125,31,125,30,195,31,171,31,171,30,194,31,196,31,2,31,186,31,254,31,173,31,106,31,200,31,200,30,43,31,210,31,212,31,60,31,167,31,178,31,73,31,167,31,215,31,139,31,139,30,163,31,59,31,171,31,50,31,50,30,6,31,2,31,219,31,60,31,103,31,151,31,151,30,37,31,47,31,144,31,191,31,250,31,250,30,250,29,250,28,184,31,227,31,78,31,64,31,193,31,13,31,77,31,225,31,225,30,229,31,229,30,205,31,16,31,246,31,54,31,203,31,203,30,206,31,131,31,245,31,245,30,193,31,193,30,175,31,175,30,143,31,63,31,127,31,123,31,147,31,200,31,252,31,26,31,67,31,28,31,28,30,98,31,68,31,232,31,170,31,170,30,1,31,75,31,75,30,188,31,149,31,149,30,159,31,96,31,77,31,236,31,208,31,75,31,117,31,13,31,13,30,13,29,229,31,92,31,78,31,158,31,186,31,55,31,45,31,49,31,120,31,155,31,230,31,230,30,232,31,250,31,206,31,206,30,179,31,124,31,109,31,144,31,159,31,247,31,201,31,201,30,201,29,81,31,255,31,117,31,186,31,86,31,142,31,193,31,193,30,226,31,226,30,226,29,136,31,111,31,182,31,30,31,224,31,39,31,39,30,39,29,39,28,68,31,68,30,173,31,88,31,172,31,216,31,115,31,205,31,227,31,17,31,29,31,43,31,153,31,29,31,232,31,17,31,154,31,100,31,141,31,178,31,100,31,147,31,147,30,161,31,168,31,87,31,64,31,192,31,192,30,109,31,109,30,29,31,212,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
