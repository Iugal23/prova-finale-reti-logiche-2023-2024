-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 679;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,59,0,112,0,0,0,154,0,238,0,221,0,225,0,0,0,77,0,100,0,126,0,123,0,0,0,62,0,76,0,31,0,210,0,126,0,140,0,207,0,0,0,122,0,61,0,0,0,147,0,230,0,226,0,114,0,130,0,230,0,171,0,101,0,219,0,18,0,0,0,12,0,66,0,205,0,17,0,177,0,221,0,0,0,7,0,242,0,253,0,232,0,89,0,188,0,167,0,88,0,58,0,88,0,0,0,0,0,75,0,48,0,143,0,187,0,244,0,27,0,53,0,207,0,0,0,19,0,102,0,0,0,188,0,34,0,67,0,6,0,23,0,117,0,140,0,94,0,183,0,0,0,167,0,236,0,39,0,138,0,151,0,209,0,227,0,0,0,168,0,129,0,116,0,160,0,234,0,76,0,0,0,141,0,89,0,252,0,191,0,0,0,153,0,111,0,0,0,72,0,139,0,146,0,159,0,138,0,117,0,0,0,171,0,124,0,239,0,80,0,10,0,145,0,93,0,99,0,12,0,1,0,220,0,0,0,182,0,193,0,43,0,76,0,121,0,66,0,0,0,187,0,85,0,0,0,170,0,0,0,8,0,100,0,217,0,77,0,92,0,90,0,219,0,0,0,164,0,104,0,149,0,37,0,129,0,224,0,42,0,90,0,74,0,81,0,0,0,42,0,0,0,231,0,100,0,249,0,104,0,29,0,0,0,178,0,0,0,8,0,174,0,32,0,154,0,195,0,49,0,49,0,125,0,228,0,97,0,232,0,42,0,133,0,0,0,251,0,0,0,189,0,0,0,140,0,199,0,202,0,235,0,164,0,206,0,52,0,156,0,0,0,181,0,242,0,139,0,144,0,191,0,166,0,153,0,243,0,0,0,37,0,0,0,216,0,142,0,102,0,100,0,101,0,94,0,207,0,103,0,0,0,242,0,47,0,108,0,58,0,87,0,37,0,0,0,133,0,0,0,226,0,113,0,130,0,140,0,201,0,58,0,97,0,58,0,0,0,219,0,40,0,109,0,10,0,211,0,173,0,0,0,84,0,247,0,163,0,0,0,190,0,237,0,180,0,153,0,0,0,0,0,59,0,187,0,3,0,100,0,43,0,0,0,43,0,0,0,0,0,0,0,32,0,169,0,172,0,91,0,122,0,102,0,12,0,161,0,0,0,0,0,204,0,128,0,152,0,0,0,0,0,0,0,111,0,0,0,40,0,22,0,183,0,208,0,244,0,86,0,173,0,110,0,182,0,144,0,0,0,0,0,104,0,33,0,170,0,52,0,250,0,93,0,167,0,149,0,153,0,224,0,110,0,188,0,0,0,224,0,232,0,0,0,134,0,215,0,0,0,201,0,0,0,0,0,0,0,164,0,152,0,208,0,237,0,28,0,140,0,147,0,1,0,32,0,0,0,0,0,242,0,119,0,111,0,222,0,19,0,255,0,246,0,27,0,0,0,92,0,21,0,14,0,146,0,222,0,66,0,89,0,37,0,100,0,6,0,27,0,0,0,0,0,0,0,104,0,152,0,70,0,133,0,90,0,188,0,158,0,220,0,182,0,154,0,231,0,137,0,207,0,123,0,179,0,151,0,174,0,60,0,0,0,32,0,127,0,187,0,181,0,116,0,100,0,135,0,0,0,49,0,194,0,103,0,0,0,112,0,68,0,254,0,211,0,209,0,109,0,181,0,95,0,0,0,234,0,226,0,86,0,147,0,47,0,119,0,86,0,0,0,23,0,87,0,251,0,0,0,30,0,101,0,184,0,105,0,204,0,63,0,81,0,45,0,146,0,161,0,3,0,66,0,114,0,108,0,164,0,0,0,240,0,87,0,207,0,250,0,0,0,0,0,30,0,194,0,96,0,241,0,96,0,179,0,0,0,0,0,226,0,126,0,179,0,138,0,0,0,211,0,0,0,155,0,105,0,53,0,205,0,72,0,174,0,185,0,43,0,24,0,0,0,20,0,93,0,0,0,144,0,233,0,211,0,209,0,0,0,241,0,213,0,169,0,155,0,240,0,95,0,22,0,165,0,148,0,179,0,50,0,169,0,120,0,0,0,226,0,0,0,111,0,0,0,220,0,0,0,193,0,138,0,209,0,217,0,240,0,93,0,40,0,187,0,162,0,149,0,18,0,111,0,214,0,94,0,5,0,35,0,65,0,235,0,87,0,132,0,192,0,219,0,133,0,6,0,214,0,4,0,52,0,163,0,75,0,29,0,176,0,131,0,106,0,252,0,232,0,227,0,191,0,231,0,144,0,0,0,26,0,118,0,121,0,85,0,170,0,0,0,63,0,69,0,188,0,111,0,42,0,179,0,163,0,47,0,0,0,203,0,177,0,250,0,50,0,104,0,94,0,164,0,75,0,0,0,88,0,128,0,0,0,31,0,45,0,0,0,140,0,81,0,252,0,11,0,43,0,181,0,48,0,155,0,0,0,0,0,139,0,15,0,0,0,0,0,23,0,0,0,109,0,142,0,13,0,37,0,98,0,237,0,29,0,131,0,0,0,255,0,143,0,207,0,252,0,0,0,174,0,128,0,238,0,3,0,0,0,148,0,80,0,24,0,0,0,115,0,0,0,227,0,0,0,234,0,52,0,173,0,0,0,65,0,131,0,0,0,225,0,0,0,105,0,185,0,0,0,69,0,149,0,231,0,0,0,104,0,0,0,21,0,0,0,0,0,13,0,132,0,189,0,97,0,56,0,183,0,102,0,0,0,160,0,0,0,157,0,44,0,184,0,103,0,171,0,44,0,5,0,50,0,93,0,0,0,135,0,255,0,0,0,195,0,31,0,70,0,0,0,213,0,0,0,35,0,4,0,24,0,230,0,141,0,95,0,212,0,251,0,0,0,114,0,227,0,251,0,0,0,0,0,237,0,22,0,230,0,131,0,0,0,46,0,0,0,96,0,188,0,0,0,0,0,0,0,111,0,194,0,0,0,137,0,60,0,226,0,0,0,133,0,53,0,0,0,68,0,177,0,46,0,0,0,0,0,0,0,28,0,129,0,147,0,0,0,237,0,0,0,55,0,31,0);
signal scenario_full  : scenario_type := (0,0,59,31,112,31,112,30,154,31,238,31,221,31,225,31,225,30,77,31,100,31,126,31,123,31,123,30,62,31,76,31,31,31,210,31,126,31,140,31,207,31,207,30,122,31,61,31,61,30,147,31,230,31,226,31,114,31,130,31,230,31,171,31,101,31,219,31,18,31,18,30,12,31,66,31,205,31,17,31,177,31,221,31,221,30,7,31,242,31,253,31,232,31,89,31,188,31,167,31,88,31,58,31,88,31,88,30,88,29,75,31,48,31,143,31,187,31,244,31,27,31,53,31,207,31,207,30,19,31,102,31,102,30,188,31,34,31,67,31,6,31,23,31,117,31,140,31,94,31,183,31,183,30,167,31,236,31,39,31,138,31,151,31,209,31,227,31,227,30,168,31,129,31,116,31,160,31,234,31,76,31,76,30,141,31,89,31,252,31,191,31,191,30,153,31,111,31,111,30,72,31,139,31,146,31,159,31,138,31,117,31,117,30,171,31,124,31,239,31,80,31,10,31,145,31,93,31,99,31,12,31,1,31,220,31,220,30,182,31,193,31,43,31,76,31,121,31,66,31,66,30,187,31,85,31,85,30,170,31,170,30,8,31,100,31,217,31,77,31,92,31,90,31,219,31,219,30,164,31,104,31,149,31,37,31,129,31,224,31,42,31,90,31,74,31,81,31,81,30,42,31,42,30,231,31,100,31,249,31,104,31,29,31,29,30,178,31,178,30,8,31,174,31,32,31,154,31,195,31,49,31,49,31,125,31,228,31,97,31,232,31,42,31,133,31,133,30,251,31,251,30,189,31,189,30,140,31,199,31,202,31,235,31,164,31,206,31,52,31,156,31,156,30,181,31,242,31,139,31,144,31,191,31,166,31,153,31,243,31,243,30,37,31,37,30,216,31,142,31,102,31,100,31,101,31,94,31,207,31,103,31,103,30,242,31,47,31,108,31,58,31,87,31,37,31,37,30,133,31,133,30,226,31,113,31,130,31,140,31,201,31,58,31,97,31,58,31,58,30,219,31,40,31,109,31,10,31,211,31,173,31,173,30,84,31,247,31,163,31,163,30,190,31,237,31,180,31,153,31,153,30,153,29,59,31,187,31,3,31,100,31,43,31,43,30,43,31,43,30,43,29,43,28,32,31,169,31,172,31,91,31,122,31,102,31,12,31,161,31,161,30,161,29,204,31,128,31,152,31,152,30,152,29,152,28,111,31,111,30,40,31,22,31,183,31,208,31,244,31,86,31,173,31,110,31,182,31,144,31,144,30,144,29,104,31,33,31,170,31,52,31,250,31,93,31,167,31,149,31,153,31,224,31,110,31,188,31,188,30,224,31,232,31,232,30,134,31,215,31,215,30,201,31,201,30,201,29,201,28,164,31,152,31,208,31,237,31,28,31,140,31,147,31,1,31,32,31,32,30,32,29,242,31,119,31,111,31,222,31,19,31,255,31,246,31,27,31,27,30,92,31,21,31,14,31,146,31,222,31,66,31,89,31,37,31,100,31,6,31,27,31,27,30,27,29,27,28,104,31,152,31,70,31,133,31,90,31,188,31,158,31,220,31,182,31,154,31,231,31,137,31,207,31,123,31,179,31,151,31,174,31,60,31,60,30,32,31,127,31,187,31,181,31,116,31,100,31,135,31,135,30,49,31,194,31,103,31,103,30,112,31,68,31,254,31,211,31,209,31,109,31,181,31,95,31,95,30,234,31,226,31,86,31,147,31,47,31,119,31,86,31,86,30,23,31,87,31,251,31,251,30,30,31,101,31,184,31,105,31,204,31,63,31,81,31,45,31,146,31,161,31,3,31,66,31,114,31,108,31,164,31,164,30,240,31,87,31,207,31,250,31,250,30,250,29,30,31,194,31,96,31,241,31,96,31,179,31,179,30,179,29,226,31,126,31,179,31,138,31,138,30,211,31,211,30,155,31,105,31,53,31,205,31,72,31,174,31,185,31,43,31,24,31,24,30,20,31,93,31,93,30,144,31,233,31,211,31,209,31,209,30,241,31,213,31,169,31,155,31,240,31,95,31,22,31,165,31,148,31,179,31,50,31,169,31,120,31,120,30,226,31,226,30,111,31,111,30,220,31,220,30,193,31,138,31,209,31,217,31,240,31,93,31,40,31,187,31,162,31,149,31,18,31,111,31,214,31,94,31,5,31,35,31,65,31,235,31,87,31,132,31,192,31,219,31,133,31,6,31,214,31,4,31,52,31,163,31,75,31,29,31,176,31,131,31,106,31,252,31,232,31,227,31,191,31,231,31,144,31,144,30,26,31,118,31,121,31,85,31,170,31,170,30,63,31,69,31,188,31,111,31,42,31,179,31,163,31,47,31,47,30,203,31,177,31,250,31,50,31,104,31,94,31,164,31,75,31,75,30,88,31,128,31,128,30,31,31,45,31,45,30,140,31,81,31,252,31,11,31,43,31,181,31,48,31,155,31,155,30,155,29,139,31,15,31,15,30,15,29,23,31,23,30,109,31,142,31,13,31,37,31,98,31,237,31,29,31,131,31,131,30,255,31,143,31,207,31,252,31,252,30,174,31,128,31,238,31,3,31,3,30,148,31,80,31,24,31,24,30,115,31,115,30,227,31,227,30,234,31,52,31,173,31,173,30,65,31,131,31,131,30,225,31,225,30,105,31,185,31,185,30,69,31,149,31,231,31,231,30,104,31,104,30,21,31,21,30,21,29,13,31,132,31,189,31,97,31,56,31,183,31,102,31,102,30,160,31,160,30,157,31,44,31,184,31,103,31,171,31,44,31,5,31,50,31,93,31,93,30,135,31,255,31,255,30,195,31,31,31,70,31,70,30,213,31,213,30,35,31,4,31,24,31,230,31,141,31,95,31,212,31,251,31,251,30,114,31,227,31,251,31,251,30,251,29,237,31,22,31,230,31,131,31,131,30,46,31,46,30,96,31,188,31,188,30,188,29,188,28,111,31,194,31,194,30,137,31,60,31,226,31,226,30,133,31,53,31,53,30,68,31,177,31,46,31,46,30,46,29,46,28,28,31,129,31,147,31,147,30,237,31,237,30,55,31,31,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
