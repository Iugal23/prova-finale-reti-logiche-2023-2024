-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 533;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (64,0,159,0,0,0,165,0,218,0,0,0,31,0,185,0,176,0,8,0,50,0,81,0,97,0,156,0,0,0,0,0,142,0,156,0,6,0,0,0,67,0,13,0,25,0,211,0,0,0,38,0,12,0,133,0,186,0,0,0,184,0,175,0,0,0,159,0,0,0,203,0,87,0,8,0,255,0,202,0,174,0,0,0,215,0,202,0,109,0,154,0,210,0,221,0,0,0,220,0,157,0,65,0,71,0,36,0,0,0,186,0,157,0,162,0,0,0,0,0,45,0,187,0,0,0,0,0,17,0,2,0,0,0,239,0,174,0,41,0,243,0,0,0,130,0,0,0,233,0,0,0,0,0,56,0,85,0,100,0,101,0,109,0,249,0,195,0,232,0,208,0,65,0,24,0,0,0,136,0,193,0,96,0,76,0,252,0,33,0,48,0,0,0,229,0,16,0,0,0,0,0,159,0,0,0,245,0,230,0,0,0,241,0,78,0,186,0,0,0,9,0,0,0,0,0,92,0,0,0,0,0,82,0,147,0,108,0,184,0,0,0,175,0,95,0,118,0,255,0,155,0,217,0,0,0,119,0,202,0,39,0,161,0,171,0,13,0,107,0,177,0,114,0,238,0,0,0,229,0,60,0,0,0,72,0,220,0,169,0,205,0,47,0,245,0,131,0,148,0,88,0,159,0,0,0,46,0,219,0,176,0,180,0,25,0,0,0,133,0,62,0,58,0,248,0,63,0,17,0,127,0,194,0,207,0,184,0,201,0,229,0,2,0,167,0,99,0,148,0,184,0,13,0,95,0,88,0,77,0,249,0,187,0,0,0,0,0,117,0,208,0,203,0,76,0,100,0,213,0,106,0,0,0,54,0,204,0,53,0,0,0,93,0,125,0,77,0,180,0,0,0,199,0,82,0,176,0,141,0,0,0,0,0,113,0,8,0,211,0,182,0,211,0,30,0,206,0,202,0,131,0,52,0,31,0,50,0,162,0,82,0,47,0,0,0,107,0,129,0,0,0,0,0,111,0,96,0,0,0,0,0,27,0,0,0,179,0,161,0,80,0,0,0,239,0,74,0,136,0,23,0,246,0,25,0,0,0,62,0,14,0,0,0,47,0,96,0,137,0,238,0,54,0,214,0,142,0,131,0,219,0,140,0,189,0,10,0,103,0,227,0,93,0,157,0,149,0,0,0,78,0,63,0,118,0,199,0,0,0,5,0,139,0,138,0,117,0,182,0,205,0,74,0,0,0,139,0,65,0,0,0,77,0,58,0,153,0,125,0,204,0,205,0,145,0,2,0,219,0,139,0,43,0,35,0,242,0,115,0,65,0,0,0,25,0,0,0,27,0,151,0,135,0,146,0,124,0,2,0,29,0,63,0,199,0,116,0,106,0,229,0,12,0,109,0,56,0,251,0,0,0,135,0,106,0,126,0,0,0,178,0,0,0,31,0,133,0,5,0,41,0,160,0,25,0,0,0,0,0,0,0,207,0,7,0,0,0,127,0,82,0,190,0,136,0,222,0,25,0,0,0,73,0,90,0,184,0,98,0,0,0,203,0,29,0,32,0,0,0,201,0,78,0,10,0,234,0,125,0,9,0,225,0,0,0,76,0,90,0,0,0,41,0,131,0,136,0,194,0,23,0,140,0,142,0,67,0,34,0,161,0,0,0,117,0,0,0,136,0,87,0,198,0,110,0,173,0,3,0,101,0,123,0,0,0,0,0,51,0,61,0,157,0,51,0,229,0,39,0,0,0,60,0,24,0,237,0,35,0,180,0,232,0,0,0,37,0,109,0,162,0,32,0,9,0,156,0,211,0,186,0,0,0,53,0,17,0,233,0,20,0,38,0,109,0,9,0,138,0,188,0,191,0,0,0,0,0,27,0,73,0,55,0,27,0,140,0,255,0,154,0,186,0,0,0,0,0,247,0,29,0,63,0,0,0,1,0,59,0,185,0,253,0,86,0,0,0,212,0,234,0,19,0,0,0,172,0,175,0,131,0,0,0,79,0,254,0,0,0,170,0,76,0,225,0,49,0,232,0,108,0,248,0,0,0,0,0,7,0,36,0,156,0,98,0,159,0,0,0,16,0,41,0,55,0,0,0,14,0,140,0,83,0,174,0,238,0,0,0,189,0,137,0,54,0,188,0,0,0,84,0,0,0,59,0,97,0,245,0,0,0,132,0,0,0,0,0,0,0,39,0,44,0,0,0,125,0,15,0,42,0,245,0,68,0,101,0,33,0,0,0,28,0,0,0,0,0,96,0,191,0,123,0,213,0,208,0,195,0,88,0,2,0,228,0,185,0,37,0,105,0,238,0,223,0,0,0,224,0,0,0,0,0,217,0,98,0,14,0,0,0,201,0,51,0,0,0,0,0,151,0,232,0,205,0);
signal scenario_full  : scenario_type := (64,31,159,31,159,30,165,31,218,31,218,30,31,31,185,31,176,31,8,31,50,31,81,31,97,31,156,31,156,30,156,29,142,31,156,31,6,31,6,30,67,31,13,31,25,31,211,31,211,30,38,31,12,31,133,31,186,31,186,30,184,31,175,31,175,30,159,31,159,30,203,31,87,31,8,31,255,31,202,31,174,31,174,30,215,31,202,31,109,31,154,31,210,31,221,31,221,30,220,31,157,31,65,31,71,31,36,31,36,30,186,31,157,31,162,31,162,30,162,29,45,31,187,31,187,30,187,29,17,31,2,31,2,30,239,31,174,31,41,31,243,31,243,30,130,31,130,30,233,31,233,30,233,29,56,31,85,31,100,31,101,31,109,31,249,31,195,31,232,31,208,31,65,31,24,31,24,30,136,31,193,31,96,31,76,31,252,31,33,31,48,31,48,30,229,31,16,31,16,30,16,29,159,31,159,30,245,31,230,31,230,30,241,31,78,31,186,31,186,30,9,31,9,30,9,29,92,31,92,30,92,29,82,31,147,31,108,31,184,31,184,30,175,31,95,31,118,31,255,31,155,31,217,31,217,30,119,31,202,31,39,31,161,31,171,31,13,31,107,31,177,31,114,31,238,31,238,30,229,31,60,31,60,30,72,31,220,31,169,31,205,31,47,31,245,31,131,31,148,31,88,31,159,31,159,30,46,31,219,31,176,31,180,31,25,31,25,30,133,31,62,31,58,31,248,31,63,31,17,31,127,31,194,31,207,31,184,31,201,31,229,31,2,31,167,31,99,31,148,31,184,31,13,31,95,31,88,31,77,31,249,31,187,31,187,30,187,29,117,31,208,31,203,31,76,31,100,31,213,31,106,31,106,30,54,31,204,31,53,31,53,30,93,31,125,31,77,31,180,31,180,30,199,31,82,31,176,31,141,31,141,30,141,29,113,31,8,31,211,31,182,31,211,31,30,31,206,31,202,31,131,31,52,31,31,31,50,31,162,31,82,31,47,31,47,30,107,31,129,31,129,30,129,29,111,31,96,31,96,30,96,29,27,31,27,30,179,31,161,31,80,31,80,30,239,31,74,31,136,31,23,31,246,31,25,31,25,30,62,31,14,31,14,30,47,31,96,31,137,31,238,31,54,31,214,31,142,31,131,31,219,31,140,31,189,31,10,31,103,31,227,31,93,31,157,31,149,31,149,30,78,31,63,31,118,31,199,31,199,30,5,31,139,31,138,31,117,31,182,31,205,31,74,31,74,30,139,31,65,31,65,30,77,31,58,31,153,31,125,31,204,31,205,31,145,31,2,31,219,31,139,31,43,31,35,31,242,31,115,31,65,31,65,30,25,31,25,30,27,31,151,31,135,31,146,31,124,31,2,31,29,31,63,31,199,31,116,31,106,31,229,31,12,31,109,31,56,31,251,31,251,30,135,31,106,31,126,31,126,30,178,31,178,30,31,31,133,31,5,31,41,31,160,31,25,31,25,30,25,29,25,28,207,31,7,31,7,30,127,31,82,31,190,31,136,31,222,31,25,31,25,30,73,31,90,31,184,31,98,31,98,30,203,31,29,31,32,31,32,30,201,31,78,31,10,31,234,31,125,31,9,31,225,31,225,30,76,31,90,31,90,30,41,31,131,31,136,31,194,31,23,31,140,31,142,31,67,31,34,31,161,31,161,30,117,31,117,30,136,31,87,31,198,31,110,31,173,31,3,31,101,31,123,31,123,30,123,29,51,31,61,31,157,31,51,31,229,31,39,31,39,30,60,31,24,31,237,31,35,31,180,31,232,31,232,30,37,31,109,31,162,31,32,31,9,31,156,31,211,31,186,31,186,30,53,31,17,31,233,31,20,31,38,31,109,31,9,31,138,31,188,31,191,31,191,30,191,29,27,31,73,31,55,31,27,31,140,31,255,31,154,31,186,31,186,30,186,29,247,31,29,31,63,31,63,30,1,31,59,31,185,31,253,31,86,31,86,30,212,31,234,31,19,31,19,30,172,31,175,31,131,31,131,30,79,31,254,31,254,30,170,31,76,31,225,31,49,31,232,31,108,31,248,31,248,30,248,29,7,31,36,31,156,31,98,31,159,31,159,30,16,31,41,31,55,31,55,30,14,31,140,31,83,31,174,31,238,31,238,30,189,31,137,31,54,31,188,31,188,30,84,31,84,30,59,31,97,31,245,31,245,30,132,31,132,30,132,29,132,28,39,31,44,31,44,30,125,31,15,31,42,31,245,31,68,31,101,31,33,31,33,30,28,31,28,30,28,29,96,31,191,31,123,31,213,31,208,31,195,31,88,31,2,31,228,31,185,31,37,31,105,31,238,31,223,31,223,30,224,31,224,30,224,29,217,31,98,31,14,31,14,30,201,31,51,31,51,30,51,29,151,31,232,31,205,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
