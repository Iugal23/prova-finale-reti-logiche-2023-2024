-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 702;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (64,0,0,0,92,0,0,0,242,0,56,0,0,0,218,0,143,0,130,0,128,0,255,0,216,0,27,0,202,0,209,0,22,0,0,0,22,0,13,0,31,0,85,0,218,0,78,0,86,0,0,0,161,0,235,0,142,0,144,0,155,0,0,0,40,0,0,0,188,0,35,0,253,0,120,0,12,0,223,0,0,0,58,0,239,0,63,0,85,0,0,0,228,0,246,0,135,0,109,0,0,0,30,0,65,0,119,0,15,0,184,0,0,0,0,0,158,0,228,0,31,0,95,0,208,0,94,0,3,0,245,0,73,0,159,0,183,0,3,0,98,0,77,0,0,0,181,0,48,0,227,0,16,0,122,0,187,0,123,0,175,0,0,0,90,0,0,0,220,0,46,0,250,0,0,0,0,0,0,0,59,0,201,0,126,0,0,0,57,0,0,0,0,0,130,0,57,0,135,0,130,0,116,0,0,0,168,0,26,0,101,0,162,0,173,0,33,0,26,0,182,0,142,0,0,0,176,0,25,0,73,0,55,0,24,0,198,0,254,0,106,0,87,0,51,0,218,0,181,0,4,0,61,0,0,0,115,0,7,0,156,0,88,0,51,0,53,0,178,0,251,0,0,0,0,0,51,0,0,0,45,0,230,0,167,0,134,0,77,0,0,0,0,0,0,0,0,0,20,0,0,0,39,0,239,0,114,0,76,0,14,0,120,0,238,0,34,0,5,0,3,0,162,0,237,0,0,0,0,0,0,0,0,0,61,0,156,0,0,0,12,0,81,0,6,0,190,0,147,0,233,0,144,0,146,0,42,0,0,0,98,0,207,0,44,0,0,0,3,0,0,0,181,0,251,0,42,0,72,0,142,0,0,0,32,0,229,0,48,0,126,0,143,0,44,0,225,0,133,0,136,0,0,0,0,0,102,0,122,0,49,0,0,0,0,0,0,0,121,0,104,0,0,0,123,0,91,0,29,0,170,0,26,0,0,0,210,0,235,0,0,0,187,0,123,0,0,0,30,0,196,0,0,0,43,0,4,0,98,0,27,0,216,0,0,0,163,0,59,0,114,0,241,0,106,0,139,0,44,0,118,0,88,0,135,0,69,0,44,0,31,0,3,0,55,0,118,0,18,0,0,0,33,0,159,0,175,0,0,0,35,0,48,0,193,0,23,0,101,0,170,0,10,0,37,0,87,0,12,0,63,0,170,0,71,0,107,0,212,0,0,0,202,0,191,0,143,0,163,0,92,0,28,0,207,0,0,0,238,0,9,0,107,0,213,0,5,0,99,0,134,0,155,0,156,0,156,0,181,0,221,0,57,0,0,0,145,0,92,0,99,0,159,0,139,0,89,0,192,0,215,0,33,0,133,0,13,0,192,0,0,0,0,0,0,0,140,0,88,0,247,0,162,0,147,0,183,0,0,0,203,0,198,0,238,0,78,0,0,0,164,0,96,0,114,0,51,0,38,0,180,0,194,0,0,0,0,0,16,0,125,0,180,0,189,0,70,0,187,0,198,0,35,0,0,0,165,0,98,0,173,0,21,0,171,0,0,0,201,0,168,0,48,0,25,0,255,0,232,0,241,0,255,0,6,0,175,0,80,0,244,0,18,0,151,0,225,0,182,0,0,0,0,0,53,0,145,0,17,0,48,0,70,0,73,0,119,0,63,0,0,0,0,0,253,0,209,0,0,0,155,0,76,0,0,0,29,0,68,0,117,0,0,0,64,0,0,0,235,0,88,0,164,0,87,0,225,0,0,0,71,0,81,0,162,0,216,0,112,0,77,0,191,0,0,0,189,0,0,0,0,0,97,0,74,0,60,0,174,0,38,0,0,0,110,0,216,0,18,0,139,0,0,0,68,0,134,0,189,0,201,0,58,0,78,0,206,0,15,0,218,0,243,0,51,0,0,0,0,0,76,0,50,0,191,0,47,0,245,0,12,0,13,0,82,0,230,0,165,0,0,0,223,0,0,0,170,0,174,0,99,0,106,0,15,0,74,0,0,0,16,0,140,0,197,0,206,0,102,0,57,0,248,0,199,0,8,0,9,0,154,0,250,0,65,0,0,0,54,0,128,0,192,0,104,0,77,0,0,0,236,0,29,0,9,0,228,0,178,0,63,0,46,0,208,0,19,0,160,0,8,0,55,0,229,0,200,0,116,0,0,0,64,0,39,0,200,0,0,0,210,0,27,0,195,0,0,0,0,0,253,0,58,0,139,0,187,0,0,0,231,0,0,0,250,0,16,0,0,0,210,0,70,0,105,0,190,0,87,0,212,0,0,0,46,0,13,0,0,0,61,0,126,0,228,0,0,0,0,0,139,0,0,0,122,0,172,0,150,0,76,0,0,0,0,0,24,0,49,0,200,0,170,0,116,0,250,0,227,0,0,0,210,0,231,0,78,0,162,0,77,0,172,0,170,0,0,0,103,0,0,0,129,0,152,0,0,0,0,0,136,0,145,0,0,0,21,0,0,0,247,0,63,0,0,0,65,0,0,0,11,0,36,0,124,0,118,0,166,0,172,0,174,0,0,0,197,0,190,0,85,0,0,0,190,0,148,0,9,0,135,0,120,0,77,0,0,0,151,0,0,0,33,0,121,0,57,0,100,0,34,0,83,0,236,0,95,0,0,0,87,0,223,0,0,0,103,0,0,0,47,0,159,0,222,0,144,0,190,0,159,0,152,0,233,0,88,0,0,0,157,0,36,0,228,0,0,0,47,0,119,0,0,0,189,0,0,0,35,0,192,0,152,0,195,0,57,0,0,0,217,0,114,0,67,0,0,0,227,0,112,0,153,0,246,0,82,0,95,0,8,0,237,0,0,0,0,0,187,0,136,0,28,0,230,0,92,0,98,0,0,0,8,0,150,0,29,0,84,0,76,0,172,0,38,0,0,0,70,0,19,0,0,0,208,0,0,0,157,0,0,0,132,0,0,0,188,0,37,0,0,0,228,0,141,0,0,0,0,0,90,0,221,0,252,0,200,0,0,0,95,0,6,0,0,0,225,0,39,0,97,0,240,0,178,0,228,0,137,0,30,0,32,0,0,0,183,0,24,0,104,0,6,0,0,0,54,0,23,0,166,0,108,0,0,0,252,0,61,0,184,0,119,0,131,0,0,0,141,0,85,0,32,0,0,0,94,0,8,0,20,0,228,0);
signal scenario_full  : scenario_type := (64,31,64,30,92,31,92,30,242,31,56,31,56,30,218,31,143,31,130,31,128,31,255,31,216,31,27,31,202,31,209,31,22,31,22,30,22,31,13,31,31,31,85,31,218,31,78,31,86,31,86,30,161,31,235,31,142,31,144,31,155,31,155,30,40,31,40,30,188,31,35,31,253,31,120,31,12,31,223,31,223,30,58,31,239,31,63,31,85,31,85,30,228,31,246,31,135,31,109,31,109,30,30,31,65,31,119,31,15,31,184,31,184,30,184,29,158,31,228,31,31,31,95,31,208,31,94,31,3,31,245,31,73,31,159,31,183,31,3,31,98,31,77,31,77,30,181,31,48,31,227,31,16,31,122,31,187,31,123,31,175,31,175,30,90,31,90,30,220,31,46,31,250,31,250,30,250,29,250,28,59,31,201,31,126,31,126,30,57,31,57,30,57,29,130,31,57,31,135,31,130,31,116,31,116,30,168,31,26,31,101,31,162,31,173,31,33,31,26,31,182,31,142,31,142,30,176,31,25,31,73,31,55,31,24,31,198,31,254,31,106,31,87,31,51,31,218,31,181,31,4,31,61,31,61,30,115,31,7,31,156,31,88,31,51,31,53,31,178,31,251,31,251,30,251,29,51,31,51,30,45,31,230,31,167,31,134,31,77,31,77,30,77,29,77,28,77,27,20,31,20,30,39,31,239,31,114,31,76,31,14,31,120,31,238,31,34,31,5,31,3,31,162,31,237,31,237,30,237,29,237,28,237,27,61,31,156,31,156,30,12,31,81,31,6,31,190,31,147,31,233,31,144,31,146,31,42,31,42,30,98,31,207,31,44,31,44,30,3,31,3,30,181,31,251,31,42,31,72,31,142,31,142,30,32,31,229,31,48,31,126,31,143,31,44,31,225,31,133,31,136,31,136,30,136,29,102,31,122,31,49,31,49,30,49,29,49,28,121,31,104,31,104,30,123,31,91,31,29,31,170,31,26,31,26,30,210,31,235,31,235,30,187,31,123,31,123,30,30,31,196,31,196,30,43,31,4,31,98,31,27,31,216,31,216,30,163,31,59,31,114,31,241,31,106,31,139,31,44,31,118,31,88,31,135,31,69,31,44,31,31,31,3,31,55,31,118,31,18,31,18,30,33,31,159,31,175,31,175,30,35,31,48,31,193,31,23,31,101,31,170,31,10,31,37,31,87,31,12,31,63,31,170,31,71,31,107,31,212,31,212,30,202,31,191,31,143,31,163,31,92,31,28,31,207,31,207,30,238,31,9,31,107,31,213,31,5,31,99,31,134,31,155,31,156,31,156,31,181,31,221,31,57,31,57,30,145,31,92,31,99,31,159,31,139,31,89,31,192,31,215,31,33,31,133,31,13,31,192,31,192,30,192,29,192,28,140,31,88,31,247,31,162,31,147,31,183,31,183,30,203,31,198,31,238,31,78,31,78,30,164,31,96,31,114,31,51,31,38,31,180,31,194,31,194,30,194,29,16,31,125,31,180,31,189,31,70,31,187,31,198,31,35,31,35,30,165,31,98,31,173,31,21,31,171,31,171,30,201,31,168,31,48,31,25,31,255,31,232,31,241,31,255,31,6,31,175,31,80,31,244,31,18,31,151,31,225,31,182,31,182,30,182,29,53,31,145,31,17,31,48,31,70,31,73,31,119,31,63,31,63,30,63,29,253,31,209,31,209,30,155,31,76,31,76,30,29,31,68,31,117,31,117,30,64,31,64,30,235,31,88,31,164,31,87,31,225,31,225,30,71,31,81,31,162,31,216,31,112,31,77,31,191,31,191,30,189,31,189,30,189,29,97,31,74,31,60,31,174,31,38,31,38,30,110,31,216,31,18,31,139,31,139,30,68,31,134,31,189,31,201,31,58,31,78,31,206,31,15,31,218,31,243,31,51,31,51,30,51,29,76,31,50,31,191,31,47,31,245,31,12,31,13,31,82,31,230,31,165,31,165,30,223,31,223,30,170,31,174,31,99,31,106,31,15,31,74,31,74,30,16,31,140,31,197,31,206,31,102,31,57,31,248,31,199,31,8,31,9,31,154,31,250,31,65,31,65,30,54,31,128,31,192,31,104,31,77,31,77,30,236,31,29,31,9,31,228,31,178,31,63,31,46,31,208,31,19,31,160,31,8,31,55,31,229,31,200,31,116,31,116,30,64,31,39,31,200,31,200,30,210,31,27,31,195,31,195,30,195,29,253,31,58,31,139,31,187,31,187,30,231,31,231,30,250,31,16,31,16,30,210,31,70,31,105,31,190,31,87,31,212,31,212,30,46,31,13,31,13,30,61,31,126,31,228,31,228,30,228,29,139,31,139,30,122,31,172,31,150,31,76,31,76,30,76,29,24,31,49,31,200,31,170,31,116,31,250,31,227,31,227,30,210,31,231,31,78,31,162,31,77,31,172,31,170,31,170,30,103,31,103,30,129,31,152,31,152,30,152,29,136,31,145,31,145,30,21,31,21,30,247,31,63,31,63,30,65,31,65,30,11,31,36,31,124,31,118,31,166,31,172,31,174,31,174,30,197,31,190,31,85,31,85,30,190,31,148,31,9,31,135,31,120,31,77,31,77,30,151,31,151,30,33,31,121,31,57,31,100,31,34,31,83,31,236,31,95,31,95,30,87,31,223,31,223,30,103,31,103,30,47,31,159,31,222,31,144,31,190,31,159,31,152,31,233,31,88,31,88,30,157,31,36,31,228,31,228,30,47,31,119,31,119,30,189,31,189,30,35,31,192,31,152,31,195,31,57,31,57,30,217,31,114,31,67,31,67,30,227,31,112,31,153,31,246,31,82,31,95,31,8,31,237,31,237,30,237,29,187,31,136,31,28,31,230,31,92,31,98,31,98,30,8,31,150,31,29,31,84,31,76,31,172,31,38,31,38,30,70,31,19,31,19,30,208,31,208,30,157,31,157,30,132,31,132,30,188,31,37,31,37,30,228,31,141,31,141,30,141,29,90,31,221,31,252,31,200,31,200,30,95,31,6,31,6,30,225,31,39,31,97,31,240,31,178,31,228,31,137,31,30,31,32,31,32,30,183,31,24,31,104,31,6,31,6,30,54,31,23,31,166,31,108,31,108,30,252,31,61,31,184,31,119,31,131,31,131,30,141,31,85,31,32,31,32,30,94,31,8,31,20,31,228,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
