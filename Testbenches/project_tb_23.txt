-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 540;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (25,0,93,0,100,0,3,0,85,0,104,0,111,0,78,0,186,0,19,0,39,0,195,0,44,0,74,0,19,0,191,0,153,0,238,0,221,0,182,0,219,0,97,0,205,0,208,0,127,0,193,0,103,0,170,0,114,0,214,0,58,0,5,0,30,0,8,0,0,0,235,0,71,0,59,0,53,0,0,0,0,0,80,0,85,0,115,0,26,0,180,0,142,0,98,0,0,0,73,0,0,0,24,0,48,0,0,0,169,0,0,0,0,0,0,0,0,0,6,0,182,0,113,0,0,0,132,0,11,0,25,0,167,0,209,0,158,0,233,0,0,0,228,0,218,0,234,0,93,0,0,0,76,0,85,0,40,0,161,0,0,0,113,0,82,0,110,0,47,0,117,0,175,0,176,0,255,0,58,0,0,0,106,0,72,0,0,0,0,0,163,0,0,0,0,0,34,0,246,0,144,0,53,0,113,0,88,0,15,0,139,0,67,0,58,0,194,0,205,0,135,0,61,0,0,0,201,0,17,0,190,0,145,0,12,0,0,0,175,0,51,0,209,0,193,0,236,0,197,0,49,0,0,0,131,0,31,0,33,0,33,0,128,0,214,0,156,0,0,0,108,0,202,0,132,0,0,0,225,0,155,0,243,0,181,0,0,0,135,0,0,0,122,0,240,0,0,0,90,0,68,0,0,0,16,0,8,0,58,0,14,0,219,0,0,0,0,0,216,0,87,0,37,0,11,0,88,0,211,0,244,0,117,0,0,0,0,0,203,0,103,0,34,0,175,0,73,0,195,0,198,0,39,0,188,0,0,0,242,0,242,0,9,0,216,0,197,0,0,0,133,0,173,0,233,0,94,0,72,0,188,0,0,0,72,0,0,0,113,0,116,0,14,0,244,0,153,0,143,0,73,0,235,0,132,0,129,0,78,0,235,0,38,0,135,0,170,0,0,0,0,0,122,0,67,0,11,0,67,0,221,0,225,0,224,0,56,0,0,0,0,0,0,0,127,0,91,0,29,0,0,0,30,0,0,0,25,0,196,0,0,0,133,0,169,0,139,0,0,0,0,0,0,0,117,0,216,0,0,0,28,0,21,0,168,0,113,0,0,0,0,0,138,0,77,0,200,0,80,0,0,0,80,0,181,0,198,0,77,0,139,0,0,0,148,0,226,0,154,0,221,0,235,0,159,0,226,0,14,0,28,0,141,0,0,0,6,0,138,0,120,0,196,0,80,0,217,0,196,0,83,0,0,0,0,0,80,0,62,0,24,0,50,0,127,0,0,0,0,0,114,0,47,0,0,0,139,0,0,0,70,0,128,0,216,0,0,0,135,0,70,0,148,0,175,0,50,0,81,0,242,0,143,0,48,0,121,0,111,0,128,0,176,0,24,0,0,0,0,0,191,0,32,0,163,0,140,0,142,0,38,0,0,0,164,0,0,0,0,0,0,0,0,0,40,0,137,0,53,0,206,0,0,0,223,0,0,0,242,0,84,0,122,0,1,0,251,0,171,0,0,0,115,0,115,0,147,0,108,0,76,0,18,0,107,0,178,0,53,0,0,0,0,0,0,0,22,0,246,0,187,0,0,0,216,0,0,0,68,0,0,0,136,0,97,0,240,0,27,0,93,0,0,0,131,0,167,0,51,0,34,0,48,0,0,0,0,0,162,0,235,0,80,0,186,0,0,0,0,0,58,0,0,0,114,0,0,0,248,0,0,0,20,0,0,0,241,0,226,0,180,0,0,0,137,0,43,0,117,0,127,0,41,0,0,0,34,0,77,0,240,0,200,0,191,0,231,0,233,0,167,0,238,0,208,0,41,0,72,0,47,0,0,0,195,0,0,0,51,0,81,0,189,0,32,0,119,0,64,0,19,0,245,0,143,0,153,0,0,0,19,0,0,0,73,0,89,0,220,0,232,0,255,0,143,0,95,0,15,0,1,0,0,0,162,0,251,0,216,0,13,0,67,0,196,0,218,0,144,0,201,0,44,0,92,0,0,0,99,0,0,0,199,0,0,0,101,0,251,0,0,0,167,0,241,0,217,0,250,0,163,0,202,0,15,0,2,0,0,0,20,0,229,0,49,0,185,0,167,0,112,0,182,0,39,0,204,0,0,0,0,0,115,0,226,0,144,0,11,0,164,0,31,0,246,0,6,0,94,0,70,0,72,0,204,0,168,0,7,0,26,0,151,0,0,0,0,0,164,0,170,0,50,0,195,0,110,0,196,0,34,0,45,0,174,0,168,0,46,0,210,0,63,0,222,0,77,0,137,0,95,0,1,0,254,0,84,0,66,0,104,0,252,0,0,0,0,0,206,0,0,0,168,0,26,0,0,0,0,0,0,0,48,0,87,0,134,0,210,0,27,0,182,0,138,0,130,0,232,0,243,0,165,0,176,0,143,0,254,0,176,0,219,0,0,0,0,0,68,0);
signal scenario_full  : scenario_type := (25,31,93,31,100,31,3,31,85,31,104,31,111,31,78,31,186,31,19,31,39,31,195,31,44,31,74,31,19,31,191,31,153,31,238,31,221,31,182,31,219,31,97,31,205,31,208,31,127,31,193,31,103,31,170,31,114,31,214,31,58,31,5,31,30,31,8,31,8,30,235,31,71,31,59,31,53,31,53,30,53,29,80,31,85,31,115,31,26,31,180,31,142,31,98,31,98,30,73,31,73,30,24,31,48,31,48,30,169,31,169,30,169,29,169,28,169,27,6,31,182,31,113,31,113,30,132,31,11,31,25,31,167,31,209,31,158,31,233,31,233,30,228,31,218,31,234,31,93,31,93,30,76,31,85,31,40,31,161,31,161,30,113,31,82,31,110,31,47,31,117,31,175,31,176,31,255,31,58,31,58,30,106,31,72,31,72,30,72,29,163,31,163,30,163,29,34,31,246,31,144,31,53,31,113,31,88,31,15,31,139,31,67,31,58,31,194,31,205,31,135,31,61,31,61,30,201,31,17,31,190,31,145,31,12,31,12,30,175,31,51,31,209,31,193,31,236,31,197,31,49,31,49,30,131,31,31,31,33,31,33,31,128,31,214,31,156,31,156,30,108,31,202,31,132,31,132,30,225,31,155,31,243,31,181,31,181,30,135,31,135,30,122,31,240,31,240,30,90,31,68,31,68,30,16,31,8,31,58,31,14,31,219,31,219,30,219,29,216,31,87,31,37,31,11,31,88,31,211,31,244,31,117,31,117,30,117,29,203,31,103,31,34,31,175,31,73,31,195,31,198,31,39,31,188,31,188,30,242,31,242,31,9,31,216,31,197,31,197,30,133,31,173,31,233,31,94,31,72,31,188,31,188,30,72,31,72,30,113,31,116,31,14,31,244,31,153,31,143,31,73,31,235,31,132,31,129,31,78,31,235,31,38,31,135,31,170,31,170,30,170,29,122,31,67,31,11,31,67,31,221,31,225,31,224,31,56,31,56,30,56,29,56,28,127,31,91,31,29,31,29,30,30,31,30,30,25,31,196,31,196,30,133,31,169,31,139,31,139,30,139,29,139,28,117,31,216,31,216,30,28,31,21,31,168,31,113,31,113,30,113,29,138,31,77,31,200,31,80,31,80,30,80,31,181,31,198,31,77,31,139,31,139,30,148,31,226,31,154,31,221,31,235,31,159,31,226,31,14,31,28,31,141,31,141,30,6,31,138,31,120,31,196,31,80,31,217,31,196,31,83,31,83,30,83,29,80,31,62,31,24,31,50,31,127,31,127,30,127,29,114,31,47,31,47,30,139,31,139,30,70,31,128,31,216,31,216,30,135,31,70,31,148,31,175,31,50,31,81,31,242,31,143,31,48,31,121,31,111,31,128,31,176,31,24,31,24,30,24,29,191,31,32,31,163,31,140,31,142,31,38,31,38,30,164,31,164,30,164,29,164,28,164,27,40,31,137,31,53,31,206,31,206,30,223,31,223,30,242,31,84,31,122,31,1,31,251,31,171,31,171,30,115,31,115,31,147,31,108,31,76,31,18,31,107,31,178,31,53,31,53,30,53,29,53,28,22,31,246,31,187,31,187,30,216,31,216,30,68,31,68,30,136,31,97,31,240,31,27,31,93,31,93,30,131,31,167,31,51,31,34,31,48,31,48,30,48,29,162,31,235,31,80,31,186,31,186,30,186,29,58,31,58,30,114,31,114,30,248,31,248,30,20,31,20,30,241,31,226,31,180,31,180,30,137,31,43,31,117,31,127,31,41,31,41,30,34,31,77,31,240,31,200,31,191,31,231,31,233,31,167,31,238,31,208,31,41,31,72,31,47,31,47,30,195,31,195,30,51,31,81,31,189,31,32,31,119,31,64,31,19,31,245,31,143,31,153,31,153,30,19,31,19,30,73,31,89,31,220,31,232,31,255,31,143,31,95,31,15,31,1,31,1,30,162,31,251,31,216,31,13,31,67,31,196,31,218,31,144,31,201,31,44,31,92,31,92,30,99,31,99,30,199,31,199,30,101,31,251,31,251,30,167,31,241,31,217,31,250,31,163,31,202,31,15,31,2,31,2,30,20,31,229,31,49,31,185,31,167,31,112,31,182,31,39,31,204,31,204,30,204,29,115,31,226,31,144,31,11,31,164,31,31,31,246,31,6,31,94,31,70,31,72,31,204,31,168,31,7,31,26,31,151,31,151,30,151,29,164,31,170,31,50,31,195,31,110,31,196,31,34,31,45,31,174,31,168,31,46,31,210,31,63,31,222,31,77,31,137,31,95,31,1,31,254,31,84,31,66,31,104,31,252,31,252,30,252,29,206,31,206,30,168,31,26,31,26,30,26,29,26,28,48,31,87,31,134,31,210,31,27,31,182,31,138,31,130,31,232,31,243,31,165,31,176,31,143,31,254,31,176,31,219,31,219,30,219,29,68,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
