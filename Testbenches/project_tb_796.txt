-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 554;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (57,0,0,0,0,0,145,0,0,0,110,0,88,0,127,0,0,0,139,0,136,0,23,0,68,0,52,0,226,0,209,0,245,0,0,0,0,0,0,0,110,0,84,0,26,0,0,0,0,0,220,0,40,0,0,0,165,0,85,0,0,0,0,0,115,0,4,0,127,0,233,0,246,0,0,0,87,0,173,0,0,0,238,0,37,0,170,0,78,0,178,0,0,0,0,0,76,0,160,0,255,0,0,0,153,0,178,0,99,0,165,0,43,0,248,0,99,0,3,0,0,0,0,0,23,0,0,0,82,0,109,0,0,0,11,0,201,0,0,0,248,0,0,0,22,0,36,0,0,0,18,0,180,0,29,0,64,0,231,0,54,0,232,0,0,0,0,0,93,0,189,0,231,0,139,0,186,0,47,0,137,0,0,0,72,0,26,0,153,0,192,0,230,0,207,0,21,0,0,0,2,0,6,0,98,0,145,0,114,0,107,0,0,0,0,0,0,0,7,0,68,0,0,0,233,0,202,0,113,0,67,0,139,0,0,0,144,0,124,0,241,0,137,0,145,0,170,0,0,0,16,0,0,0,178,0,0,0,51,0,251,0,0,0,153,0,138,0,57,0,0,0,10,0,0,0,0,0,244,0,0,0,205,0,117,0,0,0,89,0,0,0,74,0,236,0,135,0,0,0,113,0,52,0,113,0,211,0,162,0,198,0,210,0,101,0,133,0,223,0,218,0,128,0,0,0,52,0,0,0,66,0,177,0,254,0,137,0,0,0,0,0,222,0,150,0,249,0,60,0,0,0,0,0,249,0,225,0,182,0,0,0,162,0,91,0,239,0,66,0,246,0,189,0,0,0,239,0,131,0,30,0,39,0,0,0,89,0,149,0,191,0,142,0,0,0,0,0,142,0,158,0,0,0,6,0,246,0,195,0,0,0,242,0,181,0,221,0,108,0,0,0,1,0,175,0,132,0,193,0,0,0,164,0,191,0,17,0,0,0,215,0,0,0,132,0,0,0,232,0,0,0,224,0,0,0,108,0,18,0,0,0,0,0,238,0,248,0,55,0,128,0,85,0,77,0,0,0,18,0,0,0,124,0,0,0,239,0,35,0,44,0,89,0,0,0,75,0,69,0,205,0,106,0,195,0,0,0,175,0,224,0,55,0,198,0,0,0,210,0,176,0,175,0,107,0,168,0,190,0,66,0,0,0,5,0,196,0,229,0,158,0,232,0,0,0,220,0,162,0,34,0,78,0,212,0,155,0,116,0,250,0,63,0,219,0,111,0,199,0,12,0,219,0,138,0,0,0,0,0,26,0,72,0,121,0,0,0,0,0,0,0,39,0,230,0,14,0,42,0,145,0,59,0,218,0,216,0,228,0,15,0,208,0,84,0,114,0,0,0,0,0,137,0,23,0,188,0,239,0,205,0,39,0,138,0,0,0,166,0,42,0,0,0,134,0,99,0,247,0,67,0,109,0,113,0,0,0,0,0,0,0,0,0,31,0,14,0,0,0,118,0,0,0,0,0,252,0,65,0,212,0,160,0,212,0,0,0,17,0,156,0,67,0,49,0,0,0,152,0,180,0,199,0,119,0,73,0,252,0,208,0,220,0,118,0,7,0,112,0,0,0,0,0,51,0,62,0,101,0,52,0,0,0,221,0,54,0,33,0,236,0,0,0,71,0,22,0,204,0,242,0,249,0,0,0,10,0,149,0,121,0,40,0,0,0,0,0,0,0,0,0,184,0,175,0,113,0,51,0,222,0,75,0,106,0,138,0,167,0,126,0,46,0,0,0,40,0,153,0,0,0,0,0,140,0,0,0,89,0,116,0,84,0,9,0,0,0,0,0,156,0,83,0,109,0,33,0,244,0,108,0,78,0,0,0,161,0,0,0,23,0,0,0,64,0,16,0,245,0,203,0,41,0,176,0,205,0,213,0,66,0,15,0,66,0,23,0,143,0,0,0,95,0,8,0,0,0,196,0,0,0,184,0,113,0,0,0,235,0,134,0,0,0,76,0,69,0,83,0,7,0,133,0,7,0,16,0,74,0,6,0,0,0,178,0,24,0,141,0,53,0,9,0,173,0,45,0,39,0,0,0,113,0,154,0,0,0,14,0,6,0,101,0,237,0,229,0,29,0,71,0,180,0,73,0,140,0,70,0,85,0,0,0,50,0,21,0,56,0,43,0,219,0,39,0,225,0,27,0,49,0,131,0,254,0,157,0,69,0,70,0,187,0,126,0,170,0,92,0,135,0,43,0,90,0,210,0,93,0,86,0,94,0,0,0,0,0,0,0,128,0,185,0,100,0,215,0,197,0,44,0,0,0,18,0,89,0,162,0,179,0,0,0,16,0,3,0,74,0,77,0,60,0,155,0,8,0,54,0,0,0,185,0,178,0,164,0,248,0,171,0,138,0,165,0,0,0,221,0,192,0,0,0,0,0,4,0,127,0,193,0,158,0,133,0,0,0,0,0,0,0,0,0,206,0,6,0);
signal scenario_full  : scenario_type := (57,31,57,30,57,29,145,31,145,30,110,31,88,31,127,31,127,30,139,31,136,31,23,31,68,31,52,31,226,31,209,31,245,31,245,30,245,29,245,28,110,31,84,31,26,31,26,30,26,29,220,31,40,31,40,30,165,31,85,31,85,30,85,29,115,31,4,31,127,31,233,31,246,31,246,30,87,31,173,31,173,30,238,31,37,31,170,31,78,31,178,31,178,30,178,29,76,31,160,31,255,31,255,30,153,31,178,31,99,31,165,31,43,31,248,31,99,31,3,31,3,30,3,29,23,31,23,30,82,31,109,31,109,30,11,31,201,31,201,30,248,31,248,30,22,31,36,31,36,30,18,31,180,31,29,31,64,31,231,31,54,31,232,31,232,30,232,29,93,31,189,31,231,31,139,31,186,31,47,31,137,31,137,30,72,31,26,31,153,31,192,31,230,31,207,31,21,31,21,30,2,31,6,31,98,31,145,31,114,31,107,31,107,30,107,29,107,28,7,31,68,31,68,30,233,31,202,31,113,31,67,31,139,31,139,30,144,31,124,31,241,31,137,31,145,31,170,31,170,30,16,31,16,30,178,31,178,30,51,31,251,31,251,30,153,31,138,31,57,31,57,30,10,31,10,30,10,29,244,31,244,30,205,31,117,31,117,30,89,31,89,30,74,31,236,31,135,31,135,30,113,31,52,31,113,31,211,31,162,31,198,31,210,31,101,31,133,31,223,31,218,31,128,31,128,30,52,31,52,30,66,31,177,31,254,31,137,31,137,30,137,29,222,31,150,31,249,31,60,31,60,30,60,29,249,31,225,31,182,31,182,30,162,31,91,31,239,31,66,31,246,31,189,31,189,30,239,31,131,31,30,31,39,31,39,30,89,31,149,31,191,31,142,31,142,30,142,29,142,31,158,31,158,30,6,31,246,31,195,31,195,30,242,31,181,31,221,31,108,31,108,30,1,31,175,31,132,31,193,31,193,30,164,31,191,31,17,31,17,30,215,31,215,30,132,31,132,30,232,31,232,30,224,31,224,30,108,31,18,31,18,30,18,29,238,31,248,31,55,31,128,31,85,31,77,31,77,30,18,31,18,30,124,31,124,30,239,31,35,31,44,31,89,31,89,30,75,31,69,31,205,31,106,31,195,31,195,30,175,31,224,31,55,31,198,31,198,30,210,31,176,31,175,31,107,31,168,31,190,31,66,31,66,30,5,31,196,31,229,31,158,31,232,31,232,30,220,31,162,31,34,31,78,31,212,31,155,31,116,31,250,31,63,31,219,31,111,31,199,31,12,31,219,31,138,31,138,30,138,29,26,31,72,31,121,31,121,30,121,29,121,28,39,31,230,31,14,31,42,31,145,31,59,31,218,31,216,31,228,31,15,31,208,31,84,31,114,31,114,30,114,29,137,31,23,31,188,31,239,31,205,31,39,31,138,31,138,30,166,31,42,31,42,30,134,31,99,31,247,31,67,31,109,31,113,31,113,30,113,29,113,28,113,27,31,31,14,31,14,30,118,31,118,30,118,29,252,31,65,31,212,31,160,31,212,31,212,30,17,31,156,31,67,31,49,31,49,30,152,31,180,31,199,31,119,31,73,31,252,31,208,31,220,31,118,31,7,31,112,31,112,30,112,29,51,31,62,31,101,31,52,31,52,30,221,31,54,31,33,31,236,31,236,30,71,31,22,31,204,31,242,31,249,31,249,30,10,31,149,31,121,31,40,31,40,30,40,29,40,28,40,27,184,31,175,31,113,31,51,31,222,31,75,31,106,31,138,31,167,31,126,31,46,31,46,30,40,31,153,31,153,30,153,29,140,31,140,30,89,31,116,31,84,31,9,31,9,30,9,29,156,31,83,31,109,31,33,31,244,31,108,31,78,31,78,30,161,31,161,30,23,31,23,30,64,31,16,31,245,31,203,31,41,31,176,31,205,31,213,31,66,31,15,31,66,31,23,31,143,31,143,30,95,31,8,31,8,30,196,31,196,30,184,31,113,31,113,30,235,31,134,31,134,30,76,31,69,31,83,31,7,31,133,31,7,31,16,31,74,31,6,31,6,30,178,31,24,31,141,31,53,31,9,31,173,31,45,31,39,31,39,30,113,31,154,31,154,30,14,31,6,31,101,31,237,31,229,31,29,31,71,31,180,31,73,31,140,31,70,31,85,31,85,30,50,31,21,31,56,31,43,31,219,31,39,31,225,31,27,31,49,31,131,31,254,31,157,31,69,31,70,31,187,31,126,31,170,31,92,31,135,31,43,31,90,31,210,31,93,31,86,31,94,31,94,30,94,29,94,28,128,31,185,31,100,31,215,31,197,31,44,31,44,30,18,31,89,31,162,31,179,31,179,30,16,31,3,31,74,31,77,31,60,31,155,31,8,31,54,31,54,30,185,31,178,31,164,31,248,31,171,31,138,31,165,31,165,30,221,31,192,31,192,30,192,29,4,31,127,31,193,31,158,31,133,31,133,30,133,29,133,28,133,27,206,31,6,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
