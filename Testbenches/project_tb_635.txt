-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 393;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (12,0,62,0,0,0,129,0,70,0,0,0,151,0,114,0,102,0,0,0,113,0,75,0,243,0,219,0,215,0,0,0,145,0,249,0,27,0,43,0,199,0,0,0,152,0,51,0,236,0,183,0,234,0,17,0,142,0,185,0,96,0,85,0,0,0,33,0,170,0,0,0,37,0,195,0,0,0,158,0,245,0,0,0,0,0,49,0,213,0,129,0,239,0,177,0,231,0,152,0,146,0,29,0,10,0,36,0,153,0,19,0,0,0,43,0,202,0,205,0,157,0,166,0,227,0,176,0,188,0,0,0,63,0,92,0,119,0,1,0,246,0,56,0,235,0,194,0,244,0,0,0,22,0,12,0,160,0,124,0,0,0,127,0,121,0,254,0,93,0,39,0,176,0,49,0,104,0,81,0,90,0,243,0,174,0,253,0,235,0,79,0,137,0,184,0,251,0,80,0,0,0,243,0,163,0,120,0,151,0,159,0,21,0,24,0,220,0,103,0,181,0,196,0,179,0,0,0,0,0,216,0,253,0,0,0,235,0,75,0,213,0,0,0,176,0,223,0,231,0,0,0,72,0,38,0,4,0,0,0,209,0,31,0,45,0,221,0,0,0,229,0,193,0,103,0,232,0,0,0,137,0,229,0,43,0,62,0,254,0,0,0,0,0,253,0,0,0,44,0,96,0,30,0,58,0,0,0,0,0,102,0,193,0,0,0,32,0,109,0,170,0,165,0,62,0,179,0,240,0,0,0,29,0,0,0,76,0,0,0,185,0,25,0,40,0,0,0,75,0,114,0,122,0,253,0,214,0,245,0,62,0,82,0,0,0,74,0,0,0,191,0,0,0,203,0,30,0,79,0,11,0,0,0,91,0,88,0,52,0,130,0,0,0,234,0,34,0,105,0,104,0,105,0,0,0,59,0,0,0,0,0,85,0,118,0,226,0,225,0,207,0,0,0,23,0,35,0,2,0,148,0,20,0,63,0,212,0,147,0,21,0,243,0,214,0,0,0,0,0,8,0,248,0,234,0,22,0,0,0,19,0,167,0,204,0,211,0,149,0,197,0,77,0,248,0,177,0,189,0,0,0,86,0,150,0,13,0,233,0,15,0,198,0,203,0,174,0,131,0,0,0,109,0,196,0,156,0,80,0,0,0,89,0,36,0,192,0,0,0,74,0,226,0,19,0,160,0,246,0,224,0,59,0,10,0,0,0,43,0,93,0,104,0,65,0,34,0,99,0,224,0,222,0,253,0,191,0,0,0,2,0,251,0,0,0,0,0,0,0,0,0,206,0,127,0,68,0,19,0,156,0,206,0,118,0,224,0,14,0,35,0,98,0,0,0,190,0,183,0,193,0,0,0,72,0,0,0,0,0,110,0,0,0,43,0,0,0,224,0,148,0,68,0,126,0,160,0,162,0,0,0,10,0,0,0,109,0,228,0,225,0,169,0,244,0,3,0,28,0,162,0,0,0,40,0,206,0,142,0,0,0,3,0,79,0,8,0,184,0,123,0,109,0,0,0,239,0,232,0,179,0,247,0,47,0,91,0,7,0,49,0,13,0,237,0,176,0,164,0,244,0,204,0,123,0,26,0,191,0,40,0,176,0,115,0,93,0,137,0,143,0,199,0,0,0,0,0,5,0,202,0,0,0,84,0,101,0,240,0,197,0,215,0,247,0,152,0,193,0,254,0,241,0,87,0,135,0,221,0,0,0,96,0,123,0,183,0,246,0,112,0,121,0,156,0,0,0,133,0,10,0,0,0,135,0);
signal scenario_full  : scenario_type := (12,31,62,31,62,30,129,31,70,31,70,30,151,31,114,31,102,31,102,30,113,31,75,31,243,31,219,31,215,31,215,30,145,31,249,31,27,31,43,31,199,31,199,30,152,31,51,31,236,31,183,31,234,31,17,31,142,31,185,31,96,31,85,31,85,30,33,31,170,31,170,30,37,31,195,31,195,30,158,31,245,31,245,30,245,29,49,31,213,31,129,31,239,31,177,31,231,31,152,31,146,31,29,31,10,31,36,31,153,31,19,31,19,30,43,31,202,31,205,31,157,31,166,31,227,31,176,31,188,31,188,30,63,31,92,31,119,31,1,31,246,31,56,31,235,31,194,31,244,31,244,30,22,31,12,31,160,31,124,31,124,30,127,31,121,31,254,31,93,31,39,31,176,31,49,31,104,31,81,31,90,31,243,31,174,31,253,31,235,31,79,31,137,31,184,31,251,31,80,31,80,30,243,31,163,31,120,31,151,31,159,31,21,31,24,31,220,31,103,31,181,31,196,31,179,31,179,30,179,29,216,31,253,31,253,30,235,31,75,31,213,31,213,30,176,31,223,31,231,31,231,30,72,31,38,31,4,31,4,30,209,31,31,31,45,31,221,31,221,30,229,31,193,31,103,31,232,31,232,30,137,31,229,31,43,31,62,31,254,31,254,30,254,29,253,31,253,30,44,31,96,31,30,31,58,31,58,30,58,29,102,31,193,31,193,30,32,31,109,31,170,31,165,31,62,31,179,31,240,31,240,30,29,31,29,30,76,31,76,30,185,31,25,31,40,31,40,30,75,31,114,31,122,31,253,31,214,31,245,31,62,31,82,31,82,30,74,31,74,30,191,31,191,30,203,31,30,31,79,31,11,31,11,30,91,31,88,31,52,31,130,31,130,30,234,31,34,31,105,31,104,31,105,31,105,30,59,31,59,30,59,29,85,31,118,31,226,31,225,31,207,31,207,30,23,31,35,31,2,31,148,31,20,31,63,31,212,31,147,31,21,31,243,31,214,31,214,30,214,29,8,31,248,31,234,31,22,31,22,30,19,31,167,31,204,31,211,31,149,31,197,31,77,31,248,31,177,31,189,31,189,30,86,31,150,31,13,31,233,31,15,31,198,31,203,31,174,31,131,31,131,30,109,31,196,31,156,31,80,31,80,30,89,31,36,31,192,31,192,30,74,31,226,31,19,31,160,31,246,31,224,31,59,31,10,31,10,30,43,31,93,31,104,31,65,31,34,31,99,31,224,31,222,31,253,31,191,31,191,30,2,31,251,31,251,30,251,29,251,28,251,27,206,31,127,31,68,31,19,31,156,31,206,31,118,31,224,31,14,31,35,31,98,31,98,30,190,31,183,31,193,31,193,30,72,31,72,30,72,29,110,31,110,30,43,31,43,30,224,31,148,31,68,31,126,31,160,31,162,31,162,30,10,31,10,30,109,31,228,31,225,31,169,31,244,31,3,31,28,31,162,31,162,30,40,31,206,31,142,31,142,30,3,31,79,31,8,31,184,31,123,31,109,31,109,30,239,31,232,31,179,31,247,31,47,31,91,31,7,31,49,31,13,31,237,31,176,31,164,31,244,31,204,31,123,31,26,31,191,31,40,31,176,31,115,31,93,31,137,31,143,31,199,31,199,30,199,29,5,31,202,31,202,30,84,31,101,31,240,31,197,31,215,31,247,31,152,31,193,31,254,31,241,31,87,31,135,31,221,31,221,30,96,31,123,31,183,31,246,31,112,31,121,31,156,31,156,30,133,31,10,31,10,30,135,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
