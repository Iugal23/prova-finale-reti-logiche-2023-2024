-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 662;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (191,0,54,0,125,0,60,0,149,0,40,0,235,0,179,0,20,0,72,0,222,0,0,0,241,0,92,0,191,0,0,0,0,0,0,0,0,0,39,0,0,0,163,0,0,0,238,0,0,0,199,0,120,0,31,0,27,0,3,0,0,0,203,0,94,0,113,0,208,0,21,0,129,0,62,0,135,0,61,0,0,0,252,0,34,0,155,0,182,0,2,0,0,0,0,0,0,0,33,0,106,0,73,0,217,0,240,0,159,0,0,0,46,0,0,0,110,0,108,0,10,0,99,0,29,0,56,0,0,0,0,0,18,0,148,0,61,0,0,0,3,0,0,0,11,0,10,0,207,0,163,0,198,0,253,0,65,0,126,0,0,0,63,0,189,0,177,0,0,0,79,0,0,0,0,0,29,0,136,0,239,0,103,0,240,0,0,0,112,0,230,0,95,0,12,0,238,0,0,0,215,0,205,0,72,0,99,0,109,0,229,0,181,0,50,0,49,0,0,0,31,0,0,0,58,0,132,0,52,0,229,0,248,0,42,0,254,0,74,0,195,0,77,0,138,0,157,0,65,0,122,0,81,0,237,0,249,0,129,0,237,0,213,0,62,0,11,0,68,0,205,0,151,0,0,0,143,0,38,0,48,0,180,0,0,0,171,0,0,0,230,0,50,0,254,0,142,0,148,0,165,0,44,0,213,0,0,0,0,0,42,0,9,0,14,0,0,0,178,0,48,0,197,0,103,0,0,0,12,0,69,0,228,0,74,0,162,0,153,0,0,0,248,0,242,0,0,0,201,0,118,0,25,0,235,0,25,0,172,0,118,0,18,0,127,0,47,0,224,0,130,0,141,0,0,0,159,0,0,0,89,0,190,0,212,0,0,0,0,0,0,0,84,0,71,0,190,0,1,0,87,0,26,0,170,0,142,0,227,0,158,0,201,0,0,0,49,0,205,0,24,0,241,0,124,0,0,0,15,0,201,0,74,0,45,0,28,0,185,0,94,0,1,0,91,0,0,0,220,0,87,0,0,0,224,0,0,0,0,0,0,0,123,0,201,0,50,0,73,0,0,0,0,0,201,0,131,0,0,0,188,0,13,0,39,0,5,0,3,0,171,0,0,0,161,0,0,0,129,0,240,0,0,0,74,0,30,0,106,0,254,0,93,0,0,0,0,0,242,0,14,0,82,0,51,0,112,0,138,0,61,0,224,0,0,0,120,0,0,0,118,0,73,0,130,0,174,0,102,0,0,0,108,0,231,0,0,0,237,0,255,0,72,0,0,0,196,0,173,0,115,0,65,0,85,0,255,0,73,0,111,0,54,0,35,0,0,0,0,0,82,0,0,0,221,0,63,0,52,0,0,0,135,0,171,0,233,0,0,0,132,0,16,0,163,0,119,0,122,0,0,0,119,0,130,0,54,0,143,0,88,0,0,0,46,0,119,0,236,0,213,0,253,0,0,0,182,0,45,0,19,0,168,0,191,0,63,0,150,0,238,0,253,0,0,0,82,0,200,0,233,0,35,0,169,0,111,0,67,0,81,0,31,0,0,0,23,0,253,0,105,0,138,0,0,0,40,0,191,0,58,0,127,0,0,0,9,0,0,0,3,0,90,0,137,0,124,0,10,0,149,0,0,0,229,0,158,0,226,0,0,0,88,0,24,0,200,0,33,0,137,0,0,0,81,0,0,0,0,0,148,0,160,0,0,0,50,0,54,0,137,0,98,0,9,0,0,0,253,0,88,0,73,0,178,0,244,0,208,0,0,0,20,0,86,0,249,0,182,0,142,0,180,0,223,0,20,0,55,0,157,0,18,0,0,0,180,0,0,0,74,0,129,0,0,0,189,0,22,0,78,0,171,0,0,0,50,0,130,0,44,0,135,0,75,0,35,0,228,0,71,0,100,0,0,0,140,0,203,0,94,0,253,0,0,0,12,0,0,0,0,0,225,0,82,0,0,0,255,0,241,0,232,0,92,0,0,0,53,0,0,0,122,0,72,0,100,0,227,0,0,0,0,0,197,0,74,0,0,0,96,0,0,0,134,0,31,0,234,0,128,0,83,0,159,0,190,0,0,0,0,0,224,0,222,0,0,0,12,0,0,0,0,0,183,0,0,0,0,0,50,0,43,0,43,0,158,0,176,0,0,0,69,0,13,0,0,0,113,0,30,0,135,0,38,0,173,0,0,0,0,0,0,0,147,0,147,0,221,0,23,0,199,0,115,0,78,0,27,0,77,0,98,0,138,0,83,0,78,0,21,0,244,0,90,0,57,0,170,0,0,0,54,0,215,0,191,0,58,0,0,0,175,0,200,0,145,0,13,0,49,0,114,0,0,0,30,0,175,0,228,0,0,0,236,0,0,0,52,0,248,0,69,0,0,0,0,0,62,0,0,0,0,0,217,0,24,0,0,0,195,0,0,0,104,0,241,0,99,0,214,0,0,0,133,0,0,0,123,0,239,0,95,0,119,0,145,0,64,0,0,0,167,0,42,0,182,0,137,0,0,0,209,0,226,0,33,0,42,0,72,0,0,0,184,0,0,0,152,0,98,0,77,0,128,0,239,0,0,0,0,0,133,0,166,0,0,0,71,0,96,0,187,0,76,0,0,0,197,0,48,0,149,0,87,0,24,0,23,0,144,0,39,0,214,0,29,0,178,0,236,0,200,0,176,0,252,0,27,0,235,0,233,0,2,0,148,0,171,0,0,0,173,0,143,0,75,0,0,0,184,0,129,0,237,0,185,0,9,0,253,0,189,0,11,0,178,0,94,0,73,0,68,0,225,0,109,0,116,0,0,0,0,0,0,0,195,0,199,0,5,0,218,0,99,0,170,0,0,0,125,0,198,0,2,0,205,0,248,0,247,0,0,0,222,0,6,0,245,0,0,0,162,0,158,0,52,0,194,0,0,0,92,0,127,0,110,0,0,0,59,0,0,0,61,0,0,0,137,0,0,0,148,0,7,0,0,0,98,0,102,0,93,0);
signal scenario_full  : scenario_type := (191,31,54,31,125,31,60,31,149,31,40,31,235,31,179,31,20,31,72,31,222,31,222,30,241,31,92,31,191,31,191,30,191,29,191,28,191,27,39,31,39,30,163,31,163,30,238,31,238,30,199,31,120,31,31,31,27,31,3,31,3,30,203,31,94,31,113,31,208,31,21,31,129,31,62,31,135,31,61,31,61,30,252,31,34,31,155,31,182,31,2,31,2,30,2,29,2,28,33,31,106,31,73,31,217,31,240,31,159,31,159,30,46,31,46,30,110,31,108,31,10,31,99,31,29,31,56,31,56,30,56,29,18,31,148,31,61,31,61,30,3,31,3,30,11,31,10,31,207,31,163,31,198,31,253,31,65,31,126,31,126,30,63,31,189,31,177,31,177,30,79,31,79,30,79,29,29,31,136,31,239,31,103,31,240,31,240,30,112,31,230,31,95,31,12,31,238,31,238,30,215,31,205,31,72,31,99,31,109,31,229,31,181,31,50,31,49,31,49,30,31,31,31,30,58,31,132,31,52,31,229,31,248,31,42,31,254,31,74,31,195,31,77,31,138,31,157,31,65,31,122,31,81,31,237,31,249,31,129,31,237,31,213,31,62,31,11,31,68,31,205,31,151,31,151,30,143,31,38,31,48,31,180,31,180,30,171,31,171,30,230,31,50,31,254,31,142,31,148,31,165,31,44,31,213,31,213,30,213,29,42,31,9,31,14,31,14,30,178,31,48,31,197,31,103,31,103,30,12,31,69,31,228,31,74,31,162,31,153,31,153,30,248,31,242,31,242,30,201,31,118,31,25,31,235,31,25,31,172,31,118,31,18,31,127,31,47,31,224,31,130,31,141,31,141,30,159,31,159,30,89,31,190,31,212,31,212,30,212,29,212,28,84,31,71,31,190,31,1,31,87,31,26,31,170,31,142,31,227,31,158,31,201,31,201,30,49,31,205,31,24,31,241,31,124,31,124,30,15,31,201,31,74,31,45,31,28,31,185,31,94,31,1,31,91,31,91,30,220,31,87,31,87,30,224,31,224,30,224,29,224,28,123,31,201,31,50,31,73,31,73,30,73,29,201,31,131,31,131,30,188,31,13,31,39,31,5,31,3,31,171,31,171,30,161,31,161,30,129,31,240,31,240,30,74,31,30,31,106,31,254,31,93,31,93,30,93,29,242,31,14,31,82,31,51,31,112,31,138,31,61,31,224,31,224,30,120,31,120,30,118,31,73,31,130,31,174,31,102,31,102,30,108,31,231,31,231,30,237,31,255,31,72,31,72,30,196,31,173,31,115,31,65,31,85,31,255,31,73,31,111,31,54,31,35,31,35,30,35,29,82,31,82,30,221,31,63,31,52,31,52,30,135,31,171,31,233,31,233,30,132,31,16,31,163,31,119,31,122,31,122,30,119,31,130,31,54,31,143,31,88,31,88,30,46,31,119,31,236,31,213,31,253,31,253,30,182,31,45,31,19,31,168,31,191,31,63,31,150,31,238,31,253,31,253,30,82,31,200,31,233,31,35,31,169,31,111,31,67,31,81,31,31,31,31,30,23,31,253,31,105,31,138,31,138,30,40,31,191,31,58,31,127,31,127,30,9,31,9,30,3,31,90,31,137,31,124,31,10,31,149,31,149,30,229,31,158,31,226,31,226,30,88,31,24,31,200,31,33,31,137,31,137,30,81,31,81,30,81,29,148,31,160,31,160,30,50,31,54,31,137,31,98,31,9,31,9,30,253,31,88,31,73,31,178,31,244,31,208,31,208,30,20,31,86,31,249,31,182,31,142,31,180,31,223,31,20,31,55,31,157,31,18,31,18,30,180,31,180,30,74,31,129,31,129,30,189,31,22,31,78,31,171,31,171,30,50,31,130,31,44,31,135,31,75,31,35,31,228,31,71,31,100,31,100,30,140,31,203,31,94,31,253,31,253,30,12,31,12,30,12,29,225,31,82,31,82,30,255,31,241,31,232,31,92,31,92,30,53,31,53,30,122,31,72,31,100,31,227,31,227,30,227,29,197,31,74,31,74,30,96,31,96,30,134,31,31,31,234,31,128,31,83,31,159,31,190,31,190,30,190,29,224,31,222,31,222,30,12,31,12,30,12,29,183,31,183,30,183,29,50,31,43,31,43,31,158,31,176,31,176,30,69,31,13,31,13,30,113,31,30,31,135,31,38,31,173,31,173,30,173,29,173,28,147,31,147,31,221,31,23,31,199,31,115,31,78,31,27,31,77,31,98,31,138,31,83,31,78,31,21,31,244,31,90,31,57,31,170,31,170,30,54,31,215,31,191,31,58,31,58,30,175,31,200,31,145,31,13,31,49,31,114,31,114,30,30,31,175,31,228,31,228,30,236,31,236,30,52,31,248,31,69,31,69,30,69,29,62,31,62,30,62,29,217,31,24,31,24,30,195,31,195,30,104,31,241,31,99,31,214,31,214,30,133,31,133,30,123,31,239,31,95,31,119,31,145,31,64,31,64,30,167,31,42,31,182,31,137,31,137,30,209,31,226,31,33,31,42,31,72,31,72,30,184,31,184,30,152,31,98,31,77,31,128,31,239,31,239,30,239,29,133,31,166,31,166,30,71,31,96,31,187,31,76,31,76,30,197,31,48,31,149,31,87,31,24,31,23,31,144,31,39,31,214,31,29,31,178,31,236,31,200,31,176,31,252,31,27,31,235,31,233,31,2,31,148,31,171,31,171,30,173,31,143,31,75,31,75,30,184,31,129,31,237,31,185,31,9,31,253,31,189,31,11,31,178,31,94,31,73,31,68,31,225,31,109,31,116,31,116,30,116,29,116,28,195,31,199,31,5,31,218,31,99,31,170,31,170,30,125,31,198,31,2,31,205,31,248,31,247,31,247,30,222,31,6,31,245,31,245,30,162,31,158,31,52,31,194,31,194,30,92,31,127,31,110,31,110,30,59,31,59,30,61,31,61,30,137,31,137,30,148,31,7,31,7,30,98,31,102,31,93,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
