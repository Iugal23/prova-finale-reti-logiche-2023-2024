-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 538;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (221,0,208,0,141,0,0,0,56,0,49,0,84,0,72,0,0,0,51,0,227,0,66,0,0,0,247,0,0,0,22,0,0,0,237,0,33,0,125,0,0,0,16,0,0,0,238,0,117,0,16,0,161,0,16,0,10,0,202,0,45,0,13,0,199,0,132,0,211,0,36,0,16,0,0,0,0,0,155,0,125,0,163,0,36,0,194,0,0,0,0,0,0,0,0,0,46,0,230,0,122,0,158,0,47,0,207,0,253,0,177,0,227,0,107,0,0,0,0,0,2,0,0,0,0,0,176,0,33,0,95,0,0,0,0,0,243,0,0,0,227,0,41,0,128,0,178,0,26,0,23,0,216,0,172,0,88,0,99,0,201,0,81,0,123,0,248,0,139,0,103,0,107,0,251,0,170,0,69,0,0,0,31,0,246,0,0,0,233,0,210,0,3,0,28,0,175,0,65,0,174,0,98,0,205,0,204,0,180,0,194,0,51,0,145,0,32,0,86,0,160,0,248,0,128,0,179,0,82,0,0,0,246,0,12,0,118,0,0,0,218,0,175,0,208,0,152,0,0,0,190,0,146,0,130,0,69,0,0,0,202,0,240,0,192,0,143,0,123,0,93,0,234,0,201,0,238,0,128,0,118,0,85,0,50,0,126,0,169,0,211,0,183,0,82,0,39,0,125,0,22,0,109,0,115,0,201,0,62,0,0,0,172,0,234,0,0,0,0,0,38,0,158,0,0,0,245,0,173,0,0,0,112,0,173,0,0,0,6,0,234,0,94,0,231,0,90,0,98,0,97,0,179,0,19,0,213,0,18,0,132,0,40,0,0,0,231,0,242,0,138,0,173,0,141,0,110,0,93,0,126,0,160,0,209,0,204,0,5,0,0,0,123,0,0,0,179,0,207,0,0,0,0,0,111,0,139,0,188,0,143,0,0,0,0,0,218,0,205,0,52,0,0,0,204,0,82,0,55,0,137,0,213,0,0,0,254,0,108,0,0,0,160,0,0,0,0,0,200,0,79,0,114,0,7,0,72,0,0,0,40,0,46,0,0,0,0,0,0,0,44,0,30,0,123,0,253,0,128,0,42,0,37,0,33,0,0,0,232,0,0,0,168,0,0,0,221,0,126,0,0,0,5,0,78,0,93,0,51,0,225,0,88,0,88,0,62,0,0,0,0,0,121,0,202,0,0,0,142,0,225,0,0,0,0,0,61,0,205,0,240,0,229,0,0,0,222,0,110,0,250,0,0,0,145,0,0,0,121,0,80,0,0,0,144,0,186,0,104,0,117,0,123,0,252,0,73,0,89,0,0,0,79,0,34,0,228,0,216,0,98,0,0,0,253,0,151,0,31,0,0,0,133,0,197,0,200,0,0,0,203,0,183,0,45,0,0,0,30,0,196,0,48,0,0,0,97,0,69,0,198,0,198,0,117,0,113,0,0,0,0,0,32,0,0,0,0,0,200,0,113,0,178,0,200,0,253,0,137,0,77,0,147,0,32,0,226,0,61,0,0,0,0,0,103,0,199,0,206,0,159,0,0,0,114,0,71,0,33,0,0,0,167,0,173,0,8,0,188,0,123,0,183,0,188,0,175,0,0,0,45,0,2,0,0,0,6,0,37,0,75,0,0,0,117,0,134,0,4,0,222,0,253,0,220,0,0,0,0,0,82,0,0,0,10,0,67,0,136,0,80,0,0,0,126,0,136,0,13,0,25,0,200,0,177,0,57,0,24,0,7,0,192,0,0,0,5,0,15,0,210,0,144,0,177,0,139,0,0,0,0,0,16,0,242,0,123,0,19,0,0,0,159,0,0,0,122,0,111,0,116,0,0,0,74,0,117,0,244,0,231,0,29,0,31,0,0,0,250,0,7,0,69,0,10,0,63,0,0,0,121,0,0,0,240,0,130,0,29,0,135,0,146,0,203,0,101,0,200,0,238,0,51,0,149,0,8,0,247,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,2,0,172,0,92,0,154,0,183,0,33,0,25,0,33,0,248,0,0,0,33,0,45,0,175,0,176,0,132,0,89,0,44,0,143,0,224,0,229,0,0,0,114,0,126,0,178,0,0,0,0,0,50,0,0,0,0,0,0,0,101,0,223,0,197,0,135,0,142,0,87,0,239,0,183,0,223,0,42,0,58,0,178,0,230,0,0,0,204,0,79,0,0,0,53,0,206,0,176,0,0,0,188,0,122,0,0,0,24,0,70,0,118,0,12,0,0,0,0,0,219,0,0,0,112,0,186,0,56,0,206,0,31,0,129,0,190,0,89,0,78,0,0,0,111,0,161,0,197,0,215,0,39,0,24,0,0,0,117,0,245,0,9,0,0,0,189,0,103,0,98,0,27,0,223,0,83,0,207,0,132,0,204,0,160,0,128,0,196,0,157,0);
signal scenario_full  : scenario_type := (221,31,208,31,141,31,141,30,56,31,49,31,84,31,72,31,72,30,51,31,227,31,66,31,66,30,247,31,247,30,22,31,22,30,237,31,33,31,125,31,125,30,16,31,16,30,238,31,117,31,16,31,161,31,16,31,10,31,202,31,45,31,13,31,199,31,132,31,211,31,36,31,16,31,16,30,16,29,155,31,125,31,163,31,36,31,194,31,194,30,194,29,194,28,194,27,46,31,230,31,122,31,158,31,47,31,207,31,253,31,177,31,227,31,107,31,107,30,107,29,2,31,2,30,2,29,176,31,33,31,95,31,95,30,95,29,243,31,243,30,227,31,41,31,128,31,178,31,26,31,23,31,216,31,172,31,88,31,99,31,201,31,81,31,123,31,248,31,139,31,103,31,107,31,251,31,170,31,69,31,69,30,31,31,246,31,246,30,233,31,210,31,3,31,28,31,175,31,65,31,174,31,98,31,205,31,204,31,180,31,194,31,51,31,145,31,32,31,86,31,160,31,248,31,128,31,179,31,82,31,82,30,246,31,12,31,118,31,118,30,218,31,175,31,208,31,152,31,152,30,190,31,146,31,130,31,69,31,69,30,202,31,240,31,192,31,143,31,123,31,93,31,234,31,201,31,238,31,128,31,118,31,85,31,50,31,126,31,169,31,211,31,183,31,82,31,39,31,125,31,22,31,109,31,115,31,201,31,62,31,62,30,172,31,234,31,234,30,234,29,38,31,158,31,158,30,245,31,173,31,173,30,112,31,173,31,173,30,6,31,234,31,94,31,231,31,90,31,98,31,97,31,179,31,19,31,213,31,18,31,132,31,40,31,40,30,231,31,242,31,138,31,173,31,141,31,110,31,93,31,126,31,160,31,209,31,204,31,5,31,5,30,123,31,123,30,179,31,207,31,207,30,207,29,111,31,139,31,188,31,143,31,143,30,143,29,218,31,205,31,52,31,52,30,204,31,82,31,55,31,137,31,213,31,213,30,254,31,108,31,108,30,160,31,160,30,160,29,200,31,79,31,114,31,7,31,72,31,72,30,40,31,46,31,46,30,46,29,46,28,44,31,30,31,123,31,253,31,128,31,42,31,37,31,33,31,33,30,232,31,232,30,168,31,168,30,221,31,126,31,126,30,5,31,78,31,93,31,51,31,225,31,88,31,88,31,62,31,62,30,62,29,121,31,202,31,202,30,142,31,225,31,225,30,225,29,61,31,205,31,240,31,229,31,229,30,222,31,110,31,250,31,250,30,145,31,145,30,121,31,80,31,80,30,144,31,186,31,104,31,117,31,123,31,252,31,73,31,89,31,89,30,79,31,34,31,228,31,216,31,98,31,98,30,253,31,151,31,31,31,31,30,133,31,197,31,200,31,200,30,203,31,183,31,45,31,45,30,30,31,196,31,48,31,48,30,97,31,69,31,198,31,198,31,117,31,113,31,113,30,113,29,32,31,32,30,32,29,200,31,113,31,178,31,200,31,253,31,137,31,77,31,147,31,32,31,226,31,61,31,61,30,61,29,103,31,199,31,206,31,159,31,159,30,114,31,71,31,33,31,33,30,167,31,173,31,8,31,188,31,123,31,183,31,188,31,175,31,175,30,45,31,2,31,2,30,6,31,37,31,75,31,75,30,117,31,134,31,4,31,222,31,253,31,220,31,220,30,220,29,82,31,82,30,10,31,67,31,136,31,80,31,80,30,126,31,136,31,13,31,25,31,200,31,177,31,57,31,24,31,7,31,192,31,192,30,5,31,15,31,210,31,144,31,177,31,139,31,139,30,139,29,16,31,242,31,123,31,19,31,19,30,159,31,159,30,122,31,111,31,116,31,116,30,74,31,117,31,244,31,231,31,29,31,31,31,31,30,250,31,7,31,69,31,10,31,63,31,63,30,121,31,121,30,240,31,130,31,29,31,135,31,146,31,203,31,101,31,200,31,238,31,51,31,149,31,8,31,247,31,247,30,247,29,247,28,247,27,24,31,24,30,24,29,2,31,172,31,92,31,154,31,183,31,33,31,25,31,33,31,248,31,248,30,33,31,45,31,175,31,176,31,132,31,89,31,44,31,143,31,224,31,229,31,229,30,114,31,126,31,178,31,178,30,178,29,50,31,50,30,50,29,50,28,101,31,223,31,197,31,135,31,142,31,87,31,239,31,183,31,223,31,42,31,58,31,178,31,230,31,230,30,204,31,79,31,79,30,53,31,206,31,176,31,176,30,188,31,122,31,122,30,24,31,70,31,118,31,12,31,12,30,12,29,219,31,219,30,112,31,186,31,56,31,206,31,31,31,129,31,190,31,89,31,78,31,78,30,111,31,161,31,197,31,215,31,39,31,24,31,24,30,117,31,245,31,9,31,9,30,189,31,103,31,98,31,27,31,223,31,83,31,207,31,132,31,204,31,160,31,128,31,196,31,157,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
