-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 557;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (77,0,145,0,164,0,196,0,0,0,69,0,121,0,0,0,92,0,197,0,218,0,0,0,0,0,100,0,225,0,44,0,64,0,76,0,66,0,0,0,0,0,35,0,36,0,0,0,34,0,0,0,11,0,123,0,0,0,97,0,139,0,230,0,195,0,102,0,0,0,0,0,190,0,131,0,11,0,76,0,117,0,0,0,182,0,229,0,35,0,155,0,0,0,208,0,137,0,69,0,110,0,103,0,0,0,182,0,225,0,110,0,42,0,0,0,245,0,146,0,211,0,176,0,48,0,0,0,116,0,42,0,231,0,92,0,0,0,57,0,101,0,0,0,141,0,66,0,32,0,161,0,0,0,224,0,121,0,0,0,242,0,214,0,89,0,21,0,45,0,129,0,69,0,161,0,130,0,202,0,113,0,129,0,152,0,199,0,0,0,0,0,87,0,171,0,16,0,250,0,198,0,208,0,148,0,0,0,58,0,28,0,117,0,0,0,182,0,228,0,0,0,158,0,16,0,129,0,144,0,229,0,246,0,25,0,203,0,158,0,0,0,81,0,75,0,83,0,133,0,43,0,147,0,0,0,31,0,5,0,72,0,22,0,75,0,132,0,20,0,89,0,0,0,137,0,0,0,209,0,74,0,253,0,183,0,0,0,0,0,173,0,78,0,21,0,0,0,172,0,72,0,0,0,41,0,95,0,204,0,97,0,0,0,37,0,12,0,148,0,69,0,0,0,0,0,0,0,163,0,0,0,47,0,0,0,197,0,173,0,18,0,207,0,47,0,164,0,148,0,64,0,171,0,154,0,56,0,132,0,128,0,205,0,59,0,144,0,180,0,36,0,109,0,208,0,101,0,0,0,154,0,61,0,226,0,144,0,44,0,137,0,0,0,230,0,7,0,175,0,239,0,99,0,192,0,0,0,136,0,83,0,188,0,48,0,227,0,229,0,97,0,208,0,33,0,115,0,47,0,8,0,29,0,229,0,23,0,41,0,80,0,0,0,113,0,0,0,91,0,111,0,222,0,104,0,69,0,203,0,30,0,0,0,42,0,48,0,195,0,120,0,118,0,17,0,64,0,215,0,0,0,74,0,242,0,68,0,211,0,176,0,100,0,0,0,0,0,44,0,117,0,79,0,0,0,84,0,0,0,248,0,0,0,79,0,3,0,0,0,141,0,0,0,0,0,0,0,157,0,230,0,0,0,17,0,0,0,181,0,11,0,83,0,181,0,237,0,246,0,8,0,38,0,0,0,221,0,85,0,206,0,142,0,0,0,208,0,230,0,240,0,207,0,169,0,0,0,0,0,54,0,178,0,170,0,0,0,131,0,143,0,205,0,232,0,28,0,211,0,2,0,247,0,0,0,60,0,90,0,57,0,166,0,160,0,7,0,157,0,97,0,253,0,37,0,0,0,222,0,106,0,9,0,0,0,143,0,108,0,174,0,175,0,74,0,68,0,99,0,0,0,187,0,98,0,120,0,0,0,236,0,180,0,8,0,30,0,14,0,165,0,36,0,15,0,149,0,187,0,244,0,144,0,122,0,126,0,187,0,225,0,205,0,153,0,0,0,13,0,210,0,73,0,100,0,49,0,197,0,155,0,0,0,113,0,248,0,131,0,250,0,0,0,0,0,176,0,23,0,179,0,110,0,156,0,102,0,0,0,187,0,224,0,185,0,149,0,69,0,0,0,152,0,153,0,0,0,157,0,0,0,0,0,158,0,230,0,15,0,51,0,178,0,0,0,100,0,74,0,0,0,0,0,175,0,8,0,148,0,197,0,0,0,252,0,192,0,56,0,0,0,0,0,0,0,0,0,0,0,117,0,121,0,138,0,0,0,177,0,127,0,113,0,128,0,84,0,254,0,223,0,202,0,198,0,0,0,145,0,201,0,242,0,35,0,208,0,95,0,9,0,162,0,123,0,66,0,0,0,0,0,200,0,202,0,132,0,22,0,24,0,45,0,191,0,117,0,125,0,135,0,0,0,80,0,242,0,0,0,31,0,150,0,77,0,0,0,0,0,129,0,70,0,0,0,0,0,153,0,193,0,0,0,7,0,0,0,158,0,95,0,120,0,94,0,67,0,124,0,220,0,36,0,98,0,189,0,0,0,79,0,168,0,0,0,0,0,0,0,36,0,122,0,3,0,220,0,165,0,136,0,0,0,98,0,0,0,18,0,129,0,81,0,41,0,234,0,227,0,174,0,195,0,227,0,0,0,0,0,116,0,37,0,170,0,235,0,154,0,191,0,209,0,0,0,149,0,234,0,0,0,182,0,147,0,0,0,0,0,104,0,188,0,166,0,251,0,62,0,0,0,162,0,228,0,0,0,0,0,0,0,6,0,245,0,148,0,226,0,79,0,91,0,92,0,121,0,50,0,192,0,147,0,17,0,143,0,146,0,79,0,108,0,185,0,39,0,241,0,56,0,235,0,49,0,0,0,0,0,238,0,79,0,233,0,135,0,115,0,28,0,87,0,245,0,83,0,61,0,0,0,34,0);
signal scenario_full  : scenario_type := (77,31,145,31,164,31,196,31,196,30,69,31,121,31,121,30,92,31,197,31,218,31,218,30,218,29,100,31,225,31,44,31,64,31,76,31,66,31,66,30,66,29,35,31,36,31,36,30,34,31,34,30,11,31,123,31,123,30,97,31,139,31,230,31,195,31,102,31,102,30,102,29,190,31,131,31,11,31,76,31,117,31,117,30,182,31,229,31,35,31,155,31,155,30,208,31,137,31,69,31,110,31,103,31,103,30,182,31,225,31,110,31,42,31,42,30,245,31,146,31,211,31,176,31,48,31,48,30,116,31,42,31,231,31,92,31,92,30,57,31,101,31,101,30,141,31,66,31,32,31,161,31,161,30,224,31,121,31,121,30,242,31,214,31,89,31,21,31,45,31,129,31,69,31,161,31,130,31,202,31,113,31,129,31,152,31,199,31,199,30,199,29,87,31,171,31,16,31,250,31,198,31,208,31,148,31,148,30,58,31,28,31,117,31,117,30,182,31,228,31,228,30,158,31,16,31,129,31,144,31,229,31,246,31,25,31,203,31,158,31,158,30,81,31,75,31,83,31,133,31,43,31,147,31,147,30,31,31,5,31,72,31,22,31,75,31,132,31,20,31,89,31,89,30,137,31,137,30,209,31,74,31,253,31,183,31,183,30,183,29,173,31,78,31,21,31,21,30,172,31,72,31,72,30,41,31,95,31,204,31,97,31,97,30,37,31,12,31,148,31,69,31,69,30,69,29,69,28,163,31,163,30,47,31,47,30,197,31,173,31,18,31,207,31,47,31,164,31,148,31,64,31,171,31,154,31,56,31,132,31,128,31,205,31,59,31,144,31,180,31,36,31,109,31,208,31,101,31,101,30,154,31,61,31,226,31,144,31,44,31,137,31,137,30,230,31,7,31,175,31,239,31,99,31,192,31,192,30,136,31,83,31,188,31,48,31,227,31,229,31,97,31,208,31,33,31,115,31,47,31,8,31,29,31,229,31,23,31,41,31,80,31,80,30,113,31,113,30,91,31,111,31,222,31,104,31,69,31,203,31,30,31,30,30,42,31,48,31,195,31,120,31,118,31,17,31,64,31,215,31,215,30,74,31,242,31,68,31,211,31,176,31,100,31,100,30,100,29,44,31,117,31,79,31,79,30,84,31,84,30,248,31,248,30,79,31,3,31,3,30,141,31,141,30,141,29,141,28,157,31,230,31,230,30,17,31,17,30,181,31,11,31,83,31,181,31,237,31,246,31,8,31,38,31,38,30,221,31,85,31,206,31,142,31,142,30,208,31,230,31,240,31,207,31,169,31,169,30,169,29,54,31,178,31,170,31,170,30,131,31,143,31,205,31,232,31,28,31,211,31,2,31,247,31,247,30,60,31,90,31,57,31,166,31,160,31,7,31,157,31,97,31,253,31,37,31,37,30,222,31,106,31,9,31,9,30,143,31,108,31,174,31,175,31,74,31,68,31,99,31,99,30,187,31,98,31,120,31,120,30,236,31,180,31,8,31,30,31,14,31,165,31,36,31,15,31,149,31,187,31,244,31,144,31,122,31,126,31,187,31,225,31,205,31,153,31,153,30,13,31,210,31,73,31,100,31,49,31,197,31,155,31,155,30,113,31,248,31,131,31,250,31,250,30,250,29,176,31,23,31,179,31,110,31,156,31,102,31,102,30,187,31,224,31,185,31,149,31,69,31,69,30,152,31,153,31,153,30,157,31,157,30,157,29,158,31,230,31,15,31,51,31,178,31,178,30,100,31,74,31,74,30,74,29,175,31,8,31,148,31,197,31,197,30,252,31,192,31,56,31,56,30,56,29,56,28,56,27,56,26,117,31,121,31,138,31,138,30,177,31,127,31,113,31,128,31,84,31,254,31,223,31,202,31,198,31,198,30,145,31,201,31,242,31,35,31,208,31,95,31,9,31,162,31,123,31,66,31,66,30,66,29,200,31,202,31,132,31,22,31,24,31,45,31,191,31,117,31,125,31,135,31,135,30,80,31,242,31,242,30,31,31,150,31,77,31,77,30,77,29,129,31,70,31,70,30,70,29,153,31,193,31,193,30,7,31,7,30,158,31,95,31,120,31,94,31,67,31,124,31,220,31,36,31,98,31,189,31,189,30,79,31,168,31,168,30,168,29,168,28,36,31,122,31,3,31,220,31,165,31,136,31,136,30,98,31,98,30,18,31,129,31,81,31,41,31,234,31,227,31,174,31,195,31,227,31,227,30,227,29,116,31,37,31,170,31,235,31,154,31,191,31,209,31,209,30,149,31,234,31,234,30,182,31,147,31,147,30,147,29,104,31,188,31,166,31,251,31,62,31,62,30,162,31,228,31,228,30,228,29,228,28,6,31,245,31,148,31,226,31,79,31,91,31,92,31,121,31,50,31,192,31,147,31,17,31,143,31,146,31,79,31,108,31,185,31,39,31,241,31,56,31,235,31,49,31,49,30,49,29,238,31,79,31,233,31,135,31,115,31,28,31,87,31,245,31,83,31,61,31,61,30,34,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
