-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 858;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (197,0,68,0,226,0,214,0,168,0,33,0,0,0,229,0,0,0,154,0,56,0,0,0,172,0,0,0,0,0,0,0,0,0,246,0,0,0,0,0,75,0,0,0,36,0,188,0,137,0,61,0,129,0,217,0,9,0,105,0,214,0,194,0,122,0,239,0,35,0,203,0,97,0,62,0,2,0,226,0,0,0,0,0,119,0,165,0,64,0,44,0,236,0,157,0,75,0,125,0,64,0,156,0,0,0,40,0,53,0,28,0,207,0,145,0,216,0,106,0,209,0,74,0,104,0,38,0,0,0,0,0,76,0,59,0,0,0,185,0,178,0,0,0,0,0,183,0,92,0,183,0,0,0,0,0,235,0,63,0,181,0,0,0,0,0,0,0,223,0,0,0,243,0,93,0,115,0,0,0,237,0,75,0,71,0,166,0,158,0,133,0,107,0,0,0,123,0,0,0,151,0,97,0,41,0,214,0,130,0,158,0,72,0,49,0,0,0,233,0,110,0,59,0,129,0,137,0,147,0,154,0,0,0,62,0,0,0,203,0,27,0,196,0,72,0,208,0,67,0,190,0,153,0,11,0,213,0,97,0,0,0,249,0,8,0,207,0,176,0,0,0,0,0,143,0,232,0,0,0,54,0,0,0,0,0,196,0,162,0,140,0,115,0,188,0,153,0,92,0,192,0,209,0,0,0,192,0,121,0,215,0,127,0,32,0,39,0,55,0,206,0,201,0,162,0,162,0,218,0,0,0,0,0,235,0,75,0,33,0,0,0,47,0,201,0,142,0,176,0,171,0,178,0,175,0,0,0,0,0,174,0,22,0,245,0,0,0,28,0,27,0,0,0,31,0,206,0,243,0,0,0,242,0,243,0,48,0,166,0,36,0,57,0,0,0,251,0,0,0,66,0,0,0,192,0,15,0,50,0,0,0,0,0,0,0,74,0,0,0,27,0,151,0,251,0,0,0,88,0,0,0,234,0,130,0,1,0,0,0,18,0,239,0,13,0,0,0,138,0,47,0,208,0,147,0,91,0,22,0,83,0,35,0,224,0,166,0,237,0,21,0,0,0,226,0,209,0,2,0,130,0,218,0,0,0,175,0,171,0,0,0,112,0,132,0,110,0,138,0,41,0,213,0,71,0,48,0,132,0,135,0,32,0,245,0,92,0,107,0,116,0,0,0,101,0,140,0,226,0,121,0,0,0,223,0,59,0,131,0,13,0,32,0,234,0,97,0,0,0,0,0,39,0,0,0,138,0,0,0,0,0,30,0,0,0,96,0,12,0,28,0,34,0,248,0,0,0,69,0,129,0,0,0,59,0,164,0,76,0,131,0,110,0,69,0,158,0,0,0,106,0,44,0,51,0,107,0,126,0,0,0,120,0,39,0,17,0,67,0,19,0,170,0,1,0,0,0,152,0,0,0,77,0,138,0,20,0,106,0,26,0,107,0,219,0,200,0,107,0,0,0,226,0,16,0,0,0,245,0,182,0,213,0,190,0,249,0,0,0,134,0,108,0,204,0,53,0,183,0,238,0,56,0,0,0,0,0,221,0,52,0,22,0,156,0,3,0,223,0,147,0,0,0,181,0,69,0,43,0,13,0,0,0,3,0,111,0,107,0,183,0,221,0,147,0,232,0,17,0,0,0,244,0,193,0,27,0,168,0,213,0,50,0,176,0,0,0,209,0,0,0,52,0,0,0,93,0,246,0,25,0,245,0,152,0,69,0,170,0,109,0,36,0,218,0,18,0,10,0,0,0,0,0,147,0,21,0,155,0,0,0,0,0,100,0,184,0,0,0,60,0,208,0,18,0,0,0,68,0,226,0,86,0,87,0,144,0,142,0,0,0,0,0,0,0,146,0,182,0,0,0,143,0,195,0,0,0,0,0,0,0,77,0,148,0,0,0,187,0,77,0,70,0,59,0,215,0,238,0,50,0,168,0,228,0,152,0,152,0,30,0,109,0,32,0,0,0,193,0,219,0,130,0,0,0,219,0,62,0,123,0,0,0,15,0,77,0,133,0,212,0,0,0,208,0,75,0,0,0,162,0,28,0,0,0,82,0,97,0,117,0,88,0,222,0,158,0,84,0,122,0,126,0,49,0,239,0,146,0,0,0,0,0,63,0,115,0,0,0,0,0,201,0,198,0,35,0,159,0,118,0,0,0,41,0,99,0,0,0,201,0,0,0,79,0,17,0,191,0,0,0,11,0,0,0,0,0,145,0,200,0,0,0,134,0,218,0,246,0,2,0,0,0,0,0,66,0,165,0,114,0,181,0,220,0,172,0,0,0,0,0,119,0,0,0,0,0,49,0,224,0,167,0,117,0,102,0,58,0,0,0,153,0,173,0,211,0,212,0,106,0,16,0,199,0,185,0,117,0,0,0,246,0,30,0,29,0,196,0,47,0,139,0,144,0,197,0,241,0,18,0,0,0,0,0,88,0,235,0,0,0,0,0,22,0,0,0,231,0,0,0,115,0,0,0,29,0,81,0,0,0,121,0,129,0,0,0,0,0,26,0,226,0,68,0,146,0,104,0,9,0,35,0,72,0,21,0,82,0,120,0,209,0,158,0,83,0,0,0,206,0,0,0,97,0,0,0,89,0,238,0,135,0,155,0,161,0,83,0,0,0,91,0,90,0,221,0,232,0,213,0,4,0,215,0,229,0,0,0,130,0,42,0,0,0,36,0,182,0,118,0,187,0,75,0,118,0,175,0,117,0,159,0,93,0,116,0,210,0,9,0,0,0,159,0,182,0,195,0,65,0,44,0,255,0,171,0,0,0,244,0,97,0,0,0,113,0,26,0,9,0,76,0,57,0,0,0,94,0,0,0,130,0,30,0,24,0,76,0,33,0,128,0,43,0,112,0,203,0,103,0,190,0,248,0,152,0,175,0,74,0,254,0,12,0,73,0,170,0,0,0,181,0,103,0,239,0,228,0,43,0,73,0,75,0,240,0,0,0,0,0,0,0,0,0,60,0,76,0,0,0,0,0,143,0,147,0,20,0,9,0,235,0,238,0,189,0,156,0,64,0,22,0,83,0,170,0,43,0,207,0,52,0,228,0,160,0,7,0,29,0,0,0,0,0,106,0,157,0,95,0,67,0,89,0,104,0,89,0,184,0,245,0,0,0,212,0,0,0,15,0,0,0,118,0,195,0,0,0,33,0,0,0,0,0,199,0,61,0,0,0,241,0,103,0,34,0,219,0,180,0,102,0,120,0,86,0,90,0,198,0,205,0,76,0,0,0,228,0,101,0,46,0,35,0,14,0,169,0,231,0,0,0,17,0,248,0,173,0,0,0,0,0,244,0,0,0,0,0,0,0,66,0,10,0,241,0,230,0,69,0,57,0,100,0,0,0,95,0,188,0,160,0,149,0,0,0,0,0,140,0,0,0,183,0,45,0,255,0,175,0,212,0,121,0,49,0,0,0,80,0,79,0,12,0,20,0,108,0,252,0,78,0,197,0,48,0,82,0,53,0,254,0,0,0,25,0,174,0,125,0,63,0,209,0,6,0,0,0,0,0,248,0,0,0,0,0,178,0,200,0,26,0,111,0,0,0,177,0,21,0,242,0,83,0,167,0,120,0,74,0,212,0,0,0,175,0,158,0,203,0,169,0,56,0,230,0,87,0,163,0,137,0,12,0,8,0,101,0,53,0,0,0,0,0,150,0,202,0,114,0,157,0,0,0,224,0,46,0,10,0,0,0,43,0,0,0,96,0,107,0,36,0,171,0,154,0,123,0,220,0,83,0,250,0,0,0,249,0,80,0,178,0,151,0,217,0,0,0,5,0,0,0,22,0,94,0,127,0,44,0,0,0,124,0,156,0,0,0,83,0,161,0,161,0);
signal scenario_full  : scenario_type := (197,31,68,31,226,31,214,31,168,31,33,31,33,30,229,31,229,30,154,31,56,31,56,30,172,31,172,30,172,29,172,28,172,27,246,31,246,30,246,29,75,31,75,30,36,31,188,31,137,31,61,31,129,31,217,31,9,31,105,31,214,31,194,31,122,31,239,31,35,31,203,31,97,31,62,31,2,31,226,31,226,30,226,29,119,31,165,31,64,31,44,31,236,31,157,31,75,31,125,31,64,31,156,31,156,30,40,31,53,31,28,31,207,31,145,31,216,31,106,31,209,31,74,31,104,31,38,31,38,30,38,29,76,31,59,31,59,30,185,31,178,31,178,30,178,29,183,31,92,31,183,31,183,30,183,29,235,31,63,31,181,31,181,30,181,29,181,28,223,31,223,30,243,31,93,31,115,31,115,30,237,31,75,31,71,31,166,31,158,31,133,31,107,31,107,30,123,31,123,30,151,31,97,31,41,31,214,31,130,31,158,31,72,31,49,31,49,30,233,31,110,31,59,31,129,31,137,31,147,31,154,31,154,30,62,31,62,30,203,31,27,31,196,31,72,31,208,31,67,31,190,31,153,31,11,31,213,31,97,31,97,30,249,31,8,31,207,31,176,31,176,30,176,29,143,31,232,31,232,30,54,31,54,30,54,29,196,31,162,31,140,31,115,31,188,31,153,31,92,31,192,31,209,31,209,30,192,31,121,31,215,31,127,31,32,31,39,31,55,31,206,31,201,31,162,31,162,31,218,31,218,30,218,29,235,31,75,31,33,31,33,30,47,31,201,31,142,31,176,31,171,31,178,31,175,31,175,30,175,29,174,31,22,31,245,31,245,30,28,31,27,31,27,30,31,31,206,31,243,31,243,30,242,31,243,31,48,31,166,31,36,31,57,31,57,30,251,31,251,30,66,31,66,30,192,31,15,31,50,31,50,30,50,29,50,28,74,31,74,30,27,31,151,31,251,31,251,30,88,31,88,30,234,31,130,31,1,31,1,30,18,31,239,31,13,31,13,30,138,31,47,31,208,31,147,31,91,31,22,31,83,31,35,31,224,31,166,31,237,31,21,31,21,30,226,31,209,31,2,31,130,31,218,31,218,30,175,31,171,31,171,30,112,31,132,31,110,31,138,31,41,31,213,31,71,31,48,31,132,31,135,31,32,31,245,31,92,31,107,31,116,31,116,30,101,31,140,31,226,31,121,31,121,30,223,31,59,31,131,31,13,31,32,31,234,31,97,31,97,30,97,29,39,31,39,30,138,31,138,30,138,29,30,31,30,30,96,31,12,31,28,31,34,31,248,31,248,30,69,31,129,31,129,30,59,31,164,31,76,31,131,31,110,31,69,31,158,31,158,30,106,31,44,31,51,31,107,31,126,31,126,30,120,31,39,31,17,31,67,31,19,31,170,31,1,31,1,30,152,31,152,30,77,31,138,31,20,31,106,31,26,31,107,31,219,31,200,31,107,31,107,30,226,31,16,31,16,30,245,31,182,31,213,31,190,31,249,31,249,30,134,31,108,31,204,31,53,31,183,31,238,31,56,31,56,30,56,29,221,31,52,31,22,31,156,31,3,31,223,31,147,31,147,30,181,31,69,31,43,31,13,31,13,30,3,31,111,31,107,31,183,31,221,31,147,31,232,31,17,31,17,30,244,31,193,31,27,31,168,31,213,31,50,31,176,31,176,30,209,31,209,30,52,31,52,30,93,31,246,31,25,31,245,31,152,31,69,31,170,31,109,31,36,31,218,31,18,31,10,31,10,30,10,29,147,31,21,31,155,31,155,30,155,29,100,31,184,31,184,30,60,31,208,31,18,31,18,30,68,31,226,31,86,31,87,31,144,31,142,31,142,30,142,29,142,28,146,31,182,31,182,30,143,31,195,31,195,30,195,29,195,28,77,31,148,31,148,30,187,31,77,31,70,31,59,31,215,31,238,31,50,31,168,31,228,31,152,31,152,31,30,31,109,31,32,31,32,30,193,31,219,31,130,31,130,30,219,31,62,31,123,31,123,30,15,31,77,31,133,31,212,31,212,30,208,31,75,31,75,30,162,31,28,31,28,30,82,31,97,31,117,31,88,31,222,31,158,31,84,31,122,31,126,31,49,31,239,31,146,31,146,30,146,29,63,31,115,31,115,30,115,29,201,31,198,31,35,31,159,31,118,31,118,30,41,31,99,31,99,30,201,31,201,30,79,31,17,31,191,31,191,30,11,31,11,30,11,29,145,31,200,31,200,30,134,31,218,31,246,31,2,31,2,30,2,29,66,31,165,31,114,31,181,31,220,31,172,31,172,30,172,29,119,31,119,30,119,29,49,31,224,31,167,31,117,31,102,31,58,31,58,30,153,31,173,31,211,31,212,31,106,31,16,31,199,31,185,31,117,31,117,30,246,31,30,31,29,31,196,31,47,31,139,31,144,31,197,31,241,31,18,31,18,30,18,29,88,31,235,31,235,30,235,29,22,31,22,30,231,31,231,30,115,31,115,30,29,31,81,31,81,30,121,31,129,31,129,30,129,29,26,31,226,31,68,31,146,31,104,31,9,31,35,31,72,31,21,31,82,31,120,31,209,31,158,31,83,31,83,30,206,31,206,30,97,31,97,30,89,31,238,31,135,31,155,31,161,31,83,31,83,30,91,31,90,31,221,31,232,31,213,31,4,31,215,31,229,31,229,30,130,31,42,31,42,30,36,31,182,31,118,31,187,31,75,31,118,31,175,31,117,31,159,31,93,31,116,31,210,31,9,31,9,30,159,31,182,31,195,31,65,31,44,31,255,31,171,31,171,30,244,31,97,31,97,30,113,31,26,31,9,31,76,31,57,31,57,30,94,31,94,30,130,31,30,31,24,31,76,31,33,31,128,31,43,31,112,31,203,31,103,31,190,31,248,31,152,31,175,31,74,31,254,31,12,31,73,31,170,31,170,30,181,31,103,31,239,31,228,31,43,31,73,31,75,31,240,31,240,30,240,29,240,28,240,27,60,31,76,31,76,30,76,29,143,31,147,31,20,31,9,31,235,31,238,31,189,31,156,31,64,31,22,31,83,31,170,31,43,31,207,31,52,31,228,31,160,31,7,31,29,31,29,30,29,29,106,31,157,31,95,31,67,31,89,31,104,31,89,31,184,31,245,31,245,30,212,31,212,30,15,31,15,30,118,31,195,31,195,30,33,31,33,30,33,29,199,31,61,31,61,30,241,31,103,31,34,31,219,31,180,31,102,31,120,31,86,31,90,31,198,31,205,31,76,31,76,30,228,31,101,31,46,31,35,31,14,31,169,31,231,31,231,30,17,31,248,31,173,31,173,30,173,29,244,31,244,30,244,29,244,28,66,31,10,31,241,31,230,31,69,31,57,31,100,31,100,30,95,31,188,31,160,31,149,31,149,30,149,29,140,31,140,30,183,31,45,31,255,31,175,31,212,31,121,31,49,31,49,30,80,31,79,31,12,31,20,31,108,31,252,31,78,31,197,31,48,31,82,31,53,31,254,31,254,30,25,31,174,31,125,31,63,31,209,31,6,31,6,30,6,29,248,31,248,30,248,29,178,31,200,31,26,31,111,31,111,30,177,31,21,31,242,31,83,31,167,31,120,31,74,31,212,31,212,30,175,31,158,31,203,31,169,31,56,31,230,31,87,31,163,31,137,31,12,31,8,31,101,31,53,31,53,30,53,29,150,31,202,31,114,31,157,31,157,30,224,31,46,31,10,31,10,30,43,31,43,30,96,31,107,31,36,31,171,31,154,31,123,31,220,31,83,31,250,31,250,30,249,31,80,31,178,31,151,31,217,31,217,30,5,31,5,30,22,31,94,31,127,31,44,31,44,30,124,31,156,31,156,30,83,31,161,31,161,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
