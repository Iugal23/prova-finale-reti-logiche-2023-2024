-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 967;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,0,0,19,0,0,0,167,0,168,0,0,0,191,0,0,0,0,0,253,0,108,0,228,0,210,0,97,0,210,0,16,0,29,0,26,0,208,0,0,0,3,0,7,0,110,0,155,0,232,0,125,0,253,0,19,0,132,0,15,0,125,0,0,0,0,0,7,0,106,0,0,0,0,0,220,0,0,0,0,0,229,0,80,0,184,0,0,0,79,0,22,0,189,0,0,0,161,0,128,0,128,0,86,0,178,0,71,0,3,0,152,0,21,0,206,0,0,0,75,0,122,0,0,0,137,0,209,0,63,0,213,0,176,0,0,0,82,0,226,0,81,0,218,0,140,0,156,0,159,0,0,0,149,0,0,0,246,0,169,0,67,0,160,0,17,0,192,0,155,0,21,0,176,0,133,0,0,0,177,0,12,0,146,0,189,0,41,0,136,0,207,0,136,0,238,0,253,0,0,0,199,0,41,0,110,0,9,0,179,0,67,0,221,0,144,0,20,0,0,0,0,0,39,0,0,0,0,0,70,0,172,0,42,0,214,0,0,0,153,0,74,0,204,0,30,0,0,0,64,0,0,0,176,0,102,0,193,0,139,0,27,0,214,0,157,0,66,0,218,0,64,0,73,0,114,0,162,0,73,0,0,0,167,0,252,0,1,0,181,0,0,0,183,0,49,0,37,0,0,0,14,0,55,0,173,0,122,0,66,0,151,0,0,0,157,0,0,0,93,0,0,0,221,0,71,0,219,0,136,0,59,0,15,0,195,0,253,0,0,0,0,0,112,0,44,0,84,0,220,0,145,0,0,0,0,0,43,0,121,0,33,0,0,0,239,0,138,0,244,0,81,0,43,0,233,0,0,0,0,0,180,0,169,0,202,0,129,0,0,0,9,0,48,0,121,0,102,0,24,0,109,0,193,0,39,0,152,0,102,0,0,0,0,0,94,0,20,0,160,0,13,0,0,0,172,0,139,0,34,0,0,0,57,0,52,0,116,0,33,0,232,0,147,0,69,0,94,0,0,0,0,0,0,0,191,0,154,0,0,0,0,0,154,0,128,0,209,0,9,0,187,0,24,0,130,0,201,0,0,0,121,0,202,0,128,0,251,0,0,0,140,0,0,0,84,0,44,0,198,0,0,0,31,0,151,0,61,0,174,0,0,0,247,0,29,0,13,0,232,0,78,0,120,0,232,0,196,0,180,0,3,0,154,0,0,0,101,0,131,0,127,0,200,0,187,0,183,0,57,0,97,0,101,0,0,0,28,0,174,0,134,0,77,0,147,0,91,0,103,0,0,0,172,0,232,0,0,0,0,0,86,0,133,0,32,0,10,0,211,0,190,0,0,0,40,0,39,0,51,0,14,0,209,0,178,0,149,0,74,0,200,0,145,0,0,0,0,0,183,0,21,0,58,0,111,0,0,0,0,0,38,0,94,0,0,0,0,0,23,0,187,0,152,0,0,0,0,0,67,0,244,0,201,0,10,0,184,0,225,0,228,0,85,0,0,0,0,0,31,0,228,0,59,0,197,0,41,0,6,0,123,0,43,0,120,0,48,0,6,0,0,0,76,0,98,0,0,0,141,0,134,0,91,0,71,0,0,0,77,0,182,0,0,0,245,0,228,0,99,0,88,0,136,0,41,0,126,0,92,0,247,0,152,0,52,0,1,0,0,0,0,0,113,0,70,0,16,0,164,0,92,0,218,0,242,0,0,0,39,0,132,0,244,0,145,0,2,0,0,0,0,0,88,0,142,0,207,0,136,0,0,0,137,0,169,0,251,0,80,0,118,0,86,0,114,0,105,0,151,0,0,0,242,0,131,0,180,0,253,0,65,0,58,0,90,0,45,0,229,0,58,0,128,0,132,0,76,0,171,0,19,0,166,0,187,0,92,0,228,0,99,0,118,0,90,0,0,0,122,0,0,0,111,0,0,0,58,0,20,0,48,0,74,0,214,0,202,0,190,0,125,0,186,0,18,0,0,0,143,0,140,0,161,0,0,0,147,0,0,0,183,0,25,0,113,0,0,0,0,0,25,0,24,0,87,0,54,0,186,0,11,0,238,0,164,0,149,0,21,0,127,0,97,0,231,0,226,0,0,0,212,0,9,0,255,0,100,0,0,0,87,0,193,0,176,0,31,0,254,0,187,0,0,0,115,0,242,0,205,0,217,0,77,0,65,0,138,0,122,0,0,0,239,0,58,0,19,0,213,0,103,0,210,0,0,0,86,0,116,0,58,0,92,0,241,0,0,0,0,0,159,0,217,0,152,0,218,0,0,0,0,0,5,0,28,0,194,0,6,0,204,0,0,0,119,0,86,0,85,0,40,0,0,0,125,0,62,0,0,0,19,0,232,0,146,0,173,0,0,0,54,0,0,0,17,0,29,0,94,0,0,0,0,0,76,0,193,0,136,0,185,0,0,0,42,0,64,0,144,0,79,0,3,0,81,0,206,0,217,0,140,0,25,0,83,0,235,0,82,0,0,0,180,0,231,0,110,0,80,0,32,0,232,0,200,0,45,0,218,0,0,0,0,0,126,0,146,0,229,0,25,0,23,0,165,0,0,0,197,0,41,0,235,0,252,0,96,0,0,0,44,0,204,0,98,0,0,0,44,0,188,0,47,0,11,0,117,0,99,0,0,0,144,0,229,0,0,0,99,0,19,0,165,0,0,0,62,0,160,0,96,0,95,0,215,0,142,0,90,0,17,0,0,0,48,0,245,0,176,0,242,0,189,0,161,0,0,0,114,0,17,0,49,0,129,0,151,0,10,0,216,0,0,0,55,0,0,0,200,0,222,0,234,0,77,0,176,0,33,0,34,0,41,0,126,0,224,0,224,0,7,0,0,0,16,0,0,0,208,0,64,0,123,0,47,0,13,0,0,0,0,0,14,0,122,0,155,0,206,0,0,0,213,0,106,0,0,0,0,0,0,0,42,0,219,0,44,0,0,0,116,0,47,0,0,0,190,0,208,0,220,0,16,0,0,0,171,0,0,0,0,0,47,0,85,0,184,0,0,0,102,0,152,0,178,0,200,0,77,0,252,0,0,0,93,0,207,0,0,0,64,0,0,0,235,0,0,0,26,0,84,0,0,0,253,0,139,0,8,0,93,0,166,0,155,0,139,0,185,0,162,0,0,0,240,0,183,0,28,0,71,0,44,0,227,0,216,0,160,0,248,0,129,0,206,0,89,0,211,0,0,0,0,0,203,0,0,0,102,0,210,0,67,0,15,0,244,0,217,0,11,0,30,0,64,0,63,0,134,0,103,0,81,0,72,0,216,0,13,0,235,0,192,0,146,0,133,0,34,0,70,0,17,0,194,0,221,0,0,0,182,0,206,0,0,0,28,0,164,0,169,0,2,0,187,0,0,0,71,0,67,0,239,0,90,0,86,0,80,0,158,0,76,0,211,0,59,0,63,0,46,0,41,0,64,0,187,0,58,0,232,0,177,0,217,0,52,0,242,0,86,0,56,0,92,0,141,0,61,0,8,0,166,0,230,0,0,0,239,0,23,0,153,0,169,0,107,0,0,0,137,0,69,0,39,0,232,0,251,0,0,0,93,0,57,0,220,0,88,0,118,0,213,0,207,0,98,0,33,0,137,0,151,0,202,0,103,0,140,0,164,0,249,0,0,0,196,0,60,0,107,0,168,0,204,0,153,0,0,0,116,0,29,0,188,0,71,0,89,0,124,0,0,0,0,0,170,0,135,0,0,0,167,0,175,0,143,0,60,0,0,0,0,0,0,0,0,0,192,0,150,0,29,0,59,0,41,0,0,0,120,0,0,0,0,0,209,0,0,0,137,0,0,0,194,0,0,0,225,0,228,0,121,0,0,0,0,0,16,0,0,0,249,0,0,0,6,0,124,0,113,0,193,0,168,0,230,0,48,0,0,0,238,0,134,0,0,0,0,0,16,0,25,0,118,0,238,0,112,0,0,0,0,0,192,0,0,0,185,0,170,0,31,0,215,0,0,0,117,0,71,0,0,0,254,0,179,0,96,0,0,0,0,0,227,0,0,0,0,0,173,0,108,0,130,0,151,0,244,0,39,0,8,0,66,0,209,0,44,0,105,0,73,0,31,0,145,0,18,0,0,0,199,0,154,0,174,0,126,0,255,0,201,0,101,0,31,0,158,0,189,0,235,0,176,0,223,0,122,0,49,0,58,0,5,0,215,0,206,0,0,0,0,0,0,0,208,0,0,0,176,0,84,0,79,0,0,0,39,0,40,0,134,0,99,0,33,0,0,0,173,0,81,0,0,0,32,0,169,0,60,0,245,0,118,0,71,0,0,0,116,0,28,0,0,0,248,0,74,0,237,0,180,0,13,0,0,0,56,0,3,0);
signal scenario_full  : scenario_type := (0,0,0,0,19,31,19,30,167,31,168,31,168,30,191,31,191,30,191,29,253,31,108,31,228,31,210,31,97,31,210,31,16,31,29,31,26,31,208,31,208,30,3,31,7,31,110,31,155,31,232,31,125,31,253,31,19,31,132,31,15,31,125,31,125,30,125,29,7,31,106,31,106,30,106,29,220,31,220,30,220,29,229,31,80,31,184,31,184,30,79,31,22,31,189,31,189,30,161,31,128,31,128,31,86,31,178,31,71,31,3,31,152,31,21,31,206,31,206,30,75,31,122,31,122,30,137,31,209,31,63,31,213,31,176,31,176,30,82,31,226,31,81,31,218,31,140,31,156,31,159,31,159,30,149,31,149,30,246,31,169,31,67,31,160,31,17,31,192,31,155,31,21,31,176,31,133,31,133,30,177,31,12,31,146,31,189,31,41,31,136,31,207,31,136,31,238,31,253,31,253,30,199,31,41,31,110,31,9,31,179,31,67,31,221,31,144,31,20,31,20,30,20,29,39,31,39,30,39,29,70,31,172,31,42,31,214,31,214,30,153,31,74,31,204,31,30,31,30,30,64,31,64,30,176,31,102,31,193,31,139,31,27,31,214,31,157,31,66,31,218,31,64,31,73,31,114,31,162,31,73,31,73,30,167,31,252,31,1,31,181,31,181,30,183,31,49,31,37,31,37,30,14,31,55,31,173,31,122,31,66,31,151,31,151,30,157,31,157,30,93,31,93,30,221,31,71,31,219,31,136,31,59,31,15,31,195,31,253,31,253,30,253,29,112,31,44,31,84,31,220,31,145,31,145,30,145,29,43,31,121,31,33,31,33,30,239,31,138,31,244,31,81,31,43,31,233,31,233,30,233,29,180,31,169,31,202,31,129,31,129,30,9,31,48,31,121,31,102,31,24,31,109,31,193,31,39,31,152,31,102,31,102,30,102,29,94,31,20,31,160,31,13,31,13,30,172,31,139,31,34,31,34,30,57,31,52,31,116,31,33,31,232,31,147,31,69,31,94,31,94,30,94,29,94,28,191,31,154,31,154,30,154,29,154,31,128,31,209,31,9,31,187,31,24,31,130,31,201,31,201,30,121,31,202,31,128,31,251,31,251,30,140,31,140,30,84,31,44,31,198,31,198,30,31,31,151,31,61,31,174,31,174,30,247,31,29,31,13,31,232,31,78,31,120,31,232,31,196,31,180,31,3,31,154,31,154,30,101,31,131,31,127,31,200,31,187,31,183,31,57,31,97,31,101,31,101,30,28,31,174,31,134,31,77,31,147,31,91,31,103,31,103,30,172,31,232,31,232,30,232,29,86,31,133,31,32,31,10,31,211,31,190,31,190,30,40,31,39,31,51,31,14,31,209,31,178,31,149,31,74,31,200,31,145,31,145,30,145,29,183,31,21,31,58,31,111,31,111,30,111,29,38,31,94,31,94,30,94,29,23,31,187,31,152,31,152,30,152,29,67,31,244,31,201,31,10,31,184,31,225,31,228,31,85,31,85,30,85,29,31,31,228,31,59,31,197,31,41,31,6,31,123,31,43,31,120,31,48,31,6,31,6,30,76,31,98,31,98,30,141,31,134,31,91,31,71,31,71,30,77,31,182,31,182,30,245,31,228,31,99,31,88,31,136,31,41,31,126,31,92,31,247,31,152,31,52,31,1,31,1,30,1,29,113,31,70,31,16,31,164,31,92,31,218,31,242,31,242,30,39,31,132,31,244,31,145,31,2,31,2,30,2,29,88,31,142,31,207,31,136,31,136,30,137,31,169,31,251,31,80,31,118,31,86,31,114,31,105,31,151,31,151,30,242,31,131,31,180,31,253,31,65,31,58,31,90,31,45,31,229,31,58,31,128,31,132,31,76,31,171,31,19,31,166,31,187,31,92,31,228,31,99,31,118,31,90,31,90,30,122,31,122,30,111,31,111,30,58,31,20,31,48,31,74,31,214,31,202,31,190,31,125,31,186,31,18,31,18,30,143,31,140,31,161,31,161,30,147,31,147,30,183,31,25,31,113,31,113,30,113,29,25,31,24,31,87,31,54,31,186,31,11,31,238,31,164,31,149,31,21,31,127,31,97,31,231,31,226,31,226,30,212,31,9,31,255,31,100,31,100,30,87,31,193,31,176,31,31,31,254,31,187,31,187,30,115,31,242,31,205,31,217,31,77,31,65,31,138,31,122,31,122,30,239,31,58,31,19,31,213,31,103,31,210,31,210,30,86,31,116,31,58,31,92,31,241,31,241,30,241,29,159,31,217,31,152,31,218,31,218,30,218,29,5,31,28,31,194,31,6,31,204,31,204,30,119,31,86,31,85,31,40,31,40,30,125,31,62,31,62,30,19,31,232,31,146,31,173,31,173,30,54,31,54,30,17,31,29,31,94,31,94,30,94,29,76,31,193,31,136,31,185,31,185,30,42,31,64,31,144,31,79,31,3,31,81,31,206,31,217,31,140,31,25,31,83,31,235,31,82,31,82,30,180,31,231,31,110,31,80,31,32,31,232,31,200,31,45,31,218,31,218,30,218,29,126,31,146,31,229,31,25,31,23,31,165,31,165,30,197,31,41,31,235,31,252,31,96,31,96,30,44,31,204,31,98,31,98,30,44,31,188,31,47,31,11,31,117,31,99,31,99,30,144,31,229,31,229,30,99,31,19,31,165,31,165,30,62,31,160,31,96,31,95,31,215,31,142,31,90,31,17,31,17,30,48,31,245,31,176,31,242,31,189,31,161,31,161,30,114,31,17,31,49,31,129,31,151,31,10,31,216,31,216,30,55,31,55,30,200,31,222,31,234,31,77,31,176,31,33,31,34,31,41,31,126,31,224,31,224,31,7,31,7,30,16,31,16,30,208,31,64,31,123,31,47,31,13,31,13,30,13,29,14,31,122,31,155,31,206,31,206,30,213,31,106,31,106,30,106,29,106,28,42,31,219,31,44,31,44,30,116,31,47,31,47,30,190,31,208,31,220,31,16,31,16,30,171,31,171,30,171,29,47,31,85,31,184,31,184,30,102,31,152,31,178,31,200,31,77,31,252,31,252,30,93,31,207,31,207,30,64,31,64,30,235,31,235,30,26,31,84,31,84,30,253,31,139,31,8,31,93,31,166,31,155,31,139,31,185,31,162,31,162,30,240,31,183,31,28,31,71,31,44,31,227,31,216,31,160,31,248,31,129,31,206,31,89,31,211,31,211,30,211,29,203,31,203,30,102,31,210,31,67,31,15,31,244,31,217,31,11,31,30,31,64,31,63,31,134,31,103,31,81,31,72,31,216,31,13,31,235,31,192,31,146,31,133,31,34,31,70,31,17,31,194,31,221,31,221,30,182,31,206,31,206,30,28,31,164,31,169,31,2,31,187,31,187,30,71,31,67,31,239,31,90,31,86,31,80,31,158,31,76,31,211,31,59,31,63,31,46,31,41,31,64,31,187,31,58,31,232,31,177,31,217,31,52,31,242,31,86,31,56,31,92,31,141,31,61,31,8,31,166,31,230,31,230,30,239,31,23,31,153,31,169,31,107,31,107,30,137,31,69,31,39,31,232,31,251,31,251,30,93,31,57,31,220,31,88,31,118,31,213,31,207,31,98,31,33,31,137,31,151,31,202,31,103,31,140,31,164,31,249,31,249,30,196,31,60,31,107,31,168,31,204,31,153,31,153,30,116,31,29,31,188,31,71,31,89,31,124,31,124,30,124,29,170,31,135,31,135,30,167,31,175,31,143,31,60,31,60,30,60,29,60,28,60,27,192,31,150,31,29,31,59,31,41,31,41,30,120,31,120,30,120,29,209,31,209,30,137,31,137,30,194,31,194,30,225,31,228,31,121,31,121,30,121,29,16,31,16,30,249,31,249,30,6,31,124,31,113,31,193,31,168,31,230,31,48,31,48,30,238,31,134,31,134,30,134,29,16,31,25,31,118,31,238,31,112,31,112,30,112,29,192,31,192,30,185,31,170,31,31,31,215,31,215,30,117,31,71,31,71,30,254,31,179,31,96,31,96,30,96,29,227,31,227,30,227,29,173,31,108,31,130,31,151,31,244,31,39,31,8,31,66,31,209,31,44,31,105,31,73,31,31,31,145,31,18,31,18,30,199,31,154,31,174,31,126,31,255,31,201,31,101,31,31,31,158,31,189,31,235,31,176,31,223,31,122,31,49,31,58,31,5,31,215,31,206,31,206,30,206,29,206,28,208,31,208,30,176,31,84,31,79,31,79,30,39,31,40,31,134,31,99,31,33,31,33,30,173,31,81,31,81,30,32,31,169,31,60,31,245,31,118,31,71,31,71,30,116,31,28,31,28,30,248,31,74,31,237,31,180,31,13,31,13,30,56,31,3,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
