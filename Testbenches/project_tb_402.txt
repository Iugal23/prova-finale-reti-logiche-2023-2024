-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 702;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (68,0,95,0,201,0,173,0,46,0,190,0,0,0,155,0,225,0,99,0,0,0,120,0,85,0,162,0,125,0,193,0,176,0,44,0,85,0,7,0,247,0,209,0,164,0,0,0,216,0,161,0,47,0,0,0,71,0,88,0,0,0,245,0,16,0,88,0,29,0,0,0,151,0,225,0,114,0,249,0,0,0,0,0,121,0,94,0,136,0,0,0,0,0,41,0,179,0,0,0,134,0,0,0,82,0,195,0,161,0,24,0,243,0,1,0,137,0,160,0,54,0,188,0,0,0,114,0,68,0,87,0,188,0,59,0,213,0,215,0,40,0,161,0,184,0,68,0,178,0,0,0,115,0,205,0,131,0,78,0,60,0,117,0,159,0,95,0,118,0,104,0,4,0,0,0,4,0,0,0,0,0,49,0,0,0,72,0,109,0,106,0,0,0,245,0,225,0,83,0,56,0,96,0,106,0,0,0,133,0,175,0,0,0,211,0,177,0,0,0,40,0,185,0,196,0,8,0,0,0,200,0,102,0,143,0,96,0,37,0,36,0,195,0,213,0,76,0,225,0,249,0,209,0,31,0,9,0,0,0,161,0,193,0,46,0,250,0,0,0,15,0,64,0,129,0,40,0,209,0,212,0,0,0,67,0,7,0,166,0,17,0,8,0,149,0,0,0,0,0,43,0,109,0,237,0,0,0,219,0,19,0,87,0,13,0,248,0,0,0,157,0,171,0,8,0,132,0,212,0,175,0,61,0,0,0,0,0,0,0,98,0,207,0,49,0,113,0,50,0,13,0,194,0,2,0,232,0,188,0,168,0,157,0,43,0,166,0,242,0,0,0,41,0,66,0,213,0,113,0,0,0,143,0,9,0,35,0,166,0,1,0,87,0,155,0,32,0,0,0,0,0,131,0,187,0,131,0,213,0,206,0,252,0,220,0,0,0,0,0,65,0,89,0,212,0,124,0,0,0,220,0,6,0,27,0,163,0,90,0,200,0,236,0,0,0,34,0,16,0,193,0,26,0,0,0,247,0,227,0,11,0,0,0,201,0,0,0,0,0,177,0,0,0,0,0,233,0,44,0,45,0,216,0,0,0,0,0,120,0,83,0,117,0,118,0,176,0,236,0,246,0,126,0,34,0,103,0,0,0,2,0,48,0,218,0,247,0,0,0,188,0,2,0,88,0,18,0,215,0,70,0,73,0,0,0,78,0,72,0,12,0,36,0,76,0,62,0,227,0,250,0,133,0,232,0,90,0,71,0,231,0,141,0,139,0,89,0,137,0,0,0,132,0,27,0,234,0,0,0,249,0,39,0,0,0,197,0,108,0,0,0,171,0,6,0,249,0,155,0,220,0,141,0,158,0,0,0,156,0,0,0,68,0,0,0,15,0,214,0,0,0,152,0,248,0,151,0,21,0,143,0,11,0,181,0,50,0,139,0,0,0,0,0,0,0,10,0,232,0,0,0,54,0,67,0,121,0,132,0,147,0,0,0,90,0,0,0,83,0,221,0,188,0,0,0,76,0,136,0,37,0,0,0,0,0,126,0,201,0,0,0,0,0,10,0,180,0,48,0,0,0,222,0,0,0,178,0,199,0,0,0,187,0,61,0,2,0,140,0,221,0,162,0,74,0,197,0,0,0,3,0,69,0,0,0,0,0,86,0,118,0,165,0,25,0,105,0,0,0,0,0,20,0,176,0,126,0,85,0,53,0,91,0,92,0,110,0,109,0,93,0,56,0,130,0,58,0,15,0,133,0,176,0,155,0,227,0,56,0,109,0,249,0,0,0,0,0,43,0,141,0,169,0,2,0,0,0,0,0,43,0,188,0,255,0,204,0,208,0,211,0,1,0,86,0,105,0,0,0,209,0,229,0,0,0,0,0,163,0,236,0,0,0,0,0,76,0,116,0,0,0,8,0,32,0,246,0,123,0,44,0,227,0,113,0,239,0,0,0,0,0,233,0,234,0,51,0,75,0,62,0,195,0,0,0,222,0,52,0,85,0,0,0,121,0,0,0,0,0,185,0,134,0,238,0,166,0,51,0,22,0,165,0,51,0,176,0,84,0,42,0,67,0,147,0,144,0,151,0,166,0,152,0,0,0,199,0,207,0,0,0,211,0,219,0,143,0,67,0,46,0,143,0,228,0,106,0,0,0,0,0,171,0,111,0,10,0,36,0,97,0,140,0,0,0,95,0,48,0,0,0,185,0,121,0,225,0,8,0,235,0,131,0,102,0,0,0,0,0,0,0,133,0,227,0,203,0,196,0,23,0,0,0,105,0,168,0,41,0,0,0,15,0,0,0,96,0,163,0,7,0,129,0,153,0,231,0,72,0,163,0,84,0,82,0,130,0,115,0,108,0,102,0,106,0,85,0,113,0,10,0,0,0,0,0,90,0,44,0,174,0,102,0,88,0,0,0,154,0,89,0,42,0,58,0,152,0,196,0,197,0,76,0,221,0,64,0,173,0,175,0,189,0,0,0,0,0,0,0,222,0,113,0,198,0,0,0,25,0,0,0,246,0,137,0,156,0,130,0,130,0,238,0,0,0,68,0,0,0,166,0,199,0,199,0,190,0,64,0,0,0,164,0,255,0,25,0,48,0,197,0,179,0,29,0,13,0,0,0,247,0,251,0,237,0,0,0,0,0,0,0,154,0,140,0,172,0,72,0,118,0,0,0,249,0,60,0,106,0,82,0,234,0,157,0,93,0,250,0,172,0,45,0,0,0,95,0,162,0,0,0,136,0,144,0,27,0,255,0,7,0,146,0,157,0,138,0,13,0,218,0,249,0,186,0,130,0,205,0,226,0,205,0,145,0,90,0,89,0,142,0,0,0,189,0,157,0,0,0,238,0,241,0,0,0,236,0,0,0,0,0,160,0,122,0,0,0,118,0,87,0,254,0,178,0,102,0,229,0,0,0,0,0,126,0,150,0,140,0,239,0,66,0,0,0,169,0,99,0,242,0,0,0,193,0,0,0,204,0,128,0,197,0,253,0,248,0,198,0,129,0,83,0,0,0,206,0,179,0,69,0,217,0,195,0,0,0,223,0,241,0,0,0,76,0,0,0,165,0,35,0,0,0,51,0,98,0,0,0,90,0,7,0,20,0,198,0,79,0,47,0,113,0,227,0,218,0,0,0,0,0,117,0);
signal scenario_full  : scenario_type := (68,31,95,31,201,31,173,31,46,31,190,31,190,30,155,31,225,31,99,31,99,30,120,31,85,31,162,31,125,31,193,31,176,31,44,31,85,31,7,31,247,31,209,31,164,31,164,30,216,31,161,31,47,31,47,30,71,31,88,31,88,30,245,31,16,31,88,31,29,31,29,30,151,31,225,31,114,31,249,31,249,30,249,29,121,31,94,31,136,31,136,30,136,29,41,31,179,31,179,30,134,31,134,30,82,31,195,31,161,31,24,31,243,31,1,31,137,31,160,31,54,31,188,31,188,30,114,31,68,31,87,31,188,31,59,31,213,31,215,31,40,31,161,31,184,31,68,31,178,31,178,30,115,31,205,31,131,31,78,31,60,31,117,31,159,31,95,31,118,31,104,31,4,31,4,30,4,31,4,30,4,29,49,31,49,30,72,31,109,31,106,31,106,30,245,31,225,31,83,31,56,31,96,31,106,31,106,30,133,31,175,31,175,30,211,31,177,31,177,30,40,31,185,31,196,31,8,31,8,30,200,31,102,31,143,31,96,31,37,31,36,31,195,31,213,31,76,31,225,31,249,31,209,31,31,31,9,31,9,30,161,31,193,31,46,31,250,31,250,30,15,31,64,31,129,31,40,31,209,31,212,31,212,30,67,31,7,31,166,31,17,31,8,31,149,31,149,30,149,29,43,31,109,31,237,31,237,30,219,31,19,31,87,31,13,31,248,31,248,30,157,31,171,31,8,31,132,31,212,31,175,31,61,31,61,30,61,29,61,28,98,31,207,31,49,31,113,31,50,31,13,31,194,31,2,31,232,31,188,31,168,31,157,31,43,31,166,31,242,31,242,30,41,31,66,31,213,31,113,31,113,30,143,31,9,31,35,31,166,31,1,31,87,31,155,31,32,31,32,30,32,29,131,31,187,31,131,31,213,31,206,31,252,31,220,31,220,30,220,29,65,31,89,31,212,31,124,31,124,30,220,31,6,31,27,31,163,31,90,31,200,31,236,31,236,30,34,31,16,31,193,31,26,31,26,30,247,31,227,31,11,31,11,30,201,31,201,30,201,29,177,31,177,30,177,29,233,31,44,31,45,31,216,31,216,30,216,29,120,31,83,31,117,31,118,31,176,31,236,31,246,31,126,31,34,31,103,31,103,30,2,31,48,31,218,31,247,31,247,30,188,31,2,31,88,31,18,31,215,31,70,31,73,31,73,30,78,31,72,31,12,31,36,31,76,31,62,31,227,31,250,31,133,31,232,31,90,31,71,31,231,31,141,31,139,31,89,31,137,31,137,30,132,31,27,31,234,31,234,30,249,31,39,31,39,30,197,31,108,31,108,30,171,31,6,31,249,31,155,31,220,31,141,31,158,31,158,30,156,31,156,30,68,31,68,30,15,31,214,31,214,30,152,31,248,31,151,31,21,31,143,31,11,31,181,31,50,31,139,31,139,30,139,29,139,28,10,31,232,31,232,30,54,31,67,31,121,31,132,31,147,31,147,30,90,31,90,30,83,31,221,31,188,31,188,30,76,31,136,31,37,31,37,30,37,29,126,31,201,31,201,30,201,29,10,31,180,31,48,31,48,30,222,31,222,30,178,31,199,31,199,30,187,31,61,31,2,31,140,31,221,31,162,31,74,31,197,31,197,30,3,31,69,31,69,30,69,29,86,31,118,31,165,31,25,31,105,31,105,30,105,29,20,31,176,31,126,31,85,31,53,31,91,31,92,31,110,31,109,31,93,31,56,31,130,31,58,31,15,31,133,31,176,31,155,31,227,31,56,31,109,31,249,31,249,30,249,29,43,31,141,31,169,31,2,31,2,30,2,29,43,31,188,31,255,31,204,31,208,31,211,31,1,31,86,31,105,31,105,30,209,31,229,31,229,30,229,29,163,31,236,31,236,30,236,29,76,31,116,31,116,30,8,31,32,31,246,31,123,31,44,31,227,31,113,31,239,31,239,30,239,29,233,31,234,31,51,31,75,31,62,31,195,31,195,30,222,31,52,31,85,31,85,30,121,31,121,30,121,29,185,31,134,31,238,31,166,31,51,31,22,31,165,31,51,31,176,31,84,31,42,31,67,31,147,31,144,31,151,31,166,31,152,31,152,30,199,31,207,31,207,30,211,31,219,31,143,31,67,31,46,31,143,31,228,31,106,31,106,30,106,29,171,31,111,31,10,31,36,31,97,31,140,31,140,30,95,31,48,31,48,30,185,31,121,31,225,31,8,31,235,31,131,31,102,31,102,30,102,29,102,28,133,31,227,31,203,31,196,31,23,31,23,30,105,31,168,31,41,31,41,30,15,31,15,30,96,31,163,31,7,31,129,31,153,31,231,31,72,31,163,31,84,31,82,31,130,31,115,31,108,31,102,31,106,31,85,31,113,31,10,31,10,30,10,29,90,31,44,31,174,31,102,31,88,31,88,30,154,31,89,31,42,31,58,31,152,31,196,31,197,31,76,31,221,31,64,31,173,31,175,31,189,31,189,30,189,29,189,28,222,31,113,31,198,31,198,30,25,31,25,30,246,31,137,31,156,31,130,31,130,31,238,31,238,30,68,31,68,30,166,31,199,31,199,31,190,31,64,31,64,30,164,31,255,31,25,31,48,31,197,31,179,31,29,31,13,31,13,30,247,31,251,31,237,31,237,30,237,29,237,28,154,31,140,31,172,31,72,31,118,31,118,30,249,31,60,31,106,31,82,31,234,31,157,31,93,31,250,31,172,31,45,31,45,30,95,31,162,31,162,30,136,31,144,31,27,31,255,31,7,31,146,31,157,31,138,31,13,31,218,31,249,31,186,31,130,31,205,31,226,31,205,31,145,31,90,31,89,31,142,31,142,30,189,31,157,31,157,30,238,31,241,31,241,30,236,31,236,30,236,29,160,31,122,31,122,30,118,31,87,31,254,31,178,31,102,31,229,31,229,30,229,29,126,31,150,31,140,31,239,31,66,31,66,30,169,31,99,31,242,31,242,30,193,31,193,30,204,31,128,31,197,31,253,31,248,31,198,31,129,31,83,31,83,30,206,31,179,31,69,31,217,31,195,31,195,30,223,31,241,31,241,30,76,31,76,30,165,31,35,31,35,30,51,31,98,31,98,30,90,31,7,31,20,31,198,31,79,31,47,31,113,31,227,31,218,31,218,30,218,29,117,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
