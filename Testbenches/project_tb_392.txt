-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 659;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (71,0,0,0,251,0,130,0,137,0,0,0,194,0,84,0,170,0,29,0,101,0,42,0,72,0,186,0,8,0,0,0,237,0,180,0,105,0,108,0,122,0,0,0,0,0,109,0,81,0,65,0,200,0,0,0,103,0,0,0,22,0,81,0,64,0,66,0,0,0,158,0,71,0,63,0,200,0,118,0,224,0,91,0,211,0,0,0,247,0,90,0,87,0,9,0,152,0,148,0,59,0,99,0,92,0,58,0,0,0,144,0,174,0,138,0,221,0,0,0,0,0,0,0,0,0,112,0,66,0,233,0,70,0,14,0,147,0,194,0,191,0,211,0,74,0,87,0,208,0,0,0,137,0,226,0,74,0,253,0,0,0,66,0,115,0,169,0,211,0,214,0,123,0,0,0,176,0,0,0,135,0,0,0,200,0,75,0,168,0,231,0,201,0,179,0,174,0,61,0,204,0,109,0,0,0,21,0,216,0,32,0,154,0,49,0,31,0,11,0,242,0,189,0,98,0,0,0,96,0,231,0,214,0,85,0,48,0,207,0,244,0,29,0,20,0,89,0,98,0,161,0,18,0,243,0,6,0,25,0,85,0,239,0,178,0,0,0,127,0,154,0,0,0,0,0,184,0,99,0,112,0,0,0,12,0,161,0,70,0,63,0,57,0,30,0,231,0,38,0,0,0,93,0,39,0,0,0,74,0,129,0,99,0,72,0,141,0,229,0,139,0,32,0,236,0,0,0,75,0,172,0,253,0,63,0,248,0,169,0,239,0,26,0,171,0,188,0,47,0,87,0,11,0,78,0,34,0,27,0,148,0,0,0,131,0,0,0,185,0,61,0,243,0,200,0,21,0,123,0,218,0,0,0,205,0,0,0,163,0,175,0,228,0,13,0,151,0,75,0,37,0,40,0,243,0,37,0,189,0,172,0,149,0,160,0,181,0,138,0,115,0,138,0,163,0,0,0,183,0,180,0,178,0,0,0,243,0,161,0,94,0,101,0,67,0,0,0,193,0,232,0,0,0,0,0,180,0,200,0,212,0,224,0,251,0,219,0,0,0,106,0,185,0,104,0,0,0,169,0,106,0,0,0,31,0,250,0,151,0,170,0,0,0,0,0,16,0,150,0,139,0,58,0,67,0,0,0,0,0,11,0,16,0,97,0,0,0,109,0,176,0,40,0,134,0,174,0,43,0,33,0,0,0,162,0,0,0,69,0,2,0,83,0,238,0,56,0,164,0,25,0,106,0,126,0,114,0,102,0,32,0,229,0,0,0,204,0,163,0,159,0,0,0,37,0,0,0,226,0,221,0,26,0,214,0,88,0,40,0,215,0,119,0,193,0,228,0,0,0,64,0,69,0,34,0,174,0,244,0,0,0,243,0,116,0,0,0,90,0,0,0,93,0,46,0,94,0,154,0,93,0,0,0,0,0,236,0,1,0,0,0,167,0,203,0,146,0,0,0,0,0,128,0,0,0,197,0,185,0,40,0,0,0,166,0,144,0,139,0,60,0,98,0,94,0,105,0,112,0,55,0,173,0,0,0,164,0,0,0,230,0,31,0,0,0,211,0,151,0,2,0,195,0,3,0,73,0,0,0,141,0,0,0,104,0,145,0,94,0,0,0,246,0,133,0,203,0,72,0,17,0,77,0,11,0,108,0,0,0,81,0,39,0,0,0,0,0,171,0,101,0,196,0,127,0,0,0,51,0,112,0,0,0,0,0,241,0,233,0,52,0,81,0,0,0,241,0,213,0,114,0,138,0,135,0,111,0,0,0,211,0,126,0,24,0,195,0,190,0,104,0,5,0,106,0,0,0,218,0,67,0,47,0,35,0,0,0,0,0,0,0,31,0,147,0,154,0,38,0,92,0,0,0,191,0,96,0,232,0,0,0,161,0,0,0,116,0,4,0,126,0,26,0,182,0,0,0,199,0,82,0,173,0,222,0,6,0,0,0,179,0,3,0,88,0,0,0,110,0,75,0,58,0,18,0,224,0,20,0,0,0,0,0,106,0,152,0,174,0,12,0,147,0,153,0,190,0,169,0,229,0,0,0,32,0,98,0,0,0,212,0,197,0,171,0,133,0,254,0,31,0,152,0,0,0,254,0,95,0,204,0,9,0,4,0,16,0,78,0,218,0,141,0,85,0,0,0,107,0,136,0,42,0,0,0,123,0,215,0,177,0,224,0,0,0,0,0,21,0,174,0,0,0,178,0,0,0,199,0,105,0,251,0,228,0,0,0,189,0,139,0,122,0,0,0,242,0,107,0,112,0,135,0,91,0,151,0,91,0,251,0,128,0,41,0,107,0,145,0,78,0,174,0,49,0,11,0,135,0,193,0,0,0,176,0,169,0,0,0,50,0,9,0,0,0,226,0,109,0,0,0,249,0,67,0,31,0,32,0,253,0,161,0,205,0,0,0,239,0,242,0,49,0,0,0,0,0,0,0,89,0,0,0,101,0,45,0,133,0,73,0,251,0,61,0,200,0,219,0,0,0,0,0,138,0,92,0,117,0,226,0,0,0,242,0,145,0,224,0,88,0,49,0,124,0,231,0,0,0,0,0,0,0,0,0,74,0,63,0,211,0,183,0,0,0,203,0,244,0,79,0,176,0,0,0,0,0,55,0,69,0,250,0,0,0,27,0,186,0,123,0,0,0,232,0,52,0,51,0,113,0,0,0,9,0,228,0,73,0,201,0,148,0,45,0,185,0,213,0,201,0,2,0,181,0,128,0,0,0,0,0,38,0,215,0,88,0,122,0,7,0,156,0,0,0,190,0,156,0,61,0,165,0,92,0,219,0,124,0,0,0,175,0,207,0,200,0,169,0,22,0,98,0,163,0,77,0,146,0,0,0,117,0,64,0,0,0,186,0,29,0,66,0,89,0,27,0,67,0,237,0,84,0,4,0,0,0,7,0,0,0,225,0,66,0,60,0,54,0,188,0,221,0,64,0,44,0);
signal scenario_full  : scenario_type := (71,31,71,30,251,31,130,31,137,31,137,30,194,31,84,31,170,31,29,31,101,31,42,31,72,31,186,31,8,31,8,30,237,31,180,31,105,31,108,31,122,31,122,30,122,29,109,31,81,31,65,31,200,31,200,30,103,31,103,30,22,31,81,31,64,31,66,31,66,30,158,31,71,31,63,31,200,31,118,31,224,31,91,31,211,31,211,30,247,31,90,31,87,31,9,31,152,31,148,31,59,31,99,31,92,31,58,31,58,30,144,31,174,31,138,31,221,31,221,30,221,29,221,28,221,27,112,31,66,31,233,31,70,31,14,31,147,31,194,31,191,31,211,31,74,31,87,31,208,31,208,30,137,31,226,31,74,31,253,31,253,30,66,31,115,31,169,31,211,31,214,31,123,31,123,30,176,31,176,30,135,31,135,30,200,31,75,31,168,31,231,31,201,31,179,31,174,31,61,31,204,31,109,31,109,30,21,31,216,31,32,31,154,31,49,31,31,31,11,31,242,31,189,31,98,31,98,30,96,31,231,31,214,31,85,31,48,31,207,31,244,31,29,31,20,31,89,31,98,31,161,31,18,31,243,31,6,31,25,31,85,31,239,31,178,31,178,30,127,31,154,31,154,30,154,29,184,31,99,31,112,31,112,30,12,31,161,31,70,31,63,31,57,31,30,31,231,31,38,31,38,30,93,31,39,31,39,30,74,31,129,31,99,31,72,31,141,31,229,31,139,31,32,31,236,31,236,30,75,31,172,31,253,31,63,31,248,31,169,31,239,31,26,31,171,31,188,31,47,31,87,31,11,31,78,31,34,31,27,31,148,31,148,30,131,31,131,30,185,31,61,31,243,31,200,31,21,31,123,31,218,31,218,30,205,31,205,30,163,31,175,31,228,31,13,31,151,31,75,31,37,31,40,31,243,31,37,31,189,31,172,31,149,31,160,31,181,31,138,31,115,31,138,31,163,31,163,30,183,31,180,31,178,31,178,30,243,31,161,31,94,31,101,31,67,31,67,30,193,31,232,31,232,30,232,29,180,31,200,31,212,31,224,31,251,31,219,31,219,30,106,31,185,31,104,31,104,30,169,31,106,31,106,30,31,31,250,31,151,31,170,31,170,30,170,29,16,31,150,31,139,31,58,31,67,31,67,30,67,29,11,31,16,31,97,31,97,30,109,31,176,31,40,31,134,31,174,31,43,31,33,31,33,30,162,31,162,30,69,31,2,31,83,31,238,31,56,31,164,31,25,31,106,31,126,31,114,31,102,31,32,31,229,31,229,30,204,31,163,31,159,31,159,30,37,31,37,30,226,31,221,31,26,31,214,31,88,31,40,31,215,31,119,31,193,31,228,31,228,30,64,31,69,31,34,31,174,31,244,31,244,30,243,31,116,31,116,30,90,31,90,30,93,31,46,31,94,31,154,31,93,31,93,30,93,29,236,31,1,31,1,30,167,31,203,31,146,31,146,30,146,29,128,31,128,30,197,31,185,31,40,31,40,30,166,31,144,31,139,31,60,31,98,31,94,31,105,31,112,31,55,31,173,31,173,30,164,31,164,30,230,31,31,31,31,30,211,31,151,31,2,31,195,31,3,31,73,31,73,30,141,31,141,30,104,31,145,31,94,31,94,30,246,31,133,31,203,31,72,31,17,31,77,31,11,31,108,31,108,30,81,31,39,31,39,30,39,29,171,31,101,31,196,31,127,31,127,30,51,31,112,31,112,30,112,29,241,31,233,31,52,31,81,31,81,30,241,31,213,31,114,31,138,31,135,31,111,31,111,30,211,31,126,31,24,31,195,31,190,31,104,31,5,31,106,31,106,30,218,31,67,31,47,31,35,31,35,30,35,29,35,28,31,31,147,31,154,31,38,31,92,31,92,30,191,31,96,31,232,31,232,30,161,31,161,30,116,31,4,31,126,31,26,31,182,31,182,30,199,31,82,31,173,31,222,31,6,31,6,30,179,31,3,31,88,31,88,30,110,31,75,31,58,31,18,31,224,31,20,31,20,30,20,29,106,31,152,31,174,31,12,31,147,31,153,31,190,31,169,31,229,31,229,30,32,31,98,31,98,30,212,31,197,31,171,31,133,31,254,31,31,31,152,31,152,30,254,31,95,31,204,31,9,31,4,31,16,31,78,31,218,31,141,31,85,31,85,30,107,31,136,31,42,31,42,30,123,31,215,31,177,31,224,31,224,30,224,29,21,31,174,31,174,30,178,31,178,30,199,31,105,31,251,31,228,31,228,30,189,31,139,31,122,31,122,30,242,31,107,31,112,31,135,31,91,31,151,31,91,31,251,31,128,31,41,31,107,31,145,31,78,31,174,31,49,31,11,31,135,31,193,31,193,30,176,31,169,31,169,30,50,31,9,31,9,30,226,31,109,31,109,30,249,31,67,31,31,31,32,31,253,31,161,31,205,31,205,30,239,31,242,31,49,31,49,30,49,29,49,28,89,31,89,30,101,31,45,31,133,31,73,31,251,31,61,31,200,31,219,31,219,30,219,29,138,31,92,31,117,31,226,31,226,30,242,31,145,31,224,31,88,31,49,31,124,31,231,31,231,30,231,29,231,28,231,27,74,31,63,31,211,31,183,31,183,30,203,31,244,31,79,31,176,31,176,30,176,29,55,31,69,31,250,31,250,30,27,31,186,31,123,31,123,30,232,31,52,31,51,31,113,31,113,30,9,31,228,31,73,31,201,31,148,31,45,31,185,31,213,31,201,31,2,31,181,31,128,31,128,30,128,29,38,31,215,31,88,31,122,31,7,31,156,31,156,30,190,31,156,31,61,31,165,31,92,31,219,31,124,31,124,30,175,31,207,31,200,31,169,31,22,31,98,31,163,31,77,31,146,31,146,30,117,31,64,31,64,30,186,31,29,31,66,31,89,31,27,31,67,31,237,31,84,31,4,31,4,30,7,31,7,30,225,31,66,31,60,31,54,31,188,31,221,31,64,31,44,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
