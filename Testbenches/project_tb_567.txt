-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 536;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (252,0,127,0,247,0,34,0,0,0,161,0,235,0,247,0,93,0,55,0,91,0,133,0,184,0,100,0,212,0,159,0,7,0,217,0,151,0,0,0,0,0,157,0,44,0,22,0,0,0,0,0,79,0,140,0,8,0,219,0,227,0,0,0,246,0,90,0,18,0,0,0,171,0,148,0,173,0,50,0,88,0,88,0,0,0,67,0,169,0,170,0,46,0,71,0,216,0,6,0,141,0,227,0,91,0,227,0,226,0,50,0,209,0,151,0,64,0,0,0,0,0,27,0,47,0,179,0,55,0,38,0,0,0,51,0,0,0,0,0,65,0,232,0,50,0,0,0,118,0,99,0,221,0,157,0,207,0,0,0,111,0,61,0,151,0,73,0,0,0,20,0,86,0,136,0,132,0,0,0,0,0,221,0,150,0,82,0,0,0,214,0,224,0,237,0,0,0,210,0,0,0,176,0,72,0,29,0,103,0,0,0,0,0,236,0,119,0,40,0,68,0,0,0,31,0,0,0,199,0,106,0,127,0,17,0,35,0,177,0,252,0,84,0,250,0,188,0,234,0,65,0,140,0,0,0,0,0,195,0,26,0,13,0,31,0,37,0,0,0,173,0,208,0,115,0,67,0,18,0,185,0,15,0,195,0,35,0,3,0,182,0,39,0,90,0,0,0,0,0,0,0,54,0,0,0,233,0,254,0,36,0,96,0,117,0,166,0,17,0,90,0,52,0,0,0,115,0,107,0,70,0,30,0,177,0,0,0,180,0,26,0,155,0,164,0,233,0,14,0,110,0,158,0,165,0,159,0,33,0,161,0,190,0,138,0,125,0,162,0,65,0,0,0,223,0,8,0,198,0,119,0,65,0,104,0,0,0,217,0,0,0,159,0,215,0,245,0,0,0,132,0,130,0,82,0,182,0,36,0,102,0,24,0,13,0,17,0,193,0,189,0,0,0,0,0,64,0,0,0,0,0,198,0,122,0,72,0,156,0,0,0,49,0,0,0,184,0,0,0,202,0,0,0,241,0,229,0,5,0,254,0,164,0,225,0,73,0,0,0,141,0,29,0,149,0,159,0,0,0,104,0,0,0,191,0,173,0,0,0,63,0,173,0,0,0,176,0,0,0,10,0,0,0,93,0,78,0,134,0,56,0,19,0,0,0,168,0,152,0,134,0,151,0,53,0,172,0,182,0,207,0,0,0,180,0,0,0,2,0,16,0,227,0,0,0,202,0,42,0,194,0,142,0,182,0,120,0,243,0,0,0,0,0,189,0,132,0,196,0,125,0,135,0,219,0,0,0,132,0,77,0,206,0,10,0,234,0,0,0,182,0,0,0,149,0,108,0,63,0,10,0,109,0,66,0,80,0,0,0,140,0,248,0,70,0,167,0,128,0,26,0,7,0,133,0,51,0,217,0,0,0,0,0,7,0,50,0,113,0,69,0,129,0,141,0,0,0,222,0,0,0,15,0,141,0,251,0,43,0,178,0,0,0,226,0,0,0,0,0,14,0,242,0,215,0,153,0,174,0,110,0,224,0,62,0,165,0,0,0,61,0,12,0,0,0,132,0,232,0,0,0,0,0,149,0,149,0,111,0,59,0,107,0,0,0,75,0,178,0,163,0,6,0,253,0,115,0,83,0,5,0,100,0,199,0,75,0,0,0,140,0,11,0,7,0,141,0,53,0,108,0,102,0,236,0,0,0,56,0,0,0,0,0,239,0,0,0,245,0,53,0,247,0,0,0,162,0,69,0,225,0,128,0,152,0,198,0,33,0,30,0,38,0,88,0,24,0,248,0,31,0,173,0,0,0,23,0,217,0,0,0,64,0,143,0,55,0,249,0,110,0,245,0,58,0,93,0,232,0,144,0,89,0,156,0,57,0,232,0,20,0,239,0,37,0,250,0,9,0,200,0,251,0,176,0,129,0,129,0,156,0,111,0,34,0,45,0,125,0,73,0,248,0,252,0,100,0,177,0,20,0,160,0,108,0,221,0,30,0,0,0,200,0,0,0,76,0,10,0,165,0,53,0,103,0,99,0,157,0,191,0,0,0,0,0,0,0,19,0,59,0,60,0,183,0,111,0,222,0,87,0,103,0,0,0,94,0,0,0,130,0,211,0,40,0,0,0,220,0,89,0,185,0,110,0,160,0,0,0,0,0,0,0,8,0,0,0,67,0,127,0,24,0,0,0,240,0,197,0,126,0,130,0,55,0,209,0,0,0,156,0,164,0,248,0,34,0,19,0,188,0,138,0,25,0,216,0,92,0,132,0,73,0,115,0,167,0,0,0,0,0,136,0,144,0,168,0,199,0,135,0,103,0,234,0,189,0,164,0,222,0,242,0,107,0,0,0,136,0,126,0,143,0,222,0,100,0,223,0,62,0,77,0,37,0,203,0,250,0,94,0);
signal scenario_full  : scenario_type := (252,31,127,31,247,31,34,31,34,30,161,31,235,31,247,31,93,31,55,31,91,31,133,31,184,31,100,31,212,31,159,31,7,31,217,31,151,31,151,30,151,29,157,31,44,31,22,31,22,30,22,29,79,31,140,31,8,31,219,31,227,31,227,30,246,31,90,31,18,31,18,30,171,31,148,31,173,31,50,31,88,31,88,31,88,30,67,31,169,31,170,31,46,31,71,31,216,31,6,31,141,31,227,31,91,31,227,31,226,31,50,31,209,31,151,31,64,31,64,30,64,29,27,31,47,31,179,31,55,31,38,31,38,30,51,31,51,30,51,29,65,31,232,31,50,31,50,30,118,31,99,31,221,31,157,31,207,31,207,30,111,31,61,31,151,31,73,31,73,30,20,31,86,31,136,31,132,31,132,30,132,29,221,31,150,31,82,31,82,30,214,31,224,31,237,31,237,30,210,31,210,30,176,31,72,31,29,31,103,31,103,30,103,29,236,31,119,31,40,31,68,31,68,30,31,31,31,30,199,31,106,31,127,31,17,31,35,31,177,31,252,31,84,31,250,31,188,31,234,31,65,31,140,31,140,30,140,29,195,31,26,31,13,31,31,31,37,31,37,30,173,31,208,31,115,31,67,31,18,31,185,31,15,31,195,31,35,31,3,31,182,31,39,31,90,31,90,30,90,29,90,28,54,31,54,30,233,31,254,31,36,31,96,31,117,31,166,31,17,31,90,31,52,31,52,30,115,31,107,31,70,31,30,31,177,31,177,30,180,31,26,31,155,31,164,31,233,31,14,31,110,31,158,31,165,31,159,31,33,31,161,31,190,31,138,31,125,31,162,31,65,31,65,30,223,31,8,31,198,31,119,31,65,31,104,31,104,30,217,31,217,30,159,31,215,31,245,31,245,30,132,31,130,31,82,31,182,31,36,31,102,31,24,31,13,31,17,31,193,31,189,31,189,30,189,29,64,31,64,30,64,29,198,31,122,31,72,31,156,31,156,30,49,31,49,30,184,31,184,30,202,31,202,30,241,31,229,31,5,31,254,31,164,31,225,31,73,31,73,30,141,31,29,31,149,31,159,31,159,30,104,31,104,30,191,31,173,31,173,30,63,31,173,31,173,30,176,31,176,30,10,31,10,30,93,31,78,31,134,31,56,31,19,31,19,30,168,31,152,31,134,31,151,31,53,31,172,31,182,31,207,31,207,30,180,31,180,30,2,31,16,31,227,31,227,30,202,31,42,31,194,31,142,31,182,31,120,31,243,31,243,30,243,29,189,31,132,31,196,31,125,31,135,31,219,31,219,30,132,31,77,31,206,31,10,31,234,31,234,30,182,31,182,30,149,31,108,31,63,31,10,31,109,31,66,31,80,31,80,30,140,31,248,31,70,31,167,31,128,31,26,31,7,31,133,31,51,31,217,31,217,30,217,29,7,31,50,31,113,31,69,31,129,31,141,31,141,30,222,31,222,30,15,31,141,31,251,31,43,31,178,31,178,30,226,31,226,30,226,29,14,31,242,31,215,31,153,31,174,31,110,31,224,31,62,31,165,31,165,30,61,31,12,31,12,30,132,31,232,31,232,30,232,29,149,31,149,31,111,31,59,31,107,31,107,30,75,31,178,31,163,31,6,31,253,31,115,31,83,31,5,31,100,31,199,31,75,31,75,30,140,31,11,31,7,31,141,31,53,31,108,31,102,31,236,31,236,30,56,31,56,30,56,29,239,31,239,30,245,31,53,31,247,31,247,30,162,31,69,31,225,31,128,31,152,31,198,31,33,31,30,31,38,31,88,31,24,31,248,31,31,31,173,31,173,30,23,31,217,31,217,30,64,31,143,31,55,31,249,31,110,31,245,31,58,31,93,31,232,31,144,31,89,31,156,31,57,31,232,31,20,31,239,31,37,31,250,31,9,31,200,31,251,31,176,31,129,31,129,31,156,31,111,31,34,31,45,31,125,31,73,31,248,31,252,31,100,31,177,31,20,31,160,31,108,31,221,31,30,31,30,30,200,31,200,30,76,31,10,31,165,31,53,31,103,31,99,31,157,31,191,31,191,30,191,29,191,28,19,31,59,31,60,31,183,31,111,31,222,31,87,31,103,31,103,30,94,31,94,30,130,31,211,31,40,31,40,30,220,31,89,31,185,31,110,31,160,31,160,30,160,29,160,28,8,31,8,30,67,31,127,31,24,31,24,30,240,31,197,31,126,31,130,31,55,31,209,31,209,30,156,31,164,31,248,31,34,31,19,31,188,31,138,31,25,31,216,31,92,31,132,31,73,31,115,31,167,31,167,30,167,29,136,31,144,31,168,31,199,31,135,31,103,31,234,31,189,31,164,31,222,31,242,31,107,31,107,30,136,31,126,31,143,31,222,31,100,31,223,31,62,31,77,31,37,31,203,31,250,31,94,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
