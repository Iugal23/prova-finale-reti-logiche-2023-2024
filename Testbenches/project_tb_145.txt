-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 368;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (255,0,170,0,0,0,184,0,0,0,121,0,99,0,222,0,118,0,179,0,245,0,144,0,191,0,176,0,78,0,0,0,42,0,69,0,187,0,103,0,50,0,102,0,137,0,170,0,32,0,0,0,53,0,242,0,236,0,162,0,170,0,235,0,136,0,56,0,181,0,132,0,216,0,0,0,153,0,134,0,0,0,91,0,254,0,95,0,56,0,18,0,116,0,96,0,118,0,223,0,235,0,0,0,238,0,97,0,199,0,75,0,0,0,0,0,240,0,184,0,78,0,225,0,100,0,188,0,0,0,246,0,0,0,106,0,32,0,78,0,234,0,11,0,0,0,0,0,29,0,0,0,0,0,58,0,0,0,199,0,0,0,235,0,0,0,0,0,0,0,214,0,137,0,236,0,55,0,115,0,0,0,0,0,52,0,48,0,87,0,0,0,0,0,0,0,7,0,28,0,0,0,55,0,0,0,176,0,70,0,132,0,192,0,9,0,148,0,0,0,199,0,50,0,46,0,0,0,0,0,196,0,246,0,199,0,0,0,161,0,0,0,109,0,172,0,0,0,112,0,0,0,204,0,254,0,0,0,39,0,221,0,8,0,9,0,248,0,165,0,54,0,0,0,6,0,185,0,195,0,201,0,125,0,44,0,0,0,220,0,0,0,0,0,181,0,165,0,153,0,48,0,51,0,205,0,103,0,169,0,0,0,0,0,232,0,15,0,254,0,0,0,0,0,180,0,115,0,85,0,177,0,223,0,0,0,0,0,201,0,0,0,0,0,0,0,233,0,172,0,233,0,163,0,110,0,231,0,212,0,23,0,138,0,212,0,215,0,243,0,136,0,19,0,20,0,0,0,112,0,166,0,154,0,0,0,148,0,129,0,168,0,37,0,181,0,105,0,0,0,43,0,87,0,10,0,131,0,192,0,172,0,43,0,153,0,228,0,66,0,184,0,196,0,177,0,68,0,204,0,138,0,43,0,0,0,0,0,0,0,165,0,0,0,104,0,241,0,132,0,102,0,134,0,217,0,62,0,222,0,12,0,38,0,0,0,184,0,0,0,0,0,85,0,0,0,238,0,18,0,178,0,173,0,201,0,156,0,244,0,235,0,212,0,131,0,149,0,185,0,40,0,140,0,250,0,203,0,116,0,56,0,40,0,157,0,86,0,0,0,246,0,158,0,143,0,21,0,222,0,97,0,241,0,43,0,50,0,191,0,104,0,0,0,192,0,151,0,246,0,189,0,18,0,11,0,12,0,131,0,252,0,0,0,125,0,133,0,197,0,116,0,209,0,227,0,249,0,207,0,135,0,0,0,182,0,151,0,88,0,22,0,0,0,148,0,73,0,0,0,99,0,0,0,233,0,0,0,0,0,106,0,66,0,241,0,207,0,0,0,213,0,97,0,252,0,23,0,0,0,238,0,0,0,176,0,185,0,9,0,147,0,0,0,92,0,174,0,57,0,147,0,174,0,236,0,0,0,199,0,207,0,134,0,68,0,58,0,9,0,82,0,112,0,97,0,42,0,8,0,189,0,47,0,166,0,37,0,150,0,220,0,0,0,165,0,110,0,165,0,216,0,192,0,178,0,178,0,50,0,118,0,177,0,197,0,0,0,0,0,23,0,0,0,0,0,251,0,0,0,39,0,221,0,5,0);
signal scenario_full  : scenario_type := (255,31,170,31,170,30,184,31,184,30,121,31,99,31,222,31,118,31,179,31,245,31,144,31,191,31,176,31,78,31,78,30,42,31,69,31,187,31,103,31,50,31,102,31,137,31,170,31,32,31,32,30,53,31,242,31,236,31,162,31,170,31,235,31,136,31,56,31,181,31,132,31,216,31,216,30,153,31,134,31,134,30,91,31,254,31,95,31,56,31,18,31,116,31,96,31,118,31,223,31,235,31,235,30,238,31,97,31,199,31,75,31,75,30,75,29,240,31,184,31,78,31,225,31,100,31,188,31,188,30,246,31,246,30,106,31,32,31,78,31,234,31,11,31,11,30,11,29,29,31,29,30,29,29,58,31,58,30,199,31,199,30,235,31,235,30,235,29,235,28,214,31,137,31,236,31,55,31,115,31,115,30,115,29,52,31,48,31,87,31,87,30,87,29,87,28,7,31,28,31,28,30,55,31,55,30,176,31,70,31,132,31,192,31,9,31,148,31,148,30,199,31,50,31,46,31,46,30,46,29,196,31,246,31,199,31,199,30,161,31,161,30,109,31,172,31,172,30,112,31,112,30,204,31,254,31,254,30,39,31,221,31,8,31,9,31,248,31,165,31,54,31,54,30,6,31,185,31,195,31,201,31,125,31,44,31,44,30,220,31,220,30,220,29,181,31,165,31,153,31,48,31,51,31,205,31,103,31,169,31,169,30,169,29,232,31,15,31,254,31,254,30,254,29,180,31,115,31,85,31,177,31,223,31,223,30,223,29,201,31,201,30,201,29,201,28,233,31,172,31,233,31,163,31,110,31,231,31,212,31,23,31,138,31,212,31,215,31,243,31,136,31,19,31,20,31,20,30,112,31,166,31,154,31,154,30,148,31,129,31,168,31,37,31,181,31,105,31,105,30,43,31,87,31,10,31,131,31,192,31,172,31,43,31,153,31,228,31,66,31,184,31,196,31,177,31,68,31,204,31,138,31,43,31,43,30,43,29,43,28,165,31,165,30,104,31,241,31,132,31,102,31,134,31,217,31,62,31,222,31,12,31,38,31,38,30,184,31,184,30,184,29,85,31,85,30,238,31,18,31,178,31,173,31,201,31,156,31,244,31,235,31,212,31,131,31,149,31,185,31,40,31,140,31,250,31,203,31,116,31,56,31,40,31,157,31,86,31,86,30,246,31,158,31,143,31,21,31,222,31,97,31,241,31,43,31,50,31,191,31,104,31,104,30,192,31,151,31,246,31,189,31,18,31,11,31,12,31,131,31,252,31,252,30,125,31,133,31,197,31,116,31,209,31,227,31,249,31,207,31,135,31,135,30,182,31,151,31,88,31,22,31,22,30,148,31,73,31,73,30,99,31,99,30,233,31,233,30,233,29,106,31,66,31,241,31,207,31,207,30,213,31,97,31,252,31,23,31,23,30,238,31,238,30,176,31,185,31,9,31,147,31,147,30,92,31,174,31,57,31,147,31,174,31,236,31,236,30,199,31,207,31,134,31,68,31,58,31,9,31,82,31,112,31,97,31,42,31,8,31,189,31,47,31,166,31,37,31,150,31,220,31,220,30,165,31,110,31,165,31,216,31,192,31,178,31,178,31,50,31,118,31,177,31,197,31,197,30,197,29,23,31,23,30,23,29,251,31,251,30,39,31,221,31,5,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
