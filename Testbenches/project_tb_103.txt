-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 455;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (57,0,209,0,209,0,115,0,0,0,0,0,0,0,0,0,27,0,16,0,40,0,147,0,170,0,253,0,144,0,139,0,243,0,0,0,0,0,71,0,87,0,42,0,53,0,163,0,5,0,161,0,226,0,56,0,250,0,0,0,94,0,0,0,0,0,139,0,0,0,0,0,0,0,0,0,181,0,144,0,0,0,225,0,0,0,254,0,158,0,248,0,148,0,45,0,0,0,119,0,190,0,0,0,142,0,42,0,57,0,153,0,179,0,63,0,47,0,1,0,40,0,79,0,248,0,220,0,173,0,2,0,170,0,33,0,206,0,0,0,200,0,195,0,28,0,22,0,1,0,0,0,171,0,247,0,0,0,0,0,122,0,201,0,197,0,189,0,253,0,0,0,0,0,82,0,75,0,16,0,82,0,20,0,16,0,224,0,204,0,175,0,219,0,221,0,18,0,165,0,0,0,148,0,43,0,20,0,142,0,7,0,109,0,228,0,199,0,174,0,202,0,214,0,88,0,198,0,182,0,0,0,21,0,0,0,250,0,156,0,88,0,46,0,0,0,119,0,0,0,241,0,0,0,42,0,0,0,79,0,79,0,48,0,15,0,0,0,131,0,118,0,183,0,108,0,59,0,157,0,0,0,40,0,245,0,12,0,185,0,177,0,198,0,9,0,0,0,48,0,151,0,250,0,0,0,154,0,70,0,32,0,161,0,193,0,33,0,0,0,0,0,201,0,113,0,242,0,41,0,86,0,0,0,152,0,0,0,0,0,70,0,0,0,16,0,72,0,189,0,170,0,0,0,216,0,181,0,77,0,253,0,100,0,0,0,141,0,235,0,38,0,44,0,33,0,0,0,26,0,7,0,182,0,241,0,250,0,238,0,122,0,22,0,214,0,0,0,0,0,107,0,253,0,153,0,231,0,37,0,61,0,135,0,0,0,52,0,197,0,147,0,94,0,79,0,74,0,186,0,74,0,131,0,100,0,0,0,204,0,108,0,224,0,202,0,62,0,177,0,24,0,0,0,231,0,167,0,88,0,0,0,175,0,40,0,0,0,234,0,1,0,140,0,123,0,203,0,48,0,164,0,81,0,229,0,0,0,4,0,198,0,116,0,0,0,0,0,88,0,104,0,36,0,0,0,45,0,223,0,10,0,198,0,64,0,0,0,183,0,138,0,129,0,0,0,0,0,61,0,219,0,171,0,167,0,0,0,213,0,220,0,42,0,255,0,89,0,143,0,130,0,195,0,175,0,0,0,20,0,0,0,157,0,0,0,0,0,189,0,85,0,80,0,59,0,126,0,0,0,123,0,135,0,0,0,0,0,89,0,165,0,0,0,215,0,135,0,23,0,5,0,69,0,173,0,0,0,181,0,11,0,101,0,160,0,105,0,231,0,110,0,118,0,11,0,98,0,110,0,171,0,0,0,0,0,53,0,0,0,109,0,147,0,100,0,0,0,94,0,200,0,66,0,153,0,67,0,151,0,203,0,144,0,170,0,241,0,223,0,169,0,163,0,0,0,41,0,110,0,213,0,21,0,83,0,125,0,52,0,0,0,213,0,88,0,159,0,135,0,151,0,0,0,122,0,31,0,235,0,18,0,40,0,0,0,42,0,184,0,42,0,112,0,103,0,240,0,0,0,0,0,44,0,0,0,0,0,47,0,0,0,0,0,225,0,0,0,23,0,239,0,244,0,42,0,185,0,148,0,183,0,168,0,14,0,0,0,33,0,101,0,81,0,236,0,251,0,0,0,0,0,56,0,191,0,74,0,0,0,0,0,130,0,129,0,70,0,44,0,189,0,137,0,208,0,224,0,36,0,64,0,155,0,0,0,41,0,249,0,36,0,0,0,111,0,94,0,113,0,56,0,69,0,53,0,0,0,93,0,0,0,135,0,227,0,218,0,0,0,250,0,114,0,24,0,0,0,12,0,43,0,88,0,0,0,52,0,0,0,161,0,172,0,0,0,205,0,62,0,7,0,116,0,0,0,162,0,0,0,179,0,16,0,128,0,201,0,193,0,246,0,189,0,63,0,57,0,247,0);
signal scenario_full  : scenario_type := (57,31,209,31,209,31,115,31,115,30,115,29,115,28,115,27,27,31,16,31,40,31,147,31,170,31,253,31,144,31,139,31,243,31,243,30,243,29,71,31,87,31,42,31,53,31,163,31,5,31,161,31,226,31,56,31,250,31,250,30,94,31,94,30,94,29,139,31,139,30,139,29,139,28,139,27,181,31,144,31,144,30,225,31,225,30,254,31,158,31,248,31,148,31,45,31,45,30,119,31,190,31,190,30,142,31,42,31,57,31,153,31,179,31,63,31,47,31,1,31,40,31,79,31,248,31,220,31,173,31,2,31,170,31,33,31,206,31,206,30,200,31,195,31,28,31,22,31,1,31,1,30,171,31,247,31,247,30,247,29,122,31,201,31,197,31,189,31,253,31,253,30,253,29,82,31,75,31,16,31,82,31,20,31,16,31,224,31,204,31,175,31,219,31,221,31,18,31,165,31,165,30,148,31,43,31,20,31,142,31,7,31,109,31,228,31,199,31,174,31,202,31,214,31,88,31,198,31,182,31,182,30,21,31,21,30,250,31,156,31,88,31,46,31,46,30,119,31,119,30,241,31,241,30,42,31,42,30,79,31,79,31,48,31,15,31,15,30,131,31,118,31,183,31,108,31,59,31,157,31,157,30,40,31,245,31,12,31,185,31,177,31,198,31,9,31,9,30,48,31,151,31,250,31,250,30,154,31,70,31,32,31,161,31,193,31,33,31,33,30,33,29,201,31,113,31,242,31,41,31,86,31,86,30,152,31,152,30,152,29,70,31,70,30,16,31,72,31,189,31,170,31,170,30,216,31,181,31,77,31,253,31,100,31,100,30,141,31,235,31,38,31,44,31,33,31,33,30,26,31,7,31,182,31,241,31,250,31,238,31,122,31,22,31,214,31,214,30,214,29,107,31,253,31,153,31,231,31,37,31,61,31,135,31,135,30,52,31,197,31,147,31,94,31,79,31,74,31,186,31,74,31,131,31,100,31,100,30,204,31,108,31,224,31,202,31,62,31,177,31,24,31,24,30,231,31,167,31,88,31,88,30,175,31,40,31,40,30,234,31,1,31,140,31,123,31,203,31,48,31,164,31,81,31,229,31,229,30,4,31,198,31,116,31,116,30,116,29,88,31,104,31,36,31,36,30,45,31,223,31,10,31,198,31,64,31,64,30,183,31,138,31,129,31,129,30,129,29,61,31,219,31,171,31,167,31,167,30,213,31,220,31,42,31,255,31,89,31,143,31,130,31,195,31,175,31,175,30,20,31,20,30,157,31,157,30,157,29,189,31,85,31,80,31,59,31,126,31,126,30,123,31,135,31,135,30,135,29,89,31,165,31,165,30,215,31,135,31,23,31,5,31,69,31,173,31,173,30,181,31,11,31,101,31,160,31,105,31,231,31,110,31,118,31,11,31,98,31,110,31,171,31,171,30,171,29,53,31,53,30,109,31,147,31,100,31,100,30,94,31,200,31,66,31,153,31,67,31,151,31,203,31,144,31,170,31,241,31,223,31,169,31,163,31,163,30,41,31,110,31,213,31,21,31,83,31,125,31,52,31,52,30,213,31,88,31,159,31,135,31,151,31,151,30,122,31,31,31,235,31,18,31,40,31,40,30,42,31,184,31,42,31,112,31,103,31,240,31,240,30,240,29,44,31,44,30,44,29,47,31,47,30,47,29,225,31,225,30,23,31,239,31,244,31,42,31,185,31,148,31,183,31,168,31,14,31,14,30,33,31,101,31,81,31,236,31,251,31,251,30,251,29,56,31,191,31,74,31,74,30,74,29,130,31,129,31,70,31,44,31,189,31,137,31,208,31,224,31,36,31,64,31,155,31,155,30,41,31,249,31,36,31,36,30,111,31,94,31,113,31,56,31,69,31,53,31,53,30,93,31,93,30,135,31,227,31,218,31,218,30,250,31,114,31,24,31,24,30,12,31,43,31,88,31,88,30,52,31,52,30,161,31,172,31,172,30,205,31,62,31,7,31,116,31,116,30,162,31,162,30,179,31,16,31,128,31,201,31,193,31,246,31,189,31,63,31,57,31,247,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
