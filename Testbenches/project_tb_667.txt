-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 809;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (185,0,138,0,181,0,225,0,0,0,218,0,0,0,188,0,190,0,0,0,135,0,15,0,141,0,0,0,174,0,251,0,105,0,61,0,34,0,69,0,149,0,173,0,112,0,0,0,54,0,245,0,0,0,16,0,28,0,0,0,121,0,208,0,233,0,213,0,62,0,120,0,244,0,72,0,161,0,35,0,20,0,187,0,55,0,0,0,145,0,137,0,57,0,233,0,207,0,50,0,202,0,116,0,170,0,30,0,230,0,134,0,65,0,49,0,24,0,193,0,108,0,242,0,177,0,156,0,0,0,163,0,232,0,34,0,110,0,217,0,105,0,245,0,0,0,0,0,0,0,187,0,249,0,57,0,142,0,82,0,129,0,186,0,135,0,0,0,129,0,130,0,188,0,84,0,0,0,181,0,252,0,0,0,144,0,88,0,52,0,192,0,139,0,0,0,0,0,23,0,122,0,215,0,0,0,0,0,90,0,107,0,88,0,0,0,98,0,47,0,169,0,0,0,15,0,176,0,33,0,103,0,48,0,0,0,225,0,90,0,7,0,81,0,247,0,212,0,17,0,219,0,0,0,234,0,228,0,140,0,74,0,185,0,207,0,123,0,0,0,185,0,249,0,0,0,119,0,195,0,247,0,81,0,0,0,241,0,249,0,201,0,183,0,167,0,0,0,216,0,89,0,19,0,0,0,0,0,0,0,118,0,48,0,0,0,0,0,231,0,0,0,166,0,162,0,187,0,65,0,158,0,213,0,239,0,199,0,209,0,0,0,19,0,42,0,23,0,158,0,210,0,0,0,110,0,121,0,236,0,107,0,94,0,63,0,0,0,0,0,110,0,1,0,28,0,32,0,216,0,73,0,206,0,0,0,164,0,0,0,21,0,40,0,157,0,0,0,124,0,6,0,21,0,166,0,0,0,0,0,0,0,119,0,124,0,0,0,211,0,185,0,3,0,36,0,114,0,58,0,174,0,121,0,104,0,26,0,242,0,66,0,254,0,0,0,113,0,37,0,194,0,193,0,0,0,0,0,150,0,233,0,60,0,5,0,150,0,207,0,244,0,0,0,85,0,79,0,234,0,85,0,154,0,93,0,204,0,194,0,122,0,238,0,40,0,106,0,2,0,147,0,186,0,224,0,151,0,98,0,206,0,5,0,0,0,181,0,0,0,121,0,244,0,188,0,135,0,127,0,3,0,107,0,81,0,163,0,96,0,253,0,231,0,0,0,68,0,125,0,182,0,190,0,200,0,100,0,235,0,240,0,224,0,195,0,99,0,200,0,218,0,238,0,61,0,101,0,119,0,92,0,0,0,49,0,128,0,64,0,224,0,220,0,186,0,100,0,201,0,153,0,0,0,88,0,101,0,0,0,191,0,55,0,219,0,0,0,0,0,17,0,0,0,220,0,20,0,0,0,0,0,125,0,133,0,22,0,140,0,164,0,0,0,86,0,173,0,124,0,0,0,0,0,22,0,0,0,42,0,175,0,251,0,15,0,216,0,135,0,0,0,0,0,113,0,122,0,157,0,0,0,74,0,69,0,229,0,77,0,153,0,41,0,195,0,38,0,142,0,0,0,0,0,0,0,180,0,41,0,39,0,117,0,0,0,8,0,223,0,34,0,0,0,84,0,112,0,62,0,0,0,50,0,136,0,0,0,52,0,132,0,103,0,0,0,91,0,38,0,123,0,33,0,0,0,211,0,228,0,105,0,46,0,52,0,59,0,14,0,80,0,0,0,250,0,0,0,162,0,243,0,0,0,211,0,132,0,223,0,0,0,0,0,61,0,100,0,163,0,244,0,0,0,165,0,0,0,194,0,200,0,173,0,228,0,179,0,122,0,237,0,89,0,36,0,183,0,212,0,0,0,175,0,112,0,107,0,0,0,0,0,182,0,203,0,0,0,24,0,72,0,97,0,50,0,0,0,229,0,152,0,72,0,104,0,41,0,201,0,230,0,0,0,91,0,0,0,81,0,0,0,0,0,213,0,0,0,169,0,0,0,1,0,0,0,0,0,153,0,113,0,0,0,169,0,25,0,110,0,0,0,207,0,142,0,0,0,129,0,148,0,91,0,232,0,213,0,17,0,26,0,213,0,0,0,166,0,230,0,0,0,175,0,0,0,16,0,0,0,33,0,42,0,206,0,0,0,176,0,32,0,0,0,65,0,113,0,254,0,181,0,1,0,0,0,132,0,128,0,82,0,49,0,0,0,132,0,0,0,73,0,69,0,246,0,119,0,124,0,120,0,32,0,0,0,57,0,119,0,173,0,38,0,0,0,234,0,0,0,0,0,234,0,7,0,39,0,0,0,0,0,51,0,123,0,24,0,29,0,176,0,14,0,178,0,0,0,0,0,24,0,202,0,160,0,0,0,87,0,128,0,17,0,229,0,0,0,159,0,172,0,93,0,2,0,192,0,0,0,2,0,121,0,31,0,170,0,0,0,95,0,0,0,0,0,140,0,60,0,31,0,130,0,30,0,0,0,154,0,126,0,13,0,21,0,224,0,0,0,0,0,50,0,51,0,65,0,100,0,54,0,124,0,255,0,22,0,0,0,0,0,91,0,191,0,164,0,67,0,243,0,228,0,0,0,211,0,18,0,237,0,0,0,60,0,150,0,168,0,129,0,37,0,105,0,103,0,0,0,112,0,73,0,148,0,162,0,133,0,11,0,255,0,0,0,14,0,153,0,239,0,51,0,127,0,0,0,23,0,202,0,163,0,36,0,136,0,93,0,135,0,60,0,0,0,249,0,0,0,144,0,215,0,17,0,0,0,97,0,172,0,75,0,70,0,240,0,188,0,122,0,65,0,0,0,251,0,0,0,28,0,230,0,178,0,235,0,199,0,95,0,237,0,71,0,241,0,74,0,130,0,230,0,0,0,63,0,123,0,0,0,167,0,0,0,10,0,238,0,251,0,249,0,0,0,252,0,179,0,0,0,147,0,188,0,232,0,17,0,112,0,170,0,175,0,72,0,105,0,0,0,0,0,233,0,203,0,140,0,43,0,180,0,71,0,69,0,200,0,98,0,157,0,0,0,226,0,0,0,0,0,253,0,161,0,162,0,120,0,232,0,174,0,0,0,34,0,207,0,42,0,63,0,109,0,158,0,163,0,15,0,132,0,245,0,42,0,64,0,0,0,0,0,0,0,57,0,216,0,112,0,102,0,104,0,88,0,105,0,11,0,225,0,188,0,212,0,0,0,100,0,17,0,105,0,65,0,180,0,190,0,159,0,9,0,144,0,208,0,0,0,77,0,0,0,96,0,225,0,254,0,171,0,0,0,137,0,0,0,174,0,211,0,137,0,245,0,32,0,121,0,51,0,98,0,220,0,7,0,164,0,120,0,0,0,0,0,85,0,186,0,26,0,0,0,121,0,0,0,0,0,0,0,136,0,145,0,56,0,35,0,216,0,131,0,141,0,29,0,166,0,95,0,193,0,206,0,23,0,110,0,186,0,129,0,232,0,232,0,22,0,0,0,0,0,152,0,255,0,0,0,227,0,130,0,0,0,44,0,8,0,131,0,106,0,129,0,70,0,112,0,6,0,0,0,193,0,184,0,246,0,38,0,241,0,86,0,0,0,61,0,223,0,239,0,183,0,0,0,55,0,84,0,51,0,0,0);
signal scenario_full  : scenario_type := (185,31,138,31,181,31,225,31,225,30,218,31,218,30,188,31,190,31,190,30,135,31,15,31,141,31,141,30,174,31,251,31,105,31,61,31,34,31,69,31,149,31,173,31,112,31,112,30,54,31,245,31,245,30,16,31,28,31,28,30,121,31,208,31,233,31,213,31,62,31,120,31,244,31,72,31,161,31,35,31,20,31,187,31,55,31,55,30,145,31,137,31,57,31,233,31,207,31,50,31,202,31,116,31,170,31,30,31,230,31,134,31,65,31,49,31,24,31,193,31,108,31,242,31,177,31,156,31,156,30,163,31,232,31,34,31,110,31,217,31,105,31,245,31,245,30,245,29,245,28,187,31,249,31,57,31,142,31,82,31,129,31,186,31,135,31,135,30,129,31,130,31,188,31,84,31,84,30,181,31,252,31,252,30,144,31,88,31,52,31,192,31,139,31,139,30,139,29,23,31,122,31,215,31,215,30,215,29,90,31,107,31,88,31,88,30,98,31,47,31,169,31,169,30,15,31,176,31,33,31,103,31,48,31,48,30,225,31,90,31,7,31,81,31,247,31,212,31,17,31,219,31,219,30,234,31,228,31,140,31,74,31,185,31,207,31,123,31,123,30,185,31,249,31,249,30,119,31,195,31,247,31,81,31,81,30,241,31,249,31,201,31,183,31,167,31,167,30,216,31,89,31,19,31,19,30,19,29,19,28,118,31,48,31,48,30,48,29,231,31,231,30,166,31,162,31,187,31,65,31,158,31,213,31,239,31,199,31,209,31,209,30,19,31,42,31,23,31,158,31,210,31,210,30,110,31,121,31,236,31,107,31,94,31,63,31,63,30,63,29,110,31,1,31,28,31,32,31,216,31,73,31,206,31,206,30,164,31,164,30,21,31,40,31,157,31,157,30,124,31,6,31,21,31,166,31,166,30,166,29,166,28,119,31,124,31,124,30,211,31,185,31,3,31,36,31,114,31,58,31,174,31,121,31,104,31,26,31,242,31,66,31,254,31,254,30,113,31,37,31,194,31,193,31,193,30,193,29,150,31,233,31,60,31,5,31,150,31,207,31,244,31,244,30,85,31,79,31,234,31,85,31,154,31,93,31,204,31,194,31,122,31,238,31,40,31,106,31,2,31,147,31,186,31,224,31,151,31,98,31,206,31,5,31,5,30,181,31,181,30,121,31,244,31,188,31,135,31,127,31,3,31,107,31,81,31,163,31,96,31,253,31,231,31,231,30,68,31,125,31,182,31,190,31,200,31,100,31,235,31,240,31,224,31,195,31,99,31,200,31,218,31,238,31,61,31,101,31,119,31,92,31,92,30,49,31,128,31,64,31,224,31,220,31,186,31,100,31,201,31,153,31,153,30,88,31,101,31,101,30,191,31,55,31,219,31,219,30,219,29,17,31,17,30,220,31,20,31,20,30,20,29,125,31,133,31,22,31,140,31,164,31,164,30,86,31,173,31,124,31,124,30,124,29,22,31,22,30,42,31,175,31,251,31,15,31,216,31,135,31,135,30,135,29,113,31,122,31,157,31,157,30,74,31,69,31,229,31,77,31,153,31,41,31,195,31,38,31,142,31,142,30,142,29,142,28,180,31,41,31,39,31,117,31,117,30,8,31,223,31,34,31,34,30,84,31,112,31,62,31,62,30,50,31,136,31,136,30,52,31,132,31,103,31,103,30,91,31,38,31,123,31,33,31,33,30,211,31,228,31,105,31,46,31,52,31,59,31,14,31,80,31,80,30,250,31,250,30,162,31,243,31,243,30,211,31,132,31,223,31,223,30,223,29,61,31,100,31,163,31,244,31,244,30,165,31,165,30,194,31,200,31,173,31,228,31,179,31,122,31,237,31,89,31,36,31,183,31,212,31,212,30,175,31,112,31,107,31,107,30,107,29,182,31,203,31,203,30,24,31,72,31,97,31,50,31,50,30,229,31,152,31,72,31,104,31,41,31,201,31,230,31,230,30,91,31,91,30,81,31,81,30,81,29,213,31,213,30,169,31,169,30,1,31,1,30,1,29,153,31,113,31,113,30,169,31,25,31,110,31,110,30,207,31,142,31,142,30,129,31,148,31,91,31,232,31,213,31,17,31,26,31,213,31,213,30,166,31,230,31,230,30,175,31,175,30,16,31,16,30,33,31,42,31,206,31,206,30,176,31,32,31,32,30,65,31,113,31,254,31,181,31,1,31,1,30,132,31,128,31,82,31,49,31,49,30,132,31,132,30,73,31,69,31,246,31,119,31,124,31,120,31,32,31,32,30,57,31,119,31,173,31,38,31,38,30,234,31,234,30,234,29,234,31,7,31,39,31,39,30,39,29,51,31,123,31,24,31,29,31,176,31,14,31,178,31,178,30,178,29,24,31,202,31,160,31,160,30,87,31,128,31,17,31,229,31,229,30,159,31,172,31,93,31,2,31,192,31,192,30,2,31,121,31,31,31,170,31,170,30,95,31,95,30,95,29,140,31,60,31,31,31,130,31,30,31,30,30,154,31,126,31,13,31,21,31,224,31,224,30,224,29,50,31,51,31,65,31,100,31,54,31,124,31,255,31,22,31,22,30,22,29,91,31,191,31,164,31,67,31,243,31,228,31,228,30,211,31,18,31,237,31,237,30,60,31,150,31,168,31,129,31,37,31,105,31,103,31,103,30,112,31,73,31,148,31,162,31,133,31,11,31,255,31,255,30,14,31,153,31,239,31,51,31,127,31,127,30,23,31,202,31,163,31,36,31,136,31,93,31,135,31,60,31,60,30,249,31,249,30,144,31,215,31,17,31,17,30,97,31,172,31,75,31,70,31,240,31,188,31,122,31,65,31,65,30,251,31,251,30,28,31,230,31,178,31,235,31,199,31,95,31,237,31,71,31,241,31,74,31,130,31,230,31,230,30,63,31,123,31,123,30,167,31,167,30,10,31,238,31,251,31,249,31,249,30,252,31,179,31,179,30,147,31,188,31,232,31,17,31,112,31,170,31,175,31,72,31,105,31,105,30,105,29,233,31,203,31,140,31,43,31,180,31,71,31,69,31,200,31,98,31,157,31,157,30,226,31,226,30,226,29,253,31,161,31,162,31,120,31,232,31,174,31,174,30,34,31,207,31,42,31,63,31,109,31,158,31,163,31,15,31,132,31,245,31,42,31,64,31,64,30,64,29,64,28,57,31,216,31,112,31,102,31,104,31,88,31,105,31,11,31,225,31,188,31,212,31,212,30,100,31,17,31,105,31,65,31,180,31,190,31,159,31,9,31,144,31,208,31,208,30,77,31,77,30,96,31,225,31,254,31,171,31,171,30,137,31,137,30,174,31,211,31,137,31,245,31,32,31,121,31,51,31,98,31,220,31,7,31,164,31,120,31,120,30,120,29,85,31,186,31,26,31,26,30,121,31,121,30,121,29,121,28,136,31,145,31,56,31,35,31,216,31,131,31,141,31,29,31,166,31,95,31,193,31,206,31,23,31,110,31,186,31,129,31,232,31,232,31,22,31,22,30,22,29,152,31,255,31,255,30,227,31,130,31,130,30,44,31,8,31,131,31,106,31,129,31,70,31,112,31,6,31,6,30,193,31,184,31,246,31,38,31,241,31,86,31,86,30,61,31,223,31,239,31,183,31,183,30,55,31,84,31,51,31,51,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
