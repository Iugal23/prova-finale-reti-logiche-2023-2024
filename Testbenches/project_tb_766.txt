-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 786;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (210,0,0,0,25,0,95,0,0,0,0,0,0,0,71,0,173,0,238,0,209,0,18,0,120,0,148,0,0,0,186,0,0,0,217,0,0,0,42,0,206,0,0,0,24,0,113,0,100,0,7,0,44,0,79,0,214,0,0,0,0,0,136,0,25,0,66,0,68,0,43,0,18,0,200,0,47,0,80,0,220,0,51,0,123,0,111,0,85,0,6,0,173,0,22,0,0,0,123,0,0,0,155,0,0,0,199,0,0,0,64,0,0,0,139,0,77,0,66,0,0,0,68,0,0,0,114,0,218,0,37,0,186,0,211,0,22,0,24,0,34,0,245,0,22,0,223,0,66,0,0,0,33,0,0,0,242,0,207,0,0,0,29,0,204,0,251,0,17,0,103,0,175,0,131,0,169,0,32,0,44,0,89,0,248,0,0,0,0,0,254,0,84,0,0,0,134,0,236,0,0,0,73,0,36,0,205,0,0,0,56,0,0,0,226,0,0,0,209,0,230,0,213,0,0,0,186,0,175,0,124,0,104,0,31,0,0,0,33,0,254,0,16,0,213,0,25,0,121,0,64,0,7,0,0,0,80,0,237,0,130,0,246,0,238,0,255,0,84,0,83,0,0,0,74,0,0,0,227,0,40,0,52,0,0,0,50,0,99,0,88,0,240,0,197,0,0,0,205,0,13,0,253,0,123,0,193,0,171,0,22,0,131,0,133,0,225,0,158,0,249,0,215,0,54,0,137,0,133,0,149,0,111,0,90,0,207,0,233,0,250,0,33,0,240,0,150,0,224,0,103,0,109,0,192,0,242,0,142,0,0,0,74,0,0,0,141,0,253,0,90,0,0,0,242,0,250,0,185,0,87,0,253,0,2,0,0,0,123,0,201,0,0,0,0,0,121,0,19,0,3,0,0,0,6,0,0,0,161,0,0,0,0,0,51,0,168,0,164,0,0,0,0,0,202,0,236,0,198,0,45,0,0,0,95,0,126,0,166,0,0,0,202,0,107,0,245,0,73,0,110,0,0,0,0,0,128,0,48,0,71,0,0,0,40,0,183,0,107,0,0,0,76,0,160,0,51,0,0,0,114,0,35,0,0,0,182,0,30,0,150,0,133,0,37,0,0,0,185,0,0,0,183,0,131,0,0,0,166,0,133,0,131,0,0,0,89,0,242,0,254,0,118,0,75,0,127,0,57,0,239,0,24,0,17,0,193,0,46,0,87,0,223,0,0,0,236,0,2,0,109,0,202,0,110,0,117,0,103,0,33,0,14,0,124,0,0,0,0,0,0,0,209,0,3,0,201,0,152,0,65,0,91,0,28,0,111,0,89,0,96,0,0,0,253,0,237,0,147,0,85,0,0,0,186,0,67,0,52,0,35,0,0,0,203,0,141,0,9,0,29,0,80,0,35,0,169,0,209,0,137,0,110,0,56,0,232,0,0,0,228,0,238,0,34,0,0,0,15,0,75,0,160,0,236,0,181,0,93,0,232,0,218,0,77,0,120,0,0,0,141,0,121,0,93,0,147,0,0,0,65,0,190,0,176,0,131,0,3,0,27,0,247,0,188,0,53,0,3,0,131,0,73,0,53,0,221,0,245,0,188,0,192,0,0,0,19,0,0,0,0,0,0,0,30,0,203,0,86,0,213,0,227,0,95,0,247,0,110,0,235,0,134,0,122,0,174,0,255,0,172,0,173,0,75,0,9,0,37,0,0,0,87,0,170,0,82,0,90,0,22,0,90,0,101,0,104,0,225,0,249,0,70,0,18,0,7,0,156,0,103,0,214,0,221,0,175,0,70,0,0,0,87,0,0,0,197,0,179,0,196,0,109,0,148,0,224,0,196,0,0,0,33,0,187,0,0,0,110,0,177,0,40,0,147,0,248,0,132,0,105,0,66,0,245,0,252,0,103,0,233,0,171,0,79,0,174,0,21,0,141,0,184,0,0,0,0,0,251,0,0,0,8,0,0,0,0,0,204,0,215,0,13,0,0,0,0,0,42,0,31,0,217,0,244,0,252,0,194,0,76,0,138,0,41,0,190,0,178,0,0,0,27,0,194,0,0,0,0,0,44,0,48,0,111,0,0,0,253,0,0,0,28,0,60,0,140,0,195,0,55,0,16,0,149,0,221,0,94,0,0,0,0,0,199,0,252,0,145,0,179,0,0,0,79,0,7,0,211,0,116,0,152,0,63,0,208,0,90,0,7,0,0,0,50,0,200,0,145,0,0,0,108,0,2,0,113,0,227,0,115,0,220,0,118,0,0,0,82,0,132,0,46,0,239,0,251,0,0,0,9,0,191,0,2,0,206,0,0,0,248,0,164,0,27,0,233,0,0,0,132,0,116,0,91,0,0,0,18,0,54,0,106,0,248,0,34,0,123,0,39,0,160,0,0,0,30,0,155,0,217,0,195,0,52,0,0,0,57,0,235,0,24,0,0,0,5,0,133,0,214,0,251,0,82,0,164,0,2,0,191,0,123,0,245,0,200,0,33,0,175,0,0,0,9,0,112,0,241,0,38,0,141,0,176,0,16,0,118,0,198,0,131,0,59,0,6,0,87,0,169,0,65,0,100,0,108,0,206,0,204,0,50,0,0,0,197,0,55,0,87,0,0,0,0,0,207,0,21,0,35,0,101,0,117,0,218,0,2,0,48,0,203,0,104,0,0,0,78,0,0,0,36,0,111,0,155,0,132,0,95,0,222,0,233,0,142,0,52,0,44,0,185,0,59,0,92,0,70,0,175,0,6,0,0,0,0,0,232,0,98,0,144,0,152,0,109,0,9,0,34,0,0,0,214,0,168,0,162,0,76,0,0,0,14,0,139,0,0,0,0,0,91,0,182,0,69,0,218,0,45,0,17,0,98,0,99,0,248,0,238,0,0,0,212,0,119,0,34,0,244,0,241,0,83,0,45,0,142,0,0,0,0,0,17,0,248,0,51,0,10,0,252,0,161,0,128,0,254,0,102,0,76,0,170,0,34,0,30,0,167,0,224,0,0,0,179,0,0,0,130,0,17,0,142,0,94,0,246,0,224,0,1,0,42,0,254,0,226,0,105,0,226,0,152,0,189,0,43,0,87,0,0,0,26,0,66,0,186,0,0,0,162,0,127,0,185,0,0,0,129,0,146,0,3,0,69,0,80,0,234,0,119,0,0,0,149,0,38,0,217,0,113,0,9,0,255,0,20,0,69,0,0,0,114,0,214,0,125,0,198,0,95,0,107,0,51,0,124,0,0,0,0,0,117,0,111,0,183,0,237,0,46,0,0,0,222,0,219,0,164,0,178,0,0,0,0,0,98,0,0,0,20,0,145,0,92,0,117,0,182,0,16,0,165,0,0,0,81,0,0,0,0,0,175,0,0,0,0,0,191,0,83,0,0,0,170,0,253,0,13,0,0,0,57,0,0,0,54,0,0,0,20,0,0,0,150,0,109,0,158,0,28,0,192,0,78,0,79,0,115,0,0,0,0,0,214,0,19,0,188,0,140,0,96,0,189,0,0,0,107,0,161,0,91,0,199,0,103,0,0,0);
signal scenario_full  : scenario_type := (210,31,210,30,25,31,95,31,95,30,95,29,95,28,71,31,173,31,238,31,209,31,18,31,120,31,148,31,148,30,186,31,186,30,217,31,217,30,42,31,206,31,206,30,24,31,113,31,100,31,7,31,44,31,79,31,214,31,214,30,214,29,136,31,25,31,66,31,68,31,43,31,18,31,200,31,47,31,80,31,220,31,51,31,123,31,111,31,85,31,6,31,173,31,22,31,22,30,123,31,123,30,155,31,155,30,199,31,199,30,64,31,64,30,139,31,77,31,66,31,66,30,68,31,68,30,114,31,218,31,37,31,186,31,211,31,22,31,24,31,34,31,245,31,22,31,223,31,66,31,66,30,33,31,33,30,242,31,207,31,207,30,29,31,204,31,251,31,17,31,103,31,175,31,131,31,169,31,32,31,44,31,89,31,248,31,248,30,248,29,254,31,84,31,84,30,134,31,236,31,236,30,73,31,36,31,205,31,205,30,56,31,56,30,226,31,226,30,209,31,230,31,213,31,213,30,186,31,175,31,124,31,104,31,31,31,31,30,33,31,254,31,16,31,213,31,25,31,121,31,64,31,7,31,7,30,80,31,237,31,130,31,246,31,238,31,255,31,84,31,83,31,83,30,74,31,74,30,227,31,40,31,52,31,52,30,50,31,99,31,88,31,240,31,197,31,197,30,205,31,13,31,253,31,123,31,193,31,171,31,22,31,131,31,133,31,225,31,158,31,249,31,215,31,54,31,137,31,133,31,149,31,111,31,90,31,207,31,233,31,250,31,33,31,240,31,150,31,224,31,103,31,109,31,192,31,242,31,142,31,142,30,74,31,74,30,141,31,253,31,90,31,90,30,242,31,250,31,185,31,87,31,253,31,2,31,2,30,123,31,201,31,201,30,201,29,121,31,19,31,3,31,3,30,6,31,6,30,161,31,161,30,161,29,51,31,168,31,164,31,164,30,164,29,202,31,236,31,198,31,45,31,45,30,95,31,126,31,166,31,166,30,202,31,107,31,245,31,73,31,110,31,110,30,110,29,128,31,48,31,71,31,71,30,40,31,183,31,107,31,107,30,76,31,160,31,51,31,51,30,114,31,35,31,35,30,182,31,30,31,150,31,133,31,37,31,37,30,185,31,185,30,183,31,131,31,131,30,166,31,133,31,131,31,131,30,89,31,242,31,254,31,118,31,75,31,127,31,57,31,239,31,24,31,17,31,193,31,46,31,87,31,223,31,223,30,236,31,2,31,109,31,202,31,110,31,117,31,103,31,33,31,14,31,124,31,124,30,124,29,124,28,209,31,3,31,201,31,152,31,65,31,91,31,28,31,111,31,89,31,96,31,96,30,253,31,237,31,147,31,85,31,85,30,186,31,67,31,52,31,35,31,35,30,203,31,141,31,9,31,29,31,80,31,35,31,169,31,209,31,137,31,110,31,56,31,232,31,232,30,228,31,238,31,34,31,34,30,15,31,75,31,160,31,236,31,181,31,93,31,232,31,218,31,77,31,120,31,120,30,141,31,121,31,93,31,147,31,147,30,65,31,190,31,176,31,131,31,3,31,27,31,247,31,188,31,53,31,3,31,131,31,73,31,53,31,221,31,245,31,188,31,192,31,192,30,19,31,19,30,19,29,19,28,30,31,203,31,86,31,213,31,227,31,95,31,247,31,110,31,235,31,134,31,122,31,174,31,255,31,172,31,173,31,75,31,9,31,37,31,37,30,87,31,170,31,82,31,90,31,22,31,90,31,101,31,104,31,225,31,249,31,70,31,18,31,7,31,156,31,103,31,214,31,221,31,175,31,70,31,70,30,87,31,87,30,197,31,179,31,196,31,109,31,148,31,224,31,196,31,196,30,33,31,187,31,187,30,110,31,177,31,40,31,147,31,248,31,132,31,105,31,66,31,245,31,252,31,103,31,233,31,171,31,79,31,174,31,21,31,141,31,184,31,184,30,184,29,251,31,251,30,8,31,8,30,8,29,204,31,215,31,13,31,13,30,13,29,42,31,31,31,217,31,244,31,252,31,194,31,76,31,138,31,41,31,190,31,178,31,178,30,27,31,194,31,194,30,194,29,44,31,48,31,111,31,111,30,253,31,253,30,28,31,60,31,140,31,195,31,55,31,16,31,149,31,221,31,94,31,94,30,94,29,199,31,252,31,145,31,179,31,179,30,79,31,7,31,211,31,116,31,152,31,63,31,208,31,90,31,7,31,7,30,50,31,200,31,145,31,145,30,108,31,2,31,113,31,227,31,115,31,220,31,118,31,118,30,82,31,132,31,46,31,239,31,251,31,251,30,9,31,191,31,2,31,206,31,206,30,248,31,164,31,27,31,233,31,233,30,132,31,116,31,91,31,91,30,18,31,54,31,106,31,248,31,34,31,123,31,39,31,160,31,160,30,30,31,155,31,217,31,195,31,52,31,52,30,57,31,235,31,24,31,24,30,5,31,133,31,214,31,251,31,82,31,164,31,2,31,191,31,123,31,245,31,200,31,33,31,175,31,175,30,9,31,112,31,241,31,38,31,141,31,176,31,16,31,118,31,198,31,131,31,59,31,6,31,87,31,169,31,65,31,100,31,108,31,206,31,204,31,50,31,50,30,197,31,55,31,87,31,87,30,87,29,207,31,21,31,35,31,101,31,117,31,218,31,2,31,48,31,203,31,104,31,104,30,78,31,78,30,36,31,111,31,155,31,132,31,95,31,222,31,233,31,142,31,52,31,44,31,185,31,59,31,92,31,70,31,175,31,6,31,6,30,6,29,232,31,98,31,144,31,152,31,109,31,9,31,34,31,34,30,214,31,168,31,162,31,76,31,76,30,14,31,139,31,139,30,139,29,91,31,182,31,69,31,218,31,45,31,17,31,98,31,99,31,248,31,238,31,238,30,212,31,119,31,34,31,244,31,241,31,83,31,45,31,142,31,142,30,142,29,17,31,248,31,51,31,10,31,252,31,161,31,128,31,254,31,102,31,76,31,170,31,34,31,30,31,167,31,224,31,224,30,179,31,179,30,130,31,17,31,142,31,94,31,246,31,224,31,1,31,42,31,254,31,226,31,105,31,226,31,152,31,189,31,43,31,87,31,87,30,26,31,66,31,186,31,186,30,162,31,127,31,185,31,185,30,129,31,146,31,3,31,69,31,80,31,234,31,119,31,119,30,149,31,38,31,217,31,113,31,9,31,255,31,20,31,69,31,69,30,114,31,214,31,125,31,198,31,95,31,107,31,51,31,124,31,124,30,124,29,117,31,111,31,183,31,237,31,46,31,46,30,222,31,219,31,164,31,178,31,178,30,178,29,98,31,98,30,20,31,145,31,92,31,117,31,182,31,16,31,165,31,165,30,81,31,81,30,81,29,175,31,175,30,175,29,191,31,83,31,83,30,170,31,253,31,13,31,13,30,57,31,57,30,54,31,54,30,20,31,20,30,150,31,109,31,158,31,28,31,192,31,78,31,79,31,115,31,115,30,115,29,214,31,19,31,188,31,140,31,96,31,189,31,189,30,107,31,161,31,91,31,199,31,103,31,103,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
