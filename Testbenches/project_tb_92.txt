-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 679;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,138,0,0,0,0,0,226,0,109,0,101,0,1,0,83,0,71,0,4,0,120,0,18,0,22,0,87,0,200,0,28,0,133,0,135,0,251,0,0,0,238,0,229,0,148,0,4,0,94,0,14,0,69,0,230,0,147,0,190,0,23,0,126,0,0,0,244,0,57,0,231,0,104,0,13,0,53,0,97,0,181,0,0,0,189,0,0,0,157,0,1,0,134,0,164,0,111,0,28,0,157,0,248,0,174,0,124,0,116,0,0,0,121,0,0,0,236,0,6,0,0,0,180,0,25,0,110,0,2,0,232,0,176,0,170,0,229,0,150,0,195,0,0,0,243,0,146,0,246,0,124,0,181,0,56,0,190,0,26,0,11,0,178,0,60,0,0,0,114,0,31,0,27,0,89,0,154,0,84,0,108,0,2,0,192,0,194,0,64,0,125,0,0,0,34,0,22,0,25,0,188,0,52,0,70,0,141,0,181,0,0,0,104,0,69,0,196,0,233,0,3,0,214,0,212,0,149,0,80,0,56,0,0,0,128,0,0,0,136,0,36,0,125,0,95,0,46,0,52,0,86,0,51,0,181,0,46,0,64,0,234,0,118,0,147,0,13,0,225,0,0,0,99,0,158,0,105,0,186,0,82,0,72,0,122,0,0,0,201,0,81,0,116,0,160,0,191,0,133,0,34,0,0,0,158,0,95,0,33,0,22,0,89,0,0,0,0,0,100,0,76,0,142,0,64,0,81,0,227,0,130,0,185,0,32,0,247,0,0,0,58,0,185,0,146,0,0,0,212,0,140,0,182,0,241,0,215,0,25,0,169,0,47,0,214,0,173,0,136,0,0,0,120,0,0,0,0,0,0,0,48,0,0,0,0,0,135,0,189,0,242,0,0,0,7,0,132,0,171,0,248,0,0,0,210,0,212,0,88,0,186,0,237,0,165,0,0,0,24,0,167,0,77,0,190,0,108,0,249,0,47,0,0,0,204,0,45,0,0,0,155,0,250,0,236,0,157,0,234,0,57,0,0,0,0,0,154,0,165,0,0,0,0,0,129,0,230,0,4,0,195,0,176,0,0,0,102,0,0,0,189,0,173,0,0,0,188,0,0,0,252,0,0,0,60,0,0,0,29,0,62,0,235,0,188,0,44,0,144,0,197,0,0,0,13,0,52,0,116,0,4,0,167,0,68,0,173,0,149,0,254,0,122,0,214,0,27,0,44,0,15,0,62,0,190,0,0,0,91,0,97,0,224,0,250,0,0,0,156,0,64,0,0,0,214,0,137,0,172,0,131,0,163,0,6,0,60,0,0,0,0,0,167,0,138,0,0,0,58,0,0,0,136,0,0,0,102,0,48,0,139,0,8,0,22,0,156,0,193,0,151,0,34,0,0,0,219,0,0,0,1,0,141,0,171,0,228,0,199,0,232,0,80,0,146,0,0,0,12,0,68,0,142,0,62,0,202,0,113,0,153,0,233,0,222,0,185,0,64,0,193,0,172,0,110,0,0,0,108,0,13,0,149,0,77,0,84,0,0,0,76,0,93,0,42,0,0,0,114,0,175,0,100,0,99,0,118,0,0,0,92,0,203,0,248,0,0,0,37,0,0,0,181,0,145,0,175,0,82,0,219,0,102,0,156,0,159,0,98,0,5,0,100,0,109,0,100,0,204,0,183,0,41,0,156,0,48,0,150,0,42,0,161,0,129,0,0,0,117,0,51,0,158,0,175,0,202,0,61,0,52,0,197,0,200,0,97,0,79,0,0,0,123,0,108,0,32,0,0,0,202,0,0,0,0,0,20,0,0,0,150,0,229,0,7,0,216,0,20,0,28,0,250,0,89,0,130,0,178,0,34,0,127,0,3,0,185,0,144,0,56,0,115,0,224,0,0,0,167,0,0,0,87,0,65,0,117,0,14,0,78,0,106,0,249,0,0,0,69,0,148,0,65,0,0,0,89,0,3,0,214,0,116,0,0,0,22,0,77,0,246,0,22,0,206,0,156,0,0,0,229,0,138,0,133,0,141,0,128,0,9,0,26,0,40,0,51,0,139,0,0,0,198,0,241,0,103,0,96,0,39,0,205,0,0,0,0,0,11,0,188,0,156,0,223,0,214,0,0,0,0,0,72,0,215,0,236,0,138,0,110,0,0,0,24,0,251,0,207,0,142,0,0,0,143,0,106,0,0,0,155,0,215,0,169,0,27,0,0,0,0,0,68,0,21,0,170,0,0,0,1,0,157,0,205,0,158,0,171,0,232,0,27,0,237,0,247,0,75,0,0,0,11,0,72,0,0,0,167,0,182,0,19,0,34,0,0,0,0,0,178,0,67,0,58,0,152,0,58,0,168,0,139,0,144,0,108,0,128,0,207,0,191,0,166,0,155,0,5,0,25,0,154,0,0,0,82,0,0,0,251,0,126,0,216,0,50,0,100,0,83,0,216,0,24,0,62,0,133,0,234,0,89,0,0,0,148,0,0,0,211,0,164,0,62,0,60,0,10,0,2,0,35,0,0,0,38,0,92,0,138,0,120,0,18,0,192,0,155,0,81,0,134,0,73,0,209,0,0,0,0,0,82,0,111,0,202,0,216,0,217,0,37,0,186,0,59,0,16,0,91,0,153,0,114,0,44,0,0,0,148,0,0,0,64,0,208,0,220,0,158,0,175,0,65,0,0,0,202,0,80,0,0,0,0,0,253,0,0,0,137,0,0,0,149,0,160,0,12,0,190,0,89,0,181,0,61,0,0,0,209,0,130,0,224,0,187,0,12,0,0,0,0,0,23,0,233,0,189,0,63,0,224,0,191,0,135,0,34,0,106,0,222,0,19,0,149,0,226,0,0,0,105,0,104,0,80,0,220,0,213,0,0,0,32,0,227,0,237,0,127,0,156,0,101,0,169,0,0,0,115,0,0,0,139,0,10,0,208,0,113,0,104,0,8,0,74,0,59,0,0,0,0,0,233,0,68,0,177,0,74,0,0,0,129,0,30,0,247,0,189,0,234,0,182,0,111,0,71,0,125,0,0,0,59,0,236,0,167,0,134,0,119,0,44,0);
signal scenario_full  : scenario_type := (0,0,138,31,138,30,138,29,226,31,109,31,101,31,1,31,83,31,71,31,4,31,120,31,18,31,22,31,87,31,200,31,28,31,133,31,135,31,251,31,251,30,238,31,229,31,148,31,4,31,94,31,14,31,69,31,230,31,147,31,190,31,23,31,126,31,126,30,244,31,57,31,231,31,104,31,13,31,53,31,97,31,181,31,181,30,189,31,189,30,157,31,1,31,134,31,164,31,111,31,28,31,157,31,248,31,174,31,124,31,116,31,116,30,121,31,121,30,236,31,6,31,6,30,180,31,25,31,110,31,2,31,232,31,176,31,170,31,229,31,150,31,195,31,195,30,243,31,146,31,246,31,124,31,181,31,56,31,190,31,26,31,11,31,178,31,60,31,60,30,114,31,31,31,27,31,89,31,154,31,84,31,108,31,2,31,192,31,194,31,64,31,125,31,125,30,34,31,22,31,25,31,188,31,52,31,70,31,141,31,181,31,181,30,104,31,69,31,196,31,233,31,3,31,214,31,212,31,149,31,80,31,56,31,56,30,128,31,128,30,136,31,36,31,125,31,95,31,46,31,52,31,86,31,51,31,181,31,46,31,64,31,234,31,118,31,147,31,13,31,225,31,225,30,99,31,158,31,105,31,186,31,82,31,72,31,122,31,122,30,201,31,81,31,116,31,160,31,191,31,133,31,34,31,34,30,158,31,95,31,33,31,22,31,89,31,89,30,89,29,100,31,76,31,142,31,64,31,81,31,227,31,130,31,185,31,32,31,247,31,247,30,58,31,185,31,146,31,146,30,212,31,140,31,182,31,241,31,215,31,25,31,169,31,47,31,214,31,173,31,136,31,136,30,120,31,120,30,120,29,120,28,48,31,48,30,48,29,135,31,189,31,242,31,242,30,7,31,132,31,171,31,248,31,248,30,210,31,212,31,88,31,186,31,237,31,165,31,165,30,24,31,167,31,77,31,190,31,108,31,249,31,47,31,47,30,204,31,45,31,45,30,155,31,250,31,236,31,157,31,234,31,57,31,57,30,57,29,154,31,165,31,165,30,165,29,129,31,230,31,4,31,195,31,176,31,176,30,102,31,102,30,189,31,173,31,173,30,188,31,188,30,252,31,252,30,60,31,60,30,29,31,62,31,235,31,188,31,44,31,144,31,197,31,197,30,13,31,52,31,116,31,4,31,167,31,68,31,173,31,149,31,254,31,122,31,214,31,27,31,44,31,15,31,62,31,190,31,190,30,91,31,97,31,224,31,250,31,250,30,156,31,64,31,64,30,214,31,137,31,172,31,131,31,163,31,6,31,60,31,60,30,60,29,167,31,138,31,138,30,58,31,58,30,136,31,136,30,102,31,48,31,139,31,8,31,22,31,156,31,193,31,151,31,34,31,34,30,219,31,219,30,1,31,141,31,171,31,228,31,199,31,232,31,80,31,146,31,146,30,12,31,68,31,142,31,62,31,202,31,113,31,153,31,233,31,222,31,185,31,64,31,193,31,172,31,110,31,110,30,108,31,13,31,149,31,77,31,84,31,84,30,76,31,93,31,42,31,42,30,114,31,175,31,100,31,99,31,118,31,118,30,92,31,203,31,248,31,248,30,37,31,37,30,181,31,145,31,175,31,82,31,219,31,102,31,156,31,159,31,98,31,5,31,100,31,109,31,100,31,204,31,183,31,41,31,156,31,48,31,150,31,42,31,161,31,129,31,129,30,117,31,51,31,158,31,175,31,202,31,61,31,52,31,197,31,200,31,97,31,79,31,79,30,123,31,108,31,32,31,32,30,202,31,202,30,202,29,20,31,20,30,150,31,229,31,7,31,216,31,20,31,28,31,250,31,89,31,130,31,178,31,34,31,127,31,3,31,185,31,144,31,56,31,115,31,224,31,224,30,167,31,167,30,87,31,65,31,117,31,14,31,78,31,106,31,249,31,249,30,69,31,148,31,65,31,65,30,89,31,3,31,214,31,116,31,116,30,22,31,77,31,246,31,22,31,206,31,156,31,156,30,229,31,138,31,133,31,141,31,128,31,9,31,26,31,40,31,51,31,139,31,139,30,198,31,241,31,103,31,96,31,39,31,205,31,205,30,205,29,11,31,188,31,156,31,223,31,214,31,214,30,214,29,72,31,215,31,236,31,138,31,110,31,110,30,24,31,251,31,207,31,142,31,142,30,143,31,106,31,106,30,155,31,215,31,169,31,27,31,27,30,27,29,68,31,21,31,170,31,170,30,1,31,157,31,205,31,158,31,171,31,232,31,27,31,237,31,247,31,75,31,75,30,11,31,72,31,72,30,167,31,182,31,19,31,34,31,34,30,34,29,178,31,67,31,58,31,152,31,58,31,168,31,139,31,144,31,108,31,128,31,207,31,191,31,166,31,155,31,5,31,25,31,154,31,154,30,82,31,82,30,251,31,126,31,216,31,50,31,100,31,83,31,216,31,24,31,62,31,133,31,234,31,89,31,89,30,148,31,148,30,211,31,164,31,62,31,60,31,10,31,2,31,35,31,35,30,38,31,92,31,138,31,120,31,18,31,192,31,155,31,81,31,134,31,73,31,209,31,209,30,209,29,82,31,111,31,202,31,216,31,217,31,37,31,186,31,59,31,16,31,91,31,153,31,114,31,44,31,44,30,148,31,148,30,64,31,208,31,220,31,158,31,175,31,65,31,65,30,202,31,80,31,80,30,80,29,253,31,253,30,137,31,137,30,149,31,160,31,12,31,190,31,89,31,181,31,61,31,61,30,209,31,130,31,224,31,187,31,12,31,12,30,12,29,23,31,233,31,189,31,63,31,224,31,191,31,135,31,34,31,106,31,222,31,19,31,149,31,226,31,226,30,105,31,104,31,80,31,220,31,213,31,213,30,32,31,227,31,237,31,127,31,156,31,101,31,169,31,169,30,115,31,115,30,139,31,10,31,208,31,113,31,104,31,8,31,74,31,59,31,59,30,59,29,233,31,68,31,177,31,74,31,74,30,129,31,30,31,247,31,189,31,234,31,182,31,111,31,71,31,125,31,125,30,59,31,236,31,167,31,134,31,119,31,44,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
