-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 867;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (187,0,0,0,62,0,175,0,0,0,8,0,0,0,196,0,25,0,0,0,181,0,172,0,171,0,116,0,183,0,167,0,169,0,43,0,0,0,140,0,188,0,0,0,0,0,118,0,8,0,243,0,0,0,16,0,0,0,44,0,75,0,136,0,128,0,12,0,69,0,22,0,24,0,127,0,175,0,167,0,0,0,147,0,165,0,80,0,87,0,61,0,5,0,143,0,10,0,0,0,0,0,158,0,190,0,165,0,77,0,200,0,159,0,226,0,129,0,10,0,158,0,151,0,150,0,77,0,91,0,0,0,227,0,0,0,189,0,45,0,36,0,127,0,226,0,186,0,48,0,9,0,55,0,173,0,0,0,147,0,118,0,0,0,196,0,66,0,241,0,4,0,0,0,0,0,108,0,17,0,89,0,32,0,170,0,255,0,197,0,55,0,0,0,178,0,237,0,206,0,0,0,23,0,0,0,0,0,171,0,130,0,56,0,146,0,3,0,0,0,173,0,144,0,111,0,0,0,0,0,87,0,254,0,0,0,74,0,0,0,94,0,90,0,0,0,204,0,185,0,170,0,93,0,107,0,141,0,87,0,0,0,133,0,241,0,93,0,107,0,230,0,120,0,7,0,209,0,231,0,0,0,244,0,0,0,113,0,0,0,0,0,58,0,61,0,138,0,48,0,136,0,82,0,12,0,0,0,251,0,63,0,89,0,232,0,32,0,191,0,243,0,251,0,0,0,7,0,61,0,185,0,0,0,7,0,0,0,8,0,176,0,0,0,111,0,0,0,34,0,0,0,195,0,74,0,138,0,154,0,191,0,106,0,152,0,114,0,0,0,2,0,152,0,63,0,229,0,182,0,46,0,107,0,143,0,179,0,0,0,76,0,241,0,2,0,16,0,114,0,39,0,53,0,7,0,0,0,6,0,0,0,185,0,145,0,0,0,0,0,0,0,119,0,210,0,233,0,231,0,159,0,118,0,82,0,185,0,221,0,58,0,69,0,3,0,253,0,61,0,59,0,70,0,9,0,62,0,0,0,148,0,100,0,140,0,194,0,130,0,132,0,250,0,48,0,227,0,0,0,129,0,59,0,7,0,0,0,160,0,0,0,9,0,0,0,124,0,101,0,232,0,228,0,23,0,145,0,163,0,228,0,64,0,86,0,28,0,0,0,47,0,181,0,92,0,166,0,152,0,0,0,60,0,0,0,70,0,121,0,92,0,81,0,195,0,0,0,221,0,240,0,226,0,92,0,161,0,204,0,18,0,40,0,0,0,44,0,176,0,0,0,0,0,0,0,138,0,134,0,0,0,240,0,77,0,108,0,42,0,73,0,67,0,0,0,155,0,23,0,231,0,54,0,182,0,190,0,15,0,239,0,177,0,62,0,254,0,44,0,134,0,0,0,80,0,52,0,112,0,37,0,0,0,15,0,34,0,190,0,179,0,119,0,70,0,58,0,8,0,6,0,0,0,120,0,61,0,232,0,0,0,64,0,0,0,0,0,143,0,131,0,20,0,121,0,26,0,0,0,91,0,145,0,9,0,0,0,65,0,240,0,147,0,243,0,228,0,252,0,235,0,92,0,88,0,19,0,212,0,0,0,78,0,115,0,0,0,60,0,242,0,204,0,100,0,233,0,226,0,179,0,179,0,58,0,0,0,103,0,0,0,0,0,0,0,123,0,224,0,107,0,196,0,61,0,202,0,66,0,160,0,5,0,160,0,123,0,72,0,220,0,0,0,81,0,133,0,195,0,85,0,0,0,0,0,58,0,234,0,223,0,0,0,10,0,236,0,0,0,130,0,132,0,253,0,164,0,0,0,90,0,193,0,52,0,202,0,209,0,49,0,11,0,1,0,103,0,148,0,14,0,0,0,229,0,175,0,1,0,0,0,221,0,0,0,0,0,94,0,226,0,0,0,0,0,185,0,0,0,161,0,85,0,154,0,0,0,227,0,0,0,77,0,80,0,237,0,194,0,37,0,216,0,200,0,0,0,74,0,41,0,70,0,49,0,241,0,2,0,0,0,16,0,0,0,203,0,52,0,0,0,211,0,243,0,113,0,0,0,49,0,191,0,41,0,230,0,0,0,117,0,0,0,254,0,0,0,80,0,93,0,200,0,91,0,185,0,139,0,0,0,171,0,130,0,6,0,194,0,78,0,124,0,0,0,64,0,136,0,215,0,82,0,248,0,51,0,176,0,218,0,186,0,241,0,0,0,247,0,223,0,0,0,0,0,187,0,193,0,246,0,0,0,187,0,123,0,0,0,0,0,255,0,195,0,250,0,91,0,154,0,0,0,87,0,118,0,230,0,241,0,115,0,0,0,44,0,87,0,4,0,0,0,0,0,60,0,53,0,0,0,129,0,0,0,153,0,24,0,186,0,49,0,3,0,242,0,15,0,24,0,0,0,6,0,83,0,26,0,234,0,166,0,18,0,0,0,44,0,129,0,1,0,252,0,0,0,0,0,0,0,117,0,83,0,12,0,0,0,203,0,188,0,0,0,32,0,189,0,81,0,248,0,139,0,0,0,6,0,224,0,219,0,165,0,202,0,171,0,36,0,0,0,130,0,117,0,113,0,62,0,53,0,232,0,0,0,0,0,0,0,179,0,0,0,215,0,0,0,188,0,191,0,0,0,87,0,217,0,252,0,181,0,190,0,99,0,33,0,209,0,204,0,196,0,42,0,110,0,0,0,0,0,120,0,208,0,0,0,174,0,0,0,14,0,0,0,96,0,210,0,220,0,0,0,126,0,153,0,159,0,233,0,107,0,78,0,194,0,0,0,6,0,86,0,163,0,222,0,12,0,156,0,227,0,207,0,110,0,251,0,179,0,63,0,238,0,169,0,94,0,171,0,191,0,186,0,93,0,121,0,0,0,0,0,95,0,186,0,0,0,0,0,54,0,117,0,88,0,50,0,210,0,0,0,141,0,19,0,102,0,6,0,0,0,30,0,84,0,187,0,41,0,58,0,0,0,138,0,204,0,119,0,110,0,21,0,0,0,0,0,177,0,36,0,213,0,225,0,41,0,48,0,230,0,0,0,53,0,165,0,57,0,0,0,29,0,243,0,187,0,0,0,179,0,198,0,185,0,247,0,113,0,110,0,0,0,119,0,0,0,54,0,79,0,247,0,51,0,116,0,154,0,0,0,172,0,184,0,121,0,155,0,0,0,0,0,151,0,0,0,23,0,145,0,70,0,35,0,19,0,77,0,229,0,49,0,133,0,0,0,251,0,0,0,0,0,0,0,0,0,122,0,21,0,45,0,76,0,241,0,25,0,136,0,178,0,40,0,215,0,67,0,61,0,0,0,194,0,177,0,136,0,206,0,70,0,120,0,35,0,201,0,231,0,197,0,70,0,62,0,207,0,223,0,120,0,244,0,110,0,85,0,230,0,0,0,170,0,224,0,0,0,84,0,253,0,52,0,87,0,74,0,218,0,0,0,196,0,159,0,95,0,150,0,209,0,118,0,99,0,217,0,71,0,188,0,0,0,249,0,182,0,189,0,203,0,154,0,0,0,94,0,126,0,227,0,228,0,25,0,128,0,0,0,44,0,182,0,63,0,219,0,242,0,239,0,248,0,202,0,0,0,22,0,229,0,0,0,168,0,71,0,170,0,1,0,0,0,0,0,21,0,23,0,70,0,159,0,0,0,161,0,58,0,0,0,0,0,68,0,103,0,220,0,166,0,201,0,47,0,132,0,126,0,158,0,104,0,205,0,146,0,108,0,0,0,126,0,190,0,221,0,192,0,0,0,50,0,0,0,18,0,117,0,139,0,0,0,0,0,226,0,31,0,129,0,181,0,176,0,81,0,234,0,0,0,0,0,255,0,69,0,130,0,18,0,255,0,94,0,151,0,70,0,222,0,49,0,189,0,0,0);
signal scenario_full  : scenario_type := (187,31,187,30,62,31,175,31,175,30,8,31,8,30,196,31,25,31,25,30,181,31,172,31,171,31,116,31,183,31,167,31,169,31,43,31,43,30,140,31,188,31,188,30,188,29,118,31,8,31,243,31,243,30,16,31,16,30,44,31,75,31,136,31,128,31,12,31,69,31,22,31,24,31,127,31,175,31,167,31,167,30,147,31,165,31,80,31,87,31,61,31,5,31,143,31,10,31,10,30,10,29,158,31,190,31,165,31,77,31,200,31,159,31,226,31,129,31,10,31,158,31,151,31,150,31,77,31,91,31,91,30,227,31,227,30,189,31,45,31,36,31,127,31,226,31,186,31,48,31,9,31,55,31,173,31,173,30,147,31,118,31,118,30,196,31,66,31,241,31,4,31,4,30,4,29,108,31,17,31,89,31,32,31,170,31,255,31,197,31,55,31,55,30,178,31,237,31,206,31,206,30,23,31,23,30,23,29,171,31,130,31,56,31,146,31,3,31,3,30,173,31,144,31,111,31,111,30,111,29,87,31,254,31,254,30,74,31,74,30,94,31,90,31,90,30,204,31,185,31,170,31,93,31,107,31,141,31,87,31,87,30,133,31,241,31,93,31,107,31,230,31,120,31,7,31,209,31,231,31,231,30,244,31,244,30,113,31,113,30,113,29,58,31,61,31,138,31,48,31,136,31,82,31,12,31,12,30,251,31,63,31,89,31,232,31,32,31,191,31,243,31,251,31,251,30,7,31,61,31,185,31,185,30,7,31,7,30,8,31,176,31,176,30,111,31,111,30,34,31,34,30,195,31,74,31,138,31,154,31,191,31,106,31,152,31,114,31,114,30,2,31,152,31,63,31,229,31,182,31,46,31,107,31,143,31,179,31,179,30,76,31,241,31,2,31,16,31,114,31,39,31,53,31,7,31,7,30,6,31,6,30,185,31,145,31,145,30,145,29,145,28,119,31,210,31,233,31,231,31,159,31,118,31,82,31,185,31,221,31,58,31,69,31,3,31,253,31,61,31,59,31,70,31,9,31,62,31,62,30,148,31,100,31,140,31,194,31,130,31,132,31,250,31,48,31,227,31,227,30,129,31,59,31,7,31,7,30,160,31,160,30,9,31,9,30,124,31,101,31,232,31,228,31,23,31,145,31,163,31,228,31,64,31,86,31,28,31,28,30,47,31,181,31,92,31,166,31,152,31,152,30,60,31,60,30,70,31,121,31,92,31,81,31,195,31,195,30,221,31,240,31,226,31,92,31,161,31,204,31,18,31,40,31,40,30,44,31,176,31,176,30,176,29,176,28,138,31,134,31,134,30,240,31,77,31,108,31,42,31,73,31,67,31,67,30,155,31,23,31,231,31,54,31,182,31,190,31,15,31,239,31,177,31,62,31,254,31,44,31,134,31,134,30,80,31,52,31,112,31,37,31,37,30,15,31,34,31,190,31,179,31,119,31,70,31,58,31,8,31,6,31,6,30,120,31,61,31,232,31,232,30,64,31,64,30,64,29,143,31,131,31,20,31,121,31,26,31,26,30,91,31,145,31,9,31,9,30,65,31,240,31,147,31,243,31,228,31,252,31,235,31,92,31,88,31,19,31,212,31,212,30,78,31,115,31,115,30,60,31,242,31,204,31,100,31,233,31,226,31,179,31,179,31,58,31,58,30,103,31,103,30,103,29,103,28,123,31,224,31,107,31,196,31,61,31,202,31,66,31,160,31,5,31,160,31,123,31,72,31,220,31,220,30,81,31,133,31,195,31,85,31,85,30,85,29,58,31,234,31,223,31,223,30,10,31,236,31,236,30,130,31,132,31,253,31,164,31,164,30,90,31,193,31,52,31,202,31,209,31,49,31,11,31,1,31,103,31,148,31,14,31,14,30,229,31,175,31,1,31,1,30,221,31,221,30,221,29,94,31,226,31,226,30,226,29,185,31,185,30,161,31,85,31,154,31,154,30,227,31,227,30,77,31,80,31,237,31,194,31,37,31,216,31,200,31,200,30,74,31,41,31,70,31,49,31,241,31,2,31,2,30,16,31,16,30,203,31,52,31,52,30,211,31,243,31,113,31,113,30,49,31,191,31,41,31,230,31,230,30,117,31,117,30,254,31,254,30,80,31,93,31,200,31,91,31,185,31,139,31,139,30,171,31,130,31,6,31,194,31,78,31,124,31,124,30,64,31,136,31,215,31,82,31,248,31,51,31,176,31,218,31,186,31,241,31,241,30,247,31,223,31,223,30,223,29,187,31,193,31,246,31,246,30,187,31,123,31,123,30,123,29,255,31,195,31,250,31,91,31,154,31,154,30,87,31,118,31,230,31,241,31,115,31,115,30,44,31,87,31,4,31,4,30,4,29,60,31,53,31,53,30,129,31,129,30,153,31,24,31,186,31,49,31,3,31,242,31,15,31,24,31,24,30,6,31,83,31,26,31,234,31,166,31,18,31,18,30,44,31,129,31,1,31,252,31,252,30,252,29,252,28,117,31,83,31,12,31,12,30,203,31,188,31,188,30,32,31,189,31,81,31,248,31,139,31,139,30,6,31,224,31,219,31,165,31,202,31,171,31,36,31,36,30,130,31,117,31,113,31,62,31,53,31,232,31,232,30,232,29,232,28,179,31,179,30,215,31,215,30,188,31,191,31,191,30,87,31,217,31,252,31,181,31,190,31,99,31,33,31,209,31,204,31,196,31,42,31,110,31,110,30,110,29,120,31,208,31,208,30,174,31,174,30,14,31,14,30,96,31,210,31,220,31,220,30,126,31,153,31,159,31,233,31,107,31,78,31,194,31,194,30,6,31,86,31,163,31,222,31,12,31,156,31,227,31,207,31,110,31,251,31,179,31,63,31,238,31,169,31,94,31,171,31,191,31,186,31,93,31,121,31,121,30,121,29,95,31,186,31,186,30,186,29,54,31,117,31,88,31,50,31,210,31,210,30,141,31,19,31,102,31,6,31,6,30,30,31,84,31,187,31,41,31,58,31,58,30,138,31,204,31,119,31,110,31,21,31,21,30,21,29,177,31,36,31,213,31,225,31,41,31,48,31,230,31,230,30,53,31,165,31,57,31,57,30,29,31,243,31,187,31,187,30,179,31,198,31,185,31,247,31,113,31,110,31,110,30,119,31,119,30,54,31,79,31,247,31,51,31,116,31,154,31,154,30,172,31,184,31,121,31,155,31,155,30,155,29,151,31,151,30,23,31,145,31,70,31,35,31,19,31,77,31,229,31,49,31,133,31,133,30,251,31,251,30,251,29,251,28,251,27,122,31,21,31,45,31,76,31,241,31,25,31,136,31,178,31,40,31,215,31,67,31,61,31,61,30,194,31,177,31,136,31,206,31,70,31,120,31,35,31,201,31,231,31,197,31,70,31,62,31,207,31,223,31,120,31,244,31,110,31,85,31,230,31,230,30,170,31,224,31,224,30,84,31,253,31,52,31,87,31,74,31,218,31,218,30,196,31,159,31,95,31,150,31,209,31,118,31,99,31,217,31,71,31,188,31,188,30,249,31,182,31,189,31,203,31,154,31,154,30,94,31,126,31,227,31,228,31,25,31,128,31,128,30,44,31,182,31,63,31,219,31,242,31,239,31,248,31,202,31,202,30,22,31,229,31,229,30,168,31,71,31,170,31,1,31,1,30,1,29,21,31,23,31,70,31,159,31,159,30,161,31,58,31,58,30,58,29,68,31,103,31,220,31,166,31,201,31,47,31,132,31,126,31,158,31,104,31,205,31,146,31,108,31,108,30,126,31,190,31,221,31,192,31,192,30,50,31,50,30,18,31,117,31,139,31,139,30,139,29,226,31,31,31,129,31,181,31,176,31,81,31,234,31,234,30,234,29,255,31,69,31,130,31,18,31,255,31,94,31,151,31,70,31,222,31,49,31,189,31,189,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
