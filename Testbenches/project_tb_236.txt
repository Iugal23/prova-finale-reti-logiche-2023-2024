-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 848;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (220,0,213,0,45,0,207,0,239,0,31,0,122,0,159,0,0,0,58,0,165,0,0,0,48,0,0,0,5,0,0,0,208,0,0,0,68,0,169,0,36,0,146,0,0,0,12,0,155,0,0,0,0,0,109,0,102,0,197,0,3,0,50,0,0,0,157,0,169,0,0,0,228,0,120,0,193,0,0,0,0,0,231,0,184,0,175,0,190,0,153,0,213,0,187,0,0,0,0,0,138,0,24,0,0,0,171,0,185,0,250,0,150,0,138,0,206,0,66,0,51,0,181,0,0,0,0,0,187,0,0,0,9,0,138,0,145,0,173,0,246,0,235,0,0,0,33,0,219,0,20,0,222,0,0,0,247,0,54,0,122,0,17,0,55,0,14,0,0,0,146,0,34,0,84,0,76,0,65,0,124,0,35,0,1,0,211,0,56,0,95,0,47,0,151,0,223,0,0,0,0,0,21,0,148,0,132,0,126,0,48,0,168,0,0,0,238,0,0,0,233,0,74,0,94,0,102,0,0,0,0,0,228,0,113,0,0,0,170,0,186,0,117,0,0,0,0,0,253,0,209,0,106,0,117,0,225,0,5,0,0,0,129,0,7,0,122,0,108,0,103,0,137,0,124,0,0,0,250,0,5,0,29,0,180,0,153,0,10,0,32,0,0,0,32,0,178,0,205,0,205,0,139,0,168,0,0,0,112,0,156,0,203,0,232,0,89,0,92,0,41,0,254,0,0,0,254,0,169,0,0,0,131,0,71,0,72,0,185,0,71,0,89,0,0,0,0,0,134,0,159,0,77,0,12,0,150,0,42,0,139,0,90,0,113,0,0,0,59,0,197,0,200,0,108,0,82,0,140,0,192,0,28,0,37,0,84,0,103,0,78,0,97,0,167,0,255,0,92,0,104,0,236,0,218,0,210,0,163,0,102,0,0,0,132,0,3,0,110,0,251,0,80,0,103,0,209,0,204,0,152,0,101,0,63,0,62,0,51,0,0,0,23,0,120,0,187,0,169,0,212,0,9,0,41,0,0,0,52,0,0,0,203,0,0,0,135,0,157,0,0,0,142,0,0,0,182,0,121,0,16,0,0,0,181,0,141,0,0,0,186,0,10,0,4,0,12,0,168,0,207,0,141,0,220,0,0,0,243,0,128,0,174,0,181,0,207,0,116,0,119,0,13,0,239,0,215,0,128,0,0,0,135,0,71,0,127,0,106,0,118,0,0,0,233,0,102,0,0,0,76,0,47,0,102,0,194,0,15,0,85,0,212,0,0,0,46,0,0,0,0,0,108,0,143,0,112,0,111,0,0,0,158,0,124,0,0,0,104,0,164,0,82,0,0,0,48,0,122,0,76,0,0,0,91,0,85,0,25,0,0,0,8,0,0,0,72,0,65,0,241,0,0,0,47,0,154,0,108,0,170,0,83,0,143,0,56,0,90,0,234,0,88,0,208,0,0,0,228,0,93,0,213,0,194,0,0,0,218,0,59,0,0,0,210,0,2,0,43,0,188,0,129,0,0,0,243,0,148,0,130,0,49,0,142,0,0,0,238,0,19,0,79,0,0,0,0,0,0,0,108,0,204,0,120,0,203,0,0,0,238,0,183,0,0,0,227,0,128,0,205,0,76,0,252,0,67,0,126,0,101,0,55,0,88,0,233,0,140,0,82,0,85,0,222,0,120,0,137,0,83,0,0,0,0,0,107,0,61,0,224,0,0,0,50,0,0,0,0,0,192,0,34,0,50,0,69,0,183,0,165,0,177,0,198,0,70,0,117,0,44,0,219,0,219,0,0,0,45,0,0,0,0,0,44,0,245,0,106,0,104,0,128,0,0,0,87,0,236,0,0,0,61,0,249,0,164,0,132,0,198,0,53,0,0,0,126,0,231,0,0,0,0,0,163,0,204,0,16,0,106,0,202,0,42,0,230,0,20,0,72,0,213,0,137,0,19,0,0,0,223,0,0,0,163,0,88,0,227,0,198,0,210,0,105,0,242,0,146,0,43,0,18,0,226,0,141,0,87,0,110,0,89,0,0,0,167,0,151,0,249,0,136,0,200,0,0,0,148,0,70,0,56,0,212,0,94,0,0,0,0,0,158,0,103,0,0,0,7,0,53,0,235,0,155,0,13,0,7,0,225,0,0,0,59,0,0,0,0,0,0,0,173,0,213,0,148,0,55,0,139,0,248,0,13,0,0,0,0,0,5,0,0,0,0,0,157,0,164,0,102,0,134,0,102,0,55,0,93,0,0,0,70,0,65,0,148,0,162,0,0,0,64,0,14,0,0,0,0,0,1,0,83,0,197,0,10,0,32,0,0,0,139,0,42,0,182,0,220,0,30,0,141,0,0,0,176,0,147,0,9,0,156,0,48,0,195,0,179,0,0,0,149,0,130,0,0,0,0,0,109,0,0,0,124,0,151,0,26,0,118,0,0,0,81,0,174,0,96,0,127,0,0,0,112,0,186,0,0,0,58,0,236,0,171,0,8,0,28,0,254,0,56,0,252,0,0,0,54,0,100,0,0,0,35,0,210,0,0,0,0,0,100,0,180,0,206,0,59,0,176,0,90,0,117,0,26,0,0,0,185,0,190,0,148,0,0,0,123,0,0,0,179,0,5,0,247,0,163,0,2,0,19,0,131,0,162,0,0,0,199,0,35,0,137,0,75,0,158,0,159,0,0,0,162,0,0,0,60,0,17,0,0,0,227,0,0,0,0,0,100,0,5,0,57,0,190,0,61,0,89,0,0,0,238,0,96,0,128,0,0,0,163,0,196,0,189,0,216,0,37,0,245,0,76,0,107,0,177,0,95,0,112,0,42,0,18,0,79,0,100,0,0,0,227,0,119,0,49,0,171,0,86,0,72,0,0,0,0,0,154,0,87,0,117,0,153,0,0,0,8,0,212,0,0,0,228,0,101,0,166,0,177,0,8,0,145,0,79,0,158,0,64,0,251,0,138,0,184,0,0,0,22,0,100,0,189,0,0,0,84,0,14,0,162,0,165,0,139,0,0,0,59,0,160,0,239,0,137,0,5,0,172,0,0,0,20,0,0,0,0,0,33,0,74,0,0,0,0,0,150,0,139,0,71,0,133,0,113,0,249,0,132,0,51,0,54,0,29,0,15,0,221,0,0,0,0,0,184,0,143,0,75,0,174,0,214,0,205,0,22,0,8,0,40,0,215,0,0,0,8,0,170,0,89,0,0,0,248,0,72,0,141,0,110,0,5,0,137,0,229,0,0,0,0,0,176,0,213,0,90,0,121,0,152,0,0,0,66,0,13,0,196,0,63,0,106,0,222,0,0,0,122,0,0,0,186,0,19,0,134,0,221,0,36,0,0,0,231,0,102,0,130,0,0,0,36,0,144,0,3,0,194,0,231,0,141,0,244,0,50,0,92,0,0,0,136,0,122,0,222,0,113,0,8,0,65,0,88,0,159,0,69,0,199,0,0,0,77,0,0,0,198,0,216,0,0,0,29,0,48,0,0,0,32,0,0,0,38,0,106,0,26,0,54,0,12,0,0,0,0,0,0,0,143,0,21,0,0,0,0,0,183,0,31,0,0,0,203,0,233,0,226,0,114,0,229,0,134,0,0,0,43,0,23,0,166,0,133,0,0,0,213,0,8,0,132,0,0,0,112,0,150,0,0,0,51,0,157,0,0,0,0,0,222,0,3,0,0,0,150,0,27,0,191,0,0,0,0,0,0,0,212,0,251,0,108,0,0,0,103,0,0,0,0,0,0,0,107,0,0,0,139,0,111,0,91,0,0,0,156,0,65,0,196,0,35,0,254,0,106,0,21,0,118,0);
signal scenario_full  : scenario_type := (220,31,213,31,45,31,207,31,239,31,31,31,122,31,159,31,159,30,58,31,165,31,165,30,48,31,48,30,5,31,5,30,208,31,208,30,68,31,169,31,36,31,146,31,146,30,12,31,155,31,155,30,155,29,109,31,102,31,197,31,3,31,50,31,50,30,157,31,169,31,169,30,228,31,120,31,193,31,193,30,193,29,231,31,184,31,175,31,190,31,153,31,213,31,187,31,187,30,187,29,138,31,24,31,24,30,171,31,185,31,250,31,150,31,138,31,206,31,66,31,51,31,181,31,181,30,181,29,187,31,187,30,9,31,138,31,145,31,173,31,246,31,235,31,235,30,33,31,219,31,20,31,222,31,222,30,247,31,54,31,122,31,17,31,55,31,14,31,14,30,146,31,34,31,84,31,76,31,65,31,124,31,35,31,1,31,211,31,56,31,95,31,47,31,151,31,223,31,223,30,223,29,21,31,148,31,132,31,126,31,48,31,168,31,168,30,238,31,238,30,233,31,74,31,94,31,102,31,102,30,102,29,228,31,113,31,113,30,170,31,186,31,117,31,117,30,117,29,253,31,209,31,106,31,117,31,225,31,5,31,5,30,129,31,7,31,122,31,108,31,103,31,137,31,124,31,124,30,250,31,5,31,29,31,180,31,153,31,10,31,32,31,32,30,32,31,178,31,205,31,205,31,139,31,168,31,168,30,112,31,156,31,203,31,232,31,89,31,92,31,41,31,254,31,254,30,254,31,169,31,169,30,131,31,71,31,72,31,185,31,71,31,89,31,89,30,89,29,134,31,159,31,77,31,12,31,150,31,42,31,139,31,90,31,113,31,113,30,59,31,197,31,200,31,108,31,82,31,140,31,192,31,28,31,37,31,84,31,103,31,78,31,97,31,167,31,255,31,92,31,104,31,236,31,218,31,210,31,163,31,102,31,102,30,132,31,3,31,110,31,251,31,80,31,103,31,209,31,204,31,152,31,101,31,63,31,62,31,51,31,51,30,23,31,120,31,187,31,169,31,212,31,9,31,41,31,41,30,52,31,52,30,203,31,203,30,135,31,157,31,157,30,142,31,142,30,182,31,121,31,16,31,16,30,181,31,141,31,141,30,186,31,10,31,4,31,12,31,168,31,207,31,141,31,220,31,220,30,243,31,128,31,174,31,181,31,207,31,116,31,119,31,13,31,239,31,215,31,128,31,128,30,135,31,71,31,127,31,106,31,118,31,118,30,233,31,102,31,102,30,76,31,47,31,102,31,194,31,15,31,85,31,212,31,212,30,46,31,46,30,46,29,108,31,143,31,112,31,111,31,111,30,158,31,124,31,124,30,104,31,164,31,82,31,82,30,48,31,122,31,76,31,76,30,91,31,85,31,25,31,25,30,8,31,8,30,72,31,65,31,241,31,241,30,47,31,154,31,108,31,170,31,83,31,143,31,56,31,90,31,234,31,88,31,208,31,208,30,228,31,93,31,213,31,194,31,194,30,218,31,59,31,59,30,210,31,2,31,43,31,188,31,129,31,129,30,243,31,148,31,130,31,49,31,142,31,142,30,238,31,19,31,79,31,79,30,79,29,79,28,108,31,204,31,120,31,203,31,203,30,238,31,183,31,183,30,227,31,128,31,205,31,76,31,252,31,67,31,126,31,101,31,55,31,88,31,233,31,140,31,82,31,85,31,222,31,120,31,137,31,83,31,83,30,83,29,107,31,61,31,224,31,224,30,50,31,50,30,50,29,192,31,34,31,50,31,69,31,183,31,165,31,177,31,198,31,70,31,117,31,44,31,219,31,219,31,219,30,45,31,45,30,45,29,44,31,245,31,106,31,104,31,128,31,128,30,87,31,236,31,236,30,61,31,249,31,164,31,132,31,198,31,53,31,53,30,126,31,231,31,231,30,231,29,163,31,204,31,16,31,106,31,202,31,42,31,230,31,20,31,72,31,213,31,137,31,19,31,19,30,223,31,223,30,163,31,88,31,227,31,198,31,210,31,105,31,242,31,146,31,43,31,18,31,226,31,141,31,87,31,110,31,89,31,89,30,167,31,151,31,249,31,136,31,200,31,200,30,148,31,70,31,56,31,212,31,94,31,94,30,94,29,158,31,103,31,103,30,7,31,53,31,235,31,155,31,13,31,7,31,225,31,225,30,59,31,59,30,59,29,59,28,173,31,213,31,148,31,55,31,139,31,248,31,13,31,13,30,13,29,5,31,5,30,5,29,157,31,164,31,102,31,134,31,102,31,55,31,93,31,93,30,70,31,65,31,148,31,162,31,162,30,64,31,14,31,14,30,14,29,1,31,83,31,197,31,10,31,32,31,32,30,139,31,42,31,182,31,220,31,30,31,141,31,141,30,176,31,147,31,9,31,156,31,48,31,195,31,179,31,179,30,149,31,130,31,130,30,130,29,109,31,109,30,124,31,151,31,26,31,118,31,118,30,81,31,174,31,96,31,127,31,127,30,112,31,186,31,186,30,58,31,236,31,171,31,8,31,28,31,254,31,56,31,252,31,252,30,54,31,100,31,100,30,35,31,210,31,210,30,210,29,100,31,180,31,206,31,59,31,176,31,90,31,117,31,26,31,26,30,185,31,190,31,148,31,148,30,123,31,123,30,179,31,5,31,247,31,163,31,2,31,19,31,131,31,162,31,162,30,199,31,35,31,137,31,75,31,158,31,159,31,159,30,162,31,162,30,60,31,17,31,17,30,227,31,227,30,227,29,100,31,5,31,57,31,190,31,61,31,89,31,89,30,238,31,96,31,128,31,128,30,163,31,196,31,189,31,216,31,37,31,245,31,76,31,107,31,177,31,95,31,112,31,42,31,18,31,79,31,100,31,100,30,227,31,119,31,49,31,171,31,86,31,72,31,72,30,72,29,154,31,87,31,117,31,153,31,153,30,8,31,212,31,212,30,228,31,101,31,166,31,177,31,8,31,145,31,79,31,158,31,64,31,251,31,138,31,184,31,184,30,22,31,100,31,189,31,189,30,84,31,14,31,162,31,165,31,139,31,139,30,59,31,160,31,239,31,137,31,5,31,172,31,172,30,20,31,20,30,20,29,33,31,74,31,74,30,74,29,150,31,139,31,71,31,133,31,113,31,249,31,132,31,51,31,54,31,29,31,15,31,221,31,221,30,221,29,184,31,143,31,75,31,174,31,214,31,205,31,22,31,8,31,40,31,215,31,215,30,8,31,170,31,89,31,89,30,248,31,72,31,141,31,110,31,5,31,137,31,229,31,229,30,229,29,176,31,213,31,90,31,121,31,152,31,152,30,66,31,13,31,196,31,63,31,106,31,222,31,222,30,122,31,122,30,186,31,19,31,134,31,221,31,36,31,36,30,231,31,102,31,130,31,130,30,36,31,144,31,3,31,194,31,231,31,141,31,244,31,50,31,92,31,92,30,136,31,122,31,222,31,113,31,8,31,65,31,88,31,159,31,69,31,199,31,199,30,77,31,77,30,198,31,216,31,216,30,29,31,48,31,48,30,32,31,32,30,38,31,106,31,26,31,54,31,12,31,12,30,12,29,12,28,143,31,21,31,21,30,21,29,183,31,31,31,31,30,203,31,233,31,226,31,114,31,229,31,134,31,134,30,43,31,23,31,166,31,133,31,133,30,213,31,8,31,132,31,132,30,112,31,150,31,150,30,51,31,157,31,157,30,157,29,222,31,3,31,3,30,150,31,27,31,191,31,191,30,191,29,191,28,212,31,251,31,108,31,108,30,103,31,103,30,103,29,103,28,107,31,107,30,139,31,111,31,91,31,91,30,156,31,65,31,196,31,35,31,254,31,106,31,21,31,118,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
