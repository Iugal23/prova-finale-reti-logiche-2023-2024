-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 660;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (225,0,101,0,145,0,39,0,102,0,0,0,190,0,46,0,62,0,55,0,0,0,44,0,136,0,0,0,0,0,116,0,83,0,200,0,62,0,68,0,66,0,100,0,124,0,93,0,128,0,0,0,0,0,232,0,250,0,178,0,217,0,0,0,0,0,79,0,142,0,18,0,160,0,135,0,220,0,163,0,96,0,88,0,0,0,192,0,98,0,121,0,208,0,37,0,130,0,111,0,0,0,31,0,50,0,50,0,228,0,18,0,128,0,196,0,146,0,0,0,22,0,0,0,240,0,0,0,154,0,141,0,213,0,0,0,31,0,100,0,116,0,191,0,67,0,0,0,11,0,0,0,34,0,7,0,164,0,32,0,0,0,147,0,189,0,146,0,9,0,181,0,0,0,60,0,19,0,150,0,0,0,172,0,7,0,196,0,223,0,238,0,125,0,0,0,211,0,43,0,94,0,228,0,229,0,117,0,248,0,225,0,18,0,46,0,60,0,224,0,3,0,0,0,0,0,141,0,163,0,157,0,146,0,0,0,98,0,98,0,17,0,13,0,0,0,53,0,241,0,14,0,213,0,115,0,244,0,58,0,0,0,0,0,43,0,239,0,0,0,56,0,201,0,140,0,0,0,0,0,0,0,150,0,18,0,170,0,197,0,32,0,84,0,65,0,180,0,78,0,78,0,217,0,38,0,140,0,0,0,110,0,208,0,128,0,5,0,199,0,0,0,144,0,75,0,143,0,0,0,74,0,196,0,8,0,91,0,197,0,0,0,137,0,35,0,12,0,63,0,103,0,200,0,120,0,0,0,95,0,24,0,219,0,66,0,0,0,176,0,112,0,141,0,0,0,77,0,213,0,70,0,73,0,119,0,239,0,0,0,0,0,37,0,0,0,208,0,123,0,163,0,0,0,49,0,0,0,175,0,15,0,173,0,135,0,0,0,45,0,91,0,132,0,33,0,139,0,0,0,229,0,52,0,0,0,90,0,0,0,240,0,215,0,42,0,0,0,243,0,78,0,157,0,184,0,233,0,103,0,155,0,34,0,170,0,105,0,0,0,158,0,92,0,168,0,107,0,137,0,106,0,59,0,245,0,0,0,0,0,158,0,214,0,90,0,209,0,228,0,41,0,120,0,62,0,158,0,0,0,53,0,124,0,105,0,199,0,0,0,40,0,35,0,153,0,99,0,208,0,0,0,160,0,245,0,33,0,195,0,102,0,31,0,39,0,0,0,228,0,167,0,115,0,217,0,204,0,44,0,85,0,181,0,0,0,197,0,229,0,114,0,253,0,160,0,141,0,110,0,255,0,184,0,17,0,29,0,200,0,188,0,0,0,75,0,0,0,85,0,175,0,31,0,215,0,64,0,158,0,19,0,199,0,0,0,119,0,133,0,56,0,114,0,0,0,67,0,166,0,238,0,97,0,243,0,170,0,210,0,0,0,216,0,144,0,87,0,191,0,204,0,175,0,128,0,57,0,141,0,46,0,244,0,0,0,215,0,47,0,106,0,7,0,77,0,0,0,145,0,103,0,210,0,17,0,189,0,112,0,191,0,253,0,89,0,0,0,236,0,85,0,111,0,0,0,0,0,128,0,87,0,180,0,94,0,131,0,164,0,0,0,241,0,0,0,32,0,0,0,0,0,0,0,23,0,243,0,175,0,99,0,183,0,189,0,89,0,220,0,254,0,200,0,0,0,76,0,37,0,64,0,177,0,183,0,0,0,230,0,201,0,0,0,178,0,173,0,168,0,181,0,247,0,251,0,158,0,206,0,114,0,0,0,49,0,126,0,246,0,29,0,18,0,56,0,36,0,47,0,78,0,0,0,163,0,122,0,93,0,143,0,173,0,83,0,95,0,165,0,223,0,248,0,0,0,0,0,19,0,19,0,0,0,186,0,163,0,205,0,191,0,0,0,252,0,216,0,100,0,44,0,0,0,241,0,169,0,36,0,0,0,0,0,90,0,102,0,237,0,223,0,117,0,134,0,0,0,242,0,137,0,33,0,52,0,159,0,27,0,9,0,0,0,177,0,156,0,59,0,224,0,52,0,0,0,86,0,51,0,29,0,126,0,0,0,145,0,231,0,42,0,36,0,0,0,0,0,141,0,0,0,0,0,0,0,151,0,46,0,77,0,26,0,0,0,0,0,0,0,0,0,4,0,189,0,0,0,18,0,0,0,239,0,70,0,105,0,0,0,0,0,209,0,13,0,1,0,142,0,199,0,0,0,226,0,70,0,216,0,31,0,0,0,0,0,198,0,0,0,47,0,159,0,161,0,42,0,200,0,0,0,131,0,208,0,252,0,22,0,252,0,225,0,211,0,147,0,90,0,241,0,216,0,180,0,176,0,146,0,51,0,53,0,222,0,249,0,120,0,142,0,99,0,0,0,195,0,73,0,197,0,196,0,5,0,116,0,34,0,0,0,16,0,68,0,0,0,0,0,89,0,81,0,0,0,205,0,116,0,190,0,103,0,0,0,0,0,19,0,103,0,235,0,0,0,177,0,82,0,31,0,39,0,113,0,112,0,23,0,54,0,0,0,0,0,0,0,63,0,152,0,187,0,22,0,126,0,179,0,108,0,0,0,241,0,248,0,104,0,180,0,200,0,195,0,136,0,2,0,43,0,105,0,51,0,183,0,173,0,211,0,106,0,54,0,0,0,50,0,63,0,201,0,14,0,214,0,33,0,126,0,78,0,0,0,234,0,220,0,0,0,6,0,218,0,122,0,0,0,9,0,226,0,104,0,0,0,94,0,188,0,117,0,0,0,0,0,159,0,1,0,201,0,43,0,88,0,112,0,156,0,58,0,51,0,0,0,108,0,255,0,150,0,82,0,246,0,247,0,176,0,82,0,99,0,203,0,150,0,19,0,70,0,203,0,118,0,223,0,25,0,1,0,0,0,13,0,8,0,120,0,115,0,90,0,121,0,0,0,0,0,2,0,0,0,21,0,12,0);
signal scenario_full  : scenario_type := (225,31,101,31,145,31,39,31,102,31,102,30,190,31,46,31,62,31,55,31,55,30,44,31,136,31,136,30,136,29,116,31,83,31,200,31,62,31,68,31,66,31,100,31,124,31,93,31,128,31,128,30,128,29,232,31,250,31,178,31,217,31,217,30,217,29,79,31,142,31,18,31,160,31,135,31,220,31,163,31,96,31,88,31,88,30,192,31,98,31,121,31,208,31,37,31,130,31,111,31,111,30,31,31,50,31,50,31,228,31,18,31,128,31,196,31,146,31,146,30,22,31,22,30,240,31,240,30,154,31,141,31,213,31,213,30,31,31,100,31,116,31,191,31,67,31,67,30,11,31,11,30,34,31,7,31,164,31,32,31,32,30,147,31,189,31,146,31,9,31,181,31,181,30,60,31,19,31,150,31,150,30,172,31,7,31,196,31,223,31,238,31,125,31,125,30,211,31,43,31,94,31,228,31,229,31,117,31,248,31,225,31,18,31,46,31,60,31,224,31,3,31,3,30,3,29,141,31,163,31,157,31,146,31,146,30,98,31,98,31,17,31,13,31,13,30,53,31,241,31,14,31,213,31,115,31,244,31,58,31,58,30,58,29,43,31,239,31,239,30,56,31,201,31,140,31,140,30,140,29,140,28,150,31,18,31,170,31,197,31,32,31,84,31,65,31,180,31,78,31,78,31,217,31,38,31,140,31,140,30,110,31,208,31,128,31,5,31,199,31,199,30,144,31,75,31,143,31,143,30,74,31,196,31,8,31,91,31,197,31,197,30,137,31,35,31,12,31,63,31,103,31,200,31,120,31,120,30,95,31,24,31,219,31,66,31,66,30,176,31,112,31,141,31,141,30,77,31,213,31,70,31,73,31,119,31,239,31,239,30,239,29,37,31,37,30,208,31,123,31,163,31,163,30,49,31,49,30,175,31,15,31,173,31,135,31,135,30,45,31,91,31,132,31,33,31,139,31,139,30,229,31,52,31,52,30,90,31,90,30,240,31,215,31,42,31,42,30,243,31,78,31,157,31,184,31,233,31,103,31,155,31,34,31,170,31,105,31,105,30,158,31,92,31,168,31,107,31,137,31,106,31,59,31,245,31,245,30,245,29,158,31,214,31,90,31,209,31,228,31,41,31,120,31,62,31,158,31,158,30,53,31,124,31,105,31,199,31,199,30,40,31,35,31,153,31,99,31,208,31,208,30,160,31,245,31,33,31,195,31,102,31,31,31,39,31,39,30,228,31,167,31,115,31,217,31,204,31,44,31,85,31,181,31,181,30,197,31,229,31,114,31,253,31,160,31,141,31,110,31,255,31,184,31,17,31,29,31,200,31,188,31,188,30,75,31,75,30,85,31,175,31,31,31,215,31,64,31,158,31,19,31,199,31,199,30,119,31,133,31,56,31,114,31,114,30,67,31,166,31,238,31,97,31,243,31,170,31,210,31,210,30,216,31,144,31,87,31,191,31,204,31,175,31,128,31,57,31,141,31,46,31,244,31,244,30,215,31,47,31,106,31,7,31,77,31,77,30,145,31,103,31,210,31,17,31,189,31,112,31,191,31,253,31,89,31,89,30,236,31,85,31,111,31,111,30,111,29,128,31,87,31,180,31,94,31,131,31,164,31,164,30,241,31,241,30,32,31,32,30,32,29,32,28,23,31,243,31,175,31,99,31,183,31,189,31,89,31,220,31,254,31,200,31,200,30,76,31,37,31,64,31,177,31,183,31,183,30,230,31,201,31,201,30,178,31,173,31,168,31,181,31,247,31,251,31,158,31,206,31,114,31,114,30,49,31,126,31,246,31,29,31,18,31,56,31,36,31,47,31,78,31,78,30,163,31,122,31,93,31,143,31,173,31,83,31,95,31,165,31,223,31,248,31,248,30,248,29,19,31,19,31,19,30,186,31,163,31,205,31,191,31,191,30,252,31,216,31,100,31,44,31,44,30,241,31,169,31,36,31,36,30,36,29,90,31,102,31,237,31,223,31,117,31,134,31,134,30,242,31,137,31,33,31,52,31,159,31,27,31,9,31,9,30,177,31,156,31,59,31,224,31,52,31,52,30,86,31,51,31,29,31,126,31,126,30,145,31,231,31,42,31,36,31,36,30,36,29,141,31,141,30,141,29,141,28,151,31,46,31,77,31,26,31,26,30,26,29,26,28,26,27,4,31,189,31,189,30,18,31,18,30,239,31,70,31,105,31,105,30,105,29,209,31,13,31,1,31,142,31,199,31,199,30,226,31,70,31,216,31,31,31,31,30,31,29,198,31,198,30,47,31,159,31,161,31,42,31,200,31,200,30,131,31,208,31,252,31,22,31,252,31,225,31,211,31,147,31,90,31,241,31,216,31,180,31,176,31,146,31,51,31,53,31,222,31,249,31,120,31,142,31,99,31,99,30,195,31,73,31,197,31,196,31,5,31,116,31,34,31,34,30,16,31,68,31,68,30,68,29,89,31,81,31,81,30,205,31,116,31,190,31,103,31,103,30,103,29,19,31,103,31,235,31,235,30,177,31,82,31,31,31,39,31,113,31,112,31,23,31,54,31,54,30,54,29,54,28,63,31,152,31,187,31,22,31,126,31,179,31,108,31,108,30,241,31,248,31,104,31,180,31,200,31,195,31,136,31,2,31,43,31,105,31,51,31,183,31,173,31,211,31,106,31,54,31,54,30,50,31,63,31,201,31,14,31,214,31,33,31,126,31,78,31,78,30,234,31,220,31,220,30,6,31,218,31,122,31,122,30,9,31,226,31,104,31,104,30,94,31,188,31,117,31,117,30,117,29,159,31,1,31,201,31,43,31,88,31,112,31,156,31,58,31,51,31,51,30,108,31,255,31,150,31,82,31,246,31,247,31,176,31,82,31,99,31,203,31,150,31,19,31,70,31,203,31,118,31,223,31,25,31,1,31,1,30,13,31,8,31,120,31,115,31,90,31,121,31,121,30,121,29,2,31,2,30,21,31,12,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
