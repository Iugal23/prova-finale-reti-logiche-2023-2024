-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 490;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (67,0,0,0,133,0,144,0,67,0,0,0,234,0,101,0,0,0,234,0,194,0,61,0,3,0,63,0,178,0,198,0,0,0,0,0,178,0,218,0,167,0,0,0,0,0,229,0,222,0,120,0,4,0,193,0,36,0,221,0,205,0,74,0,88,0,156,0,228,0,0,0,38,0,104,0,81,0,97,0,80,0,0,0,50,0,117,0,77,0,88,0,169,0,99,0,0,0,0,0,237,0,35,0,185,0,46,0,43,0,0,0,186,0,47,0,0,0,228,0,238,0,96,0,0,0,224,0,194,0,189,0,0,0,145,0,226,0,113,0,164,0,105,0,231,0,127,0,212,0,167,0,0,0,52,0,237,0,204,0,84,0,0,0,128,0,93,0,50,0,57,0,0,0,93,0,32,0,0,0,12,0,82,0,131,0,166,0,159,0,16,0,0,0,175,0,221,0,252,0,0,0,85,0,0,0,41,0,171,0,0,0,56,0,0,0,235,0,212,0,64,0,254,0,119,0,132,0,0,0,97,0,235,0,56,0,106,0,221,0,146,0,118,0,0,0,24,0,64,0,73,0,169,0,240,0,231,0,208,0,62,0,0,0,0,0,136,0,110,0,140,0,228,0,200,0,67,0,0,0,0,0,176,0,79,0,157,0,204,0,29,0,247,0,42,0,58,0,20,0,215,0,135,0,244,0,7,0,94,0,46,0,169,0,199,0,55,0,2,0,69,0,0,0,20,0,110,0,101,0,186,0,13,0,116,0,198,0,0,0,229,0,73,0,130,0,0,0,84,0,0,0,0,0,145,0,203,0,177,0,132,0,213,0,162,0,213,0,177,0,203,0,0,0,238,0,51,0,75,0,0,0,249,0,0,0,21,0,82,0,52,0,107,0,46,0,222,0,23,0,190,0,217,0,0,0,0,0,0,0,120,0,55,0,69,0,0,0,57,0,233,0,62,0,88,0,213,0,24,0,47,0,60,0,0,0,226,0,180,0,46,0,0,0,155,0,241,0,0,0,154,0,83,0,0,0,0,0,40,0,106,0,71,0,0,0,253,0,197,0,96,0,0,0,229,0,109,0,184,0,93,0,153,0,189,0,0,0,85,0,207,0,45,0,70,0,126,0,34,0,0,0,140,0,113,0,87,0,248,0,0,0,188,0,26,0,211,0,0,0,116,0,241,0,146,0,16,0,201,0,147,0,13,0,175,0,148,0,227,0,28,0,205,0,219,0,98,0,108,0,0,0,0,0,255,0,228,0,197,0,225,0,166,0,81,0,166,0,0,0,38,0,181,0,0,0,170,0,109,0,178,0,172,0,229,0,203,0,110,0,211,0,216,0,63,0,139,0,191,0,180,0,174,0,1,0,246,0,42,0,100,0,0,0,94,0,63,0,163,0,189,0,0,0,150,0,127,0,74,0,151,0,61,0,16,0,62,0,40,0,0,0,33,0,26,0,10,0,42,0,220,0,182,0,184,0,0,0,254,0,136,0,74,0,28,0,82,0,31,0,28,0,81,0,131,0,0,0,244,0,26,0,197,0,233,0,188,0,36,0,6,0,71,0,208,0,155,0,72,0,48,0,93,0,167,0,221,0,0,0,105,0,211,0,73,0,0,0,165,0,70,0,0,0,218,0,17,0,89,0,59,0,59,0,58,0,4,0,115,0,107,0,231,0,55,0,0,0,88,0,39,0,11,0,76,0,15,0,193,0,87,0,167,0,112,0,0,0,139,0,83,0,0,0,193,0,82,0,227,0,175,0,233,0,6,0,131,0,254,0,135,0,180,0,235,0,186,0,0,0,159,0,0,0,26,0,58,0,83,0,0,0,185,0,0,0,198,0,0,0,131,0,143,0,6,0,48,0,22,0,221,0,200,0,0,0,128,0,248,0,82,0,117,0,174,0,0,0,134,0,53,0,21,0,0,0,156,0,171,0,0,0,66,0,118,0,22,0,0,0,0,0,243,0,0,0,0,0,0,0,228,0,0,0,24,0,168,0,85,0,95,0,236,0,0,0,147,0,253,0,59,0,75,0,216,0,52,0,97,0,0,0,223,0,185,0,64,0,244,0,197,0,226,0,35,0,36,0,34,0,41,0,112,0,66,0,148,0,0,0,224,0,0,0,18,0,248,0,116,0,16,0,195,0,228,0,178,0,0,0,0,0,0,0,208,0,55,0,105,0,235,0,23,0,206,0,210,0,4,0);
signal scenario_full  : scenario_type := (67,31,67,30,133,31,144,31,67,31,67,30,234,31,101,31,101,30,234,31,194,31,61,31,3,31,63,31,178,31,198,31,198,30,198,29,178,31,218,31,167,31,167,30,167,29,229,31,222,31,120,31,4,31,193,31,36,31,221,31,205,31,74,31,88,31,156,31,228,31,228,30,38,31,104,31,81,31,97,31,80,31,80,30,50,31,117,31,77,31,88,31,169,31,99,31,99,30,99,29,237,31,35,31,185,31,46,31,43,31,43,30,186,31,47,31,47,30,228,31,238,31,96,31,96,30,224,31,194,31,189,31,189,30,145,31,226,31,113,31,164,31,105,31,231,31,127,31,212,31,167,31,167,30,52,31,237,31,204,31,84,31,84,30,128,31,93,31,50,31,57,31,57,30,93,31,32,31,32,30,12,31,82,31,131,31,166,31,159,31,16,31,16,30,175,31,221,31,252,31,252,30,85,31,85,30,41,31,171,31,171,30,56,31,56,30,235,31,212,31,64,31,254,31,119,31,132,31,132,30,97,31,235,31,56,31,106,31,221,31,146,31,118,31,118,30,24,31,64,31,73,31,169,31,240,31,231,31,208,31,62,31,62,30,62,29,136,31,110,31,140,31,228,31,200,31,67,31,67,30,67,29,176,31,79,31,157,31,204,31,29,31,247,31,42,31,58,31,20,31,215,31,135,31,244,31,7,31,94,31,46,31,169,31,199,31,55,31,2,31,69,31,69,30,20,31,110,31,101,31,186,31,13,31,116,31,198,31,198,30,229,31,73,31,130,31,130,30,84,31,84,30,84,29,145,31,203,31,177,31,132,31,213,31,162,31,213,31,177,31,203,31,203,30,238,31,51,31,75,31,75,30,249,31,249,30,21,31,82,31,52,31,107,31,46,31,222,31,23,31,190,31,217,31,217,30,217,29,217,28,120,31,55,31,69,31,69,30,57,31,233,31,62,31,88,31,213,31,24,31,47,31,60,31,60,30,226,31,180,31,46,31,46,30,155,31,241,31,241,30,154,31,83,31,83,30,83,29,40,31,106,31,71,31,71,30,253,31,197,31,96,31,96,30,229,31,109,31,184,31,93,31,153,31,189,31,189,30,85,31,207,31,45,31,70,31,126,31,34,31,34,30,140,31,113,31,87,31,248,31,248,30,188,31,26,31,211,31,211,30,116,31,241,31,146,31,16,31,201,31,147,31,13,31,175,31,148,31,227,31,28,31,205,31,219,31,98,31,108,31,108,30,108,29,255,31,228,31,197,31,225,31,166,31,81,31,166,31,166,30,38,31,181,31,181,30,170,31,109,31,178,31,172,31,229,31,203,31,110,31,211,31,216,31,63,31,139,31,191,31,180,31,174,31,1,31,246,31,42,31,100,31,100,30,94,31,63,31,163,31,189,31,189,30,150,31,127,31,74,31,151,31,61,31,16,31,62,31,40,31,40,30,33,31,26,31,10,31,42,31,220,31,182,31,184,31,184,30,254,31,136,31,74,31,28,31,82,31,31,31,28,31,81,31,131,31,131,30,244,31,26,31,197,31,233,31,188,31,36,31,6,31,71,31,208,31,155,31,72,31,48,31,93,31,167,31,221,31,221,30,105,31,211,31,73,31,73,30,165,31,70,31,70,30,218,31,17,31,89,31,59,31,59,31,58,31,4,31,115,31,107,31,231,31,55,31,55,30,88,31,39,31,11,31,76,31,15,31,193,31,87,31,167,31,112,31,112,30,139,31,83,31,83,30,193,31,82,31,227,31,175,31,233,31,6,31,131,31,254,31,135,31,180,31,235,31,186,31,186,30,159,31,159,30,26,31,58,31,83,31,83,30,185,31,185,30,198,31,198,30,131,31,143,31,6,31,48,31,22,31,221,31,200,31,200,30,128,31,248,31,82,31,117,31,174,31,174,30,134,31,53,31,21,31,21,30,156,31,171,31,171,30,66,31,118,31,22,31,22,30,22,29,243,31,243,30,243,29,243,28,228,31,228,30,24,31,168,31,85,31,95,31,236,31,236,30,147,31,253,31,59,31,75,31,216,31,52,31,97,31,97,30,223,31,185,31,64,31,244,31,197,31,226,31,35,31,36,31,34,31,41,31,112,31,66,31,148,31,148,30,224,31,224,30,18,31,248,31,116,31,16,31,195,31,228,31,178,31,178,30,178,29,178,28,208,31,55,31,105,31,235,31,23,31,206,31,210,31,4,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
