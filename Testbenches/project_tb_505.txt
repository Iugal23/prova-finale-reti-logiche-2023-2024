-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 765;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (135,0,149,0,0,0,66,0,0,0,226,0,83,0,103,0,0,0,48,0,144,0,244,0,243,0,0,0,214,0,216,0,230,0,31,0,208,0,176,0,151,0,81,0,85,0,92,0,0,0,72,0,171,0,244,0,105,0,92,0,33,0,0,0,138,0,110,0,232,0,187,0,146,0,194,0,0,0,46,0,109,0,12,0,147,0,40,0,0,0,0,0,114,0,0,0,122,0,0,0,84,0,0,0,172,0,124,0,68,0,3,0,0,0,181,0,188,0,113,0,119,0,0,0,26,0,182,0,189,0,16,0,220,0,26,0,129,0,0,0,55,0,0,0,56,0,83,0,53,0,236,0,0,0,253,0,199,0,195,0,28,0,242,0,77,0,219,0,0,0,252,0,136,0,217,0,126,0,51,0,103,0,218,0,199,0,247,0,0,0,172,0,31,0,138,0,187,0,2,0,64,0,0,0,0,0,125,0,237,0,32,0,226,0,208,0,0,0,162,0,168,0,146,0,69,0,172,0,154,0,201,0,220,0,3,0,240,0,0,0,211,0,80,0,159,0,0,0,176,0,0,0,73,0,134,0,181,0,178,0,54,0,123,0,0,0,13,0,168,0,203,0,32,0,0,0,0,0,187,0,38,0,117,0,236,0,46,0,126,0,61,0,194,0,137,0,192,0,221,0,219,0,33,0,114,0,13,0,175,0,89,0,0,0,248,0,123,0,218,0,112,0,17,0,57,0,227,0,70,0,141,0,145,0,205,0,144,0,0,0,243,0,0,0,205,0,75,0,104,0,134,0,192,0,63,0,247,0,233,0,74,0,164,0,0,0,149,0,221,0,159,0,224,0,165,0,213,0,247,0,0,0,187,0,144,0,248,0,209,0,254,0,115,0,0,0,100,0,93,0,235,0,28,0,0,0,14,0,212,0,67,0,159,0,79,0,9,0,62,0,0,0,172,0,17,0,0,0,48,0,241,0,29,0,207,0,59,0,61,0,129,0,110,0,227,0,178,0,234,0,246,0,166,0,0,0,76,0,191,0,0,0,11,0,138,0,7,0,5,0,14,0,4,0,251,0,7,0,207,0,56,0,7,0,218,0,242,0,174,0,0,0,232,0,130,0,251,0,0,0,65,0,0,0,194,0,0,0,72,0,12,0,200,0,140,0,28,0,162,0,0,0,0,0,159,0,106,0,175,0,68,0,112,0,0,0,199,0,149,0,65,0,0,0,65,0,119,0,11,0,152,0,251,0,189,0,144,0,110,0,251,0,70,0,233,0,181,0,0,0,134,0,168,0,0,0,159,0,54,0,239,0,68,0,0,0,246,0,22,0,212,0,0,0,171,0,32,0,45,0,236,0,104,0,185,0,144,0,248,0,143,0,73,0,182,0,0,0,112,0,49,0,82,0,44,0,251,0,36,0,0,0,96,0,246,0,0,0,220,0,30,0,119,0,22,0,23,0,54,0,236,0,233,0,46,0,159,0,98,0,92,0,0,0,252,0,48,0,0,0,8,0,153,0,25,0,23,0,136,0,130,0,44,0,0,0,126,0,12,0,200,0,226,0,119,0,0,0,148,0,42,0,0,0,173,0,218,0,86,0,204,0,0,0,240,0,0,0,129,0,0,0,0,0,0,0,210,0,201,0,57,0,180,0,222,0,158,0,20,0,75,0,0,0,155,0,198,0,187,0,0,0,9,0,145,0,207,0,182,0,0,0,0,0,227,0,186,0,102,0,89,0,197,0,113,0,105,0,0,0,0,0,185,0,110,0,200,0,37,0,140,0,231,0,150,0,39,0,0,0,34,0,208,0,196,0,212,0,165,0,230,0,245,0,53,0,66,0,249,0,144,0,0,0,182,0,214,0,66,0,184,0,250,0,235,0,215,0,228,0,32,0,195,0,39,0,15,0,220,0,135,0,9,0,0,0,13,0,220,0,2,0,0,0,20,0,69,0,202,0,123,0,0,0,76,0,0,0,169,0,0,0,89,0,27,0,156,0,123,0,155,0,172,0,167,0,0,0,43,0,93,0,244,0,121,0,132,0,139,0,60,0,253,0,193,0,0,0,91,0,9,0,0,0,248,0,95,0,184,0,0,0,0,0,159,0,241,0,129,0,0,0,66,0,73,0,205,0,77,0,100,0,161,0,231,0,181,0,76,0,221,0,160,0,233,0,244,0,202,0,224,0,71,0,0,0,203,0,93,0,36,0,84,0,50,0,165,0,53,0,0,0,213,0,219,0,147,0,145,0,10,0,0,0,15,0,108,0,112,0,46,0,67,0,98,0,211,0,147,0,0,0,150,0,64,0,0,0,171,0,131,0,183,0,166,0,167,0,130,0,0,0,240,0,0,0,0,0,246,0,3,0,0,0,179,0,26,0,115,0,234,0,0,0,0,0,14,0,39,0,142,0,90,0,173,0,65,0,0,0,214,0,0,0,7,0,61,0,117,0,212,0,106,0,187,0,0,0,54,0,103,0,17,0,208,0,159,0,0,0,63,0,156,0,56,0,212,0,0,0,0,0,0,0,78,0,38,0,4,0,20,0,0,0,0,0,121,0,103,0,145,0,99,0,0,0,163,0,92,0,39,0,28,0,110,0,107,0,251,0,27,0,206,0,160,0,0,0,250,0,165,0,190,0,168,0,161,0,152,0,7,0,0,0,0,0,165,0,240,0,211,0,0,0,77,0,107,0,230,0,6,0,160,0,55,0,0,0,76,0,0,0,9,0,0,0,134,0,119,0,140,0,0,0,0,0,182,0,23,0,59,0,135,0,144,0,63,0,28,0,168,0,128,0,0,0,144,0,207,0,112,0,254,0,0,0,105,0,0,0,91,0,33,0,201,0,131,0,0,0,53,0,123,0,120,0,0,0,38,0,17,0,217,0,40,0,225,0,29,0,4,0,135,0,154,0,186,0,87,0,22,0,0,0,15,0,54,0,0,0,7,0,0,0,0,0,156,0,164,0,188,0,31,0,153,0,0,0,183,0,85,0,216,0,197,0,222,0,129,0,215,0,9,0,151,0,112,0,171,0,0,0,29,0,114,0,244,0,102,0,201,0,74,0,0,0,0,0,163,0,0,0,188,0,185,0,134,0,46,0,22,0,46,0,198,0,24,0,118,0,195,0,130,0,12,0,147,0,81,0,0,0,233,0,29,0,0,0,230,0,57,0,175,0,0,0,20,0,29,0,14,0,189,0,0,0,215,0,147,0,183,0,189,0,229,0,0,0,30,0,90,0,0,0,24,0,211,0,48,0,162,0,236,0,131,0,210,0,183,0,74,0,59,0,71,0,218,0,0,0,164,0,0,0,137,0,0,0,0,0,228,0,0,0,166,0,41,0,0,0,160,0,21,0,164,0,7,0,185,0,17,0,242,0,204,0,115,0,233,0,144,0,171,0,44,0,251,0,0,0,233,0,72,0,213,0,0,0,143,0);
signal scenario_full  : scenario_type := (135,31,149,31,149,30,66,31,66,30,226,31,83,31,103,31,103,30,48,31,144,31,244,31,243,31,243,30,214,31,216,31,230,31,31,31,208,31,176,31,151,31,81,31,85,31,92,31,92,30,72,31,171,31,244,31,105,31,92,31,33,31,33,30,138,31,110,31,232,31,187,31,146,31,194,31,194,30,46,31,109,31,12,31,147,31,40,31,40,30,40,29,114,31,114,30,122,31,122,30,84,31,84,30,172,31,124,31,68,31,3,31,3,30,181,31,188,31,113,31,119,31,119,30,26,31,182,31,189,31,16,31,220,31,26,31,129,31,129,30,55,31,55,30,56,31,83,31,53,31,236,31,236,30,253,31,199,31,195,31,28,31,242,31,77,31,219,31,219,30,252,31,136,31,217,31,126,31,51,31,103,31,218,31,199,31,247,31,247,30,172,31,31,31,138,31,187,31,2,31,64,31,64,30,64,29,125,31,237,31,32,31,226,31,208,31,208,30,162,31,168,31,146,31,69,31,172,31,154,31,201,31,220,31,3,31,240,31,240,30,211,31,80,31,159,31,159,30,176,31,176,30,73,31,134,31,181,31,178,31,54,31,123,31,123,30,13,31,168,31,203,31,32,31,32,30,32,29,187,31,38,31,117,31,236,31,46,31,126,31,61,31,194,31,137,31,192,31,221,31,219,31,33,31,114,31,13,31,175,31,89,31,89,30,248,31,123,31,218,31,112,31,17,31,57,31,227,31,70,31,141,31,145,31,205,31,144,31,144,30,243,31,243,30,205,31,75,31,104,31,134,31,192,31,63,31,247,31,233,31,74,31,164,31,164,30,149,31,221,31,159,31,224,31,165,31,213,31,247,31,247,30,187,31,144,31,248,31,209,31,254,31,115,31,115,30,100,31,93,31,235,31,28,31,28,30,14,31,212,31,67,31,159,31,79,31,9,31,62,31,62,30,172,31,17,31,17,30,48,31,241,31,29,31,207,31,59,31,61,31,129,31,110,31,227,31,178,31,234,31,246,31,166,31,166,30,76,31,191,31,191,30,11,31,138,31,7,31,5,31,14,31,4,31,251,31,7,31,207,31,56,31,7,31,218,31,242,31,174,31,174,30,232,31,130,31,251,31,251,30,65,31,65,30,194,31,194,30,72,31,12,31,200,31,140,31,28,31,162,31,162,30,162,29,159,31,106,31,175,31,68,31,112,31,112,30,199,31,149,31,65,31,65,30,65,31,119,31,11,31,152,31,251,31,189,31,144,31,110,31,251,31,70,31,233,31,181,31,181,30,134,31,168,31,168,30,159,31,54,31,239,31,68,31,68,30,246,31,22,31,212,31,212,30,171,31,32,31,45,31,236,31,104,31,185,31,144,31,248,31,143,31,73,31,182,31,182,30,112,31,49,31,82,31,44,31,251,31,36,31,36,30,96,31,246,31,246,30,220,31,30,31,119,31,22,31,23,31,54,31,236,31,233,31,46,31,159,31,98,31,92,31,92,30,252,31,48,31,48,30,8,31,153,31,25,31,23,31,136,31,130,31,44,31,44,30,126,31,12,31,200,31,226,31,119,31,119,30,148,31,42,31,42,30,173,31,218,31,86,31,204,31,204,30,240,31,240,30,129,31,129,30,129,29,129,28,210,31,201,31,57,31,180,31,222,31,158,31,20,31,75,31,75,30,155,31,198,31,187,31,187,30,9,31,145,31,207,31,182,31,182,30,182,29,227,31,186,31,102,31,89,31,197,31,113,31,105,31,105,30,105,29,185,31,110,31,200,31,37,31,140,31,231,31,150,31,39,31,39,30,34,31,208,31,196,31,212,31,165,31,230,31,245,31,53,31,66,31,249,31,144,31,144,30,182,31,214,31,66,31,184,31,250,31,235,31,215,31,228,31,32,31,195,31,39,31,15,31,220,31,135,31,9,31,9,30,13,31,220,31,2,31,2,30,20,31,69,31,202,31,123,31,123,30,76,31,76,30,169,31,169,30,89,31,27,31,156,31,123,31,155,31,172,31,167,31,167,30,43,31,93,31,244,31,121,31,132,31,139,31,60,31,253,31,193,31,193,30,91,31,9,31,9,30,248,31,95,31,184,31,184,30,184,29,159,31,241,31,129,31,129,30,66,31,73,31,205,31,77,31,100,31,161,31,231,31,181,31,76,31,221,31,160,31,233,31,244,31,202,31,224,31,71,31,71,30,203,31,93,31,36,31,84,31,50,31,165,31,53,31,53,30,213,31,219,31,147,31,145,31,10,31,10,30,15,31,108,31,112,31,46,31,67,31,98,31,211,31,147,31,147,30,150,31,64,31,64,30,171,31,131,31,183,31,166,31,167,31,130,31,130,30,240,31,240,30,240,29,246,31,3,31,3,30,179,31,26,31,115,31,234,31,234,30,234,29,14,31,39,31,142,31,90,31,173,31,65,31,65,30,214,31,214,30,7,31,61,31,117,31,212,31,106,31,187,31,187,30,54,31,103,31,17,31,208,31,159,31,159,30,63,31,156,31,56,31,212,31,212,30,212,29,212,28,78,31,38,31,4,31,20,31,20,30,20,29,121,31,103,31,145,31,99,31,99,30,163,31,92,31,39,31,28,31,110,31,107,31,251,31,27,31,206,31,160,31,160,30,250,31,165,31,190,31,168,31,161,31,152,31,7,31,7,30,7,29,165,31,240,31,211,31,211,30,77,31,107,31,230,31,6,31,160,31,55,31,55,30,76,31,76,30,9,31,9,30,134,31,119,31,140,31,140,30,140,29,182,31,23,31,59,31,135,31,144,31,63,31,28,31,168,31,128,31,128,30,144,31,207,31,112,31,254,31,254,30,105,31,105,30,91,31,33,31,201,31,131,31,131,30,53,31,123,31,120,31,120,30,38,31,17,31,217,31,40,31,225,31,29,31,4,31,135,31,154,31,186,31,87,31,22,31,22,30,15,31,54,31,54,30,7,31,7,30,7,29,156,31,164,31,188,31,31,31,153,31,153,30,183,31,85,31,216,31,197,31,222,31,129,31,215,31,9,31,151,31,112,31,171,31,171,30,29,31,114,31,244,31,102,31,201,31,74,31,74,30,74,29,163,31,163,30,188,31,185,31,134,31,46,31,22,31,46,31,198,31,24,31,118,31,195,31,130,31,12,31,147,31,81,31,81,30,233,31,29,31,29,30,230,31,57,31,175,31,175,30,20,31,29,31,14,31,189,31,189,30,215,31,147,31,183,31,189,31,229,31,229,30,30,31,90,31,90,30,24,31,211,31,48,31,162,31,236,31,131,31,210,31,183,31,74,31,59,31,71,31,218,31,218,30,164,31,164,30,137,31,137,30,137,29,228,31,228,30,166,31,41,31,41,30,160,31,21,31,164,31,7,31,185,31,17,31,242,31,204,31,115,31,233,31,144,31,171,31,44,31,251,31,251,30,233,31,72,31,213,31,213,30,143,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
