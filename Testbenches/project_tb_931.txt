-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 964;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (154,0,37,0,148,0,202,0,198,0,0,0,42,0,147,0,184,0,230,0,0,0,190,0,174,0,129,0,218,0,0,0,246,0,108,0,14,0,52,0,211,0,220,0,97,0,247,0,126,0,0,0,199,0,216,0,149,0,28,0,95,0,81,0,0,0,182,0,223,0,215,0,79,0,252,0,106,0,167,0,218,0,56,0,244,0,217,0,148,0,36,0,210,0,150,0,191,0,0,0,228,0,17,0,53,0,0,0,117,0,83,0,0,0,102,0,83,0,168,0,124,0,234,0,0,0,217,0,46,0,141,0,0,0,190,0,237,0,240,0,48,0,193,0,102,0,226,0,0,0,0,0,209,0,203,0,16,0,128,0,23,0,137,0,96,0,0,0,167,0,178,0,26,0,223,0,0,0,161,0,160,0,34,0,87,0,131,0,250,0,211,0,105,0,0,0,94,0,0,0,0,0,120,0,209,0,43,0,0,0,95,0,76,0,60,0,227,0,195,0,120,0,0,0,70,0,19,0,0,0,129,0,239,0,0,0,109,0,0,0,253,0,0,0,219,0,0,0,143,0,254,0,20,0,93,0,0,0,28,0,72,0,249,0,20,0,191,0,162,0,192,0,209,0,0,0,6,0,52,0,223,0,36,0,70,0,82,0,0,0,80,0,0,0,81,0,241,0,47,0,0,0,55,0,25,0,0,0,207,0,222,0,0,0,0,0,154,0,152,0,200,0,0,0,0,0,83,0,54,0,0,0,242,0,232,0,204,0,46,0,32,0,110,0,19,0,204,0,216,0,0,0,165,0,33,0,94,0,49,0,23,0,82,0,8,0,0,0,68,0,214,0,105,0,203,0,0,0,0,0,0,0,242,0,32,0,136,0,71,0,0,0,25,0,0,0,51,0,162,0,95,0,0,0,205,0,52,0,19,0,0,0,67,0,50,0,223,0,195,0,64,0,235,0,87,0,0,0,153,0,170,0,166,0,96,0,181,0,160,0,0,0,90,0,62,0,0,0,159,0,212,0,89,0,216,0,99,0,199,0,214,0,92,0,0,0,10,0,23,0,64,0,152,0,21,0,197,0,116,0,106,0,0,0,63,0,72,0,45,0,78,0,0,0,223,0,162,0,239,0,33,0,167,0,0,0,98,0,0,0,80,0,0,0,0,0,0,0,0,0,52,0,218,0,0,0,0,0,90,0,253,0,225,0,198,0,230,0,0,0,13,0,20,0,57,0,0,0,0,0,213,0,250,0,88,0,154,0,241,0,180,0,180,0,56,0,118,0,0,0,6,0,50,0,0,0,141,0,121,0,169,0,243,0,0,0,115,0,98,0,3,0,49,0,13,0,3,0,51,0,37,0,232,0,83,0,86,0,92,0,136,0,0,0,91,0,103,0,51,0,137,0,135,0,71,0,203,0,0,0,247,0,27,0,0,0,0,0,244,0,110,0,95,0,162,0,66,0,85,0,0,0,208,0,0,0,0,0,12,0,0,0,12,0,252,0,156,0,0,0,99,0,129,0,0,0,0,0,0,0,0,0,232,0,0,0,172,0,0,0,229,0,7,0,101,0,0,0,15,0,164,0,0,0,34,0,77,0,0,0,47,0,0,0,228,0,0,0,211,0,132,0,0,0,195,0,193,0,135,0,147,0,0,0,35,0,231,0,126,0,166,0,0,0,80,0,248,0,0,0,218,0,132,0,0,0,57,0,249,0,145,0,108,0,12,0,238,0,173,0,203,0,106,0,96,0,242,0,206,0,0,0,137,0,197,0,39,0,0,0,0,0,8,0,185,0,167,0,140,0,0,0,0,0,155,0,119,0,120,0,230,0,148,0,211,0,212,0,187,0,123,0,90,0,0,0,0,0,102,0,0,0,35,0,69,0,51,0,52,0,104,0,249,0,237,0,130,0,190,0,55,0,30,0,80,0,206,0,37,0,0,0,0,0,3,0,89,0,6,0,146,0,0,0,106,0,82,0,219,0,0,0,94,0,88,0,44,0,0,0,184,0,198,0,237,0,213,0,0,0,0,0,112,0,116,0,0,0,185,0,211,0,194,0,14,0,84,0,0,0,31,0,37,0,0,0,0,0,0,0,175,0,224,0,90,0,19,0,246,0,85,0,41,0,168,0,164,0,248,0,10,0,74,0,46,0,151,0,36,0,159,0,83,0,184,0,58,0,156,0,182,0,0,0,0,0,0,0,0,0,85,0,174,0,183,0,0,0,0,0,216,0,47,0,218,0,101,0,224,0,176,0,183,0,255,0,101,0,197,0,29,0,35,0,100,0,211,0,123,0,105,0,144,0,131,0,199,0,120,0,45,0,106,0,4,0,38,0,155,0,118,0,177,0,53,0,226,0,78,0,139,0,141,0,38,0,254,0,0,0,79,0,181,0,69,0,252,0,0,0,162,0,207,0,58,0,41,0,149,0,143,0,227,0,238,0,133,0,83,0,146,0,0,0,131,0,30,0,29,0,110,0,87,0,0,0,121,0,29,0,0,0,114,0,62,0,114,0,35,0,206,0,227,0,40,0,223,0,0,0,53,0,74,0,177,0,0,0,71,0,185,0,245,0,71,0,63,0,113,0,0,0,254,0,155,0,0,0,169,0,105,0,8,0,161,0,73,0,92,0,0,0,137,0,1,0,93,0,107,0,197,0,165,0,84,0,217,0,128,0,97,0,29,0,242,0,223,0,217,0,182,0,87,0,0,0,0,0,219,0,0,0,111,0,18,0,124,0,19,0,159,0,114,0,8,0,255,0,218,0,129,0,110,0,73,0,134,0,169,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,195,0,0,0,201,0,149,0,0,0,10,0,0,0,0,0,107,0,227,0,0,0,165,0,0,0,0,0,140,0,0,0,10,0,97,0,176,0,133,0,0,0,46,0,154,0,0,0,102,0,172,0,177,0,211,0,0,0,217,0,214,0,141,0,0,0,64,0,0,0,146,0,87,0,130,0,162,0,170,0,154,0,67,0,206,0,0,0,215,0,145,0,118,0,111,0,196,0,0,0,63,0,236,0,0,0,113,0,50,0,142,0,108,0,232,0,167,0,253,0,30,0,168,0,39,0,0,0,217,0,176,0,241,0,126,0,0,0,81,0,18,0,184,0,92,0,193,0,73,0,179,0,167,0,107,0,35,0,159,0,0,0,0,0,247,0,172,0,100,0,135,0,224,0,194,0,164,0,40,0,0,0,16,0,129,0,172,0,147,0,31,0,0,0,237,0,214,0,231,0,228,0,186,0,173,0,178,0,236,0,124,0,92,0,97,0,0,0,0,0,69,0,65,0,225,0,0,0,127,0,0,0,73,0,7,0,0,0,0,0,132,0,119,0,191,0,168,0,139,0,254,0,10,0,60,0,12,0,245,0,31,0,51,0,0,0,115,0,39,0,152,0,191,0,77,0,0,0,248,0,39,0,75,0,255,0,16,0,0,0,0,0,189,0,190,0,102,0,183,0,0,0,115,0,80,0,0,0,0,0,194,0,205,0,249,0,0,0,4,0,95,0,0,0,212,0,232,0,236,0,0,0,0,0,79,0,173,0,187,0,0,0,255,0,145,0,0,0,208,0,0,0,75,0,0,0,163,0,102,0,214,0,173,0,167,0,200,0,230,0,186,0,14,0,0,0,254,0,110,0,240,0,0,0,0,0,0,0,234,0,204,0,110,0,93,0,2,0,226,0,129,0,75,0,229,0,18,0,214,0,83,0,0,0,195,0,198,0,163,0,47,0,85,0,21,0,186,0,186,0,218,0,212,0,13,0,21,0,36,0,233,0,135,0,174,0,237,0,138,0,129,0,110,0,0,0,0,0,172,0,78,0,81,0,38,0,134,0,37,0,72,0,13,0,208,0,252,0,226,0,0,0,74,0,75,0,168,0,252,0,33,0,0,0,178,0,0,0,55,0,33,0,0,0,102,0,0,0,186,0,26,0,133,0,71,0,218,0,74,0,191,0,171,0,43,0,3,0,0,0,189,0,72,0,107,0,244,0,152,0,76,0,54,0,0,0,205,0,52,0,247,0,60,0,141,0,240,0,0,0,135,0,179,0,201,0,178,0,71,0,17,0,0,0,19,0,187,0,249,0,89,0,70,0,131,0,167,0,13,0,132,0,161,0,0,0,132,0,0,0,25,0,131,0,204,0,44,0,56,0,233,0,83,0,138,0,214,0,115,0,114,0,60,0,58,0,16,0,0,0,181,0,199,0,203,0,157,0,17,0,75,0,158,0,0,0,193,0,171,0,7,0,65,0,55,0,254,0,18,0,45,0,0,0,0,0,187,0,0,0,153,0);
signal scenario_full  : scenario_type := (154,31,37,31,148,31,202,31,198,31,198,30,42,31,147,31,184,31,230,31,230,30,190,31,174,31,129,31,218,31,218,30,246,31,108,31,14,31,52,31,211,31,220,31,97,31,247,31,126,31,126,30,199,31,216,31,149,31,28,31,95,31,81,31,81,30,182,31,223,31,215,31,79,31,252,31,106,31,167,31,218,31,56,31,244,31,217,31,148,31,36,31,210,31,150,31,191,31,191,30,228,31,17,31,53,31,53,30,117,31,83,31,83,30,102,31,83,31,168,31,124,31,234,31,234,30,217,31,46,31,141,31,141,30,190,31,237,31,240,31,48,31,193,31,102,31,226,31,226,30,226,29,209,31,203,31,16,31,128,31,23,31,137,31,96,31,96,30,167,31,178,31,26,31,223,31,223,30,161,31,160,31,34,31,87,31,131,31,250,31,211,31,105,31,105,30,94,31,94,30,94,29,120,31,209,31,43,31,43,30,95,31,76,31,60,31,227,31,195,31,120,31,120,30,70,31,19,31,19,30,129,31,239,31,239,30,109,31,109,30,253,31,253,30,219,31,219,30,143,31,254,31,20,31,93,31,93,30,28,31,72,31,249,31,20,31,191,31,162,31,192,31,209,31,209,30,6,31,52,31,223,31,36,31,70,31,82,31,82,30,80,31,80,30,81,31,241,31,47,31,47,30,55,31,25,31,25,30,207,31,222,31,222,30,222,29,154,31,152,31,200,31,200,30,200,29,83,31,54,31,54,30,242,31,232,31,204,31,46,31,32,31,110,31,19,31,204,31,216,31,216,30,165,31,33,31,94,31,49,31,23,31,82,31,8,31,8,30,68,31,214,31,105,31,203,31,203,30,203,29,203,28,242,31,32,31,136,31,71,31,71,30,25,31,25,30,51,31,162,31,95,31,95,30,205,31,52,31,19,31,19,30,67,31,50,31,223,31,195,31,64,31,235,31,87,31,87,30,153,31,170,31,166,31,96,31,181,31,160,31,160,30,90,31,62,31,62,30,159,31,212,31,89,31,216,31,99,31,199,31,214,31,92,31,92,30,10,31,23,31,64,31,152,31,21,31,197,31,116,31,106,31,106,30,63,31,72,31,45,31,78,31,78,30,223,31,162,31,239,31,33,31,167,31,167,30,98,31,98,30,80,31,80,30,80,29,80,28,80,27,52,31,218,31,218,30,218,29,90,31,253,31,225,31,198,31,230,31,230,30,13,31,20,31,57,31,57,30,57,29,213,31,250,31,88,31,154,31,241,31,180,31,180,31,56,31,118,31,118,30,6,31,50,31,50,30,141,31,121,31,169,31,243,31,243,30,115,31,98,31,3,31,49,31,13,31,3,31,51,31,37,31,232,31,83,31,86,31,92,31,136,31,136,30,91,31,103,31,51,31,137,31,135,31,71,31,203,31,203,30,247,31,27,31,27,30,27,29,244,31,110,31,95,31,162,31,66,31,85,31,85,30,208,31,208,30,208,29,12,31,12,30,12,31,252,31,156,31,156,30,99,31,129,31,129,30,129,29,129,28,129,27,232,31,232,30,172,31,172,30,229,31,7,31,101,31,101,30,15,31,164,31,164,30,34,31,77,31,77,30,47,31,47,30,228,31,228,30,211,31,132,31,132,30,195,31,193,31,135,31,147,31,147,30,35,31,231,31,126,31,166,31,166,30,80,31,248,31,248,30,218,31,132,31,132,30,57,31,249,31,145,31,108,31,12,31,238,31,173,31,203,31,106,31,96,31,242,31,206,31,206,30,137,31,197,31,39,31,39,30,39,29,8,31,185,31,167,31,140,31,140,30,140,29,155,31,119,31,120,31,230,31,148,31,211,31,212,31,187,31,123,31,90,31,90,30,90,29,102,31,102,30,35,31,69,31,51,31,52,31,104,31,249,31,237,31,130,31,190,31,55,31,30,31,80,31,206,31,37,31,37,30,37,29,3,31,89,31,6,31,146,31,146,30,106,31,82,31,219,31,219,30,94,31,88,31,44,31,44,30,184,31,198,31,237,31,213,31,213,30,213,29,112,31,116,31,116,30,185,31,211,31,194,31,14,31,84,31,84,30,31,31,37,31,37,30,37,29,37,28,175,31,224,31,90,31,19,31,246,31,85,31,41,31,168,31,164,31,248,31,10,31,74,31,46,31,151,31,36,31,159,31,83,31,184,31,58,31,156,31,182,31,182,30,182,29,182,28,182,27,85,31,174,31,183,31,183,30,183,29,216,31,47,31,218,31,101,31,224,31,176,31,183,31,255,31,101,31,197,31,29,31,35,31,100,31,211,31,123,31,105,31,144,31,131,31,199,31,120,31,45,31,106,31,4,31,38,31,155,31,118,31,177,31,53,31,226,31,78,31,139,31,141,31,38,31,254,31,254,30,79,31,181,31,69,31,252,31,252,30,162,31,207,31,58,31,41,31,149,31,143,31,227,31,238,31,133,31,83,31,146,31,146,30,131,31,30,31,29,31,110,31,87,31,87,30,121,31,29,31,29,30,114,31,62,31,114,31,35,31,206,31,227,31,40,31,223,31,223,30,53,31,74,31,177,31,177,30,71,31,185,31,245,31,71,31,63,31,113,31,113,30,254,31,155,31,155,30,169,31,105,31,8,31,161,31,73,31,92,31,92,30,137,31,1,31,93,31,107,31,197,31,165,31,84,31,217,31,128,31,97,31,29,31,242,31,223,31,217,31,182,31,87,31,87,30,87,29,219,31,219,30,111,31,18,31,124,31,19,31,159,31,114,31,8,31,255,31,218,31,129,31,110,31,73,31,134,31,169,31,243,31,243,30,243,29,243,28,243,27,243,26,243,25,35,31,195,31,195,30,201,31,149,31,149,30,10,31,10,30,10,29,107,31,227,31,227,30,165,31,165,30,165,29,140,31,140,30,10,31,97,31,176,31,133,31,133,30,46,31,154,31,154,30,102,31,172,31,177,31,211,31,211,30,217,31,214,31,141,31,141,30,64,31,64,30,146,31,87,31,130,31,162,31,170,31,154,31,67,31,206,31,206,30,215,31,145,31,118,31,111,31,196,31,196,30,63,31,236,31,236,30,113,31,50,31,142,31,108,31,232,31,167,31,253,31,30,31,168,31,39,31,39,30,217,31,176,31,241,31,126,31,126,30,81,31,18,31,184,31,92,31,193,31,73,31,179,31,167,31,107,31,35,31,159,31,159,30,159,29,247,31,172,31,100,31,135,31,224,31,194,31,164,31,40,31,40,30,16,31,129,31,172,31,147,31,31,31,31,30,237,31,214,31,231,31,228,31,186,31,173,31,178,31,236,31,124,31,92,31,97,31,97,30,97,29,69,31,65,31,225,31,225,30,127,31,127,30,73,31,7,31,7,30,7,29,132,31,119,31,191,31,168,31,139,31,254,31,10,31,60,31,12,31,245,31,31,31,51,31,51,30,115,31,39,31,152,31,191,31,77,31,77,30,248,31,39,31,75,31,255,31,16,31,16,30,16,29,189,31,190,31,102,31,183,31,183,30,115,31,80,31,80,30,80,29,194,31,205,31,249,31,249,30,4,31,95,31,95,30,212,31,232,31,236,31,236,30,236,29,79,31,173,31,187,31,187,30,255,31,145,31,145,30,208,31,208,30,75,31,75,30,163,31,102,31,214,31,173,31,167,31,200,31,230,31,186,31,14,31,14,30,254,31,110,31,240,31,240,30,240,29,240,28,234,31,204,31,110,31,93,31,2,31,226,31,129,31,75,31,229,31,18,31,214,31,83,31,83,30,195,31,198,31,163,31,47,31,85,31,21,31,186,31,186,31,218,31,212,31,13,31,21,31,36,31,233,31,135,31,174,31,237,31,138,31,129,31,110,31,110,30,110,29,172,31,78,31,81,31,38,31,134,31,37,31,72,31,13,31,208,31,252,31,226,31,226,30,74,31,75,31,168,31,252,31,33,31,33,30,178,31,178,30,55,31,33,31,33,30,102,31,102,30,186,31,26,31,133,31,71,31,218,31,74,31,191,31,171,31,43,31,3,31,3,30,189,31,72,31,107,31,244,31,152,31,76,31,54,31,54,30,205,31,52,31,247,31,60,31,141,31,240,31,240,30,135,31,179,31,201,31,178,31,71,31,17,31,17,30,19,31,187,31,249,31,89,31,70,31,131,31,167,31,13,31,132,31,161,31,161,30,132,31,132,30,25,31,131,31,204,31,44,31,56,31,233,31,83,31,138,31,214,31,115,31,114,31,60,31,58,31,16,31,16,30,181,31,199,31,203,31,157,31,17,31,75,31,158,31,158,30,193,31,171,31,7,31,65,31,55,31,254,31,18,31,45,31,45,30,45,29,187,31,187,30,153,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
