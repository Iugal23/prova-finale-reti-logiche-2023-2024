-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 666;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,119,0,106,0,194,0,0,0,86,0,233,0,127,0,95,0,50,0,178,0,104,0,54,0,0,0,107,0,16,0,16,0,97,0,42,0,167,0,91,0,248,0,73,0,240,0,162,0,104,0,130,0,127,0,12,0,45,0,93,0,120,0,21,0,160,0,129,0,0,0,167,0,186,0,28,0,0,0,55,0,224,0,0,0,0,0,0,0,142,0,111,0,0,0,225,0,182,0,35,0,235,0,30,0,146,0,0,0,58,0,146,0,51,0,81,0,119,0,17,0,92,0,71,0,244,0,151,0,0,0,209,0,95,0,206,0,146,0,77,0,94,0,112,0,59,0,149,0,19,0,152,0,0,0,171,0,103,0,0,0,147,0,255,0,182,0,127,0,0,0,0,0,107,0,9,0,23,0,167,0,245,0,0,0,3,0,16,0,208,0,118,0,47,0,0,0,0,0,68,0,208,0,102,0,149,0,0,0,0,0,204,0,0,0,74,0,248,0,65,0,203,0,136,0,0,0,93,0,97,0,192,0,0,0,190,0,128,0,98,0,226,0,0,0,106,0,210,0,182,0,40,0,157,0,207,0,78,0,183,0,39,0,0,0,0,0,0,0,0,0,0,0,43,0,229,0,47,0,46,0,0,0,90,0,31,0,224,0,121,0,0,0,243,0,69,0,0,0,95,0,175,0,206,0,203,0,0,0,212,0,127,0,74,0,231,0,65,0,106,0,167,0,0,0,216,0,0,0,154,0,24,0,0,0,137,0,110,0,0,0,196,0,131,0,190,0,52,0,0,0,0,0,177,0,36,0,174,0,128,0,21,0,0,0,231,0,55,0,237,0,63,0,73,0,197,0,25,0,249,0,181,0,0,0,35,0,209,0,152,0,117,0,15,0,0,0,173,0,123,0,139,0,162,0,75,0,0,0,29,0,232,0,53,0,16,0,194,0,0,0,86,0,37,0,52,0,139,0,0,0,53,0,29,0,146,0,209,0,0,0,87,0,220,0,1,0,241,0,0,0,201,0,63,0,246,0,35,0,75,0,98,0,90,0,133,0,173,0,190,0,157,0,101,0,15,0,89,0,245,0,0,0,96,0,237,0,116,0,126,0,156,0,161,0,218,0,14,0,0,0,0,0,205,0,41,0,98,0,230,0,0,0,113,0,0,0,183,0,231,0,253,0,14,0,202,0,134,0,0,0,135,0,128,0,174,0,0,0,238,0,0,0,0,0,0,0,165,0,115,0,116,0,205,0,50,0,101,0,53,0,171,0,60,0,185,0,72,0,63,0,134,0,56,0,25,0,157,0,89,0,52,0,158,0,191,0,0,0,112,0,0,0,195,0,58,0,0,0,247,0,182,0,131,0,39,0,29,0,0,0,249,0,219,0,216,0,85,0,130,0,88,0,21,0,0,0,0,0,38,0,240,0,185,0,81,0,207,0,43,0,9,0,35,0,6,0,93,0,0,0,250,0,20,0,23,0,181,0,107,0,5,0,47,0,235,0,159,0,0,0,0,0,97,0,183,0,77,0,60,0,52,0,231,0,0,0,45,0,253,0,126,0,0,0,52,0,254,0,231,0,0,0,165,0,154,0,241,0,168,0,0,0,192,0,0,0,143,0,171,0,208,0,248,0,100,0,227,0,220,0,5,0,0,0,88,0,7,0,6,0,0,0,160,0,127,0,8,0,12,0,195,0,0,0,206,0,211,0,0,0,37,0,161,0,102,0,71,0,61,0,149,0,91,0,88,0,27,0,232,0,25,0,0,0,118,0,0,0,24,0,147,0,87,0,140,0,143,0,210,0,17,0,198,0,26,0,106,0,46,0,66,0,39,0,136,0,145,0,28,0,237,0,240,0,198,0,52,0,179,0,0,0,83,0,59,0,251,0,77,0,203,0,0,0,34,0,149,0,46,0,0,0,213,0,161,0,13,0,246,0,191,0,3,0,54,0,185,0,69,0,156,0,106,0,231,0,42,0,111,0,0,0,215,0,196,0,0,0,74,0,129,0,46,0,34,0,207,0,59,0,170,0,241,0,251,0,187,0,220,0,240,0,255,0,176,0,130,0,124,0,151,0,0,0,83,0,191,0,69,0,106,0,0,0,37,0,206,0,82,0,96,0,39,0,0,0,0,0,0,0,54,0,0,0,19,0,12,0,141,0,56,0,196,0,0,0,237,0,201,0,0,0,40,0,57,0,0,0,0,0,180,0,154,0,0,0,27,0,152,0,39,0,113,0,138,0,24,0,0,0,14,0,132,0,79,0,223,0,174,0,85,0,51,0,114,0,52,0,43,0,136,0,54,0,214,0,158,0,0,0,81,0,8,0,49,0,0,0,23,0,206,0,0,0,80,0,226,0,1,0,175,0,78,0,28,0,26,0,146,0,0,0,0,0,15,0,177,0,197,0,0,0,50,0,102,0,67,0,37,0,120,0,252,0,101,0,150,0,21,0,112,0,55,0,0,0,0,0,85,0,198,0,183,0,20,0,51,0,141,0,0,0,0,0,186,0,243,0,149,0,0,0,68,0,0,0,163,0,221,0,162,0,200,0,227,0,82,0,49,0,56,0,65,0,194,0,71,0,195,0,12,0,0,0,9,0,54,0,57,0,102,0,117,0,129,0,234,0,178,0,0,0,165,0,126,0,1,0,44,0,0,0,179,0,136,0,170,0,2,0,47,0,0,0,164,0,0,0,0,0,0,0,66,0,0,0,162,0,0,0,23,0,38,0,164,0,0,0,0,0,227,0,192,0,17,0,0,0,15,0,145,0,0,0,0,0,118,0,191,0,95,0,205,0,242,0,173,0,108,0,226,0,0,0,53,0,214,0,143,0,25,0,0,0,190,0,219,0,171,0,52,0,91,0,230,0,200,0,213,0,0,0,141,0,0,0,69,0,247,0,108,0,225,0,52,0,55,0,46,0,136,0,214,0,243,0,0,0,213,0,140,0,44,0,0,0,169,0,0,0,54,0,206,0,129,0,47,0,215,0);
signal scenario_full  : scenario_type := (0,0,119,31,106,31,194,31,194,30,86,31,233,31,127,31,95,31,50,31,178,31,104,31,54,31,54,30,107,31,16,31,16,31,97,31,42,31,167,31,91,31,248,31,73,31,240,31,162,31,104,31,130,31,127,31,12,31,45,31,93,31,120,31,21,31,160,31,129,31,129,30,167,31,186,31,28,31,28,30,55,31,224,31,224,30,224,29,224,28,142,31,111,31,111,30,225,31,182,31,35,31,235,31,30,31,146,31,146,30,58,31,146,31,51,31,81,31,119,31,17,31,92,31,71,31,244,31,151,31,151,30,209,31,95,31,206,31,146,31,77,31,94,31,112,31,59,31,149,31,19,31,152,31,152,30,171,31,103,31,103,30,147,31,255,31,182,31,127,31,127,30,127,29,107,31,9,31,23,31,167,31,245,31,245,30,3,31,16,31,208,31,118,31,47,31,47,30,47,29,68,31,208,31,102,31,149,31,149,30,149,29,204,31,204,30,74,31,248,31,65,31,203,31,136,31,136,30,93,31,97,31,192,31,192,30,190,31,128,31,98,31,226,31,226,30,106,31,210,31,182,31,40,31,157,31,207,31,78,31,183,31,39,31,39,30,39,29,39,28,39,27,39,26,43,31,229,31,47,31,46,31,46,30,90,31,31,31,224,31,121,31,121,30,243,31,69,31,69,30,95,31,175,31,206,31,203,31,203,30,212,31,127,31,74,31,231,31,65,31,106,31,167,31,167,30,216,31,216,30,154,31,24,31,24,30,137,31,110,31,110,30,196,31,131,31,190,31,52,31,52,30,52,29,177,31,36,31,174,31,128,31,21,31,21,30,231,31,55,31,237,31,63,31,73,31,197,31,25,31,249,31,181,31,181,30,35,31,209,31,152,31,117,31,15,31,15,30,173,31,123,31,139,31,162,31,75,31,75,30,29,31,232,31,53,31,16,31,194,31,194,30,86,31,37,31,52,31,139,31,139,30,53,31,29,31,146,31,209,31,209,30,87,31,220,31,1,31,241,31,241,30,201,31,63,31,246,31,35,31,75,31,98,31,90,31,133,31,173,31,190,31,157,31,101,31,15,31,89,31,245,31,245,30,96,31,237,31,116,31,126,31,156,31,161,31,218,31,14,31,14,30,14,29,205,31,41,31,98,31,230,31,230,30,113,31,113,30,183,31,231,31,253,31,14,31,202,31,134,31,134,30,135,31,128,31,174,31,174,30,238,31,238,30,238,29,238,28,165,31,115,31,116,31,205,31,50,31,101,31,53,31,171,31,60,31,185,31,72,31,63,31,134,31,56,31,25,31,157,31,89,31,52,31,158,31,191,31,191,30,112,31,112,30,195,31,58,31,58,30,247,31,182,31,131,31,39,31,29,31,29,30,249,31,219,31,216,31,85,31,130,31,88,31,21,31,21,30,21,29,38,31,240,31,185,31,81,31,207,31,43,31,9,31,35,31,6,31,93,31,93,30,250,31,20,31,23,31,181,31,107,31,5,31,47,31,235,31,159,31,159,30,159,29,97,31,183,31,77,31,60,31,52,31,231,31,231,30,45,31,253,31,126,31,126,30,52,31,254,31,231,31,231,30,165,31,154,31,241,31,168,31,168,30,192,31,192,30,143,31,171,31,208,31,248,31,100,31,227,31,220,31,5,31,5,30,88,31,7,31,6,31,6,30,160,31,127,31,8,31,12,31,195,31,195,30,206,31,211,31,211,30,37,31,161,31,102,31,71,31,61,31,149,31,91,31,88,31,27,31,232,31,25,31,25,30,118,31,118,30,24,31,147,31,87,31,140,31,143,31,210,31,17,31,198,31,26,31,106,31,46,31,66,31,39,31,136,31,145,31,28,31,237,31,240,31,198,31,52,31,179,31,179,30,83,31,59,31,251,31,77,31,203,31,203,30,34,31,149,31,46,31,46,30,213,31,161,31,13,31,246,31,191,31,3,31,54,31,185,31,69,31,156,31,106,31,231,31,42,31,111,31,111,30,215,31,196,31,196,30,74,31,129,31,46,31,34,31,207,31,59,31,170,31,241,31,251,31,187,31,220,31,240,31,255,31,176,31,130,31,124,31,151,31,151,30,83,31,191,31,69,31,106,31,106,30,37,31,206,31,82,31,96,31,39,31,39,30,39,29,39,28,54,31,54,30,19,31,12,31,141,31,56,31,196,31,196,30,237,31,201,31,201,30,40,31,57,31,57,30,57,29,180,31,154,31,154,30,27,31,152,31,39,31,113,31,138,31,24,31,24,30,14,31,132,31,79,31,223,31,174,31,85,31,51,31,114,31,52,31,43,31,136,31,54,31,214,31,158,31,158,30,81,31,8,31,49,31,49,30,23,31,206,31,206,30,80,31,226,31,1,31,175,31,78,31,28,31,26,31,146,31,146,30,146,29,15,31,177,31,197,31,197,30,50,31,102,31,67,31,37,31,120,31,252,31,101,31,150,31,21,31,112,31,55,31,55,30,55,29,85,31,198,31,183,31,20,31,51,31,141,31,141,30,141,29,186,31,243,31,149,31,149,30,68,31,68,30,163,31,221,31,162,31,200,31,227,31,82,31,49,31,56,31,65,31,194,31,71,31,195,31,12,31,12,30,9,31,54,31,57,31,102,31,117,31,129,31,234,31,178,31,178,30,165,31,126,31,1,31,44,31,44,30,179,31,136,31,170,31,2,31,47,31,47,30,164,31,164,30,164,29,164,28,66,31,66,30,162,31,162,30,23,31,38,31,164,31,164,30,164,29,227,31,192,31,17,31,17,30,15,31,145,31,145,30,145,29,118,31,191,31,95,31,205,31,242,31,173,31,108,31,226,31,226,30,53,31,214,31,143,31,25,31,25,30,190,31,219,31,171,31,52,31,91,31,230,31,200,31,213,31,213,30,141,31,141,30,69,31,247,31,108,31,225,31,52,31,55,31,46,31,136,31,214,31,243,31,243,30,213,31,140,31,44,31,44,30,169,31,169,30,54,31,206,31,129,31,47,31,215,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
