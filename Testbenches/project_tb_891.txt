-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 836;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (234,0,51,0,178,0,122,0,54,0,0,0,11,0,14,0,168,0,13,0,0,0,174,0,193,0,88,0,248,0,13,0,182,0,202,0,129,0,0,0,76,0,238,0,255,0,126,0,40,0,233,0,254,0,122,0,202,0,184,0,163,0,185,0,34,0,105,0,0,0,106,0,0,0,132,0,50,0,154,0,0,0,158,0,208,0,176,0,96,0,28,0,209,0,190,0,188,0,212,0,101,0,7,0,28,0,53,0,221,0,0,0,187,0,229,0,163,0,48,0,93,0,0,0,135,0,97,0,15,0,0,0,0,0,0,0,154,0,161,0,0,0,110,0,0,0,50,0,8,0,215,0,120,0,173,0,7,0,0,0,0,0,249,0,0,0,222,0,0,0,52,0,163,0,107,0,0,0,0,0,144,0,62,0,227,0,0,0,235,0,246,0,163,0,61,0,27,0,0,0,34,0,114,0,57,0,71,0,149,0,0,0,0,0,50,0,213,0,184,0,0,0,139,0,139,0,54,0,67,0,7,0,32,0,51,0,0,0,0,0,130,0,43,0,0,0,239,0,64,0,113,0,120,0,34,0,131,0,204,0,0,0,242,0,188,0,35,0,51,0,7,0,246,0,71,0,32,0,170,0,39,0,21,0,78,0,116,0,19,0,202,0,143,0,157,0,24,0,0,0,175,0,0,0,225,0,214,0,56,0,121,0,173,0,224,0,217,0,186,0,175,0,146,0,210,0,237,0,247,0,216,0,33,0,0,0,0,0,0,0,206,0,84,0,0,0,0,0,171,0,156,0,144,0,29,0,236,0,207,0,10,0,173,0,0,0,188,0,125,0,106,0,90,0,38,0,92,0,231,0,134,0,69,0,0,0,106,0,160,0,71,0,37,0,22,0,78,0,42,0,177,0,16,0,15,0,79,0,43,0,0,0,97,0,0,0,24,0,56,0,222,0,0,0,0,0,166,0,145,0,0,0,47,0,0,0,65,0,125,0,0,0,153,0,0,0,206,0,9,0,91,0,3,0,42,0,127,0,120,0,132,0,0,0,67,0,164,0,0,0,127,0,120,0,0,0,101,0,216,0,147,0,77,0,52,0,139,0,0,0,32,0,47,0,0,0,0,0,0,0,85,0,47,0,85,0,193,0,0,0,193,0,77,0,2,0,86,0,86,0,0,0,186,0,0,0,54,0,0,0,164,0,59,0,198,0,119,0,0,0,122,0,81,0,129,0,242,0,0,0,154,0,165,0,0,0,96,0,243,0,156,0,205,0,98,0,112,0,224,0,155,0,0,0,113,0,10,0,0,0,80,0,139,0,33,0,104,0,247,0,11,0,192,0,0,0,52,0,1,0,211,0,0,0,134,0,214,0,188,0,0,0,52,0,88,0,154,0,65,0,36,0,164,0,100,0,0,0,30,0,147,0,235,0,33,0,5,0,0,0,148,0,36,0,0,0,5,0,155,0,0,0,0,0,144,0,174,0,168,0,217,0,218,0,0,0,82,0,109,0,136,0,20,0,181,0,0,0,0,0,4,0,150,0,105,0,161,0,33,0,120,0,161,0,67,0,142,0,13,0,189,0,78,0,0,0,254,0,182,0,166,0,0,0,245,0,0,0,46,0,0,0,0,0,28,0,191,0,58,0,22,0,122,0,83,0,5,0,236,0,20,0,101,0,158,0,216,0,83,0,128,0,247,0,151,0,0,0,218,0,47,0,26,0,60,0,5,0,0,0,173,0,244,0,240,0,0,0,153,0,0,0,9,0,172,0,71,0,165,0,201,0,45,0,136,0,5,0,214,0,252,0,0,0,36,0,188,0,3,0,72,0,250,0,187,0,70,0,0,0,223,0,71,0,172,0,0,0,81,0,0,0,184,0,0,0,88,0,127,0,205,0,207,0,212,0,159,0,132,0,0,0,141,0,70,0,77,0,0,0,0,0,0,0,157,0,9,0,24,0,70,0,0,0,159,0,111,0,166,0,36,0,112,0,141,0,227,0,202,0,0,0,10,0,201,0,0,0,107,0,0,0,248,0,51,0,189,0,35,0,254,0,152,0,125,0,217,0,0,0,207,0,14,0,0,0,12,0,0,0,98,0,226,0,165,0,31,0,0,0,0,0,114,0,252,0,86,0,30,0,232,0,0,0,254,0,123,0,75,0,191,0,76,0,177,0,215,0,67,0,43,0,0,0,22,0,217,0,82,0,10,0,182,0,0,0,99,0,98,0,90,0,111,0,161,0,57,0,43,0,126,0,40,0,49,0,50,0,213,0,177,0,157,0,159,0,223,0,66,0,0,0,0,0,0,0,49,0,0,0,146,0,230,0,0,0,82,0,184,0,121,0,247,0,251,0,47,0,171,0,0,0,136,0,0,0,189,0,142,0,124,0,126,0,0,0,202,0,220,0,137,0,0,0,74,0,48,0,34,0,0,0,95,0,255,0,0,0,0,0,155,0,247,0,0,0,29,0,0,0,15,0,75,0,0,0,240,0,0,0,172,0,153,0,232,0,62,0,81,0,0,0,184,0,32,0,50,0,35,0,0,0,214,0,243,0,0,0,22,0,230,0,202,0,137,0,0,0,215,0,212,0,108,0,220,0,0,0,0,0,0,0,57,0,0,0,0,0,60,0,110,0,32,0,104,0,179,0,0,0,0,0,167,0,3,0,161,0,90,0,0,0,161,0,17,0,177,0,75,0,226,0,62,0,188,0,73,0,0,0,175,0,255,0,1,0,162,0,163,0,108,0,32,0,52,0,191,0,231,0,192,0,0,0,92,0,0,0,199,0,13,0,0,0,95,0,217,0,113,0,239,0,0,0,241,0,32,0,175,0,236,0,150,0,210,0,137,0,0,0,32,0,239,0,161,0,117,0,230,0,60,0,139,0,10,0,166,0,0,0,252,0,116,0,130,0,232,0,6,0,73,0,47,0,165,0,83,0,140,0,0,0,241,0,165,0,0,0,188,0,96,0,217,0,0,0,141,0,233,0,174,0,100,0,218,0,72,0,0,0,72,0,232,0,70,0,79,0,161,0,0,0,132,0,34,0,66,0,0,0,193,0,231,0,217,0,149,0,155,0,214,0,0,0,10,0,236,0,180,0,198,0,31,0,75,0,184,0,34,0,51,0,182,0,164,0,86,0,214,0,185,0,181,0,115,0,199,0,207,0,29,0,145,0,49,0,113,0,195,0,207,0,229,0,53,0,0,0,181,0,71,0,119,0,104,0,62,0,0,0,0,0,0,0,125,0,190,0,0,0,108,0,8,0,115,0,142,0,0,0,17,0,65,0,134,0,0,0,0,0,2,0,141,0,1,0,0,0,31,0,109,0,23,0,193,0,87,0,0,0,7,0,26,0,114,0,131,0,89,0,68,0,112,0,175,0,76,0,90,0,63,0,121,0,43,0,190,0,66,0,225,0,132,0,140,0,130,0,0,0,62,0,157,0,117,0,107,0,10,0,27,0,244,0,206,0,18,0,221,0,202,0,168,0,100,0,0,0,154,0,255,0,48,0,3,0,213,0,130,0,0,0,170,0,48,0,0,0,116,0,202,0,108,0,205,0,2,0,0,0,49,0,241,0,94,0,98,0,115,0,0,0,230,0,0,0,48,0,0,0,30,0,0,0,0,0,186,0,183,0,227,0,0,0,213,0,69,0,210,0,187,0,115,0,73,0,0,0,91,0,81,0,91,0,0,0,0,0,139,0,24,0,189,0,11,0,135,0,69,0,13,0,171,0,0,0,29,0,134,0,0,0);
signal scenario_full  : scenario_type := (234,31,51,31,178,31,122,31,54,31,54,30,11,31,14,31,168,31,13,31,13,30,174,31,193,31,88,31,248,31,13,31,182,31,202,31,129,31,129,30,76,31,238,31,255,31,126,31,40,31,233,31,254,31,122,31,202,31,184,31,163,31,185,31,34,31,105,31,105,30,106,31,106,30,132,31,50,31,154,31,154,30,158,31,208,31,176,31,96,31,28,31,209,31,190,31,188,31,212,31,101,31,7,31,28,31,53,31,221,31,221,30,187,31,229,31,163,31,48,31,93,31,93,30,135,31,97,31,15,31,15,30,15,29,15,28,154,31,161,31,161,30,110,31,110,30,50,31,8,31,215,31,120,31,173,31,7,31,7,30,7,29,249,31,249,30,222,31,222,30,52,31,163,31,107,31,107,30,107,29,144,31,62,31,227,31,227,30,235,31,246,31,163,31,61,31,27,31,27,30,34,31,114,31,57,31,71,31,149,31,149,30,149,29,50,31,213,31,184,31,184,30,139,31,139,31,54,31,67,31,7,31,32,31,51,31,51,30,51,29,130,31,43,31,43,30,239,31,64,31,113,31,120,31,34,31,131,31,204,31,204,30,242,31,188,31,35,31,51,31,7,31,246,31,71,31,32,31,170,31,39,31,21,31,78,31,116,31,19,31,202,31,143,31,157,31,24,31,24,30,175,31,175,30,225,31,214,31,56,31,121,31,173,31,224,31,217,31,186,31,175,31,146,31,210,31,237,31,247,31,216,31,33,31,33,30,33,29,33,28,206,31,84,31,84,30,84,29,171,31,156,31,144,31,29,31,236,31,207,31,10,31,173,31,173,30,188,31,125,31,106,31,90,31,38,31,92,31,231,31,134,31,69,31,69,30,106,31,160,31,71,31,37,31,22,31,78,31,42,31,177,31,16,31,15,31,79,31,43,31,43,30,97,31,97,30,24,31,56,31,222,31,222,30,222,29,166,31,145,31,145,30,47,31,47,30,65,31,125,31,125,30,153,31,153,30,206,31,9,31,91,31,3,31,42,31,127,31,120,31,132,31,132,30,67,31,164,31,164,30,127,31,120,31,120,30,101,31,216,31,147,31,77,31,52,31,139,31,139,30,32,31,47,31,47,30,47,29,47,28,85,31,47,31,85,31,193,31,193,30,193,31,77,31,2,31,86,31,86,31,86,30,186,31,186,30,54,31,54,30,164,31,59,31,198,31,119,31,119,30,122,31,81,31,129,31,242,31,242,30,154,31,165,31,165,30,96,31,243,31,156,31,205,31,98,31,112,31,224,31,155,31,155,30,113,31,10,31,10,30,80,31,139,31,33,31,104,31,247,31,11,31,192,31,192,30,52,31,1,31,211,31,211,30,134,31,214,31,188,31,188,30,52,31,88,31,154,31,65,31,36,31,164,31,100,31,100,30,30,31,147,31,235,31,33,31,5,31,5,30,148,31,36,31,36,30,5,31,155,31,155,30,155,29,144,31,174,31,168,31,217,31,218,31,218,30,82,31,109,31,136,31,20,31,181,31,181,30,181,29,4,31,150,31,105,31,161,31,33,31,120,31,161,31,67,31,142,31,13,31,189,31,78,31,78,30,254,31,182,31,166,31,166,30,245,31,245,30,46,31,46,30,46,29,28,31,191,31,58,31,22,31,122,31,83,31,5,31,236,31,20,31,101,31,158,31,216,31,83,31,128,31,247,31,151,31,151,30,218,31,47,31,26,31,60,31,5,31,5,30,173,31,244,31,240,31,240,30,153,31,153,30,9,31,172,31,71,31,165,31,201,31,45,31,136,31,5,31,214,31,252,31,252,30,36,31,188,31,3,31,72,31,250,31,187,31,70,31,70,30,223,31,71,31,172,31,172,30,81,31,81,30,184,31,184,30,88,31,127,31,205,31,207,31,212,31,159,31,132,31,132,30,141,31,70,31,77,31,77,30,77,29,77,28,157,31,9,31,24,31,70,31,70,30,159,31,111,31,166,31,36,31,112,31,141,31,227,31,202,31,202,30,10,31,201,31,201,30,107,31,107,30,248,31,51,31,189,31,35,31,254,31,152,31,125,31,217,31,217,30,207,31,14,31,14,30,12,31,12,30,98,31,226,31,165,31,31,31,31,30,31,29,114,31,252,31,86,31,30,31,232,31,232,30,254,31,123,31,75,31,191,31,76,31,177,31,215,31,67,31,43,31,43,30,22,31,217,31,82,31,10,31,182,31,182,30,99,31,98,31,90,31,111,31,161,31,57,31,43,31,126,31,40,31,49,31,50,31,213,31,177,31,157,31,159,31,223,31,66,31,66,30,66,29,66,28,49,31,49,30,146,31,230,31,230,30,82,31,184,31,121,31,247,31,251,31,47,31,171,31,171,30,136,31,136,30,189,31,142,31,124,31,126,31,126,30,202,31,220,31,137,31,137,30,74,31,48,31,34,31,34,30,95,31,255,31,255,30,255,29,155,31,247,31,247,30,29,31,29,30,15,31,75,31,75,30,240,31,240,30,172,31,153,31,232,31,62,31,81,31,81,30,184,31,32,31,50,31,35,31,35,30,214,31,243,31,243,30,22,31,230,31,202,31,137,31,137,30,215,31,212,31,108,31,220,31,220,30,220,29,220,28,57,31,57,30,57,29,60,31,110,31,32,31,104,31,179,31,179,30,179,29,167,31,3,31,161,31,90,31,90,30,161,31,17,31,177,31,75,31,226,31,62,31,188,31,73,31,73,30,175,31,255,31,1,31,162,31,163,31,108,31,32,31,52,31,191,31,231,31,192,31,192,30,92,31,92,30,199,31,13,31,13,30,95,31,217,31,113,31,239,31,239,30,241,31,32,31,175,31,236,31,150,31,210,31,137,31,137,30,32,31,239,31,161,31,117,31,230,31,60,31,139,31,10,31,166,31,166,30,252,31,116,31,130,31,232,31,6,31,73,31,47,31,165,31,83,31,140,31,140,30,241,31,165,31,165,30,188,31,96,31,217,31,217,30,141,31,233,31,174,31,100,31,218,31,72,31,72,30,72,31,232,31,70,31,79,31,161,31,161,30,132,31,34,31,66,31,66,30,193,31,231,31,217,31,149,31,155,31,214,31,214,30,10,31,236,31,180,31,198,31,31,31,75,31,184,31,34,31,51,31,182,31,164,31,86,31,214,31,185,31,181,31,115,31,199,31,207,31,29,31,145,31,49,31,113,31,195,31,207,31,229,31,53,31,53,30,181,31,71,31,119,31,104,31,62,31,62,30,62,29,62,28,125,31,190,31,190,30,108,31,8,31,115,31,142,31,142,30,17,31,65,31,134,31,134,30,134,29,2,31,141,31,1,31,1,30,31,31,109,31,23,31,193,31,87,31,87,30,7,31,26,31,114,31,131,31,89,31,68,31,112,31,175,31,76,31,90,31,63,31,121,31,43,31,190,31,66,31,225,31,132,31,140,31,130,31,130,30,62,31,157,31,117,31,107,31,10,31,27,31,244,31,206,31,18,31,221,31,202,31,168,31,100,31,100,30,154,31,255,31,48,31,3,31,213,31,130,31,130,30,170,31,48,31,48,30,116,31,202,31,108,31,205,31,2,31,2,30,49,31,241,31,94,31,98,31,115,31,115,30,230,31,230,30,48,31,48,30,30,31,30,30,30,29,186,31,183,31,227,31,227,30,213,31,69,31,210,31,187,31,115,31,73,31,73,30,91,31,81,31,91,31,91,30,91,29,139,31,24,31,189,31,11,31,135,31,69,31,13,31,171,31,171,30,29,31,134,31,134,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
