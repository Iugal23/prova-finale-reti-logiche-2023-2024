-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 816;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (233,0,227,0,39,0,180,0,112,0,76,0,26,0,1,0,0,0,166,0,50,0,49,0,224,0,241,0,0,0,8,0,187,0,245,0,73,0,226,0,0,0,53,0,45,0,0,0,231,0,0,0,79,0,141,0,220,0,120,0,0,0,119,0,94,0,81,0,3,0,151,0,43,0,5,0,135,0,61,0,230,0,138,0,193,0,171,0,28,0,0,0,85,0,89,0,83,0,0,0,189,0,184,0,194,0,96,0,182,0,70,0,10,0,237,0,79,0,250,0,209,0,186,0,50,0,0,0,21,0,131,0,91,0,53,0,34,0,143,0,89,0,29,0,141,0,121,0,0,0,209,0,99,0,23,0,61,0,0,0,89,0,67,0,119,0,23,0,113,0,0,0,120,0,186,0,123,0,0,0,78,0,232,0,48,0,67,0,207,0,0,0,0,0,0,0,232,0,0,0,36,0,80,0,44,0,220,0,100,0,208,0,232,0,36,0,81,0,128,0,0,0,250,0,182,0,77,0,123,0,0,0,106,0,0,0,106,0,0,0,18,0,198,0,71,0,142,0,156,0,81,0,165,0,0,0,228,0,184,0,10,0,32,0,0,0,0,0,0,0,177,0,0,0,195,0,31,0,0,0,136,0,0,0,60,0,230,0,245,0,196,0,121,0,44,0,180,0,125,0,202,0,73,0,190,0,189,0,93,0,243,0,0,0,0,0,84,0,160,0,36,0,97,0,153,0,150,0,0,0,143,0,247,0,208,0,0,0,0,0,143,0,138,0,232,0,120,0,0,0,0,0,127,0,0,0,200,0,205,0,216,0,154,0,158,0,0,0,0,0,5,0,0,0,235,0,120,0,21,0,94,0,35,0,0,0,96,0,12,0,25,0,222,0,0,0,220,0,48,0,137,0,214,0,161,0,252,0,0,0,0,0,22,0,0,0,0,0,107,0,17,0,32,0,1,0,239,0,89,0,89,0,0,0,170,0,70,0,113,0,15,0,211,0,151,0,0,0,145,0,177,0,23,0,172,0,135,0,1,0,180,0,247,0,202,0,245,0,238,0,0,0,114,0,79,0,248,0,140,0,99,0,97,0,201,0,0,0,64,0,0,0,31,0,0,0,118,0,190,0,54,0,80,0,44,0,216,0,0,0,0,0,29,0,0,0,50,0,0,0,196,0,90,0,60,0,221,0,238,0,0,0,147,0,7,0,0,0,10,0,0,0,16,0,46,0,248,0,32,0,211,0,135,0,0,0,9,0,0,0,0,0,214,0,15,0,222,0,57,0,110,0,50,0,87,0,203,0,102,0,34,0,171,0,150,0,212,0,135,0,134,0,46,0,228,0,246,0,227,0,96,0,249,0,240,0,105,0,219,0,0,0,33,0,34,0,45,0,28,0,23,0,217,0,191,0,103,0,81,0,166,0,201,0,67,0,0,0,154,0,0,0,190,0,91,0,75,0,194,0,69,0,33,0,0,0,0,0,185,0,114,0,0,0,221,0,22,0,241,0,138,0,197,0,232,0,80,0,29,0,226,0,0,0,217,0,247,0,127,0,164,0,118,0,55,0,79,0,0,0,1,0,0,0,77,0,124,0,22,0,0,0,0,0,82,0,11,0,137,0,133,0,77,0,15,0,133,0,0,0,172,0,113,0,0,0,82,0,201,0,177,0,1,0,153,0,87,0,85,0,21,0,135,0,0,0,94,0,46,0,247,0,149,0,248,0,0,0,11,0,98,0,58,0,67,0,3,0,254,0,18,0,228,0,54,0,101,0,39,0,184,0,0,0,38,0,73,0,209,0,148,0,14,0,51,0,24,0,129,0,0,0,0,0,254,0,231,0,107,0,242,0,45,0,247,0,48,0,147,0,233,0,181,0,200,0,204,0,67,0,30,0,98,0,96,0,217,0,66,0,63,0,108,0,135,0,0,0,3,0,251,0,165,0,0,0,237,0,44,0,7,0,243,0,180,0,211,0,60,0,0,0,103,0,245,0,53,0,90,0,0,0,141,0,138,0,0,0,172,0,0,0,121,0,226,0,187,0,103,0,135,0,35,0,21,0,152,0,121,0,0,0,172,0,0,0,108,0,97,0,109,0,16,0,0,0,134,0,64,0,109,0,95,0,189,0,193,0,215,0,0,0,161,0,0,0,38,0,0,0,248,0,131,0,0,0,95,0,58,0,218,0,24,0,219,0,139,0,186,0,81,0,220,0,251,0,56,0,42,0,96,0,96,0,55,0,0,0,219,0,161,0,202,0,65,0,212,0,240,0,0,0,158,0,247,0,0,0,159,0,240,0,24,0,243,0,0,0,127,0,150,0,53,0,194,0,46,0,10,0,38,0,196,0,151,0,139,0,119,0,178,0,92,0,30,0,160,0,0,0,95,0,0,0,0,0,0,0,207,0,116,0,23,0,16,0,2,0,56,0,0,0,12,0,3,0,82,0,19,0,250,0,173,0,22,0,53,0,107,0,149,0,0,0,0,0,0,0,199,0,97,0,16,0,213,0,214,0,7,0,3,0,204,0,99,0,56,0,219,0,83,0,172,0,0,0,164,0,206,0,71,0,39,0,227,0,0,0,220,0,0,0,42,0,204,0,168,0,182,0,172,0,59,0,0,0,0,0,0,0,95,0,6,0,170,0,10,0,176,0,108,0,73,0,146,0,0,0,54,0,6,0,5,0,107,0,180,0,0,0,75,0,144,0,29,0,38,0,237,0,49,0,164,0,60,0,147,0,130,0,0,0,130,0,220,0,174,0,87,0,97,0,133,0,205,0,157,0,0,0,170,0,60,0,73,0,162,0,0,0,0,0,200,0,145,0,21,0,194,0,0,0,188,0,39,0,48,0,129,0,169,0,230,0,0,0,149,0,0,0,41,0,196,0,44,0,184,0,224,0,99,0,244,0,73,0,108,0,232,0,24,0,229,0,0,0,154,0,33,0,0,0,0,0,114,0,145,0,251,0,180,0,240,0,211,0,13,0,18,0,68,0,125,0,170,0,123,0,0,0,6,0,0,0,0,0,72,0,247,0,220,0,246,0,81,0,255,0,31,0,0,0,109,0,72,0,35,0,20,0,237,0,59,0,80,0,12,0,11,0,233,0,231,0,220,0,46,0,168,0,69,0,215,0,0,0,62,0,84,0,173,0,59,0,2,0,221,0,197,0,129,0,34,0,0,0,0,0,32,0,178,0,0,0,223,0,30,0,75,0,203,0,215,0,47,0,146,0,0,0,0,0,230,0,0,0,84,0,201,0,101,0,231,0,135,0,0,0,244,0,49,0,39,0,210,0,157,0,0,0,197,0,182,0,254,0,219,0,5,0,126,0,56,0,29,0,141,0,20,0,15,0,0,0,245,0,171,0,172,0,0,0,0,0,107,0,139,0,7,0,192,0,191,0,0,0,20,0,127,0,0,0,87,0,27,0,50,0,7,0,0,0,255,0,131,0,57,0,41,0,0,0,0,0,126,0,101,0,0,0,143,0,0,0,225,0,0,0,219,0,165,0,190,0,154,0,0,0,95,0,88,0,173,0,166,0,192,0,155,0,38,0,0,0,198,0,0,0,216,0,179,0,246,0,111,0,0,0,0,0,17,0,173,0,143,0,0,0,0,0,140,0,0,0,0,0,0,0,0,0,106,0,163,0,0,0,229,0,0,0,0,0);
signal scenario_full  : scenario_type := (233,31,227,31,39,31,180,31,112,31,76,31,26,31,1,31,1,30,166,31,50,31,49,31,224,31,241,31,241,30,8,31,187,31,245,31,73,31,226,31,226,30,53,31,45,31,45,30,231,31,231,30,79,31,141,31,220,31,120,31,120,30,119,31,94,31,81,31,3,31,151,31,43,31,5,31,135,31,61,31,230,31,138,31,193,31,171,31,28,31,28,30,85,31,89,31,83,31,83,30,189,31,184,31,194,31,96,31,182,31,70,31,10,31,237,31,79,31,250,31,209,31,186,31,50,31,50,30,21,31,131,31,91,31,53,31,34,31,143,31,89,31,29,31,141,31,121,31,121,30,209,31,99,31,23,31,61,31,61,30,89,31,67,31,119,31,23,31,113,31,113,30,120,31,186,31,123,31,123,30,78,31,232,31,48,31,67,31,207,31,207,30,207,29,207,28,232,31,232,30,36,31,80,31,44,31,220,31,100,31,208,31,232,31,36,31,81,31,128,31,128,30,250,31,182,31,77,31,123,31,123,30,106,31,106,30,106,31,106,30,18,31,198,31,71,31,142,31,156,31,81,31,165,31,165,30,228,31,184,31,10,31,32,31,32,30,32,29,32,28,177,31,177,30,195,31,31,31,31,30,136,31,136,30,60,31,230,31,245,31,196,31,121,31,44,31,180,31,125,31,202,31,73,31,190,31,189,31,93,31,243,31,243,30,243,29,84,31,160,31,36,31,97,31,153,31,150,31,150,30,143,31,247,31,208,31,208,30,208,29,143,31,138,31,232,31,120,31,120,30,120,29,127,31,127,30,200,31,205,31,216,31,154,31,158,31,158,30,158,29,5,31,5,30,235,31,120,31,21,31,94,31,35,31,35,30,96,31,12,31,25,31,222,31,222,30,220,31,48,31,137,31,214,31,161,31,252,31,252,30,252,29,22,31,22,30,22,29,107,31,17,31,32,31,1,31,239,31,89,31,89,31,89,30,170,31,70,31,113,31,15,31,211,31,151,31,151,30,145,31,177,31,23,31,172,31,135,31,1,31,180,31,247,31,202,31,245,31,238,31,238,30,114,31,79,31,248,31,140,31,99,31,97,31,201,31,201,30,64,31,64,30,31,31,31,30,118,31,190,31,54,31,80,31,44,31,216,31,216,30,216,29,29,31,29,30,50,31,50,30,196,31,90,31,60,31,221,31,238,31,238,30,147,31,7,31,7,30,10,31,10,30,16,31,46,31,248,31,32,31,211,31,135,31,135,30,9,31,9,30,9,29,214,31,15,31,222,31,57,31,110,31,50,31,87,31,203,31,102,31,34,31,171,31,150,31,212,31,135,31,134,31,46,31,228,31,246,31,227,31,96,31,249,31,240,31,105,31,219,31,219,30,33,31,34,31,45,31,28,31,23,31,217,31,191,31,103,31,81,31,166,31,201,31,67,31,67,30,154,31,154,30,190,31,91,31,75,31,194,31,69,31,33,31,33,30,33,29,185,31,114,31,114,30,221,31,22,31,241,31,138,31,197,31,232,31,80,31,29,31,226,31,226,30,217,31,247,31,127,31,164,31,118,31,55,31,79,31,79,30,1,31,1,30,77,31,124,31,22,31,22,30,22,29,82,31,11,31,137,31,133,31,77,31,15,31,133,31,133,30,172,31,113,31,113,30,82,31,201,31,177,31,1,31,153,31,87,31,85,31,21,31,135,31,135,30,94,31,46,31,247,31,149,31,248,31,248,30,11,31,98,31,58,31,67,31,3,31,254,31,18,31,228,31,54,31,101,31,39,31,184,31,184,30,38,31,73,31,209,31,148,31,14,31,51,31,24,31,129,31,129,30,129,29,254,31,231,31,107,31,242,31,45,31,247,31,48,31,147,31,233,31,181,31,200,31,204,31,67,31,30,31,98,31,96,31,217,31,66,31,63,31,108,31,135,31,135,30,3,31,251,31,165,31,165,30,237,31,44,31,7,31,243,31,180,31,211,31,60,31,60,30,103,31,245,31,53,31,90,31,90,30,141,31,138,31,138,30,172,31,172,30,121,31,226,31,187,31,103,31,135,31,35,31,21,31,152,31,121,31,121,30,172,31,172,30,108,31,97,31,109,31,16,31,16,30,134,31,64,31,109,31,95,31,189,31,193,31,215,31,215,30,161,31,161,30,38,31,38,30,248,31,131,31,131,30,95,31,58,31,218,31,24,31,219,31,139,31,186,31,81,31,220,31,251,31,56,31,42,31,96,31,96,31,55,31,55,30,219,31,161,31,202,31,65,31,212,31,240,31,240,30,158,31,247,31,247,30,159,31,240,31,24,31,243,31,243,30,127,31,150,31,53,31,194,31,46,31,10,31,38,31,196,31,151,31,139,31,119,31,178,31,92,31,30,31,160,31,160,30,95,31,95,30,95,29,95,28,207,31,116,31,23,31,16,31,2,31,56,31,56,30,12,31,3,31,82,31,19,31,250,31,173,31,22,31,53,31,107,31,149,31,149,30,149,29,149,28,199,31,97,31,16,31,213,31,214,31,7,31,3,31,204,31,99,31,56,31,219,31,83,31,172,31,172,30,164,31,206,31,71,31,39,31,227,31,227,30,220,31,220,30,42,31,204,31,168,31,182,31,172,31,59,31,59,30,59,29,59,28,95,31,6,31,170,31,10,31,176,31,108,31,73,31,146,31,146,30,54,31,6,31,5,31,107,31,180,31,180,30,75,31,144,31,29,31,38,31,237,31,49,31,164,31,60,31,147,31,130,31,130,30,130,31,220,31,174,31,87,31,97,31,133,31,205,31,157,31,157,30,170,31,60,31,73,31,162,31,162,30,162,29,200,31,145,31,21,31,194,31,194,30,188,31,39,31,48,31,129,31,169,31,230,31,230,30,149,31,149,30,41,31,196,31,44,31,184,31,224,31,99,31,244,31,73,31,108,31,232,31,24,31,229,31,229,30,154,31,33,31,33,30,33,29,114,31,145,31,251,31,180,31,240,31,211,31,13,31,18,31,68,31,125,31,170,31,123,31,123,30,6,31,6,30,6,29,72,31,247,31,220,31,246,31,81,31,255,31,31,31,31,30,109,31,72,31,35,31,20,31,237,31,59,31,80,31,12,31,11,31,233,31,231,31,220,31,46,31,168,31,69,31,215,31,215,30,62,31,84,31,173,31,59,31,2,31,221,31,197,31,129,31,34,31,34,30,34,29,32,31,178,31,178,30,223,31,30,31,75,31,203,31,215,31,47,31,146,31,146,30,146,29,230,31,230,30,84,31,201,31,101,31,231,31,135,31,135,30,244,31,49,31,39,31,210,31,157,31,157,30,197,31,182,31,254,31,219,31,5,31,126,31,56,31,29,31,141,31,20,31,15,31,15,30,245,31,171,31,172,31,172,30,172,29,107,31,139,31,7,31,192,31,191,31,191,30,20,31,127,31,127,30,87,31,27,31,50,31,7,31,7,30,255,31,131,31,57,31,41,31,41,30,41,29,126,31,101,31,101,30,143,31,143,30,225,31,225,30,219,31,165,31,190,31,154,31,154,30,95,31,88,31,173,31,166,31,192,31,155,31,38,31,38,30,198,31,198,30,216,31,179,31,246,31,111,31,111,30,111,29,17,31,173,31,143,31,143,30,143,29,140,31,140,30,140,29,140,28,140,27,106,31,163,31,163,30,229,31,229,30,229,29);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
