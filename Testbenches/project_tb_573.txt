-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 576;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,30,0,61,0,65,0,65,0,228,0,141,0,21,0,250,0,0,0,0,0,227,0,156,0,0,0,49,0,238,0,126,0,0,0,35,0,233,0,191,0,137,0,67,0,165,0,192,0,169,0,75,0,183,0,0,0,252,0,218,0,208,0,38,0,44,0,229,0,136,0,40,0,78,0,0,0,0,0,122,0,162,0,0,0,246,0,44,0,144,0,227,0,244,0,225,0,27,0,0,0,154,0,159,0,52,0,119,0,82,0,0,0,0,0,65,0,88,0,203,0,12,0,0,0,96,0,75,0,0,0,246,0,132,0,250,0,156,0,158,0,138,0,182,0,32,0,243,0,21,0,0,0,0,0,129,0,0,0,0,0,88,0,2,0,63,0,214,0,95,0,152,0,0,0,126,0,255,0,133,0,0,0,24,0,232,0,186,0,122,0,192,0,0,0,12,0,207,0,85,0,80,0,96,0,203,0,56,0,223,0,0,0,5,0,22,0,0,0,80,0,0,0,102,0,0,0,62,0,0,0,140,0,0,0,0,0,0,0,255,0,0,0,81,0,177,0,0,0,0,0,150,0,179,0,215,0,0,0,183,0,170,0,0,0,0,0,170,0,0,0,158,0,78,0,0,0,35,0,247,0,77,0,216,0,111,0,58,0,202,0,122,0,71,0,34,0,36,0,0,0,189,0,39,0,0,0,152,0,243,0,175,0,173,0,157,0,157,0,64,0,134,0,0,0,0,0,89,0,98,0,68,0,155,0,132,0,5,0,54,0,0,0,0,0,48,0,245,0,73,0,222,0,186,0,107,0,138,0,28,0,240,0,0,0,0,0,114,0,0,0,184,0,118,0,100,0,91,0,53,0,236,0,79,0,55,0,209,0,85,0,0,0,0,0,0,0,171,0,232,0,16,0,12,0,80,0,67,0,255,0,111,0,91,0,0,0,121,0,70,0,0,0,213,0,114,0,116,0,244,0,0,0,45,0,0,0,41,0,129,0,99,0,0,0,154,0,161,0,127,0,43,0,73,0,196,0,168,0,108,0,0,0,141,0,0,0,150,0,6,0,127,0,71,0,54,0,62,0,109,0,148,0,0,0,1,0,91,0,117,0,206,0,136,0,129,0,171,0,73,0,208,0,29,0,72,0,0,0,98,0,80,0,75,0,223,0,179,0,199,0,98,0,154,0,0,0,104,0,195,0,61,0,0,0,136,0,80,0,0,0,19,0,178,0,149,0,226,0,52,0,0,0,195,0,0,0,14,0,76,0,199,0,139,0,164,0,0,0,158,0,21,0,0,0,163,0,0,0,160,0,150,0,164,0,218,0,0,0,18,0,99,0,202,0,84,0,45,0,166,0,130,0,178,0,98,0,7,0,197,0,231,0,251,0,235,0,79,0,252,0,4,0,233,0,28,0,151,0,186,0,0,0,48,0,0,0,43,0,0,0,201,0,34,0,69,0,37,0,3,0,0,0,87,0,128,0,16,0,56,0,129,0,0,0,21,0,127,0,219,0,0,0,92,0,186,0,183,0,208,0,0,0,76,0,125,0,88,0,39,0,173,0,173,0,151,0,24,0,0,0,141,0,193,0,71,0,60,0,81,0,167,0,65,0,76,0,0,0,0,0,4,0,0,0,55,0,245,0,0,0,0,0,189,0,157,0,90,0,18,0,90,0,28,0,223,0,71,0,236,0,165,0,74,0,92,0,242,0,117,0,0,0,88,0,51,0,41,0,84,0,239,0,0,0,42,0,34,0,79,0,44,0,236,0,236,0,167,0,182,0,52,0,24,0,225,0,242,0,96,0,254,0,206,0,19,0,55,0,174,0,151,0,107,0,77,0,34,0,247,0,89,0,199,0,199,0,218,0,145,0,67,0,0,0,197,0,0,0,13,0,0,0,0,0,66,0,216,0,149,0,5,0,236,0,133,0,213,0,129,0,50,0,201,0,108,0,2,0,232,0,240,0,67,0,0,0,103,0,0,0,173,0,70,0,0,0,216,0,96,0,247,0,180,0,21,0,79,0,0,0,83,0,105,0,214,0,18,0,136,0,242,0,1,0,220,0,114,0,0,0,39,0,0,0,248,0,201,0,220,0,207,0,108,0,137,0,133,0,0,0,63,0,85,0,0,0,47,0,213,0,0,0,0,0,187,0,36,0,200,0,185,0,0,0,63,0,2,0,131,0,193,0,190,0,223,0,186,0,249,0,0,0,185,0,41,0,132,0,195,0,7,0,0,0,42,0,0,0,65,0,0,0,99,0,87,0,0,0,54,0,0,0,241,0,185,0,2,0,234,0,202,0,210,0,0,0,0,0,126,0,117,0,0,0,153,0,76,0,28,0,87,0,0,0,0,0,235,0,0,0,191,0,182,0,0,0,113,0,66,0,102,0,85,0,0,0,0,0,198,0,0,0,36,0,235,0,0,0,0,0,181,0,143,0,0,0,156,0,176,0,194,0,0,0,208,0,1,0,70,0,105,0,172,0,63,0,0,0,0,0,130,0,66,0,69,0,0,0,33,0,18,0,39,0,151,0,220,0,202,0,93,0,64,0,136,0,122,0,213,0,59,0,0,0,0,0,81,0,0,0);
signal scenario_full  : scenario_type := (0,0,30,31,61,31,65,31,65,31,228,31,141,31,21,31,250,31,250,30,250,29,227,31,156,31,156,30,49,31,238,31,126,31,126,30,35,31,233,31,191,31,137,31,67,31,165,31,192,31,169,31,75,31,183,31,183,30,252,31,218,31,208,31,38,31,44,31,229,31,136,31,40,31,78,31,78,30,78,29,122,31,162,31,162,30,246,31,44,31,144,31,227,31,244,31,225,31,27,31,27,30,154,31,159,31,52,31,119,31,82,31,82,30,82,29,65,31,88,31,203,31,12,31,12,30,96,31,75,31,75,30,246,31,132,31,250,31,156,31,158,31,138,31,182,31,32,31,243,31,21,31,21,30,21,29,129,31,129,30,129,29,88,31,2,31,63,31,214,31,95,31,152,31,152,30,126,31,255,31,133,31,133,30,24,31,232,31,186,31,122,31,192,31,192,30,12,31,207,31,85,31,80,31,96,31,203,31,56,31,223,31,223,30,5,31,22,31,22,30,80,31,80,30,102,31,102,30,62,31,62,30,140,31,140,30,140,29,140,28,255,31,255,30,81,31,177,31,177,30,177,29,150,31,179,31,215,31,215,30,183,31,170,31,170,30,170,29,170,31,170,30,158,31,78,31,78,30,35,31,247,31,77,31,216,31,111,31,58,31,202,31,122,31,71,31,34,31,36,31,36,30,189,31,39,31,39,30,152,31,243,31,175,31,173,31,157,31,157,31,64,31,134,31,134,30,134,29,89,31,98,31,68,31,155,31,132,31,5,31,54,31,54,30,54,29,48,31,245,31,73,31,222,31,186,31,107,31,138,31,28,31,240,31,240,30,240,29,114,31,114,30,184,31,118,31,100,31,91,31,53,31,236,31,79,31,55,31,209,31,85,31,85,30,85,29,85,28,171,31,232,31,16,31,12,31,80,31,67,31,255,31,111,31,91,31,91,30,121,31,70,31,70,30,213,31,114,31,116,31,244,31,244,30,45,31,45,30,41,31,129,31,99,31,99,30,154,31,161,31,127,31,43,31,73,31,196,31,168,31,108,31,108,30,141,31,141,30,150,31,6,31,127,31,71,31,54,31,62,31,109,31,148,31,148,30,1,31,91,31,117,31,206,31,136,31,129,31,171,31,73,31,208,31,29,31,72,31,72,30,98,31,80,31,75,31,223,31,179,31,199,31,98,31,154,31,154,30,104,31,195,31,61,31,61,30,136,31,80,31,80,30,19,31,178,31,149,31,226,31,52,31,52,30,195,31,195,30,14,31,76,31,199,31,139,31,164,31,164,30,158,31,21,31,21,30,163,31,163,30,160,31,150,31,164,31,218,31,218,30,18,31,99,31,202,31,84,31,45,31,166,31,130,31,178,31,98,31,7,31,197,31,231,31,251,31,235,31,79,31,252,31,4,31,233,31,28,31,151,31,186,31,186,30,48,31,48,30,43,31,43,30,201,31,34,31,69,31,37,31,3,31,3,30,87,31,128,31,16,31,56,31,129,31,129,30,21,31,127,31,219,31,219,30,92,31,186,31,183,31,208,31,208,30,76,31,125,31,88,31,39,31,173,31,173,31,151,31,24,31,24,30,141,31,193,31,71,31,60,31,81,31,167,31,65,31,76,31,76,30,76,29,4,31,4,30,55,31,245,31,245,30,245,29,189,31,157,31,90,31,18,31,90,31,28,31,223,31,71,31,236,31,165,31,74,31,92,31,242,31,117,31,117,30,88,31,51,31,41,31,84,31,239,31,239,30,42,31,34,31,79,31,44,31,236,31,236,31,167,31,182,31,52,31,24,31,225,31,242,31,96,31,254,31,206,31,19,31,55,31,174,31,151,31,107,31,77,31,34,31,247,31,89,31,199,31,199,31,218,31,145,31,67,31,67,30,197,31,197,30,13,31,13,30,13,29,66,31,216,31,149,31,5,31,236,31,133,31,213,31,129,31,50,31,201,31,108,31,2,31,232,31,240,31,67,31,67,30,103,31,103,30,173,31,70,31,70,30,216,31,96,31,247,31,180,31,21,31,79,31,79,30,83,31,105,31,214,31,18,31,136,31,242,31,1,31,220,31,114,31,114,30,39,31,39,30,248,31,201,31,220,31,207,31,108,31,137,31,133,31,133,30,63,31,85,31,85,30,47,31,213,31,213,30,213,29,187,31,36,31,200,31,185,31,185,30,63,31,2,31,131,31,193,31,190,31,223,31,186,31,249,31,249,30,185,31,41,31,132,31,195,31,7,31,7,30,42,31,42,30,65,31,65,30,99,31,87,31,87,30,54,31,54,30,241,31,185,31,2,31,234,31,202,31,210,31,210,30,210,29,126,31,117,31,117,30,153,31,76,31,28,31,87,31,87,30,87,29,235,31,235,30,191,31,182,31,182,30,113,31,66,31,102,31,85,31,85,30,85,29,198,31,198,30,36,31,235,31,235,30,235,29,181,31,143,31,143,30,156,31,176,31,194,31,194,30,208,31,1,31,70,31,105,31,172,31,63,31,63,30,63,29,130,31,66,31,69,31,69,30,33,31,18,31,39,31,151,31,220,31,202,31,93,31,64,31,136,31,122,31,213,31,59,31,59,30,59,29,81,31,81,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
