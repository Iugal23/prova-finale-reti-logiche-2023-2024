-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 787;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (158,0,0,0,249,0,211,0,132,0,0,0,55,0,169,0,0,0,0,0,18,0,149,0,52,0,182,0,147,0,87,0,177,0,242,0,78,0,130,0,65,0,133,0,0,0,179,0,162,0,238,0,140,0,0,0,20,0,43,0,17,0,51,0,0,0,33,0,161,0,64,0,119,0,232,0,124,0,211,0,18,0,17,0,0,0,121,0,248,0,101,0,58,0,115,0,252,0,241,0,196,0,0,0,0,0,133,0,144,0,14,0,149,0,91,0,224,0,130,0,182,0,130,0,119,0,249,0,73,0,0,0,118,0,151,0,19,0,202,0,163,0,144,0,144,0,222,0,14,0,140,0,152,0,0,0,143,0,238,0,41,0,192,0,239,0,0,0,128,0,0,0,115,0,98,0,26,0,0,0,0,0,155,0,172,0,0,0,147,0,26,0,133,0,143,0,2,0,167,0,187,0,75,0,135,0,151,0,0,0,0,0,0,0,0,0,0,0,39,0,44,0,240,0,185,0,0,0,255,0,89,0,93,0,254,0,194,0,187,0,206,0,181,0,240,0,42,0,234,0,239,0,99,0,246,0,201,0,40,0,0,0,97,0,156,0,228,0,103,0,234,0,156,0,0,0,92,0,247,0,17,0,0,0,134,0,238,0,242,0,136,0,212,0,135,0,0,0,94,0,0,0,38,0,227,0,0,0,49,0,0,0,7,0,0,0,88,0,10,0,135,0,198,0,76,0,174,0,159,0,0,0,149,0,0,0,205,0,38,0,0,0,147,0,1,0,206,0,68,0,25,0,21,0,69,0,111,0,35,0,137,0,0,0,0,0,68,0,19,0,173,0,9,0,33,0,39,0,226,0,0,0,28,0,5,0,160,0,26,0,0,0,0,0,30,0,216,0,107,0,203,0,8,0,249,0,33,0,40,0,229,0,36,0,51,0,0,0,218,0,232,0,97,0,135,0,222,0,242,0,114,0,197,0,187,0,67,0,50,0,87,0,204,0,213,0,171,0,77,0,111,0,9,0,254,0,78,0,102,0,135,0,245,0,137,0,98,0,99,0,0,0,181,0,186,0,114,0,250,0,25,0,5,0,92,0,121,0,75,0,0,0,143,0,0,0,59,0,205,0,0,0,23,0,37,0,161,0,228,0,51,0,190,0,187,0,147,0,0,0,44,0,226,0,226,0,62,0,136,0,80,0,249,0,0,0,0,0,54,0,99,0,246,0,33,0,93,0,28,0,218,0,40,0,0,0,193,0,0,0,97,0,103,0,219,0,50,0,69,0,154,0,207,0,101,0,188,0,43,0,30,0,181,0,55,0,147,0,101,0,152,0,218,0,192,0,175,0,134,0,55,0,0,0,75,0,50,0,35,0,159,0,42,0,0,0,147,0,165,0,71,0,0,0,26,0,108,0,233,0,0,0,231,0,236,0,135,0,0,0,19,0,0,0,0,0,47,0,0,0,76,0,214,0,178,0,42,0,99,0,99,0,0,0,68,0,155,0,231,0,237,0,17,0,240,0,0,0,43,0,0,0,135,0,94,0,210,0,205,0,0,0,194,0,116,0,180,0,59,0,234,0,254,0,0,0,0,0,215,0,9,0,211,0,3,0,178,0,0,0,153,0,164,0,0,0,228,0,48,0,0,0,196,0,41,0,164,0,132,0,137,0,137,0,120,0,216,0,0,0,131,0,0,0,30,0,66,0,148,0,0,0,0,0,127,0,231,0,91,0,102,0,54,0,119,0,0,0,28,0,182,0,38,0,160,0,101,0,130,0,170,0,0,0,163,0,212,0,0,0,23,0,79,0,127,0,0,0,2,0,0,0,51,0,0,0,124,0,175,0,55,0,98,0,83,0,33,0,35,0,48,0,24,0,161,0,0,0,115,0,61,0,53,0,0,0,165,0,0,0,156,0,0,0,201,0,0,0,0,0,100,0,121,0,166,0,4,0,156,0,28,0,0,0,12,0,90,0,91,0,246,0,138,0,140,0,43,0,0,0,130,0,172,0,15,0,52,0,12,0,0,0,135,0,239,0,102,0,0,0,90,0,119,0,7,0,34,0,150,0,0,0,87,0,196,0,220,0,36,0,94,0,41,0,191,0,73,0,74,0,0,0,10,0,0,0,0,0,230,0,50,0,77,0,70,0,0,0,0,0,0,0,181,0,91,0,27,0,227,0,251,0,193,0,32,0,6,0,42,0,82,0,26,0,172,0,184,0,120,0,69,0,18,0,247,0,60,0,116,0,0,0,133,0,130,0,97,0,143,0,143,0,0,0,219,0,173,0,0,0,245,0,0,0,236,0,153,0,189,0,180,0,32,0,31,0,143,0,130,0,242,0,4,0,91,0,42,0,0,0,80,0,0,0,185,0,94,0,165,0,160,0,106,0,120,0,20,0,66,0,0,0,106,0,102,0,121,0,0,0,22,0,192,0,0,0,213,0,66,0,226,0,34,0,209,0,0,0,224,0,198,0,169,0,82,0,76,0,46,0,50,0,159,0,0,0,171,0,52,0,98,0,198,0,199,0,134,0,130,0,0,0,1,0,247,0,217,0,195,0,92,0,0,0,40,0,0,0,51,0,209,0,0,0,198,0,30,0,28,0,29,0,205,0,224,0,104,0,216,0,189,0,0,0,189,0,0,0,175,0,214,0,36,0,165,0,66,0,195,0,199,0,132,0,131,0,241,0,68,0,161,0,32,0,222,0,239,0,0,0,0,0,0,0,224,0,57,0,148,0,8,0,34,0,14,0,142,0,0,0,66,0,205,0,0,0,101,0,52,0,80,0,14,0,157,0,0,0,255,0,26,0,241,0,0,0,162,0,48,0,20,0,29,0,89,0,79,0,129,0,65,0,125,0,105,0,82,0,76,0,0,0,152,0,0,0,228,0,0,0,51,0,204,0,0,0,153,0,186,0,101,0,231,0,0,0,94,0,31,0,118,0,0,0,53,0,217,0,224,0,38,0,0,0,0,0,118,0,189,0,5,0,46,0,66,0,199,0,127,0,210,0,226,0,92,0,217,0,212,0,0,0,36,0,1,0,137,0,88,0,154,0,202,0,142,0,0,0,47,0,143,0,236,0,179,0,121,0,152,0,0,0,206,0,0,0,4,0,0,0,139,0,40,0,227,0,204,0,36,0,131,0,143,0,213,0,65,0,193,0,38,0,18,0,153,0,21,0,20,0,52,0,86,0,21,0,89,0,0,0,0,0,0,0,87,0,64,0,216,0,73,0,180,0,141,0,9,0,0,0,186,0,203,0,48,0,81,0,76,0,73,0,72,0,0,0,146,0,0,0,90,0,35,0,175,0,142,0,146,0,157,0,178,0,0,0,231,0,0,0,103,0,168,0,221,0,246,0,98,0,205,0,0,0,156,0,89,0,186,0,100,0,0,0,220,0,79,0,157,0,228,0,105,0,133,0,0,0,170,0,0,0,190,0,120,0,243,0,74,0,2,0,23,0,20,0,103,0,0,0,0,0,169,0,221,0,54,0,236,0,204,0,146,0,8,0,141,0,191,0,229,0,240,0);
signal scenario_full  : scenario_type := (158,31,158,30,249,31,211,31,132,31,132,30,55,31,169,31,169,30,169,29,18,31,149,31,52,31,182,31,147,31,87,31,177,31,242,31,78,31,130,31,65,31,133,31,133,30,179,31,162,31,238,31,140,31,140,30,20,31,43,31,17,31,51,31,51,30,33,31,161,31,64,31,119,31,232,31,124,31,211,31,18,31,17,31,17,30,121,31,248,31,101,31,58,31,115,31,252,31,241,31,196,31,196,30,196,29,133,31,144,31,14,31,149,31,91,31,224,31,130,31,182,31,130,31,119,31,249,31,73,31,73,30,118,31,151,31,19,31,202,31,163,31,144,31,144,31,222,31,14,31,140,31,152,31,152,30,143,31,238,31,41,31,192,31,239,31,239,30,128,31,128,30,115,31,98,31,26,31,26,30,26,29,155,31,172,31,172,30,147,31,26,31,133,31,143,31,2,31,167,31,187,31,75,31,135,31,151,31,151,30,151,29,151,28,151,27,151,26,39,31,44,31,240,31,185,31,185,30,255,31,89,31,93,31,254,31,194,31,187,31,206,31,181,31,240,31,42,31,234,31,239,31,99,31,246,31,201,31,40,31,40,30,97,31,156,31,228,31,103,31,234,31,156,31,156,30,92,31,247,31,17,31,17,30,134,31,238,31,242,31,136,31,212,31,135,31,135,30,94,31,94,30,38,31,227,31,227,30,49,31,49,30,7,31,7,30,88,31,10,31,135,31,198,31,76,31,174,31,159,31,159,30,149,31,149,30,205,31,38,31,38,30,147,31,1,31,206,31,68,31,25,31,21,31,69,31,111,31,35,31,137,31,137,30,137,29,68,31,19,31,173,31,9,31,33,31,39,31,226,31,226,30,28,31,5,31,160,31,26,31,26,30,26,29,30,31,216,31,107,31,203,31,8,31,249,31,33,31,40,31,229,31,36,31,51,31,51,30,218,31,232,31,97,31,135,31,222,31,242,31,114,31,197,31,187,31,67,31,50,31,87,31,204,31,213,31,171,31,77,31,111,31,9,31,254,31,78,31,102,31,135,31,245,31,137,31,98,31,99,31,99,30,181,31,186,31,114,31,250,31,25,31,5,31,92,31,121,31,75,31,75,30,143,31,143,30,59,31,205,31,205,30,23,31,37,31,161,31,228,31,51,31,190,31,187,31,147,31,147,30,44,31,226,31,226,31,62,31,136,31,80,31,249,31,249,30,249,29,54,31,99,31,246,31,33,31,93,31,28,31,218,31,40,31,40,30,193,31,193,30,97,31,103,31,219,31,50,31,69,31,154,31,207,31,101,31,188,31,43,31,30,31,181,31,55,31,147,31,101,31,152,31,218,31,192,31,175,31,134,31,55,31,55,30,75,31,50,31,35,31,159,31,42,31,42,30,147,31,165,31,71,31,71,30,26,31,108,31,233,31,233,30,231,31,236,31,135,31,135,30,19,31,19,30,19,29,47,31,47,30,76,31,214,31,178,31,42,31,99,31,99,31,99,30,68,31,155,31,231,31,237,31,17,31,240,31,240,30,43,31,43,30,135,31,94,31,210,31,205,31,205,30,194,31,116,31,180,31,59,31,234,31,254,31,254,30,254,29,215,31,9,31,211,31,3,31,178,31,178,30,153,31,164,31,164,30,228,31,48,31,48,30,196,31,41,31,164,31,132,31,137,31,137,31,120,31,216,31,216,30,131,31,131,30,30,31,66,31,148,31,148,30,148,29,127,31,231,31,91,31,102,31,54,31,119,31,119,30,28,31,182,31,38,31,160,31,101,31,130,31,170,31,170,30,163,31,212,31,212,30,23,31,79,31,127,31,127,30,2,31,2,30,51,31,51,30,124,31,175,31,55,31,98,31,83,31,33,31,35,31,48,31,24,31,161,31,161,30,115,31,61,31,53,31,53,30,165,31,165,30,156,31,156,30,201,31,201,30,201,29,100,31,121,31,166,31,4,31,156,31,28,31,28,30,12,31,90,31,91,31,246,31,138,31,140,31,43,31,43,30,130,31,172,31,15,31,52,31,12,31,12,30,135,31,239,31,102,31,102,30,90,31,119,31,7,31,34,31,150,31,150,30,87,31,196,31,220,31,36,31,94,31,41,31,191,31,73,31,74,31,74,30,10,31,10,30,10,29,230,31,50,31,77,31,70,31,70,30,70,29,70,28,181,31,91,31,27,31,227,31,251,31,193,31,32,31,6,31,42,31,82,31,26,31,172,31,184,31,120,31,69,31,18,31,247,31,60,31,116,31,116,30,133,31,130,31,97,31,143,31,143,31,143,30,219,31,173,31,173,30,245,31,245,30,236,31,153,31,189,31,180,31,32,31,31,31,143,31,130,31,242,31,4,31,91,31,42,31,42,30,80,31,80,30,185,31,94,31,165,31,160,31,106,31,120,31,20,31,66,31,66,30,106,31,102,31,121,31,121,30,22,31,192,31,192,30,213,31,66,31,226,31,34,31,209,31,209,30,224,31,198,31,169,31,82,31,76,31,46,31,50,31,159,31,159,30,171,31,52,31,98,31,198,31,199,31,134,31,130,31,130,30,1,31,247,31,217,31,195,31,92,31,92,30,40,31,40,30,51,31,209,31,209,30,198,31,30,31,28,31,29,31,205,31,224,31,104,31,216,31,189,31,189,30,189,31,189,30,175,31,214,31,36,31,165,31,66,31,195,31,199,31,132,31,131,31,241,31,68,31,161,31,32,31,222,31,239,31,239,30,239,29,239,28,224,31,57,31,148,31,8,31,34,31,14,31,142,31,142,30,66,31,205,31,205,30,101,31,52,31,80,31,14,31,157,31,157,30,255,31,26,31,241,31,241,30,162,31,48,31,20,31,29,31,89,31,79,31,129,31,65,31,125,31,105,31,82,31,76,31,76,30,152,31,152,30,228,31,228,30,51,31,204,31,204,30,153,31,186,31,101,31,231,31,231,30,94,31,31,31,118,31,118,30,53,31,217,31,224,31,38,31,38,30,38,29,118,31,189,31,5,31,46,31,66,31,199,31,127,31,210,31,226,31,92,31,217,31,212,31,212,30,36,31,1,31,137,31,88,31,154,31,202,31,142,31,142,30,47,31,143,31,236,31,179,31,121,31,152,31,152,30,206,31,206,30,4,31,4,30,139,31,40,31,227,31,204,31,36,31,131,31,143,31,213,31,65,31,193,31,38,31,18,31,153,31,21,31,20,31,52,31,86,31,21,31,89,31,89,30,89,29,89,28,87,31,64,31,216,31,73,31,180,31,141,31,9,31,9,30,186,31,203,31,48,31,81,31,76,31,73,31,72,31,72,30,146,31,146,30,90,31,35,31,175,31,142,31,146,31,157,31,178,31,178,30,231,31,231,30,103,31,168,31,221,31,246,31,98,31,205,31,205,30,156,31,89,31,186,31,100,31,100,30,220,31,79,31,157,31,228,31,105,31,133,31,133,30,170,31,170,30,190,31,120,31,243,31,74,31,2,31,23,31,20,31,103,31,103,30,103,29,169,31,221,31,54,31,236,31,204,31,146,31,8,31,141,31,191,31,229,31,240,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
