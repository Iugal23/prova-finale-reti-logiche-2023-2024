-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 1015;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (16,0,35,0,112,0,171,0,0,0,187,0,0,0,177,0,137,0,29,0,79,0,0,0,13,0,49,0,159,0,0,0,170,0,93,0,230,0,0,0,0,0,162,0,114,0,0,0,181,0,172,0,135,0,0,0,37,0,169,0,97,0,0,0,36,0,29,0,0,0,83,0,0,0,159,0,0,0,72,0,0,0,0,0,0,0,9,0,0,0,81,0,194,0,219,0,63,0,224,0,221,0,0,0,207,0,32,0,203,0,0,0,212,0,232,0,99,0,0,0,0,0,82,0,190,0,36,0,0,0,31,0,0,0,243,0,30,0,51,0,0,0,94,0,133,0,74,0,191,0,193,0,116,0,100,0,0,0,14,0,0,0,182,0,77,0,1,0,0,0,49,0,147,0,171,0,10,0,184,0,231,0,165,0,48,0,204,0,178,0,89,0,0,0,46,0,45,0,130,0,139,0,105,0,0,0,16,0,198,0,28,0,128,0,23,0,136,0,115,0,66,0,7,0,204,0,49,0,159,0,71,0,143,0,0,0,174,0,48,0,0,0,56,0,0,0,185,0,127,0,161,0,182,0,49,0,165,0,0,0,75,0,226,0,254,0,28,0,157,0,187,0,203,0,205,0,115,0,31,0,94,0,164,0,0,0,157,0,114,0,41,0,128,0,37,0,169,0,0,0,220,0,138,0,136,0,127,0,108,0,0,0,175,0,0,0,236,0,191,0,224,0,0,0,32,0,0,0,137,0,1,0,146,0,17,0,0,0,81,0,131,0,23,0,0,0,149,0,184,0,224,0,113,0,0,0,35,0,72,0,0,0,75,0,0,0,242,0,237,0,0,0,243,0,212,0,13,0,186,0,215,0,15,0,137,0,177,0,66,0,0,0,100,0,65,0,209,0,125,0,114,0,212,0,17,0,69,0,164,0,122,0,0,0,96,0,94,0,132,0,251,0,0,0,178,0,42,0,0,0,232,0,14,0,0,0,231,0,198,0,0,0,242,0,0,0,138,0,154,0,105,0,0,0,97,0,182,0,228,0,140,0,7,0,16,0,12,0,0,0,14,0,0,0,123,0,200,0,3,0,211,0,240,0,0,0,232,0,0,0,92,0,0,0,148,0,0,0,140,0,164,0,60,0,37,0,249,0,195,0,218,0,141,0,110,0,199,0,120,0,98,0,161,0,53,0,199,0,63,0,181,0,0,0,60,0,43,0,183,0,0,0,231,0,166,0,127,0,0,0,120,0,51,0,74,0,14,0,21,0,67,0,141,0,124,0,0,0,0,0,0,0,114,0,210,0,137,0,26,0,116,0,186,0,173,0,55,0,156,0,0,0,3,0,189,0,42,0,245,0,20,0,48,0,0,0,169,0,111,0,227,0,243,0,134,0,111,0,85,0,39,0,103,0,0,0,154,0,252,0,58,0,255,0,171,0,165,0,0,0,173,0,255,0,0,0,27,0,201,0,122,0,0,0,89,0,0,0,87,0,37,0,17,0,0,0,0,0,0,0,56,0,128,0,0,0,218,0,206,0,135,0,25,0,0,0,205,0,240,0,195,0,12,0,110,0,233,0,115,0,0,0,0,0,213,0,143,0,117,0,202,0,189,0,255,0,218,0,81,0,6,0,0,0,102,0,34,0,16,0,87,0,200,0,46,0,89,0,98,0,217,0,30,0,0,0,0,0,229,0,0,0,245,0,0,0,0,0,60,0,21,0,188,0,144,0,189,0,117,0,47,0,0,0,128,0,0,0,0,0,222,0,0,0,91,0,236,0,32,0,83,0,0,0,111,0,164,0,26,0,4,0,0,0,250,0,174,0,0,0,184,0,251,0,204,0,0,0,14,0,40,0,2,0,160,0,53,0,159,0,106,0,204,0,107,0,172,0,0,0,4,0,61,0,208,0,91,0,64,0,96,0,106,0,132,0,69,0,0,0,168,0,37,0,128,0,27,0,104,0,4,0,0,0,0,0,0,0,147,0,150,0,109,0,0,0,152,0,244,0,0,0,0,0,193,0,241,0,186,0,200,0,124,0,168,0,230,0,0,0,89,0,0,0,80,0,34,0,243,0,0,0,186,0,143,0,157,0,22,0,222,0,94,0,27,0,70,0,53,0,194,0,31,0,4,0,6,0,166,0,0,0,120,0,175,0,160,0,202,0,93,0,0,0,151,0,72,0,105,0,1,0,174,0,145,0,1,0,67,0,224,0,10,0,0,0,72,0,124,0,67,0,171,0,186,0,0,0,73,0,66,0,98,0,155,0,0,0,105,0,115,0,211,0,97,0,78,0,0,0,15,0,32,0,125,0,186,0,67,0,190,0,33,0,144,0,61,0,233,0,150,0,197,0,12,0,0,0,94,0,190,0,250,0,0,0,129,0,97,0,38,0,62,0,1,0,64,0,0,0,156,0,176,0,17,0,147,0,144,0,157,0,100,0,23,0,0,0,154,0,0,0,75,0,3,0,187,0,9,0,32,0,95,0,114,0,95,0,0,0,251,0,0,0,148,0,84,0,214,0,48,0,53,0,229,0,14,0,232,0,200,0,198,0,174,0,23,0,25,0,156,0,67,0,241,0,0,0,58,0,10,0,59,0,158,0,31,0,92,0,182,0,200,0,152,0,0,0,125,0,131,0,19,0,44,0,10,0,69,0,99,0,0,0,156,0,244,0,77,0,0,0,191,0,146,0,0,0,189,0,38,0,25,0,149,0,20,0,60,0,0,0,0,0,232,0,0,0,251,0,0,0,0,0,218,0,117,0,241,0,124,0,89,0,0,0,177,0,182,0,5,0,215,0,110,0,38,0,0,0,119,0,125,0,0,0,119,0,65,0,131,0,131,0,0,0,0,0,197,0,70,0,160,0,143,0,165,0,82,0,192,0,0,0,0,0,66,0,17,0,49,0,0,0,178,0,243,0,7,0,112,0,142,0,81,0,0,0,240,0,135,0,41,0,61,0,235,0,0,0,133,0,0,0,219,0,88,0,248,0,6,0,120,0,213,0,78,0,86,0,225,0,0,0,50,0,0,0,228,0,57,0,139,0,21,0,223,0,66,0,189,0,216,0,0,0,0,0,2,0,0,0,187,0,73,0,195,0,78,0,0,0,30,0,0,0,0,0,161,0,145,0,81,0,72,0,169,0,163,0,32,0,61,0,187,0,0,0,166,0,175,0,146,0,10,0,195,0,248,0,105,0,124,0,9,0,218,0,247,0,23,0,20,0,56,0,234,0,84,0,187,0,0,0,27,0,70,0,0,0,156,0,0,0,86,0,204,0,0,0,252,0,181,0,14,0,69,0,0,0,117,0,63,0,0,0,4,0,247,0,231,0,165,0,131,0,0,0,76,0,93,0,148,0,58,0,0,0,195,0,112,0,237,0,0,0,48,0,240,0,233,0,9,0,106,0,49,0,109,0,35,0,199,0,21,0,161,0,0,0,3,0,0,0,0,0,130,0,24,0,10,0,106,0,1,0,138,0,75,0,10,0,168,0,173,0,214,0,58,0,162,0,244,0,0,0,199,0,75,0,173,0,0,0,64,0,185,0,150,0,111,0,138,0,156,0,104,0,193,0,132,0,0,0,196,0,217,0,0,0,139,0,0,0,225,0,11,0,0,0,86,0,0,0,102,0,12,0,0,0,63,0,203,0,6,0,112,0,207,0,6,0,112,0,61,0,170,0,0,0,147,0,103,0,46,0,16,0,181,0,219,0,145,0,0,0,72,0,17,0,0,0,195,0,221,0,99,0,159,0,0,0,69,0,52,0,217,0,118,0,0,0,132,0,158,0,0,0,139,0,226,0,166,0,48,0,0,0,0,0,219,0,200,0,214,0,229,0,224,0,53,0,0,0,59,0,170,0,43,0,30,0,182,0,62,0,233,0,0,0,252,0,153,0,44,0,12,0,221,0,147,0,54,0,229,0,188,0,54,0,7,0,153,0,227,0,0,0,50,0,0,0,13,0,0,0,0,0,198,0,0,0,55,0,0,0,136,0,47,0,22,0,37,0,125,0,125,0,185,0,30,0,89,0,0,0,127,0,245,0,191,0,206,0,59,0,233,0,24,0,28,0,233,0,86,0,115,0,237,0,229,0,59,0,153,0,235,0,121,0,106,0,242,0,0,0,223,0,25,0,32,0,13,0,0,0,45,0,96,0,232,0,238,0,189,0,0,0,0,0,212,0,147,0,181,0,212,0,83,0,164,0,232,0,65,0,0,0,167,0,30,0,45,0,0,0,215,0,124,0,148,0,0,0,149,0,0,0,0,0,193,0,153,0,148,0,0,0,74,0,35,0,106,0,35,0,160,0,0,0,52,0,0,0,31,0,0,0,94,0,2,0,214,0,151,0,0,0,206,0,132,0,0,0,134,0,122,0,44,0,245,0,180,0,202,0,0,0,41,0,136,0,186,0,89,0,0,0,143,0,114,0,50,0,32,0,0,0,0,0,160,0,219,0,0,0,0,0,220,0,66,0,0,0,0,0,48,0,94,0,92,0,121,0,60,0,126,0,0,0,105,0,0,0,4,0,136,0,71,0,132,0,139,0,66,0,207,0,32,0);
signal scenario_full  : scenario_type := (16,31,35,31,112,31,171,31,171,30,187,31,187,30,177,31,137,31,29,31,79,31,79,30,13,31,49,31,159,31,159,30,170,31,93,31,230,31,230,30,230,29,162,31,114,31,114,30,181,31,172,31,135,31,135,30,37,31,169,31,97,31,97,30,36,31,29,31,29,30,83,31,83,30,159,31,159,30,72,31,72,30,72,29,72,28,9,31,9,30,81,31,194,31,219,31,63,31,224,31,221,31,221,30,207,31,32,31,203,31,203,30,212,31,232,31,99,31,99,30,99,29,82,31,190,31,36,31,36,30,31,31,31,30,243,31,30,31,51,31,51,30,94,31,133,31,74,31,191,31,193,31,116,31,100,31,100,30,14,31,14,30,182,31,77,31,1,31,1,30,49,31,147,31,171,31,10,31,184,31,231,31,165,31,48,31,204,31,178,31,89,31,89,30,46,31,45,31,130,31,139,31,105,31,105,30,16,31,198,31,28,31,128,31,23,31,136,31,115,31,66,31,7,31,204,31,49,31,159,31,71,31,143,31,143,30,174,31,48,31,48,30,56,31,56,30,185,31,127,31,161,31,182,31,49,31,165,31,165,30,75,31,226,31,254,31,28,31,157,31,187,31,203,31,205,31,115,31,31,31,94,31,164,31,164,30,157,31,114,31,41,31,128,31,37,31,169,31,169,30,220,31,138,31,136,31,127,31,108,31,108,30,175,31,175,30,236,31,191,31,224,31,224,30,32,31,32,30,137,31,1,31,146,31,17,31,17,30,81,31,131,31,23,31,23,30,149,31,184,31,224,31,113,31,113,30,35,31,72,31,72,30,75,31,75,30,242,31,237,31,237,30,243,31,212,31,13,31,186,31,215,31,15,31,137,31,177,31,66,31,66,30,100,31,65,31,209,31,125,31,114,31,212,31,17,31,69,31,164,31,122,31,122,30,96,31,94,31,132,31,251,31,251,30,178,31,42,31,42,30,232,31,14,31,14,30,231,31,198,31,198,30,242,31,242,30,138,31,154,31,105,31,105,30,97,31,182,31,228,31,140,31,7,31,16,31,12,31,12,30,14,31,14,30,123,31,200,31,3,31,211,31,240,31,240,30,232,31,232,30,92,31,92,30,148,31,148,30,140,31,164,31,60,31,37,31,249,31,195,31,218,31,141,31,110,31,199,31,120,31,98,31,161,31,53,31,199,31,63,31,181,31,181,30,60,31,43,31,183,31,183,30,231,31,166,31,127,31,127,30,120,31,51,31,74,31,14,31,21,31,67,31,141,31,124,31,124,30,124,29,124,28,114,31,210,31,137,31,26,31,116,31,186,31,173,31,55,31,156,31,156,30,3,31,189,31,42,31,245,31,20,31,48,31,48,30,169,31,111,31,227,31,243,31,134,31,111,31,85,31,39,31,103,31,103,30,154,31,252,31,58,31,255,31,171,31,165,31,165,30,173,31,255,31,255,30,27,31,201,31,122,31,122,30,89,31,89,30,87,31,37,31,17,31,17,30,17,29,17,28,56,31,128,31,128,30,218,31,206,31,135,31,25,31,25,30,205,31,240,31,195,31,12,31,110,31,233,31,115,31,115,30,115,29,213,31,143,31,117,31,202,31,189,31,255,31,218,31,81,31,6,31,6,30,102,31,34,31,16,31,87,31,200,31,46,31,89,31,98,31,217,31,30,31,30,30,30,29,229,31,229,30,245,31,245,30,245,29,60,31,21,31,188,31,144,31,189,31,117,31,47,31,47,30,128,31,128,30,128,29,222,31,222,30,91,31,236,31,32,31,83,31,83,30,111,31,164,31,26,31,4,31,4,30,250,31,174,31,174,30,184,31,251,31,204,31,204,30,14,31,40,31,2,31,160,31,53,31,159,31,106,31,204,31,107,31,172,31,172,30,4,31,61,31,208,31,91,31,64,31,96,31,106,31,132,31,69,31,69,30,168,31,37,31,128,31,27,31,104,31,4,31,4,30,4,29,4,28,147,31,150,31,109,31,109,30,152,31,244,31,244,30,244,29,193,31,241,31,186,31,200,31,124,31,168,31,230,31,230,30,89,31,89,30,80,31,34,31,243,31,243,30,186,31,143,31,157,31,22,31,222,31,94,31,27,31,70,31,53,31,194,31,31,31,4,31,6,31,166,31,166,30,120,31,175,31,160,31,202,31,93,31,93,30,151,31,72,31,105,31,1,31,174,31,145,31,1,31,67,31,224,31,10,31,10,30,72,31,124,31,67,31,171,31,186,31,186,30,73,31,66,31,98,31,155,31,155,30,105,31,115,31,211,31,97,31,78,31,78,30,15,31,32,31,125,31,186,31,67,31,190,31,33,31,144,31,61,31,233,31,150,31,197,31,12,31,12,30,94,31,190,31,250,31,250,30,129,31,97,31,38,31,62,31,1,31,64,31,64,30,156,31,176,31,17,31,147,31,144,31,157,31,100,31,23,31,23,30,154,31,154,30,75,31,3,31,187,31,9,31,32,31,95,31,114,31,95,31,95,30,251,31,251,30,148,31,84,31,214,31,48,31,53,31,229,31,14,31,232,31,200,31,198,31,174,31,23,31,25,31,156,31,67,31,241,31,241,30,58,31,10,31,59,31,158,31,31,31,92,31,182,31,200,31,152,31,152,30,125,31,131,31,19,31,44,31,10,31,69,31,99,31,99,30,156,31,244,31,77,31,77,30,191,31,146,31,146,30,189,31,38,31,25,31,149,31,20,31,60,31,60,30,60,29,232,31,232,30,251,31,251,30,251,29,218,31,117,31,241,31,124,31,89,31,89,30,177,31,182,31,5,31,215,31,110,31,38,31,38,30,119,31,125,31,125,30,119,31,65,31,131,31,131,31,131,30,131,29,197,31,70,31,160,31,143,31,165,31,82,31,192,31,192,30,192,29,66,31,17,31,49,31,49,30,178,31,243,31,7,31,112,31,142,31,81,31,81,30,240,31,135,31,41,31,61,31,235,31,235,30,133,31,133,30,219,31,88,31,248,31,6,31,120,31,213,31,78,31,86,31,225,31,225,30,50,31,50,30,228,31,57,31,139,31,21,31,223,31,66,31,189,31,216,31,216,30,216,29,2,31,2,30,187,31,73,31,195,31,78,31,78,30,30,31,30,30,30,29,161,31,145,31,81,31,72,31,169,31,163,31,32,31,61,31,187,31,187,30,166,31,175,31,146,31,10,31,195,31,248,31,105,31,124,31,9,31,218,31,247,31,23,31,20,31,56,31,234,31,84,31,187,31,187,30,27,31,70,31,70,30,156,31,156,30,86,31,204,31,204,30,252,31,181,31,14,31,69,31,69,30,117,31,63,31,63,30,4,31,247,31,231,31,165,31,131,31,131,30,76,31,93,31,148,31,58,31,58,30,195,31,112,31,237,31,237,30,48,31,240,31,233,31,9,31,106,31,49,31,109,31,35,31,199,31,21,31,161,31,161,30,3,31,3,30,3,29,130,31,24,31,10,31,106,31,1,31,138,31,75,31,10,31,168,31,173,31,214,31,58,31,162,31,244,31,244,30,199,31,75,31,173,31,173,30,64,31,185,31,150,31,111,31,138,31,156,31,104,31,193,31,132,31,132,30,196,31,217,31,217,30,139,31,139,30,225,31,11,31,11,30,86,31,86,30,102,31,12,31,12,30,63,31,203,31,6,31,112,31,207,31,6,31,112,31,61,31,170,31,170,30,147,31,103,31,46,31,16,31,181,31,219,31,145,31,145,30,72,31,17,31,17,30,195,31,221,31,99,31,159,31,159,30,69,31,52,31,217,31,118,31,118,30,132,31,158,31,158,30,139,31,226,31,166,31,48,31,48,30,48,29,219,31,200,31,214,31,229,31,224,31,53,31,53,30,59,31,170,31,43,31,30,31,182,31,62,31,233,31,233,30,252,31,153,31,44,31,12,31,221,31,147,31,54,31,229,31,188,31,54,31,7,31,153,31,227,31,227,30,50,31,50,30,13,31,13,30,13,29,198,31,198,30,55,31,55,30,136,31,47,31,22,31,37,31,125,31,125,31,185,31,30,31,89,31,89,30,127,31,245,31,191,31,206,31,59,31,233,31,24,31,28,31,233,31,86,31,115,31,237,31,229,31,59,31,153,31,235,31,121,31,106,31,242,31,242,30,223,31,25,31,32,31,13,31,13,30,45,31,96,31,232,31,238,31,189,31,189,30,189,29,212,31,147,31,181,31,212,31,83,31,164,31,232,31,65,31,65,30,167,31,30,31,45,31,45,30,215,31,124,31,148,31,148,30,149,31,149,30,149,29,193,31,153,31,148,31,148,30,74,31,35,31,106,31,35,31,160,31,160,30,52,31,52,30,31,31,31,30,94,31,2,31,214,31,151,31,151,30,206,31,132,31,132,30,134,31,122,31,44,31,245,31,180,31,202,31,202,30,41,31,136,31,186,31,89,31,89,30,143,31,114,31,50,31,32,31,32,30,32,29,160,31,219,31,219,30,219,29,220,31,66,31,66,30,66,29,48,31,94,31,92,31,121,31,60,31,126,31,126,30,105,31,105,30,4,31,136,31,71,31,132,31,139,31,66,31,207,31,32,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
