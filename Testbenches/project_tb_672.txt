-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 910;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (158,0,97,0,179,0,0,0,162,0,81,0,33,0,142,0,240,0,118,0,218,0,185,0,170,0,141,0,107,0,127,0,0,0,22,0,132,0,146,0,175,0,84,0,0,0,233,0,34,0,123,0,26,0,100,0,30,0,226,0,0,0,21,0,0,0,158,0,207,0,26,0,246,0,181,0,128,0,247,0,0,0,119,0,200,0,0,0,0,0,0,0,220,0,0,0,0,0,231,0,18,0,0,0,91,0,2,0,0,0,116,0,0,0,0,0,0,0,128,0,88,0,0,0,0,0,121,0,177,0,3,0,238,0,0,0,221,0,239,0,0,0,204,0,0,0,160,0,0,0,100,0,253,0,0,0,60,0,38,0,84,0,0,0,12,0,245,0,0,0,20,0,97,0,76,0,161,0,86,0,104,0,162,0,0,0,133,0,34,0,64,0,33,0,97,0,0,0,201,0,74,0,91,0,194,0,0,0,195,0,0,0,189,0,147,0,0,0,128,0,177,0,27,0,146,0,0,0,0,0,237,0,60,0,63,0,49,0,173,0,13,0,0,0,209,0,26,0,65,0,1,0,0,0,12,0,6,0,0,0,0,0,195,0,83,0,0,0,0,0,229,0,8,0,0,0,0,0,249,0,242,0,0,0,245,0,0,0,101,0,59,0,65,0,197,0,226,0,0,0,104,0,211,0,63,0,80,0,0,0,192,0,45,0,85,0,133,0,94,0,51,0,69,0,0,0,135,0,92,0,198,0,32,0,98,0,0,0,128,0,0,0,8,0,73,0,1,0,134,0,55,0,42,0,205,0,0,0,0,0,0,0,140,0,0,0,0,0,122,0,120,0,248,0,84,0,135,0,160,0,224,0,161,0,29,0,25,0,0,0,125,0,0,0,169,0,162,0,133,0,134,0,0,0,0,0,241,0,0,0,183,0,0,0,85,0,0,0,123,0,10,0,73,0,59,0,0,0,173,0,224,0,15,0,64,0,0,0,0,0,152,0,44,0,224,0,76,0,29,0,0,0,107,0,32,0,0,0,77,0,147,0,254,0,0,0,28,0,0,0,183,0,216,0,149,0,174,0,185,0,0,0,122,0,143,0,0,0,0,0,0,0,5,0,0,0,23,0,0,0,141,0,226,0,233,0,183,0,237,0,94,0,21,0,0,0,58,0,130,0,164,0,212,0,22,0,211,0,0,0,0,0,179,0,65,0,43,0,0,0,80,0,250,0,142,0,180,0,0,0,0,0,96,0,91,0,227,0,40,0,35,0,29,0,0,0,24,0,40,0,16,0,0,0,248,0,236,0,208,0,107,0,44,0,46,0,147,0,185,0,200,0,102,0,31,0,129,0,212,0,65,0,53,0,0,0,0,0,67,0,250,0,154,0,203,0,220,0,212,0,53,0,0,0,0,0,24,0,159,0,0,0,182,0,134,0,54,0,0,0,130,0,0,0,32,0,0,0,0,0,3,0,251,0,193,0,39,0,198,0,119,0,39,0,0,0,0,0,7,0,75,0,159,0,191,0,21,0,0,0,97,0,55,0,0,0,0,0,85,0,97,0,21,0,47,0,115,0,45,0,219,0,0,0,202,0,65,0,0,0,159,0,30,0,159,0,8,0,58,0,193,0,211,0,183,0,0,0,0,0,0,0,170,0,72,0,15,0,0,0,117,0,110,0,22,0,82,0,140,0,0,0,61,0,196,0,193,0,65,0,232,0,118,0,9,0,242,0,246,0,187,0,0,0,69,0,94,0,236,0,239,0,111,0,144,0,0,0,0,0,199,0,128,0,0,0,252,0,0,0,0,0,0,0,175,0,0,0,0,0,0,0,0,0,231,0,7,0,162,0,0,0,121,0,159,0,102,0,2,0,12,0,205,0,212,0,15,0,0,0,0,0,203,0,227,0,91,0,94,0,0,0,156,0,0,0,166,0,186,0,116,0,1,0,115,0,179,0,44,0,246,0,196,0,132,0,0,0,218,0,0,0,25,0,60,0,0,0,77,0,63,0,47,0,241,0,100,0,31,0,251,0,148,0,161,0,195,0,68,0,0,0,0,0,0,0,225,0,0,0,41,0,184,0,255,0,203,0,213,0,0,0,168,0,145,0,136,0,129,0,62,0,0,0,0,0,51,0,176,0,0,0,0,0,239,0,223,0,33,0,147,0,0,0,0,0,13,0,147,0,0,0,85,0,170,0,226,0,45,0,52,0,30,0,145,0,0,0,0,0,219,0,57,0,0,0,67,0,250,0,63,0,0,0,0,0,0,0,34,0,0,0,0,0,189,0,0,0,128,0,98,0,104,0,0,0,43,0,40,0,10,0,0,0,0,0,123,0,240,0,91,0,5,0,93,0,0,0,86,0,0,0,230,0,232,0,0,0,0,0,0,0,206,0,9,0,35,0,61,0,104,0,133,0,163,0,166,0,123,0,6,0,232,0,163,0,0,0,61,0,191,0,0,0,210,0,0,0,31,0,0,0,0,0,100,0,148,0,95,0,152,0,0,0,191,0,167,0,173,0,28,0,242,0,158,0,250,0,145,0,157,0,0,0,126,0,41,0,122,0,231,0,0,0,12,0,135,0,156,0,36,0,0,0,149,0,168,0,0,0,0,0,176,0,18,0,0,0,177,0,63,0,0,0,20,0,231,0,166,0,111,0,0,0,221,0,150,0,0,0,55,0,245,0,220,0,0,0,0,0,0,0,1,0,245,0,0,0,196,0,75,0,164,0,84,0,57,0,205,0,68,0,102,0,59,0,155,0,60,0,230,0,0,0,35,0,89,0,20,0,237,0,0,0,40,0,219,0,0,0,41,0,0,0,203,0,139,0,20,0,161,0,117,0,0,0,217,0,218,0,0,0,10,0,219,0,156,0,248,0,0,0,48,0,83,0,199,0,0,0,85,0,224,0,0,0,72,0,44,0,95,0,180,0,66,0,38,0,223,0,0,0,103,0,0,0,48,0,236,0,103,0,92,0,99,0,157,0,8,0,0,0,208,0,0,0,0,0,65,0,89,0,38,0,152,0,204,0,147,0,51,0,126,0,63,0,0,0,140,0,95,0,151,0,242,0,216,0,0,0,34,0,209,0,49,0,211,0,172,0,168,0,47,0,56,0,144,0,0,0,0,0,0,0,194,0,188,0,135,0,0,0,61,0,57,0,149,0,59,0,77,0,146,0,66,0,235,0,187,0,255,0,173,0,192,0,0,0,37,0,128,0,157,0,183,0,204,0,245,0,119,0,66,0,43,0,25,0,156,0,193,0,6,0,210,0,50,0,159,0,0,0,235,0,80,0,253,0,190,0,0,0,153,0,163,0,0,0,193,0,167,0,0,0,132,0,12,0,254,0,240,0,254,0,190,0,132,0,180,0,165,0,101,0,19,0,201,0,227,0,144,0,92,0,6,0,106,0,244,0,0,0,0,0,11,0,143,0,0,0,173,0,214,0,37,0,145,0,143,0,185,0,0,0,200,0,115,0,0,0,134,0,235,0,122,0,97,0,122,0,233,0,0,0,182,0,177,0,182,0,240,0,232,0,0,0,142,0,0,0,245,0,63,0,175,0,33,0,209,0,10,0,0,0,0,0,0,0,123,0,66,0,83,0,180,0,70,0,34,0,84,0,0,0,23,0,208,0,9,0,0,0,0,0,87,0,241,0,35,0,179,0,7,0,4,0,0,0,0,0,221,0,129,0,0,0,0,0,122,0,0,0,199,0,179,0,48,0,66,0,225,0,0,0,0,0,231,0,222,0,84,0,0,0,2,0,1,0,191,0,0,0,206,0,202,0,121,0,36,0,0,0,90,0,0,0,110,0,35,0,0,0,82,0,121,0,82,0,240,0,67,0,176,0,0,0,0,0,186,0,0,0,233,0,175,0,204,0,0,0,117,0,205,0,86,0,153,0,211,0,0,0,140,0,100,0,0,0,172,0,97,0,117,0,0,0,70,0,154,0,210,0,241,0,232,0,241,0,19,0,0,0,176,0,233,0,137,0,229,0,239,0,105,0,204,0,248,0,166,0,137,0,76,0,157,0,144,0,0,0,0,0,12,0,159,0,183,0,122,0,247,0,155,0,29,0,50,0,184,0);
signal scenario_full  : scenario_type := (158,31,97,31,179,31,179,30,162,31,81,31,33,31,142,31,240,31,118,31,218,31,185,31,170,31,141,31,107,31,127,31,127,30,22,31,132,31,146,31,175,31,84,31,84,30,233,31,34,31,123,31,26,31,100,31,30,31,226,31,226,30,21,31,21,30,158,31,207,31,26,31,246,31,181,31,128,31,247,31,247,30,119,31,200,31,200,30,200,29,200,28,220,31,220,30,220,29,231,31,18,31,18,30,91,31,2,31,2,30,116,31,116,30,116,29,116,28,128,31,88,31,88,30,88,29,121,31,177,31,3,31,238,31,238,30,221,31,239,31,239,30,204,31,204,30,160,31,160,30,100,31,253,31,253,30,60,31,38,31,84,31,84,30,12,31,245,31,245,30,20,31,97,31,76,31,161,31,86,31,104,31,162,31,162,30,133,31,34,31,64,31,33,31,97,31,97,30,201,31,74,31,91,31,194,31,194,30,195,31,195,30,189,31,147,31,147,30,128,31,177,31,27,31,146,31,146,30,146,29,237,31,60,31,63,31,49,31,173,31,13,31,13,30,209,31,26,31,65,31,1,31,1,30,12,31,6,31,6,30,6,29,195,31,83,31,83,30,83,29,229,31,8,31,8,30,8,29,249,31,242,31,242,30,245,31,245,30,101,31,59,31,65,31,197,31,226,31,226,30,104,31,211,31,63,31,80,31,80,30,192,31,45,31,85,31,133,31,94,31,51,31,69,31,69,30,135,31,92,31,198,31,32,31,98,31,98,30,128,31,128,30,8,31,73,31,1,31,134,31,55,31,42,31,205,31,205,30,205,29,205,28,140,31,140,30,140,29,122,31,120,31,248,31,84,31,135,31,160,31,224,31,161,31,29,31,25,31,25,30,125,31,125,30,169,31,162,31,133,31,134,31,134,30,134,29,241,31,241,30,183,31,183,30,85,31,85,30,123,31,10,31,73,31,59,31,59,30,173,31,224,31,15,31,64,31,64,30,64,29,152,31,44,31,224,31,76,31,29,31,29,30,107,31,32,31,32,30,77,31,147,31,254,31,254,30,28,31,28,30,183,31,216,31,149,31,174,31,185,31,185,30,122,31,143,31,143,30,143,29,143,28,5,31,5,30,23,31,23,30,141,31,226,31,233,31,183,31,237,31,94,31,21,31,21,30,58,31,130,31,164,31,212,31,22,31,211,31,211,30,211,29,179,31,65,31,43,31,43,30,80,31,250,31,142,31,180,31,180,30,180,29,96,31,91,31,227,31,40,31,35,31,29,31,29,30,24,31,40,31,16,31,16,30,248,31,236,31,208,31,107,31,44,31,46,31,147,31,185,31,200,31,102,31,31,31,129,31,212,31,65,31,53,31,53,30,53,29,67,31,250,31,154,31,203,31,220,31,212,31,53,31,53,30,53,29,24,31,159,31,159,30,182,31,134,31,54,31,54,30,130,31,130,30,32,31,32,30,32,29,3,31,251,31,193,31,39,31,198,31,119,31,39,31,39,30,39,29,7,31,75,31,159,31,191,31,21,31,21,30,97,31,55,31,55,30,55,29,85,31,97,31,21,31,47,31,115,31,45,31,219,31,219,30,202,31,65,31,65,30,159,31,30,31,159,31,8,31,58,31,193,31,211,31,183,31,183,30,183,29,183,28,170,31,72,31,15,31,15,30,117,31,110,31,22,31,82,31,140,31,140,30,61,31,196,31,193,31,65,31,232,31,118,31,9,31,242,31,246,31,187,31,187,30,69,31,94,31,236,31,239,31,111,31,144,31,144,30,144,29,199,31,128,31,128,30,252,31,252,30,252,29,252,28,175,31,175,30,175,29,175,28,175,27,231,31,7,31,162,31,162,30,121,31,159,31,102,31,2,31,12,31,205,31,212,31,15,31,15,30,15,29,203,31,227,31,91,31,94,31,94,30,156,31,156,30,166,31,186,31,116,31,1,31,115,31,179,31,44,31,246,31,196,31,132,31,132,30,218,31,218,30,25,31,60,31,60,30,77,31,63,31,47,31,241,31,100,31,31,31,251,31,148,31,161,31,195,31,68,31,68,30,68,29,68,28,225,31,225,30,41,31,184,31,255,31,203,31,213,31,213,30,168,31,145,31,136,31,129,31,62,31,62,30,62,29,51,31,176,31,176,30,176,29,239,31,223,31,33,31,147,31,147,30,147,29,13,31,147,31,147,30,85,31,170,31,226,31,45,31,52,31,30,31,145,31,145,30,145,29,219,31,57,31,57,30,67,31,250,31,63,31,63,30,63,29,63,28,34,31,34,30,34,29,189,31,189,30,128,31,98,31,104,31,104,30,43,31,40,31,10,31,10,30,10,29,123,31,240,31,91,31,5,31,93,31,93,30,86,31,86,30,230,31,232,31,232,30,232,29,232,28,206,31,9,31,35,31,61,31,104,31,133,31,163,31,166,31,123,31,6,31,232,31,163,31,163,30,61,31,191,31,191,30,210,31,210,30,31,31,31,30,31,29,100,31,148,31,95,31,152,31,152,30,191,31,167,31,173,31,28,31,242,31,158,31,250,31,145,31,157,31,157,30,126,31,41,31,122,31,231,31,231,30,12,31,135,31,156,31,36,31,36,30,149,31,168,31,168,30,168,29,176,31,18,31,18,30,177,31,63,31,63,30,20,31,231,31,166,31,111,31,111,30,221,31,150,31,150,30,55,31,245,31,220,31,220,30,220,29,220,28,1,31,245,31,245,30,196,31,75,31,164,31,84,31,57,31,205,31,68,31,102,31,59,31,155,31,60,31,230,31,230,30,35,31,89,31,20,31,237,31,237,30,40,31,219,31,219,30,41,31,41,30,203,31,139,31,20,31,161,31,117,31,117,30,217,31,218,31,218,30,10,31,219,31,156,31,248,31,248,30,48,31,83,31,199,31,199,30,85,31,224,31,224,30,72,31,44,31,95,31,180,31,66,31,38,31,223,31,223,30,103,31,103,30,48,31,236,31,103,31,92,31,99,31,157,31,8,31,8,30,208,31,208,30,208,29,65,31,89,31,38,31,152,31,204,31,147,31,51,31,126,31,63,31,63,30,140,31,95,31,151,31,242,31,216,31,216,30,34,31,209,31,49,31,211,31,172,31,168,31,47,31,56,31,144,31,144,30,144,29,144,28,194,31,188,31,135,31,135,30,61,31,57,31,149,31,59,31,77,31,146,31,66,31,235,31,187,31,255,31,173,31,192,31,192,30,37,31,128,31,157,31,183,31,204,31,245,31,119,31,66,31,43,31,25,31,156,31,193,31,6,31,210,31,50,31,159,31,159,30,235,31,80,31,253,31,190,31,190,30,153,31,163,31,163,30,193,31,167,31,167,30,132,31,12,31,254,31,240,31,254,31,190,31,132,31,180,31,165,31,101,31,19,31,201,31,227,31,144,31,92,31,6,31,106,31,244,31,244,30,244,29,11,31,143,31,143,30,173,31,214,31,37,31,145,31,143,31,185,31,185,30,200,31,115,31,115,30,134,31,235,31,122,31,97,31,122,31,233,31,233,30,182,31,177,31,182,31,240,31,232,31,232,30,142,31,142,30,245,31,63,31,175,31,33,31,209,31,10,31,10,30,10,29,10,28,123,31,66,31,83,31,180,31,70,31,34,31,84,31,84,30,23,31,208,31,9,31,9,30,9,29,87,31,241,31,35,31,179,31,7,31,4,31,4,30,4,29,221,31,129,31,129,30,129,29,122,31,122,30,199,31,179,31,48,31,66,31,225,31,225,30,225,29,231,31,222,31,84,31,84,30,2,31,1,31,191,31,191,30,206,31,202,31,121,31,36,31,36,30,90,31,90,30,110,31,35,31,35,30,82,31,121,31,82,31,240,31,67,31,176,31,176,30,176,29,186,31,186,30,233,31,175,31,204,31,204,30,117,31,205,31,86,31,153,31,211,31,211,30,140,31,100,31,100,30,172,31,97,31,117,31,117,30,70,31,154,31,210,31,241,31,232,31,241,31,19,31,19,30,176,31,233,31,137,31,229,31,239,31,105,31,204,31,248,31,166,31,137,31,76,31,157,31,144,31,144,30,144,29,12,31,159,31,183,31,122,31,247,31,155,31,29,31,50,31,184,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
