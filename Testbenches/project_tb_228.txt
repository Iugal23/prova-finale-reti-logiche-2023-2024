-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 994;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (243,0,0,0,49,0,3,0,0,0,197,0,44,0,142,0,0,0,0,0,0,0,22,0,105,0,202,0,185,0,0,0,0,0,67,0,220,0,191,0,214,0,83,0,193,0,90,0,164,0,119,0,0,0,159,0,125,0,181,0,0,0,152,0,137,0,0,0,0,0,216,0,91,0,144,0,93,0,196,0,0,0,64,0,177,0,53,0,12,0,0,0,125,0,118,0,6,0,38,0,178,0,79,0,230,0,168,0,133,0,87,0,0,0,59,0,33,0,0,0,246,0,0,0,195,0,203,0,224,0,0,0,239,0,60,0,0,0,2,0,209,0,218,0,192,0,0,0,225,0,9,0,244,0,249,0,36,0,76,0,133,0,0,0,152,0,93,0,155,0,0,0,144,0,171,0,159,0,106,0,64,0,189,0,98,0,254,0,178,0,0,0,237,0,126,0,0,0,167,0,0,0,175,0,0,0,173,0,25,0,98,0,17,0,238,0,41,0,20,0,216,0,172,0,176,0,37,0,219,0,89,0,17,0,199,0,67,0,238,0,23,0,190,0,20,0,0,0,0,0,65,0,0,0,245,0,41,0,177,0,0,0,0,0,102,0,98,0,65,0,102,0,38,0,113,0,183,0,164,0,225,0,0,0,48,0,68,0,0,0,252,0,0,0,170,0,161,0,153,0,177,0,253,0,121,0,48,0,118,0,209,0,21,0,0,0,0,0,22,0,4,0,187,0,0,0,0,0,52,0,117,0,0,0,0,0,0,0,179,0,12,0,15,0,222,0,202,0,0,0,149,0,11,0,72,0,209,0,100,0,88,0,172,0,77,0,243,0,0,0,35,0,164,0,79,0,0,0,10,0,76,0,173,0,15,0,205,0,14,0,0,0,0,0,119,0,219,0,30,0,0,0,120,0,0,0,238,0,26,0,0,0,221,0,48,0,0,0,158,0,129,0,57,0,223,0,89,0,92,0,84,0,245,0,238,0,179,0,238,0,0,0,178,0,226,0,14,0,219,0,46,0,144,0,39,0,217,0,0,0,0,0,56,0,249,0,222,0,138,0,0,0,54,0,82,0,0,0,242,0,185,0,29,0,0,0,44,0,255,0,235,0,173,0,25,0,48,0,29,0,99,0,142,0,0,0,103,0,12,0,163,0,0,0,0,0,62,0,8,0,205,0,15,0,238,0,232,0,172,0,15,0,198,0,0,0,128,0,207,0,192,0,134,0,139,0,48,0,0,0,102,0,166,0,237,0,57,0,50,0,93,0,224,0,235,0,0,0,57,0,73,0,47,0,106,0,215,0,191,0,89,0,158,0,68,0,0,0,136,0,21,0,0,0,0,0,150,0,219,0,65,0,82,0,52,0,83,0,55,0,255,0,212,0,0,0,27,0,166,0,73,0,0,0,1,0,144,0,228,0,227,0,246,0,0,0,175,0,108,0,162,0,151,0,126,0,19,0,220,0,0,0,193,0,90,0,119,0,2,0,8,0,0,0,247,0,0,0,30,0,181,0,9,0,25,0,0,0,164,0,83,0,38,0,254,0,133,0,0,0,36,0,110,0,0,0,67,0,233,0,138,0,234,0,53,0,244,0,188,0,49,0,158,0,195,0,0,0,0,0,39,0,78,0,106,0,0,0,64,0,132,0,140,0,47,0,28,0,85,0,115,0,122,0,228,0,43,0,0,0,255,0,132,0,157,0,163,0,252,0,138,0,240,0,178,0,111,0,0,0,145,0,156,0,0,0,241,0,147,0,0,0,26,0,173,0,0,0,0,0,23,0,205,0,130,0,87,0,29,0,0,0,72,0,104,0,246,0,181,0,211,0,210,0,85,0,175,0,0,0,0,0,207,0,62,0,97,0,0,0,0,0,142,0,66,0,0,0,63,0,0,0,118,0,255,0,154,0,0,0,224,0,0,0,0,0,0,0,0,0,38,0,75,0,17,0,4,0,0,0,0,0,0,0,54,0,1,0,121,0,87,0,117,0,186,0,252,0,0,0,0,0,0,0,146,0,127,0,214,0,0,0,0,0,38,0,12,0,200,0,86,0,86,0,15,0,0,0,129,0,0,0,0,0,5,0,172,0,95,0,30,0,209,0,0,0,0,0,14,0,220,0,214,0,78,0,213,0,0,0,189,0,189,0,80,0,163,0,0,0,88,0,0,0,156,0,36,0,255,0,146,0,168,0,219,0,193,0,10,0,149,0,177,0,118,0,44,0,0,0,105,0,63,0,0,0,219,0,95,0,2,0,211,0,166,0,0,0,84,0,210,0,117,0,0,0,206,0,148,0,169,0,141,0,0,0,14,0,119,0,150,0,0,0,39,0,31,0,78,0,244,0,134,0,120,0,170,0,91,0,181,0,80,0,141,0,4,0,218,0,61,0,67,0,31,0,0,0,186,0,160,0,78,0,0,0,63,0,142,0,146,0,121,0,176,0,211,0,35,0,56,0,0,0,163,0,122,0,8,0,84,0,170,0,204,0,209,0,238,0,147,0,40,0,201,0,129,0,80,0,117,0,178,0,178,0,119,0,222,0,81,0,114,0,133,0,229,0,79,0,62,0,205,0,229,0,0,0,90,0,0,0,0,0,108,0,30,0,133,0,250,0,253,0,0,0,12,0,147,0,66,0,216,0,0,0,175,0,159,0,16,0,217,0,0,0,180,0,116,0,86,0,221,0,130,0,17,0,200,0,156,0,204,0,59,0,20,0,44,0,246,0,95,0,11,0,0,0,0,0,102,0,31,0,0,0,209,0,0,0,0,0,222,0,223,0,35,0,141,0,136,0,167,0,110,0,211,0,0,0,82,0,13,0,47,0,0,0,213,0,59,0,107,0,144,0,81,0,0,0,210,0,195,0,131,0,106,0,198,0,135,0,176,0,64,0,99,0,216,0,76,0,74,0,98,0,0,0,209,0,140,0,158,0,184,0,224,0,189,0,233,0,57,0,28,0,192,0,49,0,141,0,76,0,242,0,0,0,102,0,65,0,240,0,109,0,249,0,0,0,168,0,159,0,112,0,145,0,99,0,254,0,255,0,145,0,125,0,11,0,0,0,107,0,84,0,151,0,81,0,84,0,23,0,218,0,25,0,124,0,0,0,0,0,0,0,198,0,77,0,0,0,0,0,157,0,196,0,219,0,0,0,47,0,4,0,22,0,56,0,217,0,48,0,227,0,56,0,248,0,22,0,202,0,0,0,0,0,18,0,87,0,185,0,116,0,75,0,68,0,51,0,114,0,59,0,74,0,162,0,45,0,245,0,0,0,82,0,163,0,128,0,0,0,21,0,85,0,133,0,0,0,36,0,161,0,228,0,218,0,0,0,232,0,221,0,29,0,21,0,0,0,200,0,95,0,71,0,0,0,126,0,94,0,26,0,165,0,32,0,0,0,0,0,170,0,68,0,71,0,0,0,25,0,54,0,147,0,114,0,118,0,197,0,207,0,202,0,0,0,189,0,162,0,102,0,49,0,127,0,165,0,1,0,0,0,47,0,92,0,223,0,73,0,37,0,114,0,182,0,0,0,67,0,185,0,0,0,113,0,95,0,0,0,251,0,252,0,181,0,198,0,204,0,65,0,205,0,55,0,62,0,142,0,181,0,226,0,29,0,214,0,128,0,52,0,51,0,16,0,198,0,213,0,19,0,126,0,0,0,129,0,229,0,250,0,88,0,0,0,160,0,206,0,201,0,116,0,195,0,28,0,0,0,209,0,95,0,224,0,21,0,115,0,249,0,170,0,193,0,9,0,0,0,100,0,149,0,248,0,112,0,221,0,31,0,154,0,0,0,246,0,180,0,25,0,229,0,214,0,0,0,0,0,0,0,173,0,58,0,84,0,120,0,43,0,56,0,242,0,74,0,208,0,93,0,73,0,181,0,223,0,0,0,65,0,0,0,0,0,0,0,12,0,51,0,156,0,128,0,210,0,141,0,252,0,190,0,248,0,0,0,25,0,73,0,200,0,215,0,42,0,135,0,86,0,197,0,237,0,66,0,11,0,155,0,145,0,0,0,0,0,121,0,198,0,0,0,127,0,69,0,164,0,106,0,39,0,119,0,193,0,136,0,153,0,175,0,179,0,0,0,0,0,239,0,152,0,24,0,27,0,0,0,12,0,182,0,193,0,49,0,0,0,0,0,112,0,57,0,0,0,106,0,8,0,142,0,0,0,0,0,119,0,246,0,0,0,158,0,166,0,123,0,0,0,96,0,51,0,0,0,0,0,242,0,153,0,53,0,60,0,116,0,0,0,50,0,0,0,221,0,157,0,68,0,0,0,95,0,140,0,172,0,68,0,1,0,113,0,14,0,242,0,210,0,0,0,255,0,144,0,206,0,11,0,201,0,222,0,189,0,59,0,0,0,175,0,0,0,62,0,62,0,82,0,203,0,0,0,245,0,40,0,0,0,214,0,179,0,41,0,250,0,85,0,0,0,0,0,91,0,37,0,0,0,83,0);
signal scenario_full  : scenario_type := (243,31,243,30,49,31,3,31,3,30,197,31,44,31,142,31,142,30,142,29,142,28,22,31,105,31,202,31,185,31,185,30,185,29,67,31,220,31,191,31,214,31,83,31,193,31,90,31,164,31,119,31,119,30,159,31,125,31,181,31,181,30,152,31,137,31,137,30,137,29,216,31,91,31,144,31,93,31,196,31,196,30,64,31,177,31,53,31,12,31,12,30,125,31,118,31,6,31,38,31,178,31,79,31,230,31,168,31,133,31,87,31,87,30,59,31,33,31,33,30,246,31,246,30,195,31,203,31,224,31,224,30,239,31,60,31,60,30,2,31,209,31,218,31,192,31,192,30,225,31,9,31,244,31,249,31,36,31,76,31,133,31,133,30,152,31,93,31,155,31,155,30,144,31,171,31,159,31,106,31,64,31,189,31,98,31,254,31,178,31,178,30,237,31,126,31,126,30,167,31,167,30,175,31,175,30,173,31,25,31,98,31,17,31,238,31,41,31,20,31,216,31,172,31,176,31,37,31,219,31,89,31,17,31,199,31,67,31,238,31,23,31,190,31,20,31,20,30,20,29,65,31,65,30,245,31,41,31,177,31,177,30,177,29,102,31,98,31,65,31,102,31,38,31,113,31,183,31,164,31,225,31,225,30,48,31,68,31,68,30,252,31,252,30,170,31,161,31,153,31,177,31,253,31,121,31,48,31,118,31,209,31,21,31,21,30,21,29,22,31,4,31,187,31,187,30,187,29,52,31,117,31,117,30,117,29,117,28,179,31,12,31,15,31,222,31,202,31,202,30,149,31,11,31,72,31,209,31,100,31,88,31,172,31,77,31,243,31,243,30,35,31,164,31,79,31,79,30,10,31,76,31,173,31,15,31,205,31,14,31,14,30,14,29,119,31,219,31,30,31,30,30,120,31,120,30,238,31,26,31,26,30,221,31,48,31,48,30,158,31,129,31,57,31,223,31,89,31,92,31,84,31,245,31,238,31,179,31,238,31,238,30,178,31,226,31,14,31,219,31,46,31,144,31,39,31,217,31,217,30,217,29,56,31,249,31,222,31,138,31,138,30,54,31,82,31,82,30,242,31,185,31,29,31,29,30,44,31,255,31,235,31,173,31,25,31,48,31,29,31,99,31,142,31,142,30,103,31,12,31,163,31,163,30,163,29,62,31,8,31,205,31,15,31,238,31,232,31,172,31,15,31,198,31,198,30,128,31,207,31,192,31,134,31,139,31,48,31,48,30,102,31,166,31,237,31,57,31,50,31,93,31,224,31,235,31,235,30,57,31,73,31,47,31,106,31,215,31,191,31,89,31,158,31,68,31,68,30,136,31,21,31,21,30,21,29,150,31,219,31,65,31,82,31,52,31,83,31,55,31,255,31,212,31,212,30,27,31,166,31,73,31,73,30,1,31,144,31,228,31,227,31,246,31,246,30,175,31,108,31,162,31,151,31,126,31,19,31,220,31,220,30,193,31,90,31,119,31,2,31,8,31,8,30,247,31,247,30,30,31,181,31,9,31,25,31,25,30,164,31,83,31,38,31,254,31,133,31,133,30,36,31,110,31,110,30,67,31,233,31,138,31,234,31,53,31,244,31,188,31,49,31,158,31,195,31,195,30,195,29,39,31,78,31,106,31,106,30,64,31,132,31,140,31,47,31,28,31,85,31,115,31,122,31,228,31,43,31,43,30,255,31,132,31,157,31,163,31,252,31,138,31,240,31,178,31,111,31,111,30,145,31,156,31,156,30,241,31,147,31,147,30,26,31,173,31,173,30,173,29,23,31,205,31,130,31,87,31,29,31,29,30,72,31,104,31,246,31,181,31,211,31,210,31,85,31,175,31,175,30,175,29,207,31,62,31,97,31,97,30,97,29,142,31,66,31,66,30,63,31,63,30,118,31,255,31,154,31,154,30,224,31,224,30,224,29,224,28,224,27,38,31,75,31,17,31,4,31,4,30,4,29,4,28,54,31,1,31,121,31,87,31,117,31,186,31,252,31,252,30,252,29,252,28,146,31,127,31,214,31,214,30,214,29,38,31,12,31,200,31,86,31,86,31,15,31,15,30,129,31,129,30,129,29,5,31,172,31,95,31,30,31,209,31,209,30,209,29,14,31,220,31,214,31,78,31,213,31,213,30,189,31,189,31,80,31,163,31,163,30,88,31,88,30,156,31,36,31,255,31,146,31,168,31,219,31,193,31,10,31,149,31,177,31,118,31,44,31,44,30,105,31,63,31,63,30,219,31,95,31,2,31,211,31,166,31,166,30,84,31,210,31,117,31,117,30,206,31,148,31,169,31,141,31,141,30,14,31,119,31,150,31,150,30,39,31,31,31,78,31,244,31,134,31,120,31,170,31,91,31,181,31,80,31,141,31,4,31,218,31,61,31,67,31,31,31,31,30,186,31,160,31,78,31,78,30,63,31,142,31,146,31,121,31,176,31,211,31,35,31,56,31,56,30,163,31,122,31,8,31,84,31,170,31,204,31,209,31,238,31,147,31,40,31,201,31,129,31,80,31,117,31,178,31,178,31,119,31,222,31,81,31,114,31,133,31,229,31,79,31,62,31,205,31,229,31,229,30,90,31,90,30,90,29,108,31,30,31,133,31,250,31,253,31,253,30,12,31,147,31,66,31,216,31,216,30,175,31,159,31,16,31,217,31,217,30,180,31,116,31,86,31,221,31,130,31,17,31,200,31,156,31,204,31,59,31,20,31,44,31,246,31,95,31,11,31,11,30,11,29,102,31,31,31,31,30,209,31,209,30,209,29,222,31,223,31,35,31,141,31,136,31,167,31,110,31,211,31,211,30,82,31,13,31,47,31,47,30,213,31,59,31,107,31,144,31,81,31,81,30,210,31,195,31,131,31,106,31,198,31,135,31,176,31,64,31,99,31,216,31,76,31,74,31,98,31,98,30,209,31,140,31,158,31,184,31,224,31,189,31,233,31,57,31,28,31,192,31,49,31,141,31,76,31,242,31,242,30,102,31,65,31,240,31,109,31,249,31,249,30,168,31,159,31,112,31,145,31,99,31,254,31,255,31,145,31,125,31,11,31,11,30,107,31,84,31,151,31,81,31,84,31,23,31,218,31,25,31,124,31,124,30,124,29,124,28,198,31,77,31,77,30,77,29,157,31,196,31,219,31,219,30,47,31,4,31,22,31,56,31,217,31,48,31,227,31,56,31,248,31,22,31,202,31,202,30,202,29,18,31,87,31,185,31,116,31,75,31,68,31,51,31,114,31,59,31,74,31,162,31,45,31,245,31,245,30,82,31,163,31,128,31,128,30,21,31,85,31,133,31,133,30,36,31,161,31,228,31,218,31,218,30,232,31,221,31,29,31,21,31,21,30,200,31,95,31,71,31,71,30,126,31,94,31,26,31,165,31,32,31,32,30,32,29,170,31,68,31,71,31,71,30,25,31,54,31,147,31,114,31,118,31,197,31,207,31,202,31,202,30,189,31,162,31,102,31,49,31,127,31,165,31,1,31,1,30,47,31,92,31,223,31,73,31,37,31,114,31,182,31,182,30,67,31,185,31,185,30,113,31,95,31,95,30,251,31,252,31,181,31,198,31,204,31,65,31,205,31,55,31,62,31,142,31,181,31,226,31,29,31,214,31,128,31,52,31,51,31,16,31,198,31,213,31,19,31,126,31,126,30,129,31,229,31,250,31,88,31,88,30,160,31,206,31,201,31,116,31,195,31,28,31,28,30,209,31,95,31,224,31,21,31,115,31,249,31,170,31,193,31,9,31,9,30,100,31,149,31,248,31,112,31,221,31,31,31,154,31,154,30,246,31,180,31,25,31,229,31,214,31,214,30,214,29,214,28,173,31,58,31,84,31,120,31,43,31,56,31,242,31,74,31,208,31,93,31,73,31,181,31,223,31,223,30,65,31,65,30,65,29,65,28,12,31,51,31,156,31,128,31,210,31,141,31,252,31,190,31,248,31,248,30,25,31,73,31,200,31,215,31,42,31,135,31,86,31,197,31,237,31,66,31,11,31,155,31,145,31,145,30,145,29,121,31,198,31,198,30,127,31,69,31,164,31,106,31,39,31,119,31,193,31,136,31,153,31,175,31,179,31,179,30,179,29,239,31,152,31,24,31,27,31,27,30,12,31,182,31,193,31,49,31,49,30,49,29,112,31,57,31,57,30,106,31,8,31,142,31,142,30,142,29,119,31,246,31,246,30,158,31,166,31,123,31,123,30,96,31,51,31,51,30,51,29,242,31,153,31,53,31,60,31,116,31,116,30,50,31,50,30,221,31,157,31,68,31,68,30,95,31,140,31,172,31,68,31,1,31,113,31,14,31,242,31,210,31,210,30,255,31,144,31,206,31,11,31,201,31,222,31,189,31,59,31,59,30,175,31,175,30,62,31,62,31,82,31,203,31,203,30,245,31,40,31,40,30,214,31,179,31,41,31,250,31,85,31,85,30,85,29,91,31,37,31,37,30,83,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
