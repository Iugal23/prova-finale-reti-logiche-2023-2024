-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 930;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (114,0,0,0,210,0,216,0,0,0,0,0,142,0,174,0,7,0,0,0,191,0,157,0,167,0,99,0,177,0,148,0,105,0,202,0,108,0,247,0,45,0,110,0,81,0,0,0,239,0,193,0,218,0,133,0,94,0,123,0,23,0,248,0,162,0,172,0,0,0,28,0,89,0,0,0,105,0,29,0,171,0,91,0,160,0,163,0,65,0,222,0,212,0,99,0,138,0,222,0,158,0,221,0,157,0,244,0,178,0,223,0,200,0,4,0,230,0,225,0,204,0,0,0,25,0,239,0,124,0,69,0,255,0,125,0,45,0,102,0,176,0,58,0,0,0,0,0,4,0,156,0,142,0,252,0,88,0,186,0,46,0,201,0,161,0,207,0,0,0,159,0,0,0,179,0,228,0,21,0,194,0,50,0,245,0,0,0,187,0,0,0,175,0,0,0,249,0,222,0,11,0,46,0,62,0,187,0,129,0,31,0,190,0,0,0,148,0,15,0,81,0,160,0,0,0,171,0,51,0,0,0,51,0,37,0,83,0,53,0,58,0,123,0,56,0,148,0,118,0,132,0,68,0,249,0,126,0,105,0,30,0,221,0,155,0,0,0,121,0,28,0,229,0,0,0,239,0,9,0,209,0,92,0,78,0,69,0,143,0,233,0,169,0,0,0,3,0,39,0,29,0,0,0,197,0,15,0,0,0,0,0,96,0,28,0,206,0,175,0,250,0,175,0,0,0,228,0,0,0,87,0,0,0,0,0,138,0,129,0,7,0,72,0,148,0,14,0,34,0,44,0,152,0,0,0,29,0,230,0,103,0,127,0,210,0,64,0,198,0,4,0,23,0,0,0,146,0,46,0,0,0,222,0,124,0,14,0,0,0,87,0,0,0,15,0,122,0,186,0,241,0,133,0,101,0,71,0,165,0,99,0,134,0,39,0,0,0,53,0,213,0,131,0,165,0,236,0,246,0,208,0,26,0,219,0,205,0,190,0,138,0,231,0,82,0,0,0,45,0,0,0,251,0,124,0,112,0,205,0,175,0,188,0,0,0,242,0,153,0,108,0,25,0,141,0,0,0,138,0,16,0,84,0,146,0,0,0,190,0,139,0,169,0,160,0,30,0,4,0,115,0,92,0,2,0,246,0,103,0,230,0,202,0,187,0,193,0,85,0,90,0,34,0,1,0,54,0,179,0,18,0,185,0,0,0,0,0,0,0,209,0,0,0,44,0,205,0,0,0,195,0,34,0,22,0,170,0,39,0,229,0,33,0,197,0,89,0,153,0,158,0,7,0,120,0,0,0,134,0,10,0,37,0,31,0,29,0,84,0,15,0,152,0,104,0,150,0,0,0,126,0,85,0,180,0,215,0,80,0,0,0,241,0,0,0,31,0,235,0,0,0,174,0,251,0,65,0,0,0,0,0,226,0,253,0,168,0,53,0,157,0,170,0,249,0,65,0,0,0,45,0,107,0,134,0,251,0,15,0,57,0,0,0,139,0,26,0,226,0,182,0,244,0,21,0,114,0,230,0,0,0,0,0,140,0,95,0,0,0,49,0,127,0,0,0,2,0,61,0,206,0,45,0,0,0,224,0,51,0,22,0,44,0,156,0,120,0,129,0,58,0,0,0,69,0,115,0,81,0,178,0,0,0,184,0,37,0,69,0,10,0,216,0,0,0,184,0,22,0,111,0,35,0,216,0,42,0,0,0,208,0,189,0,19,0,157,0,225,0,166,0,0,0,121,0,0,0,0,0,152,0,168,0,0,0,68,0,0,0,13,0,0,0,93,0,119,0,38,0,210,0,0,0,145,0,196,0,87,0,212,0,99,0,0,0,54,0,78,0,106,0,211,0,225,0,121,0,213,0,157,0,88,0,224,0,24,0,96,0,88,0,0,0,68,0,0,0,122,0,227,0,18,0,106,0,206,0,138,0,154,0,0,0,0,0,10,0,117,0,122,0,6,0,36,0,132,0,85,0,55,0,46,0,83,0,97,0,221,0,137,0,191,0,203,0,248,0,66,0,60,0,104,0,127,0,94,0,217,0,79,0,0,0,13,0,190,0,0,0,223,0,222,0,105,0,153,0,206,0,125,0,0,0,141,0,8,0,171,0,76,0,217,0,76,0,43,0,176,0,124,0,175,0,128,0,0,0,100,0,72,0,180,0,194,0,152,0,0,0,120,0,48,0,87,0,23,0,147,0,67,0,250,0,76,0,4,0,83,0,22,0,236,0,231,0,80,0,0,0,224,0,0,0,229,0,43,0,42,0,66,0,109,0,154,0,0,0,103,0,0,0,54,0,0,0,26,0,162,0,52,0,244,0,214,0,0,0,135,0,82,0,194,0,92,0,0,0,0,0,50,0,44,0,202,0,0,0,63,0,42,0,0,0,88,0,144,0,142,0,115,0,30,0,51,0,64,0,0,0,156,0,0,0,170,0,241,0,247,0,13,0,0,0,164,0,166,0,223,0,35,0,17,0,157,0,0,0,200,0,72,0,255,0,0,0,222,0,205,0,116,0,18,0,6,0,95,0,30,0,181,0,196,0,152,0,0,0,10,0,158,0,62,0,130,0,229,0,0,0,84,0,46,0,203,0,15,0,0,0,196,0,225,0,96,0,12,0,120,0,23,0,76,0,126,0,50,0,42,0,248,0,32,0,222,0,0,0,126,0,0,0,186,0,241,0,0,0,1,0,46,0,170,0,150,0,255,0,76,0,57,0,97,0,225,0,94,0,171,0,136,0,0,0,143,0,182,0,175,0,77,0,0,0,229,0,163,0,103,0,0,0,209,0,106,0,166,0,89,0,141,0,139,0,91,0,171,0,0,0,0,0,193,0,12,0,0,0,101,0,49,0,63,0,162,0,197,0,59,0,0,0,50,0,112,0,48,0,160,0,210,0,0,0,247,0,96,0,71,0,82,0,71,0,0,0,198,0,121,0,254,0,25,0,39,0,6,0,139,0,86,0,213,0,65,0,4,0,0,0,238,0,157,0,0,0,254,0,47,0,27,0,240,0,111,0,154,0,155,0,171,0,0,0,0,0,0,0,0,0,0,0,120,0,139,0,174,0,0,0,117,0,81,0,145,0,0,0,103,0,133,0,117,0,202,0,198,0,171,0,191,0,159,0,217,0,6,0,122,0,142,0,11,0,222,0,1,0,0,0,136,0,97,0,159,0,0,0,48,0,0,0,120,0,0,0,132,0,104,0,69,0,168,0,67,0,202,0,89,0,177,0,105,0,0,0,233,0,94,0,107,0,74,0,114,0,43,0,174,0,46,0,196,0,0,0,15,0,0,0,0,0,34,0,0,0,105,0,0,0,142,0,248,0,23,0,29,0,0,0,31,0,0,0,0,0,0,0,112,0,97,0,0,0,141,0,0,0,102,0,233,0,246,0,228,0,75,0,211,0,0,0,0,0,179,0,108,0,178,0,197,0,124,0,92,0,217,0,73,0,193,0,239,0,0,0,160,0,168,0,29,0,179,0,183,0,156,0,225,0,0,0,170,0,172,0,64,0,197,0,82,0,170,0,73,0,211,0,234,0,198,0,220,0,152,0,0,0,105,0,219,0,111,0,139,0,0,0,208,0,212,0,2,0,118,0,104,0,0,0,90,0,153,0,157,0,151,0,84,0,169,0,183,0,185,0,0,0,126,0,143,0,205,0,16,0,0,0,93,0,76,0,112,0,68,0,0,0,114,0,20,0,199,0,16,0,0,0,61,0,12,0,196,0,143,0,0,0,32,0,3,0,0,0,0,0,125,0,44,0,101,0,0,0,74,0,156,0,226,0,44,0,2,0,0,0,0,0,173,0,121,0,109,0,50,0,0,0,111,0,140,0,171,0,25,0,205,0,0,0,247,0,0,0,35,0,0,0,0,0,0,0,162,0,39,0,94,0,254,0,8,0,165,0,140,0,40,0,212,0,245,0,243,0,0,0,241,0,0,0,7,0,15,0,0,0,219,0,25,0,0,0,81,0,144,0,66,0,10,0,225,0,130,0,141,0,0,0,5,0,56,0,0,0,147,0,0,0,34,0,223,0,51,0,161,0,0,0,32,0,2,0,0,0,0,0,189,0,91,0,42,0,0,0,105,0,12,0,186,0,173,0,104,0,13,0,0,0,130,0,94,0,140,0,66,0,114,0,0,0,28,0,89,0,206,0,200,0,217,0);
signal scenario_full  : scenario_type := (114,31,114,30,210,31,216,31,216,30,216,29,142,31,174,31,7,31,7,30,191,31,157,31,167,31,99,31,177,31,148,31,105,31,202,31,108,31,247,31,45,31,110,31,81,31,81,30,239,31,193,31,218,31,133,31,94,31,123,31,23,31,248,31,162,31,172,31,172,30,28,31,89,31,89,30,105,31,29,31,171,31,91,31,160,31,163,31,65,31,222,31,212,31,99,31,138,31,222,31,158,31,221,31,157,31,244,31,178,31,223,31,200,31,4,31,230,31,225,31,204,31,204,30,25,31,239,31,124,31,69,31,255,31,125,31,45,31,102,31,176,31,58,31,58,30,58,29,4,31,156,31,142,31,252,31,88,31,186,31,46,31,201,31,161,31,207,31,207,30,159,31,159,30,179,31,228,31,21,31,194,31,50,31,245,31,245,30,187,31,187,30,175,31,175,30,249,31,222,31,11,31,46,31,62,31,187,31,129,31,31,31,190,31,190,30,148,31,15,31,81,31,160,31,160,30,171,31,51,31,51,30,51,31,37,31,83,31,53,31,58,31,123,31,56,31,148,31,118,31,132,31,68,31,249,31,126,31,105,31,30,31,221,31,155,31,155,30,121,31,28,31,229,31,229,30,239,31,9,31,209,31,92,31,78,31,69,31,143,31,233,31,169,31,169,30,3,31,39,31,29,31,29,30,197,31,15,31,15,30,15,29,96,31,28,31,206,31,175,31,250,31,175,31,175,30,228,31,228,30,87,31,87,30,87,29,138,31,129,31,7,31,72,31,148,31,14,31,34,31,44,31,152,31,152,30,29,31,230,31,103,31,127,31,210,31,64,31,198,31,4,31,23,31,23,30,146,31,46,31,46,30,222,31,124,31,14,31,14,30,87,31,87,30,15,31,122,31,186,31,241,31,133,31,101,31,71,31,165,31,99,31,134,31,39,31,39,30,53,31,213,31,131,31,165,31,236,31,246,31,208,31,26,31,219,31,205,31,190,31,138,31,231,31,82,31,82,30,45,31,45,30,251,31,124,31,112,31,205,31,175,31,188,31,188,30,242,31,153,31,108,31,25,31,141,31,141,30,138,31,16,31,84,31,146,31,146,30,190,31,139,31,169,31,160,31,30,31,4,31,115,31,92,31,2,31,246,31,103,31,230,31,202,31,187,31,193,31,85,31,90,31,34,31,1,31,54,31,179,31,18,31,185,31,185,30,185,29,185,28,209,31,209,30,44,31,205,31,205,30,195,31,34,31,22,31,170,31,39,31,229,31,33,31,197,31,89,31,153,31,158,31,7,31,120,31,120,30,134,31,10,31,37,31,31,31,29,31,84,31,15,31,152,31,104,31,150,31,150,30,126,31,85,31,180,31,215,31,80,31,80,30,241,31,241,30,31,31,235,31,235,30,174,31,251,31,65,31,65,30,65,29,226,31,253,31,168,31,53,31,157,31,170,31,249,31,65,31,65,30,45,31,107,31,134,31,251,31,15,31,57,31,57,30,139,31,26,31,226,31,182,31,244,31,21,31,114,31,230,31,230,30,230,29,140,31,95,31,95,30,49,31,127,31,127,30,2,31,61,31,206,31,45,31,45,30,224,31,51,31,22,31,44,31,156,31,120,31,129,31,58,31,58,30,69,31,115,31,81,31,178,31,178,30,184,31,37,31,69,31,10,31,216,31,216,30,184,31,22,31,111,31,35,31,216,31,42,31,42,30,208,31,189,31,19,31,157,31,225,31,166,31,166,30,121,31,121,30,121,29,152,31,168,31,168,30,68,31,68,30,13,31,13,30,93,31,119,31,38,31,210,31,210,30,145,31,196,31,87,31,212,31,99,31,99,30,54,31,78,31,106,31,211,31,225,31,121,31,213,31,157,31,88,31,224,31,24,31,96,31,88,31,88,30,68,31,68,30,122,31,227,31,18,31,106,31,206,31,138,31,154,31,154,30,154,29,10,31,117,31,122,31,6,31,36,31,132,31,85,31,55,31,46,31,83,31,97,31,221,31,137,31,191,31,203,31,248,31,66,31,60,31,104,31,127,31,94,31,217,31,79,31,79,30,13,31,190,31,190,30,223,31,222,31,105,31,153,31,206,31,125,31,125,30,141,31,8,31,171,31,76,31,217,31,76,31,43,31,176,31,124,31,175,31,128,31,128,30,100,31,72,31,180,31,194,31,152,31,152,30,120,31,48,31,87,31,23,31,147,31,67,31,250,31,76,31,4,31,83,31,22,31,236,31,231,31,80,31,80,30,224,31,224,30,229,31,43,31,42,31,66,31,109,31,154,31,154,30,103,31,103,30,54,31,54,30,26,31,162,31,52,31,244,31,214,31,214,30,135,31,82,31,194,31,92,31,92,30,92,29,50,31,44,31,202,31,202,30,63,31,42,31,42,30,88,31,144,31,142,31,115,31,30,31,51,31,64,31,64,30,156,31,156,30,170,31,241,31,247,31,13,31,13,30,164,31,166,31,223,31,35,31,17,31,157,31,157,30,200,31,72,31,255,31,255,30,222,31,205,31,116,31,18,31,6,31,95,31,30,31,181,31,196,31,152,31,152,30,10,31,158,31,62,31,130,31,229,31,229,30,84,31,46,31,203,31,15,31,15,30,196,31,225,31,96,31,12,31,120,31,23,31,76,31,126,31,50,31,42,31,248,31,32,31,222,31,222,30,126,31,126,30,186,31,241,31,241,30,1,31,46,31,170,31,150,31,255,31,76,31,57,31,97,31,225,31,94,31,171,31,136,31,136,30,143,31,182,31,175,31,77,31,77,30,229,31,163,31,103,31,103,30,209,31,106,31,166,31,89,31,141,31,139,31,91,31,171,31,171,30,171,29,193,31,12,31,12,30,101,31,49,31,63,31,162,31,197,31,59,31,59,30,50,31,112,31,48,31,160,31,210,31,210,30,247,31,96,31,71,31,82,31,71,31,71,30,198,31,121,31,254,31,25,31,39,31,6,31,139,31,86,31,213,31,65,31,4,31,4,30,238,31,157,31,157,30,254,31,47,31,27,31,240,31,111,31,154,31,155,31,171,31,171,30,171,29,171,28,171,27,171,26,120,31,139,31,174,31,174,30,117,31,81,31,145,31,145,30,103,31,133,31,117,31,202,31,198,31,171,31,191,31,159,31,217,31,6,31,122,31,142,31,11,31,222,31,1,31,1,30,136,31,97,31,159,31,159,30,48,31,48,30,120,31,120,30,132,31,104,31,69,31,168,31,67,31,202,31,89,31,177,31,105,31,105,30,233,31,94,31,107,31,74,31,114,31,43,31,174,31,46,31,196,31,196,30,15,31,15,30,15,29,34,31,34,30,105,31,105,30,142,31,248,31,23,31,29,31,29,30,31,31,31,30,31,29,31,28,112,31,97,31,97,30,141,31,141,30,102,31,233,31,246,31,228,31,75,31,211,31,211,30,211,29,179,31,108,31,178,31,197,31,124,31,92,31,217,31,73,31,193,31,239,31,239,30,160,31,168,31,29,31,179,31,183,31,156,31,225,31,225,30,170,31,172,31,64,31,197,31,82,31,170,31,73,31,211,31,234,31,198,31,220,31,152,31,152,30,105,31,219,31,111,31,139,31,139,30,208,31,212,31,2,31,118,31,104,31,104,30,90,31,153,31,157,31,151,31,84,31,169,31,183,31,185,31,185,30,126,31,143,31,205,31,16,31,16,30,93,31,76,31,112,31,68,31,68,30,114,31,20,31,199,31,16,31,16,30,61,31,12,31,196,31,143,31,143,30,32,31,3,31,3,30,3,29,125,31,44,31,101,31,101,30,74,31,156,31,226,31,44,31,2,31,2,30,2,29,173,31,121,31,109,31,50,31,50,30,111,31,140,31,171,31,25,31,205,31,205,30,247,31,247,30,35,31,35,30,35,29,35,28,162,31,39,31,94,31,254,31,8,31,165,31,140,31,40,31,212,31,245,31,243,31,243,30,241,31,241,30,7,31,15,31,15,30,219,31,25,31,25,30,81,31,144,31,66,31,10,31,225,31,130,31,141,31,141,30,5,31,56,31,56,30,147,31,147,30,34,31,223,31,51,31,161,31,161,30,32,31,2,31,2,30,2,29,189,31,91,31,42,31,42,30,105,31,12,31,186,31,173,31,104,31,13,31,13,30,130,31,94,31,140,31,66,31,114,31,114,30,28,31,89,31,206,31,200,31,217,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
