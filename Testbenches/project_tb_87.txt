-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 896;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (48,0,43,0,192,0,74,0,0,0,102,0,0,0,0,0,48,0,18,0,104,0,32,0,0,0,245,0,34,0,75,0,18,0,241,0,0,0,34,0,91,0,0,0,118,0,63,0,12,0,0,0,179,0,71,0,23,0,157,0,1,0,92,0,0,0,84,0,232,0,9,0,220,0,196,0,5,0,0,0,143,0,255,0,205,0,4,0,225,0,0,0,33,0,71,0,0,0,214,0,0,0,224,0,0,0,156,0,171,0,0,0,0,0,187,0,188,0,10,0,66,0,26,0,144,0,213,0,0,0,0,0,242,0,227,0,0,0,178,0,92,0,0,0,176,0,0,0,0,0,153,0,80,0,0,0,179,0,82,0,173,0,19,0,127,0,11,0,0,0,57,0,111,0,53,0,200,0,0,0,163,0,117,0,41,0,32,0,176,0,0,0,40,0,32,0,75,0,52,0,194,0,20,0,56,0,173,0,212,0,175,0,9,0,106,0,169,0,242,0,212,0,213,0,149,0,27,0,33,0,0,0,65,0,233,0,0,0,181,0,9,0,0,0,222,0,74,0,185,0,25,0,12,0,81,0,0,0,195,0,0,0,229,0,161,0,0,0,174,0,189,0,156,0,0,0,0,0,224,0,204,0,54,0,190,0,132,0,0,0,184,0,52,0,0,0,15,0,0,0,151,0,52,0,124,0,54,0,120,0,203,0,136,0,0,0,134,0,124,0,47,0,189,0,7,0,0,0,210,0,151,0,175,0,0,0,59,0,0,0,173,0,0,0,21,0,38,0,74,0,246,0,173,0,89,0,72,0,230,0,0,0,241,0,156,0,58,0,156,0,0,0,153,0,127,0,163,0,42,0,238,0,234,0,0,0,16,0,19,0,42,0,0,0,174,0,87,0,63,0,121,0,26,0,119,0,181,0,125,0,198,0,108,0,237,0,25,0,0,0,38,0,190,0,124,0,0,0,30,0,178,0,62,0,209,0,0,0,0,0,42,0,155,0,212,0,19,0,101,0,10,0,226,0,245,0,138,0,45,0,221,0,224,0,92,0,16,0,129,0,0,0,67,0,0,0,141,0,15,0,11,0,144,0,162,0,0,0,0,0,70,0,67,0,66,0,226,0,127,0,172,0,95,0,0,0,19,0,133,0,118,0,65,0,254,0,165,0,189,0,198,0,122,0,70,0,0,0,9,0,219,0,89,0,228,0,0,0,18,0,0,0,0,0,160,0,0,0,89,0,124,0,189,0,119,0,193,0,54,0,160,0,0,0,103,0,57,0,22,0,175,0,11,0,144,0,150,0,220,0,0,0,232,0,2,0,193,0,0,0,45,0,127,0,159,0,134,0,53,0,65,0,30,0,0,0,79,0,185,0,52,0,22,0,14,0,53,0,174,0,50,0,136,0,61,0,119,0,28,0,177,0,0,0,236,0,41,0,142,0,140,0,166,0,155,0,94,0,160,0,248,0,0,0,61,0,0,0,16,0,164,0,29,0,140,0,0,0,203,0,240,0,240,0,0,0,114,0,20,0,183,0,0,0,147,0,91,0,16,0,133,0,81,0,107,0,65,0,234,0,5,0,0,0,177,0,143,0,0,0,108,0,0,0,210,0,158,0,0,0,181,0,91,0,18,0,212,0,0,0,3,0,161,0,186,0,125,0,52,0,77,0,81,0,17,0,0,0,143,0,0,0,0,0,228,0,243,0,2,0,0,0,220,0,224,0,0,0,104,0,11,0,6,0,0,0,221,0,121,0,116,0,208,0,0,0,124,0,68,0,5,0,5,0,195,0,53,0,239,0,208,0,166,0,125,0,106,0,192,0,52,0,255,0,207,0,0,0,107,0,176,0,102,0,22,0,0,0,5,0,87,0,94,0,86,0,177,0,33,0,0,0,144,0,0,0,155,0,177,0,104,0,238,0,243,0,0,0,167,0,52,0,244,0,98,0,255,0,144,0,182,0,19,0,0,0,5,0,87,0,39,0,0,0,173,0,0,0,192,0,66,0,168,0,0,0,171,0,122,0,0,0,207,0,233,0,65,0,110,0,242,0,24,0,6,0,217,0,0,0,132,0,95,0,109,0,185,0,247,0,176,0,50,0,121,0,83,0,61,0,248,0,233,0,148,0,34,0,133,0,2,0,100,0,152,0,192,0,22,0,212,0,34,0,111,0,0,0,6,0,0,0,196,0,0,0,215,0,41,0,36,0,0,0,30,0,0,0,65,0,182,0,0,0,98,0,72,0,4,0,26,0,249,0,57,0,216,0,249,0,182,0,72,0,101,0,236,0,47,0,251,0,12,0,18,0,97,0,114,0,178,0,0,0,46,0,75,0,131,0,0,0,102,0,36,0,228,0,248,0,194,0,186,0,0,0,63,0,80,0,0,0,194,0,0,0,113,0,224,0,156,0,167,0,176,0,112,0,104,0,196,0,28,0,161,0,5,0,137,0,219,0,0,0,118,0,214,0,11,0,0,0,89,0,77,0,175,0,60,0,22,0,0,0,0,0,0,0,0,0,199,0,0,0,35,0,76,0,190,0,169,0,188,0,186,0,124,0,148,0,244,0,53,0,67,0,104,0,178,0,0,0,186,0,26,0,0,0,0,0,127,0,182,0,144,0,83,0,0,0,78,0,240,0,0,0,134,0,62,0,147,0,252,0,45,0,240,0,98,0,28,0,74,0,145,0,185,0,167,0,0,0,236,0,6,0,118,0,34,0,198,0,29,0,12,0,0,0,80,0,13,0,0,0,47,0,194,0,5,0,0,0,4,0,31,0,110,0,146,0,186,0,143,0,178,0,116,0,68,0,170,0,180,0,0,0,193,0,214,0,40,0,17,0,45,0,246,0,0,0,147,0,145,0,0,0,0,0,136,0,236,0,0,0,208,0,122,0,0,0,170,0,239,0,247,0,148,0,39,0,0,0,209,0,117,0,234,0,73,0,9,0,0,0,89,0,77,0,148,0,36,0,150,0,47,0,12,0,0,0,98,0,2,0,9,0,192,0,142,0,32,0,244,0,0,0,95,0,31,0,220,0,202,0,128,0,36,0,167,0,250,0,0,0,123,0,23,0,15,0,86,0,85,0,40,0,174,0,236,0,95,0,58,0,127,0,131,0,79,0,203,0,0,0,160,0,48,0,37,0,0,0,164,0,114,0,144,0,240,0,0,0,26,0,0,0,135,0,131,0,0,0,0,0,230,0,56,0,7,0,136,0,224,0,137,0,31,0,0,0,50,0,8,0,155,0,182,0,206,0,121,0,208,0,254,0,139,0,0,0,74,0,209,0,1,0,126,0,228,0,77,0,13,0,0,0,13,0,11,0,57,0,0,0,211,0,223,0,0,0,235,0,93,0,91,0,25,0,3,0,86,0,157,0,139,0,105,0,167,0,0,0,215,0,98,0,0,0,143,0,0,0,0,0,67,0,225,0,151,0,2,0,7,0,127,0,195,0,55,0,255,0,0,0,180,0,173,0,144,0,42,0,95,0,0,0,121,0,243,0,83,0,50,0,0,0,59,0,243,0,38,0,158,0,163,0,84,0,0,0,0,0,0,0,44,0,133,0,95,0,37,0,51,0,103,0,245,0,209,0,79,0,22,0,36,0,60,0,136,0,0,0,2,0,0,0,177,0,0,0,0,0,0,0,58,0,0,0,160,0,0,0,0,0,101,0,226,0,179,0,86,0,68,0,159,0,0,0,225,0,40,0,79,0,168,0,138,0,27,0,158,0,90,0,55,0,0,0,163,0,0,0,23,0,26,0,33,0,197,0,0,0,64,0,219,0,194,0,0,0,79,0,117,0,20,0,174,0,0,0,182,0,199,0,0,0,19,0,72,0,19,0,0,0,105,0,162,0,16,0,0,0,10,0,228,0,45,0,97,0,114,0,101,0,0,0,2,0,93,0,151,0,114,0,79,0,103,0,66,0,241,0,185,0,74,0,166,0,135,0,61,0,41,0,71,0,80,0,0,0,172,0,233,0,231,0,28,0,239,0,19,0,1,0,5,0,60,0,157,0,160,0);
signal scenario_full  : scenario_type := (48,31,43,31,192,31,74,31,74,30,102,31,102,30,102,29,48,31,18,31,104,31,32,31,32,30,245,31,34,31,75,31,18,31,241,31,241,30,34,31,91,31,91,30,118,31,63,31,12,31,12,30,179,31,71,31,23,31,157,31,1,31,92,31,92,30,84,31,232,31,9,31,220,31,196,31,5,31,5,30,143,31,255,31,205,31,4,31,225,31,225,30,33,31,71,31,71,30,214,31,214,30,224,31,224,30,156,31,171,31,171,30,171,29,187,31,188,31,10,31,66,31,26,31,144,31,213,31,213,30,213,29,242,31,227,31,227,30,178,31,92,31,92,30,176,31,176,30,176,29,153,31,80,31,80,30,179,31,82,31,173,31,19,31,127,31,11,31,11,30,57,31,111,31,53,31,200,31,200,30,163,31,117,31,41,31,32,31,176,31,176,30,40,31,32,31,75,31,52,31,194,31,20,31,56,31,173,31,212,31,175,31,9,31,106,31,169,31,242,31,212,31,213,31,149,31,27,31,33,31,33,30,65,31,233,31,233,30,181,31,9,31,9,30,222,31,74,31,185,31,25,31,12,31,81,31,81,30,195,31,195,30,229,31,161,31,161,30,174,31,189,31,156,31,156,30,156,29,224,31,204,31,54,31,190,31,132,31,132,30,184,31,52,31,52,30,15,31,15,30,151,31,52,31,124,31,54,31,120,31,203,31,136,31,136,30,134,31,124,31,47,31,189,31,7,31,7,30,210,31,151,31,175,31,175,30,59,31,59,30,173,31,173,30,21,31,38,31,74,31,246,31,173,31,89,31,72,31,230,31,230,30,241,31,156,31,58,31,156,31,156,30,153,31,127,31,163,31,42,31,238,31,234,31,234,30,16,31,19,31,42,31,42,30,174,31,87,31,63,31,121,31,26,31,119,31,181,31,125,31,198,31,108,31,237,31,25,31,25,30,38,31,190,31,124,31,124,30,30,31,178,31,62,31,209,31,209,30,209,29,42,31,155,31,212,31,19,31,101,31,10,31,226,31,245,31,138,31,45,31,221,31,224,31,92,31,16,31,129,31,129,30,67,31,67,30,141,31,15,31,11,31,144,31,162,31,162,30,162,29,70,31,67,31,66,31,226,31,127,31,172,31,95,31,95,30,19,31,133,31,118,31,65,31,254,31,165,31,189,31,198,31,122,31,70,31,70,30,9,31,219,31,89,31,228,31,228,30,18,31,18,30,18,29,160,31,160,30,89,31,124,31,189,31,119,31,193,31,54,31,160,31,160,30,103,31,57,31,22,31,175,31,11,31,144,31,150,31,220,31,220,30,232,31,2,31,193,31,193,30,45,31,127,31,159,31,134,31,53,31,65,31,30,31,30,30,79,31,185,31,52,31,22,31,14,31,53,31,174,31,50,31,136,31,61,31,119,31,28,31,177,31,177,30,236,31,41,31,142,31,140,31,166,31,155,31,94,31,160,31,248,31,248,30,61,31,61,30,16,31,164,31,29,31,140,31,140,30,203,31,240,31,240,31,240,30,114,31,20,31,183,31,183,30,147,31,91,31,16,31,133,31,81,31,107,31,65,31,234,31,5,31,5,30,177,31,143,31,143,30,108,31,108,30,210,31,158,31,158,30,181,31,91,31,18,31,212,31,212,30,3,31,161,31,186,31,125,31,52,31,77,31,81,31,17,31,17,30,143,31,143,30,143,29,228,31,243,31,2,31,2,30,220,31,224,31,224,30,104,31,11,31,6,31,6,30,221,31,121,31,116,31,208,31,208,30,124,31,68,31,5,31,5,31,195,31,53,31,239,31,208,31,166,31,125,31,106,31,192,31,52,31,255,31,207,31,207,30,107,31,176,31,102,31,22,31,22,30,5,31,87,31,94,31,86,31,177,31,33,31,33,30,144,31,144,30,155,31,177,31,104,31,238,31,243,31,243,30,167,31,52,31,244,31,98,31,255,31,144,31,182,31,19,31,19,30,5,31,87,31,39,31,39,30,173,31,173,30,192,31,66,31,168,31,168,30,171,31,122,31,122,30,207,31,233,31,65,31,110,31,242,31,24,31,6,31,217,31,217,30,132,31,95,31,109,31,185,31,247,31,176,31,50,31,121,31,83,31,61,31,248,31,233,31,148,31,34,31,133,31,2,31,100,31,152,31,192,31,22,31,212,31,34,31,111,31,111,30,6,31,6,30,196,31,196,30,215,31,41,31,36,31,36,30,30,31,30,30,65,31,182,31,182,30,98,31,72,31,4,31,26,31,249,31,57,31,216,31,249,31,182,31,72,31,101,31,236,31,47,31,251,31,12,31,18,31,97,31,114,31,178,31,178,30,46,31,75,31,131,31,131,30,102,31,36,31,228,31,248,31,194,31,186,31,186,30,63,31,80,31,80,30,194,31,194,30,113,31,224,31,156,31,167,31,176,31,112,31,104,31,196,31,28,31,161,31,5,31,137,31,219,31,219,30,118,31,214,31,11,31,11,30,89,31,77,31,175,31,60,31,22,31,22,30,22,29,22,28,22,27,199,31,199,30,35,31,76,31,190,31,169,31,188,31,186,31,124,31,148,31,244,31,53,31,67,31,104,31,178,31,178,30,186,31,26,31,26,30,26,29,127,31,182,31,144,31,83,31,83,30,78,31,240,31,240,30,134,31,62,31,147,31,252,31,45,31,240,31,98,31,28,31,74,31,145,31,185,31,167,31,167,30,236,31,6,31,118,31,34,31,198,31,29,31,12,31,12,30,80,31,13,31,13,30,47,31,194,31,5,31,5,30,4,31,31,31,110,31,146,31,186,31,143,31,178,31,116,31,68,31,170,31,180,31,180,30,193,31,214,31,40,31,17,31,45,31,246,31,246,30,147,31,145,31,145,30,145,29,136,31,236,31,236,30,208,31,122,31,122,30,170,31,239,31,247,31,148,31,39,31,39,30,209,31,117,31,234,31,73,31,9,31,9,30,89,31,77,31,148,31,36,31,150,31,47,31,12,31,12,30,98,31,2,31,9,31,192,31,142,31,32,31,244,31,244,30,95,31,31,31,220,31,202,31,128,31,36,31,167,31,250,31,250,30,123,31,23,31,15,31,86,31,85,31,40,31,174,31,236,31,95,31,58,31,127,31,131,31,79,31,203,31,203,30,160,31,48,31,37,31,37,30,164,31,114,31,144,31,240,31,240,30,26,31,26,30,135,31,131,31,131,30,131,29,230,31,56,31,7,31,136,31,224,31,137,31,31,31,31,30,50,31,8,31,155,31,182,31,206,31,121,31,208,31,254,31,139,31,139,30,74,31,209,31,1,31,126,31,228,31,77,31,13,31,13,30,13,31,11,31,57,31,57,30,211,31,223,31,223,30,235,31,93,31,91,31,25,31,3,31,86,31,157,31,139,31,105,31,167,31,167,30,215,31,98,31,98,30,143,31,143,30,143,29,67,31,225,31,151,31,2,31,7,31,127,31,195,31,55,31,255,31,255,30,180,31,173,31,144,31,42,31,95,31,95,30,121,31,243,31,83,31,50,31,50,30,59,31,243,31,38,31,158,31,163,31,84,31,84,30,84,29,84,28,44,31,133,31,95,31,37,31,51,31,103,31,245,31,209,31,79,31,22,31,36,31,60,31,136,31,136,30,2,31,2,30,177,31,177,30,177,29,177,28,58,31,58,30,160,31,160,30,160,29,101,31,226,31,179,31,86,31,68,31,159,31,159,30,225,31,40,31,79,31,168,31,138,31,27,31,158,31,90,31,55,31,55,30,163,31,163,30,23,31,26,31,33,31,197,31,197,30,64,31,219,31,194,31,194,30,79,31,117,31,20,31,174,31,174,30,182,31,199,31,199,30,19,31,72,31,19,31,19,30,105,31,162,31,16,31,16,30,10,31,228,31,45,31,97,31,114,31,101,31,101,30,2,31,93,31,151,31,114,31,79,31,103,31,66,31,241,31,185,31,74,31,166,31,135,31,61,31,41,31,71,31,80,31,80,30,172,31,233,31,231,31,28,31,239,31,19,31,1,31,5,31,60,31,157,31,160,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
