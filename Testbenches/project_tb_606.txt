-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 614;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (105,0,89,0,0,0,8,0,0,0,144,0,242,0,214,0,145,0,28,0,164,0,223,0,125,0,174,0,112,0,183,0,29,0,172,0,124,0,76,0,45,0,78,0,10,0,0,0,98,0,10,0,142,0,42,0,95,0,220,0,80,0,58,0,135,0,133,0,101,0,235,0,231,0,84,0,225,0,0,0,0,0,201,0,211,0,0,0,151,0,116,0,224,0,242,0,57,0,230,0,120,0,104,0,194,0,242,0,188,0,130,0,0,0,159,0,38,0,116,0,230,0,83,0,0,0,84,0,237,0,0,0,249,0,0,0,242,0,150,0,0,0,125,0,232,0,0,0,0,0,47,0,133,0,194,0,97,0,127,0,0,0,134,0,179,0,218,0,221,0,212,0,10,0,122,0,66,0,200,0,223,0,238,0,32,0,51,0,74,0,5,0,0,0,0,0,127,0,232,0,26,0,0,0,6,0,65,0,214,0,161,0,81,0,183,0,122,0,21,0,234,0,0,0,143,0,86,0,199,0,94,0,23,0,178,0,184,0,127,0,0,0,0,0,0,0,0,0,55,0,96,0,139,0,69,0,0,0,239,0,167,0,0,0,94,0,244,0,228,0,18,0,106,0,43,0,63,0,77,0,152,0,0,0,0,0,100,0,64,0,0,0,156,0,0,0,93,0,76,0,114,0,178,0,251,0,187,0,178,0,0,0,112,0,107,0,0,0,168,0,0,0,157,0,162,0,145,0,0,0,246,0,0,0,19,0,78,0,72,0,96,0,18,0,43,0,0,0,130,0,251,0,3,0,120,0,1,0,135,0,0,0,58,0,221,0,172,0,0,0,131,0,63,0,141,0,143,0,135,0,224,0,203,0,122,0,123,0,0,0,247,0,154,0,66,0,69,0,105,0,240,0,68,0,0,0,34,0,0,0,0,0,220,0,0,0,103,0,56,0,144,0,142,0,71,0,0,0,143,0,174,0,0,0,159,0,65,0,59,0,38,0,178,0,192,0,205,0,42,0,143,0,0,0,0,0,157,0,134,0,0,0,0,0,16,0,214,0,42,0,248,0,29,0,239,0,143,0,107,0,81,0,55,0,103,0,62,0,172,0,0,0,12,0,224,0,147,0,149,0,111,0,0,0,43,0,128,0,6,0,0,0,130,0,46,0,128,0,139,0,24,0,106,0,0,0,0,0,104,0,177,0,186,0,89,0,0,0,178,0,144,0,177,0,150,0,0,0,120,0,4,0,0,0,104,0,14,0,0,0,38,0,128,0,140,0,253,0,186,0,44,0,244,0,154,0,172,0,130,0,235,0,245,0,0,0,37,0,128,0,171,0,225,0,25,0,57,0,81,0,138,0,230,0,243,0,95,0,0,0,102,0,175,0,240,0,141,0,190,0,135,0,0,0,246,0,135,0,152,0,128,0,148,0,6,0,0,0,225,0,27,0,141,0,0,0,15,0,141,0,0,0,0,0,127,0,62,0,204,0,132,0,233,0,0,0,49,0,208,0,49,0,0,0,158,0,0,0,34,0,250,0,0,0,0,0,66,0,56,0,80,0,0,0,57,0,253,0,178,0,1,0,0,0,0,0,0,0,141,0,77,0,0,0,48,0,7,0,36,0,0,0,218,0,189,0,186,0,85,0,181,0,28,0,148,0,93,0,186,0,0,0,200,0,172,0,0,0,0,0,25,0,0,0,98,0,148,0,94,0,65,0,116,0,0,0,0,0,91,0,177,0,0,0,199,0,11,0,254,0,0,0,248,0,0,0,47,0,0,0,20,0,91,0,254,0,0,0,235,0,26,0,0,0,75,0,244,0,40,0,148,0,0,0,0,0,24,0,21,0,0,0,188,0,224,0,183,0,0,0,123,0,0,0,42,0,27,0,112,0,195,0,16,0,70,0,0,0,177,0,170,0,84,0,40,0,21,0,61,0,64,0,0,0,52,0,3,0,239,0,5,0,131,0,0,0,206,0,152,0,0,0,126,0,134,0,83,0,87,0,248,0,189,0,101,0,48,0,231,0,12,0,0,0,0,0,86,0,21,0,248,0,0,0,37,0,245,0,49,0,0,0,57,0,4,0,12,0,135,0,186,0,82,0,0,0,150,0,244,0,102,0,49,0,56,0,63,0,127,0,0,0,177,0,0,0,47,0,0,0,57,0,28,0,15,0,11,0,117,0,0,0,78,0,237,0,116,0,218,0,27,0,93,0,107,0,5,0,116,0,211,0,219,0,110,0,0,0,240,0,183,0,145,0,111,0,0,0,0,0,119,0,236,0,187,0,10,0,28,0,35,0,193,0,0,0,113,0,57,0,51,0,157,0,93,0,168,0,187,0,0,0,162,0,215,0,153,0,86,0,31,0,44,0,179,0,216,0,222,0,33,0,95,0,157,0,123,0,122,0,124,0,175,0,93,0,190,0,190,0,115,0,87,0,112,0,8,0,147,0,0,0,29,0,0,0,222,0,26,0,94,0,70,0,0,0,159,0,172,0,0,0,185,0,12,0,157,0,88,0,0,0,226,0,110,0,223,0,0,0,0,0,0,0,80,0,31,0,4,0,164,0,74,0,43,0,11,0,53,0,239,0,174,0,50,0,0,0,169,0,109,0,243,0,172,0,241,0,252,0,26,0,0,0,167,0,0,0,42,0,12,0,222,0,118,0,175,0,48,0,50,0,0,0,0,0,119,0,0,0,0,0,197,0,69,0,131,0,0,0,0,0,246,0,0,0,206,0,106,0,0,0,138,0,84,0,99,0);
signal scenario_full  : scenario_type := (105,31,89,31,89,30,8,31,8,30,144,31,242,31,214,31,145,31,28,31,164,31,223,31,125,31,174,31,112,31,183,31,29,31,172,31,124,31,76,31,45,31,78,31,10,31,10,30,98,31,10,31,142,31,42,31,95,31,220,31,80,31,58,31,135,31,133,31,101,31,235,31,231,31,84,31,225,31,225,30,225,29,201,31,211,31,211,30,151,31,116,31,224,31,242,31,57,31,230,31,120,31,104,31,194,31,242,31,188,31,130,31,130,30,159,31,38,31,116,31,230,31,83,31,83,30,84,31,237,31,237,30,249,31,249,30,242,31,150,31,150,30,125,31,232,31,232,30,232,29,47,31,133,31,194,31,97,31,127,31,127,30,134,31,179,31,218,31,221,31,212,31,10,31,122,31,66,31,200,31,223,31,238,31,32,31,51,31,74,31,5,31,5,30,5,29,127,31,232,31,26,31,26,30,6,31,65,31,214,31,161,31,81,31,183,31,122,31,21,31,234,31,234,30,143,31,86,31,199,31,94,31,23,31,178,31,184,31,127,31,127,30,127,29,127,28,127,27,55,31,96,31,139,31,69,31,69,30,239,31,167,31,167,30,94,31,244,31,228,31,18,31,106,31,43,31,63,31,77,31,152,31,152,30,152,29,100,31,64,31,64,30,156,31,156,30,93,31,76,31,114,31,178,31,251,31,187,31,178,31,178,30,112,31,107,31,107,30,168,31,168,30,157,31,162,31,145,31,145,30,246,31,246,30,19,31,78,31,72,31,96,31,18,31,43,31,43,30,130,31,251,31,3,31,120,31,1,31,135,31,135,30,58,31,221,31,172,31,172,30,131,31,63,31,141,31,143,31,135,31,224,31,203,31,122,31,123,31,123,30,247,31,154,31,66,31,69,31,105,31,240,31,68,31,68,30,34,31,34,30,34,29,220,31,220,30,103,31,56,31,144,31,142,31,71,31,71,30,143,31,174,31,174,30,159,31,65,31,59,31,38,31,178,31,192,31,205,31,42,31,143,31,143,30,143,29,157,31,134,31,134,30,134,29,16,31,214,31,42,31,248,31,29,31,239,31,143,31,107,31,81,31,55,31,103,31,62,31,172,31,172,30,12,31,224,31,147,31,149,31,111,31,111,30,43,31,128,31,6,31,6,30,130,31,46,31,128,31,139,31,24,31,106,31,106,30,106,29,104,31,177,31,186,31,89,31,89,30,178,31,144,31,177,31,150,31,150,30,120,31,4,31,4,30,104,31,14,31,14,30,38,31,128,31,140,31,253,31,186,31,44,31,244,31,154,31,172,31,130,31,235,31,245,31,245,30,37,31,128,31,171,31,225,31,25,31,57,31,81,31,138,31,230,31,243,31,95,31,95,30,102,31,175,31,240,31,141,31,190,31,135,31,135,30,246,31,135,31,152,31,128,31,148,31,6,31,6,30,225,31,27,31,141,31,141,30,15,31,141,31,141,30,141,29,127,31,62,31,204,31,132,31,233,31,233,30,49,31,208,31,49,31,49,30,158,31,158,30,34,31,250,31,250,30,250,29,66,31,56,31,80,31,80,30,57,31,253,31,178,31,1,31,1,30,1,29,1,28,141,31,77,31,77,30,48,31,7,31,36,31,36,30,218,31,189,31,186,31,85,31,181,31,28,31,148,31,93,31,186,31,186,30,200,31,172,31,172,30,172,29,25,31,25,30,98,31,148,31,94,31,65,31,116,31,116,30,116,29,91,31,177,31,177,30,199,31,11,31,254,31,254,30,248,31,248,30,47,31,47,30,20,31,91,31,254,31,254,30,235,31,26,31,26,30,75,31,244,31,40,31,148,31,148,30,148,29,24,31,21,31,21,30,188,31,224,31,183,31,183,30,123,31,123,30,42,31,27,31,112,31,195,31,16,31,70,31,70,30,177,31,170,31,84,31,40,31,21,31,61,31,64,31,64,30,52,31,3,31,239,31,5,31,131,31,131,30,206,31,152,31,152,30,126,31,134,31,83,31,87,31,248,31,189,31,101,31,48,31,231,31,12,31,12,30,12,29,86,31,21,31,248,31,248,30,37,31,245,31,49,31,49,30,57,31,4,31,12,31,135,31,186,31,82,31,82,30,150,31,244,31,102,31,49,31,56,31,63,31,127,31,127,30,177,31,177,30,47,31,47,30,57,31,28,31,15,31,11,31,117,31,117,30,78,31,237,31,116,31,218,31,27,31,93,31,107,31,5,31,116,31,211,31,219,31,110,31,110,30,240,31,183,31,145,31,111,31,111,30,111,29,119,31,236,31,187,31,10,31,28,31,35,31,193,31,193,30,113,31,57,31,51,31,157,31,93,31,168,31,187,31,187,30,162,31,215,31,153,31,86,31,31,31,44,31,179,31,216,31,222,31,33,31,95,31,157,31,123,31,122,31,124,31,175,31,93,31,190,31,190,31,115,31,87,31,112,31,8,31,147,31,147,30,29,31,29,30,222,31,26,31,94,31,70,31,70,30,159,31,172,31,172,30,185,31,12,31,157,31,88,31,88,30,226,31,110,31,223,31,223,30,223,29,223,28,80,31,31,31,4,31,164,31,74,31,43,31,11,31,53,31,239,31,174,31,50,31,50,30,169,31,109,31,243,31,172,31,241,31,252,31,26,31,26,30,167,31,167,30,42,31,12,31,222,31,118,31,175,31,48,31,50,31,50,30,50,29,119,31,119,30,119,29,197,31,69,31,131,31,131,30,131,29,246,31,246,30,206,31,106,31,106,30,138,31,84,31,99,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
