-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 513;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (79,0,52,0,95,0,171,0,65,0,219,0,0,0,0,0,0,0,106,0,0,0,105,0,57,0,0,0,102,0,0,0,59,0,192,0,104,0,0,0,141,0,120,0,115,0,39,0,53,0,139,0,0,0,221,0,14,0,152,0,205,0,119,0,122,0,234,0,0,0,4,0,132,0,70,0,88,0,108,0,58,0,9,0,198,0,0,0,116,0,0,0,62,0,198,0,96,0,183,0,0,0,202,0,0,0,12,0,181,0,25,0,0,0,195,0,158,0,160,0,8,0,66,0,213,0,0,0,254,0,21,0,252,0,244,0,100,0,170,0,0,0,97,0,0,0,250,0,145,0,135,0,200,0,49,0,240,0,0,0,253,0,178,0,0,0,15,0,0,0,0,0,0,0,99,0,0,0,9,0,61,0,235,0,206,0,57,0,164,0,49,0,37,0,0,0,114,0,73,0,42,0,230,0,86,0,52,0,0,0,0,0,111,0,42,0,149,0,0,0,207,0,78,0,0,0,61,0,0,0,73,0,185,0,240,0,210,0,102,0,82,0,130,0,3,0,194,0,232,0,147,0,80,0,193,0,0,0,145,0,123,0,54,0,218,0,0,0,17,0,9,0,24,0,0,0,0,0,163,0,187,0,0,0,80,0,153,0,171,0,255,0,245,0,68,0,14,0,113,0,158,0,136,0,130,0,137,0,86,0,77,0,0,0,53,0,8,0,165,0,12,0,140,0,104,0,96,0,0,0,181,0,215,0,71,0,70,0,74,0,61,0,60,0,10,0,248,0,0,0,0,0,98,0,243,0,239,0,195,0,138,0,54,0,0,0,159,0,0,0,0,0,52,0,241,0,140,0,29,0,63,0,27,0,244,0,34,0,93,0,34,0,122,0,35,0,28,0,156,0,0,0,149,0,0,0,203,0,108,0,107,0,161,0,109,0,111,0,210,0,51,0,182,0,99,0,64,0,166,0,160,0,78,0,0,0,0,0,160,0,134,0,0,0,0,0,0,0,0,0,55,0,21,0,196,0,84,0,167,0,137,0,133,0,24,0,86,0,192,0,20,0,46,0,62,0,0,0,202,0,0,0,22,0,242,0,163,0,204,0,149,0,115,0,67,0,245,0,200,0,0,0,118,0,0,0,7,0,0,0,48,0,33,0,170,0,150,0,206,0,0,0,0,0,147,0,83,0,159,0,9,0,33,0,16,0,152,0,43,0,6,0,150,0,150,0,36,0,67,0,132,0,250,0,197,0,160,0,54,0,56,0,136,0,0,0,218,0,113,0,161,0,0,0,129,0,0,0,189,0,222,0,99,0,228,0,81,0,72,0,68,0,179,0,228,0,164,0,0,0,82,0,0,0,108,0,124,0,44,0,6,0,0,0,54,0,74,0,0,0,71,0,98,0,200,0,145,0,129,0,217,0,0,0,150,0,50,0,0,0,130,0,96,0,249,0,85,0,97,0,0,0,252,0,0,0,11,0,235,0,65,0,182,0,0,0,0,0,0,0,9,0,139,0,145,0,35,0,0,0,254,0,0,0,0,0,0,0,152,0,62,0,231,0,53,0,107,0,52,0,127,0,15,0,103,0,177,0,195,0,9,0,155,0,104,0,143,0,0,0,176,0,208,0,86,0,135,0,193,0,0,0,156,0,59,0,0,0,0,0,38,0,71,0,0,0,223,0,133,0,193,0,161,0,0,0,135,0,41,0,13,0,184,0,182,0,0,0,169,0,86,0,122,0,43,0,44,0,242,0,195,0,0,0,142,0,72,0,20,0,63,0,114,0,207,0,40,0,0,0,52,0,102,0,110,0,12,0,215,0,98,0,97,0,103,0,155,0,0,0,14,0,0,0,161,0,219,0,11,0,95,0,0,0,148,0,0,0,126,0,196,0,58,0,240,0,82,0,52,0,68,0,225,0,239,0,166,0,0,0,0,0,122,0,132,0,198,0,0,0,0,0,32,0,217,0,224,0,133,0,1,0,67,0,0,0,69,0,197,0,0,0,72,0,75,0,93,0,194,0,103,0,110,0,196,0,24,0,151,0,59,0,10,0,84,0,180,0,206,0,253,0,158,0,23,0,227,0,127,0,126,0,223,0,8,0,52,0,85,0,79,0,0,0,176,0,206,0,249,0,115,0,159,0,89,0,0,0,0,0,123,0,220,0,140,0,190,0,0,0,118,0,57,0,6,0,144,0,111,0,249,0,48,0,153,0,205,0,0,0,0,0,79,0,220,0,0,0,0,0,215,0,5,0,239,0,0,0,0,0,106,0,0,0,187,0,17,0,0,0,114,0,151,0,0,0);
signal scenario_full  : scenario_type := (79,31,52,31,95,31,171,31,65,31,219,31,219,30,219,29,219,28,106,31,106,30,105,31,57,31,57,30,102,31,102,30,59,31,192,31,104,31,104,30,141,31,120,31,115,31,39,31,53,31,139,31,139,30,221,31,14,31,152,31,205,31,119,31,122,31,234,31,234,30,4,31,132,31,70,31,88,31,108,31,58,31,9,31,198,31,198,30,116,31,116,30,62,31,198,31,96,31,183,31,183,30,202,31,202,30,12,31,181,31,25,31,25,30,195,31,158,31,160,31,8,31,66,31,213,31,213,30,254,31,21,31,252,31,244,31,100,31,170,31,170,30,97,31,97,30,250,31,145,31,135,31,200,31,49,31,240,31,240,30,253,31,178,31,178,30,15,31,15,30,15,29,15,28,99,31,99,30,9,31,61,31,235,31,206,31,57,31,164,31,49,31,37,31,37,30,114,31,73,31,42,31,230,31,86,31,52,31,52,30,52,29,111,31,42,31,149,31,149,30,207,31,78,31,78,30,61,31,61,30,73,31,185,31,240,31,210,31,102,31,82,31,130,31,3,31,194,31,232,31,147,31,80,31,193,31,193,30,145,31,123,31,54,31,218,31,218,30,17,31,9,31,24,31,24,30,24,29,163,31,187,31,187,30,80,31,153,31,171,31,255,31,245,31,68,31,14,31,113,31,158,31,136,31,130,31,137,31,86,31,77,31,77,30,53,31,8,31,165,31,12,31,140,31,104,31,96,31,96,30,181,31,215,31,71,31,70,31,74,31,61,31,60,31,10,31,248,31,248,30,248,29,98,31,243,31,239,31,195,31,138,31,54,31,54,30,159,31,159,30,159,29,52,31,241,31,140,31,29,31,63,31,27,31,244,31,34,31,93,31,34,31,122,31,35,31,28,31,156,31,156,30,149,31,149,30,203,31,108,31,107,31,161,31,109,31,111,31,210,31,51,31,182,31,99,31,64,31,166,31,160,31,78,31,78,30,78,29,160,31,134,31,134,30,134,29,134,28,134,27,55,31,21,31,196,31,84,31,167,31,137,31,133,31,24,31,86,31,192,31,20,31,46,31,62,31,62,30,202,31,202,30,22,31,242,31,163,31,204,31,149,31,115,31,67,31,245,31,200,31,200,30,118,31,118,30,7,31,7,30,48,31,33,31,170,31,150,31,206,31,206,30,206,29,147,31,83,31,159,31,9,31,33,31,16,31,152,31,43,31,6,31,150,31,150,31,36,31,67,31,132,31,250,31,197,31,160,31,54,31,56,31,136,31,136,30,218,31,113,31,161,31,161,30,129,31,129,30,189,31,222,31,99,31,228,31,81,31,72,31,68,31,179,31,228,31,164,31,164,30,82,31,82,30,108,31,124,31,44,31,6,31,6,30,54,31,74,31,74,30,71,31,98,31,200,31,145,31,129,31,217,31,217,30,150,31,50,31,50,30,130,31,96,31,249,31,85,31,97,31,97,30,252,31,252,30,11,31,235,31,65,31,182,31,182,30,182,29,182,28,9,31,139,31,145,31,35,31,35,30,254,31,254,30,254,29,254,28,152,31,62,31,231,31,53,31,107,31,52,31,127,31,15,31,103,31,177,31,195,31,9,31,155,31,104,31,143,31,143,30,176,31,208,31,86,31,135,31,193,31,193,30,156,31,59,31,59,30,59,29,38,31,71,31,71,30,223,31,133,31,193,31,161,31,161,30,135,31,41,31,13,31,184,31,182,31,182,30,169,31,86,31,122,31,43,31,44,31,242,31,195,31,195,30,142,31,72,31,20,31,63,31,114,31,207,31,40,31,40,30,52,31,102,31,110,31,12,31,215,31,98,31,97,31,103,31,155,31,155,30,14,31,14,30,161,31,219,31,11,31,95,31,95,30,148,31,148,30,126,31,196,31,58,31,240,31,82,31,52,31,68,31,225,31,239,31,166,31,166,30,166,29,122,31,132,31,198,31,198,30,198,29,32,31,217,31,224,31,133,31,1,31,67,31,67,30,69,31,197,31,197,30,72,31,75,31,93,31,194,31,103,31,110,31,196,31,24,31,151,31,59,31,10,31,84,31,180,31,206,31,253,31,158,31,23,31,227,31,127,31,126,31,223,31,8,31,52,31,85,31,79,31,79,30,176,31,206,31,249,31,115,31,159,31,89,31,89,30,89,29,123,31,220,31,140,31,190,31,190,30,118,31,57,31,6,31,144,31,111,31,249,31,48,31,153,31,205,31,205,30,205,29,79,31,220,31,220,30,220,29,215,31,5,31,239,31,239,30,239,29,106,31,106,30,187,31,17,31,17,30,114,31,151,31,151,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
