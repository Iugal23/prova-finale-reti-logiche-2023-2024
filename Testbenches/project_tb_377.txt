-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 985;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (10,0,74,0,214,0,43,0,0,0,101,0,77,0,181,0,150,0,0,0,211,0,147,0,56,0,158,0,45,0,247,0,90,0,42,0,0,0,0,0,0,0,0,0,142,0,77,0,206,0,81,0,191,0,239,0,234,0,166,0,211,0,217,0,226,0,133,0,40,0,54,0,0,0,189,0,0,0,7,0,0,0,27,0,222,0,4,0,64,0,101,0,181,0,49,0,234,0,220,0,248,0,176,0,0,0,82,0,209,0,166,0,7,0,85,0,49,0,7,0,0,0,0,0,0,0,0,0,236,0,86,0,39,0,0,0,134,0,0,0,0,0,29,0,0,0,92,0,140,0,58,0,187,0,184,0,25,0,158,0,74,0,230,0,6,0,80,0,21,0,88,0,0,0,124,0,227,0,56,0,164,0,88,0,69,0,189,0,118,0,178,0,0,0,0,0,166,0,226,0,127,0,130,0,0,0,0,0,0,0,26,0,0,0,42,0,32,0,103,0,0,0,83,0,29,0,42,0,159,0,53,0,56,0,211,0,61,0,244,0,41,0,0,0,0,0,153,0,76,0,198,0,113,0,185,0,171,0,239,0,80,0,181,0,16,0,225,0,0,0,14,0,40,0,59,0,50,0,195,0,105,0,91,0,0,0,182,0,137,0,0,0,85,0,0,0,30,0,174,0,2,0,76,0,210,0,75,0,86,0,0,0,73,0,207,0,44,0,0,0,131,0,1,0,86,0,15,0,215,0,155,0,66,0,128,0,198,0,0,0,63,0,195,0,241,0,152,0,60,0,206,0,216,0,194,0,0,0,195,0,0,0,194,0,106,0,210,0,180,0,0,0,131,0,22,0,55,0,40,0,0,0,0,0,189,0,180,0,62,0,0,0,0,0,244,0,235,0,86,0,102,0,0,0,76,0,159,0,21,0,204,0,104,0,234,0,45,0,192,0,0,0,7,0,14,0,176,0,237,0,241,0,33,0,23,0,149,0,146,0,125,0,129,0,190,0,243,0,19,0,0,0,28,0,43,0,94,0,31,0,144,0,251,0,25,0,49,0,1,0,39,0,100,0,170,0,2,0,0,0,0,0,182,0,61,0,0,0,79,0,39,0,190,0,226,0,208,0,94,0,210,0,126,0,13,0,128,0,65,0,216,0,109,0,18,0,128,0,0,0,0,0,161,0,228,0,0,0,237,0,255,0,74,0,0,0,0,0,206,0,131,0,151,0,210,0,238,0,151,0,236,0,96,0,206,0,11,0,235,0,101,0,0,0,80,0,61,0,0,0,208,0,215,0,105,0,0,0,0,0,5,0,11,0,0,0,113,0,200,0,178,0,12,0,75,0,59,0,112,0,241,0,160,0,108,0,34,0,167,0,0,0,2,0,0,0,145,0,66,0,0,0,143,0,226,0,42,0,255,0,0,0,0,0,0,0,212,0,185,0,239,0,0,0,113,0,0,0,0,0,175,0,34,0,214,0,230,0,31,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,117,0,159,0,217,0,53,0,222,0,103,0,0,0,51,0,133,0,163,0,86,0,139,0,13,0,91,0,0,0,225,0,80,0,141,0,230,0,181,0,245,0,176,0,234,0,123,0,54,0,0,0,103,0,77,0,6,0,69,0,0,0,103,0,20,0,160,0,29,0,195,0,201,0,122,0,112,0,0,0,0,0,148,0,112,0,22,0,198,0,15,0,27,0,191,0,235,0,205,0,55,0,86,0,119,0,0,0,149,0,0,0,239,0,107,0,225,0,144,0,247,0,23,0,20,0,211,0,215,0,213,0,0,0,0,0,0,0,25,0,0,0,82,0,234,0,120,0,0,0,195,0,6,0,226,0,184,0,63,0,92,0,75,0,83,0,233,0,0,0,90,0,242,0,78,0,24,0,220,0,20,0,181,0,240,0,92,0,61,0,240,0,161,0,177,0,135,0,1,0,0,0,0,0,245,0,199,0,0,0,13,0,245,0,130,0,230,0,106,0,200,0,0,0,32,0,254,0,185,0,247,0,87,0,26,0,237,0,0,0,46,0,0,0,131,0,151,0,139,0,50,0,0,0,0,0,77,0,83,0,123,0,0,0,8,0,243,0,222,0,15,0,84,0,90,0,168,0,100,0,0,0,36,0,7,0,191,0,135,0,21,0,0,0,100,0,253,0,76,0,237,0,178,0,4,0,0,0,0,0,3,0,171,0,0,0,105,0,255,0,109,0,0,0,13,0,45,0,133,0,123,0,0,0,248,0,0,0,103,0,219,0,0,0,0,0,220,0,126,0,163,0,182,0,112,0,0,0,118,0,164,0,0,0,153,0,210,0,136,0,116,0,102,0,230,0,233,0,63,0,104,0,0,0,80,0,0,0,187,0,215,0,171,0,47,0,223,0,153,0,0,0,148,0,0,0,139,0,186,0,152,0,240,0,149,0,0,0,204,0,141,0,121,0,171,0,248,0,104,0,95,0,75,0,153,0,7,0,55,0,210,0,1,0,146,0,0,0,130,0,147,0,198,0,23,0,154,0,198,0,15,0,59,0,87,0,0,0,0,0,223,0,0,0,244,0,100,0,0,0,40,0,0,0,0,0,0,0,143,0,40,0,0,0,205,0,0,0,144,0,136,0,196,0,0,0,0,0,137,0,43,0,169,0,103,0,255,0,131,0,0,0,0,0,11,0,136,0,227,0,0,0,13,0,93,0,163,0,218,0,126,0,75,0,137,0,238,0,241,0,203,0,120,0,71,0,71,0,31,0,224,0,0,0,185,0,178,0,106,0,0,0,217,0,144,0,87,0,0,0,16,0,0,0,69,0,211,0,16,0,117,0,162,0,202,0,0,0,206,0,141,0,201,0,12,0,204,0,91,0,29,0,177,0,224,0,78,0,0,0,84,0,0,0,250,0,141,0,119,0,196,0,167,0,94,0,233,0,199,0,131,0,191,0,0,0,221,0,204,0,196,0,134,0,167,0,194,0,0,0,107,0,116,0,28,0,26,0,146,0,138,0,133,0,39,0,133,0,78,0,165,0,198,0,0,0,30,0,72,0,153,0,61,0,58,0,157,0,159,0,21,0,90,0,0,0,42,0,170,0,138,0,241,0,41,0,0,0,18,0,163,0,0,0,243,0,0,0,253,0,197,0,77,0,36,0,0,0,13,0,9,0,36,0,155,0,0,0,163,0,0,0,0,0,120,0,0,0,26,0,37,0,252,0,240,0,63,0,0,0,45,0,37,0,44,0,168,0,151,0,192,0,227,0,0,0,71,0,54,0,213,0,249,0,0,0,201,0,193,0,111,0,251,0,79,0,0,0,8,0,128,0,174,0,149,0,79,0,109,0,0,0,124,0,165,0,0,0,158,0,12,0,0,0,114,0,212,0,124,0,0,0,55,0,157,0,130,0,89,0,81,0,190,0,196,0,186,0,233,0,178,0,187,0,198,0,87,0,63,0,0,0,69,0,125,0,107,0,73,0,101,0,134,0,12,0,220,0,0,0,178,0,240,0,216,0,19,0,103,0,219,0,0,0,220,0,63,0,159,0,167,0,0,0,239,0,0,0,0,0,70,0,77,0,220,0,166,0,166,0,87,0,103,0,84,0,24,0,18,0,176,0,49,0,0,0,68,0,102,0,111,0,202,0,118,0,0,0,212,0,23,0,220,0,235,0,201,0,53,0,54,0,38,0,235,0,201,0,63,0,159,0,175,0,116,0,112,0,246,0,197,0,0,0,198,0,24,0,89,0,46,0,63,0,0,0,178,0,102,0,138,0,65,0,137,0,0,0,53,0,241,0,0,0,91,0,11,0,89,0,167,0,0,0,93,0,235,0,98,0,43,0,0,0,114,0,96,0,0,0,69,0,31,0,144,0,0,0,18,0,140,0,181,0,20,0,247,0,85,0,180,0,217,0,0,0,169,0,193,0,223,0,19,0,104,0,11,0,0,0,121,0,0,0,242,0,71,0,200,0,0,0,247,0,80,0,0,0,42,0,170,0,0,0,144,0,87,0,22,0,13,0,114,0,161,0,139,0,242,0,0,0,246,0,71,0,0,0,113,0,227,0,173,0,70,0,5,0,79,0,166,0,116,0,206,0,238,0,227,0,4,0,154,0,239,0,190,0,151,0,164,0,0,0,0,0,175,0,119,0,122,0,42,0,62,0,0,0,177,0,166,0,0,0,155,0,161,0,123,0,27,0,237,0,43,0,7,0,0,0,58,0,0,0,0,0,75,0,0,0,52,0,149,0,111,0,118,0,135,0,226,0,125,0,116,0,0,0,188,0,39,0,85,0,197,0,152,0,203,0,242,0,52,0,117,0,0,0,241,0,187,0,210,0,129,0,18,0,16,0,150,0,235,0,243,0,180,0,106,0,170,0,149,0,71,0,185,0,220,0,0,0,0,0);
signal scenario_full  : scenario_type := (10,31,74,31,214,31,43,31,43,30,101,31,77,31,181,31,150,31,150,30,211,31,147,31,56,31,158,31,45,31,247,31,90,31,42,31,42,30,42,29,42,28,42,27,142,31,77,31,206,31,81,31,191,31,239,31,234,31,166,31,211,31,217,31,226,31,133,31,40,31,54,31,54,30,189,31,189,30,7,31,7,30,27,31,222,31,4,31,64,31,101,31,181,31,49,31,234,31,220,31,248,31,176,31,176,30,82,31,209,31,166,31,7,31,85,31,49,31,7,31,7,30,7,29,7,28,7,27,236,31,86,31,39,31,39,30,134,31,134,30,134,29,29,31,29,30,92,31,140,31,58,31,187,31,184,31,25,31,158,31,74,31,230,31,6,31,80,31,21,31,88,31,88,30,124,31,227,31,56,31,164,31,88,31,69,31,189,31,118,31,178,31,178,30,178,29,166,31,226,31,127,31,130,31,130,30,130,29,130,28,26,31,26,30,42,31,32,31,103,31,103,30,83,31,29,31,42,31,159,31,53,31,56,31,211,31,61,31,244,31,41,31,41,30,41,29,153,31,76,31,198,31,113,31,185,31,171,31,239,31,80,31,181,31,16,31,225,31,225,30,14,31,40,31,59,31,50,31,195,31,105,31,91,31,91,30,182,31,137,31,137,30,85,31,85,30,30,31,174,31,2,31,76,31,210,31,75,31,86,31,86,30,73,31,207,31,44,31,44,30,131,31,1,31,86,31,15,31,215,31,155,31,66,31,128,31,198,31,198,30,63,31,195,31,241,31,152,31,60,31,206,31,216,31,194,31,194,30,195,31,195,30,194,31,106,31,210,31,180,31,180,30,131,31,22,31,55,31,40,31,40,30,40,29,189,31,180,31,62,31,62,30,62,29,244,31,235,31,86,31,102,31,102,30,76,31,159,31,21,31,204,31,104,31,234,31,45,31,192,31,192,30,7,31,14,31,176,31,237,31,241,31,33,31,23,31,149,31,146,31,125,31,129,31,190,31,243,31,19,31,19,30,28,31,43,31,94,31,31,31,144,31,251,31,25,31,49,31,1,31,39,31,100,31,170,31,2,31,2,30,2,29,182,31,61,31,61,30,79,31,39,31,190,31,226,31,208,31,94,31,210,31,126,31,13,31,128,31,65,31,216,31,109,31,18,31,128,31,128,30,128,29,161,31,228,31,228,30,237,31,255,31,74,31,74,30,74,29,206,31,131,31,151,31,210,31,238,31,151,31,236,31,96,31,206,31,11,31,235,31,101,31,101,30,80,31,61,31,61,30,208,31,215,31,105,31,105,30,105,29,5,31,11,31,11,30,113,31,200,31,178,31,12,31,75,31,59,31,112,31,241,31,160,31,108,31,34,31,167,31,167,30,2,31,2,30,145,31,66,31,66,30,143,31,226,31,42,31,255,31,255,30,255,29,255,28,212,31,185,31,239,31,239,30,113,31,113,30,113,29,175,31,34,31,214,31,230,31,31,31,31,30,31,29,31,28,31,27,35,31,35,30,35,29,35,28,117,31,159,31,217,31,53,31,222,31,103,31,103,30,51,31,133,31,163,31,86,31,139,31,13,31,91,31,91,30,225,31,80,31,141,31,230,31,181,31,245,31,176,31,234,31,123,31,54,31,54,30,103,31,77,31,6,31,69,31,69,30,103,31,20,31,160,31,29,31,195,31,201,31,122,31,112,31,112,30,112,29,148,31,112,31,22,31,198,31,15,31,27,31,191,31,235,31,205,31,55,31,86,31,119,31,119,30,149,31,149,30,239,31,107,31,225,31,144,31,247,31,23,31,20,31,211,31,215,31,213,31,213,30,213,29,213,28,25,31,25,30,82,31,234,31,120,31,120,30,195,31,6,31,226,31,184,31,63,31,92,31,75,31,83,31,233,31,233,30,90,31,242,31,78,31,24,31,220,31,20,31,181,31,240,31,92,31,61,31,240,31,161,31,177,31,135,31,1,31,1,30,1,29,245,31,199,31,199,30,13,31,245,31,130,31,230,31,106,31,200,31,200,30,32,31,254,31,185,31,247,31,87,31,26,31,237,31,237,30,46,31,46,30,131,31,151,31,139,31,50,31,50,30,50,29,77,31,83,31,123,31,123,30,8,31,243,31,222,31,15,31,84,31,90,31,168,31,100,31,100,30,36,31,7,31,191,31,135,31,21,31,21,30,100,31,253,31,76,31,237,31,178,31,4,31,4,30,4,29,3,31,171,31,171,30,105,31,255,31,109,31,109,30,13,31,45,31,133,31,123,31,123,30,248,31,248,30,103,31,219,31,219,30,219,29,220,31,126,31,163,31,182,31,112,31,112,30,118,31,164,31,164,30,153,31,210,31,136,31,116,31,102,31,230,31,233,31,63,31,104,31,104,30,80,31,80,30,187,31,215,31,171,31,47,31,223,31,153,31,153,30,148,31,148,30,139,31,186,31,152,31,240,31,149,31,149,30,204,31,141,31,121,31,171,31,248,31,104,31,95,31,75,31,153,31,7,31,55,31,210,31,1,31,146,31,146,30,130,31,147,31,198,31,23,31,154,31,198,31,15,31,59,31,87,31,87,30,87,29,223,31,223,30,244,31,100,31,100,30,40,31,40,30,40,29,40,28,143,31,40,31,40,30,205,31,205,30,144,31,136,31,196,31,196,30,196,29,137,31,43,31,169,31,103,31,255,31,131,31,131,30,131,29,11,31,136,31,227,31,227,30,13,31,93,31,163,31,218,31,126,31,75,31,137,31,238,31,241,31,203,31,120,31,71,31,71,31,31,31,224,31,224,30,185,31,178,31,106,31,106,30,217,31,144,31,87,31,87,30,16,31,16,30,69,31,211,31,16,31,117,31,162,31,202,31,202,30,206,31,141,31,201,31,12,31,204,31,91,31,29,31,177,31,224,31,78,31,78,30,84,31,84,30,250,31,141,31,119,31,196,31,167,31,94,31,233,31,199,31,131,31,191,31,191,30,221,31,204,31,196,31,134,31,167,31,194,31,194,30,107,31,116,31,28,31,26,31,146,31,138,31,133,31,39,31,133,31,78,31,165,31,198,31,198,30,30,31,72,31,153,31,61,31,58,31,157,31,159,31,21,31,90,31,90,30,42,31,170,31,138,31,241,31,41,31,41,30,18,31,163,31,163,30,243,31,243,30,253,31,197,31,77,31,36,31,36,30,13,31,9,31,36,31,155,31,155,30,163,31,163,30,163,29,120,31,120,30,26,31,37,31,252,31,240,31,63,31,63,30,45,31,37,31,44,31,168,31,151,31,192,31,227,31,227,30,71,31,54,31,213,31,249,31,249,30,201,31,193,31,111,31,251,31,79,31,79,30,8,31,128,31,174,31,149,31,79,31,109,31,109,30,124,31,165,31,165,30,158,31,12,31,12,30,114,31,212,31,124,31,124,30,55,31,157,31,130,31,89,31,81,31,190,31,196,31,186,31,233,31,178,31,187,31,198,31,87,31,63,31,63,30,69,31,125,31,107,31,73,31,101,31,134,31,12,31,220,31,220,30,178,31,240,31,216,31,19,31,103,31,219,31,219,30,220,31,63,31,159,31,167,31,167,30,239,31,239,30,239,29,70,31,77,31,220,31,166,31,166,31,87,31,103,31,84,31,24,31,18,31,176,31,49,31,49,30,68,31,102,31,111,31,202,31,118,31,118,30,212,31,23,31,220,31,235,31,201,31,53,31,54,31,38,31,235,31,201,31,63,31,159,31,175,31,116,31,112,31,246,31,197,31,197,30,198,31,24,31,89,31,46,31,63,31,63,30,178,31,102,31,138,31,65,31,137,31,137,30,53,31,241,31,241,30,91,31,11,31,89,31,167,31,167,30,93,31,235,31,98,31,43,31,43,30,114,31,96,31,96,30,69,31,31,31,144,31,144,30,18,31,140,31,181,31,20,31,247,31,85,31,180,31,217,31,217,30,169,31,193,31,223,31,19,31,104,31,11,31,11,30,121,31,121,30,242,31,71,31,200,31,200,30,247,31,80,31,80,30,42,31,170,31,170,30,144,31,87,31,22,31,13,31,114,31,161,31,139,31,242,31,242,30,246,31,71,31,71,30,113,31,227,31,173,31,70,31,5,31,79,31,166,31,116,31,206,31,238,31,227,31,4,31,154,31,239,31,190,31,151,31,164,31,164,30,164,29,175,31,119,31,122,31,42,31,62,31,62,30,177,31,166,31,166,30,155,31,161,31,123,31,27,31,237,31,43,31,7,31,7,30,58,31,58,30,58,29,75,31,75,30,52,31,149,31,111,31,118,31,135,31,226,31,125,31,116,31,116,30,188,31,39,31,85,31,197,31,152,31,203,31,242,31,52,31,117,31,117,30,241,31,187,31,210,31,129,31,18,31,16,31,150,31,235,31,243,31,180,31,106,31,170,31,149,31,71,31,185,31,220,31,220,30,220,29);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
