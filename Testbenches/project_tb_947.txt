-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 497;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (186,0,114,0,122,0,165,0,0,0,192,0,247,0,96,0,119,0,0,0,246,0,139,0,139,0,230,0,139,0,183,0,0,0,129,0,72,0,21,0,95,0,36,0,32,0,2,0,15,0,221,0,228,0,253,0,238,0,139,0,227,0,237,0,241,0,0,0,0,0,0,0,228,0,29,0,52,0,150,0,241,0,224,0,134,0,13,0,0,0,199,0,40,0,0,0,146,0,67,0,232,0,60,0,150,0,0,0,0,0,131,0,0,0,113,0,204,0,190,0,118,0,62,0,0,0,192,0,240,0,247,0,225,0,28,0,254,0,140,0,16,0,143,0,43,0,138,0,8,0,204,0,89,0,240,0,155,0,175,0,6,0,0,0,55,0,157,0,0,0,157,0,0,0,0,0,52,0,192,0,237,0,224,0,209,0,177,0,70,0,240,0,0,0,109,0,146,0,0,0,133,0,144,0,0,0,25,0,6,0,225,0,246,0,0,0,243,0,120,0,23,0,180,0,3,0,216,0,235,0,195,0,29,0,96,0,230,0,207,0,119,0,26,0,123,0,0,0,0,0,66,0,88,0,230,0,238,0,48,0,0,0,0,0,17,0,0,0,48,0,66,0,61,0,94,0,191,0,197,0,0,0,248,0,56,0,106,0,0,0,0,0,91,0,59,0,71,0,109,0,180,0,229,0,0,0,0,0,59,0,176,0,237,0,0,0,0,0,170,0,145,0,0,0,0,0,41,0,189,0,239,0,105,0,14,0,6,0,4,0,233,0,113,0,69,0,240,0,37,0,0,0,140,0,11,0,56,0,40,0,89,0,0,0,102,0,0,0,224,0,88,0,196,0,155,0,0,0,92,0,117,0,215,0,221,0,150,0,0,0,9,0,126,0,211,0,0,0,41,0,159,0,112,0,107,0,211,0,4,0,235,0,0,0,203,0,53,0,0,0,138,0,136,0,105,0,107,0,0,0,0,0,192,0,107,0,126,0,238,0,17,0,210,0,0,0,187,0,34,0,0,0,202,0,19,0,248,0,147,0,211,0,39,0,0,0,137,0,205,0,41,0,198,0,0,0,3,0,213,0,69,0,0,0,176,0,0,0,62,0,165,0,8,0,170,0,210,0,3,0,143,0,26,0,0,0,33,0,100,0,0,0,0,0,26,0,202,0,0,0,0,0,217,0,5,0,0,0,0,0,110,0,168,0,85,0,246,0,127,0,44,0,0,0,0,0,124,0,239,0,28,0,32,0,119,0,231,0,180,0,133,0,165,0,0,0,100,0,105,0,130,0,78,0,0,0,207,0,218,0,0,0,95,0,19,0,133,0,207,0,1,0,113,0,229,0,0,0,132,0,0,0,173,0,8,0,155,0,47,0,245,0,0,0,47,0,129,0,26,0,0,0,0,0,21,0,47,0,0,0,19,0,113,0,126,0,0,0,224,0,190,0,222,0,229,0,0,0,61,0,71,0,0,0,0,0,243,0,0,0,10,0,173,0,154,0,25,0,55,0,210,0,104,0,247,0,0,0,43,0,153,0,241,0,136,0,0,0,198,0,0,0,0,0,113,0,140,0,0,0,181,0,191,0,46,0,255,0,0,0,222,0,233,0,180,0,161,0,0,0,1,0,92,0,205,0,83,0,63,0,100,0,123,0,134,0,227,0,235,0,229,0,162,0,49,0,0,0,249,0,180,0,118,0,0,0,253,0,0,0,131,0,29,0,218,0,32,0,36,0,152,0,107,0,127,0,211,0,112,0,207,0,140,0,0,0,198,0,32,0,211,0,105,0,230,0,136,0,162,0,84,0,235,0,175,0,181,0,89,0,128,0,233,0,27,0,54,0,0,0,77,0,43,0,0,0,46,0,191,0,248,0,0,0,62,0,120,0,138,0,0,0,238,0,14,0,93,0,0,0,178,0,0,0,227,0,65,0,139,0,0,0,161,0,138,0,57,0,65,0,0,0,5,0,84,0,0,0,120,0,66,0,161,0,210,0,0,0,5,0,103,0,0,0,223,0,246,0,0,0,31,0,114,0,176,0,223,0,111,0,125,0,0,0,107,0,55,0,12,0,187,0,0,0,132,0,109,0,144,0,0,0,14,0,141,0,20,0,40,0,140,0,20,0,104,0,225,0,86,0,107,0,0,0,0,0,103,0,0,0,172,0,0,0,0,0,128,0,81,0,139,0,170,0,178,0,148,0,23,0,0,0,105,0,0,0,195,0,67,0,232,0,0,0);
signal scenario_full  : scenario_type := (186,31,114,31,122,31,165,31,165,30,192,31,247,31,96,31,119,31,119,30,246,31,139,31,139,31,230,31,139,31,183,31,183,30,129,31,72,31,21,31,95,31,36,31,32,31,2,31,15,31,221,31,228,31,253,31,238,31,139,31,227,31,237,31,241,31,241,30,241,29,241,28,228,31,29,31,52,31,150,31,241,31,224,31,134,31,13,31,13,30,199,31,40,31,40,30,146,31,67,31,232,31,60,31,150,31,150,30,150,29,131,31,131,30,113,31,204,31,190,31,118,31,62,31,62,30,192,31,240,31,247,31,225,31,28,31,254,31,140,31,16,31,143,31,43,31,138,31,8,31,204,31,89,31,240,31,155,31,175,31,6,31,6,30,55,31,157,31,157,30,157,31,157,30,157,29,52,31,192,31,237,31,224,31,209,31,177,31,70,31,240,31,240,30,109,31,146,31,146,30,133,31,144,31,144,30,25,31,6,31,225,31,246,31,246,30,243,31,120,31,23,31,180,31,3,31,216,31,235,31,195,31,29,31,96,31,230,31,207,31,119,31,26,31,123,31,123,30,123,29,66,31,88,31,230,31,238,31,48,31,48,30,48,29,17,31,17,30,48,31,66,31,61,31,94,31,191,31,197,31,197,30,248,31,56,31,106,31,106,30,106,29,91,31,59,31,71,31,109,31,180,31,229,31,229,30,229,29,59,31,176,31,237,31,237,30,237,29,170,31,145,31,145,30,145,29,41,31,189,31,239,31,105,31,14,31,6,31,4,31,233,31,113,31,69,31,240,31,37,31,37,30,140,31,11,31,56,31,40,31,89,31,89,30,102,31,102,30,224,31,88,31,196,31,155,31,155,30,92,31,117,31,215,31,221,31,150,31,150,30,9,31,126,31,211,31,211,30,41,31,159,31,112,31,107,31,211,31,4,31,235,31,235,30,203,31,53,31,53,30,138,31,136,31,105,31,107,31,107,30,107,29,192,31,107,31,126,31,238,31,17,31,210,31,210,30,187,31,34,31,34,30,202,31,19,31,248,31,147,31,211,31,39,31,39,30,137,31,205,31,41,31,198,31,198,30,3,31,213,31,69,31,69,30,176,31,176,30,62,31,165,31,8,31,170,31,210,31,3,31,143,31,26,31,26,30,33,31,100,31,100,30,100,29,26,31,202,31,202,30,202,29,217,31,5,31,5,30,5,29,110,31,168,31,85,31,246,31,127,31,44,31,44,30,44,29,124,31,239,31,28,31,32,31,119,31,231,31,180,31,133,31,165,31,165,30,100,31,105,31,130,31,78,31,78,30,207,31,218,31,218,30,95,31,19,31,133,31,207,31,1,31,113,31,229,31,229,30,132,31,132,30,173,31,8,31,155,31,47,31,245,31,245,30,47,31,129,31,26,31,26,30,26,29,21,31,47,31,47,30,19,31,113,31,126,31,126,30,224,31,190,31,222,31,229,31,229,30,61,31,71,31,71,30,71,29,243,31,243,30,10,31,173,31,154,31,25,31,55,31,210,31,104,31,247,31,247,30,43,31,153,31,241,31,136,31,136,30,198,31,198,30,198,29,113,31,140,31,140,30,181,31,191,31,46,31,255,31,255,30,222,31,233,31,180,31,161,31,161,30,1,31,92,31,205,31,83,31,63,31,100,31,123,31,134,31,227,31,235,31,229,31,162,31,49,31,49,30,249,31,180,31,118,31,118,30,253,31,253,30,131,31,29,31,218,31,32,31,36,31,152,31,107,31,127,31,211,31,112,31,207,31,140,31,140,30,198,31,32,31,211,31,105,31,230,31,136,31,162,31,84,31,235,31,175,31,181,31,89,31,128,31,233,31,27,31,54,31,54,30,77,31,43,31,43,30,46,31,191,31,248,31,248,30,62,31,120,31,138,31,138,30,238,31,14,31,93,31,93,30,178,31,178,30,227,31,65,31,139,31,139,30,161,31,138,31,57,31,65,31,65,30,5,31,84,31,84,30,120,31,66,31,161,31,210,31,210,30,5,31,103,31,103,30,223,31,246,31,246,30,31,31,114,31,176,31,223,31,111,31,125,31,125,30,107,31,55,31,12,31,187,31,187,30,132,31,109,31,144,31,144,30,14,31,141,31,20,31,40,31,140,31,20,31,104,31,225,31,86,31,107,31,107,30,107,29,103,31,103,30,172,31,172,30,172,29,128,31,81,31,139,31,170,31,178,31,148,31,23,31,23,30,105,31,105,30,195,31,67,31,232,31,232,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
