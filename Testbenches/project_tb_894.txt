-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 641;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (45,0,200,0,69,0,53,0,35,0,0,0,252,0,190,0,234,0,0,0,249,0,0,0,102,0,4,0,175,0,191,0,110,0,163,0,235,0,0,0,0,0,190,0,20,0,129,0,234,0,0,0,36,0,0,0,0,0,202,0,2,0,0,0,75,0,137,0,0,0,196,0,32,0,0,0,0,0,150,0,141,0,179,0,115,0,140,0,62,0,81,0,138,0,0,0,0,0,127,0,133,0,44,0,212,0,140,0,64,0,0,0,0,0,125,0,252,0,32,0,1,0,37,0,0,0,226,0,56,0,213,0,0,0,54,0,87,0,160,0,0,0,0,0,43,0,120,0,30,0,0,0,0,0,0,0,0,0,0,0,15,0,164,0,135,0,0,0,0,0,223,0,240,0,23,0,231,0,0,0,78,0,27,0,199,0,246,0,193,0,82,0,211,0,0,0,28,0,0,0,75,0,149,0,20,0,22,0,0,0,122,0,0,0,133,0,73,0,0,0,117,0,133,0,0,0,20,0,66,0,110,0,226,0,190,0,102,0,156,0,0,0,0,0,109,0,189,0,62,0,31,0,0,0,148,0,47,0,220,0,21,0,63,0,119,0,0,0,92,0,114,0,147,0,106,0,169,0,32,0,84,0,57,0,200,0,15,0,172,0,0,0,103,0,0,0,0,0,0,0,226,0,149,0,12,0,130,0,69,0,237,0,95,0,55,0,25,0,246,0,142,0,208,0,0,0,10,0,219,0,232,0,33,0,21,0,0,0,21,0,38,0,52,0,81,0,0,0,0,0,0,0,133,0,147,0,235,0,254,0,28,0,73,0,23,0,241,0,6,0,255,0,43,0,182,0,238,0,138,0,202,0,59,0,142,0,0,0,202,0,139,0,0,0,97,0,28,0,246,0,0,0,114,0,253,0,10,0,150,0,135,0,197,0,0,0,105,0,202,0,19,0,221,0,0,0,85,0,51,0,63,0,0,0,12,0,0,0,0,0,152,0,63,0,0,0,100,0,44,0,227,0,204,0,142,0,206,0,88,0,222,0,235,0,0,0,137,0,0,0,0,0,43,0,0,0,186,0,138,0,0,0,20,0,249,0,178,0,171,0,244,0,250,0,0,0,31,0,86,0,153,0,233,0,83,0,0,0,137,0,190,0,114,0,102,0,98,0,77,0,159,0,250,0,237,0,203,0,0,0,227,0,152,0,0,0,201,0,2,0,0,0,75,0,0,0,0,0,0,0,103,0,229,0,192,0,50,0,209,0,0,0,165,0,58,0,193,0,155,0,251,0,33,0,191,0,5,0,24,0,0,0,10,0,73,0,105,0,51,0,3,0,240,0,28,0,0,0,198,0,0,0,221,0,234,0,177,0,0,0,0,0,0,0,65,0,152,0,0,0,105,0,137,0,164,0,148,0,0,0,228,0,59,0,113,0,69,0,5,0,193,0,236,0,136,0,240,0,41,0,252,0,119,0,77,0,109,0,136,0,146,0,158,0,107,0,171,0,214,0,171,0,15,0,106,0,0,0,0,0,185,0,0,0,0,0,241,0,125,0,86,0,124,0,32,0,39,0,0,0,46,0,73,0,99,0,0,0,182,0,101,0,52,0,229,0,179,0,0,0,0,0,89,0,131,0,0,0,0,0,194,0,168,0,211,0,100,0,167,0,223,0,178,0,163,0,224,0,0,0,128,0,149,0,171,0,2,0,56,0,200,0,188,0,218,0,145,0,0,0,58,0,213,0,211,0,242,0,218,0,0,0,0,0,210,0,176,0,152,0,163,0,152,0,219,0,0,0,117,0,241,0,192,0,96,0,0,0,181,0,111,0,0,0,77,0,111,0,54,0,135,0,121,0,0,0,135,0,151,0,143,0,131,0,37,0,182,0,0,0,111,0,214,0,176,0,0,0,254,0,78,0,197,0,140,0,0,0,100,0,33,0,59,0,143,0,153,0,151,0,225,0,206,0,0,0,0,0,0,0,95,0,145,0,17,0,71,0,124,0,0,0,121,0,147,0,94,0,157,0,80,0,70,0,155,0,11,0,0,0,120,0,142,0,72,0,165,0,209,0,222,0,0,0,183,0,0,0,111,0,157,0,0,0,34,0,232,0,211,0,0,0,221,0,13,0,168,0,232,0,243,0,41,0,125,0,0,0,157,0,0,0,68,0,35,0,42,0,224,0,124,0,23,0,217,0,0,0,46,0,6,0,0,0,0,0,166,0,169,0,0,0,74,0,95,0,211,0,49,0,220,0,142,0,147,0,16,0,247,0,162,0,231,0,0,0,0,0,192,0,0,0,79,0,35,0,197,0,2,0,101,0,185,0,56,0,246,0,0,0,55,0,244,0,191,0,0,0,127,0,0,0,233,0,197,0,88,0,168,0,103,0,213,0,209,0,83,0,91,0,203,0,229,0,69,0,0,0,168,0,74,0,15,0,0,0,15,0,79,0,227,0,0,0,112,0,149,0,150,0,0,0,86,0,171,0,96,0,115,0,144,0,0,0,19,0,0,0,36,0,0,0,128,0,0,0,217,0,144,0,0,0,66,0,0,0,193,0,31,0,0,0,189,0,55,0,142,0,139,0,130,0,204,0,12,0,199,0,69,0,0,0,165,0,182,0,172,0,0,0,4,0,47,0,0,0,152,0,202,0,10,0,0,0,41,0,240,0,217,0,159,0,239,0,210,0,213,0,18,0,37,0,80,0,0,0,162,0,0,0,246,0,217,0,212,0,19,0,155,0,116,0,0,0,53,0,242,0,38,0,125,0,226,0,161,0,4,0,54,0,8,0,112,0,162,0,13,0,199,0,226,0,94,0,157,0,18,0,249,0,141,0,248,0,24,0,148,0,16,0,229,0,27,0,212,0,192,0,63,0,199,0);
signal scenario_full  : scenario_type := (45,31,200,31,69,31,53,31,35,31,35,30,252,31,190,31,234,31,234,30,249,31,249,30,102,31,4,31,175,31,191,31,110,31,163,31,235,31,235,30,235,29,190,31,20,31,129,31,234,31,234,30,36,31,36,30,36,29,202,31,2,31,2,30,75,31,137,31,137,30,196,31,32,31,32,30,32,29,150,31,141,31,179,31,115,31,140,31,62,31,81,31,138,31,138,30,138,29,127,31,133,31,44,31,212,31,140,31,64,31,64,30,64,29,125,31,252,31,32,31,1,31,37,31,37,30,226,31,56,31,213,31,213,30,54,31,87,31,160,31,160,30,160,29,43,31,120,31,30,31,30,30,30,29,30,28,30,27,30,26,15,31,164,31,135,31,135,30,135,29,223,31,240,31,23,31,231,31,231,30,78,31,27,31,199,31,246,31,193,31,82,31,211,31,211,30,28,31,28,30,75,31,149,31,20,31,22,31,22,30,122,31,122,30,133,31,73,31,73,30,117,31,133,31,133,30,20,31,66,31,110,31,226,31,190,31,102,31,156,31,156,30,156,29,109,31,189,31,62,31,31,31,31,30,148,31,47,31,220,31,21,31,63,31,119,31,119,30,92,31,114,31,147,31,106,31,169,31,32,31,84,31,57,31,200,31,15,31,172,31,172,30,103,31,103,30,103,29,103,28,226,31,149,31,12,31,130,31,69,31,237,31,95,31,55,31,25,31,246,31,142,31,208,31,208,30,10,31,219,31,232,31,33,31,21,31,21,30,21,31,38,31,52,31,81,31,81,30,81,29,81,28,133,31,147,31,235,31,254,31,28,31,73,31,23,31,241,31,6,31,255,31,43,31,182,31,238,31,138,31,202,31,59,31,142,31,142,30,202,31,139,31,139,30,97,31,28,31,246,31,246,30,114,31,253,31,10,31,150,31,135,31,197,31,197,30,105,31,202,31,19,31,221,31,221,30,85,31,51,31,63,31,63,30,12,31,12,30,12,29,152,31,63,31,63,30,100,31,44,31,227,31,204,31,142,31,206,31,88,31,222,31,235,31,235,30,137,31,137,30,137,29,43,31,43,30,186,31,138,31,138,30,20,31,249,31,178,31,171,31,244,31,250,31,250,30,31,31,86,31,153,31,233,31,83,31,83,30,137,31,190,31,114,31,102,31,98,31,77,31,159,31,250,31,237,31,203,31,203,30,227,31,152,31,152,30,201,31,2,31,2,30,75,31,75,30,75,29,75,28,103,31,229,31,192,31,50,31,209,31,209,30,165,31,58,31,193,31,155,31,251,31,33,31,191,31,5,31,24,31,24,30,10,31,73,31,105,31,51,31,3,31,240,31,28,31,28,30,198,31,198,30,221,31,234,31,177,31,177,30,177,29,177,28,65,31,152,31,152,30,105,31,137,31,164,31,148,31,148,30,228,31,59,31,113,31,69,31,5,31,193,31,236,31,136,31,240,31,41,31,252,31,119,31,77,31,109,31,136,31,146,31,158,31,107,31,171,31,214,31,171,31,15,31,106,31,106,30,106,29,185,31,185,30,185,29,241,31,125,31,86,31,124,31,32,31,39,31,39,30,46,31,73,31,99,31,99,30,182,31,101,31,52,31,229,31,179,31,179,30,179,29,89,31,131,31,131,30,131,29,194,31,168,31,211,31,100,31,167,31,223,31,178,31,163,31,224,31,224,30,128,31,149,31,171,31,2,31,56,31,200,31,188,31,218,31,145,31,145,30,58,31,213,31,211,31,242,31,218,31,218,30,218,29,210,31,176,31,152,31,163,31,152,31,219,31,219,30,117,31,241,31,192,31,96,31,96,30,181,31,111,31,111,30,77,31,111,31,54,31,135,31,121,31,121,30,135,31,151,31,143,31,131,31,37,31,182,31,182,30,111,31,214,31,176,31,176,30,254,31,78,31,197,31,140,31,140,30,100,31,33,31,59,31,143,31,153,31,151,31,225,31,206,31,206,30,206,29,206,28,95,31,145,31,17,31,71,31,124,31,124,30,121,31,147,31,94,31,157,31,80,31,70,31,155,31,11,31,11,30,120,31,142,31,72,31,165,31,209,31,222,31,222,30,183,31,183,30,111,31,157,31,157,30,34,31,232,31,211,31,211,30,221,31,13,31,168,31,232,31,243,31,41,31,125,31,125,30,157,31,157,30,68,31,35,31,42,31,224,31,124,31,23,31,217,31,217,30,46,31,6,31,6,30,6,29,166,31,169,31,169,30,74,31,95,31,211,31,49,31,220,31,142,31,147,31,16,31,247,31,162,31,231,31,231,30,231,29,192,31,192,30,79,31,35,31,197,31,2,31,101,31,185,31,56,31,246,31,246,30,55,31,244,31,191,31,191,30,127,31,127,30,233,31,197,31,88,31,168,31,103,31,213,31,209,31,83,31,91,31,203,31,229,31,69,31,69,30,168,31,74,31,15,31,15,30,15,31,79,31,227,31,227,30,112,31,149,31,150,31,150,30,86,31,171,31,96,31,115,31,144,31,144,30,19,31,19,30,36,31,36,30,128,31,128,30,217,31,144,31,144,30,66,31,66,30,193,31,31,31,31,30,189,31,55,31,142,31,139,31,130,31,204,31,12,31,199,31,69,31,69,30,165,31,182,31,172,31,172,30,4,31,47,31,47,30,152,31,202,31,10,31,10,30,41,31,240,31,217,31,159,31,239,31,210,31,213,31,18,31,37,31,80,31,80,30,162,31,162,30,246,31,217,31,212,31,19,31,155,31,116,31,116,30,53,31,242,31,38,31,125,31,226,31,161,31,4,31,54,31,8,31,112,31,162,31,13,31,199,31,226,31,94,31,157,31,18,31,249,31,141,31,248,31,24,31,148,31,16,31,229,31,27,31,212,31,192,31,63,31,199,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
