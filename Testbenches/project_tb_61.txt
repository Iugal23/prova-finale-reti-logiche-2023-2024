-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 914;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (32,0,0,0,118,0,68,0,150,0,218,0,128,0,227,0,0,0,31,0,37,0,121,0,103,0,125,0,34,0,238,0,56,0,115,0,0,0,117,0,194,0,205,0,225,0,121,0,0,0,26,0,0,0,231,0,202,0,0,0,15,0,113,0,0,0,0,0,165,0,0,0,0,0,90,0,9,0,87,0,0,0,5,0,0,0,202,0,116,0,0,0,128,0,13,0,225,0,207,0,146,0,0,0,92,0,16,0,7,0,88,0,0,0,111,0,206,0,86,0,47,0,125,0,173,0,185,0,47,0,46,0,114,0,254,0,236,0,96,0,40,0,0,0,26,0,148,0,110,0,96,0,245,0,223,0,230,0,242,0,31,0,106,0,0,0,227,0,145,0,72,0,219,0,4,0,84,0,65,0,205,0,35,0,254,0,206,0,0,0,110,0,249,0,0,0,186,0,0,0,117,0,176,0,0,0,145,0,152,0,186,0,97,0,0,0,129,0,128,0,29,0,96,0,247,0,114,0,139,0,99,0,208,0,161,0,162,0,78,0,196,0,144,0,185,0,251,0,149,0,194,0,242,0,203,0,17,0,189,0,9,0,166,0,225,0,0,0,245,0,152,0,142,0,105,0,51,0,239,0,83,0,38,0,230,0,157,0,120,0,222,0,76,0,0,0,174,0,153,0,116,0,241,0,134,0,41,0,126,0,217,0,65,0,164,0,0,0,11,0,17,0,11,0,132,0,139,0,0,0,122,0,233,0,28,0,165,0,157,0,87,0,116,0,55,0,125,0,48,0,125,0,115,0,113,0,55,0,0,0,253,0,230,0,29,0,172,0,211,0,0,0,218,0,125,0,248,0,66,0,157,0,250,0,182,0,0,0,26,0,41,0,181,0,0,0,122,0,164,0,230,0,53,0,129,0,64,0,197,0,0,0,219,0,222,0,0,0,230,0,65,0,0,0,154,0,163,0,33,0,0,0,27,0,141,0,128,0,0,0,171,0,64,0,136,0,192,0,59,0,107,0,106,0,0,0,152,0,228,0,0,0,220,0,208,0,27,0,128,0,190,0,130,0,44,0,0,0,16,0,0,0,234,0,151,0,252,0,69,0,52,0,0,0,184,0,45,0,178,0,92,0,110,0,0,0,211,0,14,0,255,0,155,0,74,0,38,0,179,0,130,0,84,0,0,0,0,0,0,0,0,0,31,0,238,0,94,0,82,0,18,0,103,0,46,0,28,0,150,0,240,0,126,0,49,0,236,0,175,0,25,0,0,0,0,0,0,0,0,0,224,0,217,0,220,0,0,0,183,0,43,0,69,0,0,0,0,0,227,0,249,0,127,0,169,0,0,0,215,0,34,0,32,0,0,0,136,0,0,0,100,0,70,0,174,0,144,0,73,0,61,0,0,0,109,0,54,0,0,0,94,0,231,0,207,0,0,0,191,0,0,0,69,0,0,0,146,0,0,0,32,0,232,0,240,0,138,0,227,0,0,0,89,0,53,0,254,0,181,0,195,0,0,0,0,0,0,0,0,0,156,0,226,0,0,0,184,0,0,0,215,0,75,0,86,0,62,0,181,0,150,0,216,0,91,0,181,0,116,0,161,0,51,0,243,0,188,0,150,0,0,0,0,0,140,0,224,0,103,0,91,0,95,0,0,0,36,0,197,0,198,0,0,0,120,0,227,0,150,0,112,0,0,0,0,0,79,0,165,0,0,0,42,0,106,0,160,0,85,0,0,0,199,0,57,0,65,0,102,0,71,0,0,0,170,0,201,0,236,0,86,0,41,0,94,0,199,0,142,0,156,0,189,0,249,0,0,0,145,0,243,0,246,0,0,0,0,0,170,0,0,0,0,0,0,0,0,0,248,0,210,0,17,0,185,0,62,0,36,0,188,0,0,0,128,0,178,0,240,0,200,0,215,0,212,0,148,0,201,0,225,0,147,0,0,0,69,0,239,0,0,0,165,0,0,0,166,0,232,0,0,0,97,0,191,0,11,0,205,0,196,0,177,0,0,0,140,0,158,0,36,0,0,0,9,0,14,0,0,0,55,0,232,0,0,0,40,0,0,0,42,0,102,0,0,0,16,0,1,0,251,0,46,0,0,0,0,0,234,0,31,0,0,0,145,0,129,0,130,0,150,0,108,0,89,0,47,0,54,0,0,0,94,0,66,0,0,0,227,0,0,0,0,0,226,0,0,0,130,0,15,0,217,0,0,0,193,0,106,0,0,0,208,0,215,0,121,0,0,0,239,0,249,0,0,0,28,0,190,0,54,0,35,0,98,0,145,0,143,0,150,0,85,0,68,0,223,0,186,0,148,0,96,0,132,0,61,0,39,0,163,0,12,0,117,0,128,0,66,0,247,0,249,0,0,0,20,0,103,0,115,0,30,0,0,0,34,0,245,0,0,0,168,0,147,0,142,0,81,0,0,0,49,0,73,0,5,0,0,0,27,0,124,0,103,0,163,0,148,0,0,0,221,0,232,0,189,0,142,0,229,0,96,0,114,0,47,0,209,0,132,0,0,0,42,0,219,0,93,0,0,0,177,0,11,0,82,0,62,0,0,0,171,0,125,0,52,0,1,0,157,0,103,0,74,0,0,0,71,0,199,0,0,0,0,0,83,0,13,0,240,0,0,0,193,0,116,0,0,0,30,0,225,0,0,0,215,0,37,0,175,0,26,0,0,0,20,0,35,0,78,0,11,0,19,0,0,0,0,0,175,0,250,0,0,0,230,0,113,0,117,0,0,0,32,0,86,0,62,0,0,0,13,0,0,0,5,0,192,0,116,0,0,0,200,0,86,0,13,0,0,0,36,0,61,0,109,0,65,0,37,0,129,0,242,0,239,0,89,0,252,0,19,0,218,0,147,0,21,0,110,0,237,0,0,0,251,0,146,0,190,0,110,0,157,0,0,0,78,0,0,0,97,0,125,0,192,0,91,0,10,0,70,0,244,0,70,0,58,0,27,0,103,0,126,0,93,0,163,0,154,0,57,0,51,0,174,0,72,0,122,0,183,0,23,0,219,0,0,0,213,0,223,0,175,0,151,0,230,0,174,0,215,0,134,0,160,0,147,0,74,0,182,0,0,0,78,0,105,0,0,0,0,0,39,0,0,0,117,0,245,0,34,0,0,0,0,0,187,0,0,0,241,0,8,0,232,0,52,0,104,0,0,0,140,0,250,0,156,0,92,0,154,0,229,0,225,0,0,0,207,0,217,0,0,0,85,0,150,0,218,0,0,0,175,0,104,0,89,0,0,0,206,0,0,0,218,0,231,0,60,0,15,0,113,0,94,0,57,0,0,0,96,0,0,0,152,0,148,0,180,0,0,0,12,0,0,0,0,0,0,0,69,0,118,0,194,0,0,0,80,0,11,0,0,0,46,0,106,0,104,0,26,0,108,0,124,0,149,0,106,0,238,0,210,0,137,0,193,0,0,0,0,0,136,0,72,0,192,0,58,0,0,0,0,0,0,0,61,0,146,0,234,0,142,0,0,0,19,0,227,0,0,0,194,0,100,0,92,0,179,0,94,0,0,0,182,0,81,0,57,0,154,0,133,0,25,0,241,0,188,0,116,0,174,0,191,0,142,0,161,0,230,0,122,0,26,0,82,0,0,0,75,0,150,0,87,0,192,0,90,0,76,0,228,0,236,0,33,0,86,0,36,0,11,0,0,0,170,0,232,0,0,0,125,0,42,0,0,0,197,0,2,0,147,0,0,0,51,0,74,0,67,0,236,0,42,0,13,0,52,0,12,0,46,0,38,0,132,0,0,0,164,0,44,0,41,0,6,0,17,0,0,0,141,0,0,0,15,0,37,0,6,0,54,0,206,0,33,0,0,0,0,0,144,0,13,0,122,0,244,0,67,0,0,0,23,0,18,0,230,0,242,0,0,0,191,0,236,0,0,0,84,0,61,0,79,0,102,0,191,0,0,0,170,0,86,0,34,0,130,0,1,0,23,0,79,0,142,0,0,0,150,0,229,0,194,0,117,0,196,0,185,0,179,0,120,0,99,0,0,0,65,0,140,0,75,0,160,0,242,0,157,0,58,0,167,0,0,0,0,0,0,0,158,0,210,0,106,0,100,0,132,0,184,0,0,0);
signal scenario_full  : scenario_type := (32,31,32,30,118,31,68,31,150,31,218,31,128,31,227,31,227,30,31,31,37,31,121,31,103,31,125,31,34,31,238,31,56,31,115,31,115,30,117,31,194,31,205,31,225,31,121,31,121,30,26,31,26,30,231,31,202,31,202,30,15,31,113,31,113,30,113,29,165,31,165,30,165,29,90,31,9,31,87,31,87,30,5,31,5,30,202,31,116,31,116,30,128,31,13,31,225,31,207,31,146,31,146,30,92,31,16,31,7,31,88,31,88,30,111,31,206,31,86,31,47,31,125,31,173,31,185,31,47,31,46,31,114,31,254,31,236,31,96,31,40,31,40,30,26,31,148,31,110,31,96,31,245,31,223,31,230,31,242,31,31,31,106,31,106,30,227,31,145,31,72,31,219,31,4,31,84,31,65,31,205,31,35,31,254,31,206,31,206,30,110,31,249,31,249,30,186,31,186,30,117,31,176,31,176,30,145,31,152,31,186,31,97,31,97,30,129,31,128,31,29,31,96,31,247,31,114,31,139,31,99,31,208,31,161,31,162,31,78,31,196,31,144,31,185,31,251,31,149,31,194,31,242,31,203,31,17,31,189,31,9,31,166,31,225,31,225,30,245,31,152,31,142,31,105,31,51,31,239,31,83,31,38,31,230,31,157,31,120,31,222,31,76,31,76,30,174,31,153,31,116,31,241,31,134,31,41,31,126,31,217,31,65,31,164,31,164,30,11,31,17,31,11,31,132,31,139,31,139,30,122,31,233,31,28,31,165,31,157,31,87,31,116,31,55,31,125,31,48,31,125,31,115,31,113,31,55,31,55,30,253,31,230,31,29,31,172,31,211,31,211,30,218,31,125,31,248,31,66,31,157,31,250,31,182,31,182,30,26,31,41,31,181,31,181,30,122,31,164,31,230,31,53,31,129,31,64,31,197,31,197,30,219,31,222,31,222,30,230,31,65,31,65,30,154,31,163,31,33,31,33,30,27,31,141,31,128,31,128,30,171,31,64,31,136,31,192,31,59,31,107,31,106,31,106,30,152,31,228,31,228,30,220,31,208,31,27,31,128,31,190,31,130,31,44,31,44,30,16,31,16,30,234,31,151,31,252,31,69,31,52,31,52,30,184,31,45,31,178,31,92,31,110,31,110,30,211,31,14,31,255,31,155,31,74,31,38,31,179,31,130,31,84,31,84,30,84,29,84,28,84,27,31,31,238,31,94,31,82,31,18,31,103,31,46,31,28,31,150,31,240,31,126,31,49,31,236,31,175,31,25,31,25,30,25,29,25,28,25,27,224,31,217,31,220,31,220,30,183,31,43,31,69,31,69,30,69,29,227,31,249,31,127,31,169,31,169,30,215,31,34,31,32,31,32,30,136,31,136,30,100,31,70,31,174,31,144,31,73,31,61,31,61,30,109,31,54,31,54,30,94,31,231,31,207,31,207,30,191,31,191,30,69,31,69,30,146,31,146,30,32,31,232,31,240,31,138,31,227,31,227,30,89,31,53,31,254,31,181,31,195,31,195,30,195,29,195,28,195,27,156,31,226,31,226,30,184,31,184,30,215,31,75,31,86,31,62,31,181,31,150,31,216,31,91,31,181,31,116,31,161,31,51,31,243,31,188,31,150,31,150,30,150,29,140,31,224,31,103,31,91,31,95,31,95,30,36,31,197,31,198,31,198,30,120,31,227,31,150,31,112,31,112,30,112,29,79,31,165,31,165,30,42,31,106,31,160,31,85,31,85,30,199,31,57,31,65,31,102,31,71,31,71,30,170,31,201,31,236,31,86,31,41,31,94,31,199,31,142,31,156,31,189,31,249,31,249,30,145,31,243,31,246,31,246,30,246,29,170,31,170,30,170,29,170,28,170,27,248,31,210,31,17,31,185,31,62,31,36,31,188,31,188,30,128,31,178,31,240,31,200,31,215,31,212,31,148,31,201,31,225,31,147,31,147,30,69,31,239,31,239,30,165,31,165,30,166,31,232,31,232,30,97,31,191,31,11,31,205,31,196,31,177,31,177,30,140,31,158,31,36,31,36,30,9,31,14,31,14,30,55,31,232,31,232,30,40,31,40,30,42,31,102,31,102,30,16,31,1,31,251,31,46,31,46,30,46,29,234,31,31,31,31,30,145,31,129,31,130,31,150,31,108,31,89,31,47,31,54,31,54,30,94,31,66,31,66,30,227,31,227,30,227,29,226,31,226,30,130,31,15,31,217,31,217,30,193,31,106,31,106,30,208,31,215,31,121,31,121,30,239,31,249,31,249,30,28,31,190,31,54,31,35,31,98,31,145,31,143,31,150,31,85,31,68,31,223,31,186,31,148,31,96,31,132,31,61,31,39,31,163,31,12,31,117,31,128,31,66,31,247,31,249,31,249,30,20,31,103,31,115,31,30,31,30,30,34,31,245,31,245,30,168,31,147,31,142,31,81,31,81,30,49,31,73,31,5,31,5,30,27,31,124,31,103,31,163,31,148,31,148,30,221,31,232,31,189,31,142,31,229,31,96,31,114,31,47,31,209,31,132,31,132,30,42,31,219,31,93,31,93,30,177,31,11,31,82,31,62,31,62,30,171,31,125,31,52,31,1,31,157,31,103,31,74,31,74,30,71,31,199,31,199,30,199,29,83,31,13,31,240,31,240,30,193,31,116,31,116,30,30,31,225,31,225,30,215,31,37,31,175,31,26,31,26,30,20,31,35,31,78,31,11,31,19,31,19,30,19,29,175,31,250,31,250,30,230,31,113,31,117,31,117,30,32,31,86,31,62,31,62,30,13,31,13,30,5,31,192,31,116,31,116,30,200,31,86,31,13,31,13,30,36,31,61,31,109,31,65,31,37,31,129,31,242,31,239,31,89,31,252,31,19,31,218,31,147,31,21,31,110,31,237,31,237,30,251,31,146,31,190,31,110,31,157,31,157,30,78,31,78,30,97,31,125,31,192,31,91,31,10,31,70,31,244,31,70,31,58,31,27,31,103,31,126,31,93,31,163,31,154,31,57,31,51,31,174,31,72,31,122,31,183,31,23,31,219,31,219,30,213,31,223,31,175,31,151,31,230,31,174,31,215,31,134,31,160,31,147,31,74,31,182,31,182,30,78,31,105,31,105,30,105,29,39,31,39,30,117,31,245,31,34,31,34,30,34,29,187,31,187,30,241,31,8,31,232,31,52,31,104,31,104,30,140,31,250,31,156,31,92,31,154,31,229,31,225,31,225,30,207,31,217,31,217,30,85,31,150,31,218,31,218,30,175,31,104,31,89,31,89,30,206,31,206,30,218,31,231,31,60,31,15,31,113,31,94,31,57,31,57,30,96,31,96,30,152,31,148,31,180,31,180,30,12,31,12,30,12,29,12,28,69,31,118,31,194,31,194,30,80,31,11,31,11,30,46,31,106,31,104,31,26,31,108,31,124,31,149,31,106,31,238,31,210,31,137,31,193,31,193,30,193,29,136,31,72,31,192,31,58,31,58,30,58,29,58,28,61,31,146,31,234,31,142,31,142,30,19,31,227,31,227,30,194,31,100,31,92,31,179,31,94,31,94,30,182,31,81,31,57,31,154,31,133,31,25,31,241,31,188,31,116,31,174,31,191,31,142,31,161,31,230,31,122,31,26,31,82,31,82,30,75,31,150,31,87,31,192,31,90,31,76,31,228,31,236,31,33,31,86,31,36,31,11,31,11,30,170,31,232,31,232,30,125,31,42,31,42,30,197,31,2,31,147,31,147,30,51,31,74,31,67,31,236,31,42,31,13,31,52,31,12,31,46,31,38,31,132,31,132,30,164,31,44,31,41,31,6,31,17,31,17,30,141,31,141,30,15,31,37,31,6,31,54,31,206,31,33,31,33,30,33,29,144,31,13,31,122,31,244,31,67,31,67,30,23,31,18,31,230,31,242,31,242,30,191,31,236,31,236,30,84,31,61,31,79,31,102,31,191,31,191,30,170,31,86,31,34,31,130,31,1,31,23,31,79,31,142,31,142,30,150,31,229,31,194,31,117,31,196,31,185,31,179,31,120,31,99,31,99,30,65,31,140,31,75,31,160,31,242,31,157,31,58,31,167,31,167,30,167,29,167,28,158,31,210,31,106,31,100,31,132,31,184,31,184,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
