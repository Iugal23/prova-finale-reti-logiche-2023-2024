-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 376;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (108,0,230,0,0,0,141,0,87,0,197,0,229,0,72,0,0,0,0,0,41,0,27,0,120,0,62,0,133,0,132,0,207,0,64,0,6,0,0,0,146,0,0,0,87,0,152,0,0,0,0,0,131,0,42,0,28,0,27,0,53,0,26,0,29,0,36,0,149,0,137,0,1,0,238,0,119,0,113,0,67,0,0,0,40,0,116,0,0,0,98,0,111,0,45,0,141,0,123,0,19,0,249,0,137,0,159,0,14,0,58,0,239,0,160,0,203,0,162,0,218,0,217,0,133,0,210,0,103,0,195,0,213,0,155,0,118,0,169,0,65,0,228,0,140,0,156,0,0,0,7,0,0,0,0,0,29,0,3,0,0,0,42,0,82,0,211,0,0,0,0,0,30,0,130,0,69,0,34,0,242,0,214,0,161,0,218,0,229,0,13,0,138,0,200,0,215,0,170,0,0,0,252,0,4,0,99,0,247,0,22,0,67,0,223,0,249,0,197,0,133,0,163,0,16,0,54,0,12,0,200,0,107,0,143,0,47,0,107,0,0,0,153,0,46,0,239,0,133,0,196,0,19,0,88,0,71,0,31,0,206,0,218,0,223,0,0,0,13,0,0,0,225,0,237,0,73,0,9,0,16,0,48,0,206,0,0,0,69,0,121,0,109,0,0,0,243,0,12,0,32,0,71,0,153,0,113,0,181,0,111,0,173,0,255,0,147,0,37,0,191,0,0,0,131,0,174,0,0,0,185,0,0,0,0,0,198,0,19,0,162,0,0,0,238,0,0,0,208,0,185,0,85,0,137,0,131,0,0,0,37,0,129,0,124,0,160,0,0,0,138,0,104,0,6,0,234,0,197,0,62,0,182,0,242,0,240,0,0,0,175,0,219,0,107,0,220,0,4,0,0,0,111,0,0,0,130,0,16,0,0,0,29,0,0,0,0,0,0,0,227,0,227,0,4,0,26,0,90,0,156,0,147,0,16,0,117,0,81,0,0,0,230,0,137,0,0,0,122,0,65,0,253,0,0,0,238,0,14,0,174,0,51,0,123,0,20,0,27,0,103,0,206,0,0,0,0,0,181,0,147,0,0,0,182,0,0,0,0,0,234,0,16,0,15,0,218,0,132,0,161,0,114,0,43,0,105,0,0,0,105,0,0,0,129,0,228,0,95,0,50,0,218,0,116,0,225,0,185,0,0,0,73,0,251,0,15,0,101,0,0,0,210,0,241,0,4,0,0,0,249,0,192,0,8,0,103,0,205,0,212,0,64,0,248,0,53,0,135,0,147,0,29,0,0,0,92,0,132,0,18,0,82,0,110,0,158,0,216,0,32,0,0,0,91,0,57,0,50,0,5,0,122,0,0,0,133,0,0,0,134,0,240,0,0,0,210,0,26,0,138,0,128,0,138,0,0,0,87,0,83,0,140,0,0,0,0,0,63,0,0,0,102,0,46,0,233,0,65,0,182,0,0,0,47,0,14,0,109,0,44,0,121,0,77,0,154,0,183,0,19,0,0,0,96,0,0,0,116,0,212,0,0,0,129,0,30,0,179,0,131,0,105,0,37,0,196,0,105,0,143,0,13,0,244,0,67,0,95,0,79,0,103,0,146,0,24,0,186,0,19,0,217,0,173,0,74,0,110,0,88,0,151,0,184,0,222,0,132,0,40,0,153,0,191,0,0,0,149,0,54,0);
signal scenario_full  : scenario_type := (108,31,230,31,230,30,141,31,87,31,197,31,229,31,72,31,72,30,72,29,41,31,27,31,120,31,62,31,133,31,132,31,207,31,64,31,6,31,6,30,146,31,146,30,87,31,152,31,152,30,152,29,131,31,42,31,28,31,27,31,53,31,26,31,29,31,36,31,149,31,137,31,1,31,238,31,119,31,113,31,67,31,67,30,40,31,116,31,116,30,98,31,111,31,45,31,141,31,123,31,19,31,249,31,137,31,159,31,14,31,58,31,239,31,160,31,203,31,162,31,218,31,217,31,133,31,210,31,103,31,195,31,213,31,155,31,118,31,169,31,65,31,228,31,140,31,156,31,156,30,7,31,7,30,7,29,29,31,3,31,3,30,42,31,82,31,211,31,211,30,211,29,30,31,130,31,69,31,34,31,242,31,214,31,161,31,218,31,229,31,13,31,138,31,200,31,215,31,170,31,170,30,252,31,4,31,99,31,247,31,22,31,67,31,223,31,249,31,197,31,133,31,163,31,16,31,54,31,12,31,200,31,107,31,143,31,47,31,107,31,107,30,153,31,46,31,239,31,133,31,196,31,19,31,88,31,71,31,31,31,206,31,218,31,223,31,223,30,13,31,13,30,225,31,237,31,73,31,9,31,16,31,48,31,206,31,206,30,69,31,121,31,109,31,109,30,243,31,12,31,32,31,71,31,153,31,113,31,181,31,111,31,173,31,255,31,147,31,37,31,191,31,191,30,131,31,174,31,174,30,185,31,185,30,185,29,198,31,19,31,162,31,162,30,238,31,238,30,208,31,185,31,85,31,137,31,131,31,131,30,37,31,129,31,124,31,160,31,160,30,138,31,104,31,6,31,234,31,197,31,62,31,182,31,242,31,240,31,240,30,175,31,219,31,107,31,220,31,4,31,4,30,111,31,111,30,130,31,16,31,16,30,29,31,29,30,29,29,29,28,227,31,227,31,4,31,26,31,90,31,156,31,147,31,16,31,117,31,81,31,81,30,230,31,137,31,137,30,122,31,65,31,253,31,253,30,238,31,14,31,174,31,51,31,123,31,20,31,27,31,103,31,206,31,206,30,206,29,181,31,147,31,147,30,182,31,182,30,182,29,234,31,16,31,15,31,218,31,132,31,161,31,114,31,43,31,105,31,105,30,105,31,105,30,129,31,228,31,95,31,50,31,218,31,116,31,225,31,185,31,185,30,73,31,251,31,15,31,101,31,101,30,210,31,241,31,4,31,4,30,249,31,192,31,8,31,103,31,205,31,212,31,64,31,248,31,53,31,135,31,147,31,29,31,29,30,92,31,132,31,18,31,82,31,110,31,158,31,216,31,32,31,32,30,91,31,57,31,50,31,5,31,122,31,122,30,133,31,133,30,134,31,240,31,240,30,210,31,26,31,138,31,128,31,138,31,138,30,87,31,83,31,140,31,140,30,140,29,63,31,63,30,102,31,46,31,233,31,65,31,182,31,182,30,47,31,14,31,109,31,44,31,121,31,77,31,154,31,183,31,19,31,19,30,96,31,96,30,116,31,212,31,212,30,129,31,30,31,179,31,131,31,105,31,37,31,196,31,105,31,143,31,13,31,244,31,67,31,95,31,79,31,103,31,146,31,24,31,186,31,19,31,217,31,173,31,74,31,110,31,88,31,151,31,184,31,222,31,132,31,40,31,153,31,191,31,191,30,149,31,54,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
