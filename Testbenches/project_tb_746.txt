-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 709;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (25,0,34,0,65,0,0,0,0,0,131,0,20,0,157,0,0,0,102,0,0,0,0,0,0,0,110,0,94,0,132,0,5,0,215,0,226,0,249,0,114,0,236,0,0,0,218,0,103,0,203,0,29,0,251,0,28,0,148,0,228,0,0,0,42,0,99,0,193,0,194,0,83,0,18,0,49,0,0,0,0,0,0,0,202,0,180,0,160,0,53,0,217,0,0,0,227,0,152,0,20,0,106,0,62,0,190,0,189,0,181,0,255,0,249,0,154,0,193,0,93,0,0,0,224,0,195,0,0,0,251,0,56,0,158,0,0,0,104,0,238,0,193,0,107,0,117,0,201,0,2,0,169,0,95,0,185,0,225,0,45,0,5,0,0,0,0,0,127,0,91,0,0,0,0,0,35,0,192,0,0,0,0,0,0,0,117,0,0,0,0,0,72,0,0,0,134,0,227,0,202,0,0,0,0,0,0,0,63,0,79,0,166,0,0,0,121,0,243,0,0,0,78,0,229,0,140,0,0,0,247,0,186,0,244,0,225,0,0,0,89,0,6,0,26,0,221,0,250,0,48,0,249,0,0,0,183,0,23,0,0,0,227,0,53,0,59,0,8,0,0,0,49,0,0,0,0,0,30,0,152,0,231,0,206,0,61,0,192,0,24,0,19,0,112,0,174,0,78,0,56,0,0,0,105,0,109,0,20,0,177,0,48,0,38,0,0,0,0,0,164,0,95,0,19,0,7,0,0,0,70,0,207,0,0,0,146,0,223,0,154,0,58,0,194,0,0,0,135,0,50,0,100,0,235,0,131,0,0,0,232,0,33,0,211,0,76,0,0,0,20,0,133,0,106,0,0,0,0,0,243,0,188,0,0,0,74,0,255,0,72,0,133,0,64,0,108,0,64,0,107,0,141,0,245,0,157,0,229,0,0,0,196,0,109,0,205,0,184,0,64,0,0,0,48,0,147,0,117,0,0,0,59,0,110,0,0,0,29,0,173,0,86,0,207,0,0,0,0,0,0,0,48,0,0,0,118,0,42,0,181,0,193,0,0,0,10,0,82,0,230,0,252,0,0,0,185,0,178,0,154,0,194,0,144,0,50,0,223,0,213,0,199,0,178,0,222,0,128,0,0,0,100,0,0,0,0,0,171,0,0,0,138,0,254,0,41,0,161,0,250,0,0,0,0,0,94,0,189,0,16,0,180,0,103,0,187,0,217,0,48,0,178,0,157,0,109,0,180,0,204,0,24,0,8,0,0,0,2,0,0,0,69,0,0,0,0,0,0,0,95,0,0,0,201,0,0,0,122,0,87,0,215,0,227,0,154,0,216,0,55,0,187,0,169,0,208,0,0,0,184,0,186,0,31,0,220,0,148,0,212,0,55,0,0,0,223,0,221,0,23,0,0,0,0,0,220,0,6,0,143,0,122,0,69,0,0,0,0,0,97,0,161,0,0,0,138,0,171,0,244,0,113,0,52,0,0,0,194,0,78,0,0,0,0,0,204,0,247,0,91,0,120,0,0,0,17,0,126,0,250,0,120,0,60,0,0,0,236,0,144,0,0,0,60,0,126,0,76,0,93,0,111,0,208,0,68,0,171,0,91,0,193,0,142,0,102,0,156,0,199,0,211,0,69,0,39,0,0,0,8,0,0,0,109,0,0,0,0,0,132,0,0,0,137,0,91,0,0,0,0,0,64,0,60,0,4,0,44,0,66,0,96,0,132,0,0,0,0,0,181,0,65,0,80,0,0,0,6,0,26,0,0,0,215,0,0,0,122,0,171,0,0,0,0,0,0,0,165,0,85,0,222,0,78,0,112,0,44,0,0,0,146,0,234,0,164,0,80,0,194,0,45,0,165,0,0,0,243,0,68,0,0,0,255,0,23,0,147,0,0,0,70,0,72,0,96,0,29,0,21,0,87,0,145,0,0,0,167,0,79,0,36,0,225,0,0,0,0,0,0,0,0,0,172,0,190,0,215,0,0,0,157,0,215,0,0,0,164,0,145,0,19,0,72,0,97,0,119,0,29,0,143,0,228,0,14,0,239,0,0,0,181,0,64,0,52,0,68,0,7,0,90,0,173,0,0,0,26,0,191,0,35,0,77,0,196,0,0,0,30,0,137,0,206,0,0,0,179,0,105,0,67,0,0,0,71,0,0,0,2,0,0,0,27,0,212,0,219,0,149,0,0,0,248,0,29,0,137,0,0,0,226,0,176,0,161,0,244,0,0,0,221,0,119,0,45,0,27,0,32,0,172,0,99,0,0,0,198,0,251,0,232,0,0,0,2,0,43,0,67,0,54,0,85,0,114,0,222,0,0,0,32,0,13,0,190,0,132,0,231,0,208,0,210,0,44,0,178,0,195,0,182,0,199,0,162,0,0,0,0,0,0,0,229,0,142,0,133,0,23,0,134,0,99,0,196,0,162,0,243,0,237,0,182,0,200,0,241,0,162,0,0,0,0,0,114,0,219,0,0,0,0,0,198,0,178,0,42,0,0,0,88,0,213,0,0,0,200,0,62,0,0,0,98,0,196,0,73,0,0,0,128,0,186,0,1,0,0,0,139,0,222,0,191,0,168,0,170,0,50,0,150,0,232,0,16,0,0,0,29,0,51,0,67,0,68,0,14,0,255,0,145,0,0,0,0,0,143,0,157,0,182,0,22,0,160,0,19,0,196,0,0,0,193,0,254,0,77,0,3,0,16,0,167,0,117,0,151,0,0,0,30,0,0,0,0,0,230,0,51,0,108,0,241,0,194,0,136,0,46,0,0,0,219,0,24,0,225,0,73,0,63,0,185,0,0,0,56,0,196,0,176,0,192,0,227,0,0,0,85,0,24,0,121,0,101,0,179,0,132,0,35,0,64,0,212,0,253,0,168,0,57,0,53,0,164,0,0,0,165,0,0,0,30,0,94,0,153,0,225,0,0,0,123,0,152,0,133,0,189,0,0,0,146,0,60,0,97,0,0,0,0,0,251,0,80,0,25,0,0,0,253,0,210,0,0,0,232,0,96,0,0,0,217,0,122,0,33,0,208,0,78,0,51,0,148,0,92,0,73,0,107,0,252,0,11,0,6,0,0,0,152,0,195,0,218,0,108,0,20,0,215,0,234,0,87,0,133,0,0,0,95,0,205,0,57,0,127,0,0,0,0,0,255,0,159,0,102,0,243,0,206,0,0,0,185,0);
signal scenario_full  : scenario_type := (25,31,34,31,65,31,65,30,65,29,131,31,20,31,157,31,157,30,102,31,102,30,102,29,102,28,110,31,94,31,132,31,5,31,215,31,226,31,249,31,114,31,236,31,236,30,218,31,103,31,203,31,29,31,251,31,28,31,148,31,228,31,228,30,42,31,99,31,193,31,194,31,83,31,18,31,49,31,49,30,49,29,49,28,202,31,180,31,160,31,53,31,217,31,217,30,227,31,152,31,20,31,106,31,62,31,190,31,189,31,181,31,255,31,249,31,154,31,193,31,93,31,93,30,224,31,195,31,195,30,251,31,56,31,158,31,158,30,104,31,238,31,193,31,107,31,117,31,201,31,2,31,169,31,95,31,185,31,225,31,45,31,5,31,5,30,5,29,127,31,91,31,91,30,91,29,35,31,192,31,192,30,192,29,192,28,117,31,117,30,117,29,72,31,72,30,134,31,227,31,202,31,202,30,202,29,202,28,63,31,79,31,166,31,166,30,121,31,243,31,243,30,78,31,229,31,140,31,140,30,247,31,186,31,244,31,225,31,225,30,89,31,6,31,26,31,221,31,250,31,48,31,249,31,249,30,183,31,23,31,23,30,227,31,53,31,59,31,8,31,8,30,49,31,49,30,49,29,30,31,152,31,231,31,206,31,61,31,192,31,24,31,19,31,112,31,174,31,78,31,56,31,56,30,105,31,109,31,20,31,177,31,48,31,38,31,38,30,38,29,164,31,95,31,19,31,7,31,7,30,70,31,207,31,207,30,146,31,223,31,154,31,58,31,194,31,194,30,135,31,50,31,100,31,235,31,131,31,131,30,232,31,33,31,211,31,76,31,76,30,20,31,133,31,106,31,106,30,106,29,243,31,188,31,188,30,74,31,255,31,72,31,133,31,64,31,108,31,64,31,107,31,141,31,245,31,157,31,229,31,229,30,196,31,109,31,205,31,184,31,64,31,64,30,48,31,147,31,117,31,117,30,59,31,110,31,110,30,29,31,173,31,86,31,207,31,207,30,207,29,207,28,48,31,48,30,118,31,42,31,181,31,193,31,193,30,10,31,82,31,230,31,252,31,252,30,185,31,178,31,154,31,194,31,144,31,50,31,223,31,213,31,199,31,178,31,222,31,128,31,128,30,100,31,100,30,100,29,171,31,171,30,138,31,254,31,41,31,161,31,250,31,250,30,250,29,94,31,189,31,16,31,180,31,103,31,187,31,217,31,48,31,178,31,157,31,109,31,180,31,204,31,24,31,8,31,8,30,2,31,2,30,69,31,69,30,69,29,69,28,95,31,95,30,201,31,201,30,122,31,87,31,215,31,227,31,154,31,216,31,55,31,187,31,169,31,208,31,208,30,184,31,186,31,31,31,220,31,148,31,212,31,55,31,55,30,223,31,221,31,23,31,23,30,23,29,220,31,6,31,143,31,122,31,69,31,69,30,69,29,97,31,161,31,161,30,138,31,171,31,244,31,113,31,52,31,52,30,194,31,78,31,78,30,78,29,204,31,247,31,91,31,120,31,120,30,17,31,126,31,250,31,120,31,60,31,60,30,236,31,144,31,144,30,60,31,126,31,76,31,93,31,111,31,208,31,68,31,171,31,91,31,193,31,142,31,102,31,156,31,199,31,211,31,69,31,39,31,39,30,8,31,8,30,109,31,109,30,109,29,132,31,132,30,137,31,91,31,91,30,91,29,64,31,60,31,4,31,44,31,66,31,96,31,132,31,132,30,132,29,181,31,65,31,80,31,80,30,6,31,26,31,26,30,215,31,215,30,122,31,171,31,171,30,171,29,171,28,165,31,85,31,222,31,78,31,112,31,44,31,44,30,146,31,234,31,164,31,80,31,194,31,45,31,165,31,165,30,243,31,68,31,68,30,255,31,23,31,147,31,147,30,70,31,72,31,96,31,29,31,21,31,87,31,145,31,145,30,167,31,79,31,36,31,225,31,225,30,225,29,225,28,225,27,172,31,190,31,215,31,215,30,157,31,215,31,215,30,164,31,145,31,19,31,72,31,97,31,119,31,29,31,143,31,228,31,14,31,239,31,239,30,181,31,64,31,52,31,68,31,7,31,90,31,173,31,173,30,26,31,191,31,35,31,77,31,196,31,196,30,30,31,137,31,206,31,206,30,179,31,105,31,67,31,67,30,71,31,71,30,2,31,2,30,27,31,212,31,219,31,149,31,149,30,248,31,29,31,137,31,137,30,226,31,176,31,161,31,244,31,244,30,221,31,119,31,45,31,27,31,32,31,172,31,99,31,99,30,198,31,251,31,232,31,232,30,2,31,43,31,67,31,54,31,85,31,114,31,222,31,222,30,32,31,13,31,190,31,132,31,231,31,208,31,210,31,44,31,178,31,195,31,182,31,199,31,162,31,162,30,162,29,162,28,229,31,142,31,133,31,23,31,134,31,99,31,196,31,162,31,243,31,237,31,182,31,200,31,241,31,162,31,162,30,162,29,114,31,219,31,219,30,219,29,198,31,178,31,42,31,42,30,88,31,213,31,213,30,200,31,62,31,62,30,98,31,196,31,73,31,73,30,128,31,186,31,1,31,1,30,139,31,222,31,191,31,168,31,170,31,50,31,150,31,232,31,16,31,16,30,29,31,51,31,67,31,68,31,14,31,255,31,145,31,145,30,145,29,143,31,157,31,182,31,22,31,160,31,19,31,196,31,196,30,193,31,254,31,77,31,3,31,16,31,167,31,117,31,151,31,151,30,30,31,30,30,30,29,230,31,51,31,108,31,241,31,194,31,136,31,46,31,46,30,219,31,24,31,225,31,73,31,63,31,185,31,185,30,56,31,196,31,176,31,192,31,227,31,227,30,85,31,24,31,121,31,101,31,179,31,132,31,35,31,64,31,212,31,253,31,168,31,57,31,53,31,164,31,164,30,165,31,165,30,30,31,94,31,153,31,225,31,225,30,123,31,152,31,133,31,189,31,189,30,146,31,60,31,97,31,97,30,97,29,251,31,80,31,25,31,25,30,253,31,210,31,210,30,232,31,96,31,96,30,217,31,122,31,33,31,208,31,78,31,51,31,148,31,92,31,73,31,107,31,252,31,11,31,6,31,6,30,152,31,195,31,218,31,108,31,20,31,215,31,234,31,87,31,133,31,133,30,95,31,205,31,57,31,127,31,127,30,127,29,255,31,159,31,102,31,243,31,206,31,206,30,185,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
