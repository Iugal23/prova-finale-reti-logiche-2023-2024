-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 867;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (139,0,81,0,165,0,213,0,43,0,62,0,129,0,0,0,18,0,193,0,154,0,0,0,229,0,48,0,0,0,63,0,0,0,0,0,0,0,16,0,180,0,73,0,44,0,132,0,45,0,221,0,0,0,0,0,103,0,172,0,232,0,168,0,81,0,213,0,90,0,145,0,146,0,152,0,228,0,218,0,74,0,0,0,219,0,0,0,0,0,0,0,36,0,72,0,9,0,189,0,67,0,38,0,214,0,179,0,183,0,218,0,71,0,119,0,58,0,189,0,0,0,14,0,238,0,77,0,73,0,217,0,195,0,26,0,43,0,74,0,49,0,161,0,226,0,164,0,244,0,152,0,114,0,48,0,26,0,96,0,148,0,6,0,0,0,157,0,148,0,229,0,0,0,159,0,10,0,39,0,81,0,2,0,0,0,140,0,178,0,138,0,141,0,175,0,0,0,96,0,142,0,44,0,137,0,179,0,0,0,0,0,17,0,144,0,1,0,80,0,252,0,2,0,76,0,128,0,140,0,167,0,166,0,63,0,203,0,0,0,108,0,60,0,150,0,210,0,121,0,124,0,129,0,0,0,61,0,92,0,209,0,236,0,0,0,84,0,25,0,0,0,179,0,0,0,52,0,204,0,0,0,123,0,172,0,159,0,155,0,0,0,13,0,25,0,159,0,146,0,95,0,246,0,177,0,101,0,6,0,218,0,80,0,129,0,133,0,134,0,125,0,109,0,204,0,61,0,152,0,20,0,168,0,161,0,250,0,0,0,102,0,104,0,36,0,6,0,188,0,61,0,99,0,179,0,82,0,152,0,0,0,175,0,160,0,29,0,81,0,26,0,10,0,102,0,180,0,227,0,174,0,35,0,228,0,157,0,74,0,21,0,158,0,57,0,0,0,229,0,157,0,22,0,77,0,0,0,163,0,32,0,164,0,0,0,11,0,191,0,13,0,9,0,234,0,163,0,94,0,108,0,169,0,171,0,200,0,120,0,0,0,223,0,21,0,26,0,42,0,144,0,33,0,213,0,92,0,148,0,97,0,183,0,193,0,104,0,0,0,31,0,154,0,2,0,230,0,167,0,23,0,166,0,98,0,139,0,198,0,140,0,217,0,251,0,236,0,103,0,48,0,201,0,77,0,109,0,231,0,201,0,172,0,190,0,0,0,138,0,45,0,0,0,82,0,9,0,229,0,227,0,0,0,219,0,138,0,25,0,0,0,147,0,0,0,124,0,91,0,90,0,216,0,0,0,0,0,165,0,110,0,43,0,157,0,0,0,72,0,0,0,65,0,180,0,249,0,62,0,0,0,176,0,0,0,0,0,0,0,0,0,166,0,213,0,197,0,57,0,0,0,0,0,168,0,81,0,52,0,0,0,0,0,183,0,108,0,237,0,218,0,0,0,104,0,140,0,203,0,12,0,232,0,190,0,207,0,68,0,55,0,6,0,0,0,160,0,0,0,0,0,0,0,226,0,0,0,28,0,152,0,32,0,11,0,110,0,55,0,194,0,0,0,198,0,0,0,185,0,172,0,211,0,0,0,92,0,25,0,52,0,202,0,0,0,122,0,0,0,0,0,206,0,161,0,210,0,105,0,226,0,44,0,161,0,0,0,144,0,248,0,0,0,191,0,63,0,144,0,9,0,0,0,246,0,143,0,207,0,209,0,0,0,0,0,155,0,135,0,0,0,125,0,219,0,70,0,195,0,161,0,192,0,107,0,126,0,139,0,236,0,0,0,188,0,23,0,221,0,209,0,171,0,137,0,6,0,0,0,141,0,53,0,130,0,41,0,79,0,241,0,16,0,0,0,89,0,93,0,235,0,160,0,188,0,212,0,0,0,130,0,123,0,96,0,0,0,206,0,172,0,24,0,17,0,0,0,177,0,183,0,48,0,45,0,21,0,100,0,116,0,110,0,95,0,197,0,0,0,183,0,119,0,8,0,112,0,251,0,50,0,98,0,234,0,157,0,89,0,54,0,118,0,227,0,0,0,243,0,164,0,184,0,208,0,0,0,100,0,167,0,168,0,115,0,136,0,112,0,169,0,53,0,199,0,0,0,221,0,205,0,171,0,15,0,133,0,0,0,20,0,201,0,115,0,110,0,197,0,200,0,12,0,0,0,39,0,0,0,0,0,17,0,213,0,0,0,46,0,235,0,83,0,0,0,124,0,52,0,29,0,38,0,0,0,0,0,245,0,237,0,120,0,144,0,93,0,176,0,50,0,169,0,240,0,0,0,134,0,167,0,253,0,197,0,0,0,75,0,26,0,151,0,0,0,119,0,27,0,9,0,79,0,0,0,126,0,115,0,57,0,152,0,41,0,205,0,244,0,182,0,63,0,0,0,70,0,216,0,158,0,246,0,164,0,0,0,0,0,42,0,132,0,103,0,77,0,152,0,53,0,254,0,0,0,68,0,77,0,236,0,184,0,0,0,233,0,118,0,26,0,234,0,111,0,130,0,95,0,236,0,0,0,19,0,20,0,177,0,4,0,0,0,251,0,0,0,0,0,0,0,0,0,145,0,174,0,0,0,157,0,102,0,116,0,199,0,242,0,74,0,253,0,118,0,51,0,229,0,0,0,87,0,200,0,0,0,33,0,39,0,225,0,213,0,137,0,39,0,78,0,136,0,0,0,0,0,250,0,173,0,0,0,0,0,0,0,68,0,0,0,146,0,0,0,150,0,181,0,0,0,50,0,92,0,236,0,222,0,148,0,117,0,0,0,16,0,156,0,242,0,53,0,224,0,175,0,50,0,74,0,64,0,57,0,245,0,4,0,0,0,0,0,118,0,0,0,227,0,214,0,0,0,208,0,118,0,0,0,12,0,51,0,0,0,210,0,216,0,88,0,0,0,0,0,125,0,0,0,187,0,187,0,176,0,191,0,0,0,77,0,107,0,61,0,193,0,207,0,168,0,38,0,0,0,239,0,127,0,58,0,0,0,175,0,122,0,229,0,69,0,0,0,63,0,54,0,80,0,241,0,0,0,255,0,187,0,45,0,181,0,226,0,0,0,37,0,210,0,87,0,230,0,163,0,123,0,132,0,110,0,37,0,75,0,231,0,60,0,243,0,104,0,0,0,216,0,103,0,15,0,172,0,182,0,65,0,195,0,246,0,207,0,124,0,55,0,51,0,110,0,148,0,197,0,79,0,4,0,37,0,147,0,128,0,227,0,58,0,164,0,0,0,0,0,198,0,82,0,0,0,0,0,150,0,240,0,0,0,0,0,0,0,243,0,92,0,211,0,212,0,0,0,35,0,192,0,119,0,124,0,160,0,0,0,53,0,74,0,173,0,210,0,176,0,254,0,0,0,186,0,0,0,0,0,228,0,49,0,102,0,53,0,250,0,0,0,1,0,47,0,73,0,0,0,0,0,188,0,30,0,141,0,234,0,0,0,171,0,0,0,191,0,203,0,169,0,0,0,0,0,161,0,0,0,134,0,169,0,110,0,247,0,218,0,4,0,143,0,164,0,109,0,126,0,0,0,228,0,141,0,0,0,17,0,22,0,36,0,231,0,71,0,186,0,235,0,188,0,154,0,21,0,24,0,144,0,103,0,223,0,0,0,0,0,69,0,15,0,192,0,210,0,253,0,0,0,99,0,162,0,208,0,0,0,73,0,189,0,200,0,104,0,78,0,0,0,35,0,102,0,209,0,0,0,110,0,9,0,50,0,0,0,0,0,173,0,163,0,0,0,169,0,235,0,0,0,5,0,67,0,170,0,53,0,0,0,0,0,143,0,98,0,171,0,233,0,227,0,106,0,207,0,137,0,179,0,142,0,141,0,196,0,178,0,42,0,80,0,190,0,20,0,0,0,98,0,0,0,184,0,197,0,121,0,72,0,0,0,8,0,14,0,0,0,96,0,106,0,152,0,77,0);
signal scenario_full  : scenario_type := (139,31,81,31,165,31,213,31,43,31,62,31,129,31,129,30,18,31,193,31,154,31,154,30,229,31,48,31,48,30,63,31,63,30,63,29,63,28,16,31,180,31,73,31,44,31,132,31,45,31,221,31,221,30,221,29,103,31,172,31,232,31,168,31,81,31,213,31,90,31,145,31,146,31,152,31,228,31,218,31,74,31,74,30,219,31,219,30,219,29,219,28,36,31,72,31,9,31,189,31,67,31,38,31,214,31,179,31,183,31,218,31,71,31,119,31,58,31,189,31,189,30,14,31,238,31,77,31,73,31,217,31,195,31,26,31,43,31,74,31,49,31,161,31,226,31,164,31,244,31,152,31,114,31,48,31,26,31,96,31,148,31,6,31,6,30,157,31,148,31,229,31,229,30,159,31,10,31,39,31,81,31,2,31,2,30,140,31,178,31,138,31,141,31,175,31,175,30,96,31,142,31,44,31,137,31,179,31,179,30,179,29,17,31,144,31,1,31,80,31,252,31,2,31,76,31,128,31,140,31,167,31,166,31,63,31,203,31,203,30,108,31,60,31,150,31,210,31,121,31,124,31,129,31,129,30,61,31,92,31,209,31,236,31,236,30,84,31,25,31,25,30,179,31,179,30,52,31,204,31,204,30,123,31,172,31,159,31,155,31,155,30,13,31,25,31,159,31,146,31,95,31,246,31,177,31,101,31,6,31,218,31,80,31,129,31,133,31,134,31,125,31,109,31,204,31,61,31,152,31,20,31,168,31,161,31,250,31,250,30,102,31,104,31,36,31,6,31,188,31,61,31,99,31,179,31,82,31,152,31,152,30,175,31,160,31,29,31,81,31,26,31,10,31,102,31,180,31,227,31,174,31,35,31,228,31,157,31,74,31,21,31,158,31,57,31,57,30,229,31,157,31,22,31,77,31,77,30,163,31,32,31,164,31,164,30,11,31,191,31,13,31,9,31,234,31,163,31,94,31,108,31,169,31,171,31,200,31,120,31,120,30,223,31,21,31,26,31,42,31,144,31,33,31,213,31,92,31,148,31,97,31,183,31,193,31,104,31,104,30,31,31,154,31,2,31,230,31,167,31,23,31,166,31,98,31,139,31,198,31,140,31,217,31,251,31,236,31,103,31,48,31,201,31,77,31,109,31,231,31,201,31,172,31,190,31,190,30,138,31,45,31,45,30,82,31,9,31,229,31,227,31,227,30,219,31,138,31,25,31,25,30,147,31,147,30,124,31,91,31,90,31,216,31,216,30,216,29,165,31,110,31,43,31,157,31,157,30,72,31,72,30,65,31,180,31,249,31,62,31,62,30,176,31,176,30,176,29,176,28,176,27,166,31,213,31,197,31,57,31,57,30,57,29,168,31,81,31,52,31,52,30,52,29,183,31,108,31,237,31,218,31,218,30,104,31,140,31,203,31,12,31,232,31,190,31,207,31,68,31,55,31,6,31,6,30,160,31,160,30,160,29,160,28,226,31,226,30,28,31,152,31,32,31,11,31,110,31,55,31,194,31,194,30,198,31,198,30,185,31,172,31,211,31,211,30,92,31,25,31,52,31,202,31,202,30,122,31,122,30,122,29,206,31,161,31,210,31,105,31,226,31,44,31,161,31,161,30,144,31,248,31,248,30,191,31,63,31,144,31,9,31,9,30,246,31,143,31,207,31,209,31,209,30,209,29,155,31,135,31,135,30,125,31,219,31,70,31,195,31,161,31,192,31,107,31,126,31,139,31,236,31,236,30,188,31,23,31,221,31,209,31,171,31,137,31,6,31,6,30,141,31,53,31,130,31,41,31,79,31,241,31,16,31,16,30,89,31,93,31,235,31,160,31,188,31,212,31,212,30,130,31,123,31,96,31,96,30,206,31,172,31,24,31,17,31,17,30,177,31,183,31,48,31,45,31,21,31,100,31,116,31,110,31,95,31,197,31,197,30,183,31,119,31,8,31,112,31,251,31,50,31,98,31,234,31,157,31,89,31,54,31,118,31,227,31,227,30,243,31,164,31,184,31,208,31,208,30,100,31,167,31,168,31,115,31,136,31,112,31,169,31,53,31,199,31,199,30,221,31,205,31,171,31,15,31,133,31,133,30,20,31,201,31,115,31,110,31,197,31,200,31,12,31,12,30,39,31,39,30,39,29,17,31,213,31,213,30,46,31,235,31,83,31,83,30,124,31,52,31,29,31,38,31,38,30,38,29,245,31,237,31,120,31,144,31,93,31,176,31,50,31,169,31,240,31,240,30,134,31,167,31,253,31,197,31,197,30,75,31,26,31,151,31,151,30,119,31,27,31,9,31,79,31,79,30,126,31,115,31,57,31,152,31,41,31,205,31,244,31,182,31,63,31,63,30,70,31,216,31,158,31,246,31,164,31,164,30,164,29,42,31,132,31,103,31,77,31,152,31,53,31,254,31,254,30,68,31,77,31,236,31,184,31,184,30,233,31,118,31,26,31,234,31,111,31,130,31,95,31,236,31,236,30,19,31,20,31,177,31,4,31,4,30,251,31,251,30,251,29,251,28,251,27,145,31,174,31,174,30,157,31,102,31,116,31,199,31,242,31,74,31,253,31,118,31,51,31,229,31,229,30,87,31,200,31,200,30,33,31,39,31,225,31,213,31,137,31,39,31,78,31,136,31,136,30,136,29,250,31,173,31,173,30,173,29,173,28,68,31,68,30,146,31,146,30,150,31,181,31,181,30,50,31,92,31,236,31,222,31,148,31,117,31,117,30,16,31,156,31,242,31,53,31,224,31,175,31,50,31,74,31,64,31,57,31,245,31,4,31,4,30,4,29,118,31,118,30,227,31,214,31,214,30,208,31,118,31,118,30,12,31,51,31,51,30,210,31,216,31,88,31,88,30,88,29,125,31,125,30,187,31,187,31,176,31,191,31,191,30,77,31,107,31,61,31,193,31,207,31,168,31,38,31,38,30,239,31,127,31,58,31,58,30,175,31,122,31,229,31,69,31,69,30,63,31,54,31,80,31,241,31,241,30,255,31,187,31,45,31,181,31,226,31,226,30,37,31,210,31,87,31,230,31,163,31,123,31,132,31,110,31,37,31,75,31,231,31,60,31,243,31,104,31,104,30,216,31,103,31,15,31,172,31,182,31,65,31,195,31,246,31,207,31,124,31,55,31,51,31,110,31,148,31,197,31,79,31,4,31,37,31,147,31,128,31,227,31,58,31,164,31,164,30,164,29,198,31,82,31,82,30,82,29,150,31,240,31,240,30,240,29,240,28,243,31,92,31,211,31,212,31,212,30,35,31,192,31,119,31,124,31,160,31,160,30,53,31,74,31,173,31,210,31,176,31,254,31,254,30,186,31,186,30,186,29,228,31,49,31,102,31,53,31,250,31,250,30,1,31,47,31,73,31,73,30,73,29,188,31,30,31,141,31,234,31,234,30,171,31,171,30,191,31,203,31,169,31,169,30,169,29,161,31,161,30,134,31,169,31,110,31,247,31,218,31,4,31,143,31,164,31,109,31,126,31,126,30,228,31,141,31,141,30,17,31,22,31,36,31,231,31,71,31,186,31,235,31,188,31,154,31,21,31,24,31,144,31,103,31,223,31,223,30,223,29,69,31,15,31,192,31,210,31,253,31,253,30,99,31,162,31,208,31,208,30,73,31,189,31,200,31,104,31,78,31,78,30,35,31,102,31,209,31,209,30,110,31,9,31,50,31,50,30,50,29,173,31,163,31,163,30,169,31,235,31,235,30,5,31,67,31,170,31,53,31,53,30,53,29,143,31,98,31,171,31,233,31,227,31,106,31,207,31,137,31,179,31,142,31,141,31,196,31,178,31,42,31,80,31,190,31,20,31,20,30,98,31,98,30,184,31,197,31,121,31,72,31,72,30,8,31,14,31,14,30,96,31,106,31,152,31,77,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
