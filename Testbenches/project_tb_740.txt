-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 236;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (39,0,0,0,16,0,114,0,177,0,15,0,218,0,11,0,173,0,52,0,15,0,146,0,216,0,89,0,35,0,60,0,151,0,111,0,33,0,61,0,53,0,111,0,30,0,178,0,0,0,0,0,75,0,7,0,198,0,25,0,16,0,102,0,0,0,85,0,206,0,3,0,253,0,0,0,232,0,67,0,0,0,162,0,14,0,0,0,112,0,0,0,215,0,229,0,139,0,134,0,6,0,200,0,244,0,0,0,202,0,193,0,253,0,97,0,210,0,0,0,247,0,0,0,99,0,0,0,0,0,153,0,0,0,119,0,0,0,213,0,63,0,103,0,121,0,211,0,0,0,105,0,52,0,152,0,16,0,0,0,196,0,49,0,39,0,0,0,170,0,206,0,156,0,174,0,60,0,0,0,50,0,198,0,63,0,86,0,0,0,143,0,0,0,79,0,159,0,116,0,145,0,44,0,201,0,0,0,64,0,0,0,200,0,0,0,112,0,224,0,44,0,118,0,183,0,105,0,0,0,0,0,36,0,0,0,203,0,20,0,82,0,0,0,72,0,0,0,253,0,130,0,0,0,27,0,148,0,21,0,168,0,32,0,59,0,72,0,224,0,74,0,0,0,161,0,37,0,108,0,48,0,169,0,225,0,0,0,44,0,199,0,16,0,63,0,25,0,9,0,147,0,0,0,5,0,184,0,142,0,151,0,121,0,14,0,0,0,155,0,151,0,129,0,116,0,76,0,191,0,83,0,0,0,0,0,0,0,6,0,0,0,182,0,74,0,230,0,182,0,45,0,144,0,0,0,78,0,177,0,134,0,195,0,224,0,113,0,131,0,153,0,50,0,0,0,204,0,236,0,26,0,0,0,43,0,234,0,165,0,95,0,47,0,7,0,194,0,107,0,32,0,2,0,211,0,0,0,204,0,189,0,0,0,0,0,19,0,0,0,158,0,25,0,84,0,9,0,215,0,0,0,0,0,221,0,12,0,7,0,94,0,199,0,0,0,169,0,173,0,117,0,159,0,165,0,4,0,0,0,0,0,75,0,214,0,37,0,9,0,77,0);
signal scenario_full  : scenario_type := (39,31,39,30,16,31,114,31,177,31,15,31,218,31,11,31,173,31,52,31,15,31,146,31,216,31,89,31,35,31,60,31,151,31,111,31,33,31,61,31,53,31,111,31,30,31,178,31,178,30,178,29,75,31,7,31,198,31,25,31,16,31,102,31,102,30,85,31,206,31,3,31,253,31,253,30,232,31,67,31,67,30,162,31,14,31,14,30,112,31,112,30,215,31,229,31,139,31,134,31,6,31,200,31,244,31,244,30,202,31,193,31,253,31,97,31,210,31,210,30,247,31,247,30,99,31,99,30,99,29,153,31,153,30,119,31,119,30,213,31,63,31,103,31,121,31,211,31,211,30,105,31,52,31,152,31,16,31,16,30,196,31,49,31,39,31,39,30,170,31,206,31,156,31,174,31,60,31,60,30,50,31,198,31,63,31,86,31,86,30,143,31,143,30,79,31,159,31,116,31,145,31,44,31,201,31,201,30,64,31,64,30,200,31,200,30,112,31,224,31,44,31,118,31,183,31,105,31,105,30,105,29,36,31,36,30,203,31,20,31,82,31,82,30,72,31,72,30,253,31,130,31,130,30,27,31,148,31,21,31,168,31,32,31,59,31,72,31,224,31,74,31,74,30,161,31,37,31,108,31,48,31,169,31,225,31,225,30,44,31,199,31,16,31,63,31,25,31,9,31,147,31,147,30,5,31,184,31,142,31,151,31,121,31,14,31,14,30,155,31,151,31,129,31,116,31,76,31,191,31,83,31,83,30,83,29,83,28,6,31,6,30,182,31,74,31,230,31,182,31,45,31,144,31,144,30,78,31,177,31,134,31,195,31,224,31,113,31,131,31,153,31,50,31,50,30,204,31,236,31,26,31,26,30,43,31,234,31,165,31,95,31,47,31,7,31,194,31,107,31,32,31,2,31,211,31,211,30,204,31,189,31,189,30,189,29,19,31,19,30,158,31,25,31,84,31,9,31,215,31,215,30,215,29,221,31,12,31,7,31,94,31,199,31,199,30,169,31,173,31,117,31,159,31,165,31,4,31,4,30,4,29,75,31,214,31,37,31,9,31,77,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
