-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 1009;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (3,0,0,0,8,0,0,0,72,0,2,0,173,0,86,0,98,0,238,0,108,0,0,0,224,0,0,0,117,0,254,0,51,0,207,0,151,0,81,0,126,0,0,0,184,0,116,0,121,0,226,0,0,0,0,0,143,0,252,0,218,0,253,0,221,0,175,0,204,0,0,0,34,0,15,0,225,0,169,0,24,0,81,0,189,0,45,0,47,0,87,0,224,0,79,0,248,0,194,0,0,0,3,0,186,0,0,0,214,0,215,0,224,0,99,0,72,0,212,0,215,0,12,0,42,0,97,0,191,0,46,0,55,0,25,0,0,0,56,0,0,0,90,0,0,0,4,0,188,0,0,0,200,0,0,0,78,0,185,0,43,0,0,0,66,0,142,0,18,0,14,0,98,0,130,0,92,0,134,0,238,0,78,0,0,0,0,0,168,0,250,0,197,0,0,0,147,0,0,0,231,0,137,0,46,0,1,0,0,0,148,0,182,0,15,0,250,0,0,0,68,0,124,0,150,0,0,0,0,0,39,0,1,0,249,0,55,0,247,0,225,0,117,0,120,0,157,0,0,0,0,0,201,0,91,0,0,0,66,0,221,0,125,0,0,0,243,0,212,0,0,0,165,0,0,0,232,0,223,0,179,0,238,0,220,0,196,0,0,0,186,0,133,0,143,0,18,0,124,0,212,0,0,0,0,0,150,0,237,0,59,0,58,0,105,0,0,0,182,0,101,0,121,0,10,0,198,0,178,0,254,0,193,0,0,0,157,0,197,0,202,0,54,0,0,0,0,0,0,0,136,0,225,0,0,0,63,0,37,0,165,0,116,0,130,0,24,0,135,0,79,0,112,0,234,0,32,0,3,0,133,0,231,0,189,0,185,0,95,0,0,0,70,0,214,0,139,0,233,0,224,0,53,0,95,0,38,0,188,0,164,0,52,0,121,0,92,0,123,0,0,0,160,0,233,0,0,0,63,0,108,0,117,0,0,0,0,0,32,0,240,0,0,0,252,0,0,0,16,0,154,0,231,0,18,0,234,0,203,0,0,0,179,0,0,0,171,0,236,0,208,0,137,0,177,0,0,0,243,0,0,0,67,0,136,0,234,0,40,0,128,0,199,0,245,0,240,0,213,0,127,0,216,0,182,0,11,0,157,0,219,0,111,0,3,0,32,0,124,0,175,0,55,0,142,0,239,0,189,0,17,0,218,0,59,0,91,0,208,0,119,0,0,0,0,0,0,0,180,0,77,0,0,0,244,0,190,0,0,0,92,0,91,0,230,0,254,0,36,0,202,0,245,0,118,0,151,0,157,0,110,0,155,0,156,0,0,0,54,0,76,0,40,0,106,0,63,0,136,0,0,0,55,0,22,0,108,0,0,0,113,0,0,0,121,0,56,0,73,0,51,0,0,0,115,0,248,0,230,0,0,0,59,0,157,0,0,0,44,0,11,0,37,0,121,0,7,0,164,0,55,0,206,0,0,0,0,0,0,0,0,0,108,0,219,0,190,0,38,0,23,0,34,0,217,0,232,0,30,0,54,0,86,0,87,0,255,0,0,0,60,0,141,0,204,0,0,0,0,0,110,0,128,0,172,0,83,0,0,0,0,0,41,0,0,0,161,0,0,0,116,0,82,0,154,0,0,0,0,0,47,0,248,0,89,0,147,0,207,0,0,0,154,0,0,0,80,0,0,0,84,0,15,0,98,0,207,0,41,0,0,0,0,0,43,0,214,0,135,0,0,0,100,0,145,0,185,0,15,0,0,0,0,0,84,0,64,0,0,0,227,0,91,0,0,0,221,0,255,0,0,0,0,0,0,0,161,0,144,0,0,0,147,0,103,0,153,0,101,0,201,0,0,0,145,0,139,0,107,0,0,0,163,0,63,0,54,0,0,0,230,0,88,0,0,0,0,0,5,0,0,0,201,0,204,0,13,0,91,0,244,0,92,0,213,0,0,0,59,0,115,0,0,0,189,0,75,0,230,0,154,0,108,0,0,0,113,0,0,0,0,0,135,0,53,0,0,0,163,0,0,0,0,0,0,0,129,0,157,0,47,0,233,0,228,0,0,0,47,0,0,0,89,0,216,0,9,0,209,0,0,0,189,0,54,0,0,0,243,0,77,0,0,0,251,0,195,0,0,0,226,0,0,0,221,0,0,0,0,0,0,0,160,0,138,0,112,0,72,0,246,0,132,0,180,0,196,0,44,0,125,0,149,0,157,0,240,0,79,0,0,0,240,0,134,0,187,0,0,0,219,0,178,0,194,0,0,0,247,0,195,0,175,0,234,0,8,0,0,0,111,0,227,0,160,0,0,0,31,0,0,0,86,0,100,0,0,0,0,0,41,0,199,0,107,0,0,0,0,0,0,0,64,0,19,0,0,0,203,0,37,0,70,0,102,0,0,0,236,0,103,0,229,0,0,0,149,0,162,0,142,0,244,0,244,0,181,0,0,0,205,0,0,0,197,0,23,0,128,0,123,0,34,0,0,0,28,0,15,0,105,0,144,0,175,0,0,0,199,0,121,0,51,0,46,0,0,0,104,0,86,0,95,0,0,0,187,0,16,0,0,0,0,0,0,0,24,0,0,0,78,0,235,0,189,0,54,0,106,0,171,0,223,0,229,0,2,0,3,0,191,0,0,0,105,0,205,0,124,0,59,0,159,0,0,0,222,0,0,0,188,0,32,0,222,0,119,0,238,0,0,0,160,0,36,0,32,0,20,0,140,0,198,0,0,0,36,0,238,0,26,0,100,0,0,0,120,0,56,0,11,0,74,0,0,0,161,0,0,0,95,0,0,0,0,0,251,0,166,0,241,0,0,0,0,0,14,0,57,0,2,0,10,0,191,0,172,0,46,0,128,0,94,0,0,0,95,0,245,0,251,0,38,0,19,0,213,0,58,0,0,0,226,0,65,0,140,0,225,0,217,0,217,0,38,0,101,0,117,0,222,0,123,0,0,0,30,0,55,0,239,0,135,0,192,0,79,0,93,0,2,0,0,0,59,0,35,0,109,0,74,0,0,0,0,0,0,0,46,0,85,0,163,0,156,0,201,0,133,0,122,0,0,0,217,0,214,0,0,0,35,0,150,0,234,0,109,0,52,0,108,0,15,0,108,0,87,0,0,0,254,0,6,0,191,0,234,0,223,0,137,0,0,0,4,0,155,0,161,0,0,0,45,0,0,0,94,0,16,0,184,0,153,0,81,0,87,0,74,0,162,0,232,0,197,0,0,0,172,0,135,0,0,0,0,0,0,0,148,0,245,0,67,0,87,0,0,0,159,0,255,0,9,0,91,0,127,0,98,0,221,0,53,0,36,0,148,0,220,0,36,0,171,0,0,0,7,0,198,0,0,0,68,0,0,0,109,0,0,0,198,0,150,0,117,0,76,0,0,0,192,0,52,0,170,0,175,0,0,0,0,0,191,0,195,0,57,0,187,0,203,0,0,0,221,0,139,0,215,0,121,0,20,0,82,0,137,0,0,0,3,0,147,0,178,0,218,0,54,0,243,0,0,0,21,0,8,0,254,0,12,0,152,0,34,0,191,0,211,0,233,0,0,0,250,0,92,0,9,0,130,0,216,0,86,0,0,0,90,0,0,0,207,0,0,0,80,0,33,0,52,0,142,0,253,0,0,0,212,0,6,0,178,0,129,0,155,0,129,0,97,0,94,0,14,0,4,0,11,0,10,0,163,0,183,0,0,0,0,0,133,0,23,0,245,0,197,0,156,0,121,0,232,0,251,0,38,0,53,0,0,0,219,0,187,0,0,0,184,0,0,0,151,0,230,0,82,0,105,0,13,0,49,0,36,0,0,0,22,0,232,0,95,0,0,0,119,0,98,0,199,0,116,0,102,0,52,0,108,0,54,0,24,0,59,0,203,0,150,0,83,0,139,0,0,0,132,0,251,0,0,0,194,0,109,0,128,0,210,0,222,0,138,0,0,0,222,0,74,0,0,0,252,0,172,0,0,0,53,0,148,0,49,0,200,0,177,0,0,0,217,0,246,0,0,0,63,0,156,0,0,0,203,0,30,0,7,0,112,0,0,0,185,0,0,0,39,0,226,0,170,0,193,0,17,0,34,0,16,0,197,0,0,0,50,0,88,0,204,0,83,0,0,0,41,0,216,0,0,0,10,0,150,0,222,0,39,0,80,0,244,0,204,0,92,0,138,0,136,0,56,0,0,0,216,0,231,0,75,0,0,0,0,0,21,0,0,0,63,0,0,0,28,0,0,0,219,0,177,0,111,0,85,0,135,0,36,0,0,0,155,0,0,0,186,0,0,0,177,0,223,0,127,0,140,0,60,0,63,0,187,0,83,0,233,0,197,0,91,0,146,0,168,0,231,0,191,0,242,0,9,0,0,0,110,0,216,0,140,0,161,0,164,0,0,0,0,0,20,0,250,0,161,0,25,0,199,0,237,0,119,0,103,0,120,0,0,0,95,0,53,0,169,0,21,0,108,0,64,0,117,0,236,0,34,0,133,0,165,0,217,0,91,0,39,0,201,0,170,0,222,0,107,0,234,0,61,0);
signal scenario_full  : scenario_type := (3,31,3,30,8,31,8,30,72,31,2,31,173,31,86,31,98,31,238,31,108,31,108,30,224,31,224,30,117,31,254,31,51,31,207,31,151,31,81,31,126,31,126,30,184,31,116,31,121,31,226,31,226,30,226,29,143,31,252,31,218,31,253,31,221,31,175,31,204,31,204,30,34,31,15,31,225,31,169,31,24,31,81,31,189,31,45,31,47,31,87,31,224,31,79,31,248,31,194,31,194,30,3,31,186,31,186,30,214,31,215,31,224,31,99,31,72,31,212,31,215,31,12,31,42,31,97,31,191,31,46,31,55,31,25,31,25,30,56,31,56,30,90,31,90,30,4,31,188,31,188,30,200,31,200,30,78,31,185,31,43,31,43,30,66,31,142,31,18,31,14,31,98,31,130,31,92,31,134,31,238,31,78,31,78,30,78,29,168,31,250,31,197,31,197,30,147,31,147,30,231,31,137,31,46,31,1,31,1,30,148,31,182,31,15,31,250,31,250,30,68,31,124,31,150,31,150,30,150,29,39,31,1,31,249,31,55,31,247,31,225,31,117,31,120,31,157,31,157,30,157,29,201,31,91,31,91,30,66,31,221,31,125,31,125,30,243,31,212,31,212,30,165,31,165,30,232,31,223,31,179,31,238,31,220,31,196,31,196,30,186,31,133,31,143,31,18,31,124,31,212,31,212,30,212,29,150,31,237,31,59,31,58,31,105,31,105,30,182,31,101,31,121,31,10,31,198,31,178,31,254,31,193,31,193,30,157,31,197,31,202,31,54,31,54,30,54,29,54,28,136,31,225,31,225,30,63,31,37,31,165,31,116,31,130,31,24,31,135,31,79,31,112,31,234,31,32,31,3,31,133,31,231,31,189,31,185,31,95,31,95,30,70,31,214,31,139,31,233,31,224,31,53,31,95,31,38,31,188,31,164,31,52,31,121,31,92,31,123,31,123,30,160,31,233,31,233,30,63,31,108,31,117,31,117,30,117,29,32,31,240,31,240,30,252,31,252,30,16,31,154,31,231,31,18,31,234,31,203,31,203,30,179,31,179,30,171,31,236,31,208,31,137,31,177,31,177,30,243,31,243,30,67,31,136,31,234,31,40,31,128,31,199,31,245,31,240,31,213,31,127,31,216,31,182,31,11,31,157,31,219,31,111,31,3,31,32,31,124,31,175,31,55,31,142,31,239,31,189,31,17,31,218,31,59,31,91,31,208,31,119,31,119,30,119,29,119,28,180,31,77,31,77,30,244,31,190,31,190,30,92,31,91,31,230,31,254,31,36,31,202,31,245,31,118,31,151,31,157,31,110,31,155,31,156,31,156,30,54,31,76,31,40,31,106,31,63,31,136,31,136,30,55,31,22,31,108,31,108,30,113,31,113,30,121,31,56,31,73,31,51,31,51,30,115,31,248,31,230,31,230,30,59,31,157,31,157,30,44,31,11,31,37,31,121,31,7,31,164,31,55,31,206,31,206,30,206,29,206,28,206,27,108,31,219,31,190,31,38,31,23,31,34,31,217,31,232,31,30,31,54,31,86,31,87,31,255,31,255,30,60,31,141,31,204,31,204,30,204,29,110,31,128,31,172,31,83,31,83,30,83,29,41,31,41,30,161,31,161,30,116,31,82,31,154,31,154,30,154,29,47,31,248,31,89,31,147,31,207,31,207,30,154,31,154,30,80,31,80,30,84,31,15,31,98,31,207,31,41,31,41,30,41,29,43,31,214,31,135,31,135,30,100,31,145,31,185,31,15,31,15,30,15,29,84,31,64,31,64,30,227,31,91,31,91,30,221,31,255,31,255,30,255,29,255,28,161,31,144,31,144,30,147,31,103,31,153,31,101,31,201,31,201,30,145,31,139,31,107,31,107,30,163,31,63,31,54,31,54,30,230,31,88,31,88,30,88,29,5,31,5,30,201,31,204,31,13,31,91,31,244,31,92,31,213,31,213,30,59,31,115,31,115,30,189,31,75,31,230,31,154,31,108,31,108,30,113,31,113,30,113,29,135,31,53,31,53,30,163,31,163,30,163,29,163,28,129,31,157,31,47,31,233,31,228,31,228,30,47,31,47,30,89,31,216,31,9,31,209,31,209,30,189,31,54,31,54,30,243,31,77,31,77,30,251,31,195,31,195,30,226,31,226,30,221,31,221,30,221,29,221,28,160,31,138,31,112,31,72,31,246,31,132,31,180,31,196,31,44,31,125,31,149,31,157,31,240,31,79,31,79,30,240,31,134,31,187,31,187,30,219,31,178,31,194,31,194,30,247,31,195,31,175,31,234,31,8,31,8,30,111,31,227,31,160,31,160,30,31,31,31,30,86,31,100,31,100,30,100,29,41,31,199,31,107,31,107,30,107,29,107,28,64,31,19,31,19,30,203,31,37,31,70,31,102,31,102,30,236,31,103,31,229,31,229,30,149,31,162,31,142,31,244,31,244,31,181,31,181,30,205,31,205,30,197,31,23,31,128,31,123,31,34,31,34,30,28,31,15,31,105,31,144,31,175,31,175,30,199,31,121,31,51,31,46,31,46,30,104,31,86,31,95,31,95,30,187,31,16,31,16,30,16,29,16,28,24,31,24,30,78,31,235,31,189,31,54,31,106,31,171,31,223,31,229,31,2,31,3,31,191,31,191,30,105,31,205,31,124,31,59,31,159,31,159,30,222,31,222,30,188,31,32,31,222,31,119,31,238,31,238,30,160,31,36,31,32,31,20,31,140,31,198,31,198,30,36,31,238,31,26,31,100,31,100,30,120,31,56,31,11,31,74,31,74,30,161,31,161,30,95,31,95,30,95,29,251,31,166,31,241,31,241,30,241,29,14,31,57,31,2,31,10,31,191,31,172,31,46,31,128,31,94,31,94,30,95,31,245,31,251,31,38,31,19,31,213,31,58,31,58,30,226,31,65,31,140,31,225,31,217,31,217,31,38,31,101,31,117,31,222,31,123,31,123,30,30,31,55,31,239,31,135,31,192,31,79,31,93,31,2,31,2,30,59,31,35,31,109,31,74,31,74,30,74,29,74,28,46,31,85,31,163,31,156,31,201,31,133,31,122,31,122,30,217,31,214,31,214,30,35,31,150,31,234,31,109,31,52,31,108,31,15,31,108,31,87,31,87,30,254,31,6,31,191,31,234,31,223,31,137,31,137,30,4,31,155,31,161,31,161,30,45,31,45,30,94,31,16,31,184,31,153,31,81,31,87,31,74,31,162,31,232,31,197,31,197,30,172,31,135,31,135,30,135,29,135,28,148,31,245,31,67,31,87,31,87,30,159,31,255,31,9,31,91,31,127,31,98,31,221,31,53,31,36,31,148,31,220,31,36,31,171,31,171,30,7,31,198,31,198,30,68,31,68,30,109,31,109,30,198,31,150,31,117,31,76,31,76,30,192,31,52,31,170,31,175,31,175,30,175,29,191,31,195,31,57,31,187,31,203,31,203,30,221,31,139,31,215,31,121,31,20,31,82,31,137,31,137,30,3,31,147,31,178,31,218,31,54,31,243,31,243,30,21,31,8,31,254,31,12,31,152,31,34,31,191,31,211,31,233,31,233,30,250,31,92,31,9,31,130,31,216,31,86,31,86,30,90,31,90,30,207,31,207,30,80,31,33,31,52,31,142,31,253,31,253,30,212,31,6,31,178,31,129,31,155,31,129,31,97,31,94,31,14,31,4,31,11,31,10,31,163,31,183,31,183,30,183,29,133,31,23,31,245,31,197,31,156,31,121,31,232,31,251,31,38,31,53,31,53,30,219,31,187,31,187,30,184,31,184,30,151,31,230,31,82,31,105,31,13,31,49,31,36,31,36,30,22,31,232,31,95,31,95,30,119,31,98,31,199,31,116,31,102,31,52,31,108,31,54,31,24,31,59,31,203,31,150,31,83,31,139,31,139,30,132,31,251,31,251,30,194,31,109,31,128,31,210,31,222,31,138,31,138,30,222,31,74,31,74,30,252,31,172,31,172,30,53,31,148,31,49,31,200,31,177,31,177,30,217,31,246,31,246,30,63,31,156,31,156,30,203,31,30,31,7,31,112,31,112,30,185,31,185,30,39,31,226,31,170,31,193,31,17,31,34,31,16,31,197,31,197,30,50,31,88,31,204,31,83,31,83,30,41,31,216,31,216,30,10,31,150,31,222,31,39,31,80,31,244,31,204,31,92,31,138,31,136,31,56,31,56,30,216,31,231,31,75,31,75,30,75,29,21,31,21,30,63,31,63,30,28,31,28,30,219,31,177,31,111,31,85,31,135,31,36,31,36,30,155,31,155,30,186,31,186,30,177,31,223,31,127,31,140,31,60,31,63,31,187,31,83,31,233,31,197,31,91,31,146,31,168,31,231,31,191,31,242,31,9,31,9,30,110,31,216,31,140,31,161,31,164,31,164,30,164,29,20,31,250,31,161,31,25,31,199,31,237,31,119,31,103,31,120,31,120,30,95,31,53,31,169,31,21,31,108,31,64,31,117,31,236,31,34,31,133,31,165,31,217,31,91,31,39,31,201,31,170,31,222,31,107,31,234,31,61,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
