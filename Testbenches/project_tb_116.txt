-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 838;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (197,0,0,0,169,0,0,0,40,0,104,0,167,0,19,0,52,0,211,0,81,0,60,0,167,0,0,0,108,0,39,0,90,0,0,0,17,0,190,0,33,0,59,0,23,0,108,0,200,0,160,0,152,0,151,0,0,0,44,0,0,0,186,0,0,0,51,0,36,0,0,0,111,0,0,0,187,0,0,0,0,0,194,0,187,0,233,0,100,0,162,0,87,0,241,0,97,0,121,0,229,0,0,0,220,0,58,0,171,0,0,0,193,0,0,0,78,0,74,0,144,0,112,0,89,0,91,0,0,0,0,0,232,0,52,0,52,0,246,0,159,0,168,0,160,0,0,0,235,0,0,0,253,0,233,0,35,0,152,0,73,0,74,0,118,0,148,0,138,0,57,0,186,0,0,0,71,0,190,0,0,0,159,0,31,0,92,0,83,0,60,0,0,0,0,0,179,0,100,0,57,0,189,0,179,0,0,0,178,0,0,0,189,0,0,0,114,0,202,0,0,0,0,0,95,0,95,0,240,0,10,0,45,0,159,0,0,0,54,0,126,0,207,0,0,0,160,0,0,0,0,0,231,0,158,0,115,0,213,0,125,0,57,0,0,0,19,0,0,0,48,0,3,0,50,0,58,0,46,0,73,0,0,0,154,0,235,0,162,0,0,0,238,0,110,0,248,0,98,0,220,0,168,0,5,0,47,0,45,0,31,0,198,0,167,0,29,0,2,0,61,0,21,0,108,0,45,0,22,0,15,0,217,0,223,0,74,0,34,0,213,0,23,0,118,0,166,0,167,0,31,0,209,0,23,0,193,0,21,0,0,0,226,0,149,0,155,0,0,0,64,0,0,0,0,0,75,0,102,0,177,0,107,0,245,0,96,0,12,0,243,0,0,0,124,0,217,0,116,0,0,0,137,0,149,0,42,0,0,0,82,0,0,0,0,0,248,0,47,0,238,0,204,0,17,0,237,0,119,0,10,0,247,0,241,0,0,0,23,0,176,0,109,0,164,0,128,0,0,0,0,0,85,0,127,0,248,0,59,0,103,0,0,0,62,0,0,0,112,0,243,0,120,0,190,0,159,0,195,0,184,0,35,0,135,0,194,0,146,0,235,0,0,0,0,0,255,0,0,0,136,0,82,0,144,0,211,0,92,0,116,0,64,0,125,0,198,0,46,0,196,0,48,0,154,0,118,0,0,0,0,0,200,0,71,0,97,0,128,0,18,0,60,0,54,0,19,0,31,0,67,0,183,0,0,0,129,0,172,0,46,0,176,0,68,0,227,0,200,0,84,0,0,0,0,0,170,0,163,0,91,0,161,0,0,0,18,0,198,0,52,0,187,0,216,0,0,0,121,0,1,0,59,0,0,0,225,0,225,0,0,0,175,0,100,0,138,0,84,0,167,0,0,0,100,0,34,0,117,0,37,0,0,0,0,0,214,0,24,0,1,0,0,0,133,0,170,0,184,0,0,0,0,0,90,0,0,0,200,0,80,0,157,0,61,0,0,0,29,0,0,0,70,0,0,0,227,0,246,0,116,0,142,0,214,0,0,0,107,0,152,0,147,0,147,0,0,0,16,0,0,0,22,0,204,0,42,0,46,0,0,0,0,0,0,0,155,0,0,0,40,0,247,0,0,0,115,0,0,0,97,0,54,0,102,0,33,0,141,0,73,0,44,0,50,0,111,0,226,0,0,0,106,0,116,0,230,0,181,0,198,0,247,0,0,0,178,0,203,0,6,0,104,0,239,0,0,0,12,0,108,0,184,0,26,0,0,0,0,0,53,0,192,0,119,0,30,0,181,0,99,0,0,0,0,0,145,0,119,0,179,0,0,0,66,0,51,0,7,0,186,0,88,0,148,0,0,0,218,0,0,0,24,0,143,0,143,0,6,0,0,0,69,0,88,0,0,0,0,0,138,0,13,0,180,0,48,0,235,0,0,0,59,0,0,0,200,0,202,0,228,0,0,0,4,0,12,0,188,0,221,0,241,0,188,0,0,0,0,0,134,0,254,0,154,0,92,0,0,0,0,0,157,0,0,0,137,0,4,0,187,0,8,0,216,0,195,0,155,0,0,0,56,0,177,0,248,0,243,0,68,0,2,0,0,0,55,0,120,0,168,0,228,0,128,0,0,0,125,0,0,0,32,0,239,0,210,0,32,0,51,0,64,0,72,0,218,0,58,0,0,0,0,0,0,0,231,0,0,0,237,0,217,0,162,0,213,0,131,0,222,0,64,0,203,0,26,0,126,0,147,0,44,0,197,0,28,0,42,0,135,0,211,0,214,0,184,0,0,0,160,0,227,0,34,0,53,0,0,0,87,0,62,0,68,0,0,0,181,0,171,0,94,0,97,0,203,0,26,0,0,0,99,0,246,0,58,0,60,0,16,0,225,0,174,0,168,0,234,0,186,0,123,0,0,0,128,0,97,0,33,0,199,0,70,0,232,0,183,0,82,0,231,0,27,0,4,0,70,0,42,0,73,0,0,0,0,0,42,0,0,0,0,0,0,0,0,0,199,0,0,0,0,0,45,0,106,0,73,0,0,0,0,0,0,0,159,0,193,0,98,0,167,0,17,0,78,0,0,0,29,0,3,0,0,0,232,0,0,0,161,0,215,0,173,0,158,0,61,0,31,0,132,0,142,0,228,0,137,0,52,0,145,0,0,0,58,0,111,0,248,0,62,0,107,0,0,0,228,0,123,0,212,0,210,0,18,0,101,0,35,0,53,0,3,0,238,0,185,0,67,0,45,0,53,0,0,0,129,0,104,0,90,0,0,0,117,0,68,0,94,0,18,0,133,0,134,0,114,0,212,0,23,0,0,0,34,0,50,0,0,0,112,0,6,0,31,0,0,0,213,0,4,0,159,0,207,0,56,0,0,0,98,0,213,0,51,0,38,0,0,0,1,0,91,0,0,0,16,0,209,0,95,0,170,0,0,0,5,0,0,0,170,0,0,0,105,0,3,0,177,0,0,0,162,0,146,0,246,0,18,0,152,0,165,0,62,0,0,0,7,0,153,0,0,0,91,0,105,0,119,0,113,0,0,0,0,0,0,0,0,0,36,0,69,0,0,0,166,0,0,0,0,0,167,0,22,0,0,0,1,0,197,0,98,0,143,0,0,0,0,0,148,0,238,0,9,0,0,0,54,0,0,0,38,0,215,0,246,0,142,0,233,0,74,0,0,0,157,0,140,0,223,0,236,0,131,0,18,0,87,0,92,0,149,0,215,0,235,0,0,0,0,0,0,0,150,0,114,0,87,0,141,0,224,0,100,0,0,0,106,0,180,0,0,0,209,0,104,0,31,0,81,0,34,0,128,0,29,0,173,0,0,0,120,0,122,0,99,0,29,0,158,0,248,0,213,0,63,0,0,0,20,0,249,0,0,0,72,0,212,0,134,0,0,0,135,0,10,0,5,0,134,0,171,0,0,0,190,0,218,0,109,0,0,0,143,0,0,0,80,0,195,0,84,0,232,0,181,0,0,0,73,0,0,0,164,0,36,0,212,0,56,0,88,0,160,0,171,0,0,0,17,0,223,0,30,0,45,0,186,0,245,0,199,0,255,0,0,0,56,0,0,0,66,0,181,0,114,0,0,0,85,0,111,0,176,0,0,0,214,0,192,0,9,0,251,0,133,0,42,0,181,0,46,0,0,0,194,0,54,0,40,0,138,0,0,0,0,0,0,0,247,0,89,0,55,0,82,0,226,0,0,0,78,0,34,0,3,0,33,0,162,0,226,0,126,0,0,0,0,0,105,0,190,0);
signal scenario_full  : scenario_type := (197,31,197,30,169,31,169,30,40,31,104,31,167,31,19,31,52,31,211,31,81,31,60,31,167,31,167,30,108,31,39,31,90,31,90,30,17,31,190,31,33,31,59,31,23,31,108,31,200,31,160,31,152,31,151,31,151,30,44,31,44,30,186,31,186,30,51,31,36,31,36,30,111,31,111,30,187,31,187,30,187,29,194,31,187,31,233,31,100,31,162,31,87,31,241,31,97,31,121,31,229,31,229,30,220,31,58,31,171,31,171,30,193,31,193,30,78,31,74,31,144,31,112,31,89,31,91,31,91,30,91,29,232,31,52,31,52,31,246,31,159,31,168,31,160,31,160,30,235,31,235,30,253,31,233,31,35,31,152,31,73,31,74,31,118,31,148,31,138,31,57,31,186,31,186,30,71,31,190,31,190,30,159,31,31,31,92,31,83,31,60,31,60,30,60,29,179,31,100,31,57,31,189,31,179,31,179,30,178,31,178,30,189,31,189,30,114,31,202,31,202,30,202,29,95,31,95,31,240,31,10,31,45,31,159,31,159,30,54,31,126,31,207,31,207,30,160,31,160,30,160,29,231,31,158,31,115,31,213,31,125,31,57,31,57,30,19,31,19,30,48,31,3,31,50,31,58,31,46,31,73,31,73,30,154,31,235,31,162,31,162,30,238,31,110,31,248,31,98,31,220,31,168,31,5,31,47,31,45,31,31,31,198,31,167,31,29,31,2,31,61,31,21,31,108,31,45,31,22,31,15,31,217,31,223,31,74,31,34,31,213,31,23,31,118,31,166,31,167,31,31,31,209,31,23,31,193,31,21,31,21,30,226,31,149,31,155,31,155,30,64,31,64,30,64,29,75,31,102,31,177,31,107,31,245,31,96,31,12,31,243,31,243,30,124,31,217,31,116,31,116,30,137,31,149,31,42,31,42,30,82,31,82,30,82,29,248,31,47,31,238,31,204,31,17,31,237,31,119,31,10,31,247,31,241,31,241,30,23,31,176,31,109,31,164,31,128,31,128,30,128,29,85,31,127,31,248,31,59,31,103,31,103,30,62,31,62,30,112,31,243,31,120,31,190,31,159,31,195,31,184,31,35,31,135,31,194,31,146,31,235,31,235,30,235,29,255,31,255,30,136,31,82,31,144,31,211,31,92,31,116,31,64,31,125,31,198,31,46,31,196,31,48,31,154,31,118,31,118,30,118,29,200,31,71,31,97,31,128,31,18,31,60,31,54,31,19,31,31,31,67,31,183,31,183,30,129,31,172,31,46,31,176,31,68,31,227,31,200,31,84,31,84,30,84,29,170,31,163,31,91,31,161,31,161,30,18,31,198,31,52,31,187,31,216,31,216,30,121,31,1,31,59,31,59,30,225,31,225,31,225,30,175,31,100,31,138,31,84,31,167,31,167,30,100,31,34,31,117,31,37,31,37,30,37,29,214,31,24,31,1,31,1,30,133,31,170,31,184,31,184,30,184,29,90,31,90,30,200,31,80,31,157,31,61,31,61,30,29,31,29,30,70,31,70,30,227,31,246,31,116,31,142,31,214,31,214,30,107,31,152,31,147,31,147,31,147,30,16,31,16,30,22,31,204,31,42,31,46,31,46,30,46,29,46,28,155,31,155,30,40,31,247,31,247,30,115,31,115,30,97,31,54,31,102,31,33,31,141,31,73,31,44,31,50,31,111,31,226,31,226,30,106,31,116,31,230,31,181,31,198,31,247,31,247,30,178,31,203,31,6,31,104,31,239,31,239,30,12,31,108,31,184,31,26,31,26,30,26,29,53,31,192,31,119,31,30,31,181,31,99,31,99,30,99,29,145,31,119,31,179,31,179,30,66,31,51,31,7,31,186,31,88,31,148,31,148,30,218,31,218,30,24,31,143,31,143,31,6,31,6,30,69,31,88,31,88,30,88,29,138,31,13,31,180,31,48,31,235,31,235,30,59,31,59,30,200,31,202,31,228,31,228,30,4,31,12,31,188,31,221,31,241,31,188,31,188,30,188,29,134,31,254,31,154,31,92,31,92,30,92,29,157,31,157,30,137,31,4,31,187,31,8,31,216,31,195,31,155,31,155,30,56,31,177,31,248,31,243,31,68,31,2,31,2,30,55,31,120,31,168,31,228,31,128,31,128,30,125,31,125,30,32,31,239,31,210,31,32,31,51,31,64,31,72,31,218,31,58,31,58,30,58,29,58,28,231,31,231,30,237,31,217,31,162,31,213,31,131,31,222,31,64,31,203,31,26,31,126,31,147,31,44,31,197,31,28,31,42,31,135,31,211,31,214,31,184,31,184,30,160,31,227,31,34,31,53,31,53,30,87,31,62,31,68,31,68,30,181,31,171,31,94,31,97,31,203,31,26,31,26,30,99,31,246,31,58,31,60,31,16,31,225,31,174,31,168,31,234,31,186,31,123,31,123,30,128,31,97,31,33,31,199,31,70,31,232,31,183,31,82,31,231,31,27,31,4,31,70,31,42,31,73,31,73,30,73,29,42,31,42,30,42,29,42,28,42,27,199,31,199,30,199,29,45,31,106,31,73,31,73,30,73,29,73,28,159,31,193,31,98,31,167,31,17,31,78,31,78,30,29,31,3,31,3,30,232,31,232,30,161,31,215,31,173,31,158,31,61,31,31,31,132,31,142,31,228,31,137,31,52,31,145,31,145,30,58,31,111,31,248,31,62,31,107,31,107,30,228,31,123,31,212,31,210,31,18,31,101,31,35,31,53,31,3,31,238,31,185,31,67,31,45,31,53,31,53,30,129,31,104,31,90,31,90,30,117,31,68,31,94,31,18,31,133,31,134,31,114,31,212,31,23,31,23,30,34,31,50,31,50,30,112,31,6,31,31,31,31,30,213,31,4,31,159,31,207,31,56,31,56,30,98,31,213,31,51,31,38,31,38,30,1,31,91,31,91,30,16,31,209,31,95,31,170,31,170,30,5,31,5,30,170,31,170,30,105,31,3,31,177,31,177,30,162,31,146,31,246,31,18,31,152,31,165,31,62,31,62,30,7,31,153,31,153,30,91,31,105,31,119,31,113,31,113,30,113,29,113,28,113,27,36,31,69,31,69,30,166,31,166,30,166,29,167,31,22,31,22,30,1,31,197,31,98,31,143,31,143,30,143,29,148,31,238,31,9,31,9,30,54,31,54,30,38,31,215,31,246,31,142,31,233,31,74,31,74,30,157,31,140,31,223,31,236,31,131,31,18,31,87,31,92,31,149,31,215,31,235,31,235,30,235,29,235,28,150,31,114,31,87,31,141,31,224,31,100,31,100,30,106,31,180,31,180,30,209,31,104,31,31,31,81,31,34,31,128,31,29,31,173,31,173,30,120,31,122,31,99,31,29,31,158,31,248,31,213,31,63,31,63,30,20,31,249,31,249,30,72,31,212,31,134,31,134,30,135,31,10,31,5,31,134,31,171,31,171,30,190,31,218,31,109,31,109,30,143,31,143,30,80,31,195,31,84,31,232,31,181,31,181,30,73,31,73,30,164,31,36,31,212,31,56,31,88,31,160,31,171,31,171,30,17,31,223,31,30,31,45,31,186,31,245,31,199,31,255,31,255,30,56,31,56,30,66,31,181,31,114,31,114,30,85,31,111,31,176,31,176,30,214,31,192,31,9,31,251,31,133,31,42,31,181,31,46,31,46,30,194,31,54,31,40,31,138,31,138,30,138,29,138,28,247,31,89,31,55,31,82,31,226,31,226,30,78,31,34,31,3,31,33,31,162,31,226,31,126,31,126,30,126,29,105,31,190,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
