-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 531;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (22,0,137,0,242,0,214,0,86,0,162,0,85,0,2,0,173,0,14,0,249,0,2,0,0,0,68,0,143,0,0,0,217,0,200,0,197,0,118,0,0,0,0,0,138,0,81,0,30,0,119,0,235,0,1,0,193,0,123,0,0,0,84,0,3,0,161,0,116,0,174,0,192,0,220,0,0,0,216,0,43,0,217,0,3,0,66,0,193,0,117,0,210,0,197,0,236,0,204,0,57,0,0,0,59,0,26,0,60,0,106,0,161,0,239,0,36,0,222,0,111,0,0,0,8,0,58,0,3,0,0,0,74,0,132,0,241,0,130,0,194,0,62,0,83,0,32,0,242,0,146,0,50,0,118,0,235,0,77,0,23,0,174,0,0,0,98,0,150,0,103,0,93,0,152,0,0,0,82,0,234,0,93,0,0,0,151,0,214,0,0,0,19,0,0,0,0,0,198,0,104,0,21,0,56,0,121,0,196,0,0,0,171,0,242,0,128,0,116,0,209,0,0,0,123,0,32,0,0,0,90,0,147,0,0,0,64,0,109,0,60,0,200,0,0,0,144,0,0,0,23,0,0,0,0,0,97,0,220,0,58,0,145,0,11,0,0,0,139,0,0,0,197,0,0,0,160,0,197,0,127,0,181,0,81,0,0,0,252,0,203,0,228,0,185,0,151,0,96,0,0,0,0,0,0,0,224,0,203,0,108,0,53,0,255,0,0,0,222,0,105,0,109,0,99,0,27,0,19,0,138,0,0,0,122,0,195,0,164,0,16,0,187,0,189,0,231,0,82,0,27,0,196,0,0,0,0,0,239,0,2,0,137,0,125,0,229,0,120,0,154,0,168,0,212,0,0,0,102,0,66,0,229,0,60,0,0,0,135,0,228,0,0,0,168,0,251,0,167,0,0,0,80,0,234,0,152,0,249,0,90,0,0,0,57,0,7,0,0,0,250,0,97,0,0,0,218,0,201,0,106,0,187,0,245,0,175,0,114,0,0,0,73,0,164,0,0,0,88,0,28,0,236,0,176,0,0,0,124,0,232,0,0,0,0,0,0,0,213,0,232,0,96,0,22,0,14,0,120,0,97,0,0,0,197,0,80,0,187,0,224,0,0,0,0,0,36,0,245,0,217,0,105,0,0,0,0,0,155,0,0,0,68,0,173,0,84,0,90,0,229,0,185,0,14,0,83,0,0,0,0,0,91,0,77,0,0,0,134,0,161,0,0,0,163,0,85,0,68,0,215,0,185,0,100,0,200,0,0,0,253,0,15,0,250,0,91,0,47,0,123,0,218,0,0,0,136,0,105,0,0,0,0,0,0,0,136,0,23,0,134,0,86,0,254,0,114,0,0,0,201,0,0,0,0,0,8,0,84,0,7,0,69,0,204,0,59,0,33,0,0,0,45,0,154,0,124,0,70,0,0,0,35,0,0,0,93,0,189,0,183,0,93,0,75,0,63,0,158,0,151,0,133,0,186,0,77,0,0,0,242,0,128,0,124,0,112,0,217,0,171,0,124,0,22,0,238,0,133,0,90,0,0,0,0,0,0,0,217,0,83,0,25,0,206,0,72,0,252,0,0,0,104,0,148,0,54,0,164,0,112,0,243,0,68,0,211,0,55,0,58,0,153,0,74,0,0,0,205,0,232,0,11,0,53,0,125,0,60,0,0,0,0,0,0,0,243,0,128,0,0,0,89,0,156,0,204,0,252,0,53,0,28,0,0,0,89,0,0,0,10,0,113,0,40,0,38,0,9,0,10,0,51,0,0,0,108,0,11,0,134,0,0,0,12,0,232,0,130,0,160,0,215,0,24,0,244,0,86,0,187,0,0,0,233,0,0,0,174,0,1,0,0,0,59,0,36,0,28,0,15,0,0,0,138,0,55,0,16,0,6,0,0,0,8,0,223,0,102,0,108,0,63,0,50,0,0,0,2,0,66,0,0,0,157,0,207,0,114,0,238,0,11,0,102,0,96,0,0,0,120,0,146,0,115,0,202,0,0,0,252,0,0,0,89,0,0,0,78,0,0,0,0,0,0,0,219,0,175,0,0,0,85,0,0,0,0,0,109,0,162,0,24,0,155,0,3,0,28,0,130,0,159,0,41,0,107,0,30,0,152,0,124,0,56,0,239,0,248,0,173,0,65,0,163,0,150,0,74,0,69,0,158,0,0,0,78,0,74,0,156,0,11,0,3,0,190,0,124,0,85,0,108,0,62,0,149,0,220,0,73,0,99,0,24,0,35,0,184,0,239,0,232,0,103,0,136,0,94,0,22,0,176,0,115,0,174,0,0,0,194,0,154,0,0,0,17,0,0,0,28,0,0,0,142,0,152,0,45,0,0,0,0,0,190,0,5,0,113,0,231,0,94,0,44,0,0,0,90,0,141,0);
signal scenario_full  : scenario_type := (22,31,137,31,242,31,214,31,86,31,162,31,85,31,2,31,173,31,14,31,249,31,2,31,2,30,68,31,143,31,143,30,217,31,200,31,197,31,118,31,118,30,118,29,138,31,81,31,30,31,119,31,235,31,1,31,193,31,123,31,123,30,84,31,3,31,161,31,116,31,174,31,192,31,220,31,220,30,216,31,43,31,217,31,3,31,66,31,193,31,117,31,210,31,197,31,236,31,204,31,57,31,57,30,59,31,26,31,60,31,106,31,161,31,239,31,36,31,222,31,111,31,111,30,8,31,58,31,3,31,3,30,74,31,132,31,241,31,130,31,194,31,62,31,83,31,32,31,242,31,146,31,50,31,118,31,235,31,77,31,23,31,174,31,174,30,98,31,150,31,103,31,93,31,152,31,152,30,82,31,234,31,93,31,93,30,151,31,214,31,214,30,19,31,19,30,19,29,198,31,104,31,21,31,56,31,121,31,196,31,196,30,171,31,242,31,128,31,116,31,209,31,209,30,123,31,32,31,32,30,90,31,147,31,147,30,64,31,109,31,60,31,200,31,200,30,144,31,144,30,23,31,23,30,23,29,97,31,220,31,58,31,145,31,11,31,11,30,139,31,139,30,197,31,197,30,160,31,197,31,127,31,181,31,81,31,81,30,252,31,203,31,228,31,185,31,151,31,96,31,96,30,96,29,96,28,224,31,203,31,108,31,53,31,255,31,255,30,222,31,105,31,109,31,99,31,27,31,19,31,138,31,138,30,122,31,195,31,164,31,16,31,187,31,189,31,231,31,82,31,27,31,196,31,196,30,196,29,239,31,2,31,137,31,125,31,229,31,120,31,154,31,168,31,212,31,212,30,102,31,66,31,229,31,60,31,60,30,135,31,228,31,228,30,168,31,251,31,167,31,167,30,80,31,234,31,152,31,249,31,90,31,90,30,57,31,7,31,7,30,250,31,97,31,97,30,218,31,201,31,106,31,187,31,245,31,175,31,114,31,114,30,73,31,164,31,164,30,88,31,28,31,236,31,176,31,176,30,124,31,232,31,232,30,232,29,232,28,213,31,232,31,96,31,22,31,14,31,120,31,97,31,97,30,197,31,80,31,187,31,224,31,224,30,224,29,36,31,245,31,217,31,105,31,105,30,105,29,155,31,155,30,68,31,173,31,84,31,90,31,229,31,185,31,14,31,83,31,83,30,83,29,91,31,77,31,77,30,134,31,161,31,161,30,163,31,85,31,68,31,215,31,185,31,100,31,200,31,200,30,253,31,15,31,250,31,91,31,47,31,123,31,218,31,218,30,136,31,105,31,105,30,105,29,105,28,136,31,23,31,134,31,86,31,254,31,114,31,114,30,201,31,201,30,201,29,8,31,84,31,7,31,69,31,204,31,59,31,33,31,33,30,45,31,154,31,124,31,70,31,70,30,35,31,35,30,93,31,189,31,183,31,93,31,75,31,63,31,158,31,151,31,133,31,186,31,77,31,77,30,242,31,128,31,124,31,112,31,217,31,171,31,124,31,22,31,238,31,133,31,90,31,90,30,90,29,90,28,217,31,83,31,25,31,206,31,72,31,252,31,252,30,104,31,148,31,54,31,164,31,112,31,243,31,68,31,211,31,55,31,58,31,153,31,74,31,74,30,205,31,232,31,11,31,53,31,125,31,60,31,60,30,60,29,60,28,243,31,128,31,128,30,89,31,156,31,204,31,252,31,53,31,28,31,28,30,89,31,89,30,10,31,113,31,40,31,38,31,9,31,10,31,51,31,51,30,108,31,11,31,134,31,134,30,12,31,232,31,130,31,160,31,215,31,24,31,244,31,86,31,187,31,187,30,233,31,233,30,174,31,1,31,1,30,59,31,36,31,28,31,15,31,15,30,138,31,55,31,16,31,6,31,6,30,8,31,223,31,102,31,108,31,63,31,50,31,50,30,2,31,66,31,66,30,157,31,207,31,114,31,238,31,11,31,102,31,96,31,96,30,120,31,146,31,115,31,202,31,202,30,252,31,252,30,89,31,89,30,78,31,78,30,78,29,78,28,219,31,175,31,175,30,85,31,85,30,85,29,109,31,162,31,24,31,155,31,3,31,28,31,130,31,159,31,41,31,107,31,30,31,152,31,124,31,56,31,239,31,248,31,173,31,65,31,163,31,150,31,74,31,69,31,158,31,158,30,78,31,74,31,156,31,11,31,3,31,190,31,124,31,85,31,108,31,62,31,149,31,220,31,73,31,99,31,24,31,35,31,184,31,239,31,232,31,103,31,136,31,94,31,22,31,176,31,115,31,174,31,174,30,194,31,154,31,154,30,17,31,17,30,28,31,28,30,142,31,152,31,45,31,45,30,45,29,190,31,5,31,113,31,231,31,94,31,44,31,44,30,90,31,141,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
