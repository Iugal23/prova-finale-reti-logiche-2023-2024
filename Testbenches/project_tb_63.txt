-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 469;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (175,0,0,0,179,0,122,0,151,0,166,0,20,0,200,0,38,0,30,0,61,0,24,0,44,0,49,0,194,0,170,0,0,0,0,0,145,0,0,0,155,0,0,0,143,0,180,0,147,0,144,0,36,0,229,0,163,0,255,0,67,0,0,0,0,0,29,0,208,0,55,0,0,0,169,0,25,0,0,0,43,0,235,0,0,0,211,0,19,0,137,0,0,0,16,0,133,0,103,0,118,0,177,0,71,0,128,0,119,0,0,0,105,0,200,0,66,0,0,0,166,0,133,0,33,0,43,0,155,0,246,0,229,0,0,0,0,0,150,0,181,0,181,0,238,0,0,0,87,0,217,0,46,0,141,0,144,0,0,0,246,0,209,0,31,0,183,0,183,0,154,0,0,0,235,0,106,0,0,0,235,0,0,0,32,0,16,0,242,0,56,0,105,0,84,0,124,0,199,0,108,0,231,0,168,0,152,0,12,0,98,0,0,0,0,0,255,0,221,0,72,0,239,0,0,0,160,0,6,0,55,0,206,0,4,0,0,0,221,0,158,0,148,0,0,0,0,0,148,0,67,0,235,0,0,0,163,0,12,0,64,0,127,0,15,0,0,0,143,0,0,0,108,0,41,0,63,0,23,0,173,0,93,0,95,0,0,0,147,0,210,0,189,0,19,0,161,0,130,0,0,0,6,0,128,0,134,0,201,0,67,0,95,0,0,0,236,0,142,0,44,0,157,0,103,0,37,0,0,0,249,0,104,0,194,0,188,0,93,0,202,0,84,0,182,0,181,0,0,0,19,0,0,0,10,0,178,0,29,0,0,0,46,0,99,0,52,0,144,0,151,0,0,0,0,0,0,0,212,0,0,0,0,0,131,0,82,0,235,0,0,0,114,0,134,0,176,0,70,0,114,0,167,0,0,0,0,0,219,0,252,0,136,0,214,0,28,0,230,0,138,0,248,0,0,0,0,0,188,0,255,0,0,0,242,0,91,0,0,0,131,0,0,0,133,0,219,0,49,0,97,0,0,0,0,0,0,0,203,0,6,0,125,0,60,0,227,0,75,0,14,0,149,0,95,0,0,0,0,0,201,0,200,0,104,0,136,0,10,0,187,0,181,0,100,0,22,0,210,0,153,0,130,0,12,0,0,0,27,0,99,0,66,0,193,0,140,0,0,0,0,0,0,0,142,0,141,0,241,0,115,0,172,0,125,0,64,0,134,0,2,0,170,0,0,0,0,0,0,0,39,0,20,0,236,0,74,0,204,0,27,0,165,0,222,0,158,0,227,0,27,0,193,0,30,0,120,0,231,0,207,0,0,0,199,0,92,0,230,0,201,0,107,0,155,0,108,0,191,0,219,0,197,0,224,0,0,0,1,0,50,0,54,0,158,0,0,0,0,0,181,0,142,0,65,0,0,0,136,0,0,0,233,0,37,0,63,0,251,0,164,0,86,0,7,0,181,0,135,0,130,0,74,0,0,0,76,0,159,0,90,0,212,0,0,0,0,0,0,0,0,0,7,0,5,0,0,0,140,0,0,0,0,0,75,0,94,0,112,0,31,0,43,0,18,0,220,0,157,0,15,0,192,0,141,0,84,0,192,0,96,0,0,0,83,0,198,0,185,0,186,0,43,0,80,0,109,0,103,0,203,0,32,0,0,0,206,0,0,0,86,0,247,0,122,0,70,0,0,0,137,0,186,0,119,0,170,0,82,0,122,0,63,0,173,0,190,0,179,0,196,0,91,0,39,0,78,0,242,0,243,0,0,0,239,0,181,0,99,0,111,0,0,0,0,0,208,0,144,0,68,0,1,0,239,0,228,0,251,0,55,0,0,0,18,0,0,0,0,0,0,0,172,0,0,0,59,0,72,0,249,0,0,0,153,0,91,0,251,0,0,0,70,0,250,0,243,0,228,0,105,0,151,0,191,0,122,0,123,0,185,0,130,0,24,0,129,0,0,0,105,0,189,0,0,0,0,0,0,0,191,0,4,0,246,0,226,0,144,0,221,0,0,0,118,0,58,0,209,0,147,0,225,0,100,0,93,0,0,0,33,0,99,0,203,0,69,0,72,0,69,0,3,0,0,0,164,0,187,0,0,0,37,0,105,0,0,0);
signal scenario_full  : scenario_type := (175,31,175,30,179,31,122,31,151,31,166,31,20,31,200,31,38,31,30,31,61,31,24,31,44,31,49,31,194,31,170,31,170,30,170,29,145,31,145,30,155,31,155,30,143,31,180,31,147,31,144,31,36,31,229,31,163,31,255,31,67,31,67,30,67,29,29,31,208,31,55,31,55,30,169,31,25,31,25,30,43,31,235,31,235,30,211,31,19,31,137,31,137,30,16,31,133,31,103,31,118,31,177,31,71,31,128,31,119,31,119,30,105,31,200,31,66,31,66,30,166,31,133,31,33,31,43,31,155,31,246,31,229,31,229,30,229,29,150,31,181,31,181,31,238,31,238,30,87,31,217,31,46,31,141,31,144,31,144,30,246,31,209,31,31,31,183,31,183,31,154,31,154,30,235,31,106,31,106,30,235,31,235,30,32,31,16,31,242,31,56,31,105,31,84,31,124,31,199,31,108,31,231,31,168,31,152,31,12,31,98,31,98,30,98,29,255,31,221,31,72,31,239,31,239,30,160,31,6,31,55,31,206,31,4,31,4,30,221,31,158,31,148,31,148,30,148,29,148,31,67,31,235,31,235,30,163,31,12,31,64,31,127,31,15,31,15,30,143,31,143,30,108,31,41,31,63,31,23,31,173,31,93,31,95,31,95,30,147,31,210,31,189,31,19,31,161,31,130,31,130,30,6,31,128,31,134,31,201,31,67,31,95,31,95,30,236,31,142,31,44,31,157,31,103,31,37,31,37,30,249,31,104,31,194,31,188,31,93,31,202,31,84,31,182,31,181,31,181,30,19,31,19,30,10,31,178,31,29,31,29,30,46,31,99,31,52,31,144,31,151,31,151,30,151,29,151,28,212,31,212,30,212,29,131,31,82,31,235,31,235,30,114,31,134,31,176,31,70,31,114,31,167,31,167,30,167,29,219,31,252,31,136,31,214,31,28,31,230,31,138,31,248,31,248,30,248,29,188,31,255,31,255,30,242,31,91,31,91,30,131,31,131,30,133,31,219,31,49,31,97,31,97,30,97,29,97,28,203,31,6,31,125,31,60,31,227,31,75,31,14,31,149,31,95,31,95,30,95,29,201,31,200,31,104,31,136,31,10,31,187,31,181,31,100,31,22,31,210,31,153,31,130,31,12,31,12,30,27,31,99,31,66,31,193,31,140,31,140,30,140,29,140,28,142,31,141,31,241,31,115,31,172,31,125,31,64,31,134,31,2,31,170,31,170,30,170,29,170,28,39,31,20,31,236,31,74,31,204,31,27,31,165,31,222,31,158,31,227,31,27,31,193,31,30,31,120,31,231,31,207,31,207,30,199,31,92,31,230,31,201,31,107,31,155,31,108,31,191,31,219,31,197,31,224,31,224,30,1,31,50,31,54,31,158,31,158,30,158,29,181,31,142,31,65,31,65,30,136,31,136,30,233,31,37,31,63,31,251,31,164,31,86,31,7,31,181,31,135,31,130,31,74,31,74,30,76,31,159,31,90,31,212,31,212,30,212,29,212,28,212,27,7,31,5,31,5,30,140,31,140,30,140,29,75,31,94,31,112,31,31,31,43,31,18,31,220,31,157,31,15,31,192,31,141,31,84,31,192,31,96,31,96,30,83,31,198,31,185,31,186,31,43,31,80,31,109,31,103,31,203,31,32,31,32,30,206,31,206,30,86,31,247,31,122,31,70,31,70,30,137,31,186,31,119,31,170,31,82,31,122,31,63,31,173,31,190,31,179,31,196,31,91,31,39,31,78,31,242,31,243,31,243,30,239,31,181,31,99,31,111,31,111,30,111,29,208,31,144,31,68,31,1,31,239,31,228,31,251,31,55,31,55,30,18,31,18,30,18,29,18,28,172,31,172,30,59,31,72,31,249,31,249,30,153,31,91,31,251,31,251,30,70,31,250,31,243,31,228,31,105,31,151,31,191,31,122,31,123,31,185,31,130,31,24,31,129,31,129,30,105,31,189,31,189,30,189,29,189,28,191,31,4,31,246,31,226,31,144,31,221,31,221,30,118,31,58,31,209,31,147,31,225,31,100,31,93,31,93,30,33,31,99,31,203,31,69,31,72,31,69,31,3,31,3,30,164,31,187,31,187,30,37,31,105,31,105,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
