-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 725;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,205,0,118,0,32,0,177,0,65,0,81,0,3,0,0,0,114,0,107,0,138,0,112,0,44,0,49,0,0,0,148,0,25,0,112,0,24,0,32,0,201,0,98,0,107,0,39,0,81,0,182,0,0,0,132,0,105,0,165,0,139,0,230,0,58,0,175,0,170,0,134,0,194,0,34,0,235,0,251,0,150,0,128,0,144,0,173,0,205,0,227,0,86,0,0,0,236,0,155,0,235,0,203,0,100,0,204,0,38,0,55,0,87,0,190,0,0,0,74,0,24,0,250,0,0,0,63,0,34,0,163,0,186,0,83,0,183,0,8,0,70,0,0,0,193,0,143,0,149,0,178,0,0,0,153,0,222,0,0,0,227,0,115,0,174,0,123,0,29,0,79,0,197,0,189,0,82,0,17,0,241,0,168,0,82,0,183,0,50,0,45,0,130,0,50,0,0,0,112,0,208,0,30,0,0,0,176,0,175,0,34,0,245,0,157,0,17,0,24,0,0,0,249,0,90,0,255,0,66,0,207,0,191,0,34,0,0,0,0,0,11,0,8,0,65,0,91,0,144,0,107,0,223,0,30,0,219,0,176,0,68,0,178,0,0,0,231,0,80,0,17,0,0,0,143,0,201,0,0,0,0,0,122,0,52,0,223,0,1,0,0,0,201,0,14,0,25,0,134,0,0,0,35,0,129,0,75,0,9,0,164,0,0,0,0,0,35,0,142,0,16,0,242,0,164,0,68,0,0,0,93,0,206,0,36,0,73,0,172,0,10,0,206,0,0,0,137,0,0,0,82,0,0,0,62,0,166,0,0,0,131,0,148,0,0,0,227,0,105,0,119,0,106,0,59,0,0,0,175,0,164,0,148,0,219,0,0,0,0,0,90,0,184,0,128,0,0,0,132,0,115,0,79,0,187,0,208,0,185,0,26,0,0,0,0,0,204,0,11,0,89,0,0,0,249,0,65,0,66,0,255,0,0,0,204,0,0,0,218,0,0,0,114,0,0,0,0,0,248,0,0,0,197,0,218,0,25,0,152,0,247,0,201,0,122,0,0,0,198,0,126,0,0,0,111,0,140,0,158,0,25,0,206,0,180,0,27,0,220,0,85,0,106,0,184,0,131,0,56,0,253,0,156,0,189,0,253,0,119,0,177,0,11,0,0,0,193,0,15,0,9,0,0,0,172,0,193,0,121,0,25,0,83,0,134,0,95,0,254,0,211,0,20,0,196,0,0,0,0,0,218,0,0,0,77,0,176,0,49,0,0,0,146,0,60,0,231,0,185,0,159,0,233,0,177,0,28,0,195,0,179,0,237,0,44,0,227,0,174,0,117,0,212,0,207,0,168,0,0,0,184,0,0,0,211,0,255,0,187,0,159,0,47,0,63,0,59,0,26,0,0,0,0,0,9,0,63,0,163,0,227,0,226,0,66,0,225,0,195,0,15,0,68,0,193,0,7,0,235,0,227,0,122,0,178,0,0,0,0,0,187,0,67,0,200,0,128,0,24,0,15,0,202,0,73,0,228,0,78,0,181,0,177,0,210,0,65,0,44,0,172,0,251,0,60,0,0,0,111,0,66,0,134,0,106,0,17,0,239,0,237,0,184,0,0,0,155,0,249,0,18,0,176,0,197,0,0,0,187,0,37,0,242,0,49,0,0,0,161,0,244,0,205,0,147,0,96,0,108,0,119,0,136,0,240,0,23,0,46,0,253,0,144,0,163,0,191,0,69,0,121,0,50,0,0,0,88,0,171,0,225,0,0,0,107,0,0,0,132,0,175,0,37,0,4,0,155,0,179,0,209,0,63,0,245,0,103,0,178,0,113,0,34,0,0,0,32,0,32,0,147,0,188,0,241,0,178,0,130,0,25,0,141,0,158,0,135,0,207,0,0,0,1,0,0,0,41,0,48,0,215,0,224,0,221,0,183,0,188,0,0,0,0,0,121,0,63,0,81,0,95,0,100,0,86,0,0,0,115,0,85,0,76,0,150,0,135,0,206,0,235,0,234,0,244,0,0,0,0,0,21,0,231,0,238,0,246,0,229,0,113,0,129,0,198,0,88,0,106,0,130,0,207,0,0,0,0,0,224,0,46,0,180,0,0,0,0,0,138,0,154,0,0,0,21,0,73,0,238,0,0,0,0,0,105,0,0,0,77,0,40,0,14,0,211,0,24,0,233,0,0,0,6,0,0,0,214,0,92,0,41,0,229,0,188,0,148,0,255,0,41,0,174,0,202,0,93,0,146,0,26,0,41,0,180,0,193,0,0,0,0,0,155,0,54,0,0,0,85,0,1,0,0,0,124,0,0,0,237,0,1,0,0,0,199,0,85,0,248,0,137,0,108,0,162,0,139,0,149,0,83,0,0,0,0,0,8,0,0,0,145,0,204,0,151,0,244,0,131,0,153,0,40,0,183,0,218,0,11,0,252,0,145,0,119,0,254,0,230,0,244,0,0,0,157,0,185,0,170,0,0,0,73,0,0,0,0,0,217,0,234,0,241,0,162,0,108,0,0,0,114,0,199,0,247,0,30,0,0,0,81,0,41,0,72,0,119,0,175,0,171,0,166,0,218,0,20,0,151,0,187,0,0,0,166,0,165,0,203,0,145,0,78,0,198,0,68,0,0,0,195,0,0,0,36,0,5,0,40,0,33,0,0,0,183,0,210,0,0,0,181,0,187,0,106,0,0,0,162,0,228,0,212,0,0,0,0,0,52,0,234,0,0,0,96,0,157,0,43,0,125,0,89,0,82,0,181,0,255,0,0,0,249,0,219,0,169,0,147,0,0,0,84,0,21,0,0,0,119,0,127,0,85,0,101,0,27,0,61,0,136,0,42,0,115,0,251,0,50,0,91,0,0,0,0,0,172,0,145,0,231,0,125,0,62,0,46,0,0,0,0,0,89,0,251,0,75,0,251,0,0,0,0,0,153,0,194,0,0,0,0,0,0,0,225,0,245,0,20,0,234,0,80,0,0,0,190,0,175,0,244,0,243,0,212,0,182,0,122,0,184,0,54,0,184,0,150,0,151,0,158,0,37,0,205,0,157,0,148,0,187,0,0,0,206,0,223,0,229,0,211,0,0,0,231,0,0,0,168,0,114,0,242,0,108,0,94,0,59,0,245,0,230,0,77,0,204,0,0,0,84,0,120,0,224,0,27,0,92,0,40,0,183,0,109,0,135,0,0,0,111,0,242,0,0,0,37,0,178,0,62,0,61,0,33,0,0,0,217,0,195,0,0,0,0,0,137,0);
signal scenario_full  : scenario_type := (0,0,205,31,118,31,32,31,177,31,65,31,81,31,3,31,3,30,114,31,107,31,138,31,112,31,44,31,49,31,49,30,148,31,25,31,112,31,24,31,32,31,201,31,98,31,107,31,39,31,81,31,182,31,182,30,132,31,105,31,165,31,139,31,230,31,58,31,175,31,170,31,134,31,194,31,34,31,235,31,251,31,150,31,128,31,144,31,173,31,205,31,227,31,86,31,86,30,236,31,155,31,235,31,203,31,100,31,204,31,38,31,55,31,87,31,190,31,190,30,74,31,24,31,250,31,250,30,63,31,34,31,163,31,186,31,83,31,183,31,8,31,70,31,70,30,193,31,143,31,149,31,178,31,178,30,153,31,222,31,222,30,227,31,115,31,174,31,123,31,29,31,79,31,197,31,189,31,82,31,17,31,241,31,168,31,82,31,183,31,50,31,45,31,130,31,50,31,50,30,112,31,208,31,30,31,30,30,176,31,175,31,34,31,245,31,157,31,17,31,24,31,24,30,249,31,90,31,255,31,66,31,207,31,191,31,34,31,34,30,34,29,11,31,8,31,65,31,91,31,144,31,107,31,223,31,30,31,219,31,176,31,68,31,178,31,178,30,231,31,80,31,17,31,17,30,143,31,201,31,201,30,201,29,122,31,52,31,223,31,1,31,1,30,201,31,14,31,25,31,134,31,134,30,35,31,129,31,75,31,9,31,164,31,164,30,164,29,35,31,142,31,16,31,242,31,164,31,68,31,68,30,93,31,206,31,36,31,73,31,172,31,10,31,206,31,206,30,137,31,137,30,82,31,82,30,62,31,166,31,166,30,131,31,148,31,148,30,227,31,105,31,119,31,106,31,59,31,59,30,175,31,164,31,148,31,219,31,219,30,219,29,90,31,184,31,128,31,128,30,132,31,115,31,79,31,187,31,208,31,185,31,26,31,26,30,26,29,204,31,11,31,89,31,89,30,249,31,65,31,66,31,255,31,255,30,204,31,204,30,218,31,218,30,114,31,114,30,114,29,248,31,248,30,197,31,218,31,25,31,152,31,247,31,201,31,122,31,122,30,198,31,126,31,126,30,111,31,140,31,158,31,25,31,206,31,180,31,27,31,220,31,85,31,106,31,184,31,131,31,56,31,253,31,156,31,189,31,253,31,119,31,177,31,11,31,11,30,193,31,15,31,9,31,9,30,172,31,193,31,121,31,25,31,83,31,134,31,95,31,254,31,211,31,20,31,196,31,196,30,196,29,218,31,218,30,77,31,176,31,49,31,49,30,146,31,60,31,231,31,185,31,159,31,233,31,177,31,28,31,195,31,179,31,237,31,44,31,227,31,174,31,117,31,212,31,207,31,168,31,168,30,184,31,184,30,211,31,255,31,187,31,159,31,47,31,63,31,59,31,26,31,26,30,26,29,9,31,63,31,163,31,227,31,226,31,66,31,225,31,195,31,15,31,68,31,193,31,7,31,235,31,227,31,122,31,178,31,178,30,178,29,187,31,67,31,200,31,128,31,24,31,15,31,202,31,73,31,228,31,78,31,181,31,177,31,210,31,65,31,44,31,172,31,251,31,60,31,60,30,111,31,66,31,134,31,106,31,17,31,239,31,237,31,184,31,184,30,155,31,249,31,18,31,176,31,197,31,197,30,187,31,37,31,242,31,49,31,49,30,161,31,244,31,205,31,147,31,96,31,108,31,119,31,136,31,240,31,23,31,46,31,253,31,144,31,163,31,191,31,69,31,121,31,50,31,50,30,88,31,171,31,225,31,225,30,107,31,107,30,132,31,175,31,37,31,4,31,155,31,179,31,209,31,63,31,245,31,103,31,178,31,113,31,34,31,34,30,32,31,32,31,147,31,188,31,241,31,178,31,130,31,25,31,141,31,158,31,135,31,207,31,207,30,1,31,1,30,41,31,48,31,215,31,224,31,221,31,183,31,188,31,188,30,188,29,121,31,63,31,81,31,95,31,100,31,86,31,86,30,115,31,85,31,76,31,150,31,135,31,206,31,235,31,234,31,244,31,244,30,244,29,21,31,231,31,238,31,246,31,229,31,113,31,129,31,198,31,88,31,106,31,130,31,207,31,207,30,207,29,224,31,46,31,180,31,180,30,180,29,138,31,154,31,154,30,21,31,73,31,238,31,238,30,238,29,105,31,105,30,77,31,40,31,14,31,211,31,24,31,233,31,233,30,6,31,6,30,214,31,92,31,41,31,229,31,188,31,148,31,255,31,41,31,174,31,202,31,93,31,146,31,26,31,41,31,180,31,193,31,193,30,193,29,155,31,54,31,54,30,85,31,1,31,1,30,124,31,124,30,237,31,1,31,1,30,199,31,85,31,248,31,137,31,108,31,162,31,139,31,149,31,83,31,83,30,83,29,8,31,8,30,145,31,204,31,151,31,244,31,131,31,153,31,40,31,183,31,218,31,11,31,252,31,145,31,119,31,254,31,230,31,244,31,244,30,157,31,185,31,170,31,170,30,73,31,73,30,73,29,217,31,234,31,241,31,162,31,108,31,108,30,114,31,199,31,247,31,30,31,30,30,81,31,41,31,72,31,119,31,175,31,171,31,166,31,218,31,20,31,151,31,187,31,187,30,166,31,165,31,203,31,145,31,78,31,198,31,68,31,68,30,195,31,195,30,36,31,5,31,40,31,33,31,33,30,183,31,210,31,210,30,181,31,187,31,106,31,106,30,162,31,228,31,212,31,212,30,212,29,52,31,234,31,234,30,96,31,157,31,43,31,125,31,89,31,82,31,181,31,255,31,255,30,249,31,219,31,169,31,147,31,147,30,84,31,21,31,21,30,119,31,127,31,85,31,101,31,27,31,61,31,136,31,42,31,115,31,251,31,50,31,91,31,91,30,91,29,172,31,145,31,231,31,125,31,62,31,46,31,46,30,46,29,89,31,251,31,75,31,251,31,251,30,251,29,153,31,194,31,194,30,194,29,194,28,225,31,245,31,20,31,234,31,80,31,80,30,190,31,175,31,244,31,243,31,212,31,182,31,122,31,184,31,54,31,184,31,150,31,151,31,158,31,37,31,205,31,157,31,148,31,187,31,187,30,206,31,223,31,229,31,211,31,211,30,231,31,231,30,168,31,114,31,242,31,108,31,94,31,59,31,245,31,230,31,77,31,204,31,204,30,84,31,120,31,224,31,27,31,92,31,40,31,183,31,109,31,135,31,135,30,111,31,242,31,242,30,37,31,178,31,62,31,61,31,33,31,33,30,217,31,195,31,195,30,195,29,137,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
