-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 715;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (40,0,125,0,20,0,245,0,171,0,179,0,158,0,91,0,169,0,0,0,174,0,65,0,78,0,219,0,169,0,234,0,67,0,207,0,13,0,17,0,92,0,0,0,244,0,161,0,0,0,0,0,0,0,1,0,118,0,46,0,57,0,197,0,207,0,210,0,0,0,247,0,147,0,167,0,88,0,166,0,159,0,199,0,212,0,234,0,43,0,188,0,84,0,40,0,33,0,154,0,193,0,0,0,81,0,210,0,114,0,210,0,180,0,0,0,56,0,0,0,20,0,71,0,0,0,101,0,102,0,0,0,108,0,63,0,0,0,223,0,0,0,252,0,36,0,18,0,0,0,56,0,245,0,158,0,158,0,195,0,69,0,206,0,97,0,0,0,166,0,186,0,91,0,156,0,92,0,0,0,174,0,139,0,207,0,141,0,0,0,216,0,188,0,0,0,0,0,142,0,249,0,227,0,250,0,79,0,225,0,82,0,0,0,0,0,199,0,183,0,134,0,201,0,235,0,185,0,123,0,0,0,0,0,0,0,37,0,0,0,247,0,183,0,201,0,228,0,0,0,73,0,29,0,244,0,223,0,246,0,188,0,21,0,143,0,116,0,0,0,212,0,173,0,223,0,147,0,90,0,147,0,189,0,76,0,33,0,100,0,176,0,247,0,122,0,168,0,18,0,67,0,75,0,8,0,106,0,0,0,156,0,159,0,139,0,89,0,50,0,188,0,78,0,232,0,28,0,58,0,148,0,164,0,113,0,17,0,67,0,86,0,23,0,47,0,0,0,0,0,98,0,235,0,157,0,183,0,98,0,0,0,68,0,0,0,0,0,6,0,62,0,0,0,53,0,0,0,0,0,122,0,0,0,146,0,106,0,126,0,206,0,166,0,2,0,0,0,92,0,23,0,0,0,223,0,179,0,104,0,42,0,219,0,0,0,212,0,0,0,171,0,203,0,118,0,57,0,139,0,242,0,121,0,0,0,224,0,168,0,49,0,0,0,0,0,158,0,212,0,209,0,0,0,142,0,94,0,6,0,239,0,189,0,125,0,205,0,59,0,180,0,181,0,83,0,51,0,97,0,0,0,0,0,0,0,33,0,188,0,156,0,92,0,165,0,0,0,255,0,11,0,89,0,212,0,0,0,30,0,0,0,208,0,20,0,0,0,60,0,46,0,233,0,43,0,116,0,215,0,122,0,204,0,142,0,64,0,71,0,0,0,24,0,133,0,75,0,4,0,0,0,194,0,170,0,246,0,172,0,158,0,189,0,0,0,84,0,245,0,25,0,107,0,103,0,0,0,247,0,234,0,214,0,144,0,220,0,0,0,32,0,132,0,178,0,180,0,66,0,121,0,84,0,200,0,137,0,128,0,147,0,203,0,250,0,0,0,39,0,0,0,0,0,145,0,219,0,11,0,0,0,33,0,31,0,0,0,0,0,160,0,0,0,99,0,228,0,124,0,4,0,171,0,0,0,102,0,124,0,201,0,77,0,246,0,252,0,0,0,233,0,0,0,0,0,0,0,0,0,108,0,90,0,0,0,0,0,161,0,0,0,180,0,31,0,229,0,56,0,173,0,0,0,0,0,188,0,89,0,22,0,161,0,88,0,254,0,15,0,0,0,34,0,219,0,150,0,16,0,16,0,217,0,96,0,30,0,188,0,30,0,58,0,239,0,149,0,154,0,54,0,113,0,12,0,0,0,188,0,151,0,78,0,0,0,70,0,0,0,0,0,63,0,168,0,0,0,86,0,98,0,16,0,22,0,182,0,229,0,63,0,0,0,147,0,107,0,106,0,0,0,118,0,0,0,0,0,13,0,49,0,0,0,0,0,206,0,132,0,75,0,142,0,24,0,93,0,2,0,241,0,244,0,0,0,31,0,198,0,149,0,0,0,165,0,219,0,0,0,184,0,250,0,0,0,0,0,169,0,208,0,3,0,0,0,0,0,0,0,0,0,228,0,240,0,238,0,0,0,102,0,91,0,163,0,160,0,156,0,204,0,6,0,255,0,0,0,208,0,39,0,209,0,140,0,3,0,25,0,124,0,0,0,0,0,125,0,0,0,238,0,14,0,85,0,119,0,41,0,204,0,179,0,0,0,103,0,202,0,76,0,0,0,23,0,0,0,57,0,121,0,137,0,114,0,52,0,237,0,190,0,0,0,46,0,100,0,165,0,44,0,14,0,13,0,159,0,244,0,0,0,113,0,97,0,0,0,79,0,197,0,181,0,164,0,92,0,76,0,0,0,71,0,48,0,109,0,0,0,164,0,0,0,0,0,248,0,131,0,206,0,163,0,75,0,0,0,69,0,176,0,26,0,155,0,14,0,0,0,192,0,168,0,80,0,47,0,179,0,162,0,0,0,0,0,74,0,0,0,0,0,0,0,0,0,26,0,129,0,51,0,48,0,117,0,26,0,26,0,72,0,43,0,73,0,88,0,0,0,160,0,193,0,73,0,214,0,197,0,205,0,63,0,189,0,199,0,111,0,3,0,92,0,177,0,45,0,252,0,4,0,230,0,0,0,35,0,0,0,51,0,197,0,211,0,190,0,0,0,0,0,51,0,86,0,0,0,2,0,0,0,0,0,177,0,0,0,0,0,0,0,119,0,0,0,168,0,211,0,0,0,0,0,201,0,0,0,44,0,191,0,151,0,95,0,86,0,254,0,18,0,155,0,104,0,41,0,70,0,12,0,138,0,134,0,251,0,181,0,166,0,251,0,0,0,0,0,239,0,24,0,73,0,48,0,154,0,158,0,144,0,25,0,0,0,140,0,0,0,222,0,0,0,0,0,172,0,41,0,24,0,24,0,65,0,235,0,0,0,98,0,49,0,186,0,25,0,178,0,0,0,179,0,189,0,184,0,17,0,153,0,77,0,125,0,240,0,242,0,229,0,0,0,69,0,8,0,233,0,112,0,202,0,165,0,210,0,239,0,127,0,0,0,0,0,199,0,172,0,0,0,0,0,79,0,74,0,94,0,124,0,135,0,73,0,0,0,129,0,0,0,122,0,127,0,111,0,225,0,0,0,229,0,193,0,85,0,31,0,174,0,196,0,85,0,100,0,0,0,140,0,0,0,80,0,133,0,182,0,133,0,248,0,53,0,0,0,110,0,10,0,202,0,219,0,107,0,96,0,93,0,178,0,135,0,70,0,214,0,0,0,108,0,0,0,244,0,151,0,248,0,112,0,0,0,0,0,19,0);
signal scenario_full  : scenario_type := (40,31,125,31,20,31,245,31,171,31,179,31,158,31,91,31,169,31,169,30,174,31,65,31,78,31,219,31,169,31,234,31,67,31,207,31,13,31,17,31,92,31,92,30,244,31,161,31,161,30,161,29,161,28,1,31,118,31,46,31,57,31,197,31,207,31,210,31,210,30,247,31,147,31,167,31,88,31,166,31,159,31,199,31,212,31,234,31,43,31,188,31,84,31,40,31,33,31,154,31,193,31,193,30,81,31,210,31,114,31,210,31,180,31,180,30,56,31,56,30,20,31,71,31,71,30,101,31,102,31,102,30,108,31,63,31,63,30,223,31,223,30,252,31,36,31,18,31,18,30,56,31,245,31,158,31,158,31,195,31,69,31,206,31,97,31,97,30,166,31,186,31,91,31,156,31,92,31,92,30,174,31,139,31,207,31,141,31,141,30,216,31,188,31,188,30,188,29,142,31,249,31,227,31,250,31,79,31,225,31,82,31,82,30,82,29,199,31,183,31,134,31,201,31,235,31,185,31,123,31,123,30,123,29,123,28,37,31,37,30,247,31,183,31,201,31,228,31,228,30,73,31,29,31,244,31,223,31,246,31,188,31,21,31,143,31,116,31,116,30,212,31,173,31,223,31,147,31,90,31,147,31,189,31,76,31,33,31,100,31,176,31,247,31,122,31,168,31,18,31,67,31,75,31,8,31,106,31,106,30,156,31,159,31,139,31,89,31,50,31,188,31,78,31,232,31,28,31,58,31,148,31,164,31,113,31,17,31,67,31,86,31,23,31,47,31,47,30,47,29,98,31,235,31,157,31,183,31,98,31,98,30,68,31,68,30,68,29,6,31,62,31,62,30,53,31,53,30,53,29,122,31,122,30,146,31,106,31,126,31,206,31,166,31,2,31,2,30,92,31,23,31,23,30,223,31,179,31,104,31,42,31,219,31,219,30,212,31,212,30,171,31,203,31,118,31,57,31,139,31,242,31,121,31,121,30,224,31,168,31,49,31,49,30,49,29,158,31,212,31,209,31,209,30,142,31,94,31,6,31,239,31,189,31,125,31,205,31,59,31,180,31,181,31,83,31,51,31,97,31,97,30,97,29,97,28,33,31,188,31,156,31,92,31,165,31,165,30,255,31,11,31,89,31,212,31,212,30,30,31,30,30,208,31,20,31,20,30,60,31,46,31,233,31,43,31,116,31,215,31,122,31,204,31,142,31,64,31,71,31,71,30,24,31,133,31,75,31,4,31,4,30,194,31,170,31,246,31,172,31,158,31,189,31,189,30,84,31,245,31,25,31,107,31,103,31,103,30,247,31,234,31,214,31,144,31,220,31,220,30,32,31,132,31,178,31,180,31,66,31,121,31,84,31,200,31,137,31,128,31,147,31,203,31,250,31,250,30,39,31,39,30,39,29,145,31,219,31,11,31,11,30,33,31,31,31,31,30,31,29,160,31,160,30,99,31,228,31,124,31,4,31,171,31,171,30,102,31,124,31,201,31,77,31,246,31,252,31,252,30,233,31,233,30,233,29,233,28,233,27,108,31,90,31,90,30,90,29,161,31,161,30,180,31,31,31,229,31,56,31,173,31,173,30,173,29,188,31,89,31,22,31,161,31,88,31,254,31,15,31,15,30,34,31,219,31,150,31,16,31,16,31,217,31,96,31,30,31,188,31,30,31,58,31,239,31,149,31,154,31,54,31,113,31,12,31,12,30,188,31,151,31,78,31,78,30,70,31,70,30,70,29,63,31,168,31,168,30,86,31,98,31,16,31,22,31,182,31,229,31,63,31,63,30,147,31,107,31,106,31,106,30,118,31,118,30,118,29,13,31,49,31,49,30,49,29,206,31,132,31,75,31,142,31,24,31,93,31,2,31,241,31,244,31,244,30,31,31,198,31,149,31,149,30,165,31,219,31,219,30,184,31,250,31,250,30,250,29,169,31,208,31,3,31,3,30,3,29,3,28,3,27,228,31,240,31,238,31,238,30,102,31,91,31,163,31,160,31,156,31,204,31,6,31,255,31,255,30,208,31,39,31,209,31,140,31,3,31,25,31,124,31,124,30,124,29,125,31,125,30,238,31,14,31,85,31,119,31,41,31,204,31,179,31,179,30,103,31,202,31,76,31,76,30,23,31,23,30,57,31,121,31,137,31,114,31,52,31,237,31,190,31,190,30,46,31,100,31,165,31,44,31,14,31,13,31,159,31,244,31,244,30,113,31,97,31,97,30,79,31,197,31,181,31,164,31,92,31,76,31,76,30,71,31,48,31,109,31,109,30,164,31,164,30,164,29,248,31,131,31,206,31,163,31,75,31,75,30,69,31,176,31,26,31,155,31,14,31,14,30,192,31,168,31,80,31,47,31,179,31,162,31,162,30,162,29,74,31,74,30,74,29,74,28,74,27,26,31,129,31,51,31,48,31,117,31,26,31,26,31,72,31,43,31,73,31,88,31,88,30,160,31,193,31,73,31,214,31,197,31,205,31,63,31,189,31,199,31,111,31,3,31,92,31,177,31,45,31,252,31,4,31,230,31,230,30,35,31,35,30,51,31,197,31,211,31,190,31,190,30,190,29,51,31,86,31,86,30,2,31,2,30,2,29,177,31,177,30,177,29,177,28,119,31,119,30,168,31,211,31,211,30,211,29,201,31,201,30,44,31,191,31,151,31,95,31,86,31,254,31,18,31,155,31,104,31,41,31,70,31,12,31,138,31,134,31,251,31,181,31,166,31,251,31,251,30,251,29,239,31,24,31,73,31,48,31,154,31,158,31,144,31,25,31,25,30,140,31,140,30,222,31,222,30,222,29,172,31,41,31,24,31,24,31,65,31,235,31,235,30,98,31,49,31,186,31,25,31,178,31,178,30,179,31,189,31,184,31,17,31,153,31,77,31,125,31,240,31,242,31,229,31,229,30,69,31,8,31,233,31,112,31,202,31,165,31,210,31,239,31,127,31,127,30,127,29,199,31,172,31,172,30,172,29,79,31,74,31,94,31,124,31,135,31,73,31,73,30,129,31,129,30,122,31,127,31,111,31,225,31,225,30,229,31,193,31,85,31,31,31,174,31,196,31,85,31,100,31,100,30,140,31,140,30,80,31,133,31,182,31,133,31,248,31,53,31,53,30,110,31,10,31,202,31,219,31,107,31,96,31,93,31,178,31,135,31,70,31,214,31,214,30,108,31,108,30,244,31,151,31,248,31,112,31,112,30,112,29,19,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
