-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 332;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (53,0,155,0,231,0,179,0,31,0,173,0,232,0,155,0,124,0,19,0,0,0,246,0,235,0,195,0,79,0,233,0,255,0,156,0,65,0,35,0,28,0,224,0,59,0,174,0,147,0,4,0,46,0,0,0,34,0,9,0,3,0,0,0,0,0,56,0,29,0,133,0,63,0,0,0,0,0,0,0,22,0,34,0,0,0,86,0,23,0,243,0,0,0,56,0,135,0,0,0,196,0,0,0,0,0,99,0,243,0,198,0,0,0,5,0,34,0,117,0,50,0,186,0,0,0,0,0,123,0,141,0,131,0,9,0,149,0,185,0,103,0,0,0,0,0,231,0,0,0,48,0,230,0,134,0,143,0,167,0,43,0,225,0,0,0,218,0,58,0,248,0,47,0,0,0,0,0,226,0,195,0,244,0,204,0,218,0,154,0,215,0,94,0,237,0,167,0,145,0,63,0,89,0,210,0,78,0,58,0,193,0,34,0,130,0,187,0,182,0,0,0,0,0,250,0,148,0,76,0,40,0,8,0,142,0,231,0,0,0,215,0,132,0,36,0,122,0,107,0,36,0,0,0,220,0,212,0,44,0,45,0,189,0,0,0,40,0,0,0,0,0,164,0,99,0,167,0,0,0,235,0,106,0,0,0,182,0,249,0,33,0,0,0,166,0,91,0,150,0,0,0,141,0,188,0,109,0,6,0,58,0,226,0,141,0,133,0,171,0,216,0,107,0,0,0,0,0,66,0,230,0,124,0,0,0,69,0,141,0,0,0,0,0,0,0,214,0,116,0,98,0,189,0,203,0,7,0,97,0,208,0,70,0,0,0,0,0,0,0,61,0,148,0,0,0,99,0,60,0,0,0,0,0,81,0,63,0,221,0,39,0,155,0,250,0,252,0,4,0,242,0,254,0,216,0,32,0,126,0,62,0,0,0,74,0,0,0,100,0,0,0,235,0,166,0,217,0,209,0,0,0,80,0,0,0,11,0,182,0,22,0,197,0,50,0,0,0,224,0,24,0,251,0,25,0,0,0,60,0,78,0,57,0,0,0,0,0,0,0,250,0,57,0,0,0,37,0,0,0,146,0,0,0,148,0,154,0,85,0,54,0,110,0,195,0,85,0,0,0,0,0,0,0,61,0,30,0,89,0,142,0,0,0,179,0,135,0,175,0,12,0,107,0,135,0,0,0,203,0,222,0,244,0,210,0,100,0,173,0,132,0,176,0,106,0,0,0,66,0,162,0,41,0,81,0,154,0,0,0,96,0,132,0,168,0,222,0,0,0,248,0,0,0,0,0,0,0,0,0,153,0,0,0,204,0,137,0,17,0,22,0,35,0,2,0,49,0,0,0,67,0,103,0,252,0,227,0,90,0,44,0,13,0,0,0,50,0,128,0,49,0,36,0,13,0,243,0,226,0,151,0,58,0,0,0,255,0,133,0,0,0,140,0,214,0,187,0,124,0,0,0,215,0,0,0,199,0,215,0,252,0,0,0);
signal scenario_full  : scenario_type := (53,31,155,31,231,31,179,31,31,31,173,31,232,31,155,31,124,31,19,31,19,30,246,31,235,31,195,31,79,31,233,31,255,31,156,31,65,31,35,31,28,31,224,31,59,31,174,31,147,31,4,31,46,31,46,30,34,31,9,31,3,31,3,30,3,29,56,31,29,31,133,31,63,31,63,30,63,29,63,28,22,31,34,31,34,30,86,31,23,31,243,31,243,30,56,31,135,31,135,30,196,31,196,30,196,29,99,31,243,31,198,31,198,30,5,31,34,31,117,31,50,31,186,31,186,30,186,29,123,31,141,31,131,31,9,31,149,31,185,31,103,31,103,30,103,29,231,31,231,30,48,31,230,31,134,31,143,31,167,31,43,31,225,31,225,30,218,31,58,31,248,31,47,31,47,30,47,29,226,31,195,31,244,31,204,31,218,31,154,31,215,31,94,31,237,31,167,31,145,31,63,31,89,31,210,31,78,31,58,31,193,31,34,31,130,31,187,31,182,31,182,30,182,29,250,31,148,31,76,31,40,31,8,31,142,31,231,31,231,30,215,31,132,31,36,31,122,31,107,31,36,31,36,30,220,31,212,31,44,31,45,31,189,31,189,30,40,31,40,30,40,29,164,31,99,31,167,31,167,30,235,31,106,31,106,30,182,31,249,31,33,31,33,30,166,31,91,31,150,31,150,30,141,31,188,31,109,31,6,31,58,31,226,31,141,31,133,31,171,31,216,31,107,31,107,30,107,29,66,31,230,31,124,31,124,30,69,31,141,31,141,30,141,29,141,28,214,31,116,31,98,31,189,31,203,31,7,31,97,31,208,31,70,31,70,30,70,29,70,28,61,31,148,31,148,30,99,31,60,31,60,30,60,29,81,31,63,31,221,31,39,31,155,31,250,31,252,31,4,31,242,31,254,31,216,31,32,31,126,31,62,31,62,30,74,31,74,30,100,31,100,30,235,31,166,31,217,31,209,31,209,30,80,31,80,30,11,31,182,31,22,31,197,31,50,31,50,30,224,31,24,31,251,31,25,31,25,30,60,31,78,31,57,31,57,30,57,29,57,28,250,31,57,31,57,30,37,31,37,30,146,31,146,30,148,31,154,31,85,31,54,31,110,31,195,31,85,31,85,30,85,29,85,28,61,31,30,31,89,31,142,31,142,30,179,31,135,31,175,31,12,31,107,31,135,31,135,30,203,31,222,31,244,31,210,31,100,31,173,31,132,31,176,31,106,31,106,30,66,31,162,31,41,31,81,31,154,31,154,30,96,31,132,31,168,31,222,31,222,30,248,31,248,30,248,29,248,28,248,27,153,31,153,30,204,31,137,31,17,31,22,31,35,31,2,31,49,31,49,30,67,31,103,31,252,31,227,31,90,31,44,31,13,31,13,30,50,31,128,31,49,31,36,31,13,31,243,31,226,31,151,31,58,31,58,30,255,31,133,31,133,30,140,31,214,31,187,31,124,31,124,30,215,31,215,30,199,31,215,31,252,31,252,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
