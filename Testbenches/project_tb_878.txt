-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 298;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (194,0,102,0,0,0,117,0,251,0,41,0,146,0,0,0,0,0,172,0,9,0,0,0,254,0,0,0,126,0,205,0,155,0,213,0,0,0,145,0,175,0,0,0,227,0,149,0,0,0,47,0,93,0,17,0,227,0,161,0,207,0,8,0,0,0,30,0,73,0,15,0,156,0,0,0,48,0,101,0,28,0,104,0,0,0,220,0,0,0,147,0,228,0,138,0,12,0,36,0,132,0,113,0,18,0,244,0,36,0,0,0,100,0,174,0,63,0,190,0,246,0,156,0,0,0,0,0,0,0,81,0,124,0,0,0,49,0,240,0,27,0,79,0,225,0,157,0,9,0,2,0,154,0,67,0,78,0,195,0,115,0,85,0,241,0,151,0,44,0,137,0,4,0,0,0,92,0,43,0,210,0,59,0,178,0,66,0,183,0,24,0,28,0,155,0,0,0,131,0,144,0,0,0,89,0,157,0,0,0,0,0,224,0,103,0,243,0,0,0,130,0,140,0,224,0,190,0,228,0,69,0,172,0,206,0,0,0,241,0,0,0,0,0,110,0,69,0,111,0,191,0,63,0,0,0,98,0,103,0,234,0,247,0,130,0,53,0,10,0,0,0,217,0,97,0,181,0,0,0,245,0,203,0,183,0,63,0,0,0,217,0,0,0,206,0,191,0,0,0,250,0,49,0,205,0,103,0,205,0,237,0,167,0,211,0,0,0,0,0,0,0,81,0,222,0,36,0,55,0,156,0,87,0,82,0,22,0,0,0,117,0,0,0,226,0,190,0,68,0,199,0,211,0,0,0,178,0,85,0,69,0,140,0,246,0,36,0,6,0,126,0,158,0,100,0,0,0,66,0,223,0,137,0,212,0,45,0,81,0,26,0,37,0,131,0,165,0,177,0,220,0,204,0,17,0,199,0,179,0,238,0,232,0,88,0,243,0,215,0,0,0,13,0,152,0,0,0,0,0,0,0,230,0,0,0,40,0,217,0,0,0,0,0,44,0,27,0,252,0,101,0,206,0,0,0,225,0,5,0,188,0,23,0,96,0,127,0,232,0,0,0,115,0,243,0,73,0,0,0,195,0,232,0,117,0,0,0,36,0,120,0,217,0,1,0,157,0,168,0,103,0,100,0,186,0,140,0,215,0,176,0,83,0,0,0,110,0,0,0,72,0,199,0,172,0,77,0,159,0,113,0,120,0,122,0,0,0,59,0,93,0,83,0,144,0,23,0,198,0,178,0,9,0,108,0,0,0,84,0,94,0,0,0,86,0,15,0,150,0,0,0,158,0,118,0,67,0,94,0,13,0,87,0,240,0,37,0,1,0,121,0,106,0,100,0);
signal scenario_full  : scenario_type := (194,31,102,31,102,30,117,31,251,31,41,31,146,31,146,30,146,29,172,31,9,31,9,30,254,31,254,30,126,31,205,31,155,31,213,31,213,30,145,31,175,31,175,30,227,31,149,31,149,30,47,31,93,31,17,31,227,31,161,31,207,31,8,31,8,30,30,31,73,31,15,31,156,31,156,30,48,31,101,31,28,31,104,31,104,30,220,31,220,30,147,31,228,31,138,31,12,31,36,31,132,31,113,31,18,31,244,31,36,31,36,30,100,31,174,31,63,31,190,31,246,31,156,31,156,30,156,29,156,28,81,31,124,31,124,30,49,31,240,31,27,31,79,31,225,31,157,31,9,31,2,31,154,31,67,31,78,31,195,31,115,31,85,31,241,31,151,31,44,31,137,31,4,31,4,30,92,31,43,31,210,31,59,31,178,31,66,31,183,31,24,31,28,31,155,31,155,30,131,31,144,31,144,30,89,31,157,31,157,30,157,29,224,31,103,31,243,31,243,30,130,31,140,31,224,31,190,31,228,31,69,31,172,31,206,31,206,30,241,31,241,30,241,29,110,31,69,31,111,31,191,31,63,31,63,30,98,31,103,31,234,31,247,31,130,31,53,31,10,31,10,30,217,31,97,31,181,31,181,30,245,31,203,31,183,31,63,31,63,30,217,31,217,30,206,31,191,31,191,30,250,31,49,31,205,31,103,31,205,31,237,31,167,31,211,31,211,30,211,29,211,28,81,31,222,31,36,31,55,31,156,31,87,31,82,31,22,31,22,30,117,31,117,30,226,31,190,31,68,31,199,31,211,31,211,30,178,31,85,31,69,31,140,31,246,31,36,31,6,31,126,31,158,31,100,31,100,30,66,31,223,31,137,31,212,31,45,31,81,31,26,31,37,31,131,31,165,31,177,31,220,31,204,31,17,31,199,31,179,31,238,31,232,31,88,31,243,31,215,31,215,30,13,31,152,31,152,30,152,29,152,28,230,31,230,30,40,31,217,31,217,30,217,29,44,31,27,31,252,31,101,31,206,31,206,30,225,31,5,31,188,31,23,31,96,31,127,31,232,31,232,30,115,31,243,31,73,31,73,30,195,31,232,31,117,31,117,30,36,31,120,31,217,31,1,31,157,31,168,31,103,31,100,31,186,31,140,31,215,31,176,31,83,31,83,30,110,31,110,30,72,31,199,31,172,31,77,31,159,31,113,31,120,31,122,31,122,30,59,31,93,31,83,31,144,31,23,31,198,31,178,31,9,31,108,31,108,30,84,31,94,31,94,30,86,31,15,31,150,31,150,30,158,31,118,31,67,31,94,31,13,31,87,31,240,31,37,31,1,31,121,31,106,31,100,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
