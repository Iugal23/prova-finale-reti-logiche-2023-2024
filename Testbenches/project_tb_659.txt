-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 946;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (38,0,63,0,75,0,0,0,0,0,221,0,163,0,116,0,20,0,122,0,50,0,0,0,3,0,0,0,36,0,51,0,61,0,110,0,27,0,145,0,247,0,35,0,0,0,19,0,187,0,76,0,175,0,237,0,86,0,248,0,249,0,110,0,129,0,62,0,58,0,193,0,212,0,77,0,0,0,119,0,169,0,40,0,101,0,117,0,0,0,246,0,160,0,166,0,0,0,204,0,0,0,0,0,229,0,64,0,54,0,197,0,120,0,0,0,162,0,41,0,25,0,184,0,0,0,186,0,132,0,246,0,0,0,164,0,23,0,48,0,23,0,186,0,92,0,0,0,194,0,24,0,0,0,99,0,18,0,119,0,80,0,36,0,168,0,139,0,0,0,133,0,56,0,186,0,192,0,0,0,142,0,174,0,0,0,103,0,92,0,91,0,243,0,54,0,228,0,106,0,175,0,67,0,136,0,162,0,118,0,109,0,53,0,194,0,79,0,0,0,83,0,41,0,0,0,8,0,231,0,46,0,53,0,235,0,196,0,223,0,0,0,0,0,139,0,155,0,0,0,59,0,191,0,120,0,0,0,72,0,22,0,3,0,30,0,161,0,0,0,190,0,49,0,0,0,86,0,0,0,171,0,0,0,95,0,103,0,185,0,148,0,135,0,81,0,129,0,123,0,250,0,103,0,130,0,90,0,38,0,70,0,225,0,84,0,180,0,17,0,99,0,0,0,183,0,119,0,246,0,228,0,200,0,0,0,0,0,68,0,254,0,164,0,244,0,4,0,0,0,173,0,2,0,236,0,235,0,0,0,12,0,0,0,150,0,112,0,30,0,33,0,63,0,0,0,224,0,0,0,0,0,239,0,34,0,27,0,179,0,130,0,95,0,37,0,94,0,18,0,167,0,39,0,192,0,140,0,0,0,220,0,228,0,59,0,175,0,238,0,116,0,195,0,241,0,81,0,16,0,6,0,72,0,136,0,213,0,0,0,25,0,226,0,115,0,176,0,80,0,0,0,23,0,236,0,198,0,96,0,158,0,160,0,174,0,25,0,0,0,159,0,87,0,192,0,10,0,185,0,0,0,0,0,0,0,153,0,0,0,77,0,120,0,0,0,150,0,5,0,93,0,134,0,128,0,145,0,169,0,194,0,17,0,85,0,206,0,0,0,180,0,125,0,211,0,234,0,102,0,0,0,242,0,132,0,149,0,83,0,0,0,236,0,240,0,0,0,119,0,0,0,0,0,219,0,0,0,0,0,0,0,0,0,161,0,132,0,103,0,66,0,32,0,0,0,167,0,168,0,186,0,241,0,0,0,0,0,151,0,208,0,255,0,156,0,236,0,205,0,136,0,225,0,163,0,0,0,111,0,0,0,142,0,0,0,79,0,92,0,0,0,24,0,34,0,16,0,117,0,197,0,198,0,169,0,61,0,170,0,119,0,198,0,55,0,0,0,44,0,100,0,195,0,219,0,15,0,134,0,160,0,51,0,10,0,142,0,207,0,95,0,0,0,247,0,0,0,27,0,127,0,178,0,32,0,244,0,250,0,0,0,234,0,3,0,91,0,10,0,68,0,210,0,0,0,69,0,165,0,3,0,239,0,78,0,115,0,0,0,0,0,0,0,247,0,156,0,126,0,0,0,44,0,20,0,0,0,188,0,98,0,51,0,0,0,233,0,50,0,21,0,41,0,234,0,84,0,96,0,150,0,216,0,142,0,254,0,227,0,32,0,241,0,246,0,100,0,0,0,178,0,111,0,125,0,53,0,155,0,82,0,37,0,146,0,116,0,246,0,185,0,145,0,124,0,195,0,133,0,98,0,25,0,163,0,157,0,0,0,243,0,0,0,165,0,194,0,10,0,167,0,75,0,29,0,72,0,0,0,37,0,170,0,45,0,81,0,95,0,0,0,16,0,174,0,118,0,141,0,0,0,101,0,250,0,63,0,2,0,219,0,55,0,212,0,54,0,235,0,128,0,235,0,197,0,147,0,0,0,0,0,91,0,0,0,150,0,0,0,7,0,95,0,108,0,16,0,149,0,0,0,0,0,6,0,90,0,207,0,129,0,118,0,171,0,7,0,47,0,152,0,55,0,196,0,103,0,0,0,0,0,102,0,204,0,163,0,0,0,0,0,62,0,44,0,197,0,0,0,45,0,214,0,27,0,82,0,0,0,214,0,226,0,112,0,167,0,21,0,80,0,39,0,2,0,11,0,32,0,0,0,251,0,0,0,125,0,126,0,0,0,221,0,0,0,222,0,246,0,108,0,67,0,231,0,47,0,233,0,60,0,0,0,0,0,0,0,215,0,119,0,98,0,24,0,185,0,85,0,0,0,113,0,119,0,157,0,150,0,237,0,201,0,0,0,0,0,3,0,177,0,144,0,188,0,50,0,138,0,3,0,189,0,0,0,234,0,10,0,16,0,141,0,231,0,65,0,11,0,113,0,247,0,45,0,243,0,67,0,124,0,75,0,252,0,193,0,130,0,208,0,143,0,81,0,240,0,0,0,219,0,189,0,1,0,59,0,127,0,17,0,40,0,157,0,0,0,0,0,0,0,14,0,147,0,64,0,0,0,210,0,0,0,86,0,215,0,35,0,0,0,0,0,127,0,0,0,36,0,56,0,15,0,61,0,78,0,252,0,252,0,198,0,148,0,233,0,196,0,52,0,245,0,0,0,207,0,120,0,0,0,251,0,14,0,61,0,0,0,18,0,76,0,27,0,0,0,236,0,206,0,232,0,7,0,25,0,15,0,196,0,14,0,56,0,90,0,184,0,194,0,166,0,0,0,94,0,221,0,47,0,234,0,57,0,0,0,0,0,106,0,85,0,232,0,205,0,0,0,0,0,104,0,0,0,0,0,157,0,0,0,70,0,0,0,183,0,179,0,101,0,0,0,3,0,0,0,199,0,26,0,0,0,35,0,146,0,212,0,249,0,0,0,150,0,185,0,110,0,121,0,62,0,44,0,5,0,114,0,249,0,171,0,61,0,250,0,96,0,0,0,98,0,70,0,23,0,125,0,133,0,64,0,203,0,187,0,201,0,0,0,0,0,103,0,103,0,193,0,0,0,32,0,44,0,85,0,142,0,197,0,25,0,0,0,63,0,103,0,45,0,182,0,122,0,172,0,43,0,51,0,202,0,113,0,88,0,0,0,17,0,220,0,78,0,190,0,141,0,4,0,42,0,79,0,112,0,0,0,36,0,0,0,128,0,211,0,0,0,207,0,245,0,68,0,0,0,0,0,103,0,69,0,68,0,244,0,0,0,238,0,20,0,156,0,142,0,124,0,206,0,247,0,97,0,212,0,36,0,63,0,35,0,74,0,0,0,0,0,99,0,176,0,181,0,163,0,93,0,125,0,0,0,236,0,0,0,95,0,233,0,126,0,0,0,208,0,165,0,0,0,0,0,86,0,93,0,0,0,23,0,100,0,95,0,184,0,155,0,10,0,147,0,127,0,117,0,0,0,32,0,129,0,129,0,241,0,127,0,0,0,46,0,153,0,251,0,238,0,30,0,114,0,211,0,64,0,239,0,115,0,165,0,0,0,5,0,64,0,0,0,122,0,0,0,0,0,244,0,139,0,0,0,89,0,90,0,170,0,158,0,106,0,238,0,0,0,96,0,0,0,114,0,0,0,246,0,3,0,54,0,22,0,0,0,242,0,0,0,218,0,60,0,0,0,35,0,0,0,37,0,241,0,138,0,140,0,241,0,230,0,0,0,130,0,226,0,27,0,15,0,108,0,235,0,29,0,0,0,224,0,86,0,71,0,0,0,0,0,50,0,133,0,250,0,231,0,41,0,37,0,131,0,170,0,190,0,253,0,0,0,119,0,187,0,125,0,239,0,78,0,19,0,42,0,157,0,0,0,101,0,154,0,171,0,0,0,0,0,133,0,165,0,106,0,173,0,208,0,96,0,51,0,178,0,247,0,0,0,167,0,35,0,212,0,7,0,0,0,0,0,241,0,77,0,141,0,82,0,98,0,218,0,89,0,197,0,42,0,170,0,33,0,87,0,248,0,220,0,60,0,0,0,205,0,0,0,0,0,165,0,160,0,0,0,68,0,192,0,239,0,0,0,230,0,250,0,2,0,200,0,38,0,114,0,171,0,236,0,131,0,250,0,26,0,163,0,57,0,0,0,234,0,129,0,229,0,156,0,190,0,24,0,139,0,198,0,31,0,75,0,0,0,144,0,230,0,251,0,86,0,14,0,168,0,58,0,0,0,255,0);
signal scenario_full  : scenario_type := (38,31,63,31,75,31,75,30,75,29,221,31,163,31,116,31,20,31,122,31,50,31,50,30,3,31,3,30,36,31,51,31,61,31,110,31,27,31,145,31,247,31,35,31,35,30,19,31,187,31,76,31,175,31,237,31,86,31,248,31,249,31,110,31,129,31,62,31,58,31,193,31,212,31,77,31,77,30,119,31,169,31,40,31,101,31,117,31,117,30,246,31,160,31,166,31,166,30,204,31,204,30,204,29,229,31,64,31,54,31,197,31,120,31,120,30,162,31,41,31,25,31,184,31,184,30,186,31,132,31,246,31,246,30,164,31,23,31,48,31,23,31,186,31,92,31,92,30,194,31,24,31,24,30,99,31,18,31,119,31,80,31,36,31,168,31,139,31,139,30,133,31,56,31,186,31,192,31,192,30,142,31,174,31,174,30,103,31,92,31,91,31,243,31,54,31,228,31,106,31,175,31,67,31,136,31,162,31,118,31,109,31,53,31,194,31,79,31,79,30,83,31,41,31,41,30,8,31,231,31,46,31,53,31,235,31,196,31,223,31,223,30,223,29,139,31,155,31,155,30,59,31,191,31,120,31,120,30,72,31,22,31,3,31,30,31,161,31,161,30,190,31,49,31,49,30,86,31,86,30,171,31,171,30,95,31,103,31,185,31,148,31,135,31,81,31,129,31,123,31,250,31,103,31,130,31,90,31,38,31,70,31,225,31,84,31,180,31,17,31,99,31,99,30,183,31,119,31,246,31,228,31,200,31,200,30,200,29,68,31,254,31,164,31,244,31,4,31,4,30,173,31,2,31,236,31,235,31,235,30,12,31,12,30,150,31,112,31,30,31,33,31,63,31,63,30,224,31,224,30,224,29,239,31,34,31,27,31,179,31,130,31,95,31,37,31,94,31,18,31,167,31,39,31,192,31,140,31,140,30,220,31,228,31,59,31,175,31,238,31,116,31,195,31,241,31,81,31,16,31,6,31,72,31,136,31,213,31,213,30,25,31,226,31,115,31,176,31,80,31,80,30,23,31,236,31,198,31,96,31,158,31,160,31,174,31,25,31,25,30,159,31,87,31,192,31,10,31,185,31,185,30,185,29,185,28,153,31,153,30,77,31,120,31,120,30,150,31,5,31,93,31,134,31,128,31,145,31,169,31,194,31,17,31,85,31,206,31,206,30,180,31,125,31,211,31,234,31,102,31,102,30,242,31,132,31,149,31,83,31,83,30,236,31,240,31,240,30,119,31,119,30,119,29,219,31,219,30,219,29,219,28,219,27,161,31,132,31,103,31,66,31,32,31,32,30,167,31,168,31,186,31,241,31,241,30,241,29,151,31,208,31,255,31,156,31,236,31,205,31,136,31,225,31,163,31,163,30,111,31,111,30,142,31,142,30,79,31,92,31,92,30,24,31,34,31,16,31,117,31,197,31,198,31,169,31,61,31,170,31,119,31,198,31,55,31,55,30,44,31,100,31,195,31,219,31,15,31,134,31,160,31,51,31,10,31,142,31,207,31,95,31,95,30,247,31,247,30,27,31,127,31,178,31,32,31,244,31,250,31,250,30,234,31,3,31,91,31,10,31,68,31,210,31,210,30,69,31,165,31,3,31,239,31,78,31,115,31,115,30,115,29,115,28,247,31,156,31,126,31,126,30,44,31,20,31,20,30,188,31,98,31,51,31,51,30,233,31,50,31,21,31,41,31,234,31,84,31,96,31,150,31,216,31,142,31,254,31,227,31,32,31,241,31,246,31,100,31,100,30,178,31,111,31,125,31,53,31,155,31,82,31,37,31,146,31,116,31,246,31,185,31,145,31,124,31,195,31,133,31,98,31,25,31,163,31,157,31,157,30,243,31,243,30,165,31,194,31,10,31,167,31,75,31,29,31,72,31,72,30,37,31,170,31,45,31,81,31,95,31,95,30,16,31,174,31,118,31,141,31,141,30,101,31,250,31,63,31,2,31,219,31,55,31,212,31,54,31,235,31,128,31,235,31,197,31,147,31,147,30,147,29,91,31,91,30,150,31,150,30,7,31,95,31,108,31,16,31,149,31,149,30,149,29,6,31,90,31,207,31,129,31,118,31,171,31,7,31,47,31,152,31,55,31,196,31,103,31,103,30,103,29,102,31,204,31,163,31,163,30,163,29,62,31,44,31,197,31,197,30,45,31,214,31,27,31,82,31,82,30,214,31,226,31,112,31,167,31,21,31,80,31,39,31,2,31,11,31,32,31,32,30,251,31,251,30,125,31,126,31,126,30,221,31,221,30,222,31,246,31,108,31,67,31,231,31,47,31,233,31,60,31,60,30,60,29,60,28,215,31,119,31,98,31,24,31,185,31,85,31,85,30,113,31,119,31,157,31,150,31,237,31,201,31,201,30,201,29,3,31,177,31,144,31,188,31,50,31,138,31,3,31,189,31,189,30,234,31,10,31,16,31,141,31,231,31,65,31,11,31,113,31,247,31,45,31,243,31,67,31,124,31,75,31,252,31,193,31,130,31,208,31,143,31,81,31,240,31,240,30,219,31,189,31,1,31,59,31,127,31,17,31,40,31,157,31,157,30,157,29,157,28,14,31,147,31,64,31,64,30,210,31,210,30,86,31,215,31,35,31,35,30,35,29,127,31,127,30,36,31,56,31,15,31,61,31,78,31,252,31,252,31,198,31,148,31,233,31,196,31,52,31,245,31,245,30,207,31,120,31,120,30,251,31,14,31,61,31,61,30,18,31,76,31,27,31,27,30,236,31,206,31,232,31,7,31,25,31,15,31,196,31,14,31,56,31,90,31,184,31,194,31,166,31,166,30,94,31,221,31,47,31,234,31,57,31,57,30,57,29,106,31,85,31,232,31,205,31,205,30,205,29,104,31,104,30,104,29,157,31,157,30,70,31,70,30,183,31,179,31,101,31,101,30,3,31,3,30,199,31,26,31,26,30,35,31,146,31,212,31,249,31,249,30,150,31,185,31,110,31,121,31,62,31,44,31,5,31,114,31,249,31,171,31,61,31,250,31,96,31,96,30,98,31,70,31,23,31,125,31,133,31,64,31,203,31,187,31,201,31,201,30,201,29,103,31,103,31,193,31,193,30,32,31,44,31,85,31,142,31,197,31,25,31,25,30,63,31,103,31,45,31,182,31,122,31,172,31,43,31,51,31,202,31,113,31,88,31,88,30,17,31,220,31,78,31,190,31,141,31,4,31,42,31,79,31,112,31,112,30,36,31,36,30,128,31,211,31,211,30,207,31,245,31,68,31,68,30,68,29,103,31,69,31,68,31,244,31,244,30,238,31,20,31,156,31,142,31,124,31,206,31,247,31,97,31,212,31,36,31,63,31,35,31,74,31,74,30,74,29,99,31,176,31,181,31,163,31,93,31,125,31,125,30,236,31,236,30,95,31,233,31,126,31,126,30,208,31,165,31,165,30,165,29,86,31,93,31,93,30,23,31,100,31,95,31,184,31,155,31,10,31,147,31,127,31,117,31,117,30,32,31,129,31,129,31,241,31,127,31,127,30,46,31,153,31,251,31,238,31,30,31,114,31,211,31,64,31,239,31,115,31,165,31,165,30,5,31,64,31,64,30,122,31,122,30,122,29,244,31,139,31,139,30,89,31,90,31,170,31,158,31,106,31,238,31,238,30,96,31,96,30,114,31,114,30,246,31,3,31,54,31,22,31,22,30,242,31,242,30,218,31,60,31,60,30,35,31,35,30,37,31,241,31,138,31,140,31,241,31,230,31,230,30,130,31,226,31,27,31,15,31,108,31,235,31,29,31,29,30,224,31,86,31,71,31,71,30,71,29,50,31,133,31,250,31,231,31,41,31,37,31,131,31,170,31,190,31,253,31,253,30,119,31,187,31,125,31,239,31,78,31,19,31,42,31,157,31,157,30,101,31,154,31,171,31,171,30,171,29,133,31,165,31,106,31,173,31,208,31,96,31,51,31,178,31,247,31,247,30,167,31,35,31,212,31,7,31,7,30,7,29,241,31,77,31,141,31,82,31,98,31,218,31,89,31,197,31,42,31,170,31,33,31,87,31,248,31,220,31,60,31,60,30,205,31,205,30,205,29,165,31,160,31,160,30,68,31,192,31,239,31,239,30,230,31,250,31,2,31,200,31,38,31,114,31,171,31,236,31,131,31,250,31,26,31,163,31,57,31,57,30,234,31,129,31,229,31,156,31,190,31,24,31,139,31,198,31,31,31,75,31,75,30,144,31,230,31,251,31,86,31,14,31,168,31,58,31,58,30,255,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
