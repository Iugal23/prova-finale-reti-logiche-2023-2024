-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 946;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (53,0,0,0,53,0,58,0,144,0,161,0,114,0,0,0,0,0,205,0,74,0,182,0,33,0,18,0,135,0,0,0,142,0,111,0,0,0,215,0,130,0,0,0,134,0,146,0,0,0,125,0,126,0,11,0,50,0,97,0,0,0,66,0,121,0,171,0,33,0,32,0,0,0,189,0,0,0,183,0,0,0,203,0,56,0,0,0,232,0,111,0,228,0,253,0,130,0,0,0,102,0,0,0,217,0,149,0,150,0,145,0,165,0,136,0,146,0,0,0,73,0,42,0,113,0,10,0,67,0,138,0,21,0,14,0,28,0,0,0,227,0,0,0,207,0,199,0,105,0,139,0,219,0,137,0,118,0,214,0,10,0,229,0,139,0,20,0,143,0,169,0,0,0,190,0,218,0,53,0,0,0,171,0,0,0,249,0,125,0,53,0,213,0,0,0,109,0,193,0,0,0,143,0,0,0,208,0,3,0,15,0,0,0,0,0,0,0,0,0,0,0,177,0,80,0,152,0,0,0,4,0,0,0,181,0,149,0,8,0,185,0,70,0,88,0,118,0,22,0,88,0,235,0,252,0,27,0,33,0,170,0,70,0,89,0,0,0,165,0,79,0,51,0,89,0,128,0,52,0,34,0,26,0,206,0,152,0,52,0,125,0,38,0,0,0,0,0,199,0,30,0,115,0,27,0,112,0,215,0,90,0,0,0,0,0,167,0,70,0,43,0,0,0,75,0,161,0,223,0,47,0,117,0,0,0,54,0,176,0,0,0,34,0,135,0,2,0,0,0,19,0,0,0,39,0,133,0,38,0,14,0,0,0,27,0,39,0,12,0,210,0,74,0,40,0,58,0,89,0,149,0,27,0,216,0,84,0,0,0,151,0,21,0,0,0,48,0,17,0,152,0,0,0,0,0,74,0,101,0,10,0,84,0,0,0,0,0,210,0,6,0,235,0,0,0,31,0,253,0,136,0,178,0,218,0,249,0,57,0,140,0,57,0,67,0,1,0,0,0,141,0,120,0,228,0,114,0,139,0,140,0,17,0,229,0,0,0,0,0,66,0,0,0,177,0,30,0,204,0,118,0,0,0,0,0,223,0,120,0,151,0,102,0,199,0,105,0,190,0,108,0,104,0,54,0,192,0,0,0,0,0,0,0,5,0,46,0,0,0,68,0,93,0,213,0,105,0,6,0,152,0,66,0,0,0,0,0,183,0,186,0,1,0,72,0,13,0,169,0,113,0,0,0,171,0,26,0,5,0,180,0,31,0,205,0,108,0,0,0,0,0,125,0,135,0,0,0,84,0,137,0,0,0,57,0,62,0,112,0,154,0,0,0,175,0,0,0,34,0,79,0,0,0,0,0,59,0,64,0,140,0,152,0,89,0,195,0,0,0,152,0,34,0,174,0,53,0,0,0,0,0,0,0,0,0,0,0,54,0,95,0,212,0,0,0,125,0,186,0,240,0,52,0,157,0,144,0,142,0,63,0,176,0,55,0,74,0,185,0,53,0,176,0,138,0,80,0,0,0,185,0,36,0,0,0,241,0,161,0,48,0,54,0,215,0,217,0,81,0,0,0,36,0,140,0,163,0,0,0,133,0,67,0,116,0,195,0,106,0,78,0,212,0,21,0,18,0,169,0,226,0,225,0,84,0,182,0,156,0,210,0,57,0,0,0,7,0,0,0,178,0,99,0,0,0,55,0,170,0,57,0,188,0,245,0,58,0,0,0,0,0,105,0,40,0,0,0,38,0,0,0,0,0,242,0,152,0,210,0,88,0,252,0,12,0,112,0,178,0,0,0,33,0,166,0,149,0,243,0,196,0,209,0,243,0,36,0,64,0,44,0,60,0,186,0,219,0,237,0,139,0,198,0,99,0,242,0,212,0,0,0,208,0,0,0,155,0,0,0,134,0,18,0,0,0,30,0,227,0,173,0,0,0,61,0,239,0,166,0,199,0,242,0,205,0,243,0,119,0,219,0,187,0,184,0,186,0,236,0,0,0,0,0,0,0,44,0,1,0,109,0,33,0,99,0,137,0,216,0,0,0,38,0,255,0,207,0,0,0,135,0,186,0,224,0,155,0,205,0,78,0,9,0,84,0,8,0,16,0,214,0,65,0,0,0,0,0,0,0,204,0,0,0,111,0,97,0,189,0,235,0,153,0,71,0,154,0,0,0,29,0,38,0,0,0,63,0,116,0,12,0,167,0,74,0,53,0,253,0,68,0,0,0,243,0,61,0,249,0,119,0,234,0,187,0,42,0,55,0,228,0,19,0,148,0,21,0,87,0,210,0,144,0,59,0,215,0,210,0,191,0,97,0,166,0,21,0,253,0,55,0,178,0,7,0,0,0,196,0,74,0,0,0,22,0,206,0,0,0,215,0,99,0,182,0,0,0,115,0,128,0,65,0,0,0,220,0,82,0,127,0,0,0,225,0,254,0,0,0,74,0,51,0,230,0,253,0,40,0,68,0,0,0,60,0,0,0,82,0,49,0,200,0,141,0,0,0,57,0,0,0,203,0,65,0,0,0,201,0,173,0,34,0,10,0,42,0,68,0,12,0,134,0,123,0,113,0,242,0,116,0,247,0,227,0,223,0,177,0,126,0,6,0,21,0,30,0,55,0,209,0,138,0,0,0,244,0,147,0,157,0,0,0,0,0,209,0,0,0,0,0,18,0,50,0,64,0,6,0,75,0,150,0,61,0,194,0,183,0,0,0,157,0,11,0,0,0,33,0,150,0,238,0,126,0,0,0,47,0,176,0,147,0,111,0,14,0,13,0,166,0,122,0,113,0,95,0,0,0,81,0,64,0,235,0,60,0,239,0,246,0,186,0,222,0,206,0,35,0,61,0,0,0,192,0,0,0,0,0,127,0,75,0,153,0,122,0,221,0,0,0,78,0,0,0,106,0,0,0,183,0,87,0,226,0,108,0,0,0,127,0,74,0,0,0,30,0,103,0,40,0,0,0,182,0,84,0,108,0,159,0,0,0,220,0,107,0,177,0,231,0,180,0,21,0,0,0,29,0,173,0,0,0,38,0,18,0,225,0,54,0,177,0,40,0,136,0,0,0,0,0,0,0,192,0,178,0,128,0,0,0,0,0,171,0,117,0,43,0,95,0,226,0,178,0,169,0,89,0,170,0,82,0,0,0,120,0,53,0,204,0,63,0,70,0,199,0,166,0,0,0,76,0,187,0,78,0,105,0,155,0,182,0,100,0,129,0,74,0,191,0,36,0,153,0,217,0,122,0,0,0,0,0,98,0,0,0,0,0,149,0,11,0,2,0,36,0,0,0,132,0,38,0,114,0,45,0,14,0,0,0,157,0,38,0,175,0,97,0,0,0,127,0,161,0,210,0,72,0,29,0,33,0,92,0,80,0,0,0,59,0,175,0,11,0,250,0,24,0,85,0,0,0,50,0,0,0,138,0,254,0,0,0,0,0,254,0,245,0,111,0,229,0,0,0,8,0,234,0,0,0,53,0,186,0,255,0,137,0,181,0,0,0,148,0,14,0,128,0,49,0,138,0,32,0,247,0,145,0,197,0,0,0,189,0,60,0,132,0,3,0,137,0,203,0,77,0,176,0,34,0,216,0,170,0,199,0,197,0,0,0,97,0,208,0,155,0,224,0,135,0,187,0,37,0,0,0,105,0,19,0,22,0,165,0,0,0,4,0,131,0,151,0,49,0,0,0,248,0,0,0,83,0,217,0,69,0,104,0,144,0,9,0,120,0,101,0,65,0,65,0,184,0,60,0,165,0,0,0,0,0,231,0,151,0,0,0,73,0,21,0,206,0,90,0,88,0,141,0,76,0,0,0,0,0,21,0,175,0,45,0,0,0,123,0,210,0,0,0,0,0,0,0,49,0,36,0,67,0,189,0,123,0,206,0,246,0,0,0,109,0,249,0,136,0,86,0,184,0,0,0,82,0,54,0,19,0,230,0,60,0,0,0,231,0,189,0,0,0,108,0,0,0,165,0,0,0,1,0,163,0,169,0,150,0,220,0,51,0,45,0,160,0,68,0,43,0,50,0,190,0,87,0,237,0,138,0,10,0,10,0,153,0,254,0,0,0,147,0,85,0,108,0,75,0,144,0,246,0,53,0,107,0,36,0,33,0,196,0,136,0,220,0,129,0,163,0,0,0,0,0,176,0,251,0,21,0,0,0,169,0,210,0,0,0,60,0,173,0,167,0,60,0,62,0,206,0,169,0,0,0,203,0,84,0,54,0,213,0,183,0);
signal scenario_full  : scenario_type := (53,31,53,30,53,31,58,31,144,31,161,31,114,31,114,30,114,29,205,31,74,31,182,31,33,31,18,31,135,31,135,30,142,31,111,31,111,30,215,31,130,31,130,30,134,31,146,31,146,30,125,31,126,31,11,31,50,31,97,31,97,30,66,31,121,31,171,31,33,31,32,31,32,30,189,31,189,30,183,31,183,30,203,31,56,31,56,30,232,31,111,31,228,31,253,31,130,31,130,30,102,31,102,30,217,31,149,31,150,31,145,31,165,31,136,31,146,31,146,30,73,31,42,31,113,31,10,31,67,31,138,31,21,31,14,31,28,31,28,30,227,31,227,30,207,31,199,31,105,31,139,31,219,31,137,31,118,31,214,31,10,31,229,31,139,31,20,31,143,31,169,31,169,30,190,31,218,31,53,31,53,30,171,31,171,30,249,31,125,31,53,31,213,31,213,30,109,31,193,31,193,30,143,31,143,30,208,31,3,31,15,31,15,30,15,29,15,28,15,27,15,26,177,31,80,31,152,31,152,30,4,31,4,30,181,31,149,31,8,31,185,31,70,31,88,31,118,31,22,31,88,31,235,31,252,31,27,31,33,31,170,31,70,31,89,31,89,30,165,31,79,31,51,31,89,31,128,31,52,31,34,31,26,31,206,31,152,31,52,31,125,31,38,31,38,30,38,29,199,31,30,31,115,31,27,31,112,31,215,31,90,31,90,30,90,29,167,31,70,31,43,31,43,30,75,31,161,31,223,31,47,31,117,31,117,30,54,31,176,31,176,30,34,31,135,31,2,31,2,30,19,31,19,30,39,31,133,31,38,31,14,31,14,30,27,31,39,31,12,31,210,31,74,31,40,31,58,31,89,31,149,31,27,31,216,31,84,31,84,30,151,31,21,31,21,30,48,31,17,31,152,31,152,30,152,29,74,31,101,31,10,31,84,31,84,30,84,29,210,31,6,31,235,31,235,30,31,31,253,31,136,31,178,31,218,31,249,31,57,31,140,31,57,31,67,31,1,31,1,30,141,31,120,31,228,31,114,31,139,31,140,31,17,31,229,31,229,30,229,29,66,31,66,30,177,31,30,31,204,31,118,31,118,30,118,29,223,31,120,31,151,31,102,31,199,31,105,31,190,31,108,31,104,31,54,31,192,31,192,30,192,29,192,28,5,31,46,31,46,30,68,31,93,31,213,31,105,31,6,31,152,31,66,31,66,30,66,29,183,31,186,31,1,31,72,31,13,31,169,31,113,31,113,30,171,31,26,31,5,31,180,31,31,31,205,31,108,31,108,30,108,29,125,31,135,31,135,30,84,31,137,31,137,30,57,31,62,31,112,31,154,31,154,30,175,31,175,30,34,31,79,31,79,30,79,29,59,31,64,31,140,31,152,31,89,31,195,31,195,30,152,31,34,31,174,31,53,31,53,30,53,29,53,28,53,27,53,26,54,31,95,31,212,31,212,30,125,31,186,31,240,31,52,31,157,31,144,31,142,31,63,31,176,31,55,31,74,31,185,31,53,31,176,31,138,31,80,31,80,30,185,31,36,31,36,30,241,31,161,31,48,31,54,31,215,31,217,31,81,31,81,30,36,31,140,31,163,31,163,30,133,31,67,31,116,31,195,31,106,31,78,31,212,31,21,31,18,31,169,31,226,31,225,31,84,31,182,31,156,31,210,31,57,31,57,30,7,31,7,30,178,31,99,31,99,30,55,31,170,31,57,31,188,31,245,31,58,31,58,30,58,29,105,31,40,31,40,30,38,31,38,30,38,29,242,31,152,31,210,31,88,31,252,31,12,31,112,31,178,31,178,30,33,31,166,31,149,31,243,31,196,31,209,31,243,31,36,31,64,31,44,31,60,31,186,31,219,31,237,31,139,31,198,31,99,31,242,31,212,31,212,30,208,31,208,30,155,31,155,30,134,31,18,31,18,30,30,31,227,31,173,31,173,30,61,31,239,31,166,31,199,31,242,31,205,31,243,31,119,31,219,31,187,31,184,31,186,31,236,31,236,30,236,29,236,28,44,31,1,31,109,31,33,31,99,31,137,31,216,31,216,30,38,31,255,31,207,31,207,30,135,31,186,31,224,31,155,31,205,31,78,31,9,31,84,31,8,31,16,31,214,31,65,31,65,30,65,29,65,28,204,31,204,30,111,31,97,31,189,31,235,31,153,31,71,31,154,31,154,30,29,31,38,31,38,30,63,31,116,31,12,31,167,31,74,31,53,31,253,31,68,31,68,30,243,31,61,31,249,31,119,31,234,31,187,31,42,31,55,31,228,31,19,31,148,31,21,31,87,31,210,31,144,31,59,31,215,31,210,31,191,31,97,31,166,31,21,31,253,31,55,31,178,31,7,31,7,30,196,31,74,31,74,30,22,31,206,31,206,30,215,31,99,31,182,31,182,30,115,31,128,31,65,31,65,30,220,31,82,31,127,31,127,30,225,31,254,31,254,30,74,31,51,31,230,31,253,31,40,31,68,31,68,30,60,31,60,30,82,31,49,31,200,31,141,31,141,30,57,31,57,30,203,31,65,31,65,30,201,31,173,31,34,31,10,31,42,31,68,31,12,31,134,31,123,31,113,31,242,31,116,31,247,31,227,31,223,31,177,31,126,31,6,31,21,31,30,31,55,31,209,31,138,31,138,30,244,31,147,31,157,31,157,30,157,29,209,31,209,30,209,29,18,31,50,31,64,31,6,31,75,31,150,31,61,31,194,31,183,31,183,30,157,31,11,31,11,30,33,31,150,31,238,31,126,31,126,30,47,31,176,31,147,31,111,31,14,31,13,31,166,31,122,31,113,31,95,31,95,30,81,31,64,31,235,31,60,31,239,31,246,31,186,31,222,31,206,31,35,31,61,31,61,30,192,31,192,30,192,29,127,31,75,31,153,31,122,31,221,31,221,30,78,31,78,30,106,31,106,30,183,31,87,31,226,31,108,31,108,30,127,31,74,31,74,30,30,31,103,31,40,31,40,30,182,31,84,31,108,31,159,31,159,30,220,31,107,31,177,31,231,31,180,31,21,31,21,30,29,31,173,31,173,30,38,31,18,31,225,31,54,31,177,31,40,31,136,31,136,30,136,29,136,28,192,31,178,31,128,31,128,30,128,29,171,31,117,31,43,31,95,31,226,31,178,31,169,31,89,31,170,31,82,31,82,30,120,31,53,31,204,31,63,31,70,31,199,31,166,31,166,30,76,31,187,31,78,31,105,31,155,31,182,31,100,31,129,31,74,31,191,31,36,31,153,31,217,31,122,31,122,30,122,29,98,31,98,30,98,29,149,31,11,31,2,31,36,31,36,30,132,31,38,31,114,31,45,31,14,31,14,30,157,31,38,31,175,31,97,31,97,30,127,31,161,31,210,31,72,31,29,31,33,31,92,31,80,31,80,30,59,31,175,31,11,31,250,31,24,31,85,31,85,30,50,31,50,30,138,31,254,31,254,30,254,29,254,31,245,31,111,31,229,31,229,30,8,31,234,31,234,30,53,31,186,31,255,31,137,31,181,31,181,30,148,31,14,31,128,31,49,31,138,31,32,31,247,31,145,31,197,31,197,30,189,31,60,31,132,31,3,31,137,31,203,31,77,31,176,31,34,31,216,31,170,31,199,31,197,31,197,30,97,31,208,31,155,31,224,31,135,31,187,31,37,31,37,30,105,31,19,31,22,31,165,31,165,30,4,31,131,31,151,31,49,31,49,30,248,31,248,30,83,31,217,31,69,31,104,31,144,31,9,31,120,31,101,31,65,31,65,31,184,31,60,31,165,31,165,30,165,29,231,31,151,31,151,30,73,31,21,31,206,31,90,31,88,31,141,31,76,31,76,30,76,29,21,31,175,31,45,31,45,30,123,31,210,31,210,30,210,29,210,28,49,31,36,31,67,31,189,31,123,31,206,31,246,31,246,30,109,31,249,31,136,31,86,31,184,31,184,30,82,31,54,31,19,31,230,31,60,31,60,30,231,31,189,31,189,30,108,31,108,30,165,31,165,30,1,31,163,31,169,31,150,31,220,31,51,31,45,31,160,31,68,31,43,31,50,31,190,31,87,31,237,31,138,31,10,31,10,31,153,31,254,31,254,30,147,31,85,31,108,31,75,31,144,31,246,31,53,31,107,31,36,31,33,31,196,31,136,31,220,31,129,31,163,31,163,30,163,29,176,31,251,31,21,31,21,30,169,31,210,31,210,30,60,31,173,31,167,31,60,31,62,31,206,31,169,31,169,30,203,31,84,31,54,31,213,31,183,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
