-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 951;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (55,0,83,0,20,0,100,0,0,0,156,0,133,0,106,0,249,0,202,0,234,0,0,0,223,0,0,0,106,0,244,0,29,0,55,0,0,0,0,0,182,0,105,0,0,0,0,0,139,0,210,0,213,0,62,0,0,0,141,0,0,0,121,0,78,0,183,0,151,0,0,0,250,0,190,0,134,0,243,0,0,0,251,0,0,0,203,0,162,0,118,0,209,0,31,0,0,0,92,0,0,0,185,0,41,0,65,0,39,0,56,0,130,0,169,0,154,0,216,0,205,0,32,0,62,0,47,0,0,0,186,0,103,0,49,0,206,0,0,0,211,0,177,0,0,0,0,0,68,0,103,0,176,0,189,0,0,0,146,0,0,0,201,0,143,0,0,0,56,0,254,0,178,0,9,0,113,0,0,0,53,0,255,0,135,0,224,0,235,0,30,0,97,0,0,0,171,0,144,0,203,0,98,0,205,0,26,0,0,0,215,0,0,0,44,0,187,0,0,0,163,0,130,0,98,0,79,0,68,0,232,0,48,0,179,0,9,0,0,0,0,0,81,0,0,0,120,0,33,0,73,0,92,0,240,0,58,0,179,0,227,0,223,0,52,0,69,0,0,0,133,0,11,0,120,0,85,0,0,0,126,0,187,0,105,0,0,0,187,0,16,0,224,0,0,0,113,0,70,0,164,0,197,0,84,0,163,0,206,0,8,0,28,0,216,0,114,0,98,0,0,0,14,0,11,0,148,0,98,0,236,0,0,0,0,0,18,0,0,0,95,0,114,0,34,0,46,0,77,0,75,0,54,0,234,0,143,0,62,0,235,0,0,0,60,0,110,0,0,0,20,0,196,0,0,0,167,0,0,0,247,0,47,0,30,0,0,0,152,0,173,0,159,0,202,0,211,0,116,0,41,0,218,0,200,0,255,0,228,0,164,0,147,0,0,0,49,0,68,0,0,0,65,0,0,0,249,0,0,0,53,0,144,0,94,0,169,0,0,0,0,0,40,0,172,0,40,0,143,0,6,0,161,0,238,0,154,0,5,0,203,0,121,0,0,0,130,0,0,0,0,0,0,0,90,0,4,0,0,0,232,0,81,0,46,0,0,0,0,0,117,0,134,0,223,0,129,0,92,0,175,0,10,0,36,0,0,0,73,0,188,0,203,0,113,0,46,0,1,0,180,0,79,0,97,0,116,0,152,0,145,0,138,0,220,0,0,0,0,0,24,0,247,0,0,0,213,0,211,0,43,0,37,0,5,0,202,0,155,0,14,0,17,0,10,0,214,0,139,0,0,0,17,0,199,0,229,0,242,0,152,0,99,0,0,0,144,0,188,0,0,0,21,0,156,0,133,0,228,0,0,0,134,0,139,0,169,0,199,0,239,0,16,0,159,0,149,0,0,0,0,0,183,0,42,0,205,0,157,0,178,0,36,0,70,0,25,0,193,0,235,0,202,0,220,0,173,0,49,0,136,0,32,0,116,0,117,0,243,0,80,0,0,0,194,0,148,0,60,0,150,0,239,0,0,0,201,0,148,0,0,0,133,0,0,0,181,0,0,0,83,0,232,0,49,0,211,0,157,0,253,0,87,0,191,0,111,0,110,0,0,0,149,0,0,0,230,0,129,0,163,0,133,0,227,0,0,0,119,0,172,0,188,0,206,0,150,0,0,0,211,0,0,0,96,0,0,0,0,0,0,0,0,0,182,0,5,0,225,0,0,0,0,0,215,0,0,0,0,0,224,0,53,0,119,0,81,0,0,0,127,0,12,0,171,0,25,0,219,0,0,0,0,0,0,0,158,0,24,0,237,0,64,0,22,0,0,0,194,0,203,0,15,0,0,0,63,0,172,0,176,0,0,0,114,0,0,0,0,0,192,0,33,0,0,0,0,0,32,0,71,0,200,0,0,0,32,0,82,0,0,0,211,0,0,0,246,0,178,0,121,0,231,0,190,0,203,0,55,0,155,0,121,0,0,0,93,0,0,0,0,0,85,0,20,0,244,0,97,0,177,0,33,0,40,0,253,0,110,0,0,0,64,0,179,0,0,0,107,0,113,0,195,0,125,0,52,0,9,0,0,0,0,0,0,0,81,0,108,0,10,0,123,0,238,0,110,0,247,0,245,0,232,0,52,0,122,0,13,0,86,0,188,0,88,0,208,0,207,0,72,0,24,0,189,0,81,0,54,0,0,0,0,0,135,0,192,0,12,0,25,0,0,0,169,0,245,0,0,0,162,0,209,0,194,0,0,0,0,0,0,0,15,0,160,0,181,0,112,0,9,0,184,0,174,0,161,0,1,0,180,0,127,0,240,0,148,0,0,0,95,0,0,0,0,0,85,0,0,0,120,0,235,0,48,0,0,0,191,0,188,0,194,0,0,0,180,0,183,0,0,0,155,0,98,0,208,0,152,0,126,0,140,0,157,0,95,0,51,0,160,0,179,0,201,0,186,0,0,0,0,0,98,0,0,0,232,0,26,0,98,0,0,0,0,0,69,0,124,0,8,0,128,0,31,0,31,0,0,0,175,0,0,0,188,0,71,0,151,0,120,0,63,0,0,0,0,0,198,0,160,0,167,0,88,0,191,0,144,0,141,0,37,0,93,0,133,0,0,0,15,0,0,0,206,0,6,0,106,0,170,0,139,0,192,0,0,0,100,0,83,0,166,0,51,0,76,0,0,0,8,0,95,0,96,0,225,0,0,0,123,0,247,0,47,0,92,0,29,0,0,0,145,0,231,0,232,0,0,0,41,0,26,0,89,0,130,0,250,0,119,0,204,0,170,0,0,0,162,0,79,0,167,0,97,0,221,0,0,0,194,0,0,0,150,0,147,0,0,0,0,0,138,0,203,0,182,0,100,0,211,0,115,0,149,0,199,0,0,0,0,0,218,0,148,0,0,0,29,0,32,0,107,0,141,0,87,0,0,0,0,0,132,0,0,0,51,0,220,0,0,0,252,0,251,0,192,0,47,0,198,0,200,0,30,0,163,0,165,0,205,0,94,0,250,0,44,0,225,0,146,0,154,0,239,0,0,0,0,0,0,0,50,0,154,0,208,0,177,0,0,0,20,0,33,0,157,0,250,0,0,0,221,0,185,0,69,0,142,0,239,0,76,0,1,0,50,0,21,0,198,0,0,0,0,0,221,0,0,0,0,0,235,0,253,0,101,0,85,0,0,0,9,0,73,0,195,0,68,0,208,0,39,0,163,0,135,0,92,0,0,0,207,0,34,0,54,0,137,0,81,0,0,0,146,0,0,0,222,0,159,0,0,0,212,0,58,0,4,0,253,0,80,0,190,0,0,0,156,0,149,0,0,0,138,0,2,0,0,0,246,0,248,0,169,0,0,0,57,0,0,0,242,0,71,0,134,0,30,0,0,0,226,0,228,0,180,0,182,0,0,0,229,0,105,0,226,0,79,0,15,0,0,0,183,0,0,0,10,0,158,0,39,0,83,0,89,0,185,0,201,0,59,0,204,0,130,0,105,0,106,0,10,0,64,0,218,0,242,0,92,0,244,0,58,0,234,0,0,0,0,0,146,0,90,0,0,0,81,0,0,0,232,0,0,0,71,0,147,0,37,0,0,0,0,0,0,0,214,0,0,0,71,0,0,0,111,0,51,0,108,0,227,0,0,0,40,0,0,0,143,0,0,0,167,0,187,0,87,0,19,0,201,0,102,0,37,0,0,0,0,0,26,0,248,0,108,0,162,0,221,0,100,0,226,0,238,0,121,0,220,0,28,0,216,0,0,0,139,0,52,0,230,0,32,0,148,0,0,0,146,0,23,0,108,0,3,0,191,0,41,0,174,0,186,0,225,0,170,0,0,0,234,0,120,0,131,0,88,0,72,0,0,0,142,0,185,0,253,0,168,0,109,0,63,0,0,0,182,0,225,0,144,0,0,0,151,0,0,0,135,0,46,0,0,0,106,0,118,0,0,0,31,0,176,0,126,0,244,0,40,0,0,0,218,0,0,0,23,0,193,0,78,0,0,0,237,0,88,0,30,0,185,0,72,0,207,0,35,0,169,0,222,0,67,0,207,0,0,0,0,0,0,0,113,0,148,0,234,0,54,0,234,0,1,0,185,0,56,0,0,0,0,0,191,0,0,0,213,0,50,0,0,0,24,0,199,0,190,0,131,0,17,0,251,0,0,0,0,0,247,0,84,0,65,0,0,0,43,0,166,0,242,0,0,0,119,0,5,0,70,0,52,0,0,0,0,0,204,0,169,0,20,0,24,0,185,0,0,0,27,0,220,0,100,0,248,0,220,0,217,0);
signal scenario_full  : scenario_type := (55,31,83,31,20,31,100,31,100,30,156,31,133,31,106,31,249,31,202,31,234,31,234,30,223,31,223,30,106,31,244,31,29,31,55,31,55,30,55,29,182,31,105,31,105,30,105,29,139,31,210,31,213,31,62,31,62,30,141,31,141,30,121,31,78,31,183,31,151,31,151,30,250,31,190,31,134,31,243,31,243,30,251,31,251,30,203,31,162,31,118,31,209,31,31,31,31,30,92,31,92,30,185,31,41,31,65,31,39,31,56,31,130,31,169,31,154,31,216,31,205,31,32,31,62,31,47,31,47,30,186,31,103,31,49,31,206,31,206,30,211,31,177,31,177,30,177,29,68,31,103,31,176,31,189,31,189,30,146,31,146,30,201,31,143,31,143,30,56,31,254,31,178,31,9,31,113,31,113,30,53,31,255,31,135,31,224,31,235,31,30,31,97,31,97,30,171,31,144,31,203,31,98,31,205,31,26,31,26,30,215,31,215,30,44,31,187,31,187,30,163,31,130,31,98,31,79,31,68,31,232,31,48,31,179,31,9,31,9,30,9,29,81,31,81,30,120,31,33,31,73,31,92,31,240,31,58,31,179,31,227,31,223,31,52,31,69,31,69,30,133,31,11,31,120,31,85,31,85,30,126,31,187,31,105,31,105,30,187,31,16,31,224,31,224,30,113,31,70,31,164,31,197,31,84,31,163,31,206,31,8,31,28,31,216,31,114,31,98,31,98,30,14,31,11,31,148,31,98,31,236,31,236,30,236,29,18,31,18,30,95,31,114,31,34,31,46,31,77,31,75,31,54,31,234,31,143,31,62,31,235,31,235,30,60,31,110,31,110,30,20,31,196,31,196,30,167,31,167,30,247,31,47,31,30,31,30,30,152,31,173,31,159,31,202,31,211,31,116,31,41,31,218,31,200,31,255,31,228,31,164,31,147,31,147,30,49,31,68,31,68,30,65,31,65,30,249,31,249,30,53,31,144,31,94,31,169,31,169,30,169,29,40,31,172,31,40,31,143,31,6,31,161,31,238,31,154,31,5,31,203,31,121,31,121,30,130,31,130,30,130,29,130,28,90,31,4,31,4,30,232,31,81,31,46,31,46,30,46,29,117,31,134,31,223,31,129,31,92,31,175,31,10,31,36,31,36,30,73,31,188,31,203,31,113,31,46,31,1,31,180,31,79,31,97,31,116,31,152,31,145,31,138,31,220,31,220,30,220,29,24,31,247,31,247,30,213,31,211,31,43,31,37,31,5,31,202,31,155,31,14,31,17,31,10,31,214,31,139,31,139,30,17,31,199,31,229,31,242,31,152,31,99,31,99,30,144,31,188,31,188,30,21,31,156,31,133,31,228,31,228,30,134,31,139,31,169,31,199,31,239,31,16,31,159,31,149,31,149,30,149,29,183,31,42,31,205,31,157,31,178,31,36,31,70,31,25,31,193,31,235,31,202,31,220,31,173,31,49,31,136,31,32,31,116,31,117,31,243,31,80,31,80,30,194,31,148,31,60,31,150,31,239,31,239,30,201,31,148,31,148,30,133,31,133,30,181,31,181,30,83,31,232,31,49,31,211,31,157,31,253,31,87,31,191,31,111,31,110,31,110,30,149,31,149,30,230,31,129,31,163,31,133,31,227,31,227,30,119,31,172,31,188,31,206,31,150,31,150,30,211,31,211,30,96,31,96,30,96,29,96,28,96,27,182,31,5,31,225,31,225,30,225,29,215,31,215,30,215,29,224,31,53,31,119,31,81,31,81,30,127,31,12,31,171,31,25,31,219,31,219,30,219,29,219,28,158,31,24,31,237,31,64,31,22,31,22,30,194,31,203,31,15,31,15,30,63,31,172,31,176,31,176,30,114,31,114,30,114,29,192,31,33,31,33,30,33,29,32,31,71,31,200,31,200,30,32,31,82,31,82,30,211,31,211,30,246,31,178,31,121,31,231,31,190,31,203,31,55,31,155,31,121,31,121,30,93,31,93,30,93,29,85,31,20,31,244,31,97,31,177,31,33,31,40,31,253,31,110,31,110,30,64,31,179,31,179,30,107,31,113,31,195,31,125,31,52,31,9,31,9,30,9,29,9,28,81,31,108,31,10,31,123,31,238,31,110,31,247,31,245,31,232,31,52,31,122,31,13,31,86,31,188,31,88,31,208,31,207,31,72,31,24,31,189,31,81,31,54,31,54,30,54,29,135,31,192,31,12,31,25,31,25,30,169,31,245,31,245,30,162,31,209,31,194,31,194,30,194,29,194,28,15,31,160,31,181,31,112,31,9,31,184,31,174,31,161,31,1,31,180,31,127,31,240,31,148,31,148,30,95,31,95,30,95,29,85,31,85,30,120,31,235,31,48,31,48,30,191,31,188,31,194,31,194,30,180,31,183,31,183,30,155,31,98,31,208,31,152,31,126,31,140,31,157,31,95,31,51,31,160,31,179,31,201,31,186,31,186,30,186,29,98,31,98,30,232,31,26,31,98,31,98,30,98,29,69,31,124,31,8,31,128,31,31,31,31,31,31,30,175,31,175,30,188,31,71,31,151,31,120,31,63,31,63,30,63,29,198,31,160,31,167,31,88,31,191,31,144,31,141,31,37,31,93,31,133,31,133,30,15,31,15,30,206,31,6,31,106,31,170,31,139,31,192,31,192,30,100,31,83,31,166,31,51,31,76,31,76,30,8,31,95,31,96,31,225,31,225,30,123,31,247,31,47,31,92,31,29,31,29,30,145,31,231,31,232,31,232,30,41,31,26,31,89,31,130,31,250,31,119,31,204,31,170,31,170,30,162,31,79,31,167,31,97,31,221,31,221,30,194,31,194,30,150,31,147,31,147,30,147,29,138,31,203,31,182,31,100,31,211,31,115,31,149,31,199,31,199,30,199,29,218,31,148,31,148,30,29,31,32,31,107,31,141,31,87,31,87,30,87,29,132,31,132,30,51,31,220,31,220,30,252,31,251,31,192,31,47,31,198,31,200,31,30,31,163,31,165,31,205,31,94,31,250,31,44,31,225,31,146,31,154,31,239,31,239,30,239,29,239,28,50,31,154,31,208,31,177,31,177,30,20,31,33,31,157,31,250,31,250,30,221,31,185,31,69,31,142,31,239,31,76,31,1,31,50,31,21,31,198,31,198,30,198,29,221,31,221,30,221,29,235,31,253,31,101,31,85,31,85,30,9,31,73,31,195,31,68,31,208,31,39,31,163,31,135,31,92,31,92,30,207,31,34,31,54,31,137,31,81,31,81,30,146,31,146,30,222,31,159,31,159,30,212,31,58,31,4,31,253,31,80,31,190,31,190,30,156,31,149,31,149,30,138,31,2,31,2,30,246,31,248,31,169,31,169,30,57,31,57,30,242,31,71,31,134,31,30,31,30,30,226,31,228,31,180,31,182,31,182,30,229,31,105,31,226,31,79,31,15,31,15,30,183,31,183,30,10,31,158,31,39,31,83,31,89,31,185,31,201,31,59,31,204,31,130,31,105,31,106,31,10,31,64,31,218,31,242,31,92,31,244,31,58,31,234,31,234,30,234,29,146,31,90,31,90,30,81,31,81,30,232,31,232,30,71,31,147,31,37,31,37,30,37,29,37,28,214,31,214,30,71,31,71,30,111,31,51,31,108,31,227,31,227,30,40,31,40,30,143,31,143,30,167,31,187,31,87,31,19,31,201,31,102,31,37,31,37,30,37,29,26,31,248,31,108,31,162,31,221,31,100,31,226,31,238,31,121,31,220,31,28,31,216,31,216,30,139,31,52,31,230,31,32,31,148,31,148,30,146,31,23,31,108,31,3,31,191,31,41,31,174,31,186,31,225,31,170,31,170,30,234,31,120,31,131,31,88,31,72,31,72,30,142,31,185,31,253,31,168,31,109,31,63,31,63,30,182,31,225,31,144,31,144,30,151,31,151,30,135,31,46,31,46,30,106,31,118,31,118,30,31,31,176,31,126,31,244,31,40,31,40,30,218,31,218,30,23,31,193,31,78,31,78,30,237,31,88,31,30,31,185,31,72,31,207,31,35,31,169,31,222,31,67,31,207,31,207,30,207,29,207,28,113,31,148,31,234,31,54,31,234,31,1,31,185,31,56,31,56,30,56,29,191,31,191,30,213,31,50,31,50,30,24,31,199,31,190,31,131,31,17,31,251,31,251,30,251,29,247,31,84,31,65,31,65,30,43,31,166,31,242,31,242,30,119,31,5,31,70,31,52,31,52,30,52,29,204,31,169,31,20,31,24,31,185,31,185,30,27,31,220,31,100,31,248,31,220,31,217,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
