-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 356;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (162,0,39,0,168,0,70,0,0,0,168,0,101,0,9,0,222,0,129,0,103,0,46,0,208,0,106,0,69,0,0,0,0,0,15,0,0,0,0,0,159,0,0,0,0,0,37,0,179,0,52,0,92,0,111,0,28,0,144,0,110,0,159,0,81,0,165,0,155,0,10,0,238,0,80,0,47,0,98,0,36,0,29,0,243,0,0,0,72,0,0,0,106,0,59,0,0,0,135,0,67,0,87,0,11,0,154,0,251,0,234,0,170,0,54,0,142,0,6,0,155,0,224,0,124,0,82,0,50,0,254,0,0,0,10,0,18,0,67,0,0,0,172,0,253,0,0,0,0,0,154,0,0,0,176,0,0,0,0,0,83,0,0,0,137,0,0,0,178,0,0,0,22,0,50,0,0,0,234,0,100,0,246,0,16,0,106,0,0,0,190,0,0,0,99,0,135,0,94,0,170,0,116,0,252,0,201,0,55,0,33,0,14,0,248,0,198,0,0,0,122,0,0,0,51,0,0,0,132,0,238,0,0,0,220,0,140,0,163,0,106,0,117,0,73,0,172,0,101,0,126,0,32,0,0,0,35,0,214,0,158,0,147,0,2,0,234,0,145,0,68,0,0,0,31,0,52,0,0,0,0,0,110,0,245,0,222,0,0,0,162,0,0,0,74,0,137,0,217,0,86,0,194,0,207,0,0,0,0,0,0,0,71,0,0,0,99,0,181,0,201,0,239,0,0,0,13,0,82,0,0,0,130,0,134,0,0,0,139,0,253,0,158,0,189,0,39,0,0,0,67,0,24,0,28,0,202,0,0,0,250,0,9,0,0,0,109,0,238,0,151,0,217,0,197,0,0,0,21,0,7,0,0,0,74,0,228,0,106,0,0,0,0,0,92,0,167,0,214,0,119,0,216,0,0,0,0,0,66,0,143,0,251,0,222,0,251,0,0,0,0,0,142,0,0,0,236,0,229,0,45,0,247,0,124,0,147,0,55,0,79,0,144,0,4,0,91,0,191,0,174,0,0,0,0,0,179,0,0,0,74,0,157,0,6,0,252,0,230,0,222,0,139,0,0,0,116,0,31,0,88,0,237,0,198,0,107,0,31,0,199,0,0,0,221,0,171,0,247,0,9,0,77,0,92,0,24,0,130,0,104,0,166,0,81,0,232,0,0,0,86,0,0,0,57,0,56,0,140,0,194,0,195,0,0,0,157,0,127,0,170,0,92,0,79,0,0,0,16,0,152,0,237,0,22,0,130,0,56,0,241,0,13,0,0,0,47,0,225,0,150,0,250,0,0,0,3,0,163,0,34,0,116,0,0,0,54,0,0,0,116,0,91,0,230,0,0,0,40,0,0,0,124,0,42,0,191,0,0,0,250,0,77,0,101,0,100,0,0,0,52,0,234,0,121,0,32,0,246,0,202,0,189,0,137,0,221,0,117,0,116,0,147,0,181,0,131,0,223,0,92,0,40,0,11,0,211,0,51,0,81,0,11,0,178,0,12,0,231,0,0,0,186,0,233,0,9,0,63,0,158,0,188,0,151,0,0,0,0,0,0,0,248,0,255,0,47,0,129,0,233,0,243,0,0,0,239,0,136,0,0,0);
signal scenario_full  : scenario_type := (162,31,39,31,168,31,70,31,70,30,168,31,101,31,9,31,222,31,129,31,103,31,46,31,208,31,106,31,69,31,69,30,69,29,15,31,15,30,15,29,159,31,159,30,159,29,37,31,179,31,52,31,92,31,111,31,28,31,144,31,110,31,159,31,81,31,165,31,155,31,10,31,238,31,80,31,47,31,98,31,36,31,29,31,243,31,243,30,72,31,72,30,106,31,59,31,59,30,135,31,67,31,87,31,11,31,154,31,251,31,234,31,170,31,54,31,142,31,6,31,155,31,224,31,124,31,82,31,50,31,254,31,254,30,10,31,18,31,67,31,67,30,172,31,253,31,253,30,253,29,154,31,154,30,176,31,176,30,176,29,83,31,83,30,137,31,137,30,178,31,178,30,22,31,50,31,50,30,234,31,100,31,246,31,16,31,106,31,106,30,190,31,190,30,99,31,135,31,94,31,170,31,116,31,252,31,201,31,55,31,33,31,14,31,248,31,198,31,198,30,122,31,122,30,51,31,51,30,132,31,238,31,238,30,220,31,140,31,163,31,106,31,117,31,73,31,172,31,101,31,126,31,32,31,32,30,35,31,214,31,158,31,147,31,2,31,234,31,145,31,68,31,68,30,31,31,52,31,52,30,52,29,110,31,245,31,222,31,222,30,162,31,162,30,74,31,137,31,217,31,86,31,194,31,207,31,207,30,207,29,207,28,71,31,71,30,99,31,181,31,201,31,239,31,239,30,13,31,82,31,82,30,130,31,134,31,134,30,139,31,253,31,158,31,189,31,39,31,39,30,67,31,24,31,28,31,202,31,202,30,250,31,9,31,9,30,109,31,238,31,151,31,217,31,197,31,197,30,21,31,7,31,7,30,74,31,228,31,106,31,106,30,106,29,92,31,167,31,214,31,119,31,216,31,216,30,216,29,66,31,143,31,251,31,222,31,251,31,251,30,251,29,142,31,142,30,236,31,229,31,45,31,247,31,124,31,147,31,55,31,79,31,144,31,4,31,91,31,191,31,174,31,174,30,174,29,179,31,179,30,74,31,157,31,6,31,252,31,230,31,222,31,139,31,139,30,116,31,31,31,88,31,237,31,198,31,107,31,31,31,199,31,199,30,221,31,171,31,247,31,9,31,77,31,92,31,24,31,130,31,104,31,166,31,81,31,232,31,232,30,86,31,86,30,57,31,56,31,140,31,194,31,195,31,195,30,157,31,127,31,170,31,92,31,79,31,79,30,16,31,152,31,237,31,22,31,130,31,56,31,241,31,13,31,13,30,47,31,225,31,150,31,250,31,250,30,3,31,163,31,34,31,116,31,116,30,54,31,54,30,116,31,91,31,230,31,230,30,40,31,40,30,124,31,42,31,191,31,191,30,250,31,77,31,101,31,100,31,100,30,52,31,234,31,121,31,32,31,246,31,202,31,189,31,137,31,221,31,117,31,116,31,147,31,181,31,131,31,223,31,92,31,40,31,11,31,211,31,51,31,81,31,11,31,178,31,12,31,231,31,231,30,186,31,233,31,9,31,63,31,158,31,188,31,151,31,151,30,151,29,151,28,248,31,255,31,47,31,129,31,233,31,243,31,243,30,239,31,136,31,136,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
