-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 789;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,119,0,231,0,236,0,95,0,170,0,244,0,56,0,98,0,0,0,123,0,13,0,149,0,224,0,147,0,216,0,6,0,52,0,21,0,243,0,0,0,0,0,50,0,0,0,0,0,0,0,69,0,180,0,15,0,165,0,112,0,40,0,2,0,149,0,1,0,249,0,146,0,177,0,171,0,227,0,157,0,94,0,0,0,0,0,141,0,53,0,0,0,121,0,254,0,224,0,248,0,61,0,99,0,238,0,61,0,214,0,23,0,58,0,254,0,163,0,0,0,165,0,165,0,143,0,72,0,50,0,126,0,96,0,209,0,0,0,0,0,4,0,0,0,99,0,0,0,0,0,236,0,85,0,29,0,0,0,79,0,29,0,26,0,0,0,242,0,227,0,249,0,167,0,109,0,206,0,85,0,255,0,230,0,163,0,0,0,128,0,234,0,0,0,41,0,0,0,140,0,56,0,242,0,108,0,158,0,80,0,0,0,114,0,0,0,0,0,228,0,0,0,166,0,4,0,176,0,230,0,0,0,100,0,81,0,153,0,206,0,71,0,68,0,136,0,193,0,33,0,224,0,64,0,227,0,160,0,192,0,105,0,0,0,0,0,180,0,149,0,217,0,96,0,130,0,159,0,80,0,144,0,240,0,179,0,0,0,210,0,188,0,166,0,86,0,0,0,215,0,3,0,0,0,98,0,205,0,124,0,116,0,205,0,0,0,239,0,97,0,1,0,0,0,4,0,183,0,0,0,157,0,135,0,113,0,0,0,0,0,153,0,70,0,208,0,143,0,0,0,30,0,182,0,0,0,143,0,189,0,204,0,0,0,0,0,204,0,94,0,160,0,100,0,221,0,52,0,5,0,13,0,0,0,4,0,75,0,168,0,234,0,81,0,28,0,170,0,235,0,225,0,0,0,215,0,118,0,179,0,170,0,215,0,206,0,235,0,0,0,167,0,47,0,150,0,0,0,170,0,49,0,216,0,166,0,177,0,76,0,144,0,193,0,87,0,160,0,0,0,224,0,244,0,54,0,81,0,76,0,151,0,181,0,98,0,207,0,190,0,157,0,0,0,82,0,0,0,91,0,99,0,21,0,180,0,180,0,67,0,150,0,188,0,248,0,102,0,135,0,98,0,102,0,61,0,12,0,0,0,119,0,14,0,241,0,20,0,159,0,156,0,122,0,12,0,253,0,37,0,179,0,252,0,200,0,86,0,170,0,84,0,65,0,97,0,0,0,66,0,153,0,8,0,58,0,0,0,202,0,52,0,84,0,187,0,248,0,0,0,47,0,13,0,241,0,183,0,109,0,170,0,161,0,218,0,0,0,27,0,28,0,0,0,118,0,15,0,0,0,0,0,96,0,159,0,0,0,239,0,122,0,19,0,43,0,0,0,0,0,192,0,79,0,0,0,0,0,172,0,234,0,157,0,78,0,233,0,167,0,222,0,62,0,55,0,47,0,177,0,75,0,101,0,36,0,108,0,9,0,32,0,0,0,140,0,68,0,110,0,42,0,20,0,118,0,0,0,7,0,239,0,252,0,140,0,0,0,67,0,81,0,19,0,232,0,0,0,137,0,190,0,208,0,147,0,206,0,36,0,29,0,50,0,0,0,96,0,207,0,17,0,205,0,246,0,147,0,222,0,150,0,0,0,115,0,251,0,0,0,44,0,0,0,74,0,52,0,255,0,49,0,47,0,189,0,121,0,84,0,75,0,0,0,154,0,203,0,246,0,92,0,8,0,115,0,103,0,121,0,13,0,0,0,147,0,176,0,210,0,27,0,173,0,227,0,0,0,59,0,172,0,0,0,146,0,0,0,53,0,119,0,200,0,118,0,104,0,0,0,0,0,220,0,0,0,174,0,42,0,0,0,14,0,212,0,184,0,0,0,78,0,0,0,143,0,235,0,0,0,137,0,2,0,22,0,162,0,0,0,27,0,130,0,111,0,102,0,142,0,142,0,189,0,0,0,79,0,178,0,54,0,150,0,0,0,0,0,221,0,143,0,135,0,117,0,131,0,182,0,39,0,0,0,0,0,0,0,0,0,0,0,104,0,45,0,177,0,0,0,1,0,31,0,163,0,6,0,30,0,147,0,46,0,254,0,201,0,46,0,237,0,194,0,158,0,175,0,0,0,73,0,0,0,0,0,0,0,219,0,81,0,161,0,120,0,166,0,51,0,122,0,249,0,0,0,0,0,195,0,110,0,163,0,0,0,233,0,0,0,255,0,0,0,97,0,189,0,0,0,57,0,147,0,96,0,171,0,1,0,198,0,107,0,3,0,0,0,68,0,0,0,241,0,62,0,115,0,0,0,116,0,192,0,0,0,110,0,203,0,43,0,0,0,38,0,0,0,252,0,9,0,218,0,98,0,48,0,187,0,200,0,115,0,126,0,172,0,162,0,0,0,221,0,235,0,115,0,0,0,200,0,160,0,66,0,35,0,5,0,0,0,208,0,121,0,193,0,59,0,81,0,117,0,0,0,0,0,244,0,204,0,213,0,50,0,121,0,93,0,233,0,0,0,227,0,0,0,223,0,160,0,216,0,0,0,126,0,105,0,169,0,0,0,66,0,40,0,0,0,137,0,175,0,28,0,0,0,178,0,70,0,0,0,162,0,112,0,118,0,242,0,211,0,39,0,185,0,237,0,0,0,38,0,57,0,42,0,31,0,108,0,0,0,70,0,0,0,212,0,133,0,125,0,224,0,59,0,99,0,40,0,145,0,216,0,133,0,172,0,191,0,190,0,210,0,87,0,85,0,0,0,162,0,37,0,162,0,104,0,44,0,181,0,195,0,154,0,0,0,0,0,69,0,244,0,113,0,180,0,127,0,215,0,224,0,0,0,5,0,35,0,247,0,167,0,0,0,0,0,0,0,0,0,32,0,192,0,13,0,64,0,135,0,132,0,238,0,180,0,190,0,96,0,0,0,107,0,239,0,200,0,16,0,111,0,103,0,0,0,30,0,95,0,76,0,0,0,0,0,229,0,80,0,158,0,192,0,27,0,98,0,27,0,196,0,238,0,179,0,249,0,0,0,182,0,199,0,0,0,89,0,88,0,129,0,207,0,38,0,0,0,18,0,211,0,165,0,127,0,0,0,112,0,4,0,150,0,97,0,0,0,71,0,150,0,145,0,116,0,255,0,77,0,93,0,0,0,232,0,65,0,242,0,0,0,8,0,97,0,138,0,0,0,42,0,154,0,187,0,62,0,125,0,196,0,102,0,35,0,21,0,214,0,0,0,43,0,58,0,49,0,0,0,216,0,247,0,0,0,6,0,252,0,86,0,0,0,230,0,142,0,156,0,195,0,111,0,201,0,61,0,59,0,48,0,0,0,22,0,131,0,0,0,89,0,143,0,0,0,253,0,18,0,168,0,107,0,31,0,80,0,1,0,151,0,98,0,0,0,182,0,38,0,135,0,129,0,91,0,19,0,67,0,181,0,65,0,226,0,172,0,191,0,87,0,94,0,0,0,136,0,196,0,0,0,4,0,0,0,224,0,8,0,217,0,129,0,0,0,205,0,225,0,183,0);
signal scenario_full  : scenario_type := (0,0,119,31,231,31,236,31,95,31,170,31,244,31,56,31,98,31,98,30,123,31,13,31,149,31,224,31,147,31,216,31,6,31,52,31,21,31,243,31,243,30,243,29,50,31,50,30,50,29,50,28,69,31,180,31,15,31,165,31,112,31,40,31,2,31,149,31,1,31,249,31,146,31,177,31,171,31,227,31,157,31,94,31,94,30,94,29,141,31,53,31,53,30,121,31,254,31,224,31,248,31,61,31,99,31,238,31,61,31,214,31,23,31,58,31,254,31,163,31,163,30,165,31,165,31,143,31,72,31,50,31,126,31,96,31,209,31,209,30,209,29,4,31,4,30,99,31,99,30,99,29,236,31,85,31,29,31,29,30,79,31,29,31,26,31,26,30,242,31,227,31,249,31,167,31,109,31,206,31,85,31,255,31,230,31,163,31,163,30,128,31,234,31,234,30,41,31,41,30,140,31,56,31,242,31,108,31,158,31,80,31,80,30,114,31,114,30,114,29,228,31,228,30,166,31,4,31,176,31,230,31,230,30,100,31,81,31,153,31,206,31,71,31,68,31,136,31,193,31,33,31,224,31,64,31,227,31,160,31,192,31,105,31,105,30,105,29,180,31,149,31,217,31,96,31,130,31,159,31,80,31,144,31,240,31,179,31,179,30,210,31,188,31,166,31,86,31,86,30,215,31,3,31,3,30,98,31,205,31,124,31,116,31,205,31,205,30,239,31,97,31,1,31,1,30,4,31,183,31,183,30,157,31,135,31,113,31,113,30,113,29,153,31,70,31,208,31,143,31,143,30,30,31,182,31,182,30,143,31,189,31,204,31,204,30,204,29,204,31,94,31,160,31,100,31,221,31,52,31,5,31,13,31,13,30,4,31,75,31,168,31,234,31,81,31,28,31,170,31,235,31,225,31,225,30,215,31,118,31,179,31,170,31,215,31,206,31,235,31,235,30,167,31,47,31,150,31,150,30,170,31,49,31,216,31,166,31,177,31,76,31,144,31,193,31,87,31,160,31,160,30,224,31,244,31,54,31,81,31,76,31,151,31,181,31,98,31,207,31,190,31,157,31,157,30,82,31,82,30,91,31,99,31,21,31,180,31,180,31,67,31,150,31,188,31,248,31,102,31,135,31,98,31,102,31,61,31,12,31,12,30,119,31,14,31,241,31,20,31,159,31,156,31,122,31,12,31,253,31,37,31,179,31,252,31,200,31,86,31,170,31,84,31,65,31,97,31,97,30,66,31,153,31,8,31,58,31,58,30,202,31,52,31,84,31,187,31,248,31,248,30,47,31,13,31,241,31,183,31,109,31,170,31,161,31,218,31,218,30,27,31,28,31,28,30,118,31,15,31,15,30,15,29,96,31,159,31,159,30,239,31,122,31,19,31,43,31,43,30,43,29,192,31,79,31,79,30,79,29,172,31,234,31,157,31,78,31,233,31,167,31,222,31,62,31,55,31,47,31,177,31,75,31,101,31,36,31,108,31,9,31,32,31,32,30,140,31,68,31,110,31,42,31,20,31,118,31,118,30,7,31,239,31,252,31,140,31,140,30,67,31,81,31,19,31,232,31,232,30,137,31,190,31,208,31,147,31,206,31,36,31,29,31,50,31,50,30,96,31,207,31,17,31,205,31,246,31,147,31,222,31,150,31,150,30,115,31,251,31,251,30,44,31,44,30,74,31,52,31,255,31,49,31,47,31,189,31,121,31,84,31,75,31,75,30,154,31,203,31,246,31,92,31,8,31,115,31,103,31,121,31,13,31,13,30,147,31,176,31,210,31,27,31,173,31,227,31,227,30,59,31,172,31,172,30,146,31,146,30,53,31,119,31,200,31,118,31,104,31,104,30,104,29,220,31,220,30,174,31,42,31,42,30,14,31,212,31,184,31,184,30,78,31,78,30,143,31,235,31,235,30,137,31,2,31,22,31,162,31,162,30,27,31,130,31,111,31,102,31,142,31,142,31,189,31,189,30,79,31,178,31,54,31,150,31,150,30,150,29,221,31,143,31,135,31,117,31,131,31,182,31,39,31,39,30,39,29,39,28,39,27,39,26,104,31,45,31,177,31,177,30,1,31,31,31,163,31,6,31,30,31,147,31,46,31,254,31,201,31,46,31,237,31,194,31,158,31,175,31,175,30,73,31,73,30,73,29,73,28,219,31,81,31,161,31,120,31,166,31,51,31,122,31,249,31,249,30,249,29,195,31,110,31,163,31,163,30,233,31,233,30,255,31,255,30,97,31,189,31,189,30,57,31,147,31,96,31,171,31,1,31,198,31,107,31,3,31,3,30,68,31,68,30,241,31,62,31,115,31,115,30,116,31,192,31,192,30,110,31,203,31,43,31,43,30,38,31,38,30,252,31,9,31,218,31,98,31,48,31,187,31,200,31,115,31,126,31,172,31,162,31,162,30,221,31,235,31,115,31,115,30,200,31,160,31,66,31,35,31,5,31,5,30,208,31,121,31,193,31,59,31,81,31,117,31,117,30,117,29,244,31,204,31,213,31,50,31,121,31,93,31,233,31,233,30,227,31,227,30,223,31,160,31,216,31,216,30,126,31,105,31,169,31,169,30,66,31,40,31,40,30,137,31,175,31,28,31,28,30,178,31,70,31,70,30,162,31,112,31,118,31,242,31,211,31,39,31,185,31,237,31,237,30,38,31,57,31,42,31,31,31,108,31,108,30,70,31,70,30,212,31,133,31,125,31,224,31,59,31,99,31,40,31,145,31,216,31,133,31,172,31,191,31,190,31,210,31,87,31,85,31,85,30,162,31,37,31,162,31,104,31,44,31,181,31,195,31,154,31,154,30,154,29,69,31,244,31,113,31,180,31,127,31,215,31,224,31,224,30,5,31,35,31,247,31,167,31,167,30,167,29,167,28,167,27,32,31,192,31,13,31,64,31,135,31,132,31,238,31,180,31,190,31,96,31,96,30,107,31,239,31,200,31,16,31,111,31,103,31,103,30,30,31,95,31,76,31,76,30,76,29,229,31,80,31,158,31,192,31,27,31,98,31,27,31,196,31,238,31,179,31,249,31,249,30,182,31,199,31,199,30,89,31,88,31,129,31,207,31,38,31,38,30,18,31,211,31,165,31,127,31,127,30,112,31,4,31,150,31,97,31,97,30,71,31,150,31,145,31,116,31,255,31,77,31,93,31,93,30,232,31,65,31,242,31,242,30,8,31,97,31,138,31,138,30,42,31,154,31,187,31,62,31,125,31,196,31,102,31,35,31,21,31,214,31,214,30,43,31,58,31,49,31,49,30,216,31,247,31,247,30,6,31,252,31,86,31,86,30,230,31,142,31,156,31,195,31,111,31,201,31,61,31,59,31,48,31,48,30,22,31,131,31,131,30,89,31,143,31,143,30,253,31,18,31,168,31,107,31,31,31,80,31,1,31,151,31,98,31,98,30,182,31,38,31,135,31,129,31,91,31,19,31,67,31,181,31,65,31,226,31,172,31,191,31,87,31,94,31,94,30,136,31,196,31,196,30,4,31,4,30,224,31,8,31,217,31,129,31,129,30,205,31,225,31,183,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
