-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 690;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (10,0,0,0,167,0,234,0,132,0,0,0,0,0,155,0,135,0,188,0,0,0,131,0,123,0,206,0,166,0,78,0,0,0,15,0,136,0,150,0,28,0,0,0,186,0,0,0,68,0,78,0,165,0,125,0,30,0,198,0,203,0,116,0,167,0,120,0,134,0,168,0,38,0,82,0,163,0,0,0,254,0,57,0,0,0,0,0,24,0,83,0,0,0,155,0,16,0,203,0,162,0,250,0,198,0,30,0,89,0,33,0,56,0,161,0,0,0,145,0,0,0,0,0,127,0,0,0,123,0,205,0,0,0,0,0,17,0,0,0,74,0,0,0,0,0,236,0,0,0,60,0,116,0,25,0,0,0,188,0,0,0,21,0,133,0,162,0,162,0,0,0,0,0,159,0,0,0,29,0,237,0,78,0,80,0,24,0,0,0,180,0,133,0,156,0,0,0,190,0,0,0,0,0,249,0,192,0,220,0,211,0,0,0,0,0,0,0,162,0,163,0,81,0,73,0,109,0,0,0,235,0,232,0,2,0,0,0,0,0,133,0,0,0,42,0,54,0,211,0,34,0,124,0,184,0,139,0,60,0,65,0,144,0,77,0,94,0,12,0,237,0,42,0,217,0,0,0,0,0,59,0,91,0,213,0,229,0,216,0,13,0,217,0,220,0,0,0,0,0,15,0,138,0,106,0,159,0,54,0,199,0,214,0,179,0,249,0,160,0,80,0,0,0,177,0,124,0,0,0,137,0,207,0,224,0,0,0,166,0,92,0,35,0,136,0,0,0,217,0,31,0,108,0,157,0,0,0,20,0,250,0,11,0,40,0,175,0,0,0,145,0,25,0,169,0,163,0,145,0,26,0,202,0,168,0,56,0,0,0,0,0,0,0,0,0,22,0,81,0,150,0,127,0,225,0,101,0,0,0,24,0,5,0,229,0,109,0,194,0,28,0,18,0,0,0,143,0,9,0,19,0,84,0,0,0,151,0,0,0,188,0,236,0,58,0,0,0,253,0,108,0,118,0,211,0,62,0,89,0,42,0,47,0,125,0,97,0,0,0,118,0,15,0,0,0,221,0,139,0,0,0,138,0,14,0,13,0,49,0,134,0,17,0,0,0,25,0,44,0,84,0,120,0,0,0,31,0,0,0,141,0,240,0,124,0,0,0,40,0,51,0,136,0,0,0,210,0,127,0,57,0,79,0,51,0,77,0,184,0,24,0,182,0,76,0,228,0,0,0,214,0,205,0,30,0,162,0,216,0,228,0,127,0,109,0,0,0,166,0,150,0,190,0,202,0,11,0,154,0,97,0,113,0,198,0,211,0,204,0,173,0,0,0,0,0,157,0,55,0,0,0,98,0,50,0,9,0,0,0,127,0,0,0,121,0,0,0,174,0,154,0,0,0,222,0,189,0,44,0,15,0,164,0,71,0,114,0,7,0,0,0,0,0,0,0,238,0,16,0,125,0,249,0,117,0,238,0,131,0,244,0,229,0,152,0,242,0,104,0,0,0,0,0,63,0,63,0,76,0,238,0,0,0,5,0,216,0,0,0,0,0,88,0,0,0,65,0,25,0,253,0,246,0,0,0,0,0,0,0,0,0,159,0,0,0,60,0,92,0,0,0,13,0,0,0,138,0,20,0,183,0,216,0,48,0,0,0,239,0,214,0,0,0,0,0,0,0,107,0,20,0,121,0,143,0,0,0,84,0,159,0,24,0,2,0,251,0,125,0,66,0,228,0,1,0,141,0,97,0,0,0,97,0,0,0,33,0,88,0,141,0,164,0,218,0,254,0,186,0,0,0,0,0,71,0,32,0,132,0,183,0,106,0,50,0,0,0,61,0,236,0,95,0,243,0,29,0,156,0,0,0,0,0,174,0,54,0,0,0,0,0,115,0,59,0,123,0,170,0,140,0,45,0,125,0,66,0,36,0,28,0,85,0,67,0,174,0,237,0,144,0,221,0,48,0,30,0,127,0,221,0,0,0,153,0,52,0,0,0,48,0,95,0,113,0,0,0,168,0,201,0,112,0,0,0,226,0,140,0,67,0,18,0,131,0,97,0,0,0,41,0,250,0,248,0,16,0,151,0,188,0,59,0,91,0,180,0,63,0,0,0,0,0,172,0,0,0,244,0,48,0,70,0,67,0,199,0,107,0,0,0,91,0,14,0,216,0,224,0,153,0,245,0,92,0,89,0,47,0,211,0,20,0,94,0,204,0,50,0,139,0,0,0,18,0,175,0,10,0,54,0,66,0,0,0,0,0,70,0,145,0,0,0,161,0,0,0,83,0,31,0,0,0,69,0,110,0,140,0,0,0,0,0,255,0,109,0,165,0,252,0,14,0,0,0,99,0,0,0,58,0,0,0,115,0,0,0,157,0,0,0,169,0,199,0,189,0,178,0,239,0,193,0,58,0,64,0,208,0,231,0,0,0,0,0,0,0,56,0,113,0,119,0,9,0,236,0,64,0,114,0,0,0,0,0,55,0,171,0,133,0,0,0,93,0,202,0,44,0,37,0,42,0,0,0,255,0,102,0,0,0,79,0,0,0,139,0,176,0,0,0,97,0,166,0,203,0,0,0,44,0,171,0,138,0,246,0,89,0,159,0,165,0,0,0,67,0,170,0,62,0,212,0,0,0,166,0,175,0,185,0,201,0,0,0,92,0,35,0,232,0,0,0,0,0,128,0,0,0,236,0,0,0,226,0,0,0,159,0,0,0,180,0,109,0,0,0,0,0,103,0,0,0,182,0,127,0,68,0,174,0,5,0,32,0,82,0,141,0,0,0,0,0,0,0,141,0,211,0,70,0,205,0,113,0,38,0,98,0,102,0,24,0,95,0,75,0,0,0,49,0,136,0,206,0,75,0,141,0,64,0,225,0,0,0,0,0,0,0,0,0,202,0,67,0,0,0,134,0,163,0,86,0,151,0,0,0,90,0,24,0,138,0,194,0,155,0,158,0,0,0,148,0,0,0,0,0,212,0,84,0,0,0,97,0,8,0,0,0,203,0,120,0,151,0,0,0,211,0,0,0,180,0,123,0,204,0,86,0,137,0,129,0,215,0,0,0,169,0,93,0,205,0,147,0,125,0,23,0);
signal scenario_full  : scenario_type := (10,31,10,30,167,31,234,31,132,31,132,30,132,29,155,31,135,31,188,31,188,30,131,31,123,31,206,31,166,31,78,31,78,30,15,31,136,31,150,31,28,31,28,30,186,31,186,30,68,31,78,31,165,31,125,31,30,31,198,31,203,31,116,31,167,31,120,31,134,31,168,31,38,31,82,31,163,31,163,30,254,31,57,31,57,30,57,29,24,31,83,31,83,30,155,31,16,31,203,31,162,31,250,31,198,31,30,31,89,31,33,31,56,31,161,31,161,30,145,31,145,30,145,29,127,31,127,30,123,31,205,31,205,30,205,29,17,31,17,30,74,31,74,30,74,29,236,31,236,30,60,31,116,31,25,31,25,30,188,31,188,30,21,31,133,31,162,31,162,31,162,30,162,29,159,31,159,30,29,31,237,31,78,31,80,31,24,31,24,30,180,31,133,31,156,31,156,30,190,31,190,30,190,29,249,31,192,31,220,31,211,31,211,30,211,29,211,28,162,31,163,31,81,31,73,31,109,31,109,30,235,31,232,31,2,31,2,30,2,29,133,31,133,30,42,31,54,31,211,31,34,31,124,31,184,31,139,31,60,31,65,31,144,31,77,31,94,31,12,31,237,31,42,31,217,31,217,30,217,29,59,31,91,31,213,31,229,31,216,31,13,31,217,31,220,31,220,30,220,29,15,31,138,31,106,31,159,31,54,31,199,31,214,31,179,31,249,31,160,31,80,31,80,30,177,31,124,31,124,30,137,31,207,31,224,31,224,30,166,31,92,31,35,31,136,31,136,30,217,31,31,31,108,31,157,31,157,30,20,31,250,31,11,31,40,31,175,31,175,30,145,31,25,31,169,31,163,31,145,31,26,31,202,31,168,31,56,31,56,30,56,29,56,28,56,27,22,31,81,31,150,31,127,31,225,31,101,31,101,30,24,31,5,31,229,31,109,31,194,31,28,31,18,31,18,30,143,31,9,31,19,31,84,31,84,30,151,31,151,30,188,31,236,31,58,31,58,30,253,31,108,31,118,31,211,31,62,31,89,31,42,31,47,31,125,31,97,31,97,30,118,31,15,31,15,30,221,31,139,31,139,30,138,31,14,31,13,31,49,31,134,31,17,31,17,30,25,31,44,31,84,31,120,31,120,30,31,31,31,30,141,31,240,31,124,31,124,30,40,31,51,31,136,31,136,30,210,31,127,31,57,31,79,31,51,31,77,31,184,31,24,31,182,31,76,31,228,31,228,30,214,31,205,31,30,31,162,31,216,31,228,31,127,31,109,31,109,30,166,31,150,31,190,31,202,31,11,31,154,31,97,31,113,31,198,31,211,31,204,31,173,31,173,30,173,29,157,31,55,31,55,30,98,31,50,31,9,31,9,30,127,31,127,30,121,31,121,30,174,31,154,31,154,30,222,31,189,31,44,31,15,31,164,31,71,31,114,31,7,31,7,30,7,29,7,28,238,31,16,31,125,31,249,31,117,31,238,31,131,31,244,31,229,31,152,31,242,31,104,31,104,30,104,29,63,31,63,31,76,31,238,31,238,30,5,31,216,31,216,30,216,29,88,31,88,30,65,31,25,31,253,31,246,31,246,30,246,29,246,28,246,27,159,31,159,30,60,31,92,31,92,30,13,31,13,30,138,31,20,31,183,31,216,31,48,31,48,30,239,31,214,31,214,30,214,29,214,28,107,31,20,31,121,31,143,31,143,30,84,31,159,31,24,31,2,31,251,31,125,31,66,31,228,31,1,31,141,31,97,31,97,30,97,31,97,30,33,31,88,31,141,31,164,31,218,31,254,31,186,31,186,30,186,29,71,31,32,31,132,31,183,31,106,31,50,31,50,30,61,31,236,31,95,31,243,31,29,31,156,31,156,30,156,29,174,31,54,31,54,30,54,29,115,31,59,31,123,31,170,31,140,31,45,31,125,31,66,31,36,31,28,31,85,31,67,31,174,31,237,31,144,31,221,31,48,31,30,31,127,31,221,31,221,30,153,31,52,31,52,30,48,31,95,31,113,31,113,30,168,31,201,31,112,31,112,30,226,31,140,31,67,31,18,31,131,31,97,31,97,30,41,31,250,31,248,31,16,31,151,31,188,31,59,31,91,31,180,31,63,31,63,30,63,29,172,31,172,30,244,31,48,31,70,31,67,31,199,31,107,31,107,30,91,31,14,31,216,31,224,31,153,31,245,31,92,31,89,31,47,31,211,31,20,31,94,31,204,31,50,31,139,31,139,30,18,31,175,31,10,31,54,31,66,31,66,30,66,29,70,31,145,31,145,30,161,31,161,30,83,31,31,31,31,30,69,31,110,31,140,31,140,30,140,29,255,31,109,31,165,31,252,31,14,31,14,30,99,31,99,30,58,31,58,30,115,31,115,30,157,31,157,30,169,31,199,31,189,31,178,31,239,31,193,31,58,31,64,31,208,31,231,31,231,30,231,29,231,28,56,31,113,31,119,31,9,31,236,31,64,31,114,31,114,30,114,29,55,31,171,31,133,31,133,30,93,31,202,31,44,31,37,31,42,31,42,30,255,31,102,31,102,30,79,31,79,30,139,31,176,31,176,30,97,31,166,31,203,31,203,30,44,31,171,31,138,31,246,31,89,31,159,31,165,31,165,30,67,31,170,31,62,31,212,31,212,30,166,31,175,31,185,31,201,31,201,30,92,31,35,31,232,31,232,30,232,29,128,31,128,30,236,31,236,30,226,31,226,30,159,31,159,30,180,31,109,31,109,30,109,29,103,31,103,30,182,31,127,31,68,31,174,31,5,31,32,31,82,31,141,31,141,30,141,29,141,28,141,31,211,31,70,31,205,31,113,31,38,31,98,31,102,31,24,31,95,31,75,31,75,30,49,31,136,31,206,31,75,31,141,31,64,31,225,31,225,30,225,29,225,28,225,27,202,31,67,31,67,30,134,31,163,31,86,31,151,31,151,30,90,31,24,31,138,31,194,31,155,31,158,31,158,30,148,31,148,30,148,29,212,31,84,31,84,30,97,31,8,31,8,30,203,31,120,31,151,31,151,30,211,31,211,30,180,31,123,31,204,31,86,31,137,31,129,31,215,31,215,30,169,31,93,31,205,31,147,31,125,31,23,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
