-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 606;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (134,0,68,0,244,0,51,0,110,0,79,0,161,0,242,0,226,0,0,0,94,0,25,0,0,0,0,0,14,0,86,0,0,0,0,0,66,0,0,0,148,0,0,0,199,0,255,0,151,0,0,0,0,0,16,0,0,0,197,0,97,0,39,0,18,0,39,0,100,0,51,0,219,0,46,0,112,0,0,0,162,0,190,0,122,0,44,0,0,0,90,0,49,0,0,0,0,0,54,0,195,0,0,0,105,0,210,0,88,0,97,0,110,0,175,0,0,0,108,0,185,0,253,0,182,0,40,0,77,0,64,0,70,0,73,0,0,0,127,0,160,0,246,0,106,0,0,0,63,0,9,0,11,0,157,0,23,0,231,0,44,0,0,0,112,0,182,0,94,0,0,0,0,0,104,0,184,0,0,0,126,0,213,0,0,0,62,0,166,0,0,0,163,0,0,0,0,0,26,0,57,0,107,0,123,0,141,0,239,0,33,0,230,0,125,0,158,0,44,0,95,0,133,0,194,0,114,0,240,0,3,0,254,0,153,0,127,0,0,0,207,0,230,0,0,0,199,0,20,0,181,0,235,0,188,0,131,0,209,0,249,0,78,0,0,0,38,0,70,0,0,0,0,0,53,0,182,0,202,0,222,0,181,0,185,0,223,0,161,0,103,0,0,0,191,0,30,0,0,0,100,0,66,0,1,0,209,0,172,0,0,0,85,0,128,0,0,0,26,0,251,0,0,0,168,0,193,0,0,0,147,0,118,0,15,0,125,0,82,0,0,0,208,0,0,0,176,0,103,0,79,0,83,0,0,0,45,0,0,0,255,0,189,0,0,0,129,0,176,0,142,0,173,0,0,0,20,0,205,0,203,0,12,0,151,0,71,0,0,0,0,0,0,0,0,0,167,0,139,0,28,0,221,0,102,0,94,0,102,0,111,0,32,0,68,0,86,0,220,0,72,0,0,0,215,0,57,0,123,0,226,0,0,0,190,0,128,0,239,0,0,0,171,0,218,0,0,0,0,0,133,0,221,0,7,0,185,0,252,0,247,0,28,0,74,0,122,0,0,0,36,0,83,0,202,0,156,0,38,0,10,0,24,0,69,0,0,0,217,0,98,0,79,0,222,0,194,0,203,0,18,0,91,0,0,0,39,0,49,0,64,0,88,0,15,0,133,0,0,0,52,0,182,0,144,0,150,0,218,0,238,0,246,0,228,0,249,0,193,0,200,0,32,0,161,0,77,0,0,0,79,0,168,0,248,0,0,0,0,0,234,0,0,0,91,0,219,0,194,0,27,0,170,0,0,0,148,0,51,0,110,0,239,0,131,0,0,0,9,0,22,0,0,0,96,0,187,0,22,0,179,0,228,0,21,0,0,0,242,0,171,0,46,0,185,0,90,0,187,0,70,0,0,0,198,0,247,0,195,0,100,0,32,0,32,0,161,0,67,0,75,0,14,0,130,0,211,0,32,0,9,0,75,0,27,0,215,0,104,0,0,0,0,0,108,0,17,0,37,0,146,0,253,0,170,0,0,0,97,0,241,0,0,0,236,0,226,0,0,0,0,0,2,0,0,0,235,0,0,0,124,0,166,0,80,0,54,0,136,0,59,0,160,0,0,0,7,0,86,0,171,0,219,0,152,0,222,0,215,0,123,0,189,0,0,0,247,0,170,0,151,0,207,0,244,0,142,0,0,0,0,0,188,0,201,0,146,0,42,0,236,0,117,0,101,0,76,0,225,0,66,0,0,0,143,0,192,0,205,0,194,0,0,0,13,0,135,0,66,0,2,0,135,0,30,0,0,0,129,0,221,0,161,0,163,0,223,0,166,0,216,0,187,0,163,0,72,0,0,0,123,0,154,0,95,0,141,0,38,0,239,0,115,0,0,0,0,0,201,0,161,0,12,0,0,0,0,0,221,0,76,0,167,0,253,0,244,0,189,0,0,0,0,0,3,0,184,0,185,0,0,0,84,0,6,0,93,0,52,0,70,0,0,0,6,0,0,0,75,0,230,0,0,0,227,0,53,0,165,0,0,0,155,0,50,0,0,0,32,0,179,0,73,0,0,0,68,0,0,0,218,0,176,0,0,0,116,0,30,0,10,0,26,0,235,0,0,0,142,0,18,0,235,0,177,0,158,0,235,0,86,0,136,0,49,0,24,0,45,0,0,0,244,0,100,0,54,0,198,0,147,0,131,0,192,0,0,0,144,0,204,0,189,0,233,0,0,0,244,0,14,0,74,0,228,0,210,0,247,0,226,0,99,0,194,0,9,0,28,0,211,0,98,0,104,0,80,0,152,0,23,0,99,0,248,0,85,0,87,0,33,0,0,0,249,0,0,0,0,0,30,0,0,0,196,0,90,0,233,0,226,0,0,0,53,0,168,0,126,0,128,0,0,0,65,0,0,0,56,0,201,0,86,0,130,0,77,0,35,0,121,0,152,0,59,0,0,0,86,0,117,0,208,0,0,0,76,0,66,0,23,0,121,0,223,0,168,0,235,0,119,0,127,0,208,0,0,0,141,0,15,0,24,0,220,0,106,0,71,0,243,0,155,0,0,0,95,0,158,0,178,0,114,0,138,0,0,0,0,0,2,0,65,0,250,0,40,0,22,0,147,0,160,0,0,0,186,0,113,0,36,0,0,0,44,0,69,0,0,0,0,0,60,0,123,0,157,0,97,0,0,0,136,0,116,0,234,0,202,0,95,0,181,0,111,0,194,0,148,0,184,0);
signal scenario_full  : scenario_type := (134,31,68,31,244,31,51,31,110,31,79,31,161,31,242,31,226,31,226,30,94,31,25,31,25,30,25,29,14,31,86,31,86,30,86,29,66,31,66,30,148,31,148,30,199,31,255,31,151,31,151,30,151,29,16,31,16,30,197,31,97,31,39,31,18,31,39,31,100,31,51,31,219,31,46,31,112,31,112,30,162,31,190,31,122,31,44,31,44,30,90,31,49,31,49,30,49,29,54,31,195,31,195,30,105,31,210,31,88,31,97,31,110,31,175,31,175,30,108,31,185,31,253,31,182,31,40,31,77,31,64,31,70,31,73,31,73,30,127,31,160,31,246,31,106,31,106,30,63,31,9,31,11,31,157,31,23,31,231,31,44,31,44,30,112,31,182,31,94,31,94,30,94,29,104,31,184,31,184,30,126,31,213,31,213,30,62,31,166,31,166,30,163,31,163,30,163,29,26,31,57,31,107,31,123,31,141,31,239,31,33,31,230,31,125,31,158,31,44,31,95,31,133,31,194,31,114,31,240,31,3,31,254,31,153,31,127,31,127,30,207,31,230,31,230,30,199,31,20,31,181,31,235,31,188,31,131,31,209,31,249,31,78,31,78,30,38,31,70,31,70,30,70,29,53,31,182,31,202,31,222,31,181,31,185,31,223,31,161,31,103,31,103,30,191,31,30,31,30,30,100,31,66,31,1,31,209,31,172,31,172,30,85,31,128,31,128,30,26,31,251,31,251,30,168,31,193,31,193,30,147,31,118,31,15,31,125,31,82,31,82,30,208,31,208,30,176,31,103,31,79,31,83,31,83,30,45,31,45,30,255,31,189,31,189,30,129,31,176,31,142,31,173,31,173,30,20,31,205,31,203,31,12,31,151,31,71,31,71,30,71,29,71,28,71,27,167,31,139,31,28,31,221,31,102,31,94,31,102,31,111,31,32,31,68,31,86,31,220,31,72,31,72,30,215,31,57,31,123,31,226,31,226,30,190,31,128,31,239,31,239,30,171,31,218,31,218,30,218,29,133,31,221,31,7,31,185,31,252,31,247,31,28,31,74,31,122,31,122,30,36,31,83,31,202,31,156,31,38,31,10,31,24,31,69,31,69,30,217,31,98,31,79,31,222,31,194,31,203,31,18,31,91,31,91,30,39,31,49,31,64,31,88,31,15,31,133,31,133,30,52,31,182,31,144,31,150,31,218,31,238,31,246,31,228,31,249,31,193,31,200,31,32,31,161,31,77,31,77,30,79,31,168,31,248,31,248,30,248,29,234,31,234,30,91,31,219,31,194,31,27,31,170,31,170,30,148,31,51,31,110,31,239,31,131,31,131,30,9,31,22,31,22,30,96,31,187,31,22,31,179,31,228,31,21,31,21,30,242,31,171,31,46,31,185,31,90,31,187,31,70,31,70,30,198,31,247,31,195,31,100,31,32,31,32,31,161,31,67,31,75,31,14,31,130,31,211,31,32,31,9,31,75,31,27,31,215,31,104,31,104,30,104,29,108,31,17,31,37,31,146,31,253,31,170,31,170,30,97,31,241,31,241,30,236,31,226,31,226,30,226,29,2,31,2,30,235,31,235,30,124,31,166,31,80,31,54,31,136,31,59,31,160,31,160,30,7,31,86,31,171,31,219,31,152,31,222,31,215,31,123,31,189,31,189,30,247,31,170,31,151,31,207,31,244,31,142,31,142,30,142,29,188,31,201,31,146,31,42,31,236,31,117,31,101,31,76,31,225,31,66,31,66,30,143,31,192,31,205,31,194,31,194,30,13,31,135,31,66,31,2,31,135,31,30,31,30,30,129,31,221,31,161,31,163,31,223,31,166,31,216,31,187,31,163,31,72,31,72,30,123,31,154,31,95,31,141,31,38,31,239,31,115,31,115,30,115,29,201,31,161,31,12,31,12,30,12,29,221,31,76,31,167,31,253,31,244,31,189,31,189,30,189,29,3,31,184,31,185,31,185,30,84,31,6,31,93,31,52,31,70,31,70,30,6,31,6,30,75,31,230,31,230,30,227,31,53,31,165,31,165,30,155,31,50,31,50,30,32,31,179,31,73,31,73,30,68,31,68,30,218,31,176,31,176,30,116,31,30,31,10,31,26,31,235,31,235,30,142,31,18,31,235,31,177,31,158,31,235,31,86,31,136,31,49,31,24,31,45,31,45,30,244,31,100,31,54,31,198,31,147,31,131,31,192,31,192,30,144,31,204,31,189,31,233,31,233,30,244,31,14,31,74,31,228,31,210,31,247,31,226,31,99,31,194,31,9,31,28,31,211,31,98,31,104,31,80,31,152,31,23,31,99,31,248,31,85,31,87,31,33,31,33,30,249,31,249,30,249,29,30,31,30,30,196,31,90,31,233,31,226,31,226,30,53,31,168,31,126,31,128,31,128,30,65,31,65,30,56,31,201,31,86,31,130,31,77,31,35,31,121,31,152,31,59,31,59,30,86,31,117,31,208,31,208,30,76,31,66,31,23,31,121,31,223,31,168,31,235,31,119,31,127,31,208,31,208,30,141,31,15,31,24,31,220,31,106,31,71,31,243,31,155,31,155,30,95,31,158,31,178,31,114,31,138,31,138,30,138,29,2,31,65,31,250,31,40,31,22,31,147,31,160,31,160,30,186,31,113,31,36,31,36,30,44,31,69,31,69,30,69,29,60,31,123,31,157,31,97,31,97,30,136,31,116,31,234,31,202,31,95,31,181,31,111,31,194,31,148,31,184,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
