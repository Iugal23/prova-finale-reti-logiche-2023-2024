-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 976;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (112,0,142,0,212,0,135,0,0,0,6,0,135,0,242,0,0,0,47,0,11,0,214,0,33,0,202,0,217,0,40,0,72,0,0,0,61,0,232,0,123,0,134,0,44,0,0,0,150,0,143,0,152,0,0,0,218,0,0,0,149,0,0,0,0,0,146,0,89,0,44,0,113,0,31,0,0,0,148,0,168,0,58,0,141,0,245,0,153,0,0,0,236,0,0,0,239,0,131,0,255,0,194,0,113,0,3,0,69,0,203,0,147,0,0,0,106,0,54,0,0,0,236,0,49,0,246,0,0,0,152,0,144,0,0,0,197,0,45,0,0,0,0,0,80,0,99,0,236,0,159,0,127,0,221,0,0,0,180,0,78,0,155,0,156,0,180,0,0,0,93,0,114,0,19,0,52,0,0,0,165,0,218,0,30,0,146,0,0,0,108,0,160,0,79,0,0,0,0,0,58,0,123,0,225,0,0,0,0,0,186,0,166,0,0,0,207,0,0,0,111,0,240,0,89,0,0,0,79,0,102,0,129,0,0,0,254,0,29,0,37,0,169,0,125,0,170,0,0,0,149,0,182,0,225,0,0,0,0,0,0,0,232,0,203,0,0,0,107,0,251,0,0,0,249,0,96,0,241,0,242,0,201,0,155,0,56,0,0,0,61,0,25,0,10,0,25,0,152,0,35,0,156,0,54,0,160,0,0,0,235,0,181,0,169,0,153,0,195,0,224,0,5,0,172,0,87,0,40,0,46,0,162,0,137,0,202,0,35,0,0,0,18,0,158,0,152,0,182,0,93,0,0,0,212,0,208,0,0,0,27,0,159,0,99,0,151,0,0,0,165,0,116,0,100,0,174,0,225,0,29,0,155,0,19,0,3,0,175,0,46,0,171,0,0,0,156,0,132,0,174,0,191,0,134,0,231,0,0,0,133,0,251,0,0,0,144,0,0,0,160,0,252,0,23,0,110,0,198,0,93,0,30,0,43,0,217,0,0,0,173,0,101,0,165,0,249,0,103,0,0,0,0,0,0,0,152,0,0,0,224,0,152,0,31,0,32,0,149,0,173,0,0,0,41,0,0,0,82,0,251,0,139,0,122,0,211,0,165,0,247,0,25,0,12,0,0,0,0,0,63,0,101,0,183,0,105,0,56,0,78,0,10,0,227,0,75,0,0,0,0,0,34,0,172,0,3,0,120,0,0,0,203,0,0,0,233,0,141,0,0,0,166,0,55,0,0,0,0,0,0,0,25,0,47,0,139,0,0,0,155,0,0,0,37,0,13,0,203,0,164,0,43,0,167,0,153,0,94,0,156,0,128,0,186,0,208,0,251,0,159,0,74,0,165,0,66,0,0,0,248,0,41,0,174,0,179,0,112,0,240,0,120,0,0,0,0,0,196,0,0,0,91,0,206,0,26,0,0,0,224,0,0,0,170,0,0,0,38,0,3,0,161,0,179,0,82,0,0,0,237,0,0,0,0,0,127,0,35,0,185,0,238,0,255,0,179,0,157,0,97,0,123,0,93,0,0,0,17,0,126,0,13,0,205,0,252,0,84,0,167,0,123,0,10,0,213,0,250,0,0,0,210,0,0,0,68,0,150,0,218,0,0,0,48,0,153,0,204,0,238,0,183,0,142,0,76,0,143,0,76,0,234,0,31,0,10,0,132,0,0,0,165,0,188,0,238,0,112,0,0,0,31,0,0,0,218,0,0,0,87,0,38,0,62,0,73,0,0,0,117,0,243,0,111,0,134,0,175,0,196,0,88,0,131,0,223,0,98,0,246,0,99,0,85,0,21,0,0,0,137,0,213,0,0,0,231,0,237,0,0,0,180,0,88,0,140,0,76,0,170,0,0,0,243,0,0,0,92,0,35,0,121,0,0,0,13,0,31,0,174,0,0,0,0,0,45,0,3,0,0,0,234,0,120,0,62,0,182,0,0,0,67,0,129,0,72,0,11,0,156,0,0,0,0,0,182,0,234,0,99,0,18,0,0,0,0,0,173,0,0,0,0,0,116,0,0,0,42,0,228,0,102,0,48,0,17,0,52,0,214,0,166,0,70,0,0,0,178,0,0,0,109,0,216,0,244,0,62,0,0,0,0,0,185,0,110,0,171,0,91,0,185,0,144,0,94,0,244,0,226,0,0,0,187,0,11,0,0,0,134,0,66,0,108,0,18,0,43,0,149,0,93,0,83,0,0,0,9,0,196,0,249,0,87,0,71,0,57,0,45,0,79,0,31,0,2,0,0,0,0,0,0,0,0,0,0,0,125,0,86,0,141,0,8,0,227,0,0,0,60,0,228,0,0,0,21,0,17,0,0,0,112,0,0,0,0,0,74,0,111,0,16,0,143,0,253,0,191,0,0,0,0,0,211,0,223,0,5,0,185,0,212,0,33,0,115,0,33,0,0,0,234,0,175,0,0,0,189,0,135,0,114,0,0,0,124,0,0,0,0,0,0,0,123,0,0,0,117,0,164,0,121,0,196,0,0,0,126,0,23,0,54,0,36,0,0,0,142,0,248,0,186,0,18,0,157,0,0,0,3,0,0,0,91,0,67,0,33,0,0,0,0,0,249,0,126,0,60,0,118,0,20,0,72,0,0,0,106,0,63,0,0,0,214,0,254,0,70,0,212,0,11,0,51,0,0,0,58,0,95,0,215,0,0,0,155,0,6,0,41,0,94,0,173,0,39,0,39,0,77,0,182,0,112,0,50,0,242,0,3,0,0,0,123,0,161,0,75,0,74,0,251,0,74,0,29,0,103,0,255,0,235,0,170,0,43,0,31,0,35,0,0,0,183,0,239,0,188,0,38,0,51,0,236,0,65,0,82,0,0,0,213,0,230,0,0,0,14,0,0,0,187,0,157,0,149,0,0,0,143,0,108,0,60,0,182,0,211,0,0,0,26,0,59,0,72,0,0,0,88,0,91,0,121,0,179,0,11,0,239,0,245,0,185,0,206,0,192,0,250,0,78,0,202,0,21,0,0,0,6,0,27,0,184,0,73,0,22,0,139,0,185,0,101,0,216,0,93,0,247,0,17,0,46,0,2,0,175,0,81,0,0,0,235,0,181,0,79,0,32,0,252,0,232,0,0,0,0,0,243,0,60,0,22,0,0,0,234,0,73,0,252,0,92,0,120,0,247,0,233,0,165,0,230,0,0,0,255,0,66,0,73,0,139,0,0,0,17,0,119,0,85,0,10,0,40,0,188,0,202,0,250,0,0,0,0,0,0,0,236,0,0,0,251,0,22,0,210,0,241,0,149,0,0,0,97,0,5,0,8,0,239,0,240,0,137,0,180,0,0,0,168,0,94,0,36,0,53,0,0,0,158,0,93,0,128,0,0,0,0,0,120,0,46,0,50,0,0,0,237,0,0,0,233,0,77,0,23,0,0,0,168,0,0,0,1,0,0,0,81,0,193,0,90,0,49,0,89,0,0,0,44,0,215,0,149,0,91,0,147,0,123,0,80,0,187,0,0,0,22,0,213,0,224,0,0,0,152,0,147,0,0,0,190,0,111,0,170,0,156,0,0,0,157,0,0,0,50,0,209,0,0,0,230,0,18,0,158,0,81,0,26,0,115,0,143,0,235,0,0,0,112,0,104,0,133,0,63,0,149,0,0,0,81,0,45,0,0,0,219,0,0,0,74,0,152,0,0,0,18,0,41,0,180,0,198,0,0,0,87,0,112,0,221,0,199,0,108,0,234,0,120,0,202,0,178,0,249,0,214,0,172,0,195,0,119,0,0,0,0,0,22,0,225,0,151,0,206,0,78,0,212,0,14,0,192,0,244,0,189,0,0,0,209,0,241,0,221,0,0,0,0,0,151,0,171,0,36,0,18,0,143,0,166,0,65,0,0,0,193,0,3,0,0,0,0,0,0,0,24,0,13,0,128,0,163,0,94,0,104,0,71,0,0,0,102,0,0,0,220,0,168,0,0,0,10,0,0,0,152,0,0,0,33,0,0,0,0,0,0,0,184,0,236,0,64,0,105,0,195,0,105,0,86,0,0,0,158,0,0,0,182,0,224,0,174,0,0,0,80,0,221,0,206,0,18,0,209,0,63,0,190,0,126,0,154,0,79,0,113,0,0,0,0,0,185,0,0,0,144,0,206,0,165,0,199,0,245,0,0,0,191,0,22,0,27,0,166,0,0,0,0,0,150,0,205,0,15,0,0,0,211,0,35,0,65,0,222,0,210,0,227,0,0,0,203,0,108,0,118,0,158,0,42,0,253,0,120,0,34,0,217,0,233,0,16,0,113,0,154,0,177,0,0,0,175,0,223,0,5,0,35,0,0,0,153,0,80,0,44,0,91,0,183,0,179,0,0,0,60,0,0,0,52,0,0,0,0,0,148,0,180,0,102,0,199,0,107,0,211,0);
signal scenario_full  : scenario_type := (112,31,142,31,212,31,135,31,135,30,6,31,135,31,242,31,242,30,47,31,11,31,214,31,33,31,202,31,217,31,40,31,72,31,72,30,61,31,232,31,123,31,134,31,44,31,44,30,150,31,143,31,152,31,152,30,218,31,218,30,149,31,149,30,149,29,146,31,89,31,44,31,113,31,31,31,31,30,148,31,168,31,58,31,141,31,245,31,153,31,153,30,236,31,236,30,239,31,131,31,255,31,194,31,113,31,3,31,69,31,203,31,147,31,147,30,106,31,54,31,54,30,236,31,49,31,246,31,246,30,152,31,144,31,144,30,197,31,45,31,45,30,45,29,80,31,99,31,236,31,159,31,127,31,221,31,221,30,180,31,78,31,155,31,156,31,180,31,180,30,93,31,114,31,19,31,52,31,52,30,165,31,218,31,30,31,146,31,146,30,108,31,160,31,79,31,79,30,79,29,58,31,123,31,225,31,225,30,225,29,186,31,166,31,166,30,207,31,207,30,111,31,240,31,89,31,89,30,79,31,102,31,129,31,129,30,254,31,29,31,37,31,169,31,125,31,170,31,170,30,149,31,182,31,225,31,225,30,225,29,225,28,232,31,203,31,203,30,107,31,251,31,251,30,249,31,96,31,241,31,242,31,201,31,155,31,56,31,56,30,61,31,25,31,10,31,25,31,152,31,35,31,156,31,54,31,160,31,160,30,235,31,181,31,169,31,153,31,195,31,224,31,5,31,172,31,87,31,40,31,46,31,162,31,137,31,202,31,35,31,35,30,18,31,158,31,152,31,182,31,93,31,93,30,212,31,208,31,208,30,27,31,159,31,99,31,151,31,151,30,165,31,116,31,100,31,174,31,225,31,29,31,155,31,19,31,3,31,175,31,46,31,171,31,171,30,156,31,132,31,174,31,191,31,134,31,231,31,231,30,133,31,251,31,251,30,144,31,144,30,160,31,252,31,23,31,110,31,198,31,93,31,30,31,43,31,217,31,217,30,173,31,101,31,165,31,249,31,103,31,103,30,103,29,103,28,152,31,152,30,224,31,152,31,31,31,32,31,149,31,173,31,173,30,41,31,41,30,82,31,251,31,139,31,122,31,211,31,165,31,247,31,25,31,12,31,12,30,12,29,63,31,101,31,183,31,105,31,56,31,78,31,10,31,227,31,75,31,75,30,75,29,34,31,172,31,3,31,120,31,120,30,203,31,203,30,233,31,141,31,141,30,166,31,55,31,55,30,55,29,55,28,25,31,47,31,139,31,139,30,155,31,155,30,37,31,13,31,203,31,164,31,43,31,167,31,153,31,94,31,156,31,128,31,186,31,208,31,251,31,159,31,74,31,165,31,66,31,66,30,248,31,41,31,174,31,179,31,112,31,240,31,120,31,120,30,120,29,196,31,196,30,91,31,206,31,26,31,26,30,224,31,224,30,170,31,170,30,38,31,3,31,161,31,179,31,82,31,82,30,237,31,237,30,237,29,127,31,35,31,185,31,238,31,255,31,179,31,157,31,97,31,123,31,93,31,93,30,17,31,126,31,13,31,205,31,252,31,84,31,167,31,123,31,10,31,213,31,250,31,250,30,210,31,210,30,68,31,150,31,218,31,218,30,48,31,153,31,204,31,238,31,183,31,142,31,76,31,143,31,76,31,234,31,31,31,10,31,132,31,132,30,165,31,188,31,238,31,112,31,112,30,31,31,31,30,218,31,218,30,87,31,38,31,62,31,73,31,73,30,117,31,243,31,111,31,134,31,175,31,196,31,88,31,131,31,223,31,98,31,246,31,99,31,85,31,21,31,21,30,137,31,213,31,213,30,231,31,237,31,237,30,180,31,88,31,140,31,76,31,170,31,170,30,243,31,243,30,92,31,35,31,121,31,121,30,13,31,31,31,174,31,174,30,174,29,45,31,3,31,3,30,234,31,120,31,62,31,182,31,182,30,67,31,129,31,72,31,11,31,156,31,156,30,156,29,182,31,234,31,99,31,18,31,18,30,18,29,173,31,173,30,173,29,116,31,116,30,42,31,228,31,102,31,48,31,17,31,52,31,214,31,166,31,70,31,70,30,178,31,178,30,109,31,216,31,244,31,62,31,62,30,62,29,185,31,110,31,171,31,91,31,185,31,144,31,94,31,244,31,226,31,226,30,187,31,11,31,11,30,134,31,66,31,108,31,18,31,43,31,149,31,93,31,83,31,83,30,9,31,196,31,249,31,87,31,71,31,57,31,45,31,79,31,31,31,2,31,2,30,2,29,2,28,2,27,2,26,125,31,86,31,141,31,8,31,227,31,227,30,60,31,228,31,228,30,21,31,17,31,17,30,112,31,112,30,112,29,74,31,111,31,16,31,143,31,253,31,191,31,191,30,191,29,211,31,223,31,5,31,185,31,212,31,33,31,115,31,33,31,33,30,234,31,175,31,175,30,189,31,135,31,114,31,114,30,124,31,124,30,124,29,124,28,123,31,123,30,117,31,164,31,121,31,196,31,196,30,126,31,23,31,54,31,36,31,36,30,142,31,248,31,186,31,18,31,157,31,157,30,3,31,3,30,91,31,67,31,33,31,33,30,33,29,249,31,126,31,60,31,118,31,20,31,72,31,72,30,106,31,63,31,63,30,214,31,254,31,70,31,212,31,11,31,51,31,51,30,58,31,95,31,215,31,215,30,155,31,6,31,41,31,94,31,173,31,39,31,39,31,77,31,182,31,112,31,50,31,242,31,3,31,3,30,123,31,161,31,75,31,74,31,251,31,74,31,29,31,103,31,255,31,235,31,170,31,43,31,31,31,35,31,35,30,183,31,239,31,188,31,38,31,51,31,236,31,65,31,82,31,82,30,213,31,230,31,230,30,14,31,14,30,187,31,157,31,149,31,149,30,143,31,108,31,60,31,182,31,211,31,211,30,26,31,59,31,72,31,72,30,88,31,91,31,121,31,179,31,11,31,239,31,245,31,185,31,206,31,192,31,250,31,78,31,202,31,21,31,21,30,6,31,27,31,184,31,73,31,22,31,139,31,185,31,101,31,216,31,93,31,247,31,17,31,46,31,2,31,175,31,81,31,81,30,235,31,181,31,79,31,32,31,252,31,232,31,232,30,232,29,243,31,60,31,22,31,22,30,234,31,73,31,252,31,92,31,120,31,247,31,233,31,165,31,230,31,230,30,255,31,66,31,73,31,139,31,139,30,17,31,119,31,85,31,10,31,40,31,188,31,202,31,250,31,250,30,250,29,250,28,236,31,236,30,251,31,22,31,210,31,241,31,149,31,149,30,97,31,5,31,8,31,239,31,240,31,137,31,180,31,180,30,168,31,94,31,36,31,53,31,53,30,158,31,93,31,128,31,128,30,128,29,120,31,46,31,50,31,50,30,237,31,237,30,233,31,77,31,23,31,23,30,168,31,168,30,1,31,1,30,81,31,193,31,90,31,49,31,89,31,89,30,44,31,215,31,149,31,91,31,147,31,123,31,80,31,187,31,187,30,22,31,213,31,224,31,224,30,152,31,147,31,147,30,190,31,111,31,170,31,156,31,156,30,157,31,157,30,50,31,209,31,209,30,230,31,18,31,158,31,81,31,26,31,115,31,143,31,235,31,235,30,112,31,104,31,133,31,63,31,149,31,149,30,81,31,45,31,45,30,219,31,219,30,74,31,152,31,152,30,18,31,41,31,180,31,198,31,198,30,87,31,112,31,221,31,199,31,108,31,234,31,120,31,202,31,178,31,249,31,214,31,172,31,195,31,119,31,119,30,119,29,22,31,225,31,151,31,206,31,78,31,212,31,14,31,192,31,244,31,189,31,189,30,209,31,241,31,221,31,221,30,221,29,151,31,171,31,36,31,18,31,143,31,166,31,65,31,65,30,193,31,3,31,3,30,3,29,3,28,24,31,13,31,128,31,163,31,94,31,104,31,71,31,71,30,102,31,102,30,220,31,168,31,168,30,10,31,10,30,152,31,152,30,33,31,33,30,33,29,33,28,184,31,236,31,64,31,105,31,195,31,105,31,86,31,86,30,158,31,158,30,182,31,224,31,174,31,174,30,80,31,221,31,206,31,18,31,209,31,63,31,190,31,126,31,154,31,79,31,113,31,113,30,113,29,185,31,185,30,144,31,206,31,165,31,199,31,245,31,245,30,191,31,22,31,27,31,166,31,166,30,166,29,150,31,205,31,15,31,15,30,211,31,35,31,65,31,222,31,210,31,227,31,227,30,203,31,108,31,118,31,158,31,42,31,253,31,120,31,34,31,217,31,233,31,16,31,113,31,154,31,177,31,177,30,175,31,223,31,5,31,35,31,35,30,153,31,80,31,44,31,91,31,183,31,179,31,179,30,60,31,60,30,52,31,52,30,52,29,148,31,180,31,102,31,199,31,107,31,211,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
