-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 420;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,200,0,255,0,42,0,94,0,92,0,245,0,118,0,121,0,184,0,0,0,0,0,18,0,197,0,34,0,216,0,80,0,15,0,0,0,21,0,194,0,66,0,195,0,33,0,0,0,65,0,181,0,0,0,76,0,100,0,219,0,101,0,12,0,141,0,167,0,136,0,175,0,137,0,85,0,223,0,0,0,121,0,216,0,142,0,50,0,51,0,219,0,1,0,240,0,248,0,160,0,96,0,40,0,8,0,0,0,13,0,146,0,244,0,0,0,143,0,231,0,74,0,118,0,29,0,68,0,74,0,104,0,155,0,5,0,85,0,0,0,126,0,95,0,89,0,208,0,0,0,213,0,236,0,0,0,183,0,81,0,135,0,65,0,225,0,184,0,0,0,252,0,229,0,220,0,158,0,0,0,7,0,101,0,0,0,211,0,162,0,54,0,20,0,161,0,197,0,180,0,187,0,0,0,36,0,0,0,29,0,167,0,11,0,246,0,11,0,19,0,0,0,26,0,0,0,147,0,101,0,55,0,23,0,83,0,112,0,0,0,0,0,0,0,47,0,51,0,195,0,44,0,0,0,84,0,162,0,0,0,0,0,104,0,54,0,167,0,0,0,89,0,37,0,0,0,0,0,214,0,120,0,92,0,130,0,0,0,178,0,199,0,0,0,243,0,151,0,187,0,123,0,70,0,37,0,177,0,78,0,113,0,76,0,0,0,59,0,0,0,172,0,223,0,113,0,36,0,109,0,0,0,236,0,27,0,75,0,0,0,0,0,36,0,49,0,42,0,92,0,0,0,90,0,124,0,47,0,114,0,141,0,106,0,231,0,0,0,165,0,245,0,222,0,233,0,0,0,231,0,158,0,162,0,201,0,146,0,195,0,183,0,206,0,17,0,254,0,17,0,234,0,200,0,48,0,127,0,190,0,238,0,173,0,0,0,0,0,42,0,220,0,242,0,106,0,201,0,43,0,71,0,238,0,0,0,0,0,141,0,248,0,239,0,60,0,125,0,11,0,176,0,210,0,59,0,158,0,0,0,54,0,46,0,255,0,186,0,166,0,130,0,200,0,215,0,151,0,90,0,43,0,0,0,65,0,0,0,137,0,230,0,220,0,183,0,253,0,0,0,215,0,25,0,43,0,224,0,0,0,197,0,0,0,0,0,173,0,251,0,0,0,0,0,0,0,200,0,30,0,58,0,36,0,148,0,135,0,96,0,249,0,0,0,3,0,0,0,171,0,128,0,226,0,246,0,35,0,127,0,68,0,36,0,1,0,212,0,62,0,139,0,102,0,43,0,0,0,127,0,0,0,118,0,0,0,103,0,0,0,0,0,135,0,106,0,224,0,230,0,35,0,159,0,147,0,121,0,238,0,245,0,64,0,152,0,183,0,92,0,121,0,209,0,141,0,0,0,166,0,5,0,120,0,118,0,0,0,0,0,184,0,94,0,0,0,210,0,128,0,143,0,0,0,0,0,8,0,205,0,21,0,211,0,92,0,0,0,222,0,75,0,11,0,0,0,185,0,101,0,121,0,0,0,175,0,107,0,46,0,7,0,104,0,17,0,230,0,0,0,211,0,0,0,0,0,115,0,170,0,0,0,219,0,23,0,255,0,139,0,0,0,249,0,181,0,0,0,123,0,0,0,0,0,58,0,178,0,0,0,0,0,218,0,206,0,233,0,107,0,223,0,186,0,0,0,182,0,236,0,14,0,165,0,245,0,86,0,91,0,0,0,74,0,153,0,84,0,228,0,254,0,0,0,70,0,152,0,155,0,185,0,61,0,0,0,0,0,217,0,173,0,33,0,72,0,0,0,0,0,112,0,0,0,105,0,0,0,169,0,67,0,33,0,249,0,22,0,103,0,91,0,112,0,185,0,136,0);
signal scenario_full  : scenario_type := (0,0,200,31,255,31,42,31,94,31,92,31,245,31,118,31,121,31,184,31,184,30,184,29,18,31,197,31,34,31,216,31,80,31,15,31,15,30,21,31,194,31,66,31,195,31,33,31,33,30,65,31,181,31,181,30,76,31,100,31,219,31,101,31,12,31,141,31,167,31,136,31,175,31,137,31,85,31,223,31,223,30,121,31,216,31,142,31,50,31,51,31,219,31,1,31,240,31,248,31,160,31,96,31,40,31,8,31,8,30,13,31,146,31,244,31,244,30,143,31,231,31,74,31,118,31,29,31,68,31,74,31,104,31,155,31,5,31,85,31,85,30,126,31,95,31,89,31,208,31,208,30,213,31,236,31,236,30,183,31,81,31,135,31,65,31,225,31,184,31,184,30,252,31,229,31,220,31,158,31,158,30,7,31,101,31,101,30,211,31,162,31,54,31,20,31,161,31,197,31,180,31,187,31,187,30,36,31,36,30,29,31,167,31,11,31,246,31,11,31,19,31,19,30,26,31,26,30,147,31,101,31,55,31,23,31,83,31,112,31,112,30,112,29,112,28,47,31,51,31,195,31,44,31,44,30,84,31,162,31,162,30,162,29,104,31,54,31,167,31,167,30,89,31,37,31,37,30,37,29,214,31,120,31,92,31,130,31,130,30,178,31,199,31,199,30,243,31,151,31,187,31,123,31,70,31,37,31,177,31,78,31,113,31,76,31,76,30,59,31,59,30,172,31,223,31,113,31,36,31,109,31,109,30,236,31,27,31,75,31,75,30,75,29,36,31,49,31,42,31,92,31,92,30,90,31,124,31,47,31,114,31,141,31,106,31,231,31,231,30,165,31,245,31,222,31,233,31,233,30,231,31,158,31,162,31,201,31,146,31,195,31,183,31,206,31,17,31,254,31,17,31,234,31,200,31,48,31,127,31,190,31,238,31,173,31,173,30,173,29,42,31,220,31,242,31,106,31,201,31,43,31,71,31,238,31,238,30,238,29,141,31,248,31,239,31,60,31,125,31,11,31,176,31,210,31,59,31,158,31,158,30,54,31,46,31,255,31,186,31,166,31,130,31,200,31,215,31,151,31,90,31,43,31,43,30,65,31,65,30,137,31,230,31,220,31,183,31,253,31,253,30,215,31,25,31,43,31,224,31,224,30,197,31,197,30,197,29,173,31,251,31,251,30,251,29,251,28,200,31,30,31,58,31,36,31,148,31,135,31,96,31,249,31,249,30,3,31,3,30,171,31,128,31,226,31,246,31,35,31,127,31,68,31,36,31,1,31,212,31,62,31,139,31,102,31,43,31,43,30,127,31,127,30,118,31,118,30,103,31,103,30,103,29,135,31,106,31,224,31,230,31,35,31,159,31,147,31,121,31,238,31,245,31,64,31,152,31,183,31,92,31,121,31,209,31,141,31,141,30,166,31,5,31,120,31,118,31,118,30,118,29,184,31,94,31,94,30,210,31,128,31,143,31,143,30,143,29,8,31,205,31,21,31,211,31,92,31,92,30,222,31,75,31,11,31,11,30,185,31,101,31,121,31,121,30,175,31,107,31,46,31,7,31,104,31,17,31,230,31,230,30,211,31,211,30,211,29,115,31,170,31,170,30,219,31,23,31,255,31,139,31,139,30,249,31,181,31,181,30,123,31,123,30,123,29,58,31,178,31,178,30,178,29,218,31,206,31,233,31,107,31,223,31,186,31,186,30,182,31,236,31,14,31,165,31,245,31,86,31,91,31,91,30,74,31,153,31,84,31,228,31,254,31,254,30,70,31,152,31,155,31,185,31,61,31,61,30,61,29,217,31,173,31,33,31,72,31,72,30,72,29,112,31,112,30,105,31,105,30,169,31,67,31,33,31,249,31,22,31,103,31,91,31,112,31,185,31,136,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
