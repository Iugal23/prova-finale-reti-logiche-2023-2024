-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 365;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (227,0,207,0,180,0,0,0,229,0,0,0,101,0,111,0,167,0,121,0,0,0,173,0,0,0,156,0,99,0,125,0,153,0,2,0,200,0,237,0,50,0,0,0,225,0,152,0,137,0,0,0,159,0,222,0,190,0,110,0,0,0,164,0,244,0,200,0,255,0,0,0,177,0,247,0,0,0,123,0,218,0,18,0,120,0,181,0,150,0,145,0,203,0,0,0,89,0,209,0,229,0,0,0,0,0,0,0,67,0,223,0,107,0,0,0,0,0,8,0,202,0,45,0,130,0,226,0,26,0,97,0,221,0,71,0,64,0,0,0,224,0,67,0,70,0,81,0,181,0,247,0,33,0,207,0,163,0,203,0,0,0,131,0,0,0,0,0,141,0,151,0,0,0,52,0,152,0,1,0,0,0,21,0,0,0,136,0,34,0,0,0,84,0,43,0,47,0,143,0,64,0,61,0,170,0,220,0,202,0,0,0,30,0,157,0,240,0,70,0,180,0,52,0,100,0,3,0,0,0,93,0,73,0,30,0,190,0,234,0,8,0,124,0,0,0,109,0,0,0,237,0,207,0,98,0,30,0,0,0,0,0,164,0,248,0,124,0,130,0,144,0,0,0,235,0,0,0,48,0,112,0,219,0,124,0,131,0,0,0,152,0,0,0,207,0,0,0,81,0,146,0,0,0,28,0,230,0,27,0,77,0,0,0,47,0,221,0,35,0,21,0,0,0,143,0,98,0,114,0,0,0,0,0,0,0,60,0,197,0,105,0,0,0,63,0,201,0,0,0,151,0,121,0,48,0,66,0,37,0,0,0,235,0,89,0,219,0,255,0,119,0,206,0,35,0,111,0,23,0,241,0,254,0,39,0,237,0,48,0,252,0,213,0,85,0,11,0,232,0,51,0,3,0,197,0,0,0,109,0,251,0,164,0,181,0,240,0,0,0,141,0,15,0,144,0,59,0,116,0,0,0,105,0,131,0,163,0,0,0,59,0,54,0,45,0,123,0,148,0,221,0,176,0,116,0,254,0,40,0,223,0,214,0,0,0,146,0,43,0,0,0,139,0,252,0,225,0,13,0,26,0,45,0,115,0,8,0,34,0,36,0,0,0,91,0,78,0,144,0,249,0,62,0,0,0,227,0,0,0,152,0,167,0,107,0,13,0,215,0,237,0,137,0,200,0,0,0,202,0,0,0,199,0,18,0,78,0,0,0,238,0,0,0,211,0,36,0,215,0,0,0,0,0,226,0,14,0,235,0,0,0,248,0,0,0,23,0,207,0,35,0,176,0,11,0,217,0,0,0,30,0,92,0,107,0,97,0,146,0,161,0,142,0,181,0,0,0,189,0,138,0,197,0,145,0,143,0,179,0,166,0,0,0,65,0,250,0,137,0,99,0,48,0,150,0,81,0,89,0,67,0,221,0,245,0,186,0,126,0,142,0,0,0,11,0,173,0,227,0,47,0,201,0,245,0,0,0,62,0,249,0,94,0,13,0,114,0,199,0,0,0,35,0,161,0,218,0,178,0,136,0,75,0,102,0,0,0,0,0,196,0,0,0,230,0,240,0,122,0,66,0,11,0,4,0,117,0,232,0,153,0,0,0,91,0,56,0,180,0,0,0,58,0,137,0,0,0,93,0);
signal scenario_full  : scenario_type := (227,31,207,31,180,31,180,30,229,31,229,30,101,31,111,31,167,31,121,31,121,30,173,31,173,30,156,31,99,31,125,31,153,31,2,31,200,31,237,31,50,31,50,30,225,31,152,31,137,31,137,30,159,31,222,31,190,31,110,31,110,30,164,31,244,31,200,31,255,31,255,30,177,31,247,31,247,30,123,31,218,31,18,31,120,31,181,31,150,31,145,31,203,31,203,30,89,31,209,31,229,31,229,30,229,29,229,28,67,31,223,31,107,31,107,30,107,29,8,31,202,31,45,31,130,31,226,31,26,31,97,31,221,31,71,31,64,31,64,30,224,31,67,31,70,31,81,31,181,31,247,31,33,31,207,31,163,31,203,31,203,30,131,31,131,30,131,29,141,31,151,31,151,30,52,31,152,31,1,31,1,30,21,31,21,30,136,31,34,31,34,30,84,31,43,31,47,31,143,31,64,31,61,31,170,31,220,31,202,31,202,30,30,31,157,31,240,31,70,31,180,31,52,31,100,31,3,31,3,30,93,31,73,31,30,31,190,31,234,31,8,31,124,31,124,30,109,31,109,30,237,31,207,31,98,31,30,31,30,30,30,29,164,31,248,31,124,31,130,31,144,31,144,30,235,31,235,30,48,31,112,31,219,31,124,31,131,31,131,30,152,31,152,30,207,31,207,30,81,31,146,31,146,30,28,31,230,31,27,31,77,31,77,30,47,31,221,31,35,31,21,31,21,30,143,31,98,31,114,31,114,30,114,29,114,28,60,31,197,31,105,31,105,30,63,31,201,31,201,30,151,31,121,31,48,31,66,31,37,31,37,30,235,31,89,31,219,31,255,31,119,31,206,31,35,31,111,31,23,31,241,31,254,31,39,31,237,31,48,31,252,31,213,31,85,31,11,31,232,31,51,31,3,31,197,31,197,30,109,31,251,31,164,31,181,31,240,31,240,30,141,31,15,31,144,31,59,31,116,31,116,30,105,31,131,31,163,31,163,30,59,31,54,31,45,31,123,31,148,31,221,31,176,31,116,31,254,31,40,31,223,31,214,31,214,30,146,31,43,31,43,30,139,31,252,31,225,31,13,31,26,31,45,31,115,31,8,31,34,31,36,31,36,30,91,31,78,31,144,31,249,31,62,31,62,30,227,31,227,30,152,31,167,31,107,31,13,31,215,31,237,31,137,31,200,31,200,30,202,31,202,30,199,31,18,31,78,31,78,30,238,31,238,30,211,31,36,31,215,31,215,30,215,29,226,31,14,31,235,31,235,30,248,31,248,30,23,31,207,31,35,31,176,31,11,31,217,31,217,30,30,31,92,31,107,31,97,31,146,31,161,31,142,31,181,31,181,30,189,31,138,31,197,31,145,31,143,31,179,31,166,31,166,30,65,31,250,31,137,31,99,31,48,31,150,31,81,31,89,31,67,31,221,31,245,31,186,31,126,31,142,31,142,30,11,31,173,31,227,31,47,31,201,31,245,31,245,30,62,31,249,31,94,31,13,31,114,31,199,31,199,30,35,31,161,31,218,31,178,31,136,31,75,31,102,31,102,30,102,29,196,31,196,30,230,31,240,31,122,31,66,31,11,31,4,31,117,31,232,31,153,31,153,30,91,31,56,31,180,31,180,30,58,31,137,31,137,30,93,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
