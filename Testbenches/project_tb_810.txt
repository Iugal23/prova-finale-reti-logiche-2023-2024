-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 350;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (72,0,9,0,194,0,183,0,26,0,1,0,246,0,15,0,88,0,92,0,190,0,0,0,21,0,252,0,0,0,0,0,255,0,66,0,168,0,250,0,188,0,50,0,3,0,94,0,251,0,39,0,59,0,0,0,138,0,223,0,126,0,63,0,0,0,157,0,117,0,75,0,86,0,214,0,68,0,136,0,72,0,13,0,220,0,0,0,215,0,246,0,128,0,77,0,126,0,43,0,206,0,0,0,71,0,216,0,197,0,185,0,194,0,0,0,104,0,142,0,42,0,105,0,0,0,196,0,47,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,234,0,137,0,58,0,147,0,15,0,29,0,81,0,123,0,154,0,46,0,65,0,0,0,26,0,164,0,57,0,0,0,0,0,96,0,216,0,221,0,0,0,0,0,231,0,128,0,183,0,162,0,0,0,31,0,0,0,227,0,236,0,0,0,222,0,127,0,230,0,38,0,136,0,146,0,117,0,147,0,162,0,212,0,0,0,186,0,112,0,236,0,60,0,59,0,0,0,46,0,159,0,231,0,137,0,167,0,30,0,123,0,44,0,102,0,0,0,127,0,105,0,142,0,121,0,0,0,65,0,0,0,116,0,137,0,16,0,60,0,21,0,109,0,0,0,80,0,182,0,44,0,67,0,182,0,0,0,227,0,113,0,30,0,153,0,190,0,230,0,144,0,141,0,123,0,106,0,130,0,94,0,0,0,0,0,0,0,46,0,182,0,147,0,0,0,76,0,131,0,89,0,82,0,218,0,0,0,0,0,149,0,192,0,136,0,32,0,205,0,164,0,190,0,0,0,194,0,202,0,236,0,0,0,173,0,85,0,170,0,178,0,180,0,65,0,102,0,160,0,2,0,40,0,184,0,226,0,111,0,125,0,0,0,144,0,244,0,0,0,65,0,205,0,0,0,211,0,0,0,253,0,0,0,121,0,217,0,238,0,53,0,0,0,209,0,105,0,9,0,136,0,204,0,96,0,98,0,176,0,80,0,224,0,157,0,20,0,144,0,53,0,60,0,65,0,152,0,148,0,220,0,0,0,245,0,0,0,153,0,39,0,0,0,0,0,0,0,0,0,117,0,207,0,82,0,162,0,224,0,1,0,0,0,49,0,176,0,0,0,119,0,157,0,67,0,0,0,134,0,228,0,0,0,130,0,249,0,0,0,106,0,135,0,137,0,3,0,0,0,151,0,155,0,58,0,36,0,0,0,218,0,151,0,0,0,210,0,22,0,0,0,211,0,9,0,0,0,0,0,234,0,215,0,142,0,137,0,208,0,79,0,140,0,251,0,67,0,121,0,151,0,51,0,0,0,0,0,74,0,221,0,53,0,48,0,246,0,170,0,134,0,0,0,155,0,69,0,202,0,150,0,41,0,84,0,24,0,0,0,253,0,0,0,125,0,187,0,245,0,50,0,148,0,0,0,57,0,228,0,89,0,0,0,60,0,17,0,209,0,251,0,84,0,118,0,207,0,123,0,2,0,121,0,22,0,141,0,239,0,114,0,97,0,76,0,177,0,0,0,0,0);
signal scenario_full  : scenario_type := (72,31,9,31,194,31,183,31,26,31,1,31,246,31,15,31,88,31,92,31,190,31,190,30,21,31,252,31,252,30,252,29,255,31,66,31,168,31,250,31,188,31,50,31,3,31,94,31,251,31,39,31,59,31,59,30,138,31,223,31,126,31,63,31,63,30,157,31,117,31,75,31,86,31,214,31,68,31,136,31,72,31,13,31,220,31,220,30,215,31,246,31,128,31,77,31,126,31,43,31,206,31,206,30,71,31,216,31,197,31,185,31,194,31,194,30,104,31,142,31,42,31,105,31,105,30,196,31,47,31,47,30,47,29,47,28,47,27,47,26,36,31,36,30,36,29,36,28,234,31,137,31,58,31,147,31,15,31,29,31,81,31,123,31,154,31,46,31,65,31,65,30,26,31,164,31,57,31,57,30,57,29,96,31,216,31,221,31,221,30,221,29,231,31,128,31,183,31,162,31,162,30,31,31,31,30,227,31,236,31,236,30,222,31,127,31,230,31,38,31,136,31,146,31,117,31,147,31,162,31,212,31,212,30,186,31,112,31,236,31,60,31,59,31,59,30,46,31,159,31,231,31,137,31,167,31,30,31,123,31,44,31,102,31,102,30,127,31,105,31,142,31,121,31,121,30,65,31,65,30,116,31,137,31,16,31,60,31,21,31,109,31,109,30,80,31,182,31,44,31,67,31,182,31,182,30,227,31,113,31,30,31,153,31,190,31,230,31,144,31,141,31,123,31,106,31,130,31,94,31,94,30,94,29,94,28,46,31,182,31,147,31,147,30,76,31,131,31,89,31,82,31,218,31,218,30,218,29,149,31,192,31,136,31,32,31,205,31,164,31,190,31,190,30,194,31,202,31,236,31,236,30,173,31,85,31,170,31,178,31,180,31,65,31,102,31,160,31,2,31,40,31,184,31,226,31,111,31,125,31,125,30,144,31,244,31,244,30,65,31,205,31,205,30,211,31,211,30,253,31,253,30,121,31,217,31,238,31,53,31,53,30,209,31,105,31,9,31,136,31,204,31,96,31,98,31,176,31,80,31,224,31,157,31,20,31,144,31,53,31,60,31,65,31,152,31,148,31,220,31,220,30,245,31,245,30,153,31,39,31,39,30,39,29,39,28,39,27,117,31,207,31,82,31,162,31,224,31,1,31,1,30,49,31,176,31,176,30,119,31,157,31,67,31,67,30,134,31,228,31,228,30,130,31,249,31,249,30,106,31,135,31,137,31,3,31,3,30,151,31,155,31,58,31,36,31,36,30,218,31,151,31,151,30,210,31,22,31,22,30,211,31,9,31,9,30,9,29,234,31,215,31,142,31,137,31,208,31,79,31,140,31,251,31,67,31,121,31,151,31,51,31,51,30,51,29,74,31,221,31,53,31,48,31,246,31,170,31,134,31,134,30,155,31,69,31,202,31,150,31,41,31,84,31,24,31,24,30,253,31,253,30,125,31,187,31,245,31,50,31,148,31,148,30,57,31,228,31,89,31,89,30,60,31,17,31,209,31,251,31,84,31,118,31,207,31,123,31,2,31,121,31,22,31,141,31,239,31,114,31,97,31,76,31,177,31,177,30,177,29);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
