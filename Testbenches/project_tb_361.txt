-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 374;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (195,0,67,0,186,0,240,0,0,0,177,0,32,0,90,0,137,0,149,0,171,0,37,0,38,0,252,0,202,0,78,0,131,0,209,0,60,0,0,0,147,0,31,0,33,0,0,0,247,0,92,0,0,0,3,0,235,0,0,0,0,0,18,0,98,0,221,0,187,0,0,0,105,0,54,0,0,0,28,0,107,0,0,0,21,0,198,0,251,0,15,0,92,0,61,0,0,0,132,0,68,0,243,0,0,0,18,0,225,0,0,0,0,0,0,0,233,0,0,0,225,0,203,0,110,0,202,0,151,0,53,0,0,0,38,0,0,0,138,0,0,0,243,0,23,0,0,0,40,0,133,0,0,0,0,0,11,0,197,0,247,0,250,0,241,0,110,0,218,0,39,0,47,0,235,0,226,0,235,0,246,0,225,0,11,0,0,0,0,0,233,0,49,0,94,0,166,0,173,0,42,0,149,0,74,0,228,0,220,0,155,0,104,0,112,0,142,0,119,0,143,0,180,0,12,0,101,0,68,0,179,0,224,0,240,0,11,0,39,0,175,0,191,0,229,0,231,0,251,0,24,0,15,0,78,0,229,0,163,0,119,0,43,0,0,0,143,0,39,0,184,0,114,0,199,0,122,0,67,0,17,0,221,0,87,0,245,0,0,0,98,0,40,0,0,0,23,0,249,0,0,0,0,0,90,0,130,0,133,0,55,0,132,0,0,0,74,0,48,0,0,0,0,0,0,0,175,0,0,0,0,0,196,0,0,0,117,0,0,0,51,0,230,0,104,0,69,0,98,0,181,0,0,0,164,0,232,0,0,0,239,0,64,0,49,0,50,0,97,0,49,0,31,0,249,0,250,0,242,0,230,0,149,0,79,0,193,0,205,0,139,0,249,0,84,0,219,0,186,0,205,0,100,0,241,0,28,0,137,0,0,0,123,0,17,0,161,0,104,0,185,0,236,0,52,0,171,0,132,0,207,0,7,0,217,0,25,0,170,0,188,0,47,0,204,0,52,0,157,0,0,0,229,0,160,0,86,0,0,0,0,0,177,0,0,0,0,0,99,0,9,0,12,0,5,0,192,0,186,0,0,0,194,0,0,0,74,0,177,0,161,0,174,0,143,0,219,0,79,0,7,0,154,0,61,0,247,0,248,0,182,0,82,0,142,0,95,0,112,0,51,0,96,0,165,0,184,0,243,0,32,0,88,0,119,0,9,0,0,0,169,0,52,0,142,0,214,0,0,0,197,0,113,0,0,0,146,0,188,0,106,0,246,0,0,0,129,0,204,0,238,0,1,0,0,0,215,0,0,0,35,0,0,0,0,0,0,0,126,0,0,0,38,0,0,0,0,0,9,0,144,0,138,0,80,0,92,0,100,0,142,0,253,0,0,0,150,0,225,0,0,0,152,0,46,0,175,0,119,0,0,0,0,0,142,0,252,0,48,0,0,0,205,0,2,0,0,0,131,0,237,0,114,0,250,0,114,0,162,0,253,0,184,0,0,0,250,0,21,0,78,0,0,0,0,0,229,0,133,0,251,0,15,0,35,0,151,0,46,0,183,0,7,0,93,0,176,0,0,0,0,0,226,0,219,0,0,0,49,0,0,0,196,0,223,0,131,0,0,0,215,0,0,0,0,0,43,0,32,0,224,0,0,0,0,0,208,0,8,0,0,0,26,0,0,0,224,0);
signal scenario_full  : scenario_type := (195,31,67,31,186,31,240,31,240,30,177,31,32,31,90,31,137,31,149,31,171,31,37,31,38,31,252,31,202,31,78,31,131,31,209,31,60,31,60,30,147,31,31,31,33,31,33,30,247,31,92,31,92,30,3,31,235,31,235,30,235,29,18,31,98,31,221,31,187,31,187,30,105,31,54,31,54,30,28,31,107,31,107,30,21,31,198,31,251,31,15,31,92,31,61,31,61,30,132,31,68,31,243,31,243,30,18,31,225,31,225,30,225,29,225,28,233,31,233,30,225,31,203,31,110,31,202,31,151,31,53,31,53,30,38,31,38,30,138,31,138,30,243,31,23,31,23,30,40,31,133,31,133,30,133,29,11,31,197,31,247,31,250,31,241,31,110,31,218,31,39,31,47,31,235,31,226,31,235,31,246,31,225,31,11,31,11,30,11,29,233,31,49,31,94,31,166,31,173,31,42,31,149,31,74,31,228,31,220,31,155,31,104,31,112,31,142,31,119,31,143,31,180,31,12,31,101,31,68,31,179,31,224,31,240,31,11,31,39,31,175,31,191,31,229,31,231,31,251,31,24,31,15,31,78,31,229,31,163,31,119,31,43,31,43,30,143,31,39,31,184,31,114,31,199,31,122,31,67,31,17,31,221,31,87,31,245,31,245,30,98,31,40,31,40,30,23,31,249,31,249,30,249,29,90,31,130,31,133,31,55,31,132,31,132,30,74,31,48,31,48,30,48,29,48,28,175,31,175,30,175,29,196,31,196,30,117,31,117,30,51,31,230,31,104,31,69,31,98,31,181,31,181,30,164,31,232,31,232,30,239,31,64,31,49,31,50,31,97,31,49,31,31,31,249,31,250,31,242,31,230,31,149,31,79,31,193,31,205,31,139,31,249,31,84,31,219,31,186,31,205,31,100,31,241,31,28,31,137,31,137,30,123,31,17,31,161,31,104,31,185,31,236,31,52,31,171,31,132,31,207,31,7,31,217,31,25,31,170,31,188,31,47,31,204,31,52,31,157,31,157,30,229,31,160,31,86,31,86,30,86,29,177,31,177,30,177,29,99,31,9,31,12,31,5,31,192,31,186,31,186,30,194,31,194,30,74,31,177,31,161,31,174,31,143,31,219,31,79,31,7,31,154,31,61,31,247,31,248,31,182,31,82,31,142,31,95,31,112,31,51,31,96,31,165,31,184,31,243,31,32,31,88,31,119,31,9,31,9,30,169,31,52,31,142,31,214,31,214,30,197,31,113,31,113,30,146,31,188,31,106,31,246,31,246,30,129,31,204,31,238,31,1,31,1,30,215,31,215,30,35,31,35,30,35,29,35,28,126,31,126,30,38,31,38,30,38,29,9,31,144,31,138,31,80,31,92,31,100,31,142,31,253,31,253,30,150,31,225,31,225,30,152,31,46,31,175,31,119,31,119,30,119,29,142,31,252,31,48,31,48,30,205,31,2,31,2,30,131,31,237,31,114,31,250,31,114,31,162,31,253,31,184,31,184,30,250,31,21,31,78,31,78,30,78,29,229,31,133,31,251,31,15,31,35,31,151,31,46,31,183,31,7,31,93,31,176,31,176,30,176,29,226,31,219,31,219,30,49,31,49,30,196,31,223,31,131,31,131,30,215,31,215,30,215,29,43,31,32,31,224,31,224,30,224,29,208,31,8,31,8,30,26,31,26,30,224,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
