-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 953;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (37,0,102,0,110,0,237,0,186,0,7,0,122,0,167,0,0,0,196,0,0,0,20,0,0,0,128,0,118,0,0,0,152,0,202,0,200,0,17,0,215,0,98,0,235,0,7,0,27,0,41,0,90,0,197,0,191,0,129,0,141,0,0,0,0,0,27,0,132,0,31,0,63,0,0,0,2,0,10,0,66,0,0,0,127,0,116,0,0,0,135,0,98,0,253,0,170,0,146,0,78,0,106,0,220,0,250,0,169,0,28,0,71,0,0,0,146,0,21,0,238,0,0,0,0,0,116,0,179,0,238,0,139,0,43,0,246,0,119,0,112,0,85,0,205,0,0,0,118,0,154,0,126,0,0,0,38,0,0,0,173,0,51,0,180,0,14,0,187,0,8,0,0,0,0,0,161,0,69,0,250,0,0,0,227,0,185,0,84,0,9,0,0,0,93,0,28,0,203,0,0,0,255,0,0,0,192,0,254,0,152,0,171,0,97,0,68,0,0,0,44,0,54,0,0,0,111,0,0,0,122,0,204,0,146,0,0,0,123,0,0,0,59,0,118,0,79,0,126,0,0,0,18,0,0,0,48,0,194,0,0,0,54,0,49,0,59,0,119,0,209,0,1,0,65,0,0,0,239,0,137,0,12,0,0,0,0,0,39,0,205,0,89,0,13,0,0,0,165,0,146,0,0,0,6,0,71,0,141,0,108,0,158,0,80,0,30,0,108,0,145,0,71,0,64,0,161,0,223,0,0,0,168,0,95,0,0,0,160,0,214,0,0,0,168,0,99,0,211,0,136,0,129,0,16,0,8,0,0,0,222,0,234,0,141,0,116,0,0,0,121,0,182,0,200,0,165,0,148,0,153,0,205,0,144,0,248,0,108,0,193,0,240,0,180,0,15,0,225,0,10,0,75,0,130,0,212,0,192,0,146,0,52,0,45,0,122,0,80,0,149,0,91,0,194,0,158,0,127,0,13,0,111,0,57,0,0,0,158,0,95,0,0,0,129,0,0,0,123,0,246,0,179,0,115,0,45,0,40,0,40,0,233,0,227,0,75,0,235,0,148,0,0,0,0,0,231,0,123,0,0,0,138,0,155,0,208,0,60,0,0,0,215,0,0,0,0,0,74,0,152,0,0,0,51,0,20,0,86,0,39,0,0,0,107,0,21,0,153,0,10,0,30,0,187,0,195,0,94,0,0,0,103,0,146,0,36,0,92,0,0,0,130,0,37,0,137,0,75,0,45,0,57,0,0,0,72,0,0,0,49,0,111,0,196,0,87,0,175,0,120,0,60,0,0,0,69,0,58,0,0,0,0,0,50,0,229,0,153,0,252,0,202,0,133,0,252,0,0,0,36,0,95,0,108,0,62,0,208,0,80,0,0,0,89,0,216,0,234,0,63,0,135,0,0,0,55,0,3,0,15,0,0,0,0,0,219,0,76,0,233,0,38,0,11,0,53,0,164,0,231,0,0,0,187,0,12,0,0,0,163,0,204,0,16,0,233,0,150,0,0,0,33,0,153,0,0,0,0,0,232,0,75,0,49,0,53,0,0,0,251,0,114,0,8,0,241,0,16,0,84,0,0,0,0,0,0,0,72,0,69,0,213,0,144,0,0,0,87,0,2,0,12,0,0,0,0,0,134,0,172,0,28,0,69,0,150,0,0,0,144,0,196,0,0,0,0,0,148,0,196,0,107,0,138,0,195,0,49,0,108,0,249,0,0,0,232,0,98,0,148,0,107,0,0,0,140,0,0,0,88,0,80,0,214,0,20,0,116,0,0,0,124,0,0,0,3,0,219,0,211,0,253,0,181,0,103,0,0,0,0,0,147,0,87,0,117,0,29,0,113,0,116,0,10,0,229,0,136,0,245,0,0,0,189,0,111,0,157,0,190,0,202,0,210,0,39,0,34,0,50,0,143,0,236,0,197,0,1,0,80,0,177,0,78,0,48,0,187,0,160,0,111,0,0,0,201,0,24,0,189,0,39,0,79,0,115,0,3,0,106,0,109,0,16,0,0,0,31,0,149,0,185,0,34,0,0,0,201,0,100,0,0,0,247,0,42,0,30,0,227,0,0,0,213,0,175,0,68,0,183,0,38,0,167,0,250,0,0,0,12,0,13,0,208,0,38,0,0,0,217,0,207,0,49,0,66,0,0,0,191,0,46,0,2,0,116,0,0,0,44,0,0,0,0,0,219,0,124,0,89,0,0,0,154,0,47,0,10,0,49,0,202,0,214,0,211,0,37,0,0,0,0,0,32,0,0,0,198,0,0,0,180,0,195,0,123,0,79,0,0,0,242,0,122,0,0,0,78,0,0,0,27,0,175,0,35,0,0,0,0,0,127,0,137,0,1,0,26,0,92,0,240,0,185,0,167,0,180,0,58,0,215,0,130,0,162,0,35,0,155,0,46,0,132,0,0,0,93,0,223,0,224,0,13,0,122,0,44,0,77,0,0,0,0,0,45,0,13,0,0,0,0,0,255,0,228,0,0,0,36,0,0,0,48,0,147,0,204,0,44,0,67,0,108,0,136,0,0,0,0,0,46,0,154,0,223,0,5,0,0,0,101,0,108,0,254,0,27,0,0,0,234,0,48,0,208,0,0,0,205,0,119,0,234,0,51,0,161,0,150,0,74,0,201,0,124,0,0,0,0,0,0,0,0,0,177,0,0,0,0,0,118,0,165,0,159,0,75,0,79,0,79,0,84,0,222,0,0,0,159,0,69,0,123,0,211,0,14,0,165,0,84,0,106,0,88,0,32,0,221,0,0,0,62,0,200,0,0,0,44,0,70,0,53,0,254,0,196,0,112,0,0,0,189,0,126,0,75,0,125,0,21,0,0,0,73,0,223,0,230,0,100,0,203,0,24,0,85,0,132,0,236,0,0,0,147,0,80,0,0,0,27,0,98,0,0,0,0,0,0,0,89,0,142,0,0,0,41,0,29,0,110,0,110,0,84,0,235,0,164,0,180,0,18,0,51,0,65,0,191,0,96,0,0,0,166,0,0,0,68,0,250,0,0,0,164,0,190,0,0,0,125,0,64,0,6,0,0,0,107,0,178,0,129,0,65,0,66,0,93,0,190,0,190,0,120,0,53,0,215,0,0,0,0,0,0,0,0,0,32,0,133,0,207,0,243,0,106,0,63,0,15,0,109,0,0,0,0,0,100,0,79,0,52,0,117,0,2,0,0,0,52,0,0,0,187,0,165,0,0,0,52,0,0,0,0,0,236,0,75,0,0,0,130,0,130,0,38,0,131,0,0,0,214,0,0,0,171,0,60,0,128,0,143,0,0,0,74,0,0,0,0,0,119,0,242,0,252,0,71,0,86,0,2,0,8,0,0,0,110,0,0,0,60,0,90,0,102,0,164,0,245,0,243,0,16,0,198,0,26,0,111,0,25,0,0,0,23,0,174,0,0,0,203,0,163,0,128,0,103,0,73,0,70,0,104,0,99,0,244,0,147,0,236,0,219,0,197,0,79,0,201,0,0,0,0,0,0,0,0,0,0,0,156,0,233,0,30,0,160,0,200,0,106,0,14,0,0,0,0,0,160,0,116,0,2,0,126,0,0,0,229,0,182,0,178,0,49,0,160,0,24,0,164,0,84,0,56,0,12,0,0,0,221,0,187,0,208,0,0,0,99,0,84,0,241,0,209,0,112,0,210,0,242,0,229,0,106,0,208,0,0,0,0,0,39,0,138,0,137,0,53,0,0,0,47,0,114,0,0,0,157,0,0,0,172,0,53,0,92,0,22,0,99,0,232,0,0,0,0,0,0,0,120,0,250,0,0,0,107,0,207,0,196,0,235,0,0,0,233,0,0,0,61,0,134,0,88,0,165,0,123,0,136,0,240,0,185,0,0,0,0,0,106,0,144,0,190,0,0,0,238,0,48,0,80,0,211,0,0,0,0,0,101,0,1,0,0,0,57,0,202,0,0,0,0,0,30,0,123,0,225,0,0,0,195,0,45,0,0,0,0,0,0,0,134,0,255,0,207,0,0,0,156,0,73,0,48,0,51,0,9,0,0,0,130,0,0,0,131,0,85,0,61,0,60,0,4,0,175,0,215,0,127,0,144,0,215,0,11,0,87,0,169,0,0,0,247,0,77,0,236,0,181,0,180,0,0,0,169,0,150,0,0,0,0,0,55,0,0,0,126,0,143,0,0,0,33,0,0,0,97,0,214,0,129,0,0,0,245,0,235,0,71,0,154,0,143,0,6,0,95,0,0,0,0,0,156,0,35,0,0,0,225,0,72,0,52,0,66,0,171,0,16,0);
signal scenario_full  : scenario_type := (37,31,102,31,110,31,237,31,186,31,7,31,122,31,167,31,167,30,196,31,196,30,20,31,20,30,128,31,118,31,118,30,152,31,202,31,200,31,17,31,215,31,98,31,235,31,7,31,27,31,41,31,90,31,197,31,191,31,129,31,141,31,141,30,141,29,27,31,132,31,31,31,63,31,63,30,2,31,10,31,66,31,66,30,127,31,116,31,116,30,135,31,98,31,253,31,170,31,146,31,78,31,106,31,220,31,250,31,169,31,28,31,71,31,71,30,146,31,21,31,238,31,238,30,238,29,116,31,179,31,238,31,139,31,43,31,246,31,119,31,112,31,85,31,205,31,205,30,118,31,154,31,126,31,126,30,38,31,38,30,173,31,51,31,180,31,14,31,187,31,8,31,8,30,8,29,161,31,69,31,250,31,250,30,227,31,185,31,84,31,9,31,9,30,93,31,28,31,203,31,203,30,255,31,255,30,192,31,254,31,152,31,171,31,97,31,68,31,68,30,44,31,54,31,54,30,111,31,111,30,122,31,204,31,146,31,146,30,123,31,123,30,59,31,118,31,79,31,126,31,126,30,18,31,18,30,48,31,194,31,194,30,54,31,49,31,59,31,119,31,209,31,1,31,65,31,65,30,239,31,137,31,12,31,12,30,12,29,39,31,205,31,89,31,13,31,13,30,165,31,146,31,146,30,6,31,71,31,141,31,108,31,158,31,80,31,30,31,108,31,145,31,71,31,64,31,161,31,223,31,223,30,168,31,95,31,95,30,160,31,214,31,214,30,168,31,99,31,211,31,136,31,129,31,16,31,8,31,8,30,222,31,234,31,141,31,116,31,116,30,121,31,182,31,200,31,165,31,148,31,153,31,205,31,144,31,248,31,108,31,193,31,240,31,180,31,15,31,225,31,10,31,75,31,130,31,212,31,192,31,146,31,52,31,45,31,122,31,80,31,149,31,91,31,194,31,158,31,127,31,13,31,111,31,57,31,57,30,158,31,95,31,95,30,129,31,129,30,123,31,246,31,179,31,115,31,45,31,40,31,40,31,233,31,227,31,75,31,235,31,148,31,148,30,148,29,231,31,123,31,123,30,138,31,155,31,208,31,60,31,60,30,215,31,215,30,215,29,74,31,152,31,152,30,51,31,20,31,86,31,39,31,39,30,107,31,21,31,153,31,10,31,30,31,187,31,195,31,94,31,94,30,103,31,146,31,36,31,92,31,92,30,130,31,37,31,137,31,75,31,45,31,57,31,57,30,72,31,72,30,49,31,111,31,196,31,87,31,175,31,120,31,60,31,60,30,69,31,58,31,58,30,58,29,50,31,229,31,153,31,252,31,202,31,133,31,252,31,252,30,36,31,95,31,108,31,62,31,208,31,80,31,80,30,89,31,216,31,234,31,63,31,135,31,135,30,55,31,3,31,15,31,15,30,15,29,219,31,76,31,233,31,38,31,11,31,53,31,164,31,231,31,231,30,187,31,12,31,12,30,163,31,204,31,16,31,233,31,150,31,150,30,33,31,153,31,153,30,153,29,232,31,75,31,49,31,53,31,53,30,251,31,114,31,8,31,241,31,16,31,84,31,84,30,84,29,84,28,72,31,69,31,213,31,144,31,144,30,87,31,2,31,12,31,12,30,12,29,134,31,172,31,28,31,69,31,150,31,150,30,144,31,196,31,196,30,196,29,148,31,196,31,107,31,138,31,195,31,49,31,108,31,249,31,249,30,232,31,98,31,148,31,107,31,107,30,140,31,140,30,88,31,80,31,214,31,20,31,116,31,116,30,124,31,124,30,3,31,219,31,211,31,253,31,181,31,103,31,103,30,103,29,147,31,87,31,117,31,29,31,113,31,116,31,10,31,229,31,136,31,245,31,245,30,189,31,111,31,157,31,190,31,202,31,210,31,39,31,34,31,50,31,143,31,236,31,197,31,1,31,80,31,177,31,78,31,48,31,187,31,160,31,111,31,111,30,201,31,24,31,189,31,39,31,79,31,115,31,3,31,106,31,109,31,16,31,16,30,31,31,149,31,185,31,34,31,34,30,201,31,100,31,100,30,247,31,42,31,30,31,227,31,227,30,213,31,175,31,68,31,183,31,38,31,167,31,250,31,250,30,12,31,13,31,208,31,38,31,38,30,217,31,207,31,49,31,66,31,66,30,191,31,46,31,2,31,116,31,116,30,44,31,44,30,44,29,219,31,124,31,89,31,89,30,154,31,47,31,10,31,49,31,202,31,214,31,211,31,37,31,37,30,37,29,32,31,32,30,198,31,198,30,180,31,195,31,123,31,79,31,79,30,242,31,122,31,122,30,78,31,78,30,27,31,175,31,35,31,35,30,35,29,127,31,137,31,1,31,26,31,92,31,240,31,185,31,167,31,180,31,58,31,215,31,130,31,162,31,35,31,155,31,46,31,132,31,132,30,93,31,223,31,224,31,13,31,122,31,44,31,77,31,77,30,77,29,45,31,13,31,13,30,13,29,255,31,228,31,228,30,36,31,36,30,48,31,147,31,204,31,44,31,67,31,108,31,136,31,136,30,136,29,46,31,154,31,223,31,5,31,5,30,101,31,108,31,254,31,27,31,27,30,234,31,48,31,208,31,208,30,205,31,119,31,234,31,51,31,161,31,150,31,74,31,201,31,124,31,124,30,124,29,124,28,124,27,177,31,177,30,177,29,118,31,165,31,159,31,75,31,79,31,79,31,84,31,222,31,222,30,159,31,69,31,123,31,211,31,14,31,165,31,84,31,106,31,88,31,32,31,221,31,221,30,62,31,200,31,200,30,44,31,70,31,53,31,254,31,196,31,112,31,112,30,189,31,126,31,75,31,125,31,21,31,21,30,73,31,223,31,230,31,100,31,203,31,24,31,85,31,132,31,236,31,236,30,147,31,80,31,80,30,27,31,98,31,98,30,98,29,98,28,89,31,142,31,142,30,41,31,29,31,110,31,110,31,84,31,235,31,164,31,180,31,18,31,51,31,65,31,191,31,96,31,96,30,166,31,166,30,68,31,250,31,250,30,164,31,190,31,190,30,125,31,64,31,6,31,6,30,107,31,178,31,129,31,65,31,66,31,93,31,190,31,190,31,120,31,53,31,215,31,215,30,215,29,215,28,215,27,32,31,133,31,207,31,243,31,106,31,63,31,15,31,109,31,109,30,109,29,100,31,79,31,52,31,117,31,2,31,2,30,52,31,52,30,187,31,165,31,165,30,52,31,52,30,52,29,236,31,75,31,75,30,130,31,130,31,38,31,131,31,131,30,214,31,214,30,171,31,60,31,128,31,143,31,143,30,74,31,74,30,74,29,119,31,242,31,252,31,71,31,86,31,2,31,8,31,8,30,110,31,110,30,60,31,90,31,102,31,164,31,245,31,243,31,16,31,198,31,26,31,111,31,25,31,25,30,23,31,174,31,174,30,203,31,163,31,128,31,103,31,73,31,70,31,104,31,99,31,244,31,147,31,236,31,219,31,197,31,79,31,201,31,201,30,201,29,201,28,201,27,201,26,156,31,233,31,30,31,160,31,200,31,106,31,14,31,14,30,14,29,160,31,116,31,2,31,126,31,126,30,229,31,182,31,178,31,49,31,160,31,24,31,164,31,84,31,56,31,12,31,12,30,221,31,187,31,208,31,208,30,99,31,84,31,241,31,209,31,112,31,210,31,242,31,229,31,106,31,208,31,208,30,208,29,39,31,138,31,137,31,53,31,53,30,47,31,114,31,114,30,157,31,157,30,172,31,53,31,92,31,22,31,99,31,232,31,232,30,232,29,232,28,120,31,250,31,250,30,107,31,207,31,196,31,235,31,235,30,233,31,233,30,61,31,134,31,88,31,165,31,123,31,136,31,240,31,185,31,185,30,185,29,106,31,144,31,190,31,190,30,238,31,48,31,80,31,211,31,211,30,211,29,101,31,1,31,1,30,57,31,202,31,202,30,202,29,30,31,123,31,225,31,225,30,195,31,45,31,45,30,45,29,45,28,134,31,255,31,207,31,207,30,156,31,73,31,48,31,51,31,9,31,9,30,130,31,130,30,131,31,85,31,61,31,60,31,4,31,175,31,215,31,127,31,144,31,215,31,11,31,87,31,169,31,169,30,247,31,77,31,236,31,181,31,180,31,180,30,169,31,150,31,150,30,150,29,55,31,55,30,126,31,143,31,143,30,33,31,33,30,97,31,214,31,129,31,129,30,245,31,235,31,71,31,154,31,143,31,6,31,95,31,95,30,95,29,156,31,35,31,35,30,225,31,72,31,52,31,66,31,171,31,16,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
