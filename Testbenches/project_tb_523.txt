-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 378;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (160,0,60,0,42,0,0,0,31,0,0,0,182,0,82,0,216,0,0,0,64,0,0,0,70,0,86,0,113,0,173,0,36,0,177,0,254,0,0,0,29,0,120,0,106,0,166,0,17,0,247,0,71,0,50,0,250,0,114,0,34,0,96,0,84,0,122,0,25,0,0,0,0,0,0,0,244,0,218,0,0,0,0,0,75,0,236,0,0,0,232,0,158,0,169,0,101,0,107,0,64,0,120,0,129,0,247,0,125,0,173,0,180,0,70,0,47,0,40,0,0,0,23,0,186,0,146,0,169,0,133,0,62,0,0,0,0,0,177,0,181,0,0,0,211,0,227,0,202,0,180,0,81,0,64,0,0,0,221,0,91,0,0,0,142,0,246,0,202,0,127,0,132,0,70,0,52,0,0,0,19,0,246,0,253,0,155,0,242,0,89,0,0,0,0,0,0,0,0,0,198,0,0,0,181,0,0,0,121,0,186,0,8,0,33,0,85,0,245,0,0,0,196,0,0,0,0,0,64,0,106,0,69,0,186,0,0,0,222,0,105,0,252,0,76,0,0,0,0,0,166,0,228,0,4,0,0,0,102,0,76,0,0,0,199,0,127,0,214,0,132,0,16,0,174,0,206,0,142,0,184,0,92,0,37,0,11,0,63,0,163,0,120,0,193,0,104,0,73,0,0,0,176,0,0,0,161,0,240,0,141,0,252,0,13,0,102,0,202,0,154,0,129,0,89,0,202,0,0,0,5,0,183,0,0,0,102,0,205,0,99,0,0,0,142,0,0,0,121,0,104,0,0,0,0,0,112,0,229,0,90,0,12,0,82,0,97,0,33,0,217,0,15,0,105,0,0,0,0,0,0,0,154,0,55,0,70,0,37,0,174,0,0,0,19,0,0,0,187,0,0,0,212,0,56,0,188,0,168,0,0,0,0,0,33,0,120,0,203,0,153,0,185,0,38,0,63,0,0,0,211,0,115,0,155,0,152,0,0,0,0,0,42,0,13,0,0,0,0,0,146,0,188,0,239,0,56,0,199,0,31,0,27,0,250,0,246,0,91,0,34,0,224,0,202,0,217,0,104,0,157,0,47,0,9,0,0,0,103,0,56,0,0,0,146,0,207,0,37,0,225,0,0,0,0,0,230,0,236,0,97,0,188,0,29,0,205,0,221,0,0,0,0,0,24,0,26,0,63,0,0,0,101,0,103,0,69,0,153,0,55,0,104,0,162,0,121,0,0,0,21,0,0,0,167,0,0,0,17,0,111,0,119,0,107,0,0,0,65,0,0,0,141,0,0,0,30,0,224,0,220,0,195,0,238,0,83,0,247,0,150,0,43,0,109,0,40,0,87,0,60,0,248,0,195,0,0,0,152,0,5,0,121,0,112,0,0,0,255,0,209,0,244,0,0,0,187,0,14,0,0,0,58,0,33,0,166,0,248,0,246,0,0,0,128,0,0,0,29,0,112,0,26,0,89,0,110,0,190,0,0,0,0,0,0,0,105,0,0,0,7,0,200,0,188,0,0,0,239,0,241,0,161,0,239,0,0,0,0,0,60,0,131,0,204,0,59,0,77,0,3,0,165,0,22,0,114,0,223,0,92,0,38,0,137,0,163,0,149,0,244,0,46,0,109,0,171,0,253,0,36,0,111,0,59,0,178,0,35,0,251,0,154,0,67,0,246,0,167,0,0,0,224,0,114,0);
signal scenario_full  : scenario_type := (160,31,60,31,42,31,42,30,31,31,31,30,182,31,82,31,216,31,216,30,64,31,64,30,70,31,86,31,113,31,173,31,36,31,177,31,254,31,254,30,29,31,120,31,106,31,166,31,17,31,247,31,71,31,50,31,250,31,114,31,34,31,96,31,84,31,122,31,25,31,25,30,25,29,25,28,244,31,218,31,218,30,218,29,75,31,236,31,236,30,232,31,158,31,169,31,101,31,107,31,64,31,120,31,129,31,247,31,125,31,173,31,180,31,70,31,47,31,40,31,40,30,23,31,186,31,146,31,169,31,133,31,62,31,62,30,62,29,177,31,181,31,181,30,211,31,227,31,202,31,180,31,81,31,64,31,64,30,221,31,91,31,91,30,142,31,246,31,202,31,127,31,132,31,70,31,52,31,52,30,19,31,246,31,253,31,155,31,242,31,89,31,89,30,89,29,89,28,89,27,198,31,198,30,181,31,181,30,121,31,186,31,8,31,33,31,85,31,245,31,245,30,196,31,196,30,196,29,64,31,106,31,69,31,186,31,186,30,222,31,105,31,252,31,76,31,76,30,76,29,166,31,228,31,4,31,4,30,102,31,76,31,76,30,199,31,127,31,214,31,132,31,16,31,174,31,206,31,142,31,184,31,92,31,37,31,11,31,63,31,163,31,120,31,193,31,104,31,73,31,73,30,176,31,176,30,161,31,240,31,141,31,252,31,13,31,102,31,202,31,154,31,129,31,89,31,202,31,202,30,5,31,183,31,183,30,102,31,205,31,99,31,99,30,142,31,142,30,121,31,104,31,104,30,104,29,112,31,229,31,90,31,12,31,82,31,97,31,33,31,217,31,15,31,105,31,105,30,105,29,105,28,154,31,55,31,70,31,37,31,174,31,174,30,19,31,19,30,187,31,187,30,212,31,56,31,188,31,168,31,168,30,168,29,33,31,120,31,203,31,153,31,185,31,38,31,63,31,63,30,211,31,115,31,155,31,152,31,152,30,152,29,42,31,13,31,13,30,13,29,146,31,188,31,239,31,56,31,199,31,31,31,27,31,250,31,246,31,91,31,34,31,224,31,202,31,217,31,104,31,157,31,47,31,9,31,9,30,103,31,56,31,56,30,146,31,207,31,37,31,225,31,225,30,225,29,230,31,236,31,97,31,188,31,29,31,205,31,221,31,221,30,221,29,24,31,26,31,63,31,63,30,101,31,103,31,69,31,153,31,55,31,104,31,162,31,121,31,121,30,21,31,21,30,167,31,167,30,17,31,111,31,119,31,107,31,107,30,65,31,65,30,141,31,141,30,30,31,224,31,220,31,195,31,238,31,83,31,247,31,150,31,43,31,109,31,40,31,87,31,60,31,248,31,195,31,195,30,152,31,5,31,121,31,112,31,112,30,255,31,209,31,244,31,244,30,187,31,14,31,14,30,58,31,33,31,166,31,248,31,246,31,246,30,128,31,128,30,29,31,112,31,26,31,89,31,110,31,190,31,190,30,190,29,190,28,105,31,105,30,7,31,200,31,188,31,188,30,239,31,241,31,161,31,239,31,239,30,239,29,60,31,131,31,204,31,59,31,77,31,3,31,165,31,22,31,114,31,223,31,92,31,38,31,137,31,163,31,149,31,244,31,46,31,109,31,171,31,253,31,36,31,111,31,59,31,178,31,35,31,251,31,154,31,67,31,246,31,167,31,167,30,224,31,114,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
