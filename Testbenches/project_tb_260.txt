-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 550;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,44,0,11,0,130,0,103,0,246,0,230,0,3,0,186,0,183,0,78,0,82,0,96,0,41,0,68,0,0,0,252,0,136,0,93,0,150,0,12,0,38,0,10,0,88,0,215,0,81,0,108,0,11,0,116,0,0,0,150,0,254,0,0,0,0,0,206,0,246,0,93,0,227,0,210,0,0,0,211,0,238,0,174,0,18,0,54,0,23,0,113,0,0,0,0,0,0,0,31,0,16,0,133,0,217,0,85,0,156,0,178,0,137,0,12,0,191,0,146,0,142,0,116,0,29,0,119,0,0,0,57,0,156,0,193,0,225,0,117,0,15,0,240,0,195,0,44,0,153,0,124,0,97,0,91,0,212,0,76,0,161,0,251,0,165,0,17,0,36,0,155,0,118,0,10,0,247,0,37,0,225,0,156,0,0,0,255,0,211,0,20,0,0,0,132,0,0,0,0,0,218,0,157,0,193,0,11,0,139,0,217,0,67,0,0,0,72,0,86,0,0,0,43,0,175,0,191,0,0,0,202,0,238,0,45,0,108,0,162,0,228,0,52,0,74,0,141,0,0,0,210,0,194,0,240,0,122,0,23,0,99,0,96,0,8,0,66,0,59,0,59,0,199,0,126,0,89,0,20,0,141,0,137,0,187,0,8,0,74,0,18,0,82,0,106,0,103,0,63,0,93,0,149,0,0,0,253,0,61,0,21,0,55,0,124,0,171,0,225,0,0,0,0,0,26,0,199,0,0,0,208,0,115,0,116,0,206,0,76,0,3,0,74,0,105,0,83,0,254,0,253,0,175,0,8,0,118,0,10,0,67,0,0,0,252,0,151,0,11,0,107,0,221,0,130,0,0,0,0,0,228,0,33,0,240,0,187,0,199,0,232,0,171,0,115,0,9,0,0,0,161,0,159,0,0,0,244,0,107,0,0,0,166,0,136,0,209,0,0,0,13,0,128,0,0,0,3,0,0,0,212,0,64,0,144,0,30,0,178,0,0,0,165,0,183,0,0,0,107,0,0,0,0,0,138,0,251,0,87,0,90,0,218,0,236,0,0,0,0,0,98,0,252,0,137,0,0,0,199,0,0,0,28,0,33,0,0,0,238,0,179,0,102,0,83,0,5,0,209,0,142,0,102,0,160,0,0,0,250,0,0,0,51,0,43,0,0,0,170,0,0,0,199,0,161,0,211,0,0,0,0,0,208,0,46,0,70,0,0,0,0,0,226,0,0,0,0,0,0,0,79,0,0,0,209,0,248,0,82,0,125,0,130,0,24,0,108,0,229,0,204,0,108,0,123,0,0,0,60,0,96,0,0,0,0,0,2,0,250,0,23,0,0,0,190,0,150,0,5,0,88,0,177,0,185,0,109,0,213,0,111,0,201,0,35,0,165,0,213,0,79,0,231,0,0,0,142,0,170,0,227,0,191,0,0,0,210,0,0,0,91,0,246,0,82,0,149,0,0,0,7,0,132,0,169,0,56,0,72,0,252,0,237,0,203,0,19,0,0,0,148,0,125,0,121,0,62,0,76,0,53,0,198,0,0,0,41,0,181,0,31,0,19,0,215,0,145,0,203,0,190,0,0,0,14,0,217,0,230,0,0,0,238,0,2,0,238,0,216,0,224,0,36,0,73,0,114,0,60,0,0,0,244,0,43,0,143,0,100,0,221,0,0,0,234,0,43,0,122,0,252,0,239,0,127,0,0,0,196,0,0,0,43,0,220,0,249,0,87,0,92,0,0,0,0,0,0,0,228,0,0,0,0,0,24,0,99,0,94,0,157,0,166,0,15,0,0,0,20,0,193,0,193,0,0,0,56,0,163,0,0,0,31,0,95,0,226,0,189,0,0,0,147,0,71,0,231,0,0,0,0,0,191,0,0,0,215,0,0,0,0,0,0,0,181,0,75,0,0,0,116,0,68,0,0,0,73,0,0,0,162,0,245,0,22,0,147,0,119,0,145,0,9,0,0,0,54,0,0,0,0,0,245,0,0,0,0,0,137,0,0,0,138,0,26,0,75,0,29,0,54,0,178,0,68,0,206,0,151,0,155,0,111,0,204,0,8,0,0,0,0,0,92,0,215,0,0,0,0,0,227,0,130,0,59,0,178,0,220,0,78,0,76,0,99,0,250,0,103,0,0,0,0,0,0,0,80,0,132,0,254,0,136,0,204,0,192,0,186,0,51,0,12,0,222,0,247,0,0,0,117,0,230,0,165,0,144,0,12,0,88,0,220,0,16,0,0,0,0,0,251,0,103,0,0,0,28,0,30,0,0,0,0,0,48,0,248,0,48,0,230,0,97,0,249,0,240,0,59,0,96,0,0,0,19,0,246,0,230,0,223,0,0,0,0,0,0,0,0,0,33,0,18,0,171,0,80,0,0,0,111,0,145,0,93,0,33,0,116,0,18,0,37,0,0,0,204,0,0,0,255,0,54,0,86,0,54,0,122,0,116,0,6,0,174,0,219,0);
signal scenario_full  : scenario_type := (0,0,44,31,11,31,130,31,103,31,246,31,230,31,3,31,186,31,183,31,78,31,82,31,96,31,41,31,68,31,68,30,252,31,136,31,93,31,150,31,12,31,38,31,10,31,88,31,215,31,81,31,108,31,11,31,116,31,116,30,150,31,254,31,254,30,254,29,206,31,246,31,93,31,227,31,210,31,210,30,211,31,238,31,174,31,18,31,54,31,23,31,113,31,113,30,113,29,113,28,31,31,16,31,133,31,217,31,85,31,156,31,178,31,137,31,12,31,191,31,146,31,142,31,116,31,29,31,119,31,119,30,57,31,156,31,193,31,225,31,117,31,15,31,240,31,195,31,44,31,153,31,124,31,97,31,91,31,212,31,76,31,161,31,251,31,165,31,17,31,36,31,155,31,118,31,10,31,247,31,37,31,225,31,156,31,156,30,255,31,211,31,20,31,20,30,132,31,132,30,132,29,218,31,157,31,193,31,11,31,139,31,217,31,67,31,67,30,72,31,86,31,86,30,43,31,175,31,191,31,191,30,202,31,238,31,45,31,108,31,162,31,228,31,52,31,74,31,141,31,141,30,210,31,194,31,240,31,122,31,23,31,99,31,96,31,8,31,66,31,59,31,59,31,199,31,126,31,89,31,20,31,141,31,137,31,187,31,8,31,74,31,18,31,82,31,106,31,103,31,63,31,93,31,149,31,149,30,253,31,61,31,21,31,55,31,124,31,171,31,225,31,225,30,225,29,26,31,199,31,199,30,208,31,115,31,116,31,206,31,76,31,3,31,74,31,105,31,83,31,254,31,253,31,175,31,8,31,118,31,10,31,67,31,67,30,252,31,151,31,11,31,107,31,221,31,130,31,130,30,130,29,228,31,33,31,240,31,187,31,199,31,232,31,171,31,115,31,9,31,9,30,161,31,159,31,159,30,244,31,107,31,107,30,166,31,136,31,209,31,209,30,13,31,128,31,128,30,3,31,3,30,212,31,64,31,144,31,30,31,178,31,178,30,165,31,183,31,183,30,107,31,107,30,107,29,138,31,251,31,87,31,90,31,218,31,236,31,236,30,236,29,98,31,252,31,137,31,137,30,199,31,199,30,28,31,33,31,33,30,238,31,179,31,102,31,83,31,5,31,209,31,142,31,102,31,160,31,160,30,250,31,250,30,51,31,43,31,43,30,170,31,170,30,199,31,161,31,211,31,211,30,211,29,208,31,46,31,70,31,70,30,70,29,226,31,226,30,226,29,226,28,79,31,79,30,209,31,248,31,82,31,125,31,130,31,24,31,108,31,229,31,204,31,108,31,123,31,123,30,60,31,96,31,96,30,96,29,2,31,250,31,23,31,23,30,190,31,150,31,5,31,88,31,177,31,185,31,109,31,213,31,111,31,201,31,35,31,165,31,213,31,79,31,231,31,231,30,142,31,170,31,227,31,191,31,191,30,210,31,210,30,91,31,246,31,82,31,149,31,149,30,7,31,132,31,169,31,56,31,72,31,252,31,237,31,203,31,19,31,19,30,148,31,125,31,121,31,62,31,76,31,53,31,198,31,198,30,41,31,181,31,31,31,19,31,215,31,145,31,203,31,190,31,190,30,14,31,217,31,230,31,230,30,238,31,2,31,238,31,216,31,224,31,36,31,73,31,114,31,60,31,60,30,244,31,43,31,143,31,100,31,221,31,221,30,234,31,43,31,122,31,252,31,239,31,127,31,127,30,196,31,196,30,43,31,220,31,249,31,87,31,92,31,92,30,92,29,92,28,228,31,228,30,228,29,24,31,99,31,94,31,157,31,166,31,15,31,15,30,20,31,193,31,193,31,193,30,56,31,163,31,163,30,31,31,95,31,226,31,189,31,189,30,147,31,71,31,231,31,231,30,231,29,191,31,191,30,215,31,215,30,215,29,215,28,181,31,75,31,75,30,116,31,68,31,68,30,73,31,73,30,162,31,245,31,22,31,147,31,119,31,145,31,9,31,9,30,54,31,54,30,54,29,245,31,245,30,245,29,137,31,137,30,138,31,26,31,75,31,29,31,54,31,178,31,68,31,206,31,151,31,155,31,111,31,204,31,8,31,8,30,8,29,92,31,215,31,215,30,215,29,227,31,130,31,59,31,178,31,220,31,78,31,76,31,99,31,250,31,103,31,103,30,103,29,103,28,80,31,132,31,254,31,136,31,204,31,192,31,186,31,51,31,12,31,222,31,247,31,247,30,117,31,230,31,165,31,144,31,12,31,88,31,220,31,16,31,16,30,16,29,251,31,103,31,103,30,28,31,30,31,30,30,30,29,48,31,248,31,48,31,230,31,97,31,249,31,240,31,59,31,96,31,96,30,19,31,246,31,230,31,223,31,223,30,223,29,223,28,223,27,33,31,18,31,171,31,80,31,80,30,111,31,145,31,93,31,33,31,116,31,18,31,37,31,37,30,204,31,204,30,255,31,54,31,86,31,54,31,122,31,116,31,6,31,174,31,219,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
