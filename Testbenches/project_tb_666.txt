-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 960;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (215,0,0,0,0,0,125,0,0,0,0,0,127,0,0,0,143,0,210,0,93,0,224,0,234,0,158,0,149,0,187,0,0,0,230,0,254,0,188,0,0,0,253,0,0,0,231,0,227,0,14,0,249,0,206,0,62,0,81,0,8,0,0,0,48,0,56,0,20,0,252,0,185,0,14,0,0,0,167,0,134,0,101,0,247,0,19,0,222,0,68,0,0,0,249,0,239,0,0,0,0,0,253,0,21,0,10,0,24,0,224,0,153,0,58,0,147,0,74,0,59,0,0,0,14,0,195,0,0,0,172,0,182,0,58,0,143,0,0,0,198,0,122,0,53,0,235,0,196,0,252,0,72,0,150,0,0,0,205,0,0,0,133,0,14,0,229,0,0,0,114,0,103,0,0,0,35,0,0,0,14,0,100,0,0,0,73,0,249,0,205,0,0,0,169,0,0,0,144,0,137,0,0,0,136,0,15,0,50,0,11,0,157,0,151,0,117,0,229,0,0,0,182,0,43,0,246,0,0,0,214,0,164,0,62,0,220,0,93,0,67,0,140,0,230,0,172,0,27,0,0,0,26,0,147,0,80,0,217,0,0,0,0,0,233,0,161,0,167,0,0,0,155,0,124,0,92,0,87,0,206,0,207,0,21,0,0,0,52,0,192,0,1,0,119,0,123,0,137,0,122,0,250,0,13,0,38,0,137,0,101,0,16,0,84,0,75,0,188,0,57,0,135,0,0,0,164,0,225,0,72,0,173,0,140,0,152,0,151,0,250,0,20,0,248,0,0,0,196,0,230,0,134,0,82,0,27,0,29,0,0,0,64,0,0,0,196,0,161,0,146,0,34,0,197,0,164,0,97,0,95,0,0,0,26,0,200,0,195,0,229,0,7,0,166,0,13,0,133,0,134,0,194,0,116,0,0,0,172,0,202,0,19,0,11,0,20,0,0,0,217,0,0,0,63,0,204,0,140,0,152,0,28,0,240,0,0,0,0,0,0,0,0,0,23,0,185,0,114,0,75,0,0,0,248,0,0,0,215,0,220,0,27,0,155,0,83,0,194,0,183,0,0,0,134,0,0,0,0,0,3,0,140,0,234,0,169,0,10,0,212,0,29,0,0,0,0,0,58,0,13,0,103,0,99,0,147,0,0,0,199,0,61,0,38,0,9,0,8,0,214,0,112,0,148,0,78,0,140,0,95,0,130,0,1,0,173,0,153,0,114,0,167,0,106,0,0,0,0,0,0,0,0,0,138,0,94,0,124,0,225,0,181,0,0,0,86,0,60,0,162,0,96,0,105,0,177,0,4,0,0,0,75,0,203,0,178,0,226,0,178,0,50,0,129,0,143,0,244,0,72,0,206,0,7,0,24,0,74,0,120,0,101,0,131,0,0,0,0,0,105,0,19,0,0,0,0,0,3,0,7,0,0,0,127,0,137,0,131,0,19,0,0,0,89,0,60,0,1,0,211,0,45,0,115,0,138,0,96,0,8,0,0,0,72,0,0,0,13,0,75,0,59,0,231,0,124,0,18,0,25,0,222,0,0,0,70,0,237,0,235,0,132,0,131,0,113,0,77,0,26,0,10,0,135,0,80,0,0,0,144,0,0,0,103,0,0,0,140,0,0,0,195,0,210,0,226,0,0,0,112,0,108,0,97,0,43,0,185,0,0,0,230,0,0,0,212,0,23,0,132,0,221,0,202,0,95,0,143,0,66,0,0,0,0,0,0,0,247,0,40,0,0,0,237,0,116,0,173,0,60,0,208,0,238,0,178,0,94,0,252,0,203,0,207,0,122,0,0,0,207,0,181,0,0,0,234,0,142,0,215,0,169,0,0,0,104,0,9,0,192,0,49,0,91,0,1,0,159,0,253,0,126,0,0,0,187,0,151,0,0,0,86,0,181,0,83,0,191,0,91,0,0,0,64,0,23,0,38,0,0,0,72,0,145,0,212,0,83,0,125,0,6,0,57,0,22,0,98,0,0,0,37,0,76,0,188,0,0,0,198,0,211,0,134,0,167,0,95,0,33,0,0,0,0,0,0,0,0,0,169,0,0,0,40,0,231,0,41,0,25,0,193,0,193,0,2,0,105,0,241,0,0,0,143,0,173,0,0,0,82,0,103,0,3,0,0,0,0,0,119,0,106,0,94,0,0,0,32,0,64,0,152,0,251,0,182,0,17,0,239,0,28,0,254,0,148,0,33,0,86,0,207,0,161,0,0,0,105,0,46,0,0,0,53,0,0,0,108,0,1,0,43,0,132,0,129,0,67,0,0,0,252,0,235,0,32,0,0,0,104,0,196,0,78,0,0,0,28,0,180,0,124,0,189,0,0,0,167,0,74,0,245,0,0,0,59,0,103,0,147,0,144,0,139,0,178,0,67,0,0,0,0,0,102,0,242,0,0,0,145,0,247,0,112,0,0,0,12,0,23,0,102,0,19,0,136,0,43,0,4,0,155,0,132,0,68,0,44,0,150,0,230,0,155,0,0,0,79,0,162,0,104,0,0,0,0,0,136,0,250,0,17,0,232,0,131,0,72,0,182,0,238,0,30,0,117,0,0,0,100,0,230,0,0,0,184,0,0,0,174,0,214,0,102,0,18,0,69,0,86,0,147,0,131,0,156,0,67,0,177,0,196,0,38,0,169,0,0,0,237,0,113,0,155,0,0,0,0,0,92,0,72,0,149,0,112,0,202,0,62,0,0,0,70,0,21,0,158,0,129,0,133,0,131,0,89,0,105,0,0,0,38,0,202,0,0,0,17,0,181,0,141,0,159,0,25,0,62,0,167,0,110,0,43,0,180,0,254,0,27,0,224,0,86,0,0,0,172,0,189,0,225,0,32,0,0,0,68,0,86,0,240,0,125,0,184,0,67,0,127,0,172,0,20,0,218,0,235,0,24,0,0,0,217,0,71,0,33,0,136,0,0,0,0,0,199,0,90,0,60,0,116,0,0,0,12,0,106,0,67,0,0,0,57,0,0,0,211,0,70,0,35,0,245,0,0,0,115,0,0,0,117,0,0,0,72,0,68,0,29,0,0,0,209,0,191,0,210,0,0,0,231,0,0,0,133,0,34,0,49,0,227,0,210,0,0,0,191,0,131,0,135,0,18,0,243,0,110,0,120,0,68,0,250,0,108,0,171,0,32,0,0,0,221,0,154,0,19,0,218,0,218,0,20,0,15,0,171,0,93,0,80,0,64,0,0,0,0,0,107,0,78,0,52,0,0,0,200,0,102,0,54,0,207,0,1,0,0,0,58,0,135,0,6,0,0,0,0,0,2,0,238,0,93,0,115,0,235,0,225,0,25,0,49,0,17,0,218,0,172,0,231,0,111,0,7,0,75,0,238,0,32,0,0,0,34,0,108,0,230,0,14,0,0,0,0,0,42,0,104,0,68,0,9,0,234,0,197,0,58,0,0,0,2,0,103,0,142,0,108,0,167,0,76,0,151,0,0,0,156,0,41,0,0,0,0,0,48,0,186,0,227,0,142,0,132,0,0,0,46,0,0,0,6,0,0,0,3,0,166,0,48,0,250,0,0,0,0,0,138,0,0,0,153,0,0,0,177,0,0,0,10,0,0,0,63,0,0,0,0,0,0,0,62,0,37,0,219,0,107,0,125,0,110,0,11,0,0,0,206,0,144,0,21,0,184,0,159,0,16,0,135,0,198,0,0,0,254,0,85,0,119,0,73,0,114,0,0,0,0,0,233,0,232,0,128,0,0,0,218,0,0,0,173,0,250,0,85,0,0,0,0,0,0,0,23,0,24,0,157,0,11,0,170,0,200,0,49,0,140,0,252,0,220,0,25,0,0,0,37,0,56,0,211,0,244,0,104,0,102,0,96,0,107,0,245,0,6,0,0,0,209,0,122,0,193,0,225,0,183,0,114,0,221,0,57,0,18,0,0,0,185,0,2,0,0,0,0,0,0,0,31,0,180,0,236,0,247,0,150,0,5,0,79,0,63,0,0,0,62,0,221,0,59,0,0,0,0,0,198,0,0,0,67,0,48,0,199,0,0,0,134,0,151,0,114,0,0,0,31,0,110,0,1,0,58,0,43,0,0,0,50,0,0,0,6,0,141,0,232,0,68,0,0,0,2,0,57,0,0,0,43,0,120,0,191,0,63,0,0,0,98,0,224,0,58,0,27,0,188,0,0,0,58,0,196,0,89,0,28,0,153,0,37,0,217,0,0,0,231,0,149,0,81,0,153,0,225,0,17,0,55,0,188,0,48,0,70,0,146,0,22,0,116,0,0,0,179,0,156,0,136,0,0,0,0,0,127,0,129,0,0,0,56,0,122,0,0,0);
signal scenario_full  : scenario_type := (215,31,215,30,215,29,125,31,125,30,125,29,127,31,127,30,143,31,210,31,93,31,224,31,234,31,158,31,149,31,187,31,187,30,230,31,254,31,188,31,188,30,253,31,253,30,231,31,227,31,14,31,249,31,206,31,62,31,81,31,8,31,8,30,48,31,56,31,20,31,252,31,185,31,14,31,14,30,167,31,134,31,101,31,247,31,19,31,222,31,68,31,68,30,249,31,239,31,239,30,239,29,253,31,21,31,10,31,24,31,224,31,153,31,58,31,147,31,74,31,59,31,59,30,14,31,195,31,195,30,172,31,182,31,58,31,143,31,143,30,198,31,122,31,53,31,235,31,196,31,252,31,72,31,150,31,150,30,205,31,205,30,133,31,14,31,229,31,229,30,114,31,103,31,103,30,35,31,35,30,14,31,100,31,100,30,73,31,249,31,205,31,205,30,169,31,169,30,144,31,137,31,137,30,136,31,15,31,50,31,11,31,157,31,151,31,117,31,229,31,229,30,182,31,43,31,246,31,246,30,214,31,164,31,62,31,220,31,93,31,67,31,140,31,230,31,172,31,27,31,27,30,26,31,147,31,80,31,217,31,217,30,217,29,233,31,161,31,167,31,167,30,155,31,124,31,92,31,87,31,206,31,207,31,21,31,21,30,52,31,192,31,1,31,119,31,123,31,137,31,122,31,250,31,13,31,38,31,137,31,101,31,16,31,84,31,75,31,188,31,57,31,135,31,135,30,164,31,225,31,72,31,173,31,140,31,152,31,151,31,250,31,20,31,248,31,248,30,196,31,230,31,134,31,82,31,27,31,29,31,29,30,64,31,64,30,196,31,161,31,146,31,34,31,197,31,164,31,97,31,95,31,95,30,26,31,200,31,195,31,229,31,7,31,166,31,13,31,133,31,134,31,194,31,116,31,116,30,172,31,202,31,19,31,11,31,20,31,20,30,217,31,217,30,63,31,204,31,140,31,152,31,28,31,240,31,240,30,240,29,240,28,240,27,23,31,185,31,114,31,75,31,75,30,248,31,248,30,215,31,220,31,27,31,155,31,83,31,194,31,183,31,183,30,134,31,134,30,134,29,3,31,140,31,234,31,169,31,10,31,212,31,29,31,29,30,29,29,58,31,13,31,103,31,99,31,147,31,147,30,199,31,61,31,38,31,9,31,8,31,214,31,112,31,148,31,78,31,140,31,95,31,130,31,1,31,173,31,153,31,114,31,167,31,106,31,106,30,106,29,106,28,106,27,138,31,94,31,124,31,225,31,181,31,181,30,86,31,60,31,162,31,96,31,105,31,177,31,4,31,4,30,75,31,203,31,178,31,226,31,178,31,50,31,129,31,143,31,244,31,72,31,206,31,7,31,24,31,74,31,120,31,101,31,131,31,131,30,131,29,105,31,19,31,19,30,19,29,3,31,7,31,7,30,127,31,137,31,131,31,19,31,19,30,89,31,60,31,1,31,211,31,45,31,115,31,138,31,96,31,8,31,8,30,72,31,72,30,13,31,75,31,59,31,231,31,124,31,18,31,25,31,222,31,222,30,70,31,237,31,235,31,132,31,131,31,113,31,77,31,26,31,10,31,135,31,80,31,80,30,144,31,144,30,103,31,103,30,140,31,140,30,195,31,210,31,226,31,226,30,112,31,108,31,97,31,43,31,185,31,185,30,230,31,230,30,212,31,23,31,132,31,221,31,202,31,95,31,143,31,66,31,66,30,66,29,66,28,247,31,40,31,40,30,237,31,116,31,173,31,60,31,208,31,238,31,178,31,94,31,252,31,203,31,207,31,122,31,122,30,207,31,181,31,181,30,234,31,142,31,215,31,169,31,169,30,104,31,9,31,192,31,49,31,91,31,1,31,159,31,253,31,126,31,126,30,187,31,151,31,151,30,86,31,181,31,83,31,191,31,91,31,91,30,64,31,23,31,38,31,38,30,72,31,145,31,212,31,83,31,125,31,6,31,57,31,22,31,98,31,98,30,37,31,76,31,188,31,188,30,198,31,211,31,134,31,167,31,95,31,33,31,33,30,33,29,33,28,33,27,169,31,169,30,40,31,231,31,41,31,25,31,193,31,193,31,2,31,105,31,241,31,241,30,143,31,173,31,173,30,82,31,103,31,3,31,3,30,3,29,119,31,106,31,94,31,94,30,32,31,64,31,152,31,251,31,182,31,17,31,239,31,28,31,254,31,148,31,33,31,86,31,207,31,161,31,161,30,105,31,46,31,46,30,53,31,53,30,108,31,1,31,43,31,132,31,129,31,67,31,67,30,252,31,235,31,32,31,32,30,104,31,196,31,78,31,78,30,28,31,180,31,124,31,189,31,189,30,167,31,74,31,245,31,245,30,59,31,103,31,147,31,144,31,139,31,178,31,67,31,67,30,67,29,102,31,242,31,242,30,145,31,247,31,112,31,112,30,12,31,23,31,102,31,19,31,136,31,43,31,4,31,155,31,132,31,68,31,44,31,150,31,230,31,155,31,155,30,79,31,162,31,104,31,104,30,104,29,136,31,250,31,17,31,232,31,131,31,72,31,182,31,238,31,30,31,117,31,117,30,100,31,230,31,230,30,184,31,184,30,174,31,214,31,102,31,18,31,69,31,86,31,147,31,131,31,156,31,67,31,177,31,196,31,38,31,169,31,169,30,237,31,113,31,155,31,155,30,155,29,92,31,72,31,149,31,112,31,202,31,62,31,62,30,70,31,21,31,158,31,129,31,133,31,131,31,89,31,105,31,105,30,38,31,202,31,202,30,17,31,181,31,141,31,159,31,25,31,62,31,167,31,110,31,43,31,180,31,254,31,27,31,224,31,86,31,86,30,172,31,189,31,225,31,32,31,32,30,68,31,86,31,240,31,125,31,184,31,67,31,127,31,172,31,20,31,218,31,235,31,24,31,24,30,217,31,71,31,33,31,136,31,136,30,136,29,199,31,90,31,60,31,116,31,116,30,12,31,106,31,67,31,67,30,57,31,57,30,211,31,70,31,35,31,245,31,245,30,115,31,115,30,117,31,117,30,72,31,68,31,29,31,29,30,209,31,191,31,210,31,210,30,231,31,231,30,133,31,34,31,49,31,227,31,210,31,210,30,191,31,131,31,135,31,18,31,243,31,110,31,120,31,68,31,250,31,108,31,171,31,32,31,32,30,221,31,154,31,19,31,218,31,218,31,20,31,15,31,171,31,93,31,80,31,64,31,64,30,64,29,107,31,78,31,52,31,52,30,200,31,102,31,54,31,207,31,1,31,1,30,58,31,135,31,6,31,6,30,6,29,2,31,238,31,93,31,115,31,235,31,225,31,25,31,49,31,17,31,218,31,172,31,231,31,111,31,7,31,75,31,238,31,32,31,32,30,34,31,108,31,230,31,14,31,14,30,14,29,42,31,104,31,68,31,9,31,234,31,197,31,58,31,58,30,2,31,103,31,142,31,108,31,167,31,76,31,151,31,151,30,156,31,41,31,41,30,41,29,48,31,186,31,227,31,142,31,132,31,132,30,46,31,46,30,6,31,6,30,3,31,166,31,48,31,250,31,250,30,250,29,138,31,138,30,153,31,153,30,177,31,177,30,10,31,10,30,63,31,63,30,63,29,63,28,62,31,37,31,219,31,107,31,125,31,110,31,11,31,11,30,206,31,144,31,21,31,184,31,159,31,16,31,135,31,198,31,198,30,254,31,85,31,119,31,73,31,114,31,114,30,114,29,233,31,232,31,128,31,128,30,218,31,218,30,173,31,250,31,85,31,85,30,85,29,85,28,23,31,24,31,157,31,11,31,170,31,200,31,49,31,140,31,252,31,220,31,25,31,25,30,37,31,56,31,211,31,244,31,104,31,102,31,96,31,107,31,245,31,6,31,6,30,209,31,122,31,193,31,225,31,183,31,114,31,221,31,57,31,18,31,18,30,185,31,2,31,2,30,2,29,2,28,31,31,180,31,236,31,247,31,150,31,5,31,79,31,63,31,63,30,62,31,221,31,59,31,59,30,59,29,198,31,198,30,67,31,48,31,199,31,199,30,134,31,151,31,114,31,114,30,31,31,110,31,1,31,58,31,43,31,43,30,50,31,50,30,6,31,141,31,232,31,68,31,68,30,2,31,57,31,57,30,43,31,120,31,191,31,63,31,63,30,98,31,224,31,58,31,27,31,188,31,188,30,58,31,196,31,89,31,28,31,153,31,37,31,217,31,217,30,231,31,149,31,81,31,153,31,225,31,17,31,55,31,188,31,48,31,70,31,146,31,22,31,116,31,116,30,179,31,156,31,136,31,136,30,136,29,127,31,129,31,129,30,56,31,122,31,122,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
