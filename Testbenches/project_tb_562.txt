-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 955;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (46,0,32,0,204,0,141,0,41,0,155,0,6,0,0,0,222,0,0,0,212,0,179,0,0,0,15,0,155,0,145,0,0,0,28,0,187,0,0,0,84,0,35,0,21,0,17,0,164,0,42,0,215,0,64,0,16,0,162,0,195,0,149,0,221,0,0,0,65,0,116,0,203,0,92,0,0,0,84,0,245,0,34,0,99,0,0,0,183,0,206,0,0,0,172,0,194,0,211,0,0,0,46,0,0,0,229,0,0,0,0,0,207,0,0,0,0,0,50,0,224,0,0,0,236,0,116,0,0,0,0,0,137,0,187,0,178,0,210,0,62,0,100,0,228,0,106,0,222,0,119,0,31,0,44,0,0,0,237,0,0,0,60,0,149,0,237,0,103,0,0,0,176,0,25,0,39,0,0,0,0,0,98,0,177,0,117,0,0,0,0,0,105,0,62,0,0,0,56,0,27,0,114,0,0,0,92,0,182,0,71,0,0,0,18,0,89,0,55,0,163,0,152,0,0,0,68,0,169,0,124,0,218,0,42,0,135,0,23,0,116,0,61,0,244,0,0,0,22,0,100,0,44,0,169,0,251,0,82,0,32,0,173,0,75,0,52,0,81,0,237,0,226,0,19,0,242,0,0,0,0,0,218,0,156,0,130,0,210,0,129,0,0,0,160,0,110,0,100,0,121,0,203,0,150,0,4,0,63,0,89,0,32,0,13,0,0,0,176,0,0,0,0,0,22,0,188,0,129,0,177,0,154,0,48,0,0,0,23,0,0,0,86,0,14,0,54,0,0,0,187,0,9,0,205,0,38,0,244,0,99,0,103,0,0,0,187,0,59,0,31,0,239,0,139,0,68,0,198,0,0,0,151,0,170,0,0,0,58,0,150,0,19,0,180,0,117,0,197,0,108,0,248,0,128,0,20,0,188,0,76,0,226,0,0,0,153,0,0,0,218,0,177,0,248,0,16,0,41,0,0,0,251,0,207,0,144,0,83,0,235,0,6,0,231,0,104,0,0,0,28,0,185,0,79,0,188,0,254,0,57,0,130,0,145,0,194,0,174,0,141,0,177,0,0,0,0,0,0,0,0,0,52,0,19,0,37,0,239,0,0,0,0,0,0,0,0,0,61,0,161,0,65,0,90,0,188,0,0,0,0,0,32,0,100,0,108,0,159,0,69,0,242,0,140,0,98,0,106,0,158,0,201,0,0,0,57,0,76,0,194,0,18,0,204,0,0,0,86,0,148,0,154,0,48,0,54,0,0,0,0,0,0,0,114,0,163,0,0,0,23,0,155,0,124,0,237,0,80,0,233,0,108,0,60,0,0,0,135,0,80,0,0,0,55,0,90,0,203,0,127,0,131,0,214,0,164,0,213,0,89,0,201,0,128,0,211,0,223,0,101,0,242,0,195,0,64,0,0,0,185,0,41,0,149,0,143,0,251,0,146,0,34,0,0,0,180,0,117,0,192,0,146,0,0,0,0,0,215,0,239,0,211,0,187,0,48,0,115,0,203,0,192,0,109,0,75,0,233,0,155,0,229,0,99,0,215,0,0,0,52,0,210,0,121,0,0,0,120,0,246,0,61,0,192,0,113,0,163,0,189,0,20,0,215,0,0,0,230,0,211,0,0,0,0,0,9,0,234,0,0,0,170,0,233,0,44,0,251,0,85,0,167,0,83,0,0,0,35,0,38,0,169,0,0,0,194,0,32,0,179,0,169,0,38,0,175,0,36,0,97,0,169,0,69,0,30,0,120,0,238,0,74,0,96,0,28,0,127,0,9,0,70,0,220,0,20,0,52,0,230,0,69,0,0,0,96,0,126,0,118,0,175,0,205,0,112,0,33,0,167,0,138,0,96,0,0,0,153,0,0,0,203,0,79,0,28,0,154,0,127,0,34,0,0,0,227,0,0,0,50,0,0,0,84,0,231,0,213,0,210,0,63,0,43,0,137,0,0,0,179,0,177,0,82,0,19,0,168,0,68,0,125,0,56,0,222,0,149,0,132,0,24,0,210,0,193,0,196,0,128,0,116,0,140,0,113,0,97,0,126,0,208,0,107,0,0,0,46,0,180,0,227,0,30,0,229,0,78,0,104,0,24,0,98,0,16,0,110,0,39,0,0,0,0,0,84,0,97,0,101,0,0,0,0,0,244,0,226,0,124,0,174,0,143,0,219,0,236,0,80,0,58,0,205,0,187,0,165,0,86,0,138,0,147,0,128,0,76,0,142,0,179,0,10,0,0,0,0,0,87,0,0,0,0,0,125,0,0,0,4,0,59,0,117,0,78,0,129,0,7,0,148,0,87,0,131,0,202,0,140,0,54,0,196,0,29,0,43,0,67,0,0,0,196,0,224,0,43,0,143,0,51,0,129,0,213,0,0,0,115,0,210,0,220,0,0,0,6,0,0,0,0,0,45,0,77,0,217,0,23,0,118,0,105,0,0,0,0,0,1,0,204,0,0,0,148,0,171,0,165,0,75,0,0,0,81,0,23,0,157,0,86,0,28,0,100,0,43,0,203,0,160,0,163,0,0,0,0,0,189,0,231,0,0,0,121,0,171,0,254,0,188,0,140,0,251,0,64,0,0,0,100,0,233,0,254,0,0,0,0,0,153,0,0,0,0,0,48,0,135,0,71,0,30,0,65,0,164,0,2,0,186,0,0,0,200,0,212,0,175,0,146,0,242,0,226,0,170,0,192,0,219,0,157,0,0,0,222,0,0,0,0,0,28,0,242,0,6,0,123,0,0,0,201,0,37,0,206,0,0,0,0,0,0,0,143,0,166,0,0,0,156,0,147,0,71,0,0,0,97,0,137,0,138,0,19,0,55,0,91,0,73,0,177,0,162,0,0,0,0,0,4,0,0,0,7,0,210,0,214,0,111,0,107,0,132,0,250,0,169,0,8,0,146,0,227,0,220,0,209,0,172,0,37,0,0,0,51,0,0,0,19,0,245,0,130,0,0,0,229,0,137,0,159,0,5,0,94,0,2,0,205,0,234,0,0,0,76,0,119,0,0,0,118,0,29,0,193,0,203,0,69,0,100,0,250,0,161,0,242,0,0,0,173,0,0,0,232,0,0,0,0,0,84,0,0,0,43,0,101,0,94,0,0,0,92,0,94,0,98,0,0,0,0,0,136,0,0,0,173,0,0,0,0,0,100,0,14,0,88,0,251,0,188,0,240,0,41,0,0,0,0,0,11,0,6,0,49,0,99,0,0,0,125,0,190,0,251,0,255,0,98,0,136,0,0,0,0,0,0,0,249,0,178,0,33,0,0,0,41,0,0,0,0,0,121,0,24,0,164,0,0,0,14,0,73,0,29,0,228,0,143,0,0,0,204,0,208,0,76,0,117,0,139,0,55,0,106,0,0,0,0,0,239,0,0,0,57,0,0,0,246,0,0,0,102,0,0,0,87,0,203,0,71,0,0,0,0,0,146,0,236,0,75,0,89,0,149,0,237,0,0,0,0,0,106,0,144,0,79,0,105,0,0,0,38,0,212,0,106,0,123,0,120,0,0,0,14,0,0,0,0,0,109,0,247,0,102,0,25,0,130,0,92,0,0,0,166,0,78,0,209,0,110,0,0,0,100,0,146,0,100,0,43,0,25,0,117,0,0,0,232,0,222,0,176,0,60,0,18,0,253,0,119,0,201,0,235,0,255,0,91,0,0,0,118,0,186,0,159,0,150,0,68,0,214,0,94,0,0,0,173,0,25,0,94,0,10,0,242,0,179,0,11,0,15,0,90,0,54,0,153,0,147,0,94,0,108,0,42,0,0,0,84,0,235,0,249,0,0,0,149,0,209,0,154,0,249,0,0,0,0,0,231,0,160,0,238,0,102,0,91,0,0,0,0,0,0,0,227,0,97,0,39,0,217,0,109,0,73,0,53,0,159,0,155,0,206,0,112,0,8,0,0,0,16,0,54,0,0,0,38,0,175,0,48,0,82,0,9,0,59,0,35,0,13,0,217,0,99,0,141,0,122,0,229,0,62,0,150,0,227,0,23,0,0,0,178,0,89,0,0,0,255,0,61,0,11,0,132,0,0,0,53,0,220,0,243,0,201,0,141,0,0,0,0,0,0,0,195,0,10,0,169,0,235,0,207,0,95,0,252,0,113,0,0,0,248,0,248,0,24,0,207,0,0,0,113,0,244,0,0,0,151,0,23,0,88,0,24,0,24,0,0,0,1,0,241,0,0,0,0,0,47,0,219,0,0,0,0,0,131,0,116,0,16,0,218,0,185,0,227,0,0,0,129,0,123,0,112,0,22,0,16,0,44,0,187,0);
signal scenario_full  : scenario_type := (46,31,32,31,204,31,141,31,41,31,155,31,6,31,6,30,222,31,222,30,212,31,179,31,179,30,15,31,155,31,145,31,145,30,28,31,187,31,187,30,84,31,35,31,21,31,17,31,164,31,42,31,215,31,64,31,16,31,162,31,195,31,149,31,221,31,221,30,65,31,116,31,203,31,92,31,92,30,84,31,245,31,34,31,99,31,99,30,183,31,206,31,206,30,172,31,194,31,211,31,211,30,46,31,46,30,229,31,229,30,229,29,207,31,207,30,207,29,50,31,224,31,224,30,236,31,116,31,116,30,116,29,137,31,187,31,178,31,210,31,62,31,100,31,228,31,106,31,222,31,119,31,31,31,44,31,44,30,237,31,237,30,60,31,149,31,237,31,103,31,103,30,176,31,25,31,39,31,39,30,39,29,98,31,177,31,117,31,117,30,117,29,105,31,62,31,62,30,56,31,27,31,114,31,114,30,92,31,182,31,71,31,71,30,18,31,89,31,55,31,163,31,152,31,152,30,68,31,169,31,124,31,218,31,42,31,135,31,23,31,116,31,61,31,244,31,244,30,22,31,100,31,44,31,169,31,251,31,82,31,32,31,173,31,75,31,52,31,81,31,237,31,226,31,19,31,242,31,242,30,242,29,218,31,156,31,130,31,210,31,129,31,129,30,160,31,110,31,100,31,121,31,203,31,150,31,4,31,63,31,89,31,32,31,13,31,13,30,176,31,176,30,176,29,22,31,188,31,129,31,177,31,154,31,48,31,48,30,23,31,23,30,86,31,14,31,54,31,54,30,187,31,9,31,205,31,38,31,244,31,99,31,103,31,103,30,187,31,59,31,31,31,239,31,139,31,68,31,198,31,198,30,151,31,170,31,170,30,58,31,150,31,19,31,180,31,117,31,197,31,108,31,248,31,128,31,20,31,188,31,76,31,226,31,226,30,153,31,153,30,218,31,177,31,248,31,16,31,41,31,41,30,251,31,207,31,144,31,83,31,235,31,6,31,231,31,104,31,104,30,28,31,185,31,79,31,188,31,254,31,57,31,130,31,145,31,194,31,174,31,141,31,177,31,177,30,177,29,177,28,177,27,52,31,19,31,37,31,239,31,239,30,239,29,239,28,239,27,61,31,161,31,65,31,90,31,188,31,188,30,188,29,32,31,100,31,108,31,159,31,69,31,242,31,140,31,98,31,106,31,158,31,201,31,201,30,57,31,76,31,194,31,18,31,204,31,204,30,86,31,148,31,154,31,48,31,54,31,54,30,54,29,54,28,114,31,163,31,163,30,23,31,155,31,124,31,237,31,80,31,233,31,108,31,60,31,60,30,135,31,80,31,80,30,55,31,90,31,203,31,127,31,131,31,214,31,164,31,213,31,89,31,201,31,128,31,211,31,223,31,101,31,242,31,195,31,64,31,64,30,185,31,41,31,149,31,143,31,251,31,146,31,34,31,34,30,180,31,117,31,192,31,146,31,146,30,146,29,215,31,239,31,211,31,187,31,48,31,115,31,203,31,192,31,109,31,75,31,233,31,155,31,229,31,99,31,215,31,215,30,52,31,210,31,121,31,121,30,120,31,246,31,61,31,192,31,113,31,163,31,189,31,20,31,215,31,215,30,230,31,211,31,211,30,211,29,9,31,234,31,234,30,170,31,233,31,44,31,251,31,85,31,167,31,83,31,83,30,35,31,38,31,169,31,169,30,194,31,32,31,179,31,169,31,38,31,175,31,36,31,97,31,169,31,69,31,30,31,120,31,238,31,74,31,96,31,28,31,127,31,9,31,70,31,220,31,20,31,52,31,230,31,69,31,69,30,96,31,126,31,118,31,175,31,205,31,112,31,33,31,167,31,138,31,96,31,96,30,153,31,153,30,203,31,79,31,28,31,154,31,127,31,34,31,34,30,227,31,227,30,50,31,50,30,84,31,231,31,213,31,210,31,63,31,43,31,137,31,137,30,179,31,177,31,82,31,19,31,168,31,68,31,125,31,56,31,222,31,149,31,132,31,24,31,210,31,193,31,196,31,128,31,116,31,140,31,113,31,97,31,126,31,208,31,107,31,107,30,46,31,180,31,227,31,30,31,229,31,78,31,104,31,24,31,98,31,16,31,110,31,39,31,39,30,39,29,84,31,97,31,101,31,101,30,101,29,244,31,226,31,124,31,174,31,143,31,219,31,236,31,80,31,58,31,205,31,187,31,165,31,86,31,138,31,147,31,128,31,76,31,142,31,179,31,10,31,10,30,10,29,87,31,87,30,87,29,125,31,125,30,4,31,59,31,117,31,78,31,129,31,7,31,148,31,87,31,131,31,202,31,140,31,54,31,196,31,29,31,43,31,67,31,67,30,196,31,224,31,43,31,143,31,51,31,129,31,213,31,213,30,115,31,210,31,220,31,220,30,6,31,6,30,6,29,45,31,77,31,217,31,23,31,118,31,105,31,105,30,105,29,1,31,204,31,204,30,148,31,171,31,165,31,75,31,75,30,81,31,23,31,157,31,86,31,28,31,100,31,43,31,203,31,160,31,163,31,163,30,163,29,189,31,231,31,231,30,121,31,171,31,254,31,188,31,140,31,251,31,64,31,64,30,100,31,233,31,254,31,254,30,254,29,153,31,153,30,153,29,48,31,135,31,71,31,30,31,65,31,164,31,2,31,186,31,186,30,200,31,212,31,175,31,146,31,242,31,226,31,170,31,192,31,219,31,157,31,157,30,222,31,222,30,222,29,28,31,242,31,6,31,123,31,123,30,201,31,37,31,206,31,206,30,206,29,206,28,143,31,166,31,166,30,156,31,147,31,71,31,71,30,97,31,137,31,138,31,19,31,55,31,91,31,73,31,177,31,162,31,162,30,162,29,4,31,4,30,7,31,210,31,214,31,111,31,107,31,132,31,250,31,169,31,8,31,146,31,227,31,220,31,209,31,172,31,37,31,37,30,51,31,51,30,19,31,245,31,130,31,130,30,229,31,137,31,159,31,5,31,94,31,2,31,205,31,234,31,234,30,76,31,119,31,119,30,118,31,29,31,193,31,203,31,69,31,100,31,250,31,161,31,242,31,242,30,173,31,173,30,232,31,232,30,232,29,84,31,84,30,43,31,101,31,94,31,94,30,92,31,94,31,98,31,98,30,98,29,136,31,136,30,173,31,173,30,173,29,100,31,14,31,88,31,251,31,188,31,240,31,41,31,41,30,41,29,11,31,6,31,49,31,99,31,99,30,125,31,190,31,251,31,255,31,98,31,136,31,136,30,136,29,136,28,249,31,178,31,33,31,33,30,41,31,41,30,41,29,121,31,24,31,164,31,164,30,14,31,73,31,29,31,228,31,143,31,143,30,204,31,208,31,76,31,117,31,139,31,55,31,106,31,106,30,106,29,239,31,239,30,57,31,57,30,246,31,246,30,102,31,102,30,87,31,203,31,71,31,71,30,71,29,146,31,236,31,75,31,89,31,149,31,237,31,237,30,237,29,106,31,144,31,79,31,105,31,105,30,38,31,212,31,106,31,123,31,120,31,120,30,14,31,14,30,14,29,109,31,247,31,102,31,25,31,130,31,92,31,92,30,166,31,78,31,209,31,110,31,110,30,100,31,146,31,100,31,43,31,25,31,117,31,117,30,232,31,222,31,176,31,60,31,18,31,253,31,119,31,201,31,235,31,255,31,91,31,91,30,118,31,186,31,159,31,150,31,68,31,214,31,94,31,94,30,173,31,25,31,94,31,10,31,242,31,179,31,11,31,15,31,90,31,54,31,153,31,147,31,94,31,108,31,42,31,42,30,84,31,235,31,249,31,249,30,149,31,209,31,154,31,249,31,249,30,249,29,231,31,160,31,238,31,102,31,91,31,91,30,91,29,91,28,227,31,97,31,39,31,217,31,109,31,73,31,53,31,159,31,155,31,206,31,112,31,8,31,8,30,16,31,54,31,54,30,38,31,175,31,48,31,82,31,9,31,59,31,35,31,13,31,217,31,99,31,141,31,122,31,229,31,62,31,150,31,227,31,23,31,23,30,178,31,89,31,89,30,255,31,61,31,11,31,132,31,132,30,53,31,220,31,243,31,201,31,141,31,141,30,141,29,141,28,195,31,10,31,169,31,235,31,207,31,95,31,252,31,113,31,113,30,248,31,248,31,24,31,207,31,207,30,113,31,244,31,244,30,151,31,23,31,88,31,24,31,24,31,24,30,1,31,241,31,241,30,241,29,47,31,219,31,219,30,219,29,131,31,116,31,16,31,218,31,185,31,227,31,227,30,129,31,123,31,112,31,22,31,16,31,44,31,187,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
