-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 871;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (105,0,14,0,0,0,112,0,180,0,236,0,254,0,90,0,122,0,10,0,201,0,50,0,21,0,68,0,106,0,105,0,46,0,17,0,0,0,0,0,35,0,90,0,0,0,144,0,160,0,245,0,219,0,0,0,66,0,139,0,205,0,123,0,194,0,0,0,64,0,46,0,90,0,227,0,46,0,121,0,57,0,207,0,10,0,94,0,87,0,189,0,22,0,0,0,24,0,131,0,168,0,92,0,127,0,0,0,31,0,0,0,81,0,0,0,220,0,183,0,0,0,3,0,78,0,0,0,0,0,0,0,0,0,251,0,180,0,137,0,0,0,0,0,211,0,227,0,169,0,137,0,38,0,0,0,217,0,83,0,121,0,214,0,0,0,3,0,115,0,97,0,233,0,209,0,0,0,68,0,39,0,83,0,145,0,3,0,90,0,210,0,0,0,0,0,93,0,182,0,58,0,132,0,0,0,77,0,127,0,238,0,71,0,120,0,161,0,62,0,138,0,77,0,248,0,221,0,107,0,143,0,51,0,200,0,0,0,17,0,0,0,233,0,35,0,0,0,80,0,95,0,98,0,73,0,139,0,102,0,108,0,0,0,138,0,0,0,80,0,155,0,233,0,228,0,198,0,0,0,169,0,73,0,186,0,73,0,159,0,212,0,0,0,46,0,210,0,52,0,0,0,54,0,0,0,53,0,0,0,194,0,30,0,82,0,193,0,137,0,87,0,32,0,11,0,178,0,0,0,149,0,144,0,0,0,39,0,189,0,0,0,12,0,234,0,244,0,83,0,2,0,239,0,156,0,179,0,14,0,0,0,95,0,223,0,50,0,32,0,177,0,188,0,0,0,223,0,134,0,217,0,203,0,45,0,62,0,133,0,211,0,51,0,15,0,147,0,117,0,158,0,208,0,106,0,0,0,238,0,186,0,54,0,73,0,119,0,68,0,35,0,0,0,255,0,217,0,253,0,10,0,3,0,0,0,146,0,15,0,182,0,227,0,0,0,122,0,0,0,64,0,60,0,221,0,59,0,128,0,187,0,0,0,144,0,0,0,132,0,242,0,48,0,38,0,171,0,142,0,208,0,0,0,137,0,202,0,103,0,0,0,0,0,0,0,160,0,10,0,73,0,63,0,0,0,0,0,191,0,186,0,20,0,247,0,23,0,0,0,199,0,0,0,0,0,5,0,169,0,226,0,58,0,0,0,146,0,179,0,0,0,110,0,213,0,103,0,29,0,0,0,205,0,241,0,0,0,0,0,0,0,178,0,142,0,155,0,233,0,0,0,0,0,158,0,0,0,168,0,0,0,240,0,145,0,70,0,0,0,118,0,70,0,15,0,133,0,48,0,158,0,80,0,228,0,0,0,0,0,180,0,244,0,242,0,68,0,0,0,174,0,0,0,112,0,189,0,0,0,210,0,38,0,74,0,98,0,226,0,79,0,93,0,165,0,249,0,87,0,255,0,0,0,0,0,246,0,156,0,167,0,89,0,204,0,173,0,0,0,243,0,227,0,79,0,0,0,139,0,0,0,0,0,44,0,0,0,98,0,199,0,0,0,172,0,177,0,181,0,136,0,152,0,195,0,118,0,107,0,0,0,219,0,236,0,22,0,0,0,92,0,7,0,0,0,235,0,239,0,227,0,109,0,178,0,130,0,231,0,176,0,180,0,255,0,70,0,0,0,231,0,0,0,78,0,54,0,185,0,153,0,15,0,160,0,0,0,54,0,4,0,114,0,112,0,0,0,195,0,149,0,116,0,254,0,81,0,60,0,189,0,246,0,106,0,189,0,85,0,148,0,236,0,0,0,157,0,221,0,0,0,0,0,103,0,240,0,249,0,0,0,178,0,169,0,253,0,98,0,71,0,141,0,222,0,15,0,232,0,134,0,0,0,79,0,48,0,115,0,0,0,77,0,46,0,184,0,85,0,135,0,121,0,149,0,135,0,208,0,0,0,120,0,0,0,129,0,97,0,237,0,64,0,103,0,78,0,6,0,199,0,0,0,31,0,242,0,38,0,82,0,153,0,57,0,81,0,134,0,35,0,97,0,9,0,24,0,191,0,105,0,50,0,184,0,18,0,121,0,78,0,228,0,35,0,0,0,213,0,160,0,137,0,209,0,153,0,200,0,97,0,105,0,203,0,240,0,50,0,194,0,184,0,110,0,101,0,190,0,0,0,6,0,183,0,202,0,104,0,71,0,198,0,155,0,192,0,8,0,0,0,232,0,29,0,127,0,181,0,123,0,254,0,95,0,64,0,229,0,253,0,0,0,152,0,13,0,223,0,4,0,51,0,143,0,158,0,250,0,0,0,188,0,0,0,0,0,62,0,4,0,0,0,0,0,237,0,0,0,228,0,208,0,179,0,108,0,75,0,88,0,73,0,208,0,222,0,96,0,59,0,211,0,120,0,149,0,119,0,0,0,238,0,240,0,227,0,0,0,51,0,31,0,0,0,204,0,0,0,84,0,225,0,13,0,51,0,109,0,176,0,190,0,122,0,17,0,111,0,71,0,162,0,121,0,28,0,0,0,53,0,253,0,228,0,143,0,218,0,238,0,51,0,111,0,87,0,227,0,74,0,0,0,174,0,92,0,20,0,0,0,235,0,93,0,244,0,23,0,137,0,2,0,0,0,217,0,239,0,145,0,185,0,0,0,184,0,108,0,0,0,245,0,0,0,0,0,150,0,68,0,0,0,188,0,74,0,216,0,39,0,231,0,0,0,0,0,42,0,35,0,35,0,58,0,106,0,231,0,127,0,228,0,177,0,0,0,252,0,0,0,141,0,66,0,251,0,0,0,0,0,127,0,199,0,185,0,122,0,246,0,0,0,0,0,147,0,202,0,122,0,118,0,0,0,94,0,23,0,61,0,0,0,138,0,73,0,168,0,76,0,0,0,196,0,22,0,223,0,48,0,131,0,0,0,0,0,220,0,52,0,208,0,161,0,153,0,0,0,0,0,180,0,144,0,224,0,0,0,0,0,167,0,0,0,108,0,0,0,41,0,46,0,212,0,202,0,0,0,129,0,0,0,0,0,33,0,6,0,0,0,85,0,199,0,0,0,60,0,70,0,200,0,147,0,222,0,112,0,174,0,0,0,0,0,108,0,77,0,90,0,183,0,215,0,183,0,16,0,168,0,178,0,105,0,253,0,0,0,91,0,81,0,0,0,170,0,166,0,80,0,46,0,6,0,219,0,236,0,0,0,0,0,27,0,113,0,30,0,44,0,54,0,0,0,0,0,75,0,146,0,170,0,0,0,43,0,175,0,24,0,12,0,245,0,175,0,212,0,96,0,175,0,0,0,111,0,255,0,62,0,189,0,0,0,0,0,189,0,39,0,34,0,0,0,194,0,203,0,105,0,253,0,183,0,0,0,0,0,189,0,154,0,12,0,49,0,141,0,26,0,147,0,40,0,0,0,108,0,209,0,0,0,75,0,0,0,187,0,6,0,199,0,229,0,195,0,143,0,210,0,141,0,0,0,242,0,0,0,138,0,0,0,59,0,229,0,185,0,0,0,216,0,224,0,83,0,36,0,0,0,0,0,19,0,154,0,143,0,16,0,83,0,177,0,197,0,87,0,29,0,64,0,211,0,40,0,235,0,148,0,240,0,57,0,92,0,21,0,0,0,136,0,0,0,178,0,23,0,119,0,58,0,234,0,252,0,215,0,94,0,25,0,8,0,50,0,195,0,93,0,192,0,0,0,92,0,0,0,0,0,140,0,222,0,229,0,25,0,138,0,19,0,181,0,0,0,0,0,161,0,1,0,0,0,55,0,187,0,129,0,162,0,91,0,122,0,137,0,202,0,253,0,255,0,65,0,240,0,9,0,209,0,182,0,62,0,88,0,31,0,78,0,233,0,73,0,198,0,91,0,136,0,33,0,197,0,250,0,89,0);
signal scenario_full  : scenario_type := (105,31,14,31,14,30,112,31,180,31,236,31,254,31,90,31,122,31,10,31,201,31,50,31,21,31,68,31,106,31,105,31,46,31,17,31,17,30,17,29,35,31,90,31,90,30,144,31,160,31,245,31,219,31,219,30,66,31,139,31,205,31,123,31,194,31,194,30,64,31,46,31,90,31,227,31,46,31,121,31,57,31,207,31,10,31,94,31,87,31,189,31,22,31,22,30,24,31,131,31,168,31,92,31,127,31,127,30,31,31,31,30,81,31,81,30,220,31,183,31,183,30,3,31,78,31,78,30,78,29,78,28,78,27,251,31,180,31,137,31,137,30,137,29,211,31,227,31,169,31,137,31,38,31,38,30,217,31,83,31,121,31,214,31,214,30,3,31,115,31,97,31,233,31,209,31,209,30,68,31,39,31,83,31,145,31,3,31,90,31,210,31,210,30,210,29,93,31,182,31,58,31,132,31,132,30,77,31,127,31,238,31,71,31,120,31,161,31,62,31,138,31,77,31,248,31,221,31,107,31,143,31,51,31,200,31,200,30,17,31,17,30,233,31,35,31,35,30,80,31,95,31,98,31,73,31,139,31,102,31,108,31,108,30,138,31,138,30,80,31,155,31,233,31,228,31,198,31,198,30,169,31,73,31,186,31,73,31,159,31,212,31,212,30,46,31,210,31,52,31,52,30,54,31,54,30,53,31,53,30,194,31,30,31,82,31,193,31,137,31,87,31,32,31,11,31,178,31,178,30,149,31,144,31,144,30,39,31,189,31,189,30,12,31,234,31,244,31,83,31,2,31,239,31,156,31,179,31,14,31,14,30,95,31,223,31,50,31,32,31,177,31,188,31,188,30,223,31,134,31,217,31,203,31,45,31,62,31,133,31,211,31,51,31,15,31,147,31,117,31,158,31,208,31,106,31,106,30,238,31,186,31,54,31,73,31,119,31,68,31,35,31,35,30,255,31,217,31,253,31,10,31,3,31,3,30,146,31,15,31,182,31,227,31,227,30,122,31,122,30,64,31,60,31,221,31,59,31,128,31,187,31,187,30,144,31,144,30,132,31,242,31,48,31,38,31,171,31,142,31,208,31,208,30,137,31,202,31,103,31,103,30,103,29,103,28,160,31,10,31,73,31,63,31,63,30,63,29,191,31,186,31,20,31,247,31,23,31,23,30,199,31,199,30,199,29,5,31,169,31,226,31,58,31,58,30,146,31,179,31,179,30,110,31,213,31,103,31,29,31,29,30,205,31,241,31,241,30,241,29,241,28,178,31,142,31,155,31,233,31,233,30,233,29,158,31,158,30,168,31,168,30,240,31,145,31,70,31,70,30,118,31,70,31,15,31,133,31,48,31,158,31,80,31,228,31,228,30,228,29,180,31,244,31,242,31,68,31,68,30,174,31,174,30,112,31,189,31,189,30,210,31,38,31,74,31,98,31,226,31,79,31,93,31,165,31,249,31,87,31,255,31,255,30,255,29,246,31,156,31,167,31,89,31,204,31,173,31,173,30,243,31,227,31,79,31,79,30,139,31,139,30,139,29,44,31,44,30,98,31,199,31,199,30,172,31,177,31,181,31,136,31,152,31,195,31,118,31,107,31,107,30,219,31,236,31,22,31,22,30,92,31,7,31,7,30,235,31,239,31,227,31,109,31,178,31,130,31,231,31,176,31,180,31,255,31,70,31,70,30,231,31,231,30,78,31,54,31,185,31,153,31,15,31,160,31,160,30,54,31,4,31,114,31,112,31,112,30,195,31,149,31,116,31,254,31,81,31,60,31,189,31,246,31,106,31,189,31,85,31,148,31,236,31,236,30,157,31,221,31,221,30,221,29,103,31,240,31,249,31,249,30,178,31,169,31,253,31,98,31,71,31,141,31,222,31,15,31,232,31,134,31,134,30,79,31,48,31,115,31,115,30,77,31,46,31,184,31,85,31,135,31,121,31,149,31,135,31,208,31,208,30,120,31,120,30,129,31,97,31,237,31,64,31,103,31,78,31,6,31,199,31,199,30,31,31,242,31,38,31,82,31,153,31,57,31,81,31,134,31,35,31,97,31,9,31,24,31,191,31,105,31,50,31,184,31,18,31,121,31,78,31,228,31,35,31,35,30,213,31,160,31,137,31,209,31,153,31,200,31,97,31,105,31,203,31,240,31,50,31,194,31,184,31,110,31,101,31,190,31,190,30,6,31,183,31,202,31,104,31,71,31,198,31,155,31,192,31,8,31,8,30,232,31,29,31,127,31,181,31,123,31,254,31,95,31,64,31,229,31,253,31,253,30,152,31,13,31,223,31,4,31,51,31,143,31,158,31,250,31,250,30,188,31,188,30,188,29,62,31,4,31,4,30,4,29,237,31,237,30,228,31,208,31,179,31,108,31,75,31,88,31,73,31,208,31,222,31,96,31,59,31,211,31,120,31,149,31,119,31,119,30,238,31,240,31,227,31,227,30,51,31,31,31,31,30,204,31,204,30,84,31,225,31,13,31,51,31,109,31,176,31,190,31,122,31,17,31,111,31,71,31,162,31,121,31,28,31,28,30,53,31,253,31,228,31,143,31,218,31,238,31,51,31,111,31,87,31,227,31,74,31,74,30,174,31,92,31,20,31,20,30,235,31,93,31,244,31,23,31,137,31,2,31,2,30,217,31,239,31,145,31,185,31,185,30,184,31,108,31,108,30,245,31,245,30,245,29,150,31,68,31,68,30,188,31,74,31,216,31,39,31,231,31,231,30,231,29,42,31,35,31,35,31,58,31,106,31,231,31,127,31,228,31,177,31,177,30,252,31,252,30,141,31,66,31,251,31,251,30,251,29,127,31,199,31,185,31,122,31,246,31,246,30,246,29,147,31,202,31,122,31,118,31,118,30,94,31,23,31,61,31,61,30,138,31,73,31,168,31,76,31,76,30,196,31,22,31,223,31,48,31,131,31,131,30,131,29,220,31,52,31,208,31,161,31,153,31,153,30,153,29,180,31,144,31,224,31,224,30,224,29,167,31,167,30,108,31,108,30,41,31,46,31,212,31,202,31,202,30,129,31,129,30,129,29,33,31,6,31,6,30,85,31,199,31,199,30,60,31,70,31,200,31,147,31,222,31,112,31,174,31,174,30,174,29,108,31,77,31,90,31,183,31,215,31,183,31,16,31,168,31,178,31,105,31,253,31,253,30,91,31,81,31,81,30,170,31,166,31,80,31,46,31,6,31,219,31,236,31,236,30,236,29,27,31,113,31,30,31,44,31,54,31,54,30,54,29,75,31,146,31,170,31,170,30,43,31,175,31,24,31,12,31,245,31,175,31,212,31,96,31,175,31,175,30,111,31,255,31,62,31,189,31,189,30,189,29,189,31,39,31,34,31,34,30,194,31,203,31,105,31,253,31,183,31,183,30,183,29,189,31,154,31,12,31,49,31,141,31,26,31,147,31,40,31,40,30,108,31,209,31,209,30,75,31,75,30,187,31,6,31,199,31,229,31,195,31,143,31,210,31,141,31,141,30,242,31,242,30,138,31,138,30,59,31,229,31,185,31,185,30,216,31,224,31,83,31,36,31,36,30,36,29,19,31,154,31,143,31,16,31,83,31,177,31,197,31,87,31,29,31,64,31,211,31,40,31,235,31,148,31,240,31,57,31,92,31,21,31,21,30,136,31,136,30,178,31,23,31,119,31,58,31,234,31,252,31,215,31,94,31,25,31,8,31,50,31,195,31,93,31,192,31,192,30,92,31,92,30,92,29,140,31,222,31,229,31,25,31,138,31,19,31,181,31,181,30,181,29,161,31,1,31,1,30,55,31,187,31,129,31,162,31,91,31,122,31,137,31,202,31,253,31,255,31,65,31,240,31,9,31,209,31,182,31,62,31,88,31,31,31,78,31,233,31,73,31,198,31,91,31,136,31,33,31,197,31,250,31,89,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
