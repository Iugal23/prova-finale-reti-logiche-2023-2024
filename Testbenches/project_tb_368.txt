-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 782;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (157,0,124,0,164,0,0,0,0,0,221,0,125,0,56,0,5,0,204,0,17,0,128,0,0,0,65,0,0,0,192,0,159,0,152,0,159,0,34,0,0,0,228,0,184,0,133,0,0,0,226,0,35,0,55,0,20,0,13,0,249,0,134,0,0,0,115,0,0,0,0,0,100,0,182,0,35,0,8,0,182,0,0,0,114,0,83,0,0,0,182,0,4,0,192,0,0,0,139,0,195,0,0,0,245,0,185,0,192,0,171,0,252,0,149,0,106,0,32,0,176,0,12,0,44,0,195,0,116,0,242,0,56,0,0,0,156,0,249,0,29,0,131,0,86,0,250,0,43,0,114,0,176,0,246,0,0,0,81,0,199,0,103,0,204,0,238,0,31,0,0,0,130,0,70,0,159,0,242,0,0,0,151,0,3,0,112,0,166,0,218,0,241,0,89,0,67,0,20,0,0,0,229,0,224,0,0,0,160,0,159,0,205,0,50,0,0,0,25,0,52,0,255,0,187,0,181,0,155,0,134,0,118,0,58,0,0,0,131,0,66,0,248,0,0,0,65,0,119,0,153,0,0,0,96,0,0,0,168,0,206,0,180,0,0,0,84,0,87,0,0,0,73,0,0,0,103,0,0,0,198,0,122,0,0,0,107,0,210,0,25,0,85,0,195,0,209,0,0,0,131,0,0,0,129,0,0,0,136,0,0,0,0,0,34,0,255,0,123,0,141,0,0,0,0,0,155,0,145,0,155,0,118,0,62,0,20,0,0,0,55,0,97,0,176,0,134,0,170,0,109,0,216,0,82,0,221,0,0,0,32,0,227,0,106,0,0,0,153,0,0,0,177,0,118,0,0,0,0,0,197,0,0,0,191,0,68,0,0,0,146,0,178,0,30,0,112,0,0,0,0,0,160,0,31,0,255,0,231,0,73,0,0,0,129,0,206,0,121,0,0,0,54,0,179,0,181,0,182,0,23,0,0,0,223,0,213,0,141,0,17,0,255,0,14,0,100,0,137,0,70,0,157,0,41,0,80,0,81,0,180,0,0,0,148,0,0,0,237,0,27,0,245,0,0,0,130,0,136,0,0,0,175,0,248,0,97,0,168,0,0,0,245,0,76,0,129,0,205,0,0,0,82,0,136,0,236,0,0,0,98,0,185,0,139,0,179,0,218,0,0,0,0,0,58,0,114,0,27,0,0,0,68,0,172,0,97,0,150,0,134,0,150,0,0,0,0,0,159,0,0,0,84,0,81,0,0,0,42,0,199,0,81,0,0,0,0,0,197,0,234,0,166,0,172,0,233,0,137,0,88,0,0,0,146,0,227,0,239,0,138,0,67,0,83,0,236,0,199,0,0,0,147,0,122,0,91,0,107,0,94,0,128,0,74,0,0,0,37,0,10,0,128,0,228,0,0,0,59,0,61,0,243,0,7,0,42,0,171,0,74,0,112,0,27,0,12,0,67,0,0,0,111,0,54,0,199,0,223,0,216,0,158,0,72,0,110,0,25,0,140,0,18,0,46,0,94,0,24,0,156,0,29,0,0,0,15,0,51,0,251,0,0,0,92,0,10,0,108,0,0,0,98,0,133,0,171,0,0,0,81,0,17,0,75,0,225,0,0,0,0,0,96,0,251,0,0,0,26,0,0,0,0,0,1,0,45,0,160,0,4,0,206,0,47,0,62,0,2,0,119,0,231,0,225,0,0,0,161,0,11,0,238,0,0,0,157,0,0,0,50,0,199,0,106,0,90,0,3,0,193,0,0,0,0,0,123,0,64,0,176,0,246,0,194,0,0,0,191,0,215,0,167,0,144,0,58,0,243,0,0,0,252,0,38,0,0,0,62,0,97,0,205,0,0,0,0,0,178,0,82,0,0,0,232,0,221,0,210,0,12,0,71,0,244,0,102,0,197,0,93,0,0,0,118,0,30,0,186,0,54,0,94,0,229,0,112,0,0,0,0,0,18,0,0,0,63,0,145,0,0,0,112,0,228,0,0,0,0,0,244,0,0,0,14,0,15,0,0,0,110,0,59,0,254,0,104,0,117,0,179,0,26,0,49,0,135,0,33,0,156,0,251,0,15,0,4,0,0,0,247,0,112,0,0,0,0,0,86,0,204,0,193,0,177,0,167,0,210,0,177,0,60,0,167,0,0,0,170,0,155,0,132,0,57,0,7,0,0,0,106,0,128,0,0,0,81,0,106,0,151,0,167,0,125,0,17,0,77,0,0,0,0,0,54,0,131,0,157,0,82,0,235,0,51,0,236,0,65,0,70,0,76,0,106,0,69,0,0,0,20,0,140,0,16,0,122,0,77,0,40,0,5,0,0,0,0,0,0,0,125,0,246,0,110,0,0,0,118,0,199,0,0,0,149,0,17,0,223,0,88,0,162,0,180,0,49,0,0,0,80,0,111,0,0,0,72,0,171,0,0,0,9,0,211,0,0,0,0,0,32,0,4,0,195,0,112,0,145,0,214,0,63,0,125,0,113,0,52,0,0,0,31,0,116,0,70,0,93,0,0,0,103,0,0,0,19,0,197,0,0,0,131,0,235,0,0,0,0,0,122,0,85,0,0,0,239,0,11,0,124,0,119,0,230,0,203,0,81,0,232,0,150,0,210,0,63,0,0,0,223,0,233,0,81,0,169,0,2,0,238,0,13,0,13,0,87,0,50,0,201,0,0,0,0,0,80,0,175,0,133,0,94,0,0,0,75,0,165,0,67,0,216,0,206,0,0,0,176,0,0,0,119,0,0,0,46,0,62,0,96,0,191,0,143,0,120,0,104,0,202,0,238,0,6,0,232,0,0,0,194,0,0,0,0,0,0,0,0,0,237,0,28,0,0,0,82,0,42,0,205,0,248,0,3,0,40,0,34,0,0,0,185,0,244,0,101,0,19,0,139,0,38,0,103,0,118,0,18,0,138,0,103,0,0,0,7,0,0,0,84,0,133,0,150,0,231,0,79,0,0,0,131,0,46,0,163,0,0,0,0,0,195,0,229,0,0,0,40,0,62,0,0,0,238,0,224,0,48,0,30,0,160,0,0,0,220,0,196,0,1,0,206,0,157,0,11,0,218,0,0,0,63,0,151,0,112,0,183,0,101,0,0,0,149,0,0,0,0,0,114,0,89,0,231,0,0,0,0,0,60,0,89,0,130,0,224,0,0,0,0,0,185,0,30,0,153,0,51,0,192,0,0,0,83,0,0,0,0,0,135,0,241,0,217,0,7,0,0,0,231,0,107,0,6,0,186,0,28,0,195,0,0,0,0,0,125,0,171,0,221,0,125,0,78,0,0,0,109,0,156,0,133,0,0,0,64,0,124,0,175,0,59,0,0,0,222,0,21,0,0,0,46,0,142,0,44,0,56,0,62,0,114,0,230,0,0,0,0,0,90,0,0,0,219,0,23,0,195,0,130,0,32,0,149,0,139,0,0,0,30,0,0,0,80,0,215,0,55,0,56,0,1,0,0,0,238,0,127,0,243,0,0,0,47,0,215,0,110,0,165,0,0,0);
signal scenario_full  : scenario_type := (157,31,124,31,164,31,164,30,164,29,221,31,125,31,56,31,5,31,204,31,17,31,128,31,128,30,65,31,65,30,192,31,159,31,152,31,159,31,34,31,34,30,228,31,184,31,133,31,133,30,226,31,35,31,55,31,20,31,13,31,249,31,134,31,134,30,115,31,115,30,115,29,100,31,182,31,35,31,8,31,182,31,182,30,114,31,83,31,83,30,182,31,4,31,192,31,192,30,139,31,195,31,195,30,245,31,185,31,192,31,171,31,252,31,149,31,106,31,32,31,176,31,12,31,44,31,195,31,116,31,242,31,56,31,56,30,156,31,249,31,29,31,131,31,86,31,250,31,43,31,114,31,176,31,246,31,246,30,81,31,199,31,103,31,204,31,238,31,31,31,31,30,130,31,70,31,159,31,242,31,242,30,151,31,3,31,112,31,166,31,218,31,241,31,89,31,67,31,20,31,20,30,229,31,224,31,224,30,160,31,159,31,205,31,50,31,50,30,25,31,52,31,255,31,187,31,181,31,155,31,134,31,118,31,58,31,58,30,131,31,66,31,248,31,248,30,65,31,119,31,153,31,153,30,96,31,96,30,168,31,206,31,180,31,180,30,84,31,87,31,87,30,73,31,73,30,103,31,103,30,198,31,122,31,122,30,107,31,210,31,25,31,85,31,195,31,209,31,209,30,131,31,131,30,129,31,129,30,136,31,136,30,136,29,34,31,255,31,123,31,141,31,141,30,141,29,155,31,145,31,155,31,118,31,62,31,20,31,20,30,55,31,97,31,176,31,134,31,170,31,109,31,216,31,82,31,221,31,221,30,32,31,227,31,106,31,106,30,153,31,153,30,177,31,118,31,118,30,118,29,197,31,197,30,191,31,68,31,68,30,146,31,178,31,30,31,112,31,112,30,112,29,160,31,31,31,255,31,231,31,73,31,73,30,129,31,206,31,121,31,121,30,54,31,179,31,181,31,182,31,23,31,23,30,223,31,213,31,141,31,17,31,255,31,14,31,100,31,137,31,70,31,157,31,41,31,80,31,81,31,180,31,180,30,148,31,148,30,237,31,27,31,245,31,245,30,130,31,136,31,136,30,175,31,248,31,97,31,168,31,168,30,245,31,76,31,129,31,205,31,205,30,82,31,136,31,236,31,236,30,98,31,185,31,139,31,179,31,218,31,218,30,218,29,58,31,114,31,27,31,27,30,68,31,172,31,97,31,150,31,134,31,150,31,150,30,150,29,159,31,159,30,84,31,81,31,81,30,42,31,199,31,81,31,81,30,81,29,197,31,234,31,166,31,172,31,233,31,137,31,88,31,88,30,146,31,227,31,239,31,138,31,67,31,83,31,236,31,199,31,199,30,147,31,122,31,91,31,107,31,94,31,128,31,74,31,74,30,37,31,10,31,128,31,228,31,228,30,59,31,61,31,243,31,7,31,42,31,171,31,74,31,112,31,27,31,12,31,67,31,67,30,111,31,54,31,199,31,223,31,216,31,158,31,72,31,110,31,25,31,140,31,18,31,46,31,94,31,24,31,156,31,29,31,29,30,15,31,51,31,251,31,251,30,92,31,10,31,108,31,108,30,98,31,133,31,171,31,171,30,81,31,17,31,75,31,225,31,225,30,225,29,96,31,251,31,251,30,26,31,26,30,26,29,1,31,45,31,160,31,4,31,206,31,47,31,62,31,2,31,119,31,231,31,225,31,225,30,161,31,11,31,238,31,238,30,157,31,157,30,50,31,199,31,106,31,90,31,3,31,193,31,193,30,193,29,123,31,64,31,176,31,246,31,194,31,194,30,191,31,215,31,167,31,144,31,58,31,243,31,243,30,252,31,38,31,38,30,62,31,97,31,205,31,205,30,205,29,178,31,82,31,82,30,232,31,221,31,210,31,12,31,71,31,244,31,102,31,197,31,93,31,93,30,118,31,30,31,186,31,54,31,94,31,229,31,112,31,112,30,112,29,18,31,18,30,63,31,145,31,145,30,112,31,228,31,228,30,228,29,244,31,244,30,14,31,15,31,15,30,110,31,59,31,254,31,104,31,117,31,179,31,26,31,49,31,135,31,33,31,156,31,251,31,15,31,4,31,4,30,247,31,112,31,112,30,112,29,86,31,204,31,193,31,177,31,167,31,210,31,177,31,60,31,167,31,167,30,170,31,155,31,132,31,57,31,7,31,7,30,106,31,128,31,128,30,81,31,106,31,151,31,167,31,125,31,17,31,77,31,77,30,77,29,54,31,131,31,157,31,82,31,235,31,51,31,236,31,65,31,70,31,76,31,106,31,69,31,69,30,20,31,140,31,16,31,122,31,77,31,40,31,5,31,5,30,5,29,5,28,125,31,246,31,110,31,110,30,118,31,199,31,199,30,149,31,17,31,223,31,88,31,162,31,180,31,49,31,49,30,80,31,111,31,111,30,72,31,171,31,171,30,9,31,211,31,211,30,211,29,32,31,4,31,195,31,112,31,145,31,214,31,63,31,125,31,113,31,52,31,52,30,31,31,116,31,70,31,93,31,93,30,103,31,103,30,19,31,197,31,197,30,131,31,235,31,235,30,235,29,122,31,85,31,85,30,239,31,11,31,124,31,119,31,230,31,203,31,81,31,232,31,150,31,210,31,63,31,63,30,223,31,233,31,81,31,169,31,2,31,238,31,13,31,13,31,87,31,50,31,201,31,201,30,201,29,80,31,175,31,133,31,94,31,94,30,75,31,165,31,67,31,216,31,206,31,206,30,176,31,176,30,119,31,119,30,46,31,62,31,96,31,191,31,143,31,120,31,104,31,202,31,238,31,6,31,232,31,232,30,194,31,194,30,194,29,194,28,194,27,237,31,28,31,28,30,82,31,42,31,205,31,248,31,3,31,40,31,34,31,34,30,185,31,244,31,101,31,19,31,139,31,38,31,103,31,118,31,18,31,138,31,103,31,103,30,7,31,7,30,84,31,133,31,150,31,231,31,79,31,79,30,131,31,46,31,163,31,163,30,163,29,195,31,229,31,229,30,40,31,62,31,62,30,238,31,224,31,48,31,30,31,160,31,160,30,220,31,196,31,1,31,206,31,157,31,11,31,218,31,218,30,63,31,151,31,112,31,183,31,101,31,101,30,149,31,149,30,149,29,114,31,89,31,231,31,231,30,231,29,60,31,89,31,130,31,224,31,224,30,224,29,185,31,30,31,153,31,51,31,192,31,192,30,83,31,83,30,83,29,135,31,241,31,217,31,7,31,7,30,231,31,107,31,6,31,186,31,28,31,195,31,195,30,195,29,125,31,171,31,221,31,125,31,78,31,78,30,109,31,156,31,133,31,133,30,64,31,124,31,175,31,59,31,59,30,222,31,21,31,21,30,46,31,142,31,44,31,56,31,62,31,114,31,230,31,230,30,230,29,90,31,90,30,219,31,23,31,195,31,130,31,32,31,149,31,139,31,139,30,30,31,30,30,80,31,215,31,55,31,56,31,1,31,1,30,238,31,127,31,243,31,243,30,47,31,215,31,110,31,165,31,165,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
