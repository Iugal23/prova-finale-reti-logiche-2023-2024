-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 580;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (78,0,234,0,163,0,128,0,56,0,10,0,2,0,28,0,58,0,213,0,82,0,141,0,0,0,252,0,0,0,31,0,157,0,251,0,88,0,128,0,13,0,0,0,201,0,0,0,254,0,0,0,113,0,161,0,171,0,86,0,0,0,28,0,178,0,69,0,177,0,206,0,83,0,243,0,132,0,190,0,49,0,0,0,242,0,41,0,97,0,112,0,182,0,0,0,174,0,0,0,212,0,127,0,46,0,48,0,83,0,220,0,70,0,251,0,246,0,25,0,0,0,9,0,112,0,7,0,0,0,158,0,58,0,0,0,0,0,87,0,170,0,186,0,235,0,8,0,58,0,59,0,79,0,96,0,0,0,145,0,190,0,120,0,0,0,59,0,147,0,5,0,47,0,0,0,234,0,197,0,41,0,211,0,158,0,105,0,95,0,51,0,124,0,141,0,33,0,51,0,25,0,185,0,61,0,223,0,115,0,244,0,0,0,0,0,234,0,229,0,32,0,245,0,185,0,0,0,62,0,118,0,239,0,247,0,250,0,220,0,124,0,162,0,149,0,194,0,160,0,62,0,200,0,161,0,184,0,136,0,0,0,61,0,0,0,0,0,42,0,69,0,250,0,172,0,0,0,0,0,0,0,177,0,15,0,165,0,173,0,32,0,0,0,0,0,227,0,228,0,14,0,251,0,178,0,200,0,232,0,32,0,28,0,131,0,204,0,155,0,7,0,173,0,247,0,111,0,153,0,51,0,101,0,0,0,168,0,0,0,0,0,18,0,0,0,0,0,21,0,73,0,12,0,0,0,108,0,114,0,238,0,206,0,0,0,224,0,107,0,127,0,4,0,231,0,162,0,66,0,186,0,20,0,230,0,0,0,225,0,205,0,59,0,168,0,104,0,53,0,82,0,226,0,3,0,0,0,0,0,80,0,66,0,109,0,233,0,120,0,10,0,0,0,191,0,166,0,0,0,107,0,228,0,216,0,152,0,97,0,0,0,234,0,137,0,152,0,65,0,184,0,0,0,196,0,89,0,0,0,115,0,204,0,0,0,88,0,138,0,0,0,245,0,176,0,33,0,74,0,22,0,24,0,64,0,225,0,202,0,4,0,28,0,234,0,92,0,149,0,229,0,0,0,185,0,224,0,147,0,152,0,116,0,180,0,0,0,125,0,53,0,149,0,140,0,0,0,234,0,0,0,186,0,2,0,0,0,30,0,117,0,111,0,0,0,0,0,0,0,212,0,78,0,199,0,74,0,0,0,206,0,203,0,230,0,234,0,147,0,108,0,62,0,107,0,0,0,55,0,70,0,11,0,90,0,255,0,0,0,8,0,43,0,12,0,55,0,136,0,145,0,236,0,131,0,245,0,23,0,118,0,64,0,0,0,0,0,116,0,0,0,219,0,212,0,194,0,74,0,4,0,34,0,0,0,197,0,0,0,239,0,195,0,0,0,167,0,0,0,138,0,89,0,87,0,121,0,141,0,185,0,139,0,251,0,116,0,120,0,0,0,159,0,158,0,175,0,182,0,38,0,162,0,157,0,29,0,27,0,245,0,33,0,90,0,98,0,0,0,24,0,51,0,221,0,201,0,0,0,2,0,191,0,151,0,216,0,142,0,169,0,0,0,31,0,49,0,124,0,71,0,134,0,0,0,81,0,208,0,131,0,213,0,0,0,49,0,0,0,120,0,70,0,0,0,160,0,239,0,7,0,13,0,249,0,242,0,153,0,239,0,119,0,225,0,156,0,97,0,77,0,126,0,131,0,0,0,115,0,191,0,82,0,42,0,1,0,216,0,18,0,229,0,52,0,96,0,221,0,67,0,102,0,137,0,235,0,5,0,33,0,136,0,39,0,101,0,242,0,68,0,99,0,142,0,36,0,229,0,129,0,71,0,209,0,64,0,50,0,146,0,27,0,0,0,0,0,0,0,116,0,215,0,234,0,228,0,112,0,102,0,0,0,0,0,0,0,98,0,25,0,106,0,79,0,30,0,76,0,143,0,11,0,89,0,47,0,213,0,199,0,21,0,249,0,210,0,28,0,0,0,154,0,95,0,159,0,221,0,0,0,245,0,181,0,150,0,0,0,20,0,0,0,134,0,161,0,0,0,233,0,87,0,197,0,42,0,71,0,162,0,185,0,0,0,31,0,247,0,131,0,68,0,0,0,74,0,0,0,210,0,193,0,112,0,233,0,0,0,244,0,182,0,204,0,107,0,196,0,172,0,244,0,69,0,101,0,76,0,67,0,213,0,131,0,193,0,145,0,47,0,53,0,178,0,12,0,0,0,245,0,248,0,130,0,144,0,3,0,208,0,110,0,12,0,140,0,102,0,220,0,171,0,108,0,52,0,245,0,52,0,0,0,0,0,62,0,116,0,6,0,136,0,196,0,134,0,161,0,136,0,134,0,128,0,169,0,28,0,122,0,16,0,45,0,164,0,0,0,69,0,238,0,38,0,6,0,0,0,66,0,0,0,90,0,0,0,31,0,206,0,109,0,251,0,0,0,102,0,84,0,254,0,0,0,0,0,140,0,81,0,117,0,166,0,13,0,227,0,207,0,0,0,0,0,44,0,4,0,0,0,50,0,173,0,167,0,184,0);
signal scenario_full  : scenario_type := (78,31,234,31,163,31,128,31,56,31,10,31,2,31,28,31,58,31,213,31,82,31,141,31,141,30,252,31,252,30,31,31,157,31,251,31,88,31,128,31,13,31,13,30,201,31,201,30,254,31,254,30,113,31,161,31,171,31,86,31,86,30,28,31,178,31,69,31,177,31,206,31,83,31,243,31,132,31,190,31,49,31,49,30,242,31,41,31,97,31,112,31,182,31,182,30,174,31,174,30,212,31,127,31,46,31,48,31,83,31,220,31,70,31,251,31,246,31,25,31,25,30,9,31,112,31,7,31,7,30,158,31,58,31,58,30,58,29,87,31,170,31,186,31,235,31,8,31,58,31,59,31,79,31,96,31,96,30,145,31,190,31,120,31,120,30,59,31,147,31,5,31,47,31,47,30,234,31,197,31,41,31,211,31,158,31,105,31,95,31,51,31,124,31,141,31,33,31,51,31,25,31,185,31,61,31,223,31,115,31,244,31,244,30,244,29,234,31,229,31,32,31,245,31,185,31,185,30,62,31,118,31,239,31,247,31,250,31,220,31,124,31,162,31,149,31,194,31,160,31,62,31,200,31,161,31,184,31,136,31,136,30,61,31,61,30,61,29,42,31,69,31,250,31,172,31,172,30,172,29,172,28,177,31,15,31,165,31,173,31,32,31,32,30,32,29,227,31,228,31,14,31,251,31,178,31,200,31,232,31,32,31,28,31,131,31,204,31,155,31,7,31,173,31,247,31,111,31,153,31,51,31,101,31,101,30,168,31,168,30,168,29,18,31,18,30,18,29,21,31,73,31,12,31,12,30,108,31,114,31,238,31,206,31,206,30,224,31,107,31,127,31,4,31,231,31,162,31,66,31,186,31,20,31,230,31,230,30,225,31,205,31,59,31,168,31,104,31,53,31,82,31,226,31,3,31,3,30,3,29,80,31,66,31,109,31,233,31,120,31,10,31,10,30,191,31,166,31,166,30,107,31,228,31,216,31,152,31,97,31,97,30,234,31,137,31,152,31,65,31,184,31,184,30,196,31,89,31,89,30,115,31,204,31,204,30,88,31,138,31,138,30,245,31,176,31,33,31,74,31,22,31,24,31,64,31,225,31,202,31,4,31,28,31,234,31,92,31,149,31,229,31,229,30,185,31,224,31,147,31,152,31,116,31,180,31,180,30,125,31,53,31,149,31,140,31,140,30,234,31,234,30,186,31,2,31,2,30,30,31,117,31,111,31,111,30,111,29,111,28,212,31,78,31,199,31,74,31,74,30,206,31,203,31,230,31,234,31,147,31,108,31,62,31,107,31,107,30,55,31,70,31,11,31,90,31,255,31,255,30,8,31,43,31,12,31,55,31,136,31,145,31,236,31,131,31,245,31,23,31,118,31,64,31,64,30,64,29,116,31,116,30,219,31,212,31,194,31,74,31,4,31,34,31,34,30,197,31,197,30,239,31,195,31,195,30,167,31,167,30,138,31,89,31,87,31,121,31,141,31,185,31,139,31,251,31,116,31,120,31,120,30,159,31,158,31,175,31,182,31,38,31,162,31,157,31,29,31,27,31,245,31,33,31,90,31,98,31,98,30,24,31,51,31,221,31,201,31,201,30,2,31,191,31,151,31,216,31,142,31,169,31,169,30,31,31,49,31,124,31,71,31,134,31,134,30,81,31,208,31,131,31,213,31,213,30,49,31,49,30,120,31,70,31,70,30,160,31,239,31,7,31,13,31,249,31,242,31,153,31,239,31,119,31,225,31,156,31,97,31,77,31,126,31,131,31,131,30,115,31,191,31,82,31,42,31,1,31,216,31,18,31,229,31,52,31,96,31,221,31,67,31,102,31,137,31,235,31,5,31,33,31,136,31,39,31,101,31,242,31,68,31,99,31,142,31,36,31,229,31,129,31,71,31,209,31,64,31,50,31,146,31,27,31,27,30,27,29,27,28,116,31,215,31,234,31,228,31,112,31,102,31,102,30,102,29,102,28,98,31,25,31,106,31,79,31,30,31,76,31,143,31,11,31,89,31,47,31,213,31,199,31,21,31,249,31,210,31,28,31,28,30,154,31,95,31,159,31,221,31,221,30,245,31,181,31,150,31,150,30,20,31,20,30,134,31,161,31,161,30,233,31,87,31,197,31,42,31,71,31,162,31,185,31,185,30,31,31,247,31,131,31,68,31,68,30,74,31,74,30,210,31,193,31,112,31,233,31,233,30,244,31,182,31,204,31,107,31,196,31,172,31,244,31,69,31,101,31,76,31,67,31,213,31,131,31,193,31,145,31,47,31,53,31,178,31,12,31,12,30,245,31,248,31,130,31,144,31,3,31,208,31,110,31,12,31,140,31,102,31,220,31,171,31,108,31,52,31,245,31,52,31,52,30,52,29,62,31,116,31,6,31,136,31,196,31,134,31,161,31,136,31,134,31,128,31,169,31,28,31,122,31,16,31,45,31,164,31,164,30,69,31,238,31,38,31,6,31,6,30,66,31,66,30,90,31,90,30,31,31,206,31,109,31,251,31,251,30,102,31,84,31,254,31,254,30,254,29,140,31,81,31,117,31,166,31,13,31,227,31,207,31,207,30,207,29,44,31,4,31,4,30,50,31,173,31,167,31,184,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
