-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 830;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (103,0,0,0,174,0,218,0,76,0,202,0,130,0,0,0,0,0,134,0,45,0,0,0,75,0,73,0,102,0,185,0,85,0,230,0,210,0,80,0,24,0,82,0,186,0,202,0,210,0,205,0,112,0,0,0,70,0,8,0,0,0,0,0,0,0,238,0,238,0,98,0,0,0,176,0,223,0,26,0,5,0,62,0,188,0,244,0,0,0,119,0,104,0,0,0,185,0,88,0,239,0,8,0,39,0,49,0,0,0,0,0,205,0,195,0,88,0,0,0,82,0,0,0,143,0,153,0,120,0,47,0,208,0,0,0,26,0,129,0,85,0,191,0,17,0,248,0,76,0,0,0,193,0,7,0,112,0,0,0,64,0,54,0,0,0,65,0,38,0,0,0,207,0,145,0,151,0,247,0,195,0,82,0,20,0,100,0,114,0,148,0,172,0,215,0,0,0,220,0,212,0,249,0,0,0,0,0,227,0,207,0,75,0,219,0,75,0,176,0,225,0,243,0,30,0,6,0,226,0,211,0,36,0,131,0,201,0,234,0,65,0,0,0,52,0,76,0,24,0,0,0,251,0,77,0,126,0,52,0,62,0,240,0,16,0,125,0,228,0,222,0,20,0,95,0,124,0,157,0,165,0,211,0,20,0,0,0,0,0,79,0,48,0,72,0,117,0,0,0,157,0,166,0,172,0,119,0,144,0,75,0,18,0,0,0,181,0,0,0,55,0,253,0,150,0,0,0,0,0,226,0,64,0,105,0,45,0,101,0,73,0,121,0,195,0,166,0,59,0,177,0,119,0,206,0,75,0,113,0,252,0,242,0,161,0,0,0,143,0,113,0,0,0,0,0,163,0,193,0,148,0,0,0,26,0,0,0,79,0,183,0,88,0,10,0,0,0,0,0,216,0,174,0,224,0,99,0,0,0,226,0,83,0,45,0,184,0,10,0,87,0,202,0,202,0,0,0,227,0,213,0,127,0,150,0,163,0,42,0,0,0,218,0,195,0,0,0,27,0,0,0,196,0,190,0,229,0,102,0,204,0,151,0,11,0,229,0,165,0,167,0,0,0,240,0,127,0,3,0,146,0,9,0,248,0,167,0,59,0,63,0,116,0,9,0,88,0,174,0,163,0,35,0,67,0,127,0,239,0,115,0,84,0,41,0,118,0,183,0,237,0,0,0,84,0,216,0,0,0,214,0,29,0,0,0,0,0,219,0,132,0,41,0,10,0,65,0,96,0,10,0,117,0,43,0,75,0,178,0,6,0,245,0,173,0,129,0,105,0,131,0,0,0,34,0,128,0,175,0,231,0,0,0,14,0,178,0,239,0,175,0,101,0,0,0,251,0,165,0,37,0,214,0,163,0,127,0,208,0,0,0,3,0,9,0,244,0,0,0,245,0,21,0,244,0,51,0,61,0,42,0,66,0,0,0,0,0,0,0,31,0,0,0,0,0,249,0,74,0,96,0,189,0,37,0,202,0,109,0,126,0,222,0,61,0,221,0,161,0,179,0,0,0,0,0,105,0,146,0,106,0,204,0,112,0,254,0,0,0,13,0,98,0,225,0,25,0,127,0,214,0,0,0,188,0,138,0,188,0,39,0,3,0,246,0,181,0,119,0,64,0,35,0,0,0,8,0,44,0,0,0,0,0,245,0,240,0,88,0,0,0,0,0,42,0,58,0,0,0,116,0,0,0,0,0,6,0,0,0,58,0,108,0,212,0,0,0,255,0,0,0,0,0,148,0,77,0,30,0,219,0,76,0,161,0,86,0,35,0,194,0,137,0,244,0,220,0,103,0,0,0,198,0,233,0,0,0,128,0,219,0,0,0,0,0,64,0,36,0,248,0,0,0,94,0,0,0,0,0,139,0,0,0,177,0,69,0,221,0,48,0,198,0,191,0,165,0,27,0,52,0,0,0,0,0,158,0,0,0,212,0,0,0,173,0,213,0,84,0,226,0,121,0,106,0,0,0,0,0,123,0,114,0,61,0,167,0,214,0,80,0,21,0,137,0,184,0,64,0,0,0,42,0,54,0,0,0,106,0,81,0,225,0,0,0,133,0,117,0,0,0,0,0,229,0,206,0,250,0,0,0,0,0,180,0,145,0,0,0,139,0,224,0,110,0,221,0,192,0,4,0,29,0,97,0,0,0,115,0,0,0,0,0,141,0,0,0,20,0,211,0,165,0,62,0,57,0,0,0,110,0,27,0,7,0,0,0,0,0,113,0,125,0,0,0,0,0,0,0,220,0,246,0,1,0,42,0,231,0,66,0,239,0,157,0,140,0,137,0,0,0,0,0,220,0,0,0,49,0,68,0,165,0,0,0,132,0,178,0,57,0,0,0,0,0,6,0,0,0,0,0,52,0,0,0,25,0,134,0,216,0,108,0,130,0,127,0,0,0,133,0,0,0,61,0,217,0,168,0,107,0,118,0,202,0,97,0,93,0,237,0,105,0,123,0,72,0,95,0,0,0,0,0,47,0,223,0,207,0,22,0,0,0,192,0,164,0,237,0,241,0,100,0,0,0,182,0,65,0,0,0,0,0,19,0,140,0,51,0,197,0,191,0,212,0,184,0,151,0,140,0,248,0,201,0,0,0,0,0,101,0,235,0,115,0,0,0,0,0,58,0,0,0,0,0,155,0,199,0,235,0,228,0,195,0,123,0,36,0,130,0,141,0,158,0,26,0,0,0,0,0,36,0,113,0,129,0,248,0,205,0,223,0,101,0,145,0,99,0,0,0,0,0,0,0,73,0,119,0,17,0,124,0,31,0,43,0,200,0,0,0,85,0,110,0,50,0,239,0,150,0,53,0,170,0,188,0,49,0,194,0,64,0,202,0,0,0,124,0,79,0,154,0,111,0,0,0,253,0,61,0,54,0,41,0,141,0,78,0,115,0,20,0,0,0,113,0,188,0,155,0,85,0,176,0,74,0,38,0,130,0,64,0,20,0,0,0,92,0,225,0,201,0,85,0,197,0,0,0,201,0,200,0,0,0,165,0,31,0,91,0,0,0,92,0,0,0,184,0,105,0,240,0,28,0,109,0,136,0,233,0,130,0,177,0,251,0,152,0,163,0,241,0,159,0,0,0,212,0,0,0,21,0,16,0,15,0,52,0,185,0,253,0,176,0,0,0,45,0,42,0,0,0,117,0,39,0,220,0,0,0,198,0,180,0,141,0,197,0,57,0,224,0,143,0,196,0,0,0,28,0,83,0,60,0,0,0,40,0,158,0,154,0,174,0,243,0,100,0,59,0,180,0,0,0,175,0,0,0,239,0,0,0,79,0,5,0,221,0,91,0,83,0,32,0,172,0,119,0,56,0,14,0,170,0,13,0,39,0,38,0,58,0,78,0,135,0,142,0,0,0,214,0,228,0,0,0,234,0,107,0,110,0,251,0,54,0,0,0,118,0,56,0,27,0,0,0,0,0,41,0,59,0,176,0,0,0,221,0,126,0,198,0,27,0,214,0,168,0,146,0,0,0,193,0,158,0,60,0,81,0,53,0,0,0,142,0,6,0,130,0,2,0,73,0,34,0,144,0,217,0,40,0,118,0,43,0,80,0,152,0,30,0,0,0,68,0,190,0,228,0,194,0,245,0,57,0,0,0,0,0,0,0,83,0,0,0,153,0,205,0,250,0,130,0,146,0,227,0,0,0,152,0,16,0,35,0,65,0,0,0,0,0,56,0,154,0,0,0,89,0,183,0,164,0,0,0,0,0);
signal scenario_full  : scenario_type := (103,31,103,30,174,31,218,31,76,31,202,31,130,31,130,30,130,29,134,31,45,31,45,30,75,31,73,31,102,31,185,31,85,31,230,31,210,31,80,31,24,31,82,31,186,31,202,31,210,31,205,31,112,31,112,30,70,31,8,31,8,30,8,29,8,28,238,31,238,31,98,31,98,30,176,31,223,31,26,31,5,31,62,31,188,31,244,31,244,30,119,31,104,31,104,30,185,31,88,31,239,31,8,31,39,31,49,31,49,30,49,29,205,31,195,31,88,31,88,30,82,31,82,30,143,31,153,31,120,31,47,31,208,31,208,30,26,31,129,31,85,31,191,31,17,31,248,31,76,31,76,30,193,31,7,31,112,31,112,30,64,31,54,31,54,30,65,31,38,31,38,30,207,31,145,31,151,31,247,31,195,31,82,31,20,31,100,31,114,31,148,31,172,31,215,31,215,30,220,31,212,31,249,31,249,30,249,29,227,31,207,31,75,31,219,31,75,31,176,31,225,31,243,31,30,31,6,31,226,31,211,31,36,31,131,31,201,31,234,31,65,31,65,30,52,31,76,31,24,31,24,30,251,31,77,31,126,31,52,31,62,31,240,31,16,31,125,31,228,31,222,31,20,31,95,31,124,31,157,31,165,31,211,31,20,31,20,30,20,29,79,31,48,31,72,31,117,31,117,30,157,31,166,31,172,31,119,31,144,31,75,31,18,31,18,30,181,31,181,30,55,31,253,31,150,31,150,30,150,29,226,31,64,31,105,31,45,31,101,31,73,31,121,31,195,31,166,31,59,31,177,31,119,31,206,31,75,31,113,31,252,31,242,31,161,31,161,30,143,31,113,31,113,30,113,29,163,31,193,31,148,31,148,30,26,31,26,30,79,31,183,31,88,31,10,31,10,30,10,29,216,31,174,31,224,31,99,31,99,30,226,31,83,31,45,31,184,31,10,31,87,31,202,31,202,31,202,30,227,31,213,31,127,31,150,31,163,31,42,31,42,30,218,31,195,31,195,30,27,31,27,30,196,31,190,31,229,31,102,31,204,31,151,31,11,31,229,31,165,31,167,31,167,30,240,31,127,31,3,31,146,31,9,31,248,31,167,31,59,31,63,31,116,31,9,31,88,31,174,31,163,31,35,31,67,31,127,31,239,31,115,31,84,31,41,31,118,31,183,31,237,31,237,30,84,31,216,31,216,30,214,31,29,31,29,30,29,29,219,31,132,31,41,31,10,31,65,31,96,31,10,31,117,31,43,31,75,31,178,31,6,31,245,31,173,31,129,31,105,31,131,31,131,30,34,31,128,31,175,31,231,31,231,30,14,31,178,31,239,31,175,31,101,31,101,30,251,31,165,31,37,31,214,31,163,31,127,31,208,31,208,30,3,31,9,31,244,31,244,30,245,31,21,31,244,31,51,31,61,31,42,31,66,31,66,30,66,29,66,28,31,31,31,30,31,29,249,31,74,31,96,31,189,31,37,31,202,31,109,31,126,31,222,31,61,31,221,31,161,31,179,31,179,30,179,29,105,31,146,31,106,31,204,31,112,31,254,31,254,30,13,31,98,31,225,31,25,31,127,31,214,31,214,30,188,31,138,31,188,31,39,31,3,31,246,31,181,31,119,31,64,31,35,31,35,30,8,31,44,31,44,30,44,29,245,31,240,31,88,31,88,30,88,29,42,31,58,31,58,30,116,31,116,30,116,29,6,31,6,30,58,31,108,31,212,31,212,30,255,31,255,30,255,29,148,31,77,31,30,31,219,31,76,31,161,31,86,31,35,31,194,31,137,31,244,31,220,31,103,31,103,30,198,31,233,31,233,30,128,31,219,31,219,30,219,29,64,31,36,31,248,31,248,30,94,31,94,30,94,29,139,31,139,30,177,31,69,31,221,31,48,31,198,31,191,31,165,31,27,31,52,31,52,30,52,29,158,31,158,30,212,31,212,30,173,31,213,31,84,31,226,31,121,31,106,31,106,30,106,29,123,31,114,31,61,31,167,31,214,31,80,31,21,31,137,31,184,31,64,31,64,30,42,31,54,31,54,30,106,31,81,31,225,31,225,30,133,31,117,31,117,30,117,29,229,31,206,31,250,31,250,30,250,29,180,31,145,31,145,30,139,31,224,31,110,31,221,31,192,31,4,31,29,31,97,31,97,30,115,31,115,30,115,29,141,31,141,30,20,31,211,31,165,31,62,31,57,31,57,30,110,31,27,31,7,31,7,30,7,29,113,31,125,31,125,30,125,29,125,28,220,31,246,31,1,31,42,31,231,31,66,31,239,31,157,31,140,31,137,31,137,30,137,29,220,31,220,30,49,31,68,31,165,31,165,30,132,31,178,31,57,31,57,30,57,29,6,31,6,30,6,29,52,31,52,30,25,31,134,31,216,31,108,31,130,31,127,31,127,30,133,31,133,30,61,31,217,31,168,31,107,31,118,31,202,31,97,31,93,31,237,31,105,31,123,31,72,31,95,31,95,30,95,29,47,31,223,31,207,31,22,31,22,30,192,31,164,31,237,31,241,31,100,31,100,30,182,31,65,31,65,30,65,29,19,31,140,31,51,31,197,31,191,31,212,31,184,31,151,31,140,31,248,31,201,31,201,30,201,29,101,31,235,31,115,31,115,30,115,29,58,31,58,30,58,29,155,31,199,31,235,31,228,31,195,31,123,31,36,31,130,31,141,31,158,31,26,31,26,30,26,29,36,31,113,31,129,31,248,31,205,31,223,31,101,31,145,31,99,31,99,30,99,29,99,28,73,31,119,31,17,31,124,31,31,31,43,31,200,31,200,30,85,31,110,31,50,31,239,31,150,31,53,31,170,31,188,31,49,31,194,31,64,31,202,31,202,30,124,31,79,31,154,31,111,31,111,30,253,31,61,31,54,31,41,31,141,31,78,31,115,31,20,31,20,30,113,31,188,31,155,31,85,31,176,31,74,31,38,31,130,31,64,31,20,31,20,30,92,31,225,31,201,31,85,31,197,31,197,30,201,31,200,31,200,30,165,31,31,31,91,31,91,30,92,31,92,30,184,31,105,31,240,31,28,31,109,31,136,31,233,31,130,31,177,31,251,31,152,31,163,31,241,31,159,31,159,30,212,31,212,30,21,31,16,31,15,31,52,31,185,31,253,31,176,31,176,30,45,31,42,31,42,30,117,31,39,31,220,31,220,30,198,31,180,31,141,31,197,31,57,31,224,31,143,31,196,31,196,30,28,31,83,31,60,31,60,30,40,31,158,31,154,31,174,31,243,31,100,31,59,31,180,31,180,30,175,31,175,30,239,31,239,30,79,31,5,31,221,31,91,31,83,31,32,31,172,31,119,31,56,31,14,31,170,31,13,31,39,31,38,31,58,31,78,31,135,31,142,31,142,30,214,31,228,31,228,30,234,31,107,31,110,31,251,31,54,31,54,30,118,31,56,31,27,31,27,30,27,29,41,31,59,31,176,31,176,30,221,31,126,31,198,31,27,31,214,31,168,31,146,31,146,30,193,31,158,31,60,31,81,31,53,31,53,30,142,31,6,31,130,31,2,31,73,31,34,31,144,31,217,31,40,31,118,31,43,31,80,31,152,31,30,31,30,30,68,31,190,31,228,31,194,31,245,31,57,31,57,30,57,29,57,28,83,31,83,30,153,31,205,31,250,31,130,31,146,31,227,31,227,30,152,31,16,31,35,31,65,31,65,30,65,29,56,31,154,31,154,30,89,31,183,31,164,31,164,30,164,29);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
