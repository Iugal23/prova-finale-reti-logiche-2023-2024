-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 688;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (205,0,132,0,147,0,188,0,0,0,215,0,230,0,185,0,206,0,135,0,17,0,224,0,12,0,252,0,76,0,16,0,0,0,0,0,24,0,156,0,240,0,0,0,166,0,0,0,122,0,20,0,0,0,215,0,0,0,72,0,213,0,151,0,78,0,130,0,0,0,250,0,226,0,200,0,190,0,0,0,74,0,115,0,95,0,105,0,0,0,0,0,122,0,246,0,218,0,98,0,131,0,140,0,189,0,33,0,0,0,88,0,241,0,227,0,0,0,81,0,200,0,95,0,11,0,191,0,74,0,7,0,186,0,94,0,0,0,88,0,76,0,177,0,0,0,157,0,185,0,86,0,94,0,170,0,136,0,112,0,155,0,99,0,186,0,0,0,109,0,234,0,190,0,43,0,55,0,154,0,96,0,58,0,101,0,48,0,0,0,242,0,0,0,211,0,7,0,80,0,245,0,139,0,118,0,0,0,12,0,225,0,17,0,173,0,40,0,50,0,224,0,0,0,247,0,94,0,114,0,19,0,94,0,76,0,195,0,0,0,130,0,210,0,183,0,124,0,217,0,109,0,73,0,156,0,121,0,229,0,237,0,0,0,146,0,213,0,34,0,0,0,244,0,159,0,205,0,0,0,187,0,27,0,0,0,162,0,167,0,0,0,171,0,75,0,59,0,0,0,0,0,138,0,10,0,12,0,195,0,214,0,174,0,65,0,3,0,112,0,56,0,60,0,34,0,0,0,0,0,115,0,0,0,0,0,0,0,99,0,98,0,226,0,95,0,60,0,0,0,64,0,106,0,0,0,26,0,61,0,0,0,14,0,61,0,213,0,50,0,237,0,105,0,130,0,223,0,172,0,135,0,161,0,202,0,174,0,96,0,55,0,168,0,0,0,250,0,172,0,141,0,130,0,168,0,218,0,0,0,63,0,0,0,10,0,111,0,193,0,0,0,203,0,10,0,223,0,236,0,52,0,103,0,115,0,250,0,236,0,178,0,0,0,81,0,137,0,44,0,167,0,140,0,0,0,0,0,76,0,128,0,145,0,0,0,116,0,204,0,151,0,93,0,99,0,0,0,208,0,199,0,90,0,207,0,0,0,188,0,240,0,20,0,123,0,0,0,21,0,0,0,219,0,234,0,221,0,170,0,111,0,0,0,211,0,161,0,206,0,184,0,78,0,0,0,64,0,0,0,219,0,0,0,244,0,8,0,11,0,155,0,33,0,0,0,38,0,201,0,40,0,13,0,83,0,18,0,219,0,175,0,168,0,216,0,0,0,251,0,97,0,133,0,0,0,7,0,236,0,103,0,235,0,230,0,92,0,0,0,28,0,93,0,14,0,247,0,98,0,0,0,62,0,181,0,251,0,10,0,92,0,228,0,165,0,153,0,94,0,0,0,0,0,243,0,138,0,217,0,0,0,112,0,121,0,53,0,22,0,92,0,79,0,98,0,111,0,41,0,66,0,242,0,0,0,0,0,106,0,0,0,100,0,80,0,0,0,87,0,211,0,157,0,0,0,147,0,254,0,181,0,137,0,0,0,0,0,224,0,0,0,44,0,73,0,0,0,240,0,155,0,46,0,84,0,128,0,0,0,0,0,0,0,251,0,245,0,226,0,0,0,207,0,28,0,138,0,39,0,196,0,127,0,142,0,219,0,101,0,184,0,127,0,79,0,88,0,254,0,7,0,227,0,98,0,177,0,234,0,89,0,145,0,97,0,0,0,0,0,0,0,68,0,34,0,205,0,70,0,16,0,214,0,85,0,0,0,226,0,99,0,220,0,51,0,139,0,116,0,224,0,210,0,45,0,0,0,198,0,145,0,0,0,0,0,158,0,35,0,213,0,230,0,249,0,28,0,243,0,87,0,165,0,0,0,47,0,124,0,232,0,174,0,145,0,0,0,157,0,157,0,155,0,0,0,122,0,88,0,0,0,109,0,29,0,0,0,139,0,0,0,0,0,205,0,78,0,0,0,112,0,22,0,135,0,184,0,149,0,0,0,164,0,131,0,148,0,250,0,33,0,48,0,151,0,0,0,213,0,113,0,9,0,219,0,0,0,211,0,82,0,0,0,0,0,26,0,0,0,0,0,225,0,192,0,8,0,179,0,29,0,10,0,34,0,250,0,125,0,41,0,210,0,196,0,130,0,170,0,27,0,0,0,191,0,131,0,45,0,73,0,35,0,208,0,194,0,0,0,85,0,80,0,30,0,163,0,32,0,120,0,12,0,69,0,0,0,232,0,118,0,115,0,82,0,31,0,252,0,51,0,0,0,205,0,70,0,81,0,0,0,113,0,130,0,183,0,7,0,9,0,137,0,48,0,0,0,0,0,57,0,4,0,76,0,135,0,92,0,172,0,43,0,162,0,152,0,117,0,0,0,231,0,0,0,160,0,0,0,57,0,6,0,129,0,70,0,69,0,52,0,176,0,162,0,0,0,61,0,94,0,193,0,232,0,0,0,0,0,171,0,200,0,185,0,184,0,87,0,3,0,72,0,164,0,59,0,29,0,145,0,250,0,252,0,189,0,0,0,111,0,131,0,190,0,0,0,0,0,135,0,157,0,10,0,176,0,6,0,0,0,0,0,197,0,118,0,187,0,34,0,152,0,39,0,242,0,255,0,31,0,99,0,137,0,238,0,1,0,0,0,199,0,187,0,138,0,153,0,18,0,133,0,200,0,65,0,0,0,74,0,57,0,108,0,95,0,236,0,38,0,0,0,130,0,201,0,38,0,162,0,0,0,111,0,5,0,133,0,83,0,0,0,0,0,223,0,0,0,73,0,105,0,177,0,155,0,227,0,187,0,0,0,95,0,246,0,122,0,28,0,28,0,43,0,221,0,0,0,0,0,224,0,143,0,151,0,189,0,0,0,0,0,0,0,0,0,116,0,65,0,66,0,110,0,112,0,240,0,48,0,70,0,84,0,223,0,234,0,244,0,106,0,0,0,0,0,95,0,148,0,177,0,0,0,105,0,101,0,0,0,0,0,61,0,233,0,228,0,0,0,199,0,246,0,82,0,35,0,159,0,221,0,76,0,100,0,187,0,239,0,195,0,252,0,0,0,147,0,176,0,78,0,216,0);
signal scenario_full  : scenario_type := (205,31,132,31,147,31,188,31,188,30,215,31,230,31,185,31,206,31,135,31,17,31,224,31,12,31,252,31,76,31,16,31,16,30,16,29,24,31,156,31,240,31,240,30,166,31,166,30,122,31,20,31,20,30,215,31,215,30,72,31,213,31,151,31,78,31,130,31,130,30,250,31,226,31,200,31,190,31,190,30,74,31,115,31,95,31,105,31,105,30,105,29,122,31,246,31,218,31,98,31,131,31,140,31,189,31,33,31,33,30,88,31,241,31,227,31,227,30,81,31,200,31,95,31,11,31,191,31,74,31,7,31,186,31,94,31,94,30,88,31,76,31,177,31,177,30,157,31,185,31,86,31,94,31,170,31,136,31,112,31,155,31,99,31,186,31,186,30,109,31,234,31,190,31,43,31,55,31,154,31,96,31,58,31,101,31,48,31,48,30,242,31,242,30,211,31,7,31,80,31,245,31,139,31,118,31,118,30,12,31,225,31,17,31,173,31,40,31,50,31,224,31,224,30,247,31,94,31,114,31,19,31,94,31,76,31,195,31,195,30,130,31,210,31,183,31,124,31,217,31,109,31,73,31,156,31,121,31,229,31,237,31,237,30,146,31,213,31,34,31,34,30,244,31,159,31,205,31,205,30,187,31,27,31,27,30,162,31,167,31,167,30,171,31,75,31,59,31,59,30,59,29,138,31,10,31,12,31,195,31,214,31,174,31,65,31,3,31,112,31,56,31,60,31,34,31,34,30,34,29,115,31,115,30,115,29,115,28,99,31,98,31,226,31,95,31,60,31,60,30,64,31,106,31,106,30,26,31,61,31,61,30,14,31,61,31,213,31,50,31,237,31,105,31,130,31,223,31,172,31,135,31,161,31,202,31,174,31,96,31,55,31,168,31,168,30,250,31,172,31,141,31,130,31,168,31,218,31,218,30,63,31,63,30,10,31,111,31,193,31,193,30,203,31,10,31,223,31,236,31,52,31,103,31,115,31,250,31,236,31,178,31,178,30,81,31,137,31,44,31,167,31,140,31,140,30,140,29,76,31,128,31,145,31,145,30,116,31,204,31,151,31,93,31,99,31,99,30,208,31,199,31,90,31,207,31,207,30,188,31,240,31,20,31,123,31,123,30,21,31,21,30,219,31,234,31,221,31,170,31,111,31,111,30,211,31,161,31,206,31,184,31,78,31,78,30,64,31,64,30,219,31,219,30,244,31,8,31,11,31,155,31,33,31,33,30,38,31,201,31,40,31,13,31,83,31,18,31,219,31,175,31,168,31,216,31,216,30,251,31,97,31,133,31,133,30,7,31,236,31,103,31,235,31,230,31,92,31,92,30,28,31,93,31,14,31,247,31,98,31,98,30,62,31,181,31,251,31,10,31,92,31,228,31,165,31,153,31,94,31,94,30,94,29,243,31,138,31,217,31,217,30,112,31,121,31,53,31,22,31,92,31,79,31,98,31,111,31,41,31,66,31,242,31,242,30,242,29,106,31,106,30,100,31,80,31,80,30,87,31,211,31,157,31,157,30,147,31,254,31,181,31,137,31,137,30,137,29,224,31,224,30,44,31,73,31,73,30,240,31,155,31,46,31,84,31,128,31,128,30,128,29,128,28,251,31,245,31,226,31,226,30,207,31,28,31,138,31,39,31,196,31,127,31,142,31,219,31,101,31,184,31,127,31,79,31,88,31,254,31,7,31,227,31,98,31,177,31,234,31,89,31,145,31,97,31,97,30,97,29,97,28,68,31,34,31,205,31,70,31,16,31,214,31,85,31,85,30,226,31,99,31,220,31,51,31,139,31,116,31,224,31,210,31,45,31,45,30,198,31,145,31,145,30,145,29,158,31,35,31,213,31,230,31,249,31,28,31,243,31,87,31,165,31,165,30,47,31,124,31,232,31,174,31,145,31,145,30,157,31,157,31,155,31,155,30,122,31,88,31,88,30,109,31,29,31,29,30,139,31,139,30,139,29,205,31,78,31,78,30,112,31,22,31,135,31,184,31,149,31,149,30,164,31,131,31,148,31,250,31,33,31,48,31,151,31,151,30,213,31,113,31,9,31,219,31,219,30,211,31,82,31,82,30,82,29,26,31,26,30,26,29,225,31,192,31,8,31,179,31,29,31,10,31,34,31,250,31,125,31,41,31,210,31,196,31,130,31,170,31,27,31,27,30,191,31,131,31,45,31,73,31,35,31,208,31,194,31,194,30,85,31,80,31,30,31,163,31,32,31,120,31,12,31,69,31,69,30,232,31,118,31,115,31,82,31,31,31,252,31,51,31,51,30,205,31,70,31,81,31,81,30,113,31,130,31,183,31,7,31,9,31,137,31,48,31,48,30,48,29,57,31,4,31,76,31,135,31,92,31,172,31,43,31,162,31,152,31,117,31,117,30,231,31,231,30,160,31,160,30,57,31,6,31,129,31,70,31,69,31,52,31,176,31,162,31,162,30,61,31,94,31,193,31,232,31,232,30,232,29,171,31,200,31,185,31,184,31,87,31,3,31,72,31,164,31,59,31,29,31,145,31,250,31,252,31,189,31,189,30,111,31,131,31,190,31,190,30,190,29,135,31,157,31,10,31,176,31,6,31,6,30,6,29,197,31,118,31,187,31,34,31,152,31,39,31,242,31,255,31,31,31,99,31,137,31,238,31,1,31,1,30,199,31,187,31,138,31,153,31,18,31,133,31,200,31,65,31,65,30,74,31,57,31,108,31,95,31,236,31,38,31,38,30,130,31,201,31,38,31,162,31,162,30,111,31,5,31,133,31,83,31,83,30,83,29,223,31,223,30,73,31,105,31,177,31,155,31,227,31,187,31,187,30,95,31,246,31,122,31,28,31,28,31,43,31,221,31,221,30,221,29,224,31,143,31,151,31,189,31,189,30,189,29,189,28,189,27,116,31,65,31,66,31,110,31,112,31,240,31,48,31,70,31,84,31,223,31,234,31,244,31,106,31,106,30,106,29,95,31,148,31,177,31,177,30,105,31,101,31,101,30,101,29,61,31,233,31,228,31,228,30,199,31,246,31,82,31,35,31,159,31,221,31,76,31,100,31,187,31,239,31,195,31,252,31,252,30,147,31,176,31,78,31,216,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
