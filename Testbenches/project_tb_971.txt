-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 810;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (141,0,130,0,198,0,122,0,104,0,141,0,11,0,141,0,247,0,245,0,132,0,114,0,209,0,0,0,0,0,70,0,96,0,197,0,238,0,192,0,222,0,35,0,244,0,78,0,0,0,156,0,111,0,15,0,0,0,0,0,65,0,95,0,104,0,87,0,24,0,117,0,219,0,126,0,0,0,0,0,76,0,246,0,126,0,104,0,4,0,57,0,168,0,168,0,151,0,0,0,0,0,232,0,154,0,19,0,0,0,17,0,0,0,185,0,180,0,38,0,91,0,27,0,0,0,69,0,177,0,61,0,25,0,207,0,80,0,179,0,16,0,199,0,69,0,88,0,42,0,0,0,93,0,0,0,93,0,0,0,178,0,87,0,35,0,128,0,153,0,171,0,29,0,11,0,111,0,0,0,172,0,31,0,37,0,255,0,0,0,101,0,158,0,0,0,99,0,239,0,163,0,82,0,107,0,252,0,72,0,198,0,235,0,179,0,101,0,150,0,164,0,0,0,225,0,164,0,160,0,177,0,0,0,130,0,70,0,0,0,0,0,228,0,0,0,87,0,85,0,32,0,0,0,118,0,122,0,155,0,0,0,0,0,69,0,89,0,203,0,0,0,17,0,115,0,25,0,77,0,117,0,0,0,118,0,223,0,41,0,83,0,120,0,33,0,197,0,0,0,0,0,0,0,11,0,245,0,14,0,28,0,58,0,155,0,45,0,180,0,94,0,92,0,83,0,45,0,0,0,51,0,4,0,225,0,178,0,0,0,113,0,239,0,48,0,0,0,64,0,126,0,0,0,64,0,28,0,227,0,0,0,177,0,41,0,0,0,204,0,8,0,28,0,113,0,0,0,200,0,235,0,78,0,152,0,70,0,0,0,0,0,209,0,215,0,0,0,72,0,107,0,171,0,93,0,40,0,86,0,72,0,0,0,45,0,118,0,117,0,20,0,35,0,42,0,15,0,123,0,194,0,228,0,0,0,123,0,0,0,0,0,43,0,107,0,35,0,110,0,149,0,16,0,55,0,0,0,91,0,240,0,128,0,0,0,133,0,131,0,135,0,96,0,0,0,0,0,0,0,0,0,59,0,118,0,72,0,17,0,158,0,5,0,59,0,112,0,0,0,167,0,0,0,18,0,0,0,0,0,152,0,38,0,0,0,69,0,1,0,94,0,0,0,26,0,238,0,137,0,175,0,208,0,0,0,128,0,119,0,0,0,214,0,19,0,0,0,162,0,131,0,0,0,154,0,207,0,198,0,0,0,0,0,106,0,35,0,0,0,197,0,0,0,254,0,86,0,0,0,206,0,37,0,0,0,153,0,144,0,160,0,54,0,0,0,37,0,224,0,150,0,72,0,29,0,103,0,37,0,190,0,0,0,79,0,47,0,139,0,59,0,0,0,0,0,50,0,0,0,58,0,0,0,154,0,0,0,0,0,212,0,103,0,181,0,0,0,194,0,210,0,83,0,31,0,0,0,120,0,241,0,233,0,101,0,74,0,236,0,0,0,146,0,180,0,215,0,229,0,161,0,51,0,0,0,253,0,0,0,229,0,242,0,237,0,153,0,0,0,16,0,39,0,142,0,190,0,171,0,55,0,153,0,171,0,0,0,253,0,196,0,68,0,133,0,249,0,247,0,0,0,239,0,0,0,71,0,236,0,150,0,0,0,150,0,152,0,247,0,39,0,107,0,186,0,201,0,138,0,238,0,11,0,47,0,254,0,152,0,4,0,249,0,14,0,214,0,109,0,138,0,163,0,0,0,154,0,49,0,74,0,217,0,125,0,0,0,0,0,113,0,156,0,0,0,226,0,79,0,68,0,120,0,19,0,171,0,19,0,44,0,145,0,0,0,17,0,193,0,241,0,0,0,64,0,31,0,184,0,10,0,118,0,38,0,0,0,150,0,11,0,0,0,29,0,0,0,4,0,145,0,117,0,170,0,0,0,161,0,116,0,2,0,147,0,15,0,15,0,0,0,123,0,80,0,91,0,205,0,138,0,170,0,38,0,0,0,23,0,111,0,68,0,105,0,199,0,157,0,248,0,200,0,31,0,81,0,129,0,26,0,0,0,202,0,45,0,29,0,191,0,208,0,47,0,241,0,231,0,229,0,177,0,0,0,32,0,0,0,219,0,9,0,86,0,230,0,0,0,88,0,105,0,92,0,0,0,79,0,222,0,139,0,174,0,0,0,133,0,222,0,54,0,6,0,15,0,74,0,182,0,205,0,0,0,18,0,130,0,0,0,13,0,190,0,133,0,107,0,140,0,16,0,33,0,0,0,104,0,0,0,0,0,0,0,114,0,5,0,108,0,0,0,22,0,198,0,37,0,117,0,199,0,159,0,191,0,0,0,92,0,104,0,229,0,79,0,0,0,216,0,227,0,0,0,193,0,228,0,165,0,0,0,62,0,250,0,154,0,151,0,33,0,36,0,38,0,211,0,0,0,140,0,5,0,202,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,150,0,98,0,0,0,100,0,86,0,63,0,153,0,122,0,85,0,255,0,0,0,0,0,0,0,246,0,128,0,228,0,107,0,22,0,171,0,250,0,92,0,0,0,43,0,0,0,0,0,69,0,80,0,33,0,0,0,84,0,46,0,174,0,38,0,223,0,88,0,204,0,0,0,124,0,0,0,129,0,192,0,188,0,8,0,119,0,0,0,126,0,0,0,254,0,182,0,210,0,199,0,36,0,190,0,100,0,41,0,43,0,31,0,144,0,250,0,0,0,174,0,227,0,30,0,89,0,204,0,71,0,21,0,69,0,185,0,0,0,80,0,227,0,0,0,144,0,166,0,44,0,0,0,139,0,96,0,77,0,0,0,0,0,0,0,140,0,138,0,211,0,29,0,161,0,138,0,98,0,119,0,0,0,178,0,189,0,235,0,207,0,10,0,0,0,33,0,54,0,5,0,179,0,63,0,0,0,47,0,0,0,87,0,213,0,225,0,247,0,8,0,143,0,225,0,172,0,13,0,153,0,105,0,103,0,201,0,184,0,53,0,191,0,0,0,179,0,105,0,211,0,143,0,252,0,78,0,66,0,254,0,0,0,117,0,158,0,35,0,23,0,0,0,150,0,166,0,174,0,167,0,61,0,0,0,0,0,0,0,94,0,58,0,167,0,248,0,112,0,159,0,43,0,253,0,151,0,0,0,0,0,90,0,0,0,163,0,203,0,84,0,11,0,55,0,147,0,0,0,212,0,0,0,183,0,28,0,167,0,185,0,49,0,0,0,201,0,123,0,233,0,26,0,67,0,0,0,0,0,201,0,177,0,0,0,183,0,53,0,237,0,0,0,73,0,198,0,178,0,0,0,18,0,162,0,0,0,255,0,181,0,74,0,45,0,106,0,101,0,125,0,111,0,164,0,176,0,130,0,223,0,83,0,143,0,76,0,49,0,0,0,0,0,124,0,0,0,222,0,143,0,150,0,75,0,250,0,133,0,237,0,12,0,176,0,207,0,81,0,136,0,142,0,137,0,26,0,103,0,0,0,0,0,122,0,107,0,193,0,94,0,157,0,0,0,237,0,13,0,164,0,0,0,177,0,0,0,0,0,15,0,138,0,118,0,39,0,38,0,161,0,167,0,0,0);
signal scenario_full  : scenario_type := (141,31,130,31,198,31,122,31,104,31,141,31,11,31,141,31,247,31,245,31,132,31,114,31,209,31,209,30,209,29,70,31,96,31,197,31,238,31,192,31,222,31,35,31,244,31,78,31,78,30,156,31,111,31,15,31,15,30,15,29,65,31,95,31,104,31,87,31,24,31,117,31,219,31,126,31,126,30,126,29,76,31,246,31,126,31,104,31,4,31,57,31,168,31,168,31,151,31,151,30,151,29,232,31,154,31,19,31,19,30,17,31,17,30,185,31,180,31,38,31,91,31,27,31,27,30,69,31,177,31,61,31,25,31,207,31,80,31,179,31,16,31,199,31,69,31,88,31,42,31,42,30,93,31,93,30,93,31,93,30,178,31,87,31,35,31,128,31,153,31,171,31,29,31,11,31,111,31,111,30,172,31,31,31,37,31,255,31,255,30,101,31,158,31,158,30,99,31,239,31,163,31,82,31,107,31,252,31,72,31,198,31,235,31,179,31,101,31,150,31,164,31,164,30,225,31,164,31,160,31,177,31,177,30,130,31,70,31,70,30,70,29,228,31,228,30,87,31,85,31,32,31,32,30,118,31,122,31,155,31,155,30,155,29,69,31,89,31,203,31,203,30,17,31,115,31,25,31,77,31,117,31,117,30,118,31,223,31,41,31,83,31,120,31,33,31,197,31,197,30,197,29,197,28,11,31,245,31,14,31,28,31,58,31,155,31,45,31,180,31,94,31,92,31,83,31,45,31,45,30,51,31,4,31,225,31,178,31,178,30,113,31,239,31,48,31,48,30,64,31,126,31,126,30,64,31,28,31,227,31,227,30,177,31,41,31,41,30,204,31,8,31,28,31,113,31,113,30,200,31,235,31,78,31,152,31,70,31,70,30,70,29,209,31,215,31,215,30,72,31,107,31,171,31,93,31,40,31,86,31,72,31,72,30,45,31,118,31,117,31,20,31,35,31,42,31,15,31,123,31,194,31,228,31,228,30,123,31,123,30,123,29,43,31,107,31,35,31,110,31,149,31,16,31,55,31,55,30,91,31,240,31,128,31,128,30,133,31,131,31,135,31,96,31,96,30,96,29,96,28,96,27,59,31,118,31,72,31,17,31,158,31,5,31,59,31,112,31,112,30,167,31,167,30,18,31,18,30,18,29,152,31,38,31,38,30,69,31,1,31,94,31,94,30,26,31,238,31,137,31,175,31,208,31,208,30,128,31,119,31,119,30,214,31,19,31,19,30,162,31,131,31,131,30,154,31,207,31,198,31,198,30,198,29,106,31,35,31,35,30,197,31,197,30,254,31,86,31,86,30,206,31,37,31,37,30,153,31,144,31,160,31,54,31,54,30,37,31,224,31,150,31,72,31,29,31,103,31,37,31,190,31,190,30,79,31,47,31,139,31,59,31,59,30,59,29,50,31,50,30,58,31,58,30,154,31,154,30,154,29,212,31,103,31,181,31,181,30,194,31,210,31,83,31,31,31,31,30,120,31,241,31,233,31,101,31,74,31,236,31,236,30,146,31,180,31,215,31,229,31,161,31,51,31,51,30,253,31,253,30,229,31,242,31,237,31,153,31,153,30,16,31,39,31,142,31,190,31,171,31,55,31,153,31,171,31,171,30,253,31,196,31,68,31,133,31,249,31,247,31,247,30,239,31,239,30,71,31,236,31,150,31,150,30,150,31,152,31,247,31,39,31,107,31,186,31,201,31,138,31,238,31,11,31,47,31,254,31,152,31,4,31,249,31,14,31,214,31,109,31,138,31,163,31,163,30,154,31,49,31,74,31,217,31,125,31,125,30,125,29,113,31,156,31,156,30,226,31,79,31,68,31,120,31,19,31,171,31,19,31,44,31,145,31,145,30,17,31,193,31,241,31,241,30,64,31,31,31,184,31,10,31,118,31,38,31,38,30,150,31,11,31,11,30,29,31,29,30,4,31,145,31,117,31,170,31,170,30,161,31,116,31,2,31,147,31,15,31,15,31,15,30,123,31,80,31,91,31,205,31,138,31,170,31,38,31,38,30,23,31,111,31,68,31,105,31,199,31,157,31,248,31,200,31,31,31,81,31,129,31,26,31,26,30,202,31,45,31,29,31,191,31,208,31,47,31,241,31,231,31,229,31,177,31,177,30,32,31,32,30,219,31,9,31,86,31,230,31,230,30,88,31,105,31,92,31,92,30,79,31,222,31,139,31,174,31,174,30,133,31,222,31,54,31,6,31,15,31,74,31,182,31,205,31,205,30,18,31,130,31,130,30,13,31,190,31,133,31,107,31,140,31,16,31,33,31,33,30,104,31,104,30,104,29,104,28,114,31,5,31,108,31,108,30,22,31,198,31,37,31,117,31,199,31,159,31,191,31,191,30,92,31,104,31,229,31,79,31,79,30,216,31,227,31,227,30,193,31,228,31,165,31,165,30,62,31,250,31,154,31,151,31,33,31,36,31,38,31,211,31,211,30,140,31,5,31,202,31,202,30,202,29,202,28,202,27,202,26,1,31,1,30,8,31,150,31,98,31,98,30,100,31,86,31,63,31,153,31,122,31,85,31,255,31,255,30,255,29,255,28,246,31,128,31,228,31,107,31,22,31,171,31,250,31,92,31,92,30,43,31,43,30,43,29,69,31,80,31,33,31,33,30,84,31,46,31,174,31,38,31,223,31,88,31,204,31,204,30,124,31,124,30,129,31,192,31,188,31,8,31,119,31,119,30,126,31,126,30,254,31,182,31,210,31,199,31,36,31,190,31,100,31,41,31,43,31,31,31,144,31,250,31,250,30,174,31,227,31,30,31,89,31,204,31,71,31,21,31,69,31,185,31,185,30,80,31,227,31,227,30,144,31,166,31,44,31,44,30,139,31,96,31,77,31,77,30,77,29,77,28,140,31,138,31,211,31,29,31,161,31,138,31,98,31,119,31,119,30,178,31,189,31,235,31,207,31,10,31,10,30,33,31,54,31,5,31,179,31,63,31,63,30,47,31,47,30,87,31,213,31,225,31,247,31,8,31,143,31,225,31,172,31,13,31,153,31,105,31,103,31,201,31,184,31,53,31,191,31,191,30,179,31,105,31,211,31,143,31,252,31,78,31,66,31,254,31,254,30,117,31,158,31,35,31,23,31,23,30,150,31,166,31,174,31,167,31,61,31,61,30,61,29,61,28,94,31,58,31,167,31,248,31,112,31,159,31,43,31,253,31,151,31,151,30,151,29,90,31,90,30,163,31,203,31,84,31,11,31,55,31,147,31,147,30,212,31,212,30,183,31,28,31,167,31,185,31,49,31,49,30,201,31,123,31,233,31,26,31,67,31,67,30,67,29,201,31,177,31,177,30,183,31,53,31,237,31,237,30,73,31,198,31,178,31,178,30,18,31,162,31,162,30,255,31,181,31,74,31,45,31,106,31,101,31,125,31,111,31,164,31,176,31,130,31,223,31,83,31,143,31,76,31,49,31,49,30,49,29,124,31,124,30,222,31,143,31,150,31,75,31,250,31,133,31,237,31,12,31,176,31,207,31,81,31,136,31,142,31,137,31,26,31,103,31,103,30,103,29,122,31,107,31,193,31,94,31,157,31,157,30,237,31,13,31,164,31,164,30,177,31,177,30,177,29,15,31,138,31,118,31,39,31,38,31,161,31,167,31,167,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
