-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 982;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (21,0,224,0,1,0,149,0,138,0,0,0,185,0,164,0,198,0,16,0,21,0,0,0,164,0,0,0,117,0,69,0,243,0,200,0,253,0,182,0,166,0,137,0,206,0,0,0,175,0,189,0,229,0,7,0,46,0,98,0,40,0,211,0,105,0,156,0,167,0,154,0,0,0,60,0,251,0,155,0,17,0,148,0,0,0,167,0,62,0,116,0,0,0,0,0,0,0,26,0,24,0,113,0,194,0,0,0,0,0,207,0,0,0,74,0,0,0,48,0,70,0,154,0,0,0,186,0,0,0,246,0,160,0,226,0,104,0,176,0,243,0,109,0,222,0,158,0,0,0,164,0,43,0,66,0,218,0,0,0,0,0,21,0,0,0,0,0,64,0,0,0,0,0,127,0,140,0,54,0,40,0,211,0,239,0,10,0,158,0,71,0,214,0,112,0,0,0,98,0,36,0,255,0,205,0,65,0,121,0,11,0,77,0,232,0,0,0,12,0,0,0,1,0,197,0,59,0,139,0,87,0,230,0,249,0,156,0,0,0,217,0,96,0,0,0,0,0,1,0,191,0,24,0,165,0,93,0,150,0,76,0,196,0,67,0,80,0,217,0,177,0,251,0,0,0,179,0,106,0,255,0,51,0,69,0,255,0,209,0,107,0,0,0,101,0,53,0,8,0,121,0,222,0,0,0,0,0,66,0,132,0,0,0,73,0,14,0,192,0,107,0,143,0,0,0,204,0,224,0,103,0,160,0,0,0,0,0,0,0,0,0,139,0,0,0,217,0,239,0,157,0,8,0,46,0,213,0,252,0,0,0,0,0,161,0,0,0,73,0,0,0,0,0,96,0,147,0,242,0,17,0,165,0,0,0,0,0,158,0,235,0,214,0,0,0,0,0,44,0,163,0,23,0,80,0,0,0,0,0,44,0,0,0,217,0,61,0,222,0,158,0,0,0,130,0,32,0,70,0,61,0,237,0,0,0,0,0,0,0,142,0,0,0,60,0,0,0,0,0,0,0,0,0,43,0,0,0,15,0,87,0,3,0,226,0,144,0,125,0,149,0,209,0,137,0,43,0,0,0,134,0,199,0,0,0,80,0,250,0,82,0,76,0,61,0,73,0,27,0,61,0,228,0,39,0,0,0,101,0,0,0,165,0,210,0,0,0,199,0,210,0,136,0,251,0,0,0,116,0,0,0,249,0,30,0,16,0,178,0,116,0,119,0,118,0,51,0,141,0,65,0,180,0,97,0,221,0,159,0,0,0,0,0,60,0,0,0,0,0,184,0,0,0,232,0,0,0,60,0,183,0,84,0,101,0,244,0,101,0,62,0,33,0,243,0,103,0,0,0,146,0,65,0,162,0,64,0,221,0,230,0,0,0,94,0,154,0,45,0,74,0,243,0,189,0,83,0,218,0,156,0,188,0,0,0,0,0,205,0,0,0,183,0,73,0,42,0,126,0,122,0,53,0,69,0,81,0,0,0,0,0,49,0,0,0,0,0,52,0,96,0,1,0,124,0,145,0,249,0,90,0,0,0,0,0,127,0,144,0,209,0,14,0,132,0,9,0,32,0,142,0,127,0,170,0,158,0,210,0,165,0,62,0,189,0,7,0,57,0,0,0,242,0,124,0,147,0,116,0,83,0,27,0,31,0,137,0,0,0,167,0,226,0,180,0,22,0,0,0,182,0,194,0,117,0,0,0,243,0,25,0,142,0,130,0,253,0,219,0,144,0,100,0,0,0,237,0,47,0,183,0,237,0,172,0,140,0,0,0,188,0,0,0,149,0,0,0,0,0,80,0,106,0,7,0,192,0,211,0,118,0,81,0,173,0,225,0,34,0,111,0,35,0,85,0,0,0,192,0,0,0,49,0,146,0,0,0,176,0,91,0,0,0,156,0,106,0,155,0,191,0,201,0,157,0,35,0,149,0,121,0,7,0,214,0,251,0,47,0,101,0,74,0,20,0,84,0,99,0,115,0,234,0,140,0,189,0,0,0,0,0,224,0,218,0,49,0,193,0,0,0,0,0,104,0,208,0,0,0,0,0,187,0,0,0,0,0,130,0,243,0,34,0,0,0,133,0,0,0,141,0,137,0,152,0,185,0,0,0,165,0,0,0,147,0,204,0,0,0,57,0,255,0,105,0,179,0,39,0,77,0,0,0,68,0,57,0,170,0,0,0,0,0,97,0,234,0,178,0,80,0,102,0,146,0,145,0,212,0,85,0,125,0,0,0,50,0,32,0,230,0,249,0,0,0,104,0,159,0,156,0,63,0,222,0,235,0,18,0,3,0,33,0,217,0,181,0,0,0,224,0,0,0,50,0,129,0,0,0,245,0,0,0,0,0,237,0,220,0,112,0,145,0,97,0,103,0,63,0,87,0,158,0,28,0,158,0,0,0,241,0,30,0,149,0,51,0,199,0,218,0,101,0,0,0,184,0,49,0,223,0,0,0,9,0,93,0,208,0,72,0,11,0,24,0,223,0,255,0,91,0,202,0,59,0,174,0,0,0,198,0,63,0,199,0,12,0,0,0,231,0,129,0,6,0,221,0,242,0,93,0,0,0,0,0,20,0,186,0,204,0,0,0,0,0,185,0,0,0,26,0,39,0,126,0,36,0,117,0,127,0,0,0,105,0,127,0,23,0,189,0,25,0,127,0,196,0,164,0,92,0,56,0,0,0,165,0,143,0,123,0,189,0,151,0,54,0,39,0,236,0,189,0,73,0,132,0,100,0,205,0,169,0,86,0,35,0,254,0,38,0,155,0,236,0,193,0,125,0,156,0,171,0,0,0,99,0,0,0,184,0,83,0,234,0,12,0,118,0,0,0,114,0,7,0,197,0,157,0,207,0,0,0,0,0,74,0,108,0,25,0,5,0,184,0,234,0,177,0,0,0,45,0,0,0,0,0,136,0,72,0,82,0,237,0,109,0,110,0,50,0,144,0,0,0,49,0,213,0,231,0,81,0,42,0,71,0,188,0,0,0,43,0,0,0,123,0,0,0,48,0,44,0,217,0,19,0,153,0,219,0,0,0,0,0,120,0,134,0,0,0,247,0,0,0,18,0,0,0,240,0,135,0,100,0,139,0,0,0,0,0,238,0,0,0,153,0,7,0,0,0,119,0,11,0,136,0,122,0,0,0,188,0,58,0,0,0,217,0,76,0,122,0,205,0,2,0,54,0,107,0,126,0,237,0,162,0,67,0,67,0,177,0,160,0,191,0,215,0,133,0,139,0,0,0,212,0,246,0,204,0,120,0,95,0,76,0,54,0,216,0,0,0,92,0,45,0,239,0,38,0,40,0,0,0,37,0,0,0,22,0,156,0,41,0,11,0,17,0,147,0,234,0,0,0,0,0,48,0,45,0,0,0,241,0,0,0,123,0,199,0,0,0,72,0,0,0,96,0,0,0,0,0,58,0,163,0,40,0,42,0,0,0,222,0,113,0,246,0,179,0,117,0,41,0,81,0,0,0,101,0,0,0,146,0,76,0,169,0,209,0,0,0,130,0,113,0,222,0,92,0,119,0,0,0,144,0,132,0,119,0,169,0,151,0,182,0,91,0,143,0,0,0,105,0,165,0,6,0,0,0,223,0,123,0,0,0,81,0,234,0,0,0,187,0,252,0,0,0,0,0,128,0,134,0,114,0,0,0,210,0,99,0,239,0,101,0,86,0,11,0,190,0,252,0,86,0,0,0,69,0,109,0,145,0,32,0,179,0,181,0,95,0,62,0,244,0,37,0,76,0,170,0,219,0,166,0,29,0,232,0,153,0,29,0,0,0,25,0,146,0,191,0,34,0,0,0,0,0,225,0,243,0,73,0,0,0,137,0,145,0,180,0,148,0,0,0,0,0,50,0,15,0,201,0,52,0,24,0,0,0,220,0,0,0,247,0,146,0,247,0,223,0,114,0,238,0,170,0,25,0,0,0,245,0,0,0,78,0,45,0,107,0,51,0,253,0,156,0,215,0,241,0,126,0,22,0,0,0,155,0,19,0,12,0,119,0,159,0,155,0,91,0,255,0,151,0,0,0,238,0,0,0,168,0,225,0,0,0,126,0,183,0,206,0,125,0,0,0,243,0,40,0,246,0,139,0,240,0,50,0,197,0,174,0,226,0,80,0,17,0,233,0,0,0,67,0,0,0,0,0,125,0,214,0,222,0,148,0,136,0,38,0,145,0,175,0,29,0,0,0,205,0,76,0,58,0,0,0,0,0,188,0,163,0,83,0,0,0,41,0,181,0,218,0,0,0,0,0,136,0,120,0,140,0,175,0,229,0,164,0,108,0,185,0,210,0,31,0,10,0,0,0,106,0,0,0,0,0,145,0,129,0,28,0,79,0,145,0,0,0,148,0,0,0,119,0,244,0,125,0,120,0,34,0,185,0,0,0,198,0,18,0);
signal scenario_full  : scenario_type := (21,31,224,31,1,31,149,31,138,31,138,30,185,31,164,31,198,31,16,31,21,31,21,30,164,31,164,30,117,31,69,31,243,31,200,31,253,31,182,31,166,31,137,31,206,31,206,30,175,31,189,31,229,31,7,31,46,31,98,31,40,31,211,31,105,31,156,31,167,31,154,31,154,30,60,31,251,31,155,31,17,31,148,31,148,30,167,31,62,31,116,31,116,30,116,29,116,28,26,31,24,31,113,31,194,31,194,30,194,29,207,31,207,30,74,31,74,30,48,31,70,31,154,31,154,30,186,31,186,30,246,31,160,31,226,31,104,31,176,31,243,31,109,31,222,31,158,31,158,30,164,31,43,31,66,31,218,31,218,30,218,29,21,31,21,30,21,29,64,31,64,30,64,29,127,31,140,31,54,31,40,31,211,31,239,31,10,31,158,31,71,31,214,31,112,31,112,30,98,31,36,31,255,31,205,31,65,31,121,31,11,31,77,31,232,31,232,30,12,31,12,30,1,31,197,31,59,31,139,31,87,31,230,31,249,31,156,31,156,30,217,31,96,31,96,30,96,29,1,31,191,31,24,31,165,31,93,31,150,31,76,31,196,31,67,31,80,31,217,31,177,31,251,31,251,30,179,31,106,31,255,31,51,31,69,31,255,31,209,31,107,31,107,30,101,31,53,31,8,31,121,31,222,31,222,30,222,29,66,31,132,31,132,30,73,31,14,31,192,31,107,31,143,31,143,30,204,31,224,31,103,31,160,31,160,30,160,29,160,28,160,27,139,31,139,30,217,31,239,31,157,31,8,31,46,31,213,31,252,31,252,30,252,29,161,31,161,30,73,31,73,30,73,29,96,31,147,31,242,31,17,31,165,31,165,30,165,29,158,31,235,31,214,31,214,30,214,29,44,31,163,31,23,31,80,31,80,30,80,29,44,31,44,30,217,31,61,31,222,31,158,31,158,30,130,31,32,31,70,31,61,31,237,31,237,30,237,29,237,28,142,31,142,30,60,31,60,30,60,29,60,28,60,27,43,31,43,30,15,31,87,31,3,31,226,31,144,31,125,31,149,31,209,31,137,31,43,31,43,30,134,31,199,31,199,30,80,31,250,31,82,31,76,31,61,31,73,31,27,31,61,31,228,31,39,31,39,30,101,31,101,30,165,31,210,31,210,30,199,31,210,31,136,31,251,31,251,30,116,31,116,30,249,31,30,31,16,31,178,31,116,31,119,31,118,31,51,31,141,31,65,31,180,31,97,31,221,31,159,31,159,30,159,29,60,31,60,30,60,29,184,31,184,30,232,31,232,30,60,31,183,31,84,31,101,31,244,31,101,31,62,31,33,31,243,31,103,31,103,30,146,31,65,31,162,31,64,31,221,31,230,31,230,30,94,31,154,31,45,31,74,31,243,31,189,31,83,31,218,31,156,31,188,31,188,30,188,29,205,31,205,30,183,31,73,31,42,31,126,31,122,31,53,31,69,31,81,31,81,30,81,29,49,31,49,30,49,29,52,31,96,31,1,31,124,31,145,31,249,31,90,31,90,30,90,29,127,31,144,31,209,31,14,31,132,31,9,31,32,31,142,31,127,31,170,31,158,31,210,31,165,31,62,31,189,31,7,31,57,31,57,30,242,31,124,31,147,31,116,31,83,31,27,31,31,31,137,31,137,30,167,31,226,31,180,31,22,31,22,30,182,31,194,31,117,31,117,30,243,31,25,31,142,31,130,31,253,31,219,31,144,31,100,31,100,30,237,31,47,31,183,31,237,31,172,31,140,31,140,30,188,31,188,30,149,31,149,30,149,29,80,31,106,31,7,31,192,31,211,31,118,31,81,31,173,31,225,31,34,31,111,31,35,31,85,31,85,30,192,31,192,30,49,31,146,31,146,30,176,31,91,31,91,30,156,31,106,31,155,31,191,31,201,31,157,31,35,31,149,31,121,31,7,31,214,31,251,31,47,31,101,31,74,31,20,31,84,31,99,31,115,31,234,31,140,31,189,31,189,30,189,29,224,31,218,31,49,31,193,31,193,30,193,29,104,31,208,31,208,30,208,29,187,31,187,30,187,29,130,31,243,31,34,31,34,30,133,31,133,30,141,31,137,31,152,31,185,31,185,30,165,31,165,30,147,31,204,31,204,30,57,31,255,31,105,31,179,31,39,31,77,31,77,30,68,31,57,31,170,31,170,30,170,29,97,31,234,31,178,31,80,31,102,31,146,31,145,31,212,31,85,31,125,31,125,30,50,31,32,31,230,31,249,31,249,30,104,31,159,31,156,31,63,31,222,31,235,31,18,31,3,31,33,31,217,31,181,31,181,30,224,31,224,30,50,31,129,31,129,30,245,31,245,30,245,29,237,31,220,31,112,31,145,31,97,31,103,31,63,31,87,31,158,31,28,31,158,31,158,30,241,31,30,31,149,31,51,31,199,31,218,31,101,31,101,30,184,31,49,31,223,31,223,30,9,31,93,31,208,31,72,31,11,31,24,31,223,31,255,31,91,31,202,31,59,31,174,31,174,30,198,31,63,31,199,31,12,31,12,30,231,31,129,31,6,31,221,31,242,31,93,31,93,30,93,29,20,31,186,31,204,31,204,30,204,29,185,31,185,30,26,31,39,31,126,31,36,31,117,31,127,31,127,30,105,31,127,31,23,31,189,31,25,31,127,31,196,31,164,31,92,31,56,31,56,30,165,31,143,31,123,31,189,31,151,31,54,31,39,31,236,31,189,31,73,31,132,31,100,31,205,31,169,31,86,31,35,31,254,31,38,31,155,31,236,31,193,31,125,31,156,31,171,31,171,30,99,31,99,30,184,31,83,31,234,31,12,31,118,31,118,30,114,31,7,31,197,31,157,31,207,31,207,30,207,29,74,31,108,31,25,31,5,31,184,31,234,31,177,31,177,30,45,31,45,30,45,29,136,31,72,31,82,31,237,31,109,31,110,31,50,31,144,31,144,30,49,31,213,31,231,31,81,31,42,31,71,31,188,31,188,30,43,31,43,30,123,31,123,30,48,31,44,31,217,31,19,31,153,31,219,31,219,30,219,29,120,31,134,31,134,30,247,31,247,30,18,31,18,30,240,31,135,31,100,31,139,31,139,30,139,29,238,31,238,30,153,31,7,31,7,30,119,31,11,31,136,31,122,31,122,30,188,31,58,31,58,30,217,31,76,31,122,31,205,31,2,31,54,31,107,31,126,31,237,31,162,31,67,31,67,31,177,31,160,31,191,31,215,31,133,31,139,31,139,30,212,31,246,31,204,31,120,31,95,31,76,31,54,31,216,31,216,30,92,31,45,31,239,31,38,31,40,31,40,30,37,31,37,30,22,31,156,31,41,31,11,31,17,31,147,31,234,31,234,30,234,29,48,31,45,31,45,30,241,31,241,30,123,31,199,31,199,30,72,31,72,30,96,31,96,30,96,29,58,31,163,31,40,31,42,31,42,30,222,31,113,31,246,31,179,31,117,31,41,31,81,31,81,30,101,31,101,30,146,31,76,31,169,31,209,31,209,30,130,31,113,31,222,31,92,31,119,31,119,30,144,31,132,31,119,31,169,31,151,31,182,31,91,31,143,31,143,30,105,31,165,31,6,31,6,30,223,31,123,31,123,30,81,31,234,31,234,30,187,31,252,31,252,30,252,29,128,31,134,31,114,31,114,30,210,31,99,31,239,31,101,31,86,31,11,31,190,31,252,31,86,31,86,30,69,31,109,31,145,31,32,31,179,31,181,31,95,31,62,31,244,31,37,31,76,31,170,31,219,31,166,31,29,31,232,31,153,31,29,31,29,30,25,31,146,31,191,31,34,31,34,30,34,29,225,31,243,31,73,31,73,30,137,31,145,31,180,31,148,31,148,30,148,29,50,31,15,31,201,31,52,31,24,31,24,30,220,31,220,30,247,31,146,31,247,31,223,31,114,31,238,31,170,31,25,31,25,30,245,31,245,30,78,31,45,31,107,31,51,31,253,31,156,31,215,31,241,31,126,31,22,31,22,30,155,31,19,31,12,31,119,31,159,31,155,31,91,31,255,31,151,31,151,30,238,31,238,30,168,31,225,31,225,30,126,31,183,31,206,31,125,31,125,30,243,31,40,31,246,31,139,31,240,31,50,31,197,31,174,31,226,31,80,31,17,31,233,31,233,30,67,31,67,30,67,29,125,31,214,31,222,31,148,31,136,31,38,31,145,31,175,31,29,31,29,30,205,31,76,31,58,31,58,30,58,29,188,31,163,31,83,31,83,30,41,31,181,31,218,31,218,30,218,29,136,31,120,31,140,31,175,31,229,31,164,31,108,31,185,31,210,31,31,31,10,31,10,30,106,31,106,30,106,29,145,31,129,31,28,31,79,31,145,31,145,30,148,31,148,30,119,31,244,31,125,31,120,31,34,31,185,31,185,30,198,31,18,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
