-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 330;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (62,0,53,0,42,0,247,0,244,0,254,0,74,0,142,0,111,0,0,0,119,0,218,0,143,0,0,0,112,0,172,0,123,0,23,0,0,0,37,0,193,0,172,0,253,0,0,0,2,0,126,0,142,0,123,0,127,0,0,0,81,0,47,0,190,0,153,0,202,0,86,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,140,0,241,0,187,0,0,0,204,0,0,0,58,0,91,0,0,0,188,0,21,0,0,0,151,0,140,0,199,0,0,0,253,0,129,0,22,0,92,0,206,0,248,0,54,0,89,0,24,0,254,0,224,0,2,0,0,0,0,0,211,0,53,0,3,0,14,0,237,0,222,0,51,0,82,0,0,0,8,0,57,0,0,0,195,0,60,0,99,0,236,0,221,0,139,0,0,0,236,0,189,0,68,0,45,0,176,0,149,0,23,0,114,0,207,0,199,0,0,0,0,0,244,0,164,0,31,0,61,0,87,0,0,0,123,0,215,0,198,0,236,0,183,0,58,0,82,0,44,0,111,0,160,0,110,0,168,0,255,0,160,0,0,0,34,0,87,0,129,0,76,0,59,0,2,0,135,0,0,0,7,0,0,0,215,0,221,0,0,0,200,0,8,0,163,0,0,0,0,0,84,0,3,0,0,0,19,0,229,0,18,0,195,0,31,0,0,0,196,0,148,0,97,0,134,0,33,0,225,0,73,0,106,0,69,0,155,0,102,0,148,0,206,0,203,0,92,0,61,0,143,0,138,0,0,0,93,0,8,0,108,0,0,0,4,0,39,0,188,0,154,0,250,0,149,0,207,0,208,0,116,0,15,0,129,0,101,0,53,0,114,0,177,0,162,0,229,0,70,0,24,0,76,0,87,0,65,0,110,0,0,0,67,0,32,0,0,0,47,0,207,0,196,0,192,0,161,0,207,0,0,0,242,0,99,0,205,0,0,0,238,0,108,0,243,0,94,0,68,0,205,0,0,0,251,0,243,0,52,0,71,0,78,0,156,0,178,0,237,0,202,0,64,0,0,0,109,0,205,0,83,0,245,0,0,0,87,0,156,0,193,0,29,0,146,0,202,0,0,0,15,0,18,0,43,0,181,0,111,0,200,0,0,0,31,0,245,0,118,0,133,0,62,0,0,0,154,0,0,0,190,0,84,0,17,0,0,0,64,0,236,0,56,0,132,0,40,0,236,0,219,0,142,0,46,0,247,0,61,0,0,0,93,0,46,0,3,0,125,0,165,0,28,0,0,0,133,0,80,0,162,0,163,0,0,0,0,0,66,0,133,0,0,0,251,0,97,0,222,0,0,0,188,0,49,0,255,0,200,0,81,0,0,0,117,0,116,0,143,0,12,0,179,0,34,0,45,0,222,0,232,0,156,0,244,0,208,0,0,0,71,0,114,0,125,0,74,0,132,0,95,0,165,0,39,0,138,0,218,0,173,0,0,0,194,0,247,0,117,0,128,0);
signal scenario_full  : scenario_type := (62,31,53,31,42,31,247,31,244,31,254,31,74,31,142,31,111,31,111,30,119,31,218,31,143,31,143,30,112,31,172,31,123,31,23,31,23,30,37,31,193,31,172,31,253,31,253,30,2,31,126,31,142,31,123,31,127,31,127,30,81,31,47,31,190,31,153,31,202,31,86,31,86,30,86,29,86,28,49,31,49,30,49,29,49,28,49,27,140,31,241,31,187,31,187,30,204,31,204,30,58,31,91,31,91,30,188,31,21,31,21,30,151,31,140,31,199,31,199,30,253,31,129,31,22,31,92,31,206,31,248,31,54,31,89,31,24,31,254,31,224,31,2,31,2,30,2,29,211,31,53,31,3,31,14,31,237,31,222,31,51,31,82,31,82,30,8,31,57,31,57,30,195,31,60,31,99,31,236,31,221,31,139,31,139,30,236,31,189,31,68,31,45,31,176,31,149,31,23,31,114,31,207,31,199,31,199,30,199,29,244,31,164,31,31,31,61,31,87,31,87,30,123,31,215,31,198,31,236,31,183,31,58,31,82,31,44,31,111,31,160,31,110,31,168,31,255,31,160,31,160,30,34,31,87,31,129,31,76,31,59,31,2,31,135,31,135,30,7,31,7,30,215,31,221,31,221,30,200,31,8,31,163,31,163,30,163,29,84,31,3,31,3,30,19,31,229,31,18,31,195,31,31,31,31,30,196,31,148,31,97,31,134,31,33,31,225,31,73,31,106,31,69,31,155,31,102,31,148,31,206,31,203,31,92,31,61,31,143,31,138,31,138,30,93,31,8,31,108,31,108,30,4,31,39,31,188,31,154,31,250,31,149,31,207,31,208,31,116,31,15,31,129,31,101,31,53,31,114,31,177,31,162,31,229,31,70,31,24,31,76,31,87,31,65,31,110,31,110,30,67,31,32,31,32,30,47,31,207,31,196,31,192,31,161,31,207,31,207,30,242,31,99,31,205,31,205,30,238,31,108,31,243,31,94,31,68,31,205,31,205,30,251,31,243,31,52,31,71,31,78,31,156,31,178,31,237,31,202,31,64,31,64,30,109,31,205,31,83,31,245,31,245,30,87,31,156,31,193,31,29,31,146,31,202,31,202,30,15,31,18,31,43,31,181,31,111,31,200,31,200,30,31,31,245,31,118,31,133,31,62,31,62,30,154,31,154,30,190,31,84,31,17,31,17,30,64,31,236,31,56,31,132,31,40,31,236,31,219,31,142,31,46,31,247,31,61,31,61,30,93,31,46,31,3,31,125,31,165,31,28,31,28,30,133,31,80,31,162,31,163,31,163,30,163,29,66,31,133,31,133,30,251,31,97,31,222,31,222,30,188,31,49,31,255,31,200,31,81,31,81,30,117,31,116,31,143,31,12,31,179,31,34,31,45,31,222,31,232,31,156,31,244,31,208,31,208,30,71,31,114,31,125,31,74,31,132,31,95,31,165,31,39,31,138,31,218,31,173,31,173,30,194,31,247,31,117,31,128,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
