-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 662;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (45,0,156,0,255,0,47,0,0,0,209,0,0,0,60,0,70,0,0,0,115,0,0,0,68,0,4,0,0,0,147,0,0,0,0,0,120,0,90,0,62,0,159,0,130,0,97,0,170,0,0,0,170,0,39,0,112,0,181,0,90,0,0,0,39,0,40,0,211,0,0,0,77,0,81,0,150,0,156,0,112,0,216,0,88,0,255,0,67,0,0,0,145,0,0,0,80,0,0,0,40,0,251,0,96,0,191,0,21,0,226,0,169,0,194,0,47,0,33,0,195,0,0,0,0,0,125,0,218,0,182,0,0,0,93,0,168,0,59,0,253,0,28,0,218,0,70,0,252,0,60,0,0,0,53,0,147,0,208,0,0,0,192,0,249,0,145,0,241,0,0,0,0,0,0,0,187,0,0,0,5,0,90,0,187,0,49,0,53,0,0,0,105,0,176,0,0,0,117,0,16,0,175,0,0,0,246,0,176,0,159,0,0,0,15,0,30,0,197,0,18,0,229,0,219,0,0,0,122,0,0,0,251,0,20,0,98,0,93,0,30,0,0,0,82,0,97,0,33,0,98,0,12,0,5,0,0,0,195,0,50,0,0,0,97,0,240,0,204,0,229,0,72,0,6,0,105,0,235,0,67,0,54,0,1,0,246,0,0,0,79,0,147,0,0,0,46,0,133,0,223,0,0,0,184,0,83,0,10,0,152,0,0,0,71,0,153,0,82,0,126,0,0,0,80,0,0,0,96,0,0,0,199,0,80,0,101,0,0,0,227,0,81,0,156,0,41,0,56,0,125,0,111,0,11,0,76,0,61,0,0,0,0,0,36,0,158,0,133,0,37,0,50,0,0,0,0,0,0,0,252,0,89,0,162,0,165,0,0,0,133,0,177,0,77,0,39,0,221,0,166,0,1,0,172,0,146,0,3,0,19,0,49,0,97,0,0,0,186,0,194,0,44,0,17,0,232,0,145,0,120,0,63,0,11,0,50,0,35,0,38,0,139,0,83,0,28,0,45,0,0,0,0,0,21,0,23,0,159,0,238,0,115,0,104,0,0,0,150,0,0,0,194,0,89,0,31,0,220,0,144,0,79,0,123,0,209,0,95,0,0,0,0,0,8,0,192,0,131,0,78,0,0,0,0,0,159,0,0,0,154,0,0,0,24,0,0,0,207,0,169,0,17,0,0,0,0,0,130,0,21,0,0,0,137,0,133,0,32,0,0,0,40,0,172,0,240,0,188,0,187,0,140,0,0,0,168,0,9,0,179,0,96,0,26,0,124,0,45,0,49,0,43,0,0,0,0,0,81,0,115,0,233,0,83,0,234,0,44,0,196,0,97,0,233,0,0,0,82,0,226,0,24,0,73,0,99,0,119,0,56,0,76,0,96,0,43,0,189,0,0,0,214,0,197,0,135,0,196,0,0,0,170,0,96,0,177,0,0,0,111,0,0,0,139,0,40,0,0,0,30,0,194,0,227,0,38,0,231,0,25,0,0,0,78,0,78,0,111,0,122,0,103,0,231,0,61,0,174,0,226,0,0,0,50,0,0,0,210,0,110,0,134,0,48,0,3,0,238,0,25,0,0,0,27,0,0,0,244,0,134,0,144,0,130,0,0,0,0,0,0,0,202,0,182,0,56,0,38,0,106,0,140,0,210,0,255,0,135,0,89,0,184,0,102,0,130,0,123,0,168,0,49,0,37,0,0,0,87,0,88,0,25,0,11,0,75,0,187,0,48,0,246,0,142,0,0,0,155,0,152,0,224,0,171,0,225,0,164,0,12,0,0,0,0,0,215,0,179,0,0,0,88,0,27,0,97,0,0,0,20,0,232,0,0,0,40,0,160,0,214,0,94,0,29,0,0,0,75,0,37,0,0,0,14,0,167,0,194,0,37,0,240,0,124,0,0,0,114,0,211,0,204,0,217,0,0,0,46,0,54,0,120,0,138,0,145,0,125,0,191,0,138,0,151,0,0,0,75,0,42,0,57,0,20,0,23,0,48,0,13,0,86,0,238,0,221,0,20,0,128,0,32,0,181,0,0,0,255,0,139,0,205,0,46,0,200,0,223,0,29,0,65,0,0,0,0,0,203,0,49,0,0,0,215,0,149,0,21,0,127,0,219,0,28,0,50,0,180,0,187,0,78,0,0,0,85,0,98,0,198,0,229,0,141,0,0,0,33,0,140,0,0,0,227,0,247,0,0,0,135,0,0,0,81,0,164,0,168,0,0,0,81,0,198,0,81,0,0,0,0,0,238,0,136,0,223,0,141,0,138,0,11,0,0,0,1,0,246,0,53,0,135,0,173,0,0,0,0,0,189,0,0,0,245,0,177,0,233,0,83,0,193,0,52,0,89,0,184,0,0,0,23,0,228,0,115,0,214,0,50,0,44,0,0,0,211,0,16,0,69,0,126,0,50,0,129,0,0,0,224,0,0,0,127,0,45,0,192,0,49,0,16,0,72,0,0,0,101,0,21,0,0,0,75,0,129,0,14,0,2,0,43,0,216,0,81,0,0,0,156,0,217,0,235,0,140,0,35,0,0,0,73,0,30,0,178,0,56,0,176,0,148,0,195,0,83,0,38,0,188,0,0,0,0,0,0,0,28,0,224,0,103,0,94,0,116,0,130,0,4,0,137,0,161,0,89,0,155,0,240,0,101,0,185,0,0,0,171,0,194,0,64,0,69,0,196,0,101,0,13,0,0,0,199,0,107,0,151,0,224,0,63,0,136,0,1,0,59,0,163,0,174,0,227,0,1,0,0,0,142,0,0,0,115,0,64,0,59,0,129,0,93,0,133,0,187,0,122,0,244,0,244,0,74,0,39,0,0,0,0,0,51,0,59,0,154,0,26,0,159,0,9,0,8,0,84,0,158,0,0,0,231,0,0,0,66,0,244,0,0,0,190,0,0,0,167,0,206,0,0,0,29,0,0,0,209,0,229,0,101,0,0,0,0,0,211,0,0,0,165,0,0,0);
signal scenario_full  : scenario_type := (45,31,156,31,255,31,47,31,47,30,209,31,209,30,60,31,70,31,70,30,115,31,115,30,68,31,4,31,4,30,147,31,147,30,147,29,120,31,90,31,62,31,159,31,130,31,97,31,170,31,170,30,170,31,39,31,112,31,181,31,90,31,90,30,39,31,40,31,211,31,211,30,77,31,81,31,150,31,156,31,112,31,216,31,88,31,255,31,67,31,67,30,145,31,145,30,80,31,80,30,40,31,251,31,96,31,191,31,21,31,226,31,169,31,194,31,47,31,33,31,195,31,195,30,195,29,125,31,218,31,182,31,182,30,93,31,168,31,59,31,253,31,28,31,218,31,70,31,252,31,60,31,60,30,53,31,147,31,208,31,208,30,192,31,249,31,145,31,241,31,241,30,241,29,241,28,187,31,187,30,5,31,90,31,187,31,49,31,53,31,53,30,105,31,176,31,176,30,117,31,16,31,175,31,175,30,246,31,176,31,159,31,159,30,15,31,30,31,197,31,18,31,229,31,219,31,219,30,122,31,122,30,251,31,20,31,98,31,93,31,30,31,30,30,82,31,97,31,33,31,98,31,12,31,5,31,5,30,195,31,50,31,50,30,97,31,240,31,204,31,229,31,72,31,6,31,105,31,235,31,67,31,54,31,1,31,246,31,246,30,79,31,147,31,147,30,46,31,133,31,223,31,223,30,184,31,83,31,10,31,152,31,152,30,71,31,153,31,82,31,126,31,126,30,80,31,80,30,96,31,96,30,199,31,80,31,101,31,101,30,227,31,81,31,156,31,41,31,56,31,125,31,111,31,11,31,76,31,61,31,61,30,61,29,36,31,158,31,133,31,37,31,50,31,50,30,50,29,50,28,252,31,89,31,162,31,165,31,165,30,133,31,177,31,77,31,39,31,221,31,166,31,1,31,172,31,146,31,3,31,19,31,49,31,97,31,97,30,186,31,194,31,44,31,17,31,232,31,145,31,120,31,63,31,11,31,50,31,35,31,38,31,139,31,83,31,28,31,45,31,45,30,45,29,21,31,23,31,159,31,238,31,115,31,104,31,104,30,150,31,150,30,194,31,89,31,31,31,220,31,144,31,79,31,123,31,209,31,95,31,95,30,95,29,8,31,192,31,131,31,78,31,78,30,78,29,159,31,159,30,154,31,154,30,24,31,24,30,207,31,169,31,17,31,17,30,17,29,130,31,21,31,21,30,137,31,133,31,32,31,32,30,40,31,172,31,240,31,188,31,187,31,140,31,140,30,168,31,9,31,179,31,96,31,26,31,124,31,45,31,49,31,43,31,43,30,43,29,81,31,115,31,233,31,83,31,234,31,44,31,196,31,97,31,233,31,233,30,82,31,226,31,24,31,73,31,99,31,119,31,56,31,76,31,96,31,43,31,189,31,189,30,214,31,197,31,135,31,196,31,196,30,170,31,96,31,177,31,177,30,111,31,111,30,139,31,40,31,40,30,30,31,194,31,227,31,38,31,231,31,25,31,25,30,78,31,78,31,111,31,122,31,103,31,231,31,61,31,174,31,226,31,226,30,50,31,50,30,210,31,110,31,134,31,48,31,3,31,238,31,25,31,25,30,27,31,27,30,244,31,134,31,144,31,130,31,130,30,130,29,130,28,202,31,182,31,56,31,38,31,106,31,140,31,210,31,255,31,135,31,89,31,184,31,102,31,130,31,123,31,168,31,49,31,37,31,37,30,87,31,88,31,25,31,11,31,75,31,187,31,48,31,246,31,142,31,142,30,155,31,152,31,224,31,171,31,225,31,164,31,12,31,12,30,12,29,215,31,179,31,179,30,88,31,27,31,97,31,97,30,20,31,232,31,232,30,40,31,160,31,214,31,94,31,29,31,29,30,75,31,37,31,37,30,14,31,167,31,194,31,37,31,240,31,124,31,124,30,114,31,211,31,204,31,217,31,217,30,46,31,54,31,120,31,138,31,145,31,125,31,191,31,138,31,151,31,151,30,75,31,42,31,57,31,20,31,23,31,48,31,13,31,86,31,238,31,221,31,20,31,128,31,32,31,181,31,181,30,255,31,139,31,205,31,46,31,200,31,223,31,29,31,65,31,65,30,65,29,203,31,49,31,49,30,215,31,149,31,21,31,127,31,219,31,28,31,50,31,180,31,187,31,78,31,78,30,85,31,98,31,198,31,229,31,141,31,141,30,33,31,140,31,140,30,227,31,247,31,247,30,135,31,135,30,81,31,164,31,168,31,168,30,81,31,198,31,81,31,81,30,81,29,238,31,136,31,223,31,141,31,138,31,11,31,11,30,1,31,246,31,53,31,135,31,173,31,173,30,173,29,189,31,189,30,245,31,177,31,233,31,83,31,193,31,52,31,89,31,184,31,184,30,23,31,228,31,115,31,214,31,50,31,44,31,44,30,211,31,16,31,69,31,126,31,50,31,129,31,129,30,224,31,224,30,127,31,45,31,192,31,49,31,16,31,72,31,72,30,101,31,21,31,21,30,75,31,129,31,14,31,2,31,43,31,216,31,81,31,81,30,156,31,217,31,235,31,140,31,35,31,35,30,73,31,30,31,178,31,56,31,176,31,148,31,195,31,83,31,38,31,188,31,188,30,188,29,188,28,28,31,224,31,103,31,94,31,116,31,130,31,4,31,137,31,161,31,89,31,155,31,240,31,101,31,185,31,185,30,171,31,194,31,64,31,69,31,196,31,101,31,13,31,13,30,199,31,107,31,151,31,224,31,63,31,136,31,1,31,59,31,163,31,174,31,227,31,1,31,1,30,142,31,142,30,115,31,64,31,59,31,129,31,93,31,133,31,187,31,122,31,244,31,244,31,74,31,39,31,39,30,39,29,51,31,59,31,154,31,26,31,159,31,9,31,8,31,84,31,158,31,158,30,231,31,231,30,66,31,244,31,244,30,190,31,190,30,167,31,206,31,206,30,29,31,29,30,209,31,229,31,101,31,101,30,101,29,211,31,211,30,165,31,165,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
