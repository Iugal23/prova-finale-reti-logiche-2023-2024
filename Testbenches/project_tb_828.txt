-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 694;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,67,0,98,0,63,0,151,0,27,0,12,0,72,0,196,0,0,0,0,0,155,0,244,0,155,0,39,0,176,0,95,0,37,0,0,0,246,0,2,0,0,0,14,0,173,0,125,0,141,0,192,0,0,0,34,0,207,0,57,0,87,0,0,0,180,0,35,0,133,0,65,0,179,0,0,0,247,0,107,0,254,0,79,0,129,0,61,0,97,0,123,0,229,0,11,0,22,0,63,0,136,0,0,0,60,0,0,0,0,0,149,0,42,0,110,0,69,0,229,0,202,0,188,0,232,0,0,0,0,0,0,0,147,0,232,0,236,0,0,0,0,0,209,0,208,0,209,0,0,0,50,0,136,0,23,0,0,0,0,0,0,0,0,0,215,0,27,0,0,0,124,0,227,0,41,0,30,0,84,0,109,0,210,0,174,0,94,0,19,0,25,0,244,0,184,0,136,0,0,0,107,0,0,0,0,0,167,0,214,0,79,0,16,0,159,0,233,0,0,0,209,0,158,0,208,0,162,0,70,0,40,0,169,0,129,0,32,0,153,0,0,0,2,0,181,0,186,0,173,0,0,0,207,0,99,0,39,0,150,0,0,0,0,0,0,0,155,0,111,0,4,0,8,0,5,0,0,0,0,0,231,0,80,0,147,0,225,0,36,0,89,0,190,0,0,0,192,0,244,0,0,0,254,0,45,0,85,0,0,0,145,0,251,0,38,0,202,0,4,0,180,0,203,0,57,0,25,0,138,0,208,0,102,0,29,0,0,0,206,0,197,0,139,0,69,0,58,0,28,0,124,0,197,0,72,0,14,0,119,0,159,0,218,0,128,0,0,0,84,0,0,0,58,0,214,0,235,0,235,0,167,0,229,0,92,0,214,0,144,0,54,0,239,0,151,0,191,0,204,0,224,0,203,0,129,0,135,0,11,0,119,0,8,0,142,0,252,0,24,0,188,0,0,0,128,0,231,0,254,0,188,0,212,0,10,0,0,0,84,0,0,0,131,0,200,0,0,0,161,0,40,0,21,0,228,0,6,0,116,0,0,0,0,0,176,0,206,0,0,0,38,0,235,0,0,0,71,0,35,0,236,0,0,0,122,0,64,0,0,0,233,0,121,0,91,0,182,0,248,0,0,0,131,0,165,0,190,0,0,0,105,0,250,0,77,0,243,0,61,0,181,0,25,0,136,0,105,0,0,0,228,0,33,0,162,0,146,0,249,0,90,0,123,0,165,0,213,0,121,0,0,0,61,0,130,0,91,0,83,0,125,0,234,0,126,0,0,0,166,0,149,0,0,0,100,0,224,0,125,0,108,0,0,0,0,0,230,0,117,0,136,0,170,0,110,0,199,0,190,0,145,0,217,0,154,0,151,0,0,0,148,0,0,0,0,0,0,0,194,0,246,0,19,0,66,0,209,0,228,0,0,0,205,0,154,0,127,0,23,0,56,0,0,0,25,0,0,0,4,0,194,0,115,0,0,0,234,0,244,0,63,0,86,0,223,0,13,0,33,0,229,0,0,0,0,0,0,0,132,0,121,0,0,0,203,0,187,0,0,0,241,0,164,0,0,0,15,0,139,0,152,0,148,0,206,0,0,0,47,0,137,0,86,0,38,0,38,0,96,0,33,0,157,0,0,0,189,0,8,0,5,0,14,0,11,0,205,0,190,0,0,0,36,0,194,0,171,0,39,0,0,0,223,0,211,0,53,0,198,0,250,0,0,0,114,0,51,0,147,0,96,0,127,0,39,0,0,0,73,0,198,0,0,0,143,0,242,0,194,0,0,0,212,0,137,0,99,0,184,0,158,0,231,0,10,0,133,0,242,0,0,0,133,0,169,0,96,0,124,0,158,0,28,0,29,0,18,0,182,0,28,0,51,0,127,0,84,0,242,0,151,0,119,0,196,0,76,0,16,0,202,0,0,0,16,0,237,0,179,0,197,0,1,0,45,0,199,0,170,0,201,0,176,0,0,0,181,0,96,0,161,0,0,0,21,0,216,0,139,0,7,0,137,0,234,0,185,0,17,0,0,0,0,0,0,0,99,0,202,0,181,0,0,0,180,0,139,0,126,0,143,0,0,0,230,0,18,0,239,0,120,0,244,0,1,0,22,0,0,0,172,0,31,0,0,0,185,0,156,0,239,0,43,0,0,0,199,0,216,0,0,0,176,0,8,0,14,0,0,0,16,0,218,0,204,0,243,0,0,0,58,0,157,0,227,0,66,0,151,0,92,0,30,0,0,0,227,0,0,0,0,0,0,0,37,0,90,0,48,0,53,0,197,0,59,0,138,0,16,0,247,0,83,0,0,0,14,0,178,0,0,0,0,0,0,0,0,0,37,0,51,0,60,0,104,0,76,0,122,0,0,0,0,0,107,0,42,0,46,0,0,0,249,0,111,0,28,0,0,0,43,0,18,0,3,0,74,0,103,0,0,0,0,0,77,0,146,0,76,0,105,0,69,0,141,0,1,0,0,0,0,0,243,0,101,0,201,0,0,0,122,0,57,0,0,0,247,0,149,0,116,0,0,0,0,0,81,0,0,0,107,0,0,0,150,0,165,0,176,0,15,0,97,0,167,0,168,0,230,0,155,0,233,0,142,0,145,0,121,0,144,0,54,0,0,0,127,0,88,0,105,0,167,0,63,0,16,0,0,0,69,0,0,0,190,0,35,0,252,0,249,0,11,0,121,0,0,0,125,0,75,0,48,0,0,0,0,0,212,0,90,0,204,0,56,0,239,0,25,0,214,0,216,0,241,0,118,0,172,0,101,0,167,0,212,0,158,0,109,0,144,0,185,0,249,0,88,0,0,0,170,0,16,0,186,0,0,0,97,0,197,0,198,0,0,0,42,0,177,0,182,0,160,0,87,0,139,0,92,0,138,0,0,0,35,0,110,0,81,0,57,0,255,0,163,0,0,0,0,0,127,0,100,0,232,0,234,0,15,0,96,0,224,0,58,0,240,0,0,0,0,0,168,0,90,0,186,0,108,0,127,0,199,0,176,0,19,0,0,0,0,0,165,0,216,0,129,0,0,0,205,0,154,0,151,0,78,0,36,0,189,0,0,0,245,0,145,0,223,0,38,0,172,0,9,0,0,0,0,0,111,0,202,0,0,0);
signal scenario_full  : scenario_type := (0,0,67,31,98,31,63,31,151,31,27,31,12,31,72,31,196,31,196,30,196,29,155,31,244,31,155,31,39,31,176,31,95,31,37,31,37,30,246,31,2,31,2,30,14,31,173,31,125,31,141,31,192,31,192,30,34,31,207,31,57,31,87,31,87,30,180,31,35,31,133,31,65,31,179,31,179,30,247,31,107,31,254,31,79,31,129,31,61,31,97,31,123,31,229,31,11,31,22,31,63,31,136,31,136,30,60,31,60,30,60,29,149,31,42,31,110,31,69,31,229,31,202,31,188,31,232,31,232,30,232,29,232,28,147,31,232,31,236,31,236,30,236,29,209,31,208,31,209,31,209,30,50,31,136,31,23,31,23,30,23,29,23,28,23,27,215,31,27,31,27,30,124,31,227,31,41,31,30,31,84,31,109,31,210,31,174,31,94,31,19,31,25,31,244,31,184,31,136,31,136,30,107,31,107,30,107,29,167,31,214,31,79,31,16,31,159,31,233,31,233,30,209,31,158,31,208,31,162,31,70,31,40,31,169,31,129,31,32,31,153,31,153,30,2,31,181,31,186,31,173,31,173,30,207,31,99,31,39,31,150,31,150,30,150,29,150,28,155,31,111,31,4,31,8,31,5,31,5,30,5,29,231,31,80,31,147,31,225,31,36,31,89,31,190,31,190,30,192,31,244,31,244,30,254,31,45,31,85,31,85,30,145,31,251,31,38,31,202,31,4,31,180,31,203,31,57,31,25,31,138,31,208,31,102,31,29,31,29,30,206,31,197,31,139,31,69,31,58,31,28,31,124,31,197,31,72,31,14,31,119,31,159,31,218,31,128,31,128,30,84,31,84,30,58,31,214,31,235,31,235,31,167,31,229,31,92,31,214,31,144,31,54,31,239,31,151,31,191,31,204,31,224,31,203,31,129,31,135,31,11,31,119,31,8,31,142,31,252,31,24,31,188,31,188,30,128,31,231,31,254,31,188,31,212,31,10,31,10,30,84,31,84,30,131,31,200,31,200,30,161,31,40,31,21,31,228,31,6,31,116,31,116,30,116,29,176,31,206,31,206,30,38,31,235,31,235,30,71,31,35,31,236,31,236,30,122,31,64,31,64,30,233,31,121,31,91,31,182,31,248,31,248,30,131,31,165,31,190,31,190,30,105,31,250,31,77,31,243,31,61,31,181,31,25,31,136,31,105,31,105,30,228,31,33,31,162,31,146,31,249,31,90,31,123,31,165,31,213,31,121,31,121,30,61,31,130,31,91,31,83,31,125,31,234,31,126,31,126,30,166,31,149,31,149,30,100,31,224,31,125,31,108,31,108,30,108,29,230,31,117,31,136,31,170,31,110,31,199,31,190,31,145,31,217,31,154,31,151,31,151,30,148,31,148,30,148,29,148,28,194,31,246,31,19,31,66,31,209,31,228,31,228,30,205,31,154,31,127,31,23,31,56,31,56,30,25,31,25,30,4,31,194,31,115,31,115,30,234,31,244,31,63,31,86,31,223,31,13,31,33,31,229,31,229,30,229,29,229,28,132,31,121,31,121,30,203,31,187,31,187,30,241,31,164,31,164,30,15,31,139,31,152,31,148,31,206,31,206,30,47,31,137,31,86,31,38,31,38,31,96,31,33,31,157,31,157,30,189,31,8,31,5,31,14,31,11,31,205,31,190,31,190,30,36,31,194,31,171,31,39,31,39,30,223,31,211,31,53,31,198,31,250,31,250,30,114,31,51,31,147,31,96,31,127,31,39,31,39,30,73,31,198,31,198,30,143,31,242,31,194,31,194,30,212,31,137,31,99,31,184,31,158,31,231,31,10,31,133,31,242,31,242,30,133,31,169,31,96,31,124,31,158,31,28,31,29,31,18,31,182,31,28,31,51,31,127,31,84,31,242,31,151,31,119,31,196,31,76,31,16,31,202,31,202,30,16,31,237,31,179,31,197,31,1,31,45,31,199,31,170,31,201,31,176,31,176,30,181,31,96,31,161,31,161,30,21,31,216,31,139,31,7,31,137,31,234,31,185,31,17,31,17,30,17,29,17,28,99,31,202,31,181,31,181,30,180,31,139,31,126,31,143,31,143,30,230,31,18,31,239,31,120,31,244,31,1,31,22,31,22,30,172,31,31,31,31,30,185,31,156,31,239,31,43,31,43,30,199,31,216,31,216,30,176,31,8,31,14,31,14,30,16,31,218,31,204,31,243,31,243,30,58,31,157,31,227,31,66,31,151,31,92,31,30,31,30,30,227,31,227,30,227,29,227,28,37,31,90,31,48,31,53,31,197,31,59,31,138,31,16,31,247,31,83,31,83,30,14,31,178,31,178,30,178,29,178,28,178,27,37,31,51,31,60,31,104,31,76,31,122,31,122,30,122,29,107,31,42,31,46,31,46,30,249,31,111,31,28,31,28,30,43,31,18,31,3,31,74,31,103,31,103,30,103,29,77,31,146,31,76,31,105,31,69,31,141,31,1,31,1,30,1,29,243,31,101,31,201,31,201,30,122,31,57,31,57,30,247,31,149,31,116,31,116,30,116,29,81,31,81,30,107,31,107,30,150,31,165,31,176,31,15,31,97,31,167,31,168,31,230,31,155,31,233,31,142,31,145,31,121,31,144,31,54,31,54,30,127,31,88,31,105,31,167,31,63,31,16,31,16,30,69,31,69,30,190,31,35,31,252,31,249,31,11,31,121,31,121,30,125,31,75,31,48,31,48,30,48,29,212,31,90,31,204,31,56,31,239,31,25,31,214,31,216,31,241,31,118,31,172,31,101,31,167,31,212,31,158,31,109,31,144,31,185,31,249,31,88,31,88,30,170,31,16,31,186,31,186,30,97,31,197,31,198,31,198,30,42,31,177,31,182,31,160,31,87,31,139,31,92,31,138,31,138,30,35,31,110,31,81,31,57,31,255,31,163,31,163,30,163,29,127,31,100,31,232,31,234,31,15,31,96,31,224,31,58,31,240,31,240,30,240,29,168,31,90,31,186,31,108,31,127,31,199,31,176,31,19,31,19,30,19,29,165,31,216,31,129,31,129,30,205,31,154,31,151,31,78,31,36,31,189,31,189,30,245,31,145,31,223,31,38,31,172,31,9,31,9,30,9,29,111,31,202,31,202,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
