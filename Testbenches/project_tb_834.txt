-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 878;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (99,0,113,0,0,0,17,0,157,0,124,0,158,0,0,0,158,0,178,0,217,0,235,0,244,0,112,0,0,0,248,0,2,0,51,0,64,0,159,0,16,0,179,0,30,0,238,0,213,0,0,0,210,0,77,0,84,0,201,0,0,0,156,0,88,0,176,0,0,0,31,0,0,0,131,0,120,0,214,0,138,0,0,0,18,0,141,0,204,0,240,0,75,0,0,0,210,0,136,0,58,0,97,0,11,0,139,0,215,0,147,0,0,0,12,0,154,0,181,0,32,0,204,0,0,0,255,0,44,0,86,0,234,0,0,0,119,0,51,0,171,0,5,0,82,0,81,0,128,0,57,0,0,0,103,0,242,0,251,0,223,0,171,0,120,0,175,0,251,0,170,0,0,0,0,0,181,0,0,0,164,0,0,0,83,0,227,0,125,0,126,0,33,0,0,0,0,0,0,0,78,0,0,0,39,0,56,0,171,0,158,0,233,0,0,0,0,0,11,0,234,0,233,0,61,0,137,0,0,0,117,0,216,0,39,0,48,0,0,0,98,0,98,0,0,0,106,0,179,0,0,0,15,0,100,0,231,0,95,0,53,0,173,0,234,0,14,0,209,0,143,0,161,0,14,0,191,0,78,0,0,0,0,0,98,0,176,0,234,0,90,0,159,0,77,0,195,0,104,0,53,0,64,0,66,0,56,0,253,0,80,0,236,0,57,0,0,0,219,0,121,0,46,0,0,0,118,0,183,0,47,0,0,0,110,0,71,0,0,0,161,0,206,0,136,0,0,0,134,0,165,0,215,0,11,0,114,0,164,0,240,0,171,0,96,0,0,0,1,0,228,0,98,0,249,0,164,0,49,0,128,0,160,0,46,0,252,0,182,0,204,0,40,0,65,0,176,0,0,0,227,0,25,0,240,0,87,0,0,0,139,0,145,0,0,0,127,0,206,0,0,0,0,0,0,0,0,0,0,0,137,0,101,0,29,0,72,0,73,0,155,0,231,0,0,0,168,0,234,0,23,0,60,0,0,0,28,0,249,0,158,0,251,0,68,0,0,0,149,0,0,0,60,0,245,0,161,0,103,0,182,0,255,0,254,0,122,0,54,0,6,0,0,0,0,0,87,0,233,0,43,0,89,0,44,0,228,0,65,0,0,0,207,0,203,0,27,0,135,0,123,0,81,0,0,0,186,0,63,0,112,0,55,0,47,0,37,0,255,0,73,0,221,0,153,0,40,0,182,0,63,0,36,0,186,0,0,0,0,0,35,0,73,0,149,0,126,0,231,0,0,0,0,0,55,0,190,0,130,0,189,0,0,0,48,0,130,0,254,0,51,0,48,0,0,0,216,0,86,0,119,0,7,0,168,0,175,0,248,0,0,0,255,0,105,0,9,0,46,0,175,0,134,0,100,0,46,0,130,0,209,0,24,0,164,0,0,0,204,0,216,0,6,0,1,0,197,0,181,0,137,0,0,0,136,0,122,0,81,0,0,0,22,0,0,0,95,0,249,0,70,0,51,0,0,0,175,0,64,0,182,0,34,0,110,0,226,0,84,0,11,0,220,0,160,0,246,0,0,0,224,0,13,0,242,0,0,0,194,0,158,0,198,0,163,0,83,0,139,0,70,0,151,0,0,0,36,0,3,0,78,0,240,0,89,0,225,0,125,0,214,0,45,0,106,0,164,0,238,0,175,0,216,0,46,0,203,0,54,0,0,0,178,0,97,0,232,0,0,0,0,0,211,0,55,0,72,0,174,0,0,0,198,0,0,0,193,0,142,0,217,0,0,0,4,0,46,0,91,0,136,0,182,0,249,0,166,0,0,0,215,0,0,0,124,0,76,0,114,0,80,0,50,0,116,0,164,0,0,0,109,0,0,0,0,0,36,0,0,0,179,0,80,0,177,0,62,0,197,0,213,0,103,0,0,0,49,0,126,0,246,0,130,0,0,0,186,0,162,0,46,0,53,0,141,0,193,0,97,0,0,0,61,0,209,0,214,0,0,0,0,0,253,0,0,0,0,0,0,0,38,0,25,0,43,0,0,0,75,0,133,0,68,0,0,0,0,0,0,0,12,0,1,0,0,0,55,0,40,0,122,0,0,0,135,0,161,0,0,0,82,0,221,0,219,0,0,0,0,0,163,0,0,0,0,0,203,0,70,0,127,0,31,0,117,0,241,0,168,0,101,0,143,0,0,0,0,0,146,0,128,0,41,0,19,0,83,0,211,0,58,0,0,0,225,0,15,0,137,0,40,0,161,0,232,0,138,0,65,0,10,0,0,0,40,0,205,0,102,0,0,0,72,0,185,0,173,0,218,0,210,0,0,0,0,0,218,0,0,0,243,0,229,0,142,0,51,0,0,0,8,0,77,0,165,0,250,0,232,0,0,0,34,0,137,0,123,0,20,0,221,0,169,0,95,0,167,0,159,0,234,0,147,0,169,0,177,0,177,0,0,0,228,0,0,0,202,0,229,0,0,0,241,0,230,0,209,0,0,0,44,0,123,0,187,0,0,0,140,0,249,0,251,0,162,0,89,0,172,0,173,0,97,0,189,0,0,0,150,0,38,0,150,0,185,0,142,0,186,0,71,0,240,0,0,0,222,0,141,0,35,0,39,0,163,0,230,0,0,0,186,0,0,0,13,0,0,0,233,0,0,0,0,0,197,0,124,0,105,0,46,0,64,0,0,0,50,0,63,0,0,0,71,0,72,0,32,0,73,0,150,0,236,0,86,0,180,0,0,0,0,0,0,0,0,0,0,0,186,0,119,0,44,0,0,0,84,0,105,0,62,0,122,0,32,0,235,0,49,0,98,0,152,0,0,0,204,0,156,0,12,0,4,0,23,0,143,0,19,0,114,0,175,0,181,0,67,0,55,0,102,0,24,0,227,0,59,0,139,0,115,0,98,0,102,0,0,0,222,0,14,0,107,0,221,0,187,0,213,0,155,0,59,0,38,0,83,0,94,0,49,0,223,0,250,0,0,0,64,0,204,0,185,0,0,0,68,0,0,0,34,0,219,0,192,0,4,0,180,0,3,0,0,0,34,0,0,0,108,0,0,0,135,0,134,0,8,0,11,0,84,0,162,0,7,0,214,0,39,0,46,0,63,0,234,0,244,0,44,0,30,0,0,0,214,0,223,0,36,0,176,0,20,0,82,0,41,0,0,0,106,0,0,0,148,0,210,0,118,0,172,0,8,0,31,0,46,0,237,0,62,0,79,0,94,0,0,0,136,0,54,0,132,0,59,0,161,0,0,0,0,0,52,0,17,0,0,0,47,0,232,0,14,0,124,0,122,0,24,0,65,0,24,0,88,0,236,0,41,0,0,0,46,0,116,0,142,0,0,0,0,0,0,0,129,0,8,0,207,0,247,0,212,0,145,0,239,0,146,0,18,0,187,0,53,0,34,0,4,0,109,0,4,0,207,0,139,0,118,0,67,0,97,0,213,0,0,0,0,0,21,0,0,0,41,0,231,0,102,0,251,0,211,0,0,0,45,0,243,0,239,0,207,0,0,0,77,0,90,0,119,0,247,0,168,0,0,0,52,0,0,0,243,0,0,0,0,0,182,0,86,0,198,0,201,0,253,0,78,0,10,0,22,0,16,0,6,0,83,0,243,0,208,0,0,0,93,0,7,0,193,0,74,0,0,0,0,0,125,0,133,0,234,0,0,0,168,0,0,0,88,0,0,0,0,0,105,0,135,0,12,0,225,0,77,0,0,0,185,0,0,0,99,0,143,0,66,0,121,0,178,0,181,0,21,0,0,0,84,0,48,0,0,0,208,0,0,0,106,0,82,0,106,0,86,0,246,0,0,0,76,0,34,0,0,0,135,0,215,0,0,0,20,0,0,0,231,0,239,0,230,0,184,0,48,0,100,0,143,0,0,0,0,0,28,0,0,0,131,0,0,0,0,0,14,0,0,0,0,0,0,0,9,0,177,0);
signal scenario_full  : scenario_type := (99,31,113,31,113,30,17,31,157,31,124,31,158,31,158,30,158,31,178,31,217,31,235,31,244,31,112,31,112,30,248,31,2,31,51,31,64,31,159,31,16,31,179,31,30,31,238,31,213,31,213,30,210,31,77,31,84,31,201,31,201,30,156,31,88,31,176,31,176,30,31,31,31,30,131,31,120,31,214,31,138,31,138,30,18,31,141,31,204,31,240,31,75,31,75,30,210,31,136,31,58,31,97,31,11,31,139,31,215,31,147,31,147,30,12,31,154,31,181,31,32,31,204,31,204,30,255,31,44,31,86,31,234,31,234,30,119,31,51,31,171,31,5,31,82,31,81,31,128,31,57,31,57,30,103,31,242,31,251,31,223,31,171,31,120,31,175,31,251,31,170,31,170,30,170,29,181,31,181,30,164,31,164,30,83,31,227,31,125,31,126,31,33,31,33,30,33,29,33,28,78,31,78,30,39,31,56,31,171,31,158,31,233,31,233,30,233,29,11,31,234,31,233,31,61,31,137,31,137,30,117,31,216,31,39,31,48,31,48,30,98,31,98,31,98,30,106,31,179,31,179,30,15,31,100,31,231,31,95,31,53,31,173,31,234,31,14,31,209,31,143,31,161,31,14,31,191,31,78,31,78,30,78,29,98,31,176,31,234,31,90,31,159,31,77,31,195,31,104,31,53,31,64,31,66,31,56,31,253,31,80,31,236,31,57,31,57,30,219,31,121,31,46,31,46,30,118,31,183,31,47,31,47,30,110,31,71,31,71,30,161,31,206,31,136,31,136,30,134,31,165,31,215,31,11,31,114,31,164,31,240,31,171,31,96,31,96,30,1,31,228,31,98,31,249,31,164,31,49,31,128,31,160,31,46,31,252,31,182,31,204,31,40,31,65,31,176,31,176,30,227,31,25,31,240,31,87,31,87,30,139,31,145,31,145,30,127,31,206,31,206,30,206,29,206,28,206,27,206,26,137,31,101,31,29,31,72,31,73,31,155,31,231,31,231,30,168,31,234,31,23,31,60,31,60,30,28,31,249,31,158,31,251,31,68,31,68,30,149,31,149,30,60,31,245,31,161,31,103,31,182,31,255,31,254,31,122,31,54,31,6,31,6,30,6,29,87,31,233,31,43,31,89,31,44,31,228,31,65,31,65,30,207,31,203,31,27,31,135,31,123,31,81,31,81,30,186,31,63,31,112,31,55,31,47,31,37,31,255,31,73,31,221,31,153,31,40,31,182,31,63,31,36,31,186,31,186,30,186,29,35,31,73,31,149,31,126,31,231,31,231,30,231,29,55,31,190,31,130,31,189,31,189,30,48,31,130,31,254,31,51,31,48,31,48,30,216,31,86,31,119,31,7,31,168,31,175,31,248,31,248,30,255,31,105,31,9,31,46,31,175,31,134,31,100,31,46,31,130,31,209,31,24,31,164,31,164,30,204,31,216,31,6,31,1,31,197,31,181,31,137,31,137,30,136,31,122,31,81,31,81,30,22,31,22,30,95,31,249,31,70,31,51,31,51,30,175,31,64,31,182,31,34,31,110,31,226,31,84,31,11,31,220,31,160,31,246,31,246,30,224,31,13,31,242,31,242,30,194,31,158,31,198,31,163,31,83,31,139,31,70,31,151,31,151,30,36,31,3,31,78,31,240,31,89,31,225,31,125,31,214,31,45,31,106,31,164,31,238,31,175,31,216,31,46,31,203,31,54,31,54,30,178,31,97,31,232,31,232,30,232,29,211,31,55,31,72,31,174,31,174,30,198,31,198,30,193,31,142,31,217,31,217,30,4,31,46,31,91,31,136,31,182,31,249,31,166,31,166,30,215,31,215,30,124,31,76,31,114,31,80,31,50,31,116,31,164,31,164,30,109,31,109,30,109,29,36,31,36,30,179,31,80,31,177,31,62,31,197,31,213,31,103,31,103,30,49,31,126,31,246,31,130,31,130,30,186,31,162,31,46,31,53,31,141,31,193,31,97,31,97,30,61,31,209,31,214,31,214,30,214,29,253,31,253,30,253,29,253,28,38,31,25,31,43,31,43,30,75,31,133,31,68,31,68,30,68,29,68,28,12,31,1,31,1,30,55,31,40,31,122,31,122,30,135,31,161,31,161,30,82,31,221,31,219,31,219,30,219,29,163,31,163,30,163,29,203,31,70,31,127,31,31,31,117,31,241,31,168,31,101,31,143,31,143,30,143,29,146,31,128,31,41,31,19,31,83,31,211,31,58,31,58,30,225,31,15,31,137,31,40,31,161,31,232,31,138,31,65,31,10,31,10,30,40,31,205,31,102,31,102,30,72,31,185,31,173,31,218,31,210,31,210,30,210,29,218,31,218,30,243,31,229,31,142,31,51,31,51,30,8,31,77,31,165,31,250,31,232,31,232,30,34,31,137,31,123,31,20,31,221,31,169,31,95,31,167,31,159,31,234,31,147,31,169,31,177,31,177,31,177,30,228,31,228,30,202,31,229,31,229,30,241,31,230,31,209,31,209,30,44,31,123,31,187,31,187,30,140,31,249,31,251,31,162,31,89,31,172,31,173,31,97,31,189,31,189,30,150,31,38,31,150,31,185,31,142,31,186,31,71,31,240,31,240,30,222,31,141,31,35,31,39,31,163,31,230,31,230,30,186,31,186,30,13,31,13,30,233,31,233,30,233,29,197,31,124,31,105,31,46,31,64,31,64,30,50,31,63,31,63,30,71,31,72,31,32,31,73,31,150,31,236,31,86,31,180,31,180,30,180,29,180,28,180,27,180,26,186,31,119,31,44,31,44,30,84,31,105,31,62,31,122,31,32,31,235,31,49,31,98,31,152,31,152,30,204,31,156,31,12,31,4,31,23,31,143,31,19,31,114,31,175,31,181,31,67,31,55,31,102,31,24,31,227,31,59,31,139,31,115,31,98,31,102,31,102,30,222,31,14,31,107,31,221,31,187,31,213,31,155,31,59,31,38,31,83,31,94,31,49,31,223,31,250,31,250,30,64,31,204,31,185,31,185,30,68,31,68,30,34,31,219,31,192,31,4,31,180,31,3,31,3,30,34,31,34,30,108,31,108,30,135,31,134,31,8,31,11,31,84,31,162,31,7,31,214,31,39,31,46,31,63,31,234,31,244,31,44,31,30,31,30,30,214,31,223,31,36,31,176,31,20,31,82,31,41,31,41,30,106,31,106,30,148,31,210,31,118,31,172,31,8,31,31,31,46,31,237,31,62,31,79,31,94,31,94,30,136,31,54,31,132,31,59,31,161,31,161,30,161,29,52,31,17,31,17,30,47,31,232,31,14,31,124,31,122,31,24,31,65,31,24,31,88,31,236,31,41,31,41,30,46,31,116,31,142,31,142,30,142,29,142,28,129,31,8,31,207,31,247,31,212,31,145,31,239,31,146,31,18,31,187,31,53,31,34,31,4,31,109,31,4,31,207,31,139,31,118,31,67,31,97,31,213,31,213,30,213,29,21,31,21,30,41,31,231,31,102,31,251,31,211,31,211,30,45,31,243,31,239,31,207,31,207,30,77,31,90,31,119,31,247,31,168,31,168,30,52,31,52,30,243,31,243,30,243,29,182,31,86,31,198,31,201,31,253,31,78,31,10,31,22,31,16,31,6,31,83,31,243,31,208,31,208,30,93,31,7,31,193,31,74,31,74,30,74,29,125,31,133,31,234,31,234,30,168,31,168,30,88,31,88,30,88,29,105,31,135,31,12,31,225,31,77,31,77,30,185,31,185,30,99,31,143,31,66,31,121,31,178,31,181,31,21,31,21,30,84,31,48,31,48,30,208,31,208,30,106,31,82,31,106,31,86,31,246,31,246,30,76,31,34,31,34,30,135,31,215,31,215,30,20,31,20,30,231,31,239,31,230,31,184,31,48,31,100,31,143,31,143,30,143,29,28,31,28,30,131,31,131,30,131,29,14,31,14,30,14,29,14,28,9,31,177,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
