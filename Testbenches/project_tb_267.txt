-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 838;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (143,0,156,0,245,0,106,0,216,0,0,0,130,0,89,0,25,0,150,0,0,0,0,0,32,0,83,0,77,0,220,0,213,0,108,0,103,0,104,0,0,0,50,0,94,0,0,0,58,0,204,0,200,0,26,0,62,0,21,0,0,0,0,0,0,0,243,0,180,0,12,0,205,0,24,0,13,0,49,0,253,0,246,0,100,0,36,0,115,0,231,0,139,0,0,0,104,0,43,0,98,0,0,0,40,0,238,0,75,0,100,0,248,0,98,0,168,0,222,0,229,0,0,0,158,0,13,0,0,0,31,0,185,0,231,0,0,0,34,0,68,0,165,0,120,0,149,0,151,0,233,0,0,0,10,0,69,0,152,0,217,0,207,0,104,0,246,0,79,0,25,0,26,0,189,0,99,0,210,0,90,0,220,0,0,0,113,0,46,0,0,0,0,0,250,0,252,0,159,0,216,0,146,0,68,0,8,0,193,0,84,0,224,0,193,0,249,0,0,0,58,0,116,0,249,0,253,0,0,0,0,0,34,0,232,0,169,0,81,0,38,0,113,0,204,0,243,0,156,0,60,0,0,0,9,0,92,0,0,0,88,0,189,0,117,0,165,0,0,0,0,0,231,0,0,0,114,0,255,0,0,0,244,0,13,0,103,0,246,0,142,0,180,0,251,0,195,0,48,0,0,0,0,0,7,0,180,0,0,0,35,0,0,0,15,0,0,0,218,0,222,0,26,0,232,0,201,0,205,0,92,0,95,0,82,0,222,0,190,0,251,0,27,0,87,0,69,0,56,0,69,0,130,0,83,0,43,0,201,0,171,0,0,0,110,0,0,0,25,0,0,0,32,0,82,0,100,0,0,0,0,0,47,0,18,0,135,0,222,0,44,0,165,0,131,0,229,0,0,0,191,0,150,0,211,0,126,0,238,0,170,0,1,0,0,0,149,0,177,0,216,0,0,0,46,0,0,0,130,0,28,0,0,0,116,0,70,0,0,0,231,0,50,0,100,0,20,0,48,0,254,0,178,0,0,0,210,0,22,0,47,0,0,0,0,0,55,0,0,0,87,0,0,0,188,0,49,0,110,0,211,0,79,0,103,0,71,0,0,0,105,0,94,0,243,0,0,0,251,0,123,0,0,0,119,0,31,0,39,0,0,0,0,0,6,0,58,0,40,0,76,0,112,0,0,0,0,0,186,0,109,0,0,0,74,0,122,0,48,0,0,0,0,0,8,0,155,0,141,0,15,0,196,0,240,0,29,0,117,0,38,0,0,0,208,0,215,0,32,0,104,0,171,0,35,0,96,0,127,0,181,0,156,0,15,0,39,0,117,0,0,0,7,0,101,0,36,0,69,0,37,0,0,0,231,0,62,0,0,0,218,0,91,0,141,0,13,0,0,0,91,0,11,0,199,0,0,0,141,0,23,0,0,0,97,0,182,0,222,0,219,0,0,0,148,0,192,0,139,0,133,0,0,0,0,0,0,0,157,0,183,0,0,0,115,0,194,0,242,0,46,0,3,0,154,0,30,0,78,0,193,0,74,0,22,0,105,0,206,0,111,0,234,0,207,0,165,0,70,0,24,0,0,0,84,0,0,0,71,0,71,0,0,0,177,0,210,0,79,0,0,0,38,0,216,0,58,0,0,0,192,0,0,0,0,0,57,0,183,0,0,0,186,0,120,0,255,0,1,0,58,0,157,0,110,0,62,0,0,0,0,0,94,0,0,0,174,0,148,0,221,0,0,0,79,0,223,0,76,0,0,0,231,0,243,0,0,0,49,0,121,0,86,0,78,0,77,0,107,0,212,0,72,0,69,0,30,0,115,0,168,0,179,0,123,0,134,0,247,0,171,0,138,0,92,0,107,0,46,0,196,0,49,0,138,0,182,0,45,0,151,0,1,0,0,0,172,0,139,0,205,0,130,0,0,0,0,0,68,0,108,0,0,0,82,0,140,0,224,0,0,0,0,0,55,0,0,0,107,0,2,0,48,0,212,0,142,0,0,0,88,0,172,0,219,0,19,0,132,0,171,0,96,0,224,0,189,0,97,0,64,0,151,0,208,0,152,0,64,0,102,0,211,0,65,0,161,0,0,0,92,0,207,0,235,0,165,0,195,0,233,0,240,0,0,0,254,0,0,0,183,0,0,0,107,0,0,0,147,0,230,0,75,0,0,0,126,0,0,0,141,0,0,0,102,0,73,0,189,0,45,0,246,0,36,0,172,0,209,0,218,0,103,0,231,0,170,0,127,0,247,0,233,0,129,0,0,0,94,0,40,0,110,0,208,0,154,0,42,0,71,0,0,0,108,0,6,0,197,0,134,0,184,0,210,0,207,0,0,0,241,0,20,0,0,0,36,0,34,0,170,0,198,0,183,0,181,0,152,0,61,0,131,0,74,0,156,0,0,0,0,0,74,0,65,0,0,0,66,0,232,0,233,0,9,0,210,0,0,0,0,0,104,0,15,0,126,0,108,0,76,0,113,0,120,0,4,0,42,0,148,0,229,0,113,0,0,0,23,0,227,0,236,0,168,0,0,0,244,0,93,0,109,0,180,0,31,0,0,0,0,0,117,0,2,0,214,0,67,0,0,0,0,0,0,0,199,0,55,0,119,0,77,0,0,0,80,0,0,0,251,0,0,0,0,0,169,0,238,0,78,0,122,0,223,0,157,0,81,0,110,0,71,0,120,0,52,0,252,0,120,0,6,0,3,0,231,0,59,0,90,0,174,0,34,0,0,0,0,0,128,0,63,0,0,0,0,0,170,0,238,0,192,0,212,0,0,0,115,0,143,0,0,0,210,0,232,0,156,0,92,0,121,0,87,0,0,0,246,0,0,0,171,0,121,0,191,0,0,0,0,0,78,0,249,0,0,0,216,0,180,0,255,0,92,0,33,0,152,0,137,0,180,0,148,0,0,0,64,0,80,0,17,0,115,0,0,0,133,0,0,0,186,0,0,0,0,0,0,0,147,0,184,0,0,0,204,0,170,0,238,0,0,0,56,0,4,0,20,0,126,0,190,0,33,0,112,0,109,0,133,0,0,0,41,0,0,0,54,0,230,0,21,0,121,0,88,0,243,0,93,0,132,0,106,0,126,0,177,0,0,0,0,0,218,0,111,0,14,0,69,0,60,0,0,0,21,0,54,0,176,0,0,0,62,0,182,0,119,0,197,0,249,0,206,0,0,0,102,0,235,0,75,0,146,0,0,0,200,0,66,0,147,0,233,0,0,0,193,0,145,0,200,0,245,0,219,0,0,0,78,0,0,0,44,0,224,0,0,0,0,0,29,0,0,0,67,0,88,0,124,0,0,0,81,0,0,0,150,0,53,0,22,0,250,0,0,0,131,0,56,0,243,0,0,0,0,0,0,0,92,0,73,0,181,0,3,0,178,0,152,0,195,0,165,0,232,0,181,0,92,0,80,0,95,0,170,0,153,0,134,0,135,0,55,0,51,0,170,0,127,0,0,0,149,0,145,0,0,0,0,0,119,0,0,0,185,0,60,0,176,0,87,0,242,0,0,0,67,0,139,0,124,0,108,0,105,0,5,0,234,0,135,0,0,0,0,0,46,0,208,0,0,0,180,0,122,0,111,0,173,0,18,0,90,0,45,0,162,0,10,0,0,0,72,0,173,0,168,0,169,0,106,0,249,0,107,0,38,0,0,0,115,0,148,0,220,0,228,0,248,0,0,0,221,0,0,0,177,0,54,0,222,0,215,0,138,0,89,0,0,0,138,0,145,0,0,0,223,0,86,0,0,0,7,0);
signal scenario_full  : scenario_type := (143,31,156,31,245,31,106,31,216,31,216,30,130,31,89,31,25,31,150,31,150,30,150,29,32,31,83,31,77,31,220,31,213,31,108,31,103,31,104,31,104,30,50,31,94,31,94,30,58,31,204,31,200,31,26,31,62,31,21,31,21,30,21,29,21,28,243,31,180,31,12,31,205,31,24,31,13,31,49,31,253,31,246,31,100,31,36,31,115,31,231,31,139,31,139,30,104,31,43,31,98,31,98,30,40,31,238,31,75,31,100,31,248,31,98,31,168,31,222,31,229,31,229,30,158,31,13,31,13,30,31,31,185,31,231,31,231,30,34,31,68,31,165,31,120,31,149,31,151,31,233,31,233,30,10,31,69,31,152,31,217,31,207,31,104,31,246,31,79,31,25,31,26,31,189,31,99,31,210,31,90,31,220,31,220,30,113,31,46,31,46,30,46,29,250,31,252,31,159,31,216,31,146,31,68,31,8,31,193,31,84,31,224,31,193,31,249,31,249,30,58,31,116,31,249,31,253,31,253,30,253,29,34,31,232,31,169,31,81,31,38,31,113,31,204,31,243,31,156,31,60,31,60,30,9,31,92,31,92,30,88,31,189,31,117,31,165,31,165,30,165,29,231,31,231,30,114,31,255,31,255,30,244,31,13,31,103,31,246,31,142,31,180,31,251,31,195,31,48,31,48,30,48,29,7,31,180,31,180,30,35,31,35,30,15,31,15,30,218,31,222,31,26,31,232,31,201,31,205,31,92,31,95,31,82,31,222,31,190,31,251,31,27,31,87,31,69,31,56,31,69,31,130,31,83,31,43,31,201,31,171,31,171,30,110,31,110,30,25,31,25,30,32,31,82,31,100,31,100,30,100,29,47,31,18,31,135,31,222,31,44,31,165,31,131,31,229,31,229,30,191,31,150,31,211,31,126,31,238,31,170,31,1,31,1,30,149,31,177,31,216,31,216,30,46,31,46,30,130,31,28,31,28,30,116,31,70,31,70,30,231,31,50,31,100,31,20,31,48,31,254,31,178,31,178,30,210,31,22,31,47,31,47,30,47,29,55,31,55,30,87,31,87,30,188,31,49,31,110,31,211,31,79,31,103,31,71,31,71,30,105,31,94,31,243,31,243,30,251,31,123,31,123,30,119,31,31,31,39,31,39,30,39,29,6,31,58,31,40,31,76,31,112,31,112,30,112,29,186,31,109,31,109,30,74,31,122,31,48,31,48,30,48,29,8,31,155,31,141,31,15,31,196,31,240,31,29,31,117,31,38,31,38,30,208,31,215,31,32,31,104,31,171,31,35,31,96,31,127,31,181,31,156,31,15,31,39,31,117,31,117,30,7,31,101,31,36,31,69,31,37,31,37,30,231,31,62,31,62,30,218,31,91,31,141,31,13,31,13,30,91,31,11,31,199,31,199,30,141,31,23,31,23,30,97,31,182,31,222,31,219,31,219,30,148,31,192,31,139,31,133,31,133,30,133,29,133,28,157,31,183,31,183,30,115,31,194,31,242,31,46,31,3,31,154,31,30,31,78,31,193,31,74,31,22,31,105,31,206,31,111,31,234,31,207,31,165,31,70,31,24,31,24,30,84,31,84,30,71,31,71,31,71,30,177,31,210,31,79,31,79,30,38,31,216,31,58,31,58,30,192,31,192,30,192,29,57,31,183,31,183,30,186,31,120,31,255,31,1,31,58,31,157,31,110,31,62,31,62,30,62,29,94,31,94,30,174,31,148,31,221,31,221,30,79,31,223,31,76,31,76,30,231,31,243,31,243,30,49,31,121,31,86,31,78,31,77,31,107,31,212,31,72,31,69,31,30,31,115,31,168,31,179,31,123,31,134,31,247,31,171,31,138,31,92,31,107,31,46,31,196,31,49,31,138,31,182,31,45,31,151,31,1,31,1,30,172,31,139,31,205,31,130,31,130,30,130,29,68,31,108,31,108,30,82,31,140,31,224,31,224,30,224,29,55,31,55,30,107,31,2,31,48,31,212,31,142,31,142,30,88,31,172,31,219,31,19,31,132,31,171,31,96,31,224,31,189,31,97,31,64,31,151,31,208,31,152,31,64,31,102,31,211,31,65,31,161,31,161,30,92,31,207,31,235,31,165,31,195,31,233,31,240,31,240,30,254,31,254,30,183,31,183,30,107,31,107,30,147,31,230,31,75,31,75,30,126,31,126,30,141,31,141,30,102,31,73,31,189,31,45,31,246,31,36,31,172,31,209,31,218,31,103,31,231,31,170,31,127,31,247,31,233,31,129,31,129,30,94,31,40,31,110,31,208,31,154,31,42,31,71,31,71,30,108,31,6,31,197,31,134,31,184,31,210,31,207,31,207,30,241,31,20,31,20,30,36,31,34,31,170,31,198,31,183,31,181,31,152,31,61,31,131,31,74,31,156,31,156,30,156,29,74,31,65,31,65,30,66,31,232,31,233,31,9,31,210,31,210,30,210,29,104,31,15,31,126,31,108,31,76,31,113,31,120,31,4,31,42,31,148,31,229,31,113,31,113,30,23,31,227,31,236,31,168,31,168,30,244,31,93,31,109,31,180,31,31,31,31,30,31,29,117,31,2,31,214,31,67,31,67,30,67,29,67,28,199,31,55,31,119,31,77,31,77,30,80,31,80,30,251,31,251,30,251,29,169,31,238,31,78,31,122,31,223,31,157,31,81,31,110,31,71,31,120,31,52,31,252,31,120,31,6,31,3,31,231,31,59,31,90,31,174,31,34,31,34,30,34,29,128,31,63,31,63,30,63,29,170,31,238,31,192,31,212,31,212,30,115,31,143,31,143,30,210,31,232,31,156,31,92,31,121,31,87,31,87,30,246,31,246,30,171,31,121,31,191,31,191,30,191,29,78,31,249,31,249,30,216,31,180,31,255,31,92,31,33,31,152,31,137,31,180,31,148,31,148,30,64,31,80,31,17,31,115,31,115,30,133,31,133,30,186,31,186,30,186,29,186,28,147,31,184,31,184,30,204,31,170,31,238,31,238,30,56,31,4,31,20,31,126,31,190,31,33,31,112,31,109,31,133,31,133,30,41,31,41,30,54,31,230,31,21,31,121,31,88,31,243,31,93,31,132,31,106,31,126,31,177,31,177,30,177,29,218,31,111,31,14,31,69,31,60,31,60,30,21,31,54,31,176,31,176,30,62,31,182,31,119,31,197,31,249,31,206,31,206,30,102,31,235,31,75,31,146,31,146,30,200,31,66,31,147,31,233,31,233,30,193,31,145,31,200,31,245,31,219,31,219,30,78,31,78,30,44,31,224,31,224,30,224,29,29,31,29,30,67,31,88,31,124,31,124,30,81,31,81,30,150,31,53,31,22,31,250,31,250,30,131,31,56,31,243,31,243,30,243,29,243,28,92,31,73,31,181,31,3,31,178,31,152,31,195,31,165,31,232,31,181,31,92,31,80,31,95,31,170,31,153,31,134,31,135,31,55,31,51,31,170,31,127,31,127,30,149,31,145,31,145,30,145,29,119,31,119,30,185,31,60,31,176,31,87,31,242,31,242,30,67,31,139,31,124,31,108,31,105,31,5,31,234,31,135,31,135,30,135,29,46,31,208,31,208,30,180,31,122,31,111,31,173,31,18,31,90,31,45,31,162,31,10,31,10,30,72,31,173,31,168,31,169,31,106,31,249,31,107,31,38,31,38,30,115,31,148,31,220,31,228,31,248,31,248,30,221,31,221,30,177,31,54,31,222,31,215,31,138,31,89,31,89,30,138,31,145,31,145,30,223,31,86,31,86,30,7,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
