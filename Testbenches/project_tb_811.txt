-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 290;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (67,0,205,0,167,0,11,0,236,0,0,0,63,0,92,0,230,0,0,0,144,0,125,0,153,0,250,0,0,0,0,0,233,0,137,0,220,0,60,0,123,0,120,0,99,0,33,0,97,0,24,0,177,0,32,0,72,0,25,0,116,0,0,0,201,0,0,0,0,0,0,0,252,0,69,0,113,0,148,0,87,0,143,0,33,0,125,0,91,0,50,0,158,0,101,0,188,0,132,0,2,0,0,0,105,0,23,0,142,0,0,0,9,0,16,0,60,0,0,0,126,0,0,0,55,0,116,0,113,0,39,0,3,0,243,0,252,0,245,0,36,0,89,0,188,0,89,0,130,0,0,0,191,0,0,0,195,0,146,0,116,0,155,0,164,0,178,0,251,0,38,0,0,0,179,0,28,0,32,0,0,0,15,0,136,0,0,0,0,0,93,0,169,0,185,0,254,0,80,0,47,0,0,0,0,0,63,0,124,0,46,0,53,0,32,0,158,0,158,0,211,0,106,0,135,0,0,0,98,0,0,0,143,0,0,0,0,0,0,0,202,0,143,0,55,0,105,0,81,0,81,0,0,0,0,0,36,0,0,0,187,0,191,0,0,0,228,0,148,0,198,0,14,0,167,0,230,0,80,0,144,0,253,0,94,0,82,0,214,0,0,0,14,0,163,0,118,0,0,0,40,0,0,0,0,0,63,0,68,0,209,0,77,0,0,0,11,0,17,0,0,0,172,0,155,0,19,0,35,0,0,0,170,0,132,0,153,0,0,0,229,0,100,0,82,0,52,0,0,0,109,0,69,0,117,0,26,0,102,0,232,0,0,0,19,0,114,0,0,0,195,0,190,0,42,0,49,0,174,0,116,0,252,0,0,0,244,0,50,0,237,0,118,0,0,0,248,0,252,0,0,0,132,0,145,0,228,0,176,0,125,0,203,0,0,0,242,0,245,0,153,0,121,0,86,0,184,0,61,0,0,0,49,0,87,0,160,0,127,0,139,0,91,0,95,0,123,0,28,0,194,0,46,0,87,0,116,0,39,0,107,0,47,0,181,0,0,0,0,0,121,0,254,0,0,0,0,0,104,0,54,0,203,0,0,0,224,0,162,0,20,0,185,0,190,0,0,0,6,0,251,0,188,0,91,0,6,0,161,0,154,0,32,0,132,0,66,0,7,0,142,0,185,0,157,0,228,0,215,0,28,0,165,0,129,0,0,0,85,0,14,0,153,0,17,0,161,0,115,0,119,0,232,0,196,0,167,0,0,0,42,0,0,0,44,0,128,0,190,0,198,0,187,0,244,0,15,0,62,0);
signal scenario_full  : scenario_type := (67,31,205,31,167,31,11,31,236,31,236,30,63,31,92,31,230,31,230,30,144,31,125,31,153,31,250,31,250,30,250,29,233,31,137,31,220,31,60,31,123,31,120,31,99,31,33,31,97,31,24,31,177,31,32,31,72,31,25,31,116,31,116,30,201,31,201,30,201,29,201,28,252,31,69,31,113,31,148,31,87,31,143,31,33,31,125,31,91,31,50,31,158,31,101,31,188,31,132,31,2,31,2,30,105,31,23,31,142,31,142,30,9,31,16,31,60,31,60,30,126,31,126,30,55,31,116,31,113,31,39,31,3,31,243,31,252,31,245,31,36,31,89,31,188,31,89,31,130,31,130,30,191,31,191,30,195,31,146,31,116,31,155,31,164,31,178,31,251,31,38,31,38,30,179,31,28,31,32,31,32,30,15,31,136,31,136,30,136,29,93,31,169,31,185,31,254,31,80,31,47,31,47,30,47,29,63,31,124,31,46,31,53,31,32,31,158,31,158,31,211,31,106,31,135,31,135,30,98,31,98,30,143,31,143,30,143,29,143,28,202,31,143,31,55,31,105,31,81,31,81,31,81,30,81,29,36,31,36,30,187,31,191,31,191,30,228,31,148,31,198,31,14,31,167,31,230,31,80,31,144,31,253,31,94,31,82,31,214,31,214,30,14,31,163,31,118,31,118,30,40,31,40,30,40,29,63,31,68,31,209,31,77,31,77,30,11,31,17,31,17,30,172,31,155,31,19,31,35,31,35,30,170,31,132,31,153,31,153,30,229,31,100,31,82,31,52,31,52,30,109,31,69,31,117,31,26,31,102,31,232,31,232,30,19,31,114,31,114,30,195,31,190,31,42,31,49,31,174,31,116,31,252,31,252,30,244,31,50,31,237,31,118,31,118,30,248,31,252,31,252,30,132,31,145,31,228,31,176,31,125,31,203,31,203,30,242,31,245,31,153,31,121,31,86,31,184,31,61,31,61,30,49,31,87,31,160,31,127,31,139,31,91,31,95,31,123,31,28,31,194,31,46,31,87,31,116,31,39,31,107,31,47,31,181,31,181,30,181,29,121,31,254,31,254,30,254,29,104,31,54,31,203,31,203,30,224,31,162,31,20,31,185,31,190,31,190,30,6,31,251,31,188,31,91,31,6,31,161,31,154,31,32,31,132,31,66,31,7,31,142,31,185,31,157,31,228,31,215,31,28,31,165,31,129,31,129,30,85,31,14,31,153,31,17,31,161,31,115,31,119,31,232,31,196,31,167,31,167,30,42,31,42,30,44,31,128,31,190,31,198,31,187,31,244,31,15,31,62,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
