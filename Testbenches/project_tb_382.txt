-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 662;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (44,0,0,0,195,0,0,0,97,0,38,0,30,0,112,0,28,0,81,0,129,0,99,0,236,0,242,0,129,0,234,0,70,0,0,0,0,0,0,0,41,0,224,0,78,0,177,0,0,0,0,0,231,0,118,0,171,0,200,0,211,0,170,0,167,0,68,0,187,0,98,0,74,0,74,0,28,0,0,0,24,0,62,0,159,0,75,0,133,0,92,0,115,0,0,0,53,0,38,0,24,0,5,0,165,0,223,0,99,0,225,0,223,0,254,0,81,0,250,0,51,0,39,0,68,0,47,0,89,0,0,0,152,0,129,0,103,0,7,0,0,0,0,0,188,0,8,0,0,0,204,0,251,0,6,0,206,0,89,0,0,0,141,0,0,0,251,0,17,0,179,0,61,0,62,0,145,0,55,0,0,0,120,0,41,0,91,0,196,0,114,0,180,0,19,0,0,0,73,0,24,0,32,0,218,0,145,0,250,0,132,0,0,0,125,0,47,0,48,0,0,0,104,0,38,0,0,0,0,0,79,0,102,0,76,0,0,0,227,0,49,0,184,0,255,0,0,0,199,0,115,0,255,0,142,0,212,0,136,0,125,0,0,0,0,0,0,0,176,0,161,0,146,0,0,0,0,0,156,0,130,0,53,0,0,0,97,0,35,0,250,0,194,0,7,0,203,0,234,0,0,0,55,0,149,0,213,0,157,0,95,0,90,0,0,0,123,0,169,0,0,0,66,0,190,0,164,0,61,0,160,0,99,0,223,0,19,0,125,0,31,0,0,0,0,0,130,0,0,0,0,0,29,0,223,0,58,0,11,0,109,0,55,0,86,0,193,0,127,0,228,0,39,0,164,0,92,0,246,0,0,0,0,0,21,0,88,0,20,0,128,0,169,0,17,0,141,0,3,0,0,0,41,0,198,0,18,0,62,0,194,0,20,0,194,0,7,0,0,0,0,0,125,0,23,0,65,0,0,0,118,0,170,0,63,0,252,0,0,0,199,0,0,0,42,0,214,0,15,0,164,0,0,0,35,0,0,0,147,0,112,0,58,0,175,0,215,0,237,0,44,0,234,0,217,0,135,0,0,0,147,0,0,0,82,0,174,0,0,0,254,0,14,0,10,0,189,0,148,0,237,0,239,0,0,0,141,0,128,0,16,0,0,0,2,0,203,0,163,0,213,0,145,0,92,0,22,0,195,0,19,0,134,0,181,0,78,0,179,0,4,0,126,0,62,0,93,0,0,0,124,0,241,0,77,0,50,0,243,0,0,0,254,0,109,0,0,0,204,0,122,0,50,0,198,0,0,0,87,0,190,0,242,0,32,0,222,0,237,0,0,0,249,0,0,0,9,0,0,0,0,0,0,0,132,0,187,0,32,0,74,0,218,0,54,0,0,0,202,0,177,0,209,0,195,0,254,0,83,0,62,0,0,0,62,0,0,0,0,0,0,0,170,0,121,0,193,0,0,0,56,0,0,0,183,0,0,0,63,0,213,0,163,0,93,0,116,0,0,0,28,0,165,0,61,0,144,0,0,0,45,0,216,0,0,0,92,0,242,0,0,0,162,0,228,0,246,0,0,0,0,0,187,0,207,0,214,0,0,0,0,0,0,0,220,0,0,0,22,0,15,0,132,0,87,0,27,0,213,0,174,0,0,0,97,0,165,0,16,0,103,0,0,0,178,0,54,0,86,0,166,0,54,0,172,0,238,0,0,0,120,0,74,0,207,0,140,0,151,0,148,0,190,0,161,0,238,0,128,0,86,0,105,0,184,0,69,0,112,0,220,0,0,0,222,0,97,0,105,0,41,0,88,0,42,0,177,0,97,0,101,0,7,0,228,0,40,0,47,0,237,0,166,0,45,0,82,0,0,0,47,0,130,0,175,0,212,0,75,0,39,0,55,0,215,0,254,0,0,0,224,0,0,0,31,0,63,0,142,0,128,0,202,0,32,0,0,0,0,0,20,0,0,0,239,0,249,0,98,0,75,0,47,0,41,0,112,0,0,0,0,0,0,0,193,0,14,0,54,0,246,0,80,0,64,0,248,0,205,0,155,0,218,0,201,0,37,0,120,0,38,0,191,0,188,0,241,0,57,0,14,0,232,0,175,0,205,0,0,0,81,0,184,0,0,0,28,0,83,0,194,0,135,0,211,0,254,0,205,0,136,0,223,0,50,0,143,0,116,0,7,0,214,0,243,0,0,0,121,0,0,0,36,0,40,0,15,0,102,0,0,0,232,0,25,0,0,0,158,0,106,0,17,0,231,0,0,0,134,0,67,0,158,0,27,0,188,0,205,0,212,0,39,0,250,0,0,0,0,0,0,0,0,0,217,0,137,0,247,0,163,0,221,0,177,0,25,0,0,0,0,0,37,0,0,0,0,0,103,0,165,0,65,0,0,0,79,0,104,0,67,0,252,0,200,0,0,0,0,0,1,0,152,0,0,0,164,0,100,0,170,0,38,0,63,0,245,0,52,0,0,0,109,0,255,0,211,0,49,0,153,0,85,0,249,0,152,0,182,0,205,0,136,0,63,0,98,0,254,0,0,0,0,0,75,0,165,0,219,0,108,0,237,0,150,0,0,0,189,0,0,0,236,0,189,0,153,0,107,0,205,0,45,0,36,0,192,0,0,0,48,0,91,0,143,0,187,0,0,0,0,0,45,0,128,0,108,0,4,0,228,0,0,0,133,0,143,0,68,0,17,0,247,0,236,0,251,0,191,0,182,0,67,0,113,0,130,0,0,0,205,0,0,0,63,0,151,0,240,0,202,0,152,0,33,0,0,0,73,0,82,0,46,0,145,0,103,0,130,0,13,0,40,0,197,0,234,0,168,0,197,0,79,0,0,0,197,0,12,0,145,0,65,0,0,0,84,0,0,0,153,0,124,0,202,0,127,0,234,0,0,0,72,0,51,0,61,0,10,0,210,0,132,0,155,0,217,0,177,0,15,0,193,0,0,0,98,0,0,0,32,0,36,0);
signal scenario_full  : scenario_type := (44,31,44,30,195,31,195,30,97,31,38,31,30,31,112,31,28,31,81,31,129,31,99,31,236,31,242,31,129,31,234,31,70,31,70,30,70,29,70,28,41,31,224,31,78,31,177,31,177,30,177,29,231,31,118,31,171,31,200,31,211,31,170,31,167,31,68,31,187,31,98,31,74,31,74,31,28,31,28,30,24,31,62,31,159,31,75,31,133,31,92,31,115,31,115,30,53,31,38,31,24,31,5,31,165,31,223,31,99,31,225,31,223,31,254,31,81,31,250,31,51,31,39,31,68,31,47,31,89,31,89,30,152,31,129,31,103,31,7,31,7,30,7,29,188,31,8,31,8,30,204,31,251,31,6,31,206,31,89,31,89,30,141,31,141,30,251,31,17,31,179,31,61,31,62,31,145,31,55,31,55,30,120,31,41,31,91,31,196,31,114,31,180,31,19,31,19,30,73,31,24,31,32,31,218,31,145,31,250,31,132,31,132,30,125,31,47,31,48,31,48,30,104,31,38,31,38,30,38,29,79,31,102,31,76,31,76,30,227,31,49,31,184,31,255,31,255,30,199,31,115,31,255,31,142,31,212,31,136,31,125,31,125,30,125,29,125,28,176,31,161,31,146,31,146,30,146,29,156,31,130,31,53,31,53,30,97,31,35,31,250,31,194,31,7,31,203,31,234,31,234,30,55,31,149,31,213,31,157,31,95,31,90,31,90,30,123,31,169,31,169,30,66,31,190,31,164,31,61,31,160,31,99,31,223,31,19,31,125,31,31,31,31,30,31,29,130,31,130,30,130,29,29,31,223,31,58,31,11,31,109,31,55,31,86,31,193,31,127,31,228,31,39,31,164,31,92,31,246,31,246,30,246,29,21,31,88,31,20,31,128,31,169,31,17,31,141,31,3,31,3,30,41,31,198,31,18,31,62,31,194,31,20,31,194,31,7,31,7,30,7,29,125,31,23,31,65,31,65,30,118,31,170,31,63,31,252,31,252,30,199,31,199,30,42,31,214,31,15,31,164,31,164,30,35,31,35,30,147,31,112,31,58,31,175,31,215,31,237,31,44,31,234,31,217,31,135,31,135,30,147,31,147,30,82,31,174,31,174,30,254,31,14,31,10,31,189,31,148,31,237,31,239,31,239,30,141,31,128,31,16,31,16,30,2,31,203,31,163,31,213,31,145,31,92,31,22,31,195,31,19,31,134,31,181,31,78,31,179,31,4,31,126,31,62,31,93,31,93,30,124,31,241,31,77,31,50,31,243,31,243,30,254,31,109,31,109,30,204,31,122,31,50,31,198,31,198,30,87,31,190,31,242,31,32,31,222,31,237,31,237,30,249,31,249,30,9,31,9,30,9,29,9,28,132,31,187,31,32,31,74,31,218,31,54,31,54,30,202,31,177,31,209,31,195,31,254,31,83,31,62,31,62,30,62,31,62,30,62,29,62,28,170,31,121,31,193,31,193,30,56,31,56,30,183,31,183,30,63,31,213,31,163,31,93,31,116,31,116,30,28,31,165,31,61,31,144,31,144,30,45,31,216,31,216,30,92,31,242,31,242,30,162,31,228,31,246,31,246,30,246,29,187,31,207,31,214,31,214,30,214,29,214,28,220,31,220,30,22,31,15,31,132,31,87,31,27,31,213,31,174,31,174,30,97,31,165,31,16,31,103,31,103,30,178,31,54,31,86,31,166,31,54,31,172,31,238,31,238,30,120,31,74,31,207,31,140,31,151,31,148,31,190,31,161,31,238,31,128,31,86,31,105,31,184,31,69,31,112,31,220,31,220,30,222,31,97,31,105,31,41,31,88,31,42,31,177,31,97,31,101,31,7,31,228,31,40,31,47,31,237,31,166,31,45,31,82,31,82,30,47,31,130,31,175,31,212,31,75,31,39,31,55,31,215,31,254,31,254,30,224,31,224,30,31,31,63,31,142,31,128,31,202,31,32,31,32,30,32,29,20,31,20,30,239,31,249,31,98,31,75,31,47,31,41,31,112,31,112,30,112,29,112,28,193,31,14,31,54,31,246,31,80,31,64,31,248,31,205,31,155,31,218,31,201,31,37,31,120,31,38,31,191,31,188,31,241,31,57,31,14,31,232,31,175,31,205,31,205,30,81,31,184,31,184,30,28,31,83,31,194,31,135,31,211,31,254,31,205,31,136,31,223,31,50,31,143,31,116,31,7,31,214,31,243,31,243,30,121,31,121,30,36,31,40,31,15,31,102,31,102,30,232,31,25,31,25,30,158,31,106,31,17,31,231,31,231,30,134,31,67,31,158,31,27,31,188,31,205,31,212,31,39,31,250,31,250,30,250,29,250,28,250,27,217,31,137,31,247,31,163,31,221,31,177,31,25,31,25,30,25,29,37,31,37,30,37,29,103,31,165,31,65,31,65,30,79,31,104,31,67,31,252,31,200,31,200,30,200,29,1,31,152,31,152,30,164,31,100,31,170,31,38,31,63,31,245,31,52,31,52,30,109,31,255,31,211,31,49,31,153,31,85,31,249,31,152,31,182,31,205,31,136,31,63,31,98,31,254,31,254,30,254,29,75,31,165,31,219,31,108,31,237,31,150,31,150,30,189,31,189,30,236,31,189,31,153,31,107,31,205,31,45,31,36,31,192,31,192,30,48,31,91,31,143,31,187,31,187,30,187,29,45,31,128,31,108,31,4,31,228,31,228,30,133,31,143,31,68,31,17,31,247,31,236,31,251,31,191,31,182,31,67,31,113,31,130,31,130,30,205,31,205,30,63,31,151,31,240,31,202,31,152,31,33,31,33,30,73,31,82,31,46,31,145,31,103,31,130,31,13,31,40,31,197,31,234,31,168,31,197,31,79,31,79,30,197,31,12,31,145,31,65,31,65,30,84,31,84,30,153,31,124,31,202,31,127,31,234,31,234,30,72,31,51,31,61,31,10,31,210,31,132,31,155,31,217,31,177,31,15,31,193,31,193,30,98,31,98,30,32,31,36,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
