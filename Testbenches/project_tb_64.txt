-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 968;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (25,0,11,0,126,0,0,0,207,0,0,0,103,0,205,0,157,0,89,0,114,0,0,0,0,0,76,0,143,0,0,0,218,0,29,0,210,0,102,0,0,0,244,0,54,0,219,0,4,0,20,0,161,0,230,0,241,0,126,0,0,0,71,0,24,0,10,0,250,0,0,0,192,0,129,0,232,0,237,0,222,0,49,0,85,0,212,0,187,0,12,0,204,0,0,0,242,0,42,0,51,0,133,0,0,0,141,0,0,0,74,0,91,0,216,0,39,0,142,0,234,0,0,0,237,0,220,0,33,0,0,0,56,0,115,0,89,0,188,0,99,0,126,0,56,0,0,0,0,0,0,0,139,0,42,0,0,0,144,0,204,0,209,0,194,0,224,0,220,0,174,0,90,0,239,0,170,0,184,0,254,0,132,0,229,0,116,0,195,0,245,0,223,0,80,0,118,0,229,0,158,0,0,0,29,0,132,0,46,0,214,0,220,0,237,0,229,0,57,0,145,0,169,0,15,0,157,0,0,0,205,0,77,0,194,0,163,0,80,0,28,0,251,0,203,0,220,0,213,0,129,0,112,0,10,0,164,0,60,0,137,0,0,0,191,0,84,0,212,0,51,0,73,0,239,0,75,0,111,0,92,0,0,0,250,0,0,0,83,0,149,0,0,0,123,0,0,0,182,0,181,0,107,0,38,0,219,0,171,0,111,0,65,0,199,0,114,0,16,0,90,0,227,0,207,0,204,0,245,0,206,0,58,0,233,0,217,0,229,0,32,0,163,0,10,0,71,0,88,0,0,0,0,0,0,0,0,0,14,0,191,0,176,0,141,0,69,0,225,0,184,0,210,0,150,0,145,0,217,0,149,0,34,0,0,0,0,0,100,0,189,0,51,0,167,0,0,0,7,0,187,0,65,0,85,0,246,0,0,0,174,0,0,0,77,0,187,0,6,0,216,0,0,0,144,0,255,0,13,0,185,0,29,0,17,0,67,0,32,0,0,0,248,0,0,0,56,0,237,0,21,0,0,0,87,0,252,0,130,0,154,0,203,0,158,0,7,0,0,0,73,0,145,0,0,0,116,0,217,0,253,0,62,0,46,0,241,0,201,0,0,0,239,0,0,0,19,0,152,0,0,0,101,0,242,0,0,0,214,0,222,0,248,0,160,0,65,0,0,0,0,0,39,0,99,0,66,0,87,0,107,0,69,0,0,0,165,0,150,0,232,0,211,0,62,0,213,0,65,0,0,0,106,0,250,0,1,0,195,0,45,0,65,0,116,0,87,0,0,0,238,0,189,0,206,0,9,0,152,0,94,0,84,0,242,0,0,0,163,0,164,0,0,0,157,0,209,0,123,0,162,0,0,0,252,0,235,0,23,0,223,0,39,0,0,0,206,0,216,0,133,0,0,0,71,0,105,0,192,0,72,0,202,0,0,0,36,0,156,0,113,0,132,0,191,0,150,0,249,0,250,0,115,0,175,0,0,0,23,0,0,0,159,0,234,0,179,0,124,0,228,0,241,0,231,0,223,0,48,0,0,0,212,0,20,0,230,0,0,0,179,0,37,0,31,0,34,0,73,0,158,0,188,0,0,0,0,0,85,0,96,0,42,0,0,0,2,0,222,0,186,0,0,0,0,0,130,0,89,0,244,0,0,0,0,0,3,0,220,0,68,0,0,0,0,0,99,0,90,0,0,0,139,0,187,0,0,0,253,0,104,0,171,0,54,0,0,0,41,0,183,0,99,0,151,0,21,0,221,0,205,0,154,0,126,0,44,0,90,0,87,0,190,0,237,0,0,0,22,0,221,0,172,0,16,0,153,0,91,0,50,0,73,0,65,0,255,0,247,0,0,0,91,0,107,0,0,0,132,0,219,0,75,0,239,0,132,0,0,0,0,0,98,0,68,0,74,0,0,0,127,0,117,0,0,0,7,0,15,0,43,0,18,0,60,0,154,0,4,0,63,0,147,0,73,0,17,0,187,0,0,0,37,0,255,0,79,0,117,0,168,0,125,0,86,0,208,0,156,0,111,0,61,0,238,0,6,0,24,0,213,0,173,0,78,0,220,0,73,0,57,0,63,0,0,0,217,0,254,0,203,0,0,0,109,0,7,0,0,0,33,0,71,0,71,0,146,0,207,0,221,0,82,0,41,0,67,0,136,0,16,0,190,0,0,0,20,0,140,0,0,0,0,0,240,0,0,0,52,0,0,0,155,0,218,0,235,0,244,0,14,0,116,0,19,0,38,0,98,0,64,0,117,0,0,0,87,0,172,0,109,0,234,0,0,0,156,0,129,0,40,0,69,0,230,0,30,0,127,0,43,0,143,0,0,0,201,0,39,0,245,0,206,0,74,0,155,0,4,0,213,0,100,0,0,0,236,0,0,0,112,0,206,0,60,0,37,0,0,0,172,0,76,0,166,0,168,0,239,0,0,0,203,0,0,0,224,0,160,0,92,0,209,0,0,0,158,0,0,0,171,0,199,0,126,0,103,0,37,0,14,0,0,0,186,0,30,0,207,0,0,0,246,0,43,0,0,0,106,0,82,0,215,0,156,0,218,0,44,0,0,0,89,0,124,0,36,0,0,0,0,0,247,0,0,0,0,0,246,0,218,0,186,0,225,0,52,0,185,0,199,0,103,0,157,0,168,0,6,0,84,0,3,0,70,0,36,0,28,0,211,0,59,0,21,0,146,0,144,0,171,0,96,0,0,0,62,0,49,0,44,0,0,0,182,0,98,0,0,0,237,0,11,0,137,0,119,0,74,0,225,0,86,0,122,0,28,0,38,0,240,0,160,0,68,0,118,0,124,0,133,0,127,0,20,0,0,0,135,0,142,0,42,0,0,0,133,0,118,0,254,0,13,0,230,0,90,0,195,0,167,0,38,0,54,0,183,0,21,0,183,0,204,0,223,0,115,0,196,0,65,0,0,0,77,0,114,0,0,0,172,0,61,0,4,0,178,0,0,0,4,0,220,0,115,0,15,0,118,0,16,0,129,0,0,0,98,0,187,0,7,0,72,0,25,0,0,0,120,0,6,0,215,0,235,0,136,0,187,0,213,0,159,0,142,0,105,0,21,0,89,0,202,0,133,0,231,0,74,0,0,0,14,0,173,0,10,0,195,0,93,0,82,0,0,0,24,0,119,0,65,0,0,0,49,0,84,0,102,0,124,0,158,0,122,0,106,0,110,0,133,0,0,0,248,0,178,0,0,0,69,0,7,0,8,0,244,0,224,0,83,0,233,0,134,0,218,0,83,0,84,0,0,0,0,0,0,0,64,0,6,0,5,0,70,0,34,0,0,0,0,0,0,0,173,0,73,0,254,0,28,0,0,0,0,0,254,0,150,0,0,0,73,0,214,0,50,0,228,0,89,0,218,0,187,0,138,0,0,0,5,0,167,0,252,0,0,0,207,0,44,0,241,0,104,0,161,0,159,0,249,0,12,0,0,0,0,0,56,0,163,0,48,0,239,0,181,0,221,0,137,0,59,0,166,0,0,0,167,0,0,0,0,0,133,0,89,0,160,0,222,0,195,0,0,0,229,0,181,0,0,0,123,0,160,0,0,0,230,0,10,0,225,0,67,0,0,0,40,0,232,0,0,0,55,0,0,0,236,0,14,0,0,0,129,0,19,0,104,0,78,0,42,0,20,0,0,0,0,0,123,0,0,0,0,0,179,0,164,0,0,0,218,0,30,0,221,0,0,0,211,0,115,0,0,0,79,0,55,0,189,0,98,0,0,0,10,0,121,0,194,0,88,0,0,0,131,0,0,0,53,0,0,0,23,0,158,0,0,0,89,0,172,0,226,0,203,0,230,0,199,0,79,0,184,0,185,0,244,0,91,0,5,0,51,0,74,0,24,0,0,0,179,0,157,0,203,0,0,0,0,0,103,0,14,0,113,0,0,0,0,0,40,0,87,0,142,0,195,0,114,0,239,0,64,0,68,0,96,0,135,0,0,0,49,0,61,0,0,0,208,0,222,0,46,0,181,0,0,0,173,0,181,0,246,0,188,0,68,0,212,0,22,0,102,0,159,0,208,0,43,0,113,0,80,0,98,0,219,0,187,0,28,0,24,0,0,0,22,0,120,0,23,0,53,0,114,0,0,0,96,0,76,0,134,0,244,0,151,0,153,0,108,0,120,0,0,0,233,0,0,0,248,0,37,0,0,0,0,0,159,0,235,0,194,0,51,0,0,0,219,0,217,0,148,0,208,0,27,0,230,0,77,0,24,0,190,0,215,0,141,0,228,0,225,0,147,0,22,0,142,0,19,0,30,0,0,0,32,0,0,0,166,0,26,0,34,0,18,0,148,0,130,0,224,0,134,0,90,0,76,0,243,0,0,0);
signal scenario_full  : scenario_type := (25,31,11,31,126,31,126,30,207,31,207,30,103,31,205,31,157,31,89,31,114,31,114,30,114,29,76,31,143,31,143,30,218,31,29,31,210,31,102,31,102,30,244,31,54,31,219,31,4,31,20,31,161,31,230,31,241,31,126,31,126,30,71,31,24,31,10,31,250,31,250,30,192,31,129,31,232,31,237,31,222,31,49,31,85,31,212,31,187,31,12,31,204,31,204,30,242,31,42,31,51,31,133,31,133,30,141,31,141,30,74,31,91,31,216,31,39,31,142,31,234,31,234,30,237,31,220,31,33,31,33,30,56,31,115,31,89,31,188,31,99,31,126,31,56,31,56,30,56,29,56,28,139,31,42,31,42,30,144,31,204,31,209,31,194,31,224,31,220,31,174,31,90,31,239,31,170,31,184,31,254,31,132,31,229,31,116,31,195,31,245,31,223,31,80,31,118,31,229,31,158,31,158,30,29,31,132,31,46,31,214,31,220,31,237,31,229,31,57,31,145,31,169,31,15,31,157,31,157,30,205,31,77,31,194,31,163,31,80,31,28,31,251,31,203,31,220,31,213,31,129,31,112,31,10,31,164,31,60,31,137,31,137,30,191,31,84,31,212,31,51,31,73,31,239,31,75,31,111,31,92,31,92,30,250,31,250,30,83,31,149,31,149,30,123,31,123,30,182,31,181,31,107,31,38,31,219,31,171,31,111,31,65,31,199,31,114,31,16,31,90,31,227,31,207,31,204,31,245,31,206,31,58,31,233,31,217,31,229,31,32,31,163,31,10,31,71,31,88,31,88,30,88,29,88,28,88,27,14,31,191,31,176,31,141,31,69,31,225,31,184,31,210,31,150,31,145,31,217,31,149,31,34,31,34,30,34,29,100,31,189,31,51,31,167,31,167,30,7,31,187,31,65,31,85,31,246,31,246,30,174,31,174,30,77,31,187,31,6,31,216,31,216,30,144,31,255,31,13,31,185,31,29,31,17,31,67,31,32,31,32,30,248,31,248,30,56,31,237,31,21,31,21,30,87,31,252,31,130,31,154,31,203,31,158,31,7,31,7,30,73,31,145,31,145,30,116,31,217,31,253,31,62,31,46,31,241,31,201,31,201,30,239,31,239,30,19,31,152,31,152,30,101,31,242,31,242,30,214,31,222,31,248,31,160,31,65,31,65,30,65,29,39,31,99,31,66,31,87,31,107,31,69,31,69,30,165,31,150,31,232,31,211,31,62,31,213,31,65,31,65,30,106,31,250,31,1,31,195,31,45,31,65,31,116,31,87,31,87,30,238,31,189,31,206,31,9,31,152,31,94,31,84,31,242,31,242,30,163,31,164,31,164,30,157,31,209,31,123,31,162,31,162,30,252,31,235,31,23,31,223,31,39,31,39,30,206,31,216,31,133,31,133,30,71,31,105,31,192,31,72,31,202,31,202,30,36,31,156,31,113,31,132,31,191,31,150,31,249,31,250,31,115,31,175,31,175,30,23,31,23,30,159,31,234,31,179,31,124,31,228,31,241,31,231,31,223,31,48,31,48,30,212,31,20,31,230,31,230,30,179,31,37,31,31,31,34,31,73,31,158,31,188,31,188,30,188,29,85,31,96,31,42,31,42,30,2,31,222,31,186,31,186,30,186,29,130,31,89,31,244,31,244,30,244,29,3,31,220,31,68,31,68,30,68,29,99,31,90,31,90,30,139,31,187,31,187,30,253,31,104,31,171,31,54,31,54,30,41,31,183,31,99,31,151,31,21,31,221,31,205,31,154,31,126,31,44,31,90,31,87,31,190,31,237,31,237,30,22,31,221,31,172,31,16,31,153,31,91,31,50,31,73,31,65,31,255,31,247,31,247,30,91,31,107,31,107,30,132,31,219,31,75,31,239,31,132,31,132,30,132,29,98,31,68,31,74,31,74,30,127,31,117,31,117,30,7,31,15,31,43,31,18,31,60,31,154,31,4,31,63,31,147,31,73,31,17,31,187,31,187,30,37,31,255,31,79,31,117,31,168,31,125,31,86,31,208,31,156,31,111,31,61,31,238,31,6,31,24,31,213,31,173,31,78,31,220,31,73,31,57,31,63,31,63,30,217,31,254,31,203,31,203,30,109,31,7,31,7,30,33,31,71,31,71,31,146,31,207,31,221,31,82,31,41,31,67,31,136,31,16,31,190,31,190,30,20,31,140,31,140,30,140,29,240,31,240,30,52,31,52,30,155,31,218,31,235,31,244,31,14,31,116,31,19,31,38,31,98,31,64,31,117,31,117,30,87,31,172,31,109,31,234,31,234,30,156,31,129,31,40,31,69,31,230,31,30,31,127,31,43,31,143,31,143,30,201,31,39,31,245,31,206,31,74,31,155,31,4,31,213,31,100,31,100,30,236,31,236,30,112,31,206,31,60,31,37,31,37,30,172,31,76,31,166,31,168,31,239,31,239,30,203,31,203,30,224,31,160,31,92,31,209,31,209,30,158,31,158,30,171,31,199,31,126,31,103,31,37,31,14,31,14,30,186,31,30,31,207,31,207,30,246,31,43,31,43,30,106,31,82,31,215,31,156,31,218,31,44,31,44,30,89,31,124,31,36,31,36,30,36,29,247,31,247,30,247,29,246,31,218,31,186,31,225,31,52,31,185,31,199,31,103,31,157,31,168,31,6,31,84,31,3,31,70,31,36,31,28,31,211,31,59,31,21,31,146,31,144,31,171,31,96,31,96,30,62,31,49,31,44,31,44,30,182,31,98,31,98,30,237,31,11,31,137,31,119,31,74,31,225,31,86,31,122,31,28,31,38,31,240,31,160,31,68,31,118,31,124,31,133,31,127,31,20,31,20,30,135,31,142,31,42,31,42,30,133,31,118,31,254,31,13,31,230,31,90,31,195,31,167,31,38,31,54,31,183,31,21,31,183,31,204,31,223,31,115,31,196,31,65,31,65,30,77,31,114,31,114,30,172,31,61,31,4,31,178,31,178,30,4,31,220,31,115,31,15,31,118,31,16,31,129,31,129,30,98,31,187,31,7,31,72,31,25,31,25,30,120,31,6,31,215,31,235,31,136,31,187,31,213,31,159,31,142,31,105,31,21,31,89,31,202,31,133,31,231,31,74,31,74,30,14,31,173,31,10,31,195,31,93,31,82,31,82,30,24,31,119,31,65,31,65,30,49,31,84,31,102,31,124,31,158,31,122,31,106,31,110,31,133,31,133,30,248,31,178,31,178,30,69,31,7,31,8,31,244,31,224,31,83,31,233,31,134,31,218,31,83,31,84,31,84,30,84,29,84,28,64,31,6,31,5,31,70,31,34,31,34,30,34,29,34,28,173,31,73,31,254,31,28,31,28,30,28,29,254,31,150,31,150,30,73,31,214,31,50,31,228,31,89,31,218,31,187,31,138,31,138,30,5,31,167,31,252,31,252,30,207,31,44,31,241,31,104,31,161,31,159,31,249,31,12,31,12,30,12,29,56,31,163,31,48,31,239,31,181,31,221,31,137,31,59,31,166,31,166,30,167,31,167,30,167,29,133,31,89,31,160,31,222,31,195,31,195,30,229,31,181,31,181,30,123,31,160,31,160,30,230,31,10,31,225,31,67,31,67,30,40,31,232,31,232,30,55,31,55,30,236,31,14,31,14,30,129,31,19,31,104,31,78,31,42,31,20,31,20,30,20,29,123,31,123,30,123,29,179,31,164,31,164,30,218,31,30,31,221,31,221,30,211,31,115,31,115,30,79,31,55,31,189,31,98,31,98,30,10,31,121,31,194,31,88,31,88,30,131,31,131,30,53,31,53,30,23,31,158,31,158,30,89,31,172,31,226,31,203,31,230,31,199,31,79,31,184,31,185,31,244,31,91,31,5,31,51,31,74,31,24,31,24,30,179,31,157,31,203,31,203,30,203,29,103,31,14,31,113,31,113,30,113,29,40,31,87,31,142,31,195,31,114,31,239,31,64,31,68,31,96,31,135,31,135,30,49,31,61,31,61,30,208,31,222,31,46,31,181,31,181,30,173,31,181,31,246,31,188,31,68,31,212,31,22,31,102,31,159,31,208,31,43,31,113,31,80,31,98,31,219,31,187,31,28,31,24,31,24,30,22,31,120,31,23,31,53,31,114,31,114,30,96,31,76,31,134,31,244,31,151,31,153,31,108,31,120,31,120,30,233,31,233,30,248,31,37,31,37,30,37,29,159,31,235,31,194,31,51,31,51,30,219,31,217,31,148,31,208,31,27,31,230,31,77,31,24,31,190,31,215,31,141,31,228,31,225,31,147,31,22,31,142,31,19,31,30,31,30,30,32,31,32,30,166,31,26,31,34,31,18,31,148,31,130,31,224,31,134,31,90,31,76,31,243,31,243,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
