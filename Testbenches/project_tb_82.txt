-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 789;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (119,0,22,0,85,0,0,0,209,0,60,0,201,0,172,0,235,0,89,0,65,0,245,0,209,0,226,0,126,0,195,0,241,0,248,0,130,0,191,0,0,0,203,0,132,0,130,0,133,0,8,0,220,0,249,0,212,0,15,0,246,0,24,0,255,0,0,0,145,0,134,0,250,0,249,0,210,0,194,0,84,0,0,0,80,0,0,0,52,0,50,0,0,0,242,0,90,0,73,0,241,0,19,0,150,0,61,0,149,0,236,0,97,0,98,0,186,0,64,0,0,0,219,0,0,0,98,0,131,0,205,0,161,0,51,0,194,0,29,0,152,0,78,0,223,0,55,0,50,0,125,0,0,0,2,0,165,0,132,0,209,0,116,0,0,0,122,0,0,0,0,0,47,0,176,0,157,0,74,0,138,0,0,0,186,0,174,0,171,0,0,0,229,0,90,0,176,0,44,0,234,0,0,0,17,0,22,0,45,0,0,0,219,0,31,0,207,0,137,0,0,0,0,0,46,0,183,0,146,0,220,0,0,0,0,0,251,0,0,0,95,0,129,0,54,0,218,0,186,0,61,0,0,0,0,0,229,0,43,0,155,0,85,0,93,0,49,0,58,0,35,0,93,0,135,0,233,0,44,0,47,0,0,0,120,0,0,0,246,0,90,0,95,0,85,0,194,0,140,0,0,0,240,0,229,0,45,0,99,0,239,0,41,0,181,0,61,0,247,0,47,0,122,0,210,0,177,0,101,0,157,0,0,0,114,0,0,0,139,0,0,0,133,0,198,0,72,0,159,0,0,0,0,0,203,0,0,0,56,0,21,0,61,0,204,0,69,0,38,0,2,0,215,0,201,0,199,0,149,0,87,0,233,0,12,0,0,0,199,0,213,0,183,0,64,0,2,0,111,0,113,0,234,0,54,0,215,0,11,0,124,0,73,0,0,0,63,0,2,0,0,0,199,0,255,0,0,0,202,0,162,0,0,0,73,0,60,0,250,0,0,0,207,0,215,0,228,0,244,0,182,0,104,0,101,0,1,0,168,0,60,0,63,0,44,0,78,0,24,0,45,0,72,0,4,0,0,0,67,0,80,0,0,0,229,0,172,0,137,0,138,0,194,0,0,0,76,0,130,0,234,0,82,0,182,0,167,0,0,0,64,0,218,0,206,0,147,0,127,0,109,0,171,0,83,0,37,0,0,0,216,0,224,0,219,0,185,0,0,0,111,0,143,0,149,0,1,0,0,0,245,0,184,0,3,0,146,0,19,0,153,0,147,0,160,0,131,0,40,0,66,0,94,0,241,0,15,0,0,0,180,0,36,0,183,0,74,0,213,0,96,0,0,0,252,0,0,0,0,0,248,0,134,0,75,0,201,0,164,0,216,0,254,0,0,0,31,0,0,0,46,0,87,0,169,0,58,0,116,0,75,0,163,0,58,0,0,0,32,0,109,0,234,0,227,0,0,0,54,0,245,0,0,0,199,0,164,0,242,0,239,0,204,0,230,0,4,0,86,0,0,0,49,0,0,0,184,0,155,0,105,0,105,0,144,0,72,0,55,0,20,0,172,0,85,0,129,0,177,0,201,0,0,0,124,0,108,0,253,0,0,0,33,0,203,0,0,0,240,0,193,0,0,0,29,0,138,0,215,0,180,0,19,0,107,0,0,0,24,0,0,0,0,0,0,0,0,0,92,0,0,0,241,0,0,0,185,0,11,0,18,0,194,0,236,0,0,0,226,0,86,0,35,0,0,0,182,0,108,0,48,0,176,0,0,0,0,0,13,0,0,0,241,0,202,0,54,0,43,0,203,0,213,0,0,0,10,0,124,0,4,0,0,0,160,0,0,0,18,0,252,0,148,0,0,0,159,0,87,0,145,0,166,0,149,0,120,0,246,0,0,0,0,0,150,0,59,0,66,0,225,0,224,0,73,0,0,0,73,0,118,0,181,0,8,0,0,0,0,0,95,0,158,0,183,0,110,0,55,0,0,0,39,0,205,0,119,0,141,0,95,0,173,0,56,0,176,0,182,0,49,0,23,0,112,0,14,0,0,0,56,0,150,0,122,0,73,0,186,0,69,0,0,0,200,0,98,0,0,0,61,0,166,0,86,0,0,0,0,0,154,0,229,0,192,0,0,0,174,0,0,0,62,0,48,0,177,0,0,0,34,0,212,0,0,0,30,0,0,0,187,0,0,0,0,0,183,0,75,0,0,0,0,0,189,0,204,0,0,0,98,0,0,0,220,0,214,0,0,0,221,0,92,0,61,0,34,0,0,0,104,0,219,0,0,0,0,0,0,0,151,0,132,0,43,0,141,0,237,0,17,0,228,0,4,0,135,0,0,0,214,0,88,0,148,0,0,0,220,0,14,0,178,0,0,0,142,0,138,0,25,0,106,0,0,0,48,0,13,0,0,0,208,0,25,0,209,0,142,0,0,0,18,0,0,0,244,0,233,0,90,0,220,0,203,0,114,0,110,0,130,0,3,0,11,0,178,0,137,0,0,0,203,0,202,0,213,0,108,0,76,0,51,0,180,0,35,0,0,0,198,0,16,0,0,0,64,0,113,0,64,0,36,0,56,0,253,0,219,0,174,0,249,0,251,0,0,0,68,0,107,0,127,0,134,0,54,0,25,0,137,0,39,0,29,0,208,0,210,0,245,0,202,0,58,0,137,0,132,0,56,0,0,0,113,0,223,0,20,0,202,0,190,0,0,0,30,0,147,0,127,0,198,0,69,0,0,0,47,0,179,0,51,0,80,0,74,0,254,0,64,0,247,0,166,0,70,0,71,0,251,0,247,0,180,0,0,0,0,0,114,0,189,0,84,0,0,0,0,0,0,0,240,0,150,0,110,0,85,0,204,0,217,0,26,0,82,0,0,0,231,0,77,0,0,0,78,0,0,0,254,0,59,0,102,0,188,0,153,0,220,0,92,0,194,0,0,0,193,0,59,0,184,0,185,0,184,0,238,0,31,0,62,0,0,0,193,0,25,0,209,0,211,0,202,0,75,0,170,0,15,0,151,0,156,0,109,0,179,0,0,0,135,0,174,0,76,0,137,0,0,0,19,0,102,0,0,0,0,0,242,0,7,0,0,0,98,0,68,0,165,0,58,0,245,0,0,0,134,0,62,0,0,0,161,0,218,0,7,0,124,0,164,0,252,0,10,0,0,0,82,0,123,0,156,0,48,0,183,0,185,0,200,0,21,0,246,0,0,0,50,0,155,0,0,0,10,0,102,0,98,0,216,0,91,0,147,0,0,0,1,0,189,0,0,0,239,0,28,0,46,0,0,0,141,0,186,0,0,0,237,0,191,0,35,0,186,0,205,0,49,0,168,0,0,0,8,0,48,0,43,0,21,0,16,0,197,0,142,0,140,0,168,0,0,0,0,0,148,0,139,0,247,0,0,0,220,0,0,0,157,0,0,0,101,0,253,0,143,0,41,0,224,0,0,0,230,0,71,0,119,0,53,0,231,0,79,0,198,0,100,0,210,0,67,0,138,0,144,0,0,0,242,0,71,0,130,0,21,0,0,0,0,0,36,0,20,0);
signal scenario_full  : scenario_type := (119,31,22,31,85,31,85,30,209,31,60,31,201,31,172,31,235,31,89,31,65,31,245,31,209,31,226,31,126,31,195,31,241,31,248,31,130,31,191,31,191,30,203,31,132,31,130,31,133,31,8,31,220,31,249,31,212,31,15,31,246,31,24,31,255,31,255,30,145,31,134,31,250,31,249,31,210,31,194,31,84,31,84,30,80,31,80,30,52,31,50,31,50,30,242,31,90,31,73,31,241,31,19,31,150,31,61,31,149,31,236,31,97,31,98,31,186,31,64,31,64,30,219,31,219,30,98,31,131,31,205,31,161,31,51,31,194,31,29,31,152,31,78,31,223,31,55,31,50,31,125,31,125,30,2,31,165,31,132,31,209,31,116,31,116,30,122,31,122,30,122,29,47,31,176,31,157,31,74,31,138,31,138,30,186,31,174,31,171,31,171,30,229,31,90,31,176,31,44,31,234,31,234,30,17,31,22,31,45,31,45,30,219,31,31,31,207,31,137,31,137,30,137,29,46,31,183,31,146,31,220,31,220,30,220,29,251,31,251,30,95,31,129,31,54,31,218,31,186,31,61,31,61,30,61,29,229,31,43,31,155,31,85,31,93,31,49,31,58,31,35,31,93,31,135,31,233,31,44,31,47,31,47,30,120,31,120,30,246,31,90,31,95,31,85,31,194,31,140,31,140,30,240,31,229,31,45,31,99,31,239,31,41,31,181,31,61,31,247,31,47,31,122,31,210,31,177,31,101,31,157,31,157,30,114,31,114,30,139,31,139,30,133,31,198,31,72,31,159,31,159,30,159,29,203,31,203,30,56,31,21,31,61,31,204,31,69,31,38,31,2,31,215,31,201,31,199,31,149,31,87,31,233,31,12,31,12,30,199,31,213,31,183,31,64,31,2,31,111,31,113,31,234,31,54,31,215,31,11,31,124,31,73,31,73,30,63,31,2,31,2,30,199,31,255,31,255,30,202,31,162,31,162,30,73,31,60,31,250,31,250,30,207,31,215,31,228,31,244,31,182,31,104,31,101,31,1,31,168,31,60,31,63,31,44,31,78,31,24,31,45,31,72,31,4,31,4,30,67,31,80,31,80,30,229,31,172,31,137,31,138,31,194,31,194,30,76,31,130,31,234,31,82,31,182,31,167,31,167,30,64,31,218,31,206,31,147,31,127,31,109,31,171,31,83,31,37,31,37,30,216,31,224,31,219,31,185,31,185,30,111,31,143,31,149,31,1,31,1,30,245,31,184,31,3,31,146,31,19,31,153,31,147,31,160,31,131,31,40,31,66,31,94,31,241,31,15,31,15,30,180,31,36,31,183,31,74,31,213,31,96,31,96,30,252,31,252,30,252,29,248,31,134,31,75,31,201,31,164,31,216,31,254,31,254,30,31,31,31,30,46,31,87,31,169,31,58,31,116,31,75,31,163,31,58,31,58,30,32,31,109,31,234,31,227,31,227,30,54,31,245,31,245,30,199,31,164,31,242,31,239,31,204,31,230,31,4,31,86,31,86,30,49,31,49,30,184,31,155,31,105,31,105,31,144,31,72,31,55,31,20,31,172,31,85,31,129,31,177,31,201,31,201,30,124,31,108,31,253,31,253,30,33,31,203,31,203,30,240,31,193,31,193,30,29,31,138,31,215,31,180,31,19,31,107,31,107,30,24,31,24,30,24,29,24,28,24,27,92,31,92,30,241,31,241,30,185,31,11,31,18,31,194,31,236,31,236,30,226,31,86,31,35,31,35,30,182,31,108,31,48,31,176,31,176,30,176,29,13,31,13,30,241,31,202,31,54,31,43,31,203,31,213,31,213,30,10,31,124,31,4,31,4,30,160,31,160,30,18,31,252,31,148,31,148,30,159,31,87,31,145,31,166,31,149,31,120,31,246,31,246,30,246,29,150,31,59,31,66,31,225,31,224,31,73,31,73,30,73,31,118,31,181,31,8,31,8,30,8,29,95,31,158,31,183,31,110,31,55,31,55,30,39,31,205,31,119,31,141,31,95,31,173,31,56,31,176,31,182,31,49,31,23,31,112,31,14,31,14,30,56,31,150,31,122,31,73,31,186,31,69,31,69,30,200,31,98,31,98,30,61,31,166,31,86,31,86,30,86,29,154,31,229,31,192,31,192,30,174,31,174,30,62,31,48,31,177,31,177,30,34,31,212,31,212,30,30,31,30,30,187,31,187,30,187,29,183,31,75,31,75,30,75,29,189,31,204,31,204,30,98,31,98,30,220,31,214,31,214,30,221,31,92,31,61,31,34,31,34,30,104,31,219,31,219,30,219,29,219,28,151,31,132,31,43,31,141,31,237,31,17,31,228,31,4,31,135,31,135,30,214,31,88,31,148,31,148,30,220,31,14,31,178,31,178,30,142,31,138,31,25,31,106,31,106,30,48,31,13,31,13,30,208,31,25,31,209,31,142,31,142,30,18,31,18,30,244,31,233,31,90,31,220,31,203,31,114,31,110,31,130,31,3,31,11,31,178,31,137,31,137,30,203,31,202,31,213,31,108,31,76,31,51,31,180,31,35,31,35,30,198,31,16,31,16,30,64,31,113,31,64,31,36,31,56,31,253,31,219,31,174,31,249,31,251,31,251,30,68,31,107,31,127,31,134,31,54,31,25,31,137,31,39,31,29,31,208,31,210,31,245,31,202,31,58,31,137,31,132,31,56,31,56,30,113,31,223,31,20,31,202,31,190,31,190,30,30,31,147,31,127,31,198,31,69,31,69,30,47,31,179,31,51,31,80,31,74,31,254,31,64,31,247,31,166,31,70,31,71,31,251,31,247,31,180,31,180,30,180,29,114,31,189,31,84,31,84,30,84,29,84,28,240,31,150,31,110,31,85,31,204,31,217,31,26,31,82,31,82,30,231,31,77,31,77,30,78,31,78,30,254,31,59,31,102,31,188,31,153,31,220,31,92,31,194,31,194,30,193,31,59,31,184,31,185,31,184,31,238,31,31,31,62,31,62,30,193,31,25,31,209,31,211,31,202,31,75,31,170,31,15,31,151,31,156,31,109,31,179,31,179,30,135,31,174,31,76,31,137,31,137,30,19,31,102,31,102,30,102,29,242,31,7,31,7,30,98,31,68,31,165,31,58,31,245,31,245,30,134,31,62,31,62,30,161,31,218,31,7,31,124,31,164,31,252,31,10,31,10,30,82,31,123,31,156,31,48,31,183,31,185,31,200,31,21,31,246,31,246,30,50,31,155,31,155,30,10,31,102,31,98,31,216,31,91,31,147,31,147,30,1,31,189,31,189,30,239,31,28,31,46,31,46,30,141,31,186,31,186,30,237,31,191,31,35,31,186,31,205,31,49,31,168,31,168,30,8,31,48,31,43,31,21,31,16,31,197,31,142,31,140,31,168,31,168,30,168,29,148,31,139,31,247,31,247,30,220,31,220,30,157,31,157,30,101,31,253,31,143,31,41,31,224,31,224,30,230,31,71,31,119,31,53,31,231,31,79,31,198,31,100,31,210,31,67,31,138,31,144,31,144,30,242,31,71,31,130,31,21,31,21,30,21,29,36,31,20,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
