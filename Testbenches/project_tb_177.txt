-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 604;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (21,0,137,0,57,0,196,0,159,0,133,0,188,0,0,0,22,0,0,0,169,0,198,0,151,0,199,0,5,0,103,0,0,0,240,0,86,0,49,0,202,0,252,0,178,0,152,0,188,0,122,0,0,0,166,0,179,0,0,0,86,0,0,0,0,0,160,0,124,0,30,0,127,0,0,0,193,0,82,0,0,0,107,0,39,0,234,0,0,0,4,0,229,0,0,0,0,0,60,0,252,0,91,0,225,0,153,0,101,0,56,0,248,0,39,0,62,0,67,0,3,0,227,0,92,0,93,0,234,0,187,0,141,0,92,0,220,0,157,0,93,0,0,0,122,0,134,0,55,0,93,0,246,0,39,0,6,0,0,0,113,0,74,0,57,0,42,0,133,0,61,0,59,0,205,0,0,0,8,0,36,0,0,0,0,0,0,0,70,0,0,0,102,0,96,0,0,0,0,0,11,0,207,0,0,0,0,0,15,0,55,0,118,0,247,0,192,0,106,0,193,0,203,0,35,0,0,0,126,0,51,0,152,0,209,0,79,0,2,0,50,0,83,0,0,0,107,0,81,0,77,0,57,0,0,0,13,0,248,0,0,0,28,0,0,0,44,0,43,0,234,0,68,0,174,0,0,0,0,0,235,0,232,0,58,0,146,0,171,0,128,0,151,0,43,0,146,0,219,0,0,0,77,0,187,0,174,0,102,0,239,0,0,0,87,0,11,0,161,0,87,0,241,0,114,0,0,0,212,0,174,0,0,0,106,0,237,0,103,0,236,0,215,0,19,0,200,0,0,0,105,0,193,0,0,0,220,0,130,0,57,0,71,0,0,0,111,0,173,0,253,0,217,0,0,0,195,0,26,0,0,0,0,0,136,0,91,0,0,0,100,0,162,0,0,0,0,0,201,0,82,0,93,0,121,0,0,0,238,0,53,0,226,0,0,0,20,0,138,0,0,0,130,0,112,0,0,0,189,0,249,0,1,0,0,0,223,0,0,0,135,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,125,0,141,0,172,0,0,0,0,0,157,0,137,0,63,0,34,0,76,0,91,0,228,0,97,0,0,0,212,0,74,0,124,0,0,0,245,0,27,0,236,0,120,0,43,0,46,0,85,0,20,0,44,0,46,0,230,0,34,0,11,0,87,0,166,0,0,0,22,0,195,0,196,0,37,0,134,0,0,0,195,0,0,0,0,0,40,0,183,0,238,0,0,0,183,0,82,0,217,0,155,0,105,0,229,0,58,0,210,0,5,0,215,0,184,0,16,0,0,0,123,0,94,0,235,0,32,0,6,0,232,0,17,0,0,0,169,0,0,0,0,0,196,0,1,0,181,0,8,0,198,0,0,0,0,0,13,0,173,0,172,0,0,0,202,0,109,0,71,0,140,0,0,0,84,0,5,0,231,0,0,0,93,0,143,0,89,0,31,0,48,0,215,0,0,0,3,0,79,0,172,0,158,0,254,0,167,0,75,0,72,0,0,0,252,0,18,0,184,0,0,0,74,0,254,0,122,0,23,0,10,0,0,0,129,0,54,0,245,0,128,0,211,0,101,0,128,0,62,0,0,0,203,0,75,0,111,0,122,0,111,0,0,0,119,0,80,0,17,0,185,0,205,0,211,0,0,0,191,0,0,0,0,0,48,0,24,0,113,0,169,0,28,0,0,0,0,0,0,0,30,0,41,0,215,0,117,0,182,0,93,0,101,0,137,0,113,0,43,0,0,0,240,0,0,0,235,0,77,0,71,0,0,0,109,0,222,0,200,0,0,0,0,0,109,0,91,0,0,0,181,0,95,0,204,0,72,0,101,0,182,0,7,0,0,0,166,0,0,0,239,0,61,0,229,0,140,0,18,0,242,0,50,0,102,0,204,0,0,0,130,0,43,0,236,0,236,0,194,0,248,0,139,0,0,0,144,0,137,0,165,0,56,0,93,0,52,0,123,0,0,0,127,0,205,0,87,0,178,0,177,0,188,0,238,0,138,0,221,0,57,0,58,0,18,0,0,0,156,0,67,0,0,0,228,0,140,0,47,0,94,0,0,0,17,0,70,0,133,0,67,0,0,0,145,0,79,0,16,0,110,0,132,0,107,0,158,0,134,0,156,0,195,0,81,0,186,0,110,0,98,0,0,0,81,0,172,0,157,0,105,0,86,0,64,0,41,0,84,0,144,0,207,0,0,0,205,0,138,0,82,0,172,0,63,0,68,0,22,0,0,0,229,0,0,0,166,0,163,0,232,0,150,0,61,0,23,0,0,0,74,0,16,0,113,0,0,0,110,0,212,0,200,0,0,0,185,0,246,0,204,0,200,0,0,0,153,0,209,0,233,0,0,0,206,0,0,0,0,0,222,0,43,0,24,0,81,0,0,0,0,0,139,0,5,0,187,0,166,0,0,0,162,0,0,0,29,0,42,0,245,0,0,0,155,0,111,0,161,0,72,0,104,0,18,0,141,0,0,0,0,0,0,0,76,0,0,0,253,0,30,0,212,0,0,0,209,0,0,0,3,0,19,0,1,0,5,0,251,0,0,0,21,0,0,0,35,0,67,0,0,0,0,0,124,0,166,0,233,0,107,0,0,0,131,0,20,0,0,0,117,0,130,0,153,0,121,0,130,0,116,0,36,0,232,0,226,0,50,0,161,0,144,0,0,0,140,0,161,0,189,0,23,0,27,0,38,0,119,0);
signal scenario_full  : scenario_type := (21,31,137,31,57,31,196,31,159,31,133,31,188,31,188,30,22,31,22,30,169,31,198,31,151,31,199,31,5,31,103,31,103,30,240,31,86,31,49,31,202,31,252,31,178,31,152,31,188,31,122,31,122,30,166,31,179,31,179,30,86,31,86,30,86,29,160,31,124,31,30,31,127,31,127,30,193,31,82,31,82,30,107,31,39,31,234,31,234,30,4,31,229,31,229,30,229,29,60,31,252,31,91,31,225,31,153,31,101,31,56,31,248,31,39,31,62,31,67,31,3,31,227,31,92,31,93,31,234,31,187,31,141,31,92,31,220,31,157,31,93,31,93,30,122,31,134,31,55,31,93,31,246,31,39,31,6,31,6,30,113,31,74,31,57,31,42,31,133,31,61,31,59,31,205,31,205,30,8,31,36,31,36,30,36,29,36,28,70,31,70,30,102,31,96,31,96,30,96,29,11,31,207,31,207,30,207,29,15,31,55,31,118,31,247,31,192,31,106,31,193,31,203,31,35,31,35,30,126,31,51,31,152,31,209,31,79,31,2,31,50,31,83,31,83,30,107,31,81,31,77,31,57,31,57,30,13,31,248,31,248,30,28,31,28,30,44,31,43,31,234,31,68,31,174,31,174,30,174,29,235,31,232,31,58,31,146,31,171,31,128,31,151,31,43,31,146,31,219,31,219,30,77,31,187,31,174,31,102,31,239,31,239,30,87,31,11,31,161,31,87,31,241,31,114,31,114,30,212,31,174,31,174,30,106,31,237,31,103,31,236,31,215,31,19,31,200,31,200,30,105,31,193,31,193,30,220,31,130,31,57,31,71,31,71,30,111,31,173,31,253,31,217,31,217,30,195,31,26,31,26,30,26,29,136,31,91,31,91,30,100,31,162,31,162,30,162,29,201,31,82,31,93,31,121,31,121,30,238,31,53,31,226,31,226,30,20,31,138,31,138,30,130,31,112,31,112,30,189,31,249,31,1,31,1,30,223,31,223,30,135,31,135,30,135,29,135,28,135,27,135,26,135,25,3,31,3,30,125,31,141,31,172,31,172,30,172,29,157,31,137,31,63,31,34,31,76,31,91,31,228,31,97,31,97,30,212,31,74,31,124,31,124,30,245,31,27,31,236,31,120,31,43,31,46,31,85,31,20,31,44,31,46,31,230,31,34,31,11,31,87,31,166,31,166,30,22,31,195,31,196,31,37,31,134,31,134,30,195,31,195,30,195,29,40,31,183,31,238,31,238,30,183,31,82,31,217,31,155,31,105,31,229,31,58,31,210,31,5,31,215,31,184,31,16,31,16,30,123,31,94,31,235,31,32,31,6,31,232,31,17,31,17,30,169,31,169,30,169,29,196,31,1,31,181,31,8,31,198,31,198,30,198,29,13,31,173,31,172,31,172,30,202,31,109,31,71,31,140,31,140,30,84,31,5,31,231,31,231,30,93,31,143,31,89,31,31,31,48,31,215,31,215,30,3,31,79,31,172,31,158,31,254,31,167,31,75,31,72,31,72,30,252,31,18,31,184,31,184,30,74,31,254,31,122,31,23,31,10,31,10,30,129,31,54,31,245,31,128,31,211,31,101,31,128,31,62,31,62,30,203,31,75,31,111,31,122,31,111,31,111,30,119,31,80,31,17,31,185,31,205,31,211,31,211,30,191,31,191,30,191,29,48,31,24,31,113,31,169,31,28,31,28,30,28,29,28,28,30,31,41,31,215,31,117,31,182,31,93,31,101,31,137,31,113,31,43,31,43,30,240,31,240,30,235,31,77,31,71,31,71,30,109,31,222,31,200,31,200,30,200,29,109,31,91,31,91,30,181,31,95,31,204,31,72,31,101,31,182,31,7,31,7,30,166,31,166,30,239,31,61,31,229,31,140,31,18,31,242,31,50,31,102,31,204,31,204,30,130,31,43,31,236,31,236,31,194,31,248,31,139,31,139,30,144,31,137,31,165,31,56,31,93,31,52,31,123,31,123,30,127,31,205,31,87,31,178,31,177,31,188,31,238,31,138,31,221,31,57,31,58,31,18,31,18,30,156,31,67,31,67,30,228,31,140,31,47,31,94,31,94,30,17,31,70,31,133,31,67,31,67,30,145,31,79,31,16,31,110,31,132,31,107,31,158,31,134,31,156,31,195,31,81,31,186,31,110,31,98,31,98,30,81,31,172,31,157,31,105,31,86,31,64,31,41,31,84,31,144,31,207,31,207,30,205,31,138,31,82,31,172,31,63,31,68,31,22,31,22,30,229,31,229,30,166,31,163,31,232,31,150,31,61,31,23,31,23,30,74,31,16,31,113,31,113,30,110,31,212,31,200,31,200,30,185,31,246,31,204,31,200,31,200,30,153,31,209,31,233,31,233,30,206,31,206,30,206,29,222,31,43,31,24,31,81,31,81,30,81,29,139,31,5,31,187,31,166,31,166,30,162,31,162,30,29,31,42,31,245,31,245,30,155,31,111,31,161,31,72,31,104,31,18,31,141,31,141,30,141,29,141,28,76,31,76,30,253,31,30,31,212,31,212,30,209,31,209,30,3,31,19,31,1,31,5,31,251,31,251,30,21,31,21,30,35,31,67,31,67,30,67,29,124,31,166,31,233,31,107,31,107,30,131,31,20,31,20,30,117,31,130,31,153,31,121,31,130,31,116,31,36,31,232,31,226,31,50,31,161,31,144,31,144,30,140,31,161,31,189,31,23,31,27,31,38,31,119,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
