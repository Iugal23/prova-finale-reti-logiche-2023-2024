-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 787;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (74,0,150,0,189,0,88,0,100,0,57,0,116,0,9,0,191,0,127,0,76,0,143,0,140,0,145,0,217,0,61,0,66,0,180,0,0,0,205,0,231,0,5,0,141,0,0,0,255,0,65,0,12,0,0,0,40,0,1,0,48,0,0,0,7,0,243,0,99,0,203,0,59,0,116,0,0,0,186,0,124,0,40,0,122,0,141,0,0,0,0,0,244,0,171,0,0,0,0,0,17,0,42,0,187,0,185,0,135,0,82,0,18,0,19,0,49,0,90,0,246,0,0,0,69,0,244,0,240,0,40,0,0,0,177,0,45,0,138,0,14,0,254,0,0,0,0,0,41,0,101,0,134,0,104,0,112,0,52,0,215,0,21,0,183,0,193,0,104,0,62,0,129,0,36,0,174,0,0,0,98,0,141,0,112,0,81,0,8,0,0,0,43,0,142,0,0,0,55,0,198,0,236,0,235,0,145,0,21,0,60,0,209,0,165,0,251,0,0,0,208,0,199,0,83,0,150,0,32,0,0,0,211,0,0,0,15,0,34,0,190,0,0,0,204,0,0,0,147,0,0,0,6,0,78,0,151,0,108,0,244,0,156,0,239,0,242,0,131,0,212,0,158,0,100,0,200,0,0,0,47,0,60,0,0,0,218,0,40,0,247,0,112,0,187,0,0,0,178,0,37,0,147,0,46,0,73,0,213,0,73,0,48,0,242,0,54,0,76,0,198,0,0,0,193,0,0,0,191,0,103,0,28,0,236,0,0,0,0,0,60,0,0,0,106,0,69,0,127,0,0,0,94,0,77,0,74,0,51,0,0,0,121,0,164,0,164,0,61,0,111,0,7,0,0,0,0,0,0,0,0,0,52,0,42,0,110,0,215,0,92,0,218,0,191,0,0,0,105,0,121,0,0,0,212,0,169,0,23,0,62,0,60,0,82,0,0,0,11,0,118,0,72,0,0,0,56,0,127,0,248,0,207,0,0,0,123,0,0,0,151,0,55,0,0,0,0,0,133,0,0,0,142,0,0,0,159,0,0,0,0,0,0,0,133,0,100,0,81,0,34,0,219,0,242,0,0,0,255,0,0,0,72,0,32,0,0,0,122,0,11,0,23,0,37,0,160,0,42,0,221,0,0,0,252,0,0,0,12,0,152,0,69,0,210,0,66,0,188,0,194,0,156,0,191,0,100,0,29,0,182,0,222,0,227,0,235,0,246,0,105,0,48,0,69,0,134,0,168,0,234,0,69,0,70,0,234,0,222,0,47,0,218,0,171,0,229,0,42,0,30,0,0,0,100,0,165,0,92,0,148,0,3,0,65,0,166,0,112,0,0,0,39,0,197,0,104,0,0,0,0,0,114,0,224,0,0,0,201,0,17,0,3,0,48,0,171,0,165,0,206,0,0,0,96,0,58,0,221,0,113,0,0,0,0,0,9,0,156,0,0,0,189,0,71,0,55,0,178,0,225,0,30,0,140,0,234,0,227,0,85,0,70,0,227,0,253,0,56,0,145,0,226,0,205,0,223,0,78,0,147,0,45,0,1,0,79,0,0,0,0,0,0,0,170,0,0,0,245,0,201,0,31,0,0,0,89,0,199,0,169,0,233,0,235,0,195,0,149,0,60,0,0,0,141,0,243,0,116,0,76,0,16,0,152,0,18,0,62,0,0,0,196,0,213,0,118,0,15,0,0,0,0,0,136,0,128,0,190,0,117,0,101,0,182,0,0,0,0,0,241,0,21,0,43,0,209,0,187,0,11,0,39,0,233,0,66,0,0,0,0,0,87,0,83,0,173,0,174,0,180,0,118,0,0,0,17,0,46,0,31,0,132,0,123,0,177,0,0,0,117,0,73,0,177,0,183,0,0,0,61,0,52,0,79,0,64,0,127,0,16,0,118,0,119,0,229,0,253,0,149,0,121,0,0,0,35,0,0,0,21,0,0,0,163,0,132,0,1,0,167,0,10,0,69,0,60,0,118,0,0,0,66,0,242,0,221,0,52,0,244,0,142,0,0,0,40,0,8,0,132,0,243,0,239,0,44,0,213,0,28,0,137,0,7,0,89,0,185,0,227,0,109,0,102,0,0,0,37,0,139,0,0,0,0,0,220,0,155,0,21,0,119,0,147,0,0,0,140,0,37,0,0,0,17,0,246,0,104,0,138,0,124,0,235,0,156,0,20,0,186,0,40,0,180,0,177,0,100,0,177,0,133,0,70,0,173,0,0,0,0,0,0,0,50,0,0,0,236,0,78,0,131,0,0,0,27,0,76,0,173,0,0,0,0,0,117,0,0,0,32,0,44,0,37,0,46,0,80,0,186,0,28,0,215,0,0,0,118,0,112,0,78,0,21,0,26,0,0,0,0,0,89,0,213,0,93,0,0,0,0,0,211,0,222,0,219,0,183,0,136,0,0,0,227,0,209,0,126,0,70,0,0,0,146,0,145,0,227,0,0,0,166,0,0,0,225,0,20,0,184,0,131,0,249,0,174,0,53,0,73,0,147,0,119,0,0,0,141,0,0,0,254,0,27,0,78,0,202,0,23,0,109,0,9,0,0,0,240,0,38,0,38,0,60,0,141,0,103,0,52,0,0,0,105,0,185,0,20,0,0,0,61,0,95,0,0,0,0,0,104,0,23,0,0,0,184,0,121,0,47,0,2,0,0,0,86,0,56,0,71,0,54,0,5,0,99,0,190,0,153,0,135,0,180,0,157,0,75,0,0,0,108,0,155,0,254,0,75,0,233,0,62,0,215,0,104,0,127,0,201,0,228,0,232,0,249,0,151,0,203,0,12,0,246,0,189,0,37,0,64,0,50,0,0,0,0,0,201,0,34,0,5,0,90,0,168,0,14,0,126,0,5,0,181,0,51,0,98,0,0,0,0,0,70,0,194,0,15,0,222,0,38,0,162,0,155,0,68,0,162,0,223,0,69,0,147,0,0,0,75,0,45,0,0,0,198,0,78,0,156,0,114,0,0,0,81,0,0,0,0,0,188,0,0,0,173,0,129,0,138,0,116,0,221,0,228,0,203,0,243,0,13,0,197,0,0,0,48,0,76,0,82,0,210,0,140,0,149,0,0,0,220,0,0,0,0,0,3,0,207,0,245,0,252,0,183,0,197,0,23,0,144,0,167,0,35,0,64,0,150,0,10,0,95,0,65,0,153,0,201,0,0,0,65,0,68,0,37,0,43,0,238,0,34,0,51,0,58,0,206,0,95,0,80,0,108,0,0,0,209,0,239,0,34,0,226,0,146,0,45,0,128,0,0,0,72,0,0,0,83,0,0,0,13,0,93,0,87,0,0,0,0,0,192,0,174,0,78,0,82,0,208,0,81,0,0,0,235,0,129,0,55,0,69,0,208,0,188,0,0,0,120,0,181,0,52,0,26,0,116,0,150,0,174,0,130,0,142,0,239,0,230,0,0,0,95,0,148,0,246,0,146,0,146,0,183,0,0,0,156,0,200,0,198,0,155,0,158,0,165,0,230,0,0,0,156,0,107,0,49,0,56,0,112,0,0,0,143,0,187,0,38,0);
signal scenario_full  : scenario_type := (74,31,150,31,189,31,88,31,100,31,57,31,116,31,9,31,191,31,127,31,76,31,143,31,140,31,145,31,217,31,61,31,66,31,180,31,180,30,205,31,231,31,5,31,141,31,141,30,255,31,65,31,12,31,12,30,40,31,1,31,48,31,48,30,7,31,243,31,99,31,203,31,59,31,116,31,116,30,186,31,124,31,40,31,122,31,141,31,141,30,141,29,244,31,171,31,171,30,171,29,17,31,42,31,187,31,185,31,135,31,82,31,18,31,19,31,49,31,90,31,246,31,246,30,69,31,244,31,240,31,40,31,40,30,177,31,45,31,138,31,14,31,254,31,254,30,254,29,41,31,101,31,134,31,104,31,112,31,52,31,215,31,21,31,183,31,193,31,104,31,62,31,129,31,36,31,174,31,174,30,98,31,141,31,112,31,81,31,8,31,8,30,43,31,142,31,142,30,55,31,198,31,236,31,235,31,145,31,21,31,60,31,209,31,165,31,251,31,251,30,208,31,199,31,83,31,150,31,32,31,32,30,211,31,211,30,15,31,34,31,190,31,190,30,204,31,204,30,147,31,147,30,6,31,78,31,151,31,108,31,244,31,156,31,239,31,242,31,131,31,212,31,158,31,100,31,200,31,200,30,47,31,60,31,60,30,218,31,40,31,247,31,112,31,187,31,187,30,178,31,37,31,147,31,46,31,73,31,213,31,73,31,48,31,242,31,54,31,76,31,198,31,198,30,193,31,193,30,191,31,103,31,28,31,236,31,236,30,236,29,60,31,60,30,106,31,69,31,127,31,127,30,94,31,77,31,74,31,51,31,51,30,121,31,164,31,164,31,61,31,111,31,7,31,7,30,7,29,7,28,7,27,52,31,42,31,110,31,215,31,92,31,218,31,191,31,191,30,105,31,121,31,121,30,212,31,169,31,23,31,62,31,60,31,82,31,82,30,11,31,118,31,72,31,72,30,56,31,127,31,248,31,207,31,207,30,123,31,123,30,151,31,55,31,55,30,55,29,133,31,133,30,142,31,142,30,159,31,159,30,159,29,159,28,133,31,100,31,81,31,34,31,219,31,242,31,242,30,255,31,255,30,72,31,32,31,32,30,122,31,11,31,23,31,37,31,160,31,42,31,221,31,221,30,252,31,252,30,12,31,152,31,69,31,210,31,66,31,188,31,194,31,156,31,191,31,100,31,29,31,182,31,222,31,227,31,235,31,246,31,105,31,48,31,69,31,134,31,168,31,234,31,69,31,70,31,234,31,222,31,47,31,218,31,171,31,229,31,42,31,30,31,30,30,100,31,165,31,92,31,148,31,3,31,65,31,166,31,112,31,112,30,39,31,197,31,104,31,104,30,104,29,114,31,224,31,224,30,201,31,17,31,3,31,48,31,171,31,165,31,206,31,206,30,96,31,58,31,221,31,113,31,113,30,113,29,9,31,156,31,156,30,189,31,71,31,55,31,178,31,225,31,30,31,140,31,234,31,227,31,85,31,70,31,227,31,253,31,56,31,145,31,226,31,205,31,223,31,78,31,147,31,45,31,1,31,79,31,79,30,79,29,79,28,170,31,170,30,245,31,201,31,31,31,31,30,89,31,199,31,169,31,233,31,235,31,195,31,149,31,60,31,60,30,141,31,243,31,116,31,76,31,16,31,152,31,18,31,62,31,62,30,196,31,213,31,118,31,15,31,15,30,15,29,136,31,128,31,190,31,117,31,101,31,182,31,182,30,182,29,241,31,21,31,43,31,209,31,187,31,11,31,39,31,233,31,66,31,66,30,66,29,87,31,83,31,173,31,174,31,180,31,118,31,118,30,17,31,46,31,31,31,132,31,123,31,177,31,177,30,117,31,73,31,177,31,183,31,183,30,61,31,52,31,79,31,64,31,127,31,16,31,118,31,119,31,229,31,253,31,149,31,121,31,121,30,35,31,35,30,21,31,21,30,163,31,132,31,1,31,167,31,10,31,69,31,60,31,118,31,118,30,66,31,242,31,221,31,52,31,244,31,142,31,142,30,40,31,8,31,132,31,243,31,239,31,44,31,213,31,28,31,137,31,7,31,89,31,185,31,227,31,109,31,102,31,102,30,37,31,139,31,139,30,139,29,220,31,155,31,21,31,119,31,147,31,147,30,140,31,37,31,37,30,17,31,246,31,104,31,138,31,124,31,235,31,156,31,20,31,186,31,40,31,180,31,177,31,100,31,177,31,133,31,70,31,173,31,173,30,173,29,173,28,50,31,50,30,236,31,78,31,131,31,131,30,27,31,76,31,173,31,173,30,173,29,117,31,117,30,32,31,44,31,37,31,46,31,80,31,186,31,28,31,215,31,215,30,118,31,112,31,78,31,21,31,26,31,26,30,26,29,89,31,213,31,93,31,93,30,93,29,211,31,222,31,219,31,183,31,136,31,136,30,227,31,209,31,126,31,70,31,70,30,146,31,145,31,227,31,227,30,166,31,166,30,225,31,20,31,184,31,131,31,249,31,174,31,53,31,73,31,147,31,119,31,119,30,141,31,141,30,254,31,27,31,78,31,202,31,23,31,109,31,9,31,9,30,240,31,38,31,38,31,60,31,141,31,103,31,52,31,52,30,105,31,185,31,20,31,20,30,61,31,95,31,95,30,95,29,104,31,23,31,23,30,184,31,121,31,47,31,2,31,2,30,86,31,56,31,71,31,54,31,5,31,99,31,190,31,153,31,135,31,180,31,157,31,75,31,75,30,108,31,155,31,254,31,75,31,233,31,62,31,215,31,104,31,127,31,201,31,228,31,232,31,249,31,151,31,203,31,12,31,246,31,189,31,37,31,64,31,50,31,50,30,50,29,201,31,34,31,5,31,90,31,168,31,14,31,126,31,5,31,181,31,51,31,98,31,98,30,98,29,70,31,194,31,15,31,222,31,38,31,162,31,155,31,68,31,162,31,223,31,69,31,147,31,147,30,75,31,45,31,45,30,198,31,78,31,156,31,114,31,114,30,81,31,81,30,81,29,188,31,188,30,173,31,129,31,138,31,116,31,221,31,228,31,203,31,243,31,13,31,197,31,197,30,48,31,76,31,82,31,210,31,140,31,149,31,149,30,220,31,220,30,220,29,3,31,207,31,245,31,252,31,183,31,197,31,23,31,144,31,167,31,35,31,64,31,150,31,10,31,95,31,65,31,153,31,201,31,201,30,65,31,68,31,37,31,43,31,238,31,34,31,51,31,58,31,206,31,95,31,80,31,108,31,108,30,209,31,239,31,34,31,226,31,146,31,45,31,128,31,128,30,72,31,72,30,83,31,83,30,13,31,93,31,87,31,87,30,87,29,192,31,174,31,78,31,82,31,208,31,81,31,81,30,235,31,129,31,55,31,69,31,208,31,188,31,188,30,120,31,181,31,52,31,26,31,116,31,150,31,174,31,130,31,142,31,239,31,230,31,230,30,95,31,148,31,246,31,146,31,146,31,183,31,183,30,156,31,200,31,198,31,155,31,158,31,165,31,230,31,230,30,156,31,107,31,49,31,56,31,112,31,112,30,143,31,187,31,38,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
