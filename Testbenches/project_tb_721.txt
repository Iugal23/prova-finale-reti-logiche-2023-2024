-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 403;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (78,0,141,0,74,0,4,0,200,0,66,0,90,0,178,0,0,0,53,0,174,0,220,0,61,0,137,0,67,0,138,0,44,0,95,0,151,0,0,0,113,0,20,0,0,0,152,0,24,0,146,0,180,0,68,0,0,0,74,0,68,0,242,0,115,0,152,0,222,0,228,0,187,0,198,0,238,0,190,0,0,0,248,0,1,0,219,0,13,0,131,0,102,0,139,0,203,0,229,0,33,0,0,0,238,0,23,0,215,0,154,0,239,0,122,0,4,0,127,0,207,0,21,0,80,0,0,0,48,0,9,0,142,0,142,0,140,0,15,0,0,0,40,0,0,0,170,0,253,0,121,0,91,0,0,0,0,0,0,0,0,0,165,0,47,0,48,0,132,0,17,0,0,0,31,0,168,0,171,0,243,0,188,0,113,0,0,0,193,0,11,0,35,0,109,0,21,0,197,0,104,0,246,0,0,0,119,0,48,0,0,0,201,0,202,0,122,0,1,0,67,0,97,0,250,0,14,0,32,0,65,0,0,0,85,0,64,0,19,0,0,0,105,0,11,0,49,0,212,0,118,0,137,0,113,0,0,0,33,0,0,0,33,0,156,0,167,0,0,0,253,0,191,0,64,0,139,0,162,0,67,0,243,0,0,0,11,0,81,0,43,0,0,0,44,0,42,0,0,0,244,0,0,0,218,0,233,0,119,0,65,0,0,0,124,0,184,0,11,0,74,0,126,0,54,0,235,0,153,0,0,0,179,0,71,0,44,0,111,0,0,0,0,0,130,0,104,0,0,0,131,0,163,0,165,0,212,0,226,0,146,0,0,0,203,0,250,0,237,0,14,0,0,0,0,0,178,0,36,0,132,0,104,0,0,0,105,0,237,0,206,0,17,0,0,0,149,0,250,0,6,0,34,0,84,0,150,0,186,0,172,0,0,0,254,0,0,0,64,0,0,0,33,0,210,0,0,0,193,0,108,0,31,0,199,0,0,0,25,0,158,0,121,0,0,0,32,0,130,0,0,0,147,0,231,0,175,0,0,0,71,0,66,0,13,0,53,0,149,0,15,0,212,0,98,0,7,0,70,0,0,0,0,0,248,0,63,0,235,0,202,0,0,0,0,0,80,0,0,0,205,0,153,0,4,0,63,0,173,0,33,0,195,0,0,0,134,0,212,0,239,0,38,0,179,0,126,0,0,0,177,0,161,0,9,0,78,0,0,0,236,0,237,0,130,0,235,0,0,0,0,0,0,0,11,0,87,0,39,0,217,0,170,0,0,0,230,0,251,0,0,0,189,0,0,0,0,0,0,0,81,0,174,0,187,0,95,0,22,0,215,0,150,0,110,0,103,0,66,0,118,0,0,0,0,0,0,0,12,0,46,0,0,0,94,0,163,0,183,0,0,0,0,0,0,0,66,0,138,0,106,0,0,0,241,0,162,0,223,0,0,0,219,0,67,0,225,0,38,0,100,0,74,0,67,0,0,0,33,0,152,0,208,0,0,0,113,0,0,0,197,0,0,0,103,0,0,0,68,0,8,0,204,0,105,0,186,0,131,0,213,0,157,0,198,0,147,0,199,0,8,0,234,0,88,0,135,0,165,0,191,0,142,0,106,0,137,0,0,0,176,0,249,0,182,0,29,0,13,0,0,0,51,0,147,0,32,0,13,0,0,0,0,0,32,0,107,0,63,0,100,0,137,0,111,0,204,0,117,0,148,0,28,0,81,0,5,0,17,0,103,0,58,0,0,0,69,0,189,0,6,0,29,0,95,0,0,0,56,0,200,0,18,0,68,0,2,0,103,0,154,0,195,0,245,0);
signal scenario_full  : scenario_type := (78,31,141,31,74,31,4,31,200,31,66,31,90,31,178,31,178,30,53,31,174,31,220,31,61,31,137,31,67,31,138,31,44,31,95,31,151,31,151,30,113,31,20,31,20,30,152,31,24,31,146,31,180,31,68,31,68,30,74,31,68,31,242,31,115,31,152,31,222,31,228,31,187,31,198,31,238,31,190,31,190,30,248,31,1,31,219,31,13,31,131,31,102,31,139,31,203,31,229,31,33,31,33,30,238,31,23,31,215,31,154,31,239,31,122,31,4,31,127,31,207,31,21,31,80,31,80,30,48,31,9,31,142,31,142,31,140,31,15,31,15,30,40,31,40,30,170,31,253,31,121,31,91,31,91,30,91,29,91,28,91,27,165,31,47,31,48,31,132,31,17,31,17,30,31,31,168,31,171,31,243,31,188,31,113,31,113,30,193,31,11,31,35,31,109,31,21,31,197,31,104,31,246,31,246,30,119,31,48,31,48,30,201,31,202,31,122,31,1,31,67,31,97,31,250,31,14,31,32,31,65,31,65,30,85,31,64,31,19,31,19,30,105,31,11,31,49,31,212,31,118,31,137,31,113,31,113,30,33,31,33,30,33,31,156,31,167,31,167,30,253,31,191,31,64,31,139,31,162,31,67,31,243,31,243,30,11,31,81,31,43,31,43,30,44,31,42,31,42,30,244,31,244,30,218,31,233,31,119,31,65,31,65,30,124,31,184,31,11,31,74,31,126,31,54,31,235,31,153,31,153,30,179,31,71,31,44,31,111,31,111,30,111,29,130,31,104,31,104,30,131,31,163,31,165,31,212,31,226,31,146,31,146,30,203,31,250,31,237,31,14,31,14,30,14,29,178,31,36,31,132,31,104,31,104,30,105,31,237,31,206,31,17,31,17,30,149,31,250,31,6,31,34,31,84,31,150,31,186,31,172,31,172,30,254,31,254,30,64,31,64,30,33,31,210,31,210,30,193,31,108,31,31,31,199,31,199,30,25,31,158,31,121,31,121,30,32,31,130,31,130,30,147,31,231,31,175,31,175,30,71,31,66,31,13,31,53,31,149,31,15,31,212,31,98,31,7,31,70,31,70,30,70,29,248,31,63,31,235,31,202,31,202,30,202,29,80,31,80,30,205,31,153,31,4,31,63,31,173,31,33,31,195,31,195,30,134,31,212,31,239,31,38,31,179,31,126,31,126,30,177,31,161,31,9,31,78,31,78,30,236,31,237,31,130,31,235,31,235,30,235,29,235,28,11,31,87,31,39,31,217,31,170,31,170,30,230,31,251,31,251,30,189,31,189,30,189,29,189,28,81,31,174,31,187,31,95,31,22,31,215,31,150,31,110,31,103,31,66,31,118,31,118,30,118,29,118,28,12,31,46,31,46,30,94,31,163,31,183,31,183,30,183,29,183,28,66,31,138,31,106,31,106,30,241,31,162,31,223,31,223,30,219,31,67,31,225,31,38,31,100,31,74,31,67,31,67,30,33,31,152,31,208,31,208,30,113,31,113,30,197,31,197,30,103,31,103,30,68,31,8,31,204,31,105,31,186,31,131,31,213,31,157,31,198,31,147,31,199,31,8,31,234,31,88,31,135,31,165,31,191,31,142,31,106,31,137,31,137,30,176,31,249,31,182,31,29,31,13,31,13,30,51,31,147,31,32,31,13,31,13,30,13,29,32,31,107,31,63,31,100,31,137,31,111,31,204,31,117,31,148,31,28,31,81,31,5,31,17,31,103,31,58,31,58,30,69,31,189,31,6,31,29,31,95,31,95,30,56,31,200,31,18,31,68,31,2,31,103,31,154,31,195,31,245,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
