-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 692;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (79,0,125,0,157,0,0,0,0,0,249,0,0,0,0,0,218,0,0,0,61,0,64,0,144,0,0,0,198,0,172,0,172,0,0,0,46,0,211,0,10,0,233,0,39,0,0,0,0,0,144,0,0,0,229,0,177,0,0,0,225,0,0,0,61,0,97,0,255,0,0,0,57,0,73,0,84,0,238,0,95,0,228,0,173,0,142,0,0,0,198,0,0,0,229,0,212,0,86,0,145,0,39,0,0,0,119,0,0,0,133,0,234,0,0,0,239,0,79,0,65,0,229,0,169,0,0,0,90,0,181,0,0,0,69,0,154,0,43,0,185,0,56,0,0,0,222,0,174,0,253,0,134,0,0,0,141,0,0,0,207,0,49,0,14,0,0,0,26,0,0,0,29,0,37,0,195,0,43,0,0,0,244,0,6,0,81,0,0,0,134,0,197,0,61,0,131,0,231,0,0,0,227,0,99,0,4,0,82,0,172,0,128,0,231,0,160,0,0,0,0,0,176,0,0,0,9,0,0,0,225,0,65,0,0,0,6,0,175,0,119,0,58,0,179,0,0,0,0,0,196,0,236,0,229,0,0,0,40,0,108,0,26,0,82,0,70,0,70,0,253,0,91,0,145,0,140,0,52,0,205,0,37,0,0,0,131,0,0,0,0,0,0,0,11,0,0,0,211,0,0,0,168,0,122,0,147,0,34,0,246,0,167,0,0,0,0,0,118,0,238,0,0,0,78,0,223,0,243,0,193,0,0,0,192,0,185,0,0,0,204,0,180,0,65,0,67,0,244,0,13,0,161,0,0,0,51,0,117,0,29,0,0,0,0,0,140,0,22,0,200,0,150,0,0,0,194,0,17,0,222,0,165,0,235,0,31,0,209,0,108,0,33,0,162,0,245,0,243,0,0,0,225,0,189,0,75,0,60,0,195,0,109,0,22,0,0,0,47,0,38,0,113,0,212,0,179,0,0,0,0,0,196,0,93,0,77,0,0,0,167,0,184,0,220,0,0,0,160,0,66,0,186,0,44,0,70,0,234,0,139,0,0,0,196,0,97,0,173,0,251,0,221,0,97,0,124,0,145,0,202,0,50,0,168,0,240,0,0,0,221,0,193,0,193,0,0,0,145,0,95,0,254,0,149,0,47,0,70,0,180,0,0,0,64,0,144,0,0,0,155,0,214,0,220,0,97,0,72,0,0,0,13,0,0,0,109,0,4,0,254,0,0,0,0,0,17,0,91,0,34,0,173,0,162,0,192,0,14,0,128,0,218,0,228,0,31,0,46,0,2,0,75,0,171,0,166,0,8,0,2,0,7,0,0,0,208,0,0,0,0,0,0,0,50,0,0,0,192,0,165,0,181,0,140,0,206,0,177,0,137,0,189,0,132,0,145,0,0,0,250,0,135,0,0,0,42,0,78,0,203,0,55,0,156,0,6,0,255,0,0,0,237,0,26,0,201,0,0,0,0,0,38,0,32,0,101,0,172,0,112,0,117,0,107,0,228,0,249,0,165,0,171,0,24,0,210,0,0,0,238,0,101,0,0,0,0,0,0,0,0,0,0,0,79,0,193,0,12,0,14,0,192,0,205,0,123,0,9,0,253,0,110,0,216,0,0,0,174,0,200,0,150,0,65,0,100,0,0,0,0,0,0,0,225,0,228,0,114,0,114,0,207,0,96,0,64,0,171,0,156,0,173,0,0,0,77,0,30,0,102,0,152,0,187,0,0,0,121,0,201,0,0,0,181,0,174,0,187,0,95,0,1,0,0,0,104,0,169,0,56,0,116,0,0,0,2,0,0,0,0,0,219,0,94,0,150,0,169,0,193,0,222,0,0,0,48,0,47,0,112,0,0,0,239,0,100,0,149,0,160,0,67,0,7,0,117,0,241,0,37,0,0,0,64,0,156,0,94,0,179,0,104,0,0,0,113,0,52,0,101,0,134,0,220,0,11,0,245,0,183,0,112,0,120,0,115,0,0,0,165,0,0,0,45,0,175,0,0,0,145,0,0,0,42,0,201,0,252,0,37,0,0,0,195,0,127,0,21,0,91,0,155,0,199,0,232,0,95,0,237,0,122,0,0,0,0,0,25,0,80,0,65,0,198,0,0,0,0,0,20,0,250,0,39,0,0,0,236,0,132,0,153,0,199,0,51,0,218,0,64,0,194,0,0,0,135,0,114,0,132,0,182,0,0,0,237,0,168,0,127,0,241,0,159,0,0,0,117,0,73,0,0,0,247,0,105,0,0,0,221,0,43,0,15,0,97,0,30,0,116,0,84,0,52,0,39,0,117,0,0,0,47,0,49,0,44,0,56,0,103,0,222,0,0,0,0,0,79,0,24,0,75,0,219,0,0,0,206,0,0,0,136,0,148,0,93,0,58,0,157,0,0,0,3,0,0,0,43,0,133,0,211,0,0,0,15,0,0,0,204,0,141,0,181,0,19,0,2,0,68,0,116,0,139,0,167,0,0,0,156,0,177,0,0,0,71,0,0,0,96,0,160,0,0,0,33,0,130,0,54,0,0,0,125,0,145,0,183,0,167,0,0,0,225,0,150,0,147,0,10,0,197,0,204,0,209,0,240,0,65,0,250,0,91,0,246,0,100,0,42,0,8,0,169,0,233,0,0,0,194,0,0,0,35,0,174,0,38,0,0,0,63,0,186,0,0,0,0,0,216,0,53,0,226,0,182,0,104,0,132,0,0,0,163,0,0,0,142,0,145,0,38,0,43,0,27,0,180,0,247,0,169,0,156,0,211,0,156,0,242,0,66,0,74,0,89,0,0,0,167,0,95,0,77,0,0,0,157,0,60,0,10,0,222,0,70,0,129,0,79,0,162,0,127,0,0,0,49,0,51,0,0,0,0,0,0,0,0,0,239,0,0,0,57,0,29,0,237,0,188,0,51,0,212,0,204,0,0,0,87,0,78,0,222,0,0,0,0,0,0,0,74,0,150,0,0,0,137,0,181,0,146,0,42,0,123,0,57,0,40,0,218,0,24,0,108,0,192,0,2,0,13,0,0,0,1,0,27,0,125,0,151,0,24,0,92,0,180,0,200,0,195,0,0,0,57,0,201,0,0,0,24,0,119,0,211,0,231,0,198,0,163,0);
signal scenario_full  : scenario_type := (79,31,125,31,157,31,157,30,157,29,249,31,249,30,249,29,218,31,218,30,61,31,64,31,144,31,144,30,198,31,172,31,172,31,172,30,46,31,211,31,10,31,233,31,39,31,39,30,39,29,144,31,144,30,229,31,177,31,177,30,225,31,225,30,61,31,97,31,255,31,255,30,57,31,73,31,84,31,238,31,95,31,228,31,173,31,142,31,142,30,198,31,198,30,229,31,212,31,86,31,145,31,39,31,39,30,119,31,119,30,133,31,234,31,234,30,239,31,79,31,65,31,229,31,169,31,169,30,90,31,181,31,181,30,69,31,154,31,43,31,185,31,56,31,56,30,222,31,174,31,253,31,134,31,134,30,141,31,141,30,207,31,49,31,14,31,14,30,26,31,26,30,29,31,37,31,195,31,43,31,43,30,244,31,6,31,81,31,81,30,134,31,197,31,61,31,131,31,231,31,231,30,227,31,99,31,4,31,82,31,172,31,128,31,231,31,160,31,160,30,160,29,176,31,176,30,9,31,9,30,225,31,65,31,65,30,6,31,175,31,119,31,58,31,179,31,179,30,179,29,196,31,236,31,229,31,229,30,40,31,108,31,26,31,82,31,70,31,70,31,253,31,91,31,145,31,140,31,52,31,205,31,37,31,37,30,131,31,131,30,131,29,131,28,11,31,11,30,211,31,211,30,168,31,122,31,147,31,34,31,246,31,167,31,167,30,167,29,118,31,238,31,238,30,78,31,223,31,243,31,193,31,193,30,192,31,185,31,185,30,204,31,180,31,65,31,67,31,244,31,13,31,161,31,161,30,51,31,117,31,29,31,29,30,29,29,140,31,22,31,200,31,150,31,150,30,194,31,17,31,222,31,165,31,235,31,31,31,209,31,108,31,33,31,162,31,245,31,243,31,243,30,225,31,189,31,75,31,60,31,195,31,109,31,22,31,22,30,47,31,38,31,113,31,212,31,179,31,179,30,179,29,196,31,93,31,77,31,77,30,167,31,184,31,220,31,220,30,160,31,66,31,186,31,44,31,70,31,234,31,139,31,139,30,196,31,97,31,173,31,251,31,221,31,97,31,124,31,145,31,202,31,50,31,168,31,240,31,240,30,221,31,193,31,193,31,193,30,145,31,95,31,254,31,149,31,47,31,70,31,180,31,180,30,64,31,144,31,144,30,155,31,214,31,220,31,97,31,72,31,72,30,13,31,13,30,109,31,4,31,254,31,254,30,254,29,17,31,91,31,34,31,173,31,162,31,192,31,14,31,128,31,218,31,228,31,31,31,46,31,2,31,75,31,171,31,166,31,8,31,2,31,7,31,7,30,208,31,208,30,208,29,208,28,50,31,50,30,192,31,165,31,181,31,140,31,206,31,177,31,137,31,189,31,132,31,145,31,145,30,250,31,135,31,135,30,42,31,78,31,203,31,55,31,156,31,6,31,255,31,255,30,237,31,26,31,201,31,201,30,201,29,38,31,32,31,101,31,172,31,112,31,117,31,107,31,228,31,249,31,165,31,171,31,24,31,210,31,210,30,238,31,101,31,101,30,101,29,101,28,101,27,101,26,79,31,193,31,12,31,14,31,192,31,205,31,123,31,9,31,253,31,110,31,216,31,216,30,174,31,200,31,150,31,65,31,100,31,100,30,100,29,100,28,225,31,228,31,114,31,114,31,207,31,96,31,64,31,171,31,156,31,173,31,173,30,77,31,30,31,102,31,152,31,187,31,187,30,121,31,201,31,201,30,181,31,174,31,187,31,95,31,1,31,1,30,104,31,169,31,56,31,116,31,116,30,2,31,2,30,2,29,219,31,94,31,150,31,169,31,193,31,222,31,222,30,48,31,47,31,112,31,112,30,239,31,100,31,149,31,160,31,67,31,7,31,117,31,241,31,37,31,37,30,64,31,156,31,94,31,179,31,104,31,104,30,113,31,52,31,101,31,134,31,220,31,11,31,245,31,183,31,112,31,120,31,115,31,115,30,165,31,165,30,45,31,175,31,175,30,145,31,145,30,42,31,201,31,252,31,37,31,37,30,195,31,127,31,21,31,91,31,155,31,199,31,232,31,95,31,237,31,122,31,122,30,122,29,25,31,80,31,65,31,198,31,198,30,198,29,20,31,250,31,39,31,39,30,236,31,132,31,153,31,199,31,51,31,218,31,64,31,194,31,194,30,135,31,114,31,132,31,182,31,182,30,237,31,168,31,127,31,241,31,159,31,159,30,117,31,73,31,73,30,247,31,105,31,105,30,221,31,43,31,15,31,97,31,30,31,116,31,84,31,52,31,39,31,117,31,117,30,47,31,49,31,44,31,56,31,103,31,222,31,222,30,222,29,79,31,24,31,75,31,219,31,219,30,206,31,206,30,136,31,148,31,93,31,58,31,157,31,157,30,3,31,3,30,43,31,133,31,211,31,211,30,15,31,15,30,204,31,141,31,181,31,19,31,2,31,68,31,116,31,139,31,167,31,167,30,156,31,177,31,177,30,71,31,71,30,96,31,160,31,160,30,33,31,130,31,54,31,54,30,125,31,145,31,183,31,167,31,167,30,225,31,150,31,147,31,10,31,197,31,204,31,209,31,240,31,65,31,250,31,91,31,246,31,100,31,42,31,8,31,169,31,233,31,233,30,194,31,194,30,35,31,174,31,38,31,38,30,63,31,186,31,186,30,186,29,216,31,53,31,226,31,182,31,104,31,132,31,132,30,163,31,163,30,142,31,145,31,38,31,43,31,27,31,180,31,247,31,169,31,156,31,211,31,156,31,242,31,66,31,74,31,89,31,89,30,167,31,95,31,77,31,77,30,157,31,60,31,10,31,222,31,70,31,129,31,79,31,162,31,127,31,127,30,49,31,51,31,51,30,51,29,51,28,51,27,239,31,239,30,57,31,29,31,237,31,188,31,51,31,212,31,204,31,204,30,87,31,78,31,222,31,222,30,222,29,222,28,74,31,150,31,150,30,137,31,181,31,146,31,42,31,123,31,57,31,40,31,218,31,24,31,108,31,192,31,2,31,13,31,13,30,1,31,27,31,125,31,151,31,24,31,92,31,180,31,200,31,195,31,195,30,57,31,201,31,201,30,24,31,119,31,211,31,231,31,198,31,163,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
