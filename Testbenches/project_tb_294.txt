-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 529;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (116,0,174,0,0,0,30,0,191,0,65,0,129,0,153,0,143,0,40,0,132,0,51,0,170,0,0,0,110,0,113,0,213,0,122,0,246,0,0,0,231,0,0,0,110,0,200,0,55,0,175,0,0,0,0,0,20,0,171,0,28,0,6,0,135,0,65,0,186,0,94,0,0,0,0,0,217,0,0,0,0,0,71,0,0,0,0,0,63,0,0,0,222,0,184,0,0,0,204,0,0,0,246,0,136,0,25,0,205,0,0,0,7,0,0,0,189,0,159,0,112,0,187,0,144,0,128,0,243,0,0,0,0,0,99,0,242,0,152,0,46,0,229,0,187,0,79,0,103,0,98,0,57,0,79,0,0,0,109,0,51,0,114,0,10,0,7,0,0,0,141,0,216,0,252,0,163,0,187,0,17,0,0,0,0,0,169,0,178,0,97,0,83,0,78,0,154,0,0,0,179,0,99,0,0,0,65,0,207,0,252,0,4,0,0,0,108,0,0,0,71,0,96,0,53,0,247,0,146,0,238,0,40,0,187,0,62,0,37,0,134,0,94,0,140,0,38,0,0,0,0,0,67,0,83,0,62,0,0,0,69,0,0,0,70,0,204,0,3,0,179,0,0,0,26,0,137,0,35,0,0,0,203,0,39,0,160,0,6,0,0,0,192,0,93,0,150,0,0,0,238,0,80,0,194,0,193,0,0,0,133,0,130,0,216,0,1,0,0,0,127,0,221,0,216,0,0,0,60,0,244,0,63,0,232,0,0,0,0,0,0,0,5,0,130,0,163,0,236,0,162,0,94,0,216,0,217,0,9,0,98,0,77,0,222,0,126,0,183,0,50,0,73,0,24,0,72,0,52,0,224,0,33,0,209,0,98,0,238,0,239,0,0,0,0,0,175,0,226,0,7,0,0,0,195,0,47,0,251,0,156,0,98,0,45,0,42,0,0,0,133,0,132,0,0,0,0,0,28,0,251,0,165,0,127,0,60,0,86,0,79,0,241,0,0,0,255,0,121,0,48,0,150,0,201,0,91,0,95,0,68,0,154,0,0,0,118,0,73,0,237,0,67,0,25,0,0,0,80,0,21,0,25,0,190,0,152,0,18,0,0,0,192,0,135,0,0,0,192,0,0,0,11,0,6,0,40,0,149,0,226,0,83,0,215,0,29,0,213,0,0,0,56,0,148,0,248,0,75,0,109,0,41,0,13,0,72,0,22,0,59,0,0,0,141,0,214,0,186,0,184,0,52,0,168,0,81,0,158,0,86,0,0,0,161,0,98,0,0,0,145,0,125,0,164,0,0,0,0,0,103,0,169,0,240,0,0,0,195,0,126,0,183,0,112,0,23,0,196,0,202,0,251,0,109,0,0,0,171,0,0,0,132,0,0,0,237,0,14,0,60,0,64,0,117,0,107,0,86,0,148,0,181,0,175,0,128,0,95,0,0,0,0,0,0,0,176,0,148,0,156,0,205,0,176,0,69,0,0,0,0,0,7,0,38,0,224,0,161,0,28,0,62,0,45,0,171,0,232,0,0,0,17,0,157,0,55,0,178,0,0,0,0,0,129,0,0,0,169,0,18,0,145,0,0,0,192,0,2,0,248,0,51,0,0,0,0,0,28,0,0,0,14,0,82,0,82,0,0,0,159,0,30,0,34,0,124,0,77,0,197,0,117,0,0,0,184,0,31,0,49,0,128,0,213,0,106,0,213,0,170,0,209,0,0,0,0,0,221,0,0,0,241,0,236,0,71,0,219,0,175,0,104,0,4,0,170,0,0,0,237,0,0,0,127,0,170,0,53,0,56,0,30,0,186,0,221,0,251,0,89,0,114,0,104,0,0,0,98,0,101,0,0,0,211,0,50,0,198,0,77,0,69,0,165,0,141,0,161,0,83,0,159,0,63,0,123,0,240,0,66,0,214,0,235,0,101,0,0,0,0,0,189,0,108,0,0,0,167,0,249,0,226,0,24,0,24,0,81,0,0,0,214,0,8,0,99,0,164,0,7,0,89,0,145,0,133,0,123,0,249,0,0,0,104,0,158,0,214,0,0,0,247,0,0,0,21,0,32,0,177,0,236,0,73,0,207,0,88,0,0,0,87,0,44,0,144,0,0,0,112,0,0,0,67,0,60,0,235,0,178,0,107,0,234,0,0,0,1,0,19,0,0,0,0,0,0,0,156,0,161,0,11,0,157,0,247,0,249,0,73,0,138,0,77,0,0,0,177,0,245,0,0,0,22,0,13,0,251,0,13,0,238,0,0,0,78,0,208,0,199,0,150,0,20,0,0,0,59,0,46,0,146,0,0,0,0,0,68,0,48,0,0,0,167,0,144,0,169,0,123,0,0,0,2,0,173,0,0,0,112,0,97,0,236,0,204,0);
signal scenario_full  : scenario_type := (116,31,174,31,174,30,30,31,191,31,65,31,129,31,153,31,143,31,40,31,132,31,51,31,170,31,170,30,110,31,113,31,213,31,122,31,246,31,246,30,231,31,231,30,110,31,200,31,55,31,175,31,175,30,175,29,20,31,171,31,28,31,6,31,135,31,65,31,186,31,94,31,94,30,94,29,217,31,217,30,217,29,71,31,71,30,71,29,63,31,63,30,222,31,184,31,184,30,204,31,204,30,246,31,136,31,25,31,205,31,205,30,7,31,7,30,189,31,159,31,112,31,187,31,144,31,128,31,243,31,243,30,243,29,99,31,242,31,152,31,46,31,229,31,187,31,79,31,103,31,98,31,57,31,79,31,79,30,109,31,51,31,114,31,10,31,7,31,7,30,141,31,216,31,252,31,163,31,187,31,17,31,17,30,17,29,169,31,178,31,97,31,83,31,78,31,154,31,154,30,179,31,99,31,99,30,65,31,207,31,252,31,4,31,4,30,108,31,108,30,71,31,96,31,53,31,247,31,146,31,238,31,40,31,187,31,62,31,37,31,134,31,94,31,140,31,38,31,38,30,38,29,67,31,83,31,62,31,62,30,69,31,69,30,70,31,204,31,3,31,179,31,179,30,26,31,137,31,35,31,35,30,203,31,39,31,160,31,6,31,6,30,192,31,93,31,150,31,150,30,238,31,80,31,194,31,193,31,193,30,133,31,130,31,216,31,1,31,1,30,127,31,221,31,216,31,216,30,60,31,244,31,63,31,232,31,232,30,232,29,232,28,5,31,130,31,163,31,236,31,162,31,94,31,216,31,217,31,9,31,98,31,77,31,222,31,126,31,183,31,50,31,73,31,24,31,72,31,52,31,224,31,33,31,209,31,98,31,238,31,239,31,239,30,239,29,175,31,226,31,7,31,7,30,195,31,47,31,251,31,156,31,98,31,45,31,42,31,42,30,133,31,132,31,132,30,132,29,28,31,251,31,165,31,127,31,60,31,86,31,79,31,241,31,241,30,255,31,121,31,48,31,150,31,201,31,91,31,95,31,68,31,154,31,154,30,118,31,73,31,237,31,67,31,25,31,25,30,80,31,21,31,25,31,190,31,152,31,18,31,18,30,192,31,135,31,135,30,192,31,192,30,11,31,6,31,40,31,149,31,226,31,83,31,215,31,29,31,213,31,213,30,56,31,148,31,248,31,75,31,109,31,41,31,13,31,72,31,22,31,59,31,59,30,141,31,214,31,186,31,184,31,52,31,168,31,81,31,158,31,86,31,86,30,161,31,98,31,98,30,145,31,125,31,164,31,164,30,164,29,103,31,169,31,240,31,240,30,195,31,126,31,183,31,112,31,23,31,196,31,202,31,251,31,109,31,109,30,171,31,171,30,132,31,132,30,237,31,14,31,60,31,64,31,117,31,107,31,86,31,148,31,181,31,175,31,128,31,95,31,95,30,95,29,95,28,176,31,148,31,156,31,205,31,176,31,69,31,69,30,69,29,7,31,38,31,224,31,161,31,28,31,62,31,45,31,171,31,232,31,232,30,17,31,157,31,55,31,178,31,178,30,178,29,129,31,129,30,169,31,18,31,145,31,145,30,192,31,2,31,248,31,51,31,51,30,51,29,28,31,28,30,14,31,82,31,82,31,82,30,159,31,30,31,34,31,124,31,77,31,197,31,117,31,117,30,184,31,31,31,49,31,128,31,213,31,106,31,213,31,170,31,209,31,209,30,209,29,221,31,221,30,241,31,236,31,71,31,219,31,175,31,104,31,4,31,170,31,170,30,237,31,237,30,127,31,170,31,53,31,56,31,30,31,186,31,221,31,251,31,89,31,114,31,104,31,104,30,98,31,101,31,101,30,211,31,50,31,198,31,77,31,69,31,165,31,141,31,161,31,83,31,159,31,63,31,123,31,240,31,66,31,214,31,235,31,101,31,101,30,101,29,189,31,108,31,108,30,167,31,249,31,226,31,24,31,24,31,81,31,81,30,214,31,8,31,99,31,164,31,7,31,89,31,145,31,133,31,123,31,249,31,249,30,104,31,158,31,214,31,214,30,247,31,247,30,21,31,32,31,177,31,236,31,73,31,207,31,88,31,88,30,87,31,44,31,144,31,144,30,112,31,112,30,67,31,60,31,235,31,178,31,107,31,234,31,234,30,1,31,19,31,19,30,19,29,19,28,156,31,161,31,11,31,157,31,247,31,249,31,73,31,138,31,77,31,77,30,177,31,245,31,245,30,22,31,13,31,251,31,13,31,238,31,238,30,78,31,208,31,199,31,150,31,20,31,20,30,59,31,46,31,146,31,146,30,146,29,68,31,48,31,48,30,167,31,144,31,169,31,123,31,123,30,2,31,173,31,173,30,112,31,97,31,236,31,204,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
