-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 508;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (236,0,0,0,50,0,34,0,50,0,0,0,219,0,39,0,208,0,23,0,0,0,0,0,56,0,139,0,5,0,188,0,162,0,60,0,102,0,0,0,0,0,0,0,0,0,0,0,17,0,185,0,173,0,78,0,0,0,184,0,229,0,97,0,85,0,24,0,252,0,127,0,152,0,239,0,1,0,113,0,203,0,125,0,170,0,72,0,155,0,197,0,254,0,134,0,86,0,46,0,189,0,0,0,103,0,43,0,68,0,0,0,0,0,65,0,13,0,151,0,88,0,225,0,230,0,159,0,194,0,209,0,110,0,0,0,188,0,225,0,149,0,172,0,237,0,136,0,0,0,105,0,0,0,106,0,0,0,0,0,79,0,132,0,176,0,70,0,0,0,250,0,36,0,115,0,127,0,52,0,0,0,0,0,217,0,0,0,60,0,216,0,191,0,103,0,43,0,218,0,145,0,254,0,0,0,93,0,77,0,0,0,120,0,54,0,255,0,167,0,69,0,12,0,0,0,30,0,236,0,53,0,14,0,170,0,64,0,191,0,194,0,41,0,0,0,62,0,188,0,44,0,163,0,194,0,242,0,0,0,206,0,236,0,216,0,72,0,0,0,214,0,34,0,153,0,0,0,143,0,0,0,0,0,191,0,198,0,0,0,128,0,183,0,172,0,14,0,174,0,161,0,218,0,121,0,160,0,58,0,111,0,198,0,0,0,84,0,0,0,217,0,111,0,24,0,33,0,19,0,0,0,69,0,142,0,127,0,184,0,26,0,128,0,216,0,0,0,213,0,109,0,134,0,151,0,131,0,203,0,117,0,78,0,15,0,141,0,53,0,165,0,34,0,219,0,157,0,188,0,0,0,218,0,177,0,251,0,246,0,25,0,182,0,0,0,205,0,144,0,0,0,38,0,58,0,85,0,194,0,224,0,7,0,206,0,0,0,70,0,0,0,91,0,171,0,24,0,210,0,174,0,0,0,136,0,137,0,191,0,203,0,0,0,162,0,11,0,17,0,243,0,0,0,200,0,0,0,0,0,0,0,63,0,234,0,14,0,118,0,68,0,146,0,0,0,4,0,240,0,192,0,165,0,253,0,0,0,0,0,223,0,168,0,235,0,0,0,0,0,32,0,0,0,0,0,233,0,148,0,205,0,235,0,163,0,231,0,77,0,0,0,193,0,119,0,0,0,243,0,54,0,207,0,156,0,151,0,96,0,0,0,149,0,167,0,45,0,58,0,129,0,173,0,246,0,96,0,121,0,79,0,158,0,106,0,0,0,39,0,108,0,56,0,0,0,0,0,145,0,0,0,137,0,194,0,0,0,241,0,170,0,222,0,4,0,208,0,0,0,21,0,10,0,0,0,234,0,142,0,99,0,148,0,151,0,92,0,143,0,39,0,0,0,0,0,146,0,76,0,0,0,2,0,135,0,70,0,120,0,213,0,0,0,0,0,219,0,252,0,169,0,0,0,0,0,0,0,0,0,45,0,29,0,78,0,167,0,161,0,153,0,134,0,0,0,135,0,98,0,208,0,83,0,90,0,108,0,204,0,10,0,42,0,0,0,232,0,0,0,143,0,222,0,178,0,153,0,86,0,88,0,6,0,230,0,50,0,148,0,63,0,186,0,122,0,150,0,114,0,0,0,164,0,69,0,0,0,88,0,0,0,17,0,0,0,109,0,96,0,70,0,50,0,160,0,0,0,133,0,0,0,132,0,209,0,145,0,164,0,107,0,251,0,209,0,226,0,0,0,0,0,0,0,0,0,0,0,202,0,184,0,253,0,209,0,0,0,115,0,0,0,172,0,0,0,177,0,121,0,0,0,127,0,211,0,184,0,0,0,51,0,128,0,217,0,230,0,205,0,159,0,0,0,52,0,0,0,23,0,66,0,252,0,133,0,191,0,168,0,128,0,158,0,19,0,138,0,0,0,156,0,0,0,34,0,83,0,86,0,77,0,0,0,75,0,230,0,29,0,13,0,221,0,209,0,0,0,0,0,143,0,197,0,86,0,226,0,187,0,0,0,0,0,251,0,145,0,3,0,134,0,55,0,7,0,2,0,153,0,15,0,143,0,52,0,239,0,203,0,79,0,54,0,0,0,121,0,0,0,250,0,1,0,35,0,33,0,67,0,226,0,237,0,173,0,253,0,241,0,141,0,0,0,158,0,30,0,177,0,142,0,0,0,38,0,94,0,49,0,38,0,6,0,207,0,0,0,11,0,203,0,147,0,0,0,158,0,164,0,59,0,188,0,225,0,86,0,180,0,206,0,0,0,5,0);
signal scenario_full  : scenario_type := (236,31,236,30,50,31,34,31,50,31,50,30,219,31,39,31,208,31,23,31,23,30,23,29,56,31,139,31,5,31,188,31,162,31,60,31,102,31,102,30,102,29,102,28,102,27,102,26,17,31,185,31,173,31,78,31,78,30,184,31,229,31,97,31,85,31,24,31,252,31,127,31,152,31,239,31,1,31,113,31,203,31,125,31,170,31,72,31,155,31,197,31,254,31,134,31,86,31,46,31,189,31,189,30,103,31,43,31,68,31,68,30,68,29,65,31,13,31,151,31,88,31,225,31,230,31,159,31,194,31,209,31,110,31,110,30,188,31,225,31,149,31,172,31,237,31,136,31,136,30,105,31,105,30,106,31,106,30,106,29,79,31,132,31,176,31,70,31,70,30,250,31,36,31,115,31,127,31,52,31,52,30,52,29,217,31,217,30,60,31,216,31,191,31,103,31,43,31,218,31,145,31,254,31,254,30,93,31,77,31,77,30,120,31,54,31,255,31,167,31,69,31,12,31,12,30,30,31,236,31,53,31,14,31,170,31,64,31,191,31,194,31,41,31,41,30,62,31,188,31,44,31,163,31,194,31,242,31,242,30,206,31,236,31,216,31,72,31,72,30,214,31,34,31,153,31,153,30,143,31,143,30,143,29,191,31,198,31,198,30,128,31,183,31,172,31,14,31,174,31,161,31,218,31,121,31,160,31,58,31,111,31,198,31,198,30,84,31,84,30,217,31,111,31,24,31,33,31,19,31,19,30,69,31,142,31,127,31,184,31,26,31,128,31,216,31,216,30,213,31,109,31,134,31,151,31,131,31,203,31,117,31,78,31,15,31,141,31,53,31,165,31,34,31,219,31,157,31,188,31,188,30,218,31,177,31,251,31,246,31,25,31,182,31,182,30,205,31,144,31,144,30,38,31,58,31,85,31,194,31,224,31,7,31,206,31,206,30,70,31,70,30,91,31,171,31,24,31,210,31,174,31,174,30,136,31,137,31,191,31,203,31,203,30,162,31,11,31,17,31,243,31,243,30,200,31,200,30,200,29,200,28,63,31,234,31,14,31,118,31,68,31,146,31,146,30,4,31,240,31,192,31,165,31,253,31,253,30,253,29,223,31,168,31,235,31,235,30,235,29,32,31,32,30,32,29,233,31,148,31,205,31,235,31,163,31,231,31,77,31,77,30,193,31,119,31,119,30,243,31,54,31,207,31,156,31,151,31,96,31,96,30,149,31,167,31,45,31,58,31,129,31,173,31,246,31,96,31,121,31,79,31,158,31,106,31,106,30,39,31,108,31,56,31,56,30,56,29,145,31,145,30,137,31,194,31,194,30,241,31,170,31,222,31,4,31,208,31,208,30,21,31,10,31,10,30,234,31,142,31,99,31,148,31,151,31,92,31,143,31,39,31,39,30,39,29,146,31,76,31,76,30,2,31,135,31,70,31,120,31,213,31,213,30,213,29,219,31,252,31,169,31,169,30,169,29,169,28,169,27,45,31,29,31,78,31,167,31,161,31,153,31,134,31,134,30,135,31,98,31,208,31,83,31,90,31,108,31,204,31,10,31,42,31,42,30,232,31,232,30,143,31,222,31,178,31,153,31,86,31,88,31,6,31,230,31,50,31,148,31,63,31,186,31,122,31,150,31,114,31,114,30,164,31,69,31,69,30,88,31,88,30,17,31,17,30,109,31,96,31,70,31,50,31,160,31,160,30,133,31,133,30,132,31,209,31,145,31,164,31,107,31,251,31,209,31,226,31,226,30,226,29,226,28,226,27,226,26,202,31,184,31,253,31,209,31,209,30,115,31,115,30,172,31,172,30,177,31,121,31,121,30,127,31,211,31,184,31,184,30,51,31,128,31,217,31,230,31,205,31,159,31,159,30,52,31,52,30,23,31,66,31,252,31,133,31,191,31,168,31,128,31,158,31,19,31,138,31,138,30,156,31,156,30,34,31,83,31,86,31,77,31,77,30,75,31,230,31,29,31,13,31,221,31,209,31,209,30,209,29,143,31,197,31,86,31,226,31,187,31,187,30,187,29,251,31,145,31,3,31,134,31,55,31,7,31,2,31,153,31,15,31,143,31,52,31,239,31,203,31,79,31,54,31,54,30,121,31,121,30,250,31,1,31,35,31,33,31,67,31,226,31,237,31,173,31,253,31,241,31,141,31,141,30,158,31,30,31,177,31,142,31,142,30,38,31,94,31,49,31,38,31,6,31,207,31,207,30,11,31,203,31,147,31,147,30,158,31,164,31,59,31,188,31,225,31,86,31,180,31,206,31,206,30,5,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
