-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 627;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (62,0,144,0,0,0,174,0,228,0,0,0,57,0,18,0,245,0,145,0,0,0,232,0,161,0,116,0,0,0,16,0,33,0,168,0,0,0,1,0,248,0,69,0,21,0,0,0,31,0,75,0,35,0,64,0,0,0,98,0,234,0,33,0,52,0,242,0,89,0,81,0,85,0,0,0,24,0,252,0,216,0,226,0,0,0,182,0,120,0,90,0,169,0,0,0,24,0,4,0,153,0,59,0,130,0,47,0,37,0,0,0,0,0,0,0,219,0,0,0,113,0,202,0,181,0,118,0,176,0,125,0,188,0,168,0,170,0,112,0,163,0,147,0,40,0,119,0,0,0,0,0,42,0,118,0,133,0,223,0,49,0,14,0,32,0,142,0,62,0,227,0,90,0,114,0,207,0,246,0,190,0,139,0,173,0,0,0,206,0,89,0,45,0,175,0,175,0,70,0,178,0,165,0,0,0,165,0,30,0,68,0,185,0,197,0,0,0,22,0,241,0,84,0,196,0,13,0,94,0,127,0,26,0,161,0,34,0,0,0,13,0,134,0,179,0,0,0,86,0,0,0,52,0,79,0,239,0,66,0,0,0,44,0,55,0,102,0,146,0,67,0,32,0,41,0,0,0,26,0,43,0,65,0,0,0,46,0,103,0,192,0,14,0,53,0,229,0,72,0,1,0,0,0,0,0,0,0,94,0,0,0,144,0,53,0,162,0,0,0,56,0,248,0,14,0,0,0,166,0,88,0,25,0,68,0,101,0,209,0,177,0,37,0,61,0,0,0,147,0,54,0,101,0,0,0,224,0,234,0,107,0,0,0,35,0,58,0,212,0,46,0,0,0,28,0,143,0,2,0,88,0,47,0,187,0,38,0,90,0,232,0,22,0,51,0,209,0,0,0,174,0,63,0,221,0,228,0,0,0,217,0,0,0,213,0,192,0,0,0,160,0,193,0,77,0,147,0,0,0,199,0,253,0,169,0,75,0,218,0,160,0,182,0,0,0,179,0,124,0,161,0,0,0,188,0,48,0,233,0,97,0,64,0,106,0,168,0,90,0,0,0,33,0,78,0,80,0,0,0,35,0,113,0,134,0,182,0,225,0,238,0,153,0,65,0,212,0,0,0,0,0,0,0,52,0,0,0,234,0,243,0,37,0,9,0,243,0,95,0,0,0,219,0,61,0,0,0,0,0,162,0,254,0,231,0,254,0,28,0,128,0,249,0,158,0,144,0,86,0,56,0,16,0,126,0,80,0,115,0,0,0,154,0,179,0,50,0,191,0,227,0,51,0,167,0,3,0,125,0,129,0,0,0,0,0,17,0,0,0,169,0,60,0,0,0,26,0,76,0,128,0,109,0,187,0,101,0,80,0,0,0,0,0,67,0,0,0,0,0,222,0,0,0,241,0,207,0,0,0,0,0,0,0,130,0,0,0,249,0,77,0,8,0,13,0,0,0,180,0,191,0,56,0,0,0,193,0,32,0,136,0,0,0,51,0,161,0,36,0,250,0,66,0,69,0,127,0,100,0,104,0,76,0,215,0,228,0,175,0,176,0,0,0,0,0,7,0,48,0,0,0,234,0,0,0,56,0,239,0,181,0,94,0,252,0,0,0,22,0,0,0,58,0,247,0,14,0,225,0,71,0,0,0,25,0,126,0,112,0,188,0,1,0,156,0,230,0,0,0,229,0,142,0,178,0,164,0,79,0,48,0,127,0,107,0,26,0,0,0,0,0,0,0,230,0,0,0,0,0,0,0,0,0,0,0,133,0,190,0,59,0,85,0,0,0,0,0,244,0,70,0,23,0,213,0,0,0,61,0,28,0,0,0,0,0,88,0,33,0,122,0,49,0,121,0,0,0,184,0,0,0,0,0,30,0,190,0,134,0,0,0,82,0,82,0,74,0,0,0,222,0,27,0,0,0,220,0,141,0,151,0,73,0,118,0,234,0,216,0,232,0,52,0,124,0,228,0,171,0,128,0,115,0,218,0,76,0,0,0,179,0,0,0,187,0,85,0,58,0,211,0,231,0,251,0,224,0,186,0,0,0,89,0,0,0,210,0,157,0,118,0,23,0,212,0,41,0,0,0,99,0,96,0,251,0,99,0,38,0,203,0,12,0,73,0,0,0,229,0,133,0,0,0,218,0,0,0,30,0,0,0,181,0,24,0,11,0,30,0,0,0,54,0,75,0,0,0,184,0,78,0,0,0,88,0,0,0,182,0,0,0,124,0,16,0,141,0,172,0,9,0,218,0,50,0,139,0,109,0,240,0,72,0,149,0,86,0,203,0,0,0,1,0,0,0,255,0,224,0,0,0,35,0,23,0,80,0,217,0,143,0,122,0,33,0,254,0,183,0,0,0,44,0,105,0,142,0,254,0,0,0,211,0,102,0,41,0,204,0,45,0,194,0,224,0,231,0,249,0,220,0,125,0,77,0,70,0,0,0,25,0,112,0,200,0,129,0,110,0,83,0,0,0,153,0,121,0,0,0,74,0,64,0,57,0,57,0,214,0,238,0,104,0,3,0,79,0,40,0,106,0,255,0,181,0,17,0,76,0,0,0,69,0,60,0,192,0,197,0,82,0,91,0,197,0,40,0,0,0,88,0,81,0,17,0,47,0,142,0,253,0,0,0,155,0,0,0,195,0,178,0,251,0,138,0,249,0,99,0,0,0,234,0,0,0,233,0,136,0,99,0,177,0,247,0,211,0,105,0,188,0,254,0,6,0,210,0,22,0,0,0,124,0,0,0,195,0,28,0,187,0,171,0,66,0,78,0,25,0,112,0,0,0,247,0,25,0,71,0,217,0,72,0);
signal scenario_full  : scenario_type := (62,31,144,31,144,30,174,31,228,31,228,30,57,31,18,31,245,31,145,31,145,30,232,31,161,31,116,31,116,30,16,31,33,31,168,31,168,30,1,31,248,31,69,31,21,31,21,30,31,31,75,31,35,31,64,31,64,30,98,31,234,31,33,31,52,31,242,31,89,31,81,31,85,31,85,30,24,31,252,31,216,31,226,31,226,30,182,31,120,31,90,31,169,31,169,30,24,31,4,31,153,31,59,31,130,31,47,31,37,31,37,30,37,29,37,28,219,31,219,30,113,31,202,31,181,31,118,31,176,31,125,31,188,31,168,31,170,31,112,31,163,31,147,31,40,31,119,31,119,30,119,29,42,31,118,31,133,31,223,31,49,31,14,31,32,31,142,31,62,31,227,31,90,31,114,31,207,31,246,31,190,31,139,31,173,31,173,30,206,31,89,31,45,31,175,31,175,31,70,31,178,31,165,31,165,30,165,31,30,31,68,31,185,31,197,31,197,30,22,31,241,31,84,31,196,31,13,31,94,31,127,31,26,31,161,31,34,31,34,30,13,31,134,31,179,31,179,30,86,31,86,30,52,31,79,31,239,31,66,31,66,30,44,31,55,31,102,31,146,31,67,31,32,31,41,31,41,30,26,31,43,31,65,31,65,30,46,31,103,31,192,31,14,31,53,31,229,31,72,31,1,31,1,30,1,29,1,28,94,31,94,30,144,31,53,31,162,31,162,30,56,31,248,31,14,31,14,30,166,31,88,31,25,31,68,31,101,31,209,31,177,31,37,31,61,31,61,30,147,31,54,31,101,31,101,30,224,31,234,31,107,31,107,30,35,31,58,31,212,31,46,31,46,30,28,31,143,31,2,31,88,31,47,31,187,31,38,31,90,31,232,31,22,31,51,31,209,31,209,30,174,31,63,31,221,31,228,31,228,30,217,31,217,30,213,31,192,31,192,30,160,31,193,31,77,31,147,31,147,30,199,31,253,31,169,31,75,31,218,31,160,31,182,31,182,30,179,31,124,31,161,31,161,30,188,31,48,31,233,31,97,31,64,31,106,31,168,31,90,31,90,30,33,31,78,31,80,31,80,30,35,31,113,31,134,31,182,31,225,31,238,31,153,31,65,31,212,31,212,30,212,29,212,28,52,31,52,30,234,31,243,31,37,31,9,31,243,31,95,31,95,30,219,31,61,31,61,30,61,29,162,31,254,31,231,31,254,31,28,31,128,31,249,31,158,31,144,31,86,31,56,31,16,31,126,31,80,31,115,31,115,30,154,31,179,31,50,31,191,31,227,31,51,31,167,31,3,31,125,31,129,31,129,30,129,29,17,31,17,30,169,31,60,31,60,30,26,31,76,31,128,31,109,31,187,31,101,31,80,31,80,30,80,29,67,31,67,30,67,29,222,31,222,30,241,31,207,31,207,30,207,29,207,28,130,31,130,30,249,31,77,31,8,31,13,31,13,30,180,31,191,31,56,31,56,30,193,31,32,31,136,31,136,30,51,31,161,31,36,31,250,31,66,31,69,31,127,31,100,31,104,31,76,31,215,31,228,31,175,31,176,31,176,30,176,29,7,31,48,31,48,30,234,31,234,30,56,31,239,31,181,31,94,31,252,31,252,30,22,31,22,30,58,31,247,31,14,31,225,31,71,31,71,30,25,31,126,31,112,31,188,31,1,31,156,31,230,31,230,30,229,31,142,31,178,31,164,31,79,31,48,31,127,31,107,31,26,31,26,30,26,29,26,28,230,31,230,30,230,29,230,28,230,27,230,26,133,31,190,31,59,31,85,31,85,30,85,29,244,31,70,31,23,31,213,31,213,30,61,31,28,31,28,30,28,29,88,31,33,31,122,31,49,31,121,31,121,30,184,31,184,30,184,29,30,31,190,31,134,31,134,30,82,31,82,31,74,31,74,30,222,31,27,31,27,30,220,31,141,31,151,31,73,31,118,31,234,31,216,31,232,31,52,31,124,31,228,31,171,31,128,31,115,31,218,31,76,31,76,30,179,31,179,30,187,31,85,31,58,31,211,31,231,31,251,31,224,31,186,31,186,30,89,31,89,30,210,31,157,31,118,31,23,31,212,31,41,31,41,30,99,31,96,31,251,31,99,31,38,31,203,31,12,31,73,31,73,30,229,31,133,31,133,30,218,31,218,30,30,31,30,30,181,31,24,31,11,31,30,31,30,30,54,31,75,31,75,30,184,31,78,31,78,30,88,31,88,30,182,31,182,30,124,31,16,31,141,31,172,31,9,31,218,31,50,31,139,31,109,31,240,31,72,31,149,31,86,31,203,31,203,30,1,31,1,30,255,31,224,31,224,30,35,31,23,31,80,31,217,31,143,31,122,31,33,31,254,31,183,31,183,30,44,31,105,31,142,31,254,31,254,30,211,31,102,31,41,31,204,31,45,31,194,31,224,31,231,31,249,31,220,31,125,31,77,31,70,31,70,30,25,31,112,31,200,31,129,31,110,31,83,31,83,30,153,31,121,31,121,30,74,31,64,31,57,31,57,31,214,31,238,31,104,31,3,31,79,31,40,31,106,31,255,31,181,31,17,31,76,31,76,30,69,31,60,31,192,31,197,31,82,31,91,31,197,31,40,31,40,30,88,31,81,31,17,31,47,31,142,31,253,31,253,30,155,31,155,30,195,31,178,31,251,31,138,31,249,31,99,31,99,30,234,31,234,30,233,31,136,31,99,31,177,31,247,31,211,31,105,31,188,31,254,31,6,31,210,31,22,31,22,30,124,31,124,30,195,31,28,31,187,31,171,31,66,31,78,31,25,31,112,31,112,30,247,31,25,31,71,31,217,31,72,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
