-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 739;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,204,0,90,0,72,0,0,0,0,0,0,0,200,0,157,0,0,0,58,0,0,0,82,0,0,0,148,0,0,0,132,0,190,0,0,0,57,0,94,0,170,0,255,0,144,0,29,0,175,0,0,0,60,0,0,0,120,0,207,0,181,0,252,0,157,0,199,0,0,0,0,0,0,0,165,0,235,0,158,0,170,0,151,0,35,0,205,0,138,0,70,0,124,0,81,0,0,0,230,0,69,0,38,0,253,0,67,0,249,0,165,0,38,0,0,0,0,0,82,0,120,0,224,0,49,0,96,0,86,0,0,0,7,0,105,0,186,0,151,0,208,0,102,0,0,0,0,0,69,0,99,0,209,0,49,0,233,0,0,0,124,0,55,0,0,0,126,0,183,0,92,0,0,0,55,0,0,0,255,0,38,0,0,0,212,0,105,0,0,0,8,0,243,0,16,0,92,0,217,0,220,0,150,0,207,0,245,0,234,0,0,0,0,0,143,0,39,0,0,0,0,0,0,0,171,0,79,0,0,0,33,0,116,0,103,0,102,0,54,0,105,0,0,0,12,0,196,0,186,0,251,0,109,0,145,0,146,0,161,0,116,0,158,0,186,0,208,0,0,0,48,0,143,0,8,0,0,0,72,0,114,0,129,0,51,0,136,0,21,0,52,0,113,0,166,0,0,0,139,0,70,0,211,0,22,0,245,0,241,0,115,0,254,0,152,0,84,0,103,0,24,0,0,0,0,0,0,0,113,0,0,0,0,0,192,0,0,0,169,0,232,0,28,0,0,0,134,0,237,0,0,0,87,0,1,0,197,0,247,0,94,0,225,0,251,0,85,0,130,0,40,0,9,0,57,0,194,0,94,0,248,0,12,0,0,0,75,0,128,0,0,0,162,0,193,0,192,0,38,0,134,0,91,0,23,0,148,0,188,0,176,0,37,0,38,0,140,0,121,0,86,0,219,0,47,0,14,0,61,0,0,0,223,0,48,0,95,0,69,0,0,0,145,0,222,0,104,0,122,0,0,0,191,0,161,0,46,0,127,0,90,0,236,0,0,0,237,0,1,0,22,0,238,0,78,0,134,0,189,0,205,0,226,0,230,0,38,0,177,0,149,0,238,0,16,0,199,0,146,0,50,0,0,0,241,0,154,0,134,0,0,0,6,0,0,0,165,0,206,0,252,0,99,0,95,0,80,0,6,0,68,0,106,0,15,0,218,0,31,0,53,0,145,0,0,0,187,0,0,0,31,0,40,0,226,0,249,0,99,0,213,0,167,0,247,0,38,0,0,0,99,0,0,0,234,0,174,0,210,0,98,0,169,0,123,0,60,0,227,0,12,0,217,0,34,0,0,0,0,0,20,0,122,0,118,0,0,0,233,0,138,0,90,0,0,0,142,0,115,0,0,0,0,0,159,0,0,0,14,0,63,0,0,0,223,0,32,0,195,0,215,0,64,0,0,0,213,0,31,0,159,0,36,0,41,0,248,0,161,0,0,0,20,0,143,0,161,0,144,0,180,0,2,0,29,0,0,0,223,0,35,0,136,0,121,0,0,0,55,0,85,0,92,0,0,0,246,0,30,0,190,0,156,0,86,0,0,0,57,0,65,0,154,0,0,0,25,0,10,0,227,0,2,0,99,0,217,0,185,0,176,0,110,0,0,0,172,0,29,0,125,0,217,0,45,0,3,0,29,0,0,0,26,0,0,0,0,0,178,0,70,0,207,0,44,0,0,0,76,0,211,0,164,0,161,0,0,0,184,0,0,0,212,0,234,0,22,0,22,0,94,0,230,0,167,0,182,0,111,0,6,0,56,0,9,0,144,0,156,0,97,0,21,0,73,0,11,0,75,0,88,0,19,0,16,0,214,0,96,0,69,0,217,0,152,0,0,0,73,0,229,0,113,0,200,0,0,0,41,0,139,0,160,0,103,0,0,0,249,0,165,0,210,0,76,0,42,0,213,0,203,0,0,0,250,0,141,0,155,0,0,0,244,0,247,0,22,0,117,0,247,0,37,0,177,0,73,0,0,0,129,0,119,0,165,0,3,0,0,0,174,0,13,0,202,0,0,0,73,0,0,0,55,0,204,0,160,0,135,0,0,0,239,0,166,0,235,0,232,0,251,0,147,0,42,0,0,0,53,0,40,0,173,0,89,0,0,0,200,0,113,0,0,0,85,0,171,0,0,0,195,0,58,0,0,0,115,0,9,0,84,0,220,0,207,0,0,0,83,0,155,0,0,0,0,0,198,0,152,0,74,0,0,0,190,0,107,0,0,0,128,0,127,0,68,0,0,0,209,0,63,0,164,0,0,0,73,0,217,0,85,0,0,0,246,0,192,0,159,0,159,0,155,0,119,0,33,0,8,0,0,0,59,0,18,0,87,0,235,0,63,0,58,0,200,0,81,0,109,0,207,0,0,0,0,0,166,0,249,0,132,0,118,0,175,0,185,0,225,0,0,0,244,0,20,0,80,0,0,0,206,0,46,0,57,0,178,0,152,0,151,0,96,0,50,0,0,0,36,0,215,0,184,0,184,0,218,0,119,0,53,0,147,0,190,0,73,0,14,0,218,0,196,0,0,0,119,0,153,0,0,0,0,0,131,0,14,0,91,0,52,0,0,0,34,0,36,0,0,0,21,0,41,0,133,0,111,0,0,0,159,0,0,0,17,0,0,0,0,0,0,0,18,0,223,0,97,0,128,0,119,0,68,0,2,0,0,0,217,0,168,0,175,0,68,0,0,0,59,0,0,0,78,0,42,0,201,0,128,0,0,0,252,0,5,0,166,0,54,0,235,0,159,0,0,0,108,0,56,0,99,0,164,0,0,0,25,0,109,0,168,0,226,0,240,0,66,0,160,0,4,0,41,0,0,0,205,0,62,0,23,0,72,0,98,0,0,0,46,0,85,0,204,0,153,0,0,0,0,0,0,0,195,0,192,0,201,0,35,0,166,0,244,0,105,0,0,0,0,0,8,0,158,0,82,0,202,0,67,0,207,0,115,0,176,0,203,0,255,0,212,0,155,0,0,0,0,0,0,0,174,0,10,0,0,0,0,0,0,0,3,0,255,0,94,0,0,0,248,0,67,0,0,0,166,0,0,0,194,0,34,0,163,0,94,0,180,0,3,0,113,0,82,0,245,0,0,0,187,0,211,0,0,0,0,0,201,0,231,0,162,0,3,0,131,0,72,0,163,0,237,0,9,0,117,0,107,0,9,0,193,0,66,0,66,0,215,0,144,0,0,0,8,0,116,0,181,0,90,0,254,0,0,0,105,0,0,0,144,0,148,0,253,0,28,0,56,0,32,0,0,0,5,0,39,0);
signal scenario_full  : scenario_type := (0,0,204,31,90,31,72,31,72,30,72,29,72,28,200,31,157,31,157,30,58,31,58,30,82,31,82,30,148,31,148,30,132,31,190,31,190,30,57,31,94,31,170,31,255,31,144,31,29,31,175,31,175,30,60,31,60,30,120,31,207,31,181,31,252,31,157,31,199,31,199,30,199,29,199,28,165,31,235,31,158,31,170,31,151,31,35,31,205,31,138,31,70,31,124,31,81,31,81,30,230,31,69,31,38,31,253,31,67,31,249,31,165,31,38,31,38,30,38,29,82,31,120,31,224,31,49,31,96,31,86,31,86,30,7,31,105,31,186,31,151,31,208,31,102,31,102,30,102,29,69,31,99,31,209,31,49,31,233,31,233,30,124,31,55,31,55,30,126,31,183,31,92,31,92,30,55,31,55,30,255,31,38,31,38,30,212,31,105,31,105,30,8,31,243,31,16,31,92,31,217,31,220,31,150,31,207,31,245,31,234,31,234,30,234,29,143,31,39,31,39,30,39,29,39,28,171,31,79,31,79,30,33,31,116,31,103,31,102,31,54,31,105,31,105,30,12,31,196,31,186,31,251,31,109,31,145,31,146,31,161,31,116,31,158,31,186,31,208,31,208,30,48,31,143,31,8,31,8,30,72,31,114,31,129,31,51,31,136,31,21,31,52,31,113,31,166,31,166,30,139,31,70,31,211,31,22,31,245,31,241,31,115,31,254,31,152,31,84,31,103,31,24,31,24,30,24,29,24,28,113,31,113,30,113,29,192,31,192,30,169,31,232,31,28,31,28,30,134,31,237,31,237,30,87,31,1,31,197,31,247,31,94,31,225,31,251,31,85,31,130,31,40,31,9,31,57,31,194,31,94,31,248,31,12,31,12,30,75,31,128,31,128,30,162,31,193,31,192,31,38,31,134,31,91,31,23,31,148,31,188,31,176,31,37,31,38,31,140,31,121,31,86,31,219,31,47,31,14,31,61,31,61,30,223,31,48,31,95,31,69,31,69,30,145,31,222,31,104,31,122,31,122,30,191,31,161,31,46,31,127,31,90,31,236,31,236,30,237,31,1,31,22,31,238,31,78,31,134,31,189,31,205,31,226,31,230,31,38,31,177,31,149,31,238,31,16,31,199,31,146,31,50,31,50,30,241,31,154,31,134,31,134,30,6,31,6,30,165,31,206,31,252,31,99,31,95,31,80,31,6,31,68,31,106,31,15,31,218,31,31,31,53,31,145,31,145,30,187,31,187,30,31,31,40,31,226,31,249,31,99,31,213,31,167,31,247,31,38,31,38,30,99,31,99,30,234,31,174,31,210,31,98,31,169,31,123,31,60,31,227,31,12,31,217,31,34,31,34,30,34,29,20,31,122,31,118,31,118,30,233,31,138,31,90,31,90,30,142,31,115,31,115,30,115,29,159,31,159,30,14,31,63,31,63,30,223,31,32,31,195,31,215,31,64,31,64,30,213,31,31,31,159,31,36,31,41,31,248,31,161,31,161,30,20,31,143,31,161,31,144,31,180,31,2,31,29,31,29,30,223,31,35,31,136,31,121,31,121,30,55,31,85,31,92,31,92,30,246,31,30,31,190,31,156,31,86,31,86,30,57,31,65,31,154,31,154,30,25,31,10,31,227,31,2,31,99,31,217,31,185,31,176,31,110,31,110,30,172,31,29,31,125,31,217,31,45,31,3,31,29,31,29,30,26,31,26,30,26,29,178,31,70,31,207,31,44,31,44,30,76,31,211,31,164,31,161,31,161,30,184,31,184,30,212,31,234,31,22,31,22,31,94,31,230,31,167,31,182,31,111,31,6,31,56,31,9,31,144,31,156,31,97,31,21,31,73,31,11,31,75,31,88,31,19,31,16,31,214,31,96,31,69,31,217,31,152,31,152,30,73,31,229,31,113,31,200,31,200,30,41,31,139,31,160,31,103,31,103,30,249,31,165,31,210,31,76,31,42,31,213,31,203,31,203,30,250,31,141,31,155,31,155,30,244,31,247,31,22,31,117,31,247,31,37,31,177,31,73,31,73,30,129,31,119,31,165,31,3,31,3,30,174,31,13,31,202,31,202,30,73,31,73,30,55,31,204,31,160,31,135,31,135,30,239,31,166,31,235,31,232,31,251,31,147,31,42,31,42,30,53,31,40,31,173,31,89,31,89,30,200,31,113,31,113,30,85,31,171,31,171,30,195,31,58,31,58,30,115,31,9,31,84,31,220,31,207,31,207,30,83,31,155,31,155,30,155,29,198,31,152,31,74,31,74,30,190,31,107,31,107,30,128,31,127,31,68,31,68,30,209,31,63,31,164,31,164,30,73,31,217,31,85,31,85,30,246,31,192,31,159,31,159,31,155,31,119,31,33,31,8,31,8,30,59,31,18,31,87,31,235,31,63,31,58,31,200,31,81,31,109,31,207,31,207,30,207,29,166,31,249,31,132,31,118,31,175,31,185,31,225,31,225,30,244,31,20,31,80,31,80,30,206,31,46,31,57,31,178,31,152,31,151,31,96,31,50,31,50,30,36,31,215,31,184,31,184,31,218,31,119,31,53,31,147,31,190,31,73,31,14,31,218,31,196,31,196,30,119,31,153,31,153,30,153,29,131,31,14,31,91,31,52,31,52,30,34,31,36,31,36,30,21,31,41,31,133,31,111,31,111,30,159,31,159,30,17,31,17,30,17,29,17,28,18,31,223,31,97,31,128,31,119,31,68,31,2,31,2,30,217,31,168,31,175,31,68,31,68,30,59,31,59,30,78,31,42,31,201,31,128,31,128,30,252,31,5,31,166,31,54,31,235,31,159,31,159,30,108,31,56,31,99,31,164,31,164,30,25,31,109,31,168,31,226,31,240,31,66,31,160,31,4,31,41,31,41,30,205,31,62,31,23,31,72,31,98,31,98,30,46,31,85,31,204,31,153,31,153,30,153,29,153,28,195,31,192,31,201,31,35,31,166,31,244,31,105,31,105,30,105,29,8,31,158,31,82,31,202,31,67,31,207,31,115,31,176,31,203,31,255,31,212,31,155,31,155,30,155,29,155,28,174,31,10,31,10,30,10,29,10,28,3,31,255,31,94,31,94,30,248,31,67,31,67,30,166,31,166,30,194,31,34,31,163,31,94,31,180,31,3,31,113,31,82,31,245,31,245,30,187,31,211,31,211,30,211,29,201,31,231,31,162,31,3,31,131,31,72,31,163,31,237,31,9,31,117,31,107,31,9,31,193,31,66,31,66,31,215,31,144,31,144,30,8,31,116,31,181,31,90,31,254,31,254,30,105,31,105,30,144,31,148,31,253,31,28,31,56,31,32,31,32,30,5,31,39,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
