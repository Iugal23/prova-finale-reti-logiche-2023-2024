-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 846;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (147,0,68,0,122,0,204,0,205,0,0,0,57,0,150,0,191,0,21,0,0,0,251,0,225,0,24,0,80,0,117,0,255,0,96,0,230,0,249,0,170,0,254,0,0,0,0,0,183,0,82,0,147,0,0,0,123,0,244,0,130,0,16,0,0,0,123,0,76,0,0,0,166,0,144,0,0,0,70,0,118,0,209,0,241,0,7,0,0,0,233,0,0,0,93,0,200,0,57,0,93,0,220,0,0,0,250,0,49,0,55,0,88,0,79,0,13,0,235,0,34,0,0,0,180,0,93,0,232,0,0,0,203,0,173,0,174,0,198,0,244,0,122,0,26,0,42,0,14,0,27,0,126,0,194,0,6,0,0,0,60,0,35,0,0,0,215,0,194,0,10,0,0,0,33,0,189,0,125,0,49,0,3,0,0,0,69,0,224,0,8,0,10,0,215,0,14,0,16,0,102,0,0,0,71,0,191,0,27,0,50,0,230,0,0,0,104,0,194,0,196,0,0,0,0,0,69,0,101,0,197,0,0,0,38,0,186,0,0,0,168,0,84,0,62,0,200,0,13,0,25,0,0,0,0,0,186,0,96,0,107,0,45,0,248,0,120,0,235,0,210,0,40,0,0,0,11,0,244,0,0,0,195,0,88,0,105,0,210,0,186,0,224,0,198,0,0,0,235,0,35,0,0,0,0,0,39,0,114,0,42,0,115,0,40,0,106,0,196,0,117,0,35,0,86,0,82,0,228,0,99,0,131,0,210,0,0,0,248,0,218,0,5,0,188,0,93,0,0,0,0,0,37,0,184,0,176,0,165,0,20,0,169,0,241,0,128,0,236,0,38,0,0,0,162,0,24,0,171,0,184,0,73,0,44,0,247,0,240,0,45,0,115,0,176,0,2,0,0,0,0,0,0,0,27,0,176,0,176,0,207,0,164,0,12,0,0,0,29,0,29,0,198,0,42,0,18,0,0,0,26,0,75,0,251,0,161,0,0,0,112,0,87,0,209,0,40,0,62,0,19,0,111,0,210,0,80,0,103,0,32,0,72,0,160,0,59,0,16,0,255,0,111,0,178,0,88,0,0,0,176,0,0,0,63,0,15,0,243,0,81,0,70,0,130,0,0,0,117,0,155,0,79,0,29,0,114,0,0,0,100,0,156,0,0,0,61,0,0,0,0,0,9,0,54,0,0,0,203,0,0,0,174,0,0,0,112,0,0,0,210,0,0,0,55,0,63,0,140,0,37,0,56,0,0,0,0,0,119,0,101,0,0,0,0,0,83,0,0,0,0,0,2,0,51,0,199,0,244,0,24,0,155,0,40,0,198,0,120,0,104,0,91,0,2,0,109,0,188,0,161,0,27,0,27,0,239,0,180,0,20,0,105,0,0,0,79,0,178,0,48,0,0,0,33,0,97,0,229,0,0,0,9,0,235,0,81,0,126,0,0,0,0,0,240,0,111,0,83,0,0,0,106,0,14,0,169,0,198,0,187,0,170,0,181,0,201,0,0,0,195,0,225,0,0,0,0,0,0,0,40,0,63,0,207,0,252,0,214,0,96,0,181,0,111,0,251,0,0,0,80,0,37,0,213,0,238,0,237,0,0,0,64,0,179,0,149,0,112,0,0,0,52,0,158,0,239,0,211,0,0,0,59,0,217,0,94,0,174,0,0,0,63,0,40,0,0,0,58,0,240,0,0,0,142,0,94,0,0,0,106,0,66,0,25,0,0,0,92,0,238,0,214,0,232,0,24,0,0,0,178,0,0,0,0,0,99,0,125,0,0,0,26,0,184,0,83,0,0,0,122,0,129,0,184,0,241,0,227,0,121,0,70,0,209,0,118,0,0,0,0,0,0,0,229,0,71,0,66,0,0,0,244,0,0,0,0,0,207,0,202,0,114,0,119,0,51,0,5,0,170,0,171,0,173,0,1,0,128,0,209,0,105,0,219,0,0,0,93,0,37,0,32,0,17,0,211,0,10,0,65,0,0,0,179,0,169,0,92,0,0,0,188,0,95,0,250,0,182,0,53,0,68,0,87,0,178,0,129,0,0,0,135,0,0,0,255,0,163,0,69,0,96,0,0,0,156,0,228,0,243,0,66,0,223,0,97,0,208,0,74,0,100,0,151,0,202,0,81,0,254,0,0,0,0,0,152,0,255,0,51,0,0,0,63,0,0,0,0,0,182,0,147,0,0,0,135,0,236,0,179,0,52,0,93,0,0,0,225,0,0,0,0,0,250,0,22,0,69,0,5,0,0,0,150,0,138,0,28,0,0,0,215,0,150,0,0,0,131,0,206,0,16,0,69,0,47,0,223,0,0,0,0,0,0,0,0,0,54,0,0,0,75,0,31,0,205,0,0,0,122,0,0,0,40,0,102,0,223,0,203,0,5,0,247,0,115,0,0,0,18,0,229,0,0,0,108,0,50,0,251,0,55,0,133,0,151,0,0,0,40,0,69,0,203,0,0,0,227,0,24,0,136,0,14,0,0,0,41,0,63,0,0,0,99,0,0,0,228,0,41,0,47,0,215,0,220,0,189,0,3,0,122,0,0,0,14,0,126,0,25,0,189,0,194,0,26,0,0,0,128,0,54,0,5,0,64,0,183,0,92,0,36,0,12,0,0,0,245,0,0,0,187,0,164,0,40,0,126,0,232,0,251,0,0,0,54,0,187,0,96,0,165,0,222,0,246,0,189,0,135,0,198,0,35,0,134,0,113,0,0,0,6,0,42,0,0,0,86,0,78,0,0,0,0,0,213,0,232,0,199,0,18,0,187,0,0,0,39,0,218,0,210,0,254,0,183,0,115,0,0,0,163,0,0,0,41,0,138,0,91,0,0,0,0,0,191,0,222,0,232,0,95,0,210,0,0,0,86,0,0,0,233,0,236,0,130,0,0,0,0,0,0,0,72,0,255,0,90,0,0,0,253,0,204,0,0,0,0,0,0,0,20,0,0,0,155,0,122,0,240,0,86,0,235,0,121,0,114,0,210,0,230,0,8,0,57,0,155,0,129,0,43,0,42,0,0,0,82,0,235,0,17,0,0,0,0,0,0,0,193,0,195,0,11,0,0,0,0,0,230,0,0,0,0,0,0,0,126,0,36,0,213,0,249,0,148,0,122,0,187,0,44,0,109,0,0,0,0,0,84,0,0,0,0,0,65,0,249,0,247,0,125,0,240,0,63,0,110,0,227,0,124,0,48,0,0,0,197,0,25,0,0,0,129,0,50,0,117,0,240,0,0,0,0,0,0,0,67,0,177,0,73,0,227,0,221,0,17,0,80,0,0,0,125,0,0,0,232,0,199,0,148,0,26,0,0,0,0,0,0,0,221,0,235,0,57,0,0,0,87,0,147,0,0,0,0,0,47,0,95,0,112,0,189,0,0,0,135,0,119,0,107,0,79,0,115,0,29,0,218,0,0,0,69,0,246,0,0,0,216,0,13,0,140,0,123,0,0,0,193,0,171,0,149,0,235,0,184,0,32,0,22,0,97,0,162,0,96,0,42,0,0,0,2,0,0,0,122,0,154,0,0,0,205,0,145,0,118,0,0,0,0,0,140,0,142,0,0,0,28,0,19,0,130,0,195,0,0,0,0,0,233,0,33,0,173,0,188,0,104,0,100,0,18,0,0,0,4,0,179,0,54,0,13,0,208,0,157,0,62,0,0,0,0,0,0,0,200,0,141,0,93,0,213,0,83,0,214,0,45,0,185,0,171,0,229,0,248,0,141,0,230,0,0,0,0,0,163,0,80,0,76,0,0,0,0,0,27,0,82,0,0,0,98,0,41,0,235,0,96,0);
signal scenario_full  : scenario_type := (147,31,68,31,122,31,204,31,205,31,205,30,57,31,150,31,191,31,21,31,21,30,251,31,225,31,24,31,80,31,117,31,255,31,96,31,230,31,249,31,170,31,254,31,254,30,254,29,183,31,82,31,147,31,147,30,123,31,244,31,130,31,16,31,16,30,123,31,76,31,76,30,166,31,144,31,144,30,70,31,118,31,209,31,241,31,7,31,7,30,233,31,233,30,93,31,200,31,57,31,93,31,220,31,220,30,250,31,49,31,55,31,88,31,79,31,13,31,235,31,34,31,34,30,180,31,93,31,232,31,232,30,203,31,173,31,174,31,198,31,244,31,122,31,26,31,42,31,14,31,27,31,126,31,194,31,6,31,6,30,60,31,35,31,35,30,215,31,194,31,10,31,10,30,33,31,189,31,125,31,49,31,3,31,3,30,69,31,224,31,8,31,10,31,215,31,14,31,16,31,102,31,102,30,71,31,191,31,27,31,50,31,230,31,230,30,104,31,194,31,196,31,196,30,196,29,69,31,101,31,197,31,197,30,38,31,186,31,186,30,168,31,84,31,62,31,200,31,13,31,25,31,25,30,25,29,186,31,96,31,107,31,45,31,248,31,120,31,235,31,210,31,40,31,40,30,11,31,244,31,244,30,195,31,88,31,105,31,210,31,186,31,224,31,198,31,198,30,235,31,35,31,35,30,35,29,39,31,114,31,42,31,115,31,40,31,106,31,196,31,117,31,35,31,86,31,82,31,228,31,99,31,131,31,210,31,210,30,248,31,218,31,5,31,188,31,93,31,93,30,93,29,37,31,184,31,176,31,165,31,20,31,169,31,241,31,128,31,236,31,38,31,38,30,162,31,24,31,171,31,184,31,73,31,44,31,247,31,240,31,45,31,115,31,176,31,2,31,2,30,2,29,2,28,27,31,176,31,176,31,207,31,164,31,12,31,12,30,29,31,29,31,198,31,42,31,18,31,18,30,26,31,75,31,251,31,161,31,161,30,112,31,87,31,209,31,40,31,62,31,19,31,111,31,210,31,80,31,103,31,32,31,72,31,160,31,59,31,16,31,255,31,111,31,178,31,88,31,88,30,176,31,176,30,63,31,15,31,243,31,81,31,70,31,130,31,130,30,117,31,155,31,79,31,29,31,114,31,114,30,100,31,156,31,156,30,61,31,61,30,61,29,9,31,54,31,54,30,203,31,203,30,174,31,174,30,112,31,112,30,210,31,210,30,55,31,63,31,140,31,37,31,56,31,56,30,56,29,119,31,101,31,101,30,101,29,83,31,83,30,83,29,2,31,51,31,199,31,244,31,24,31,155,31,40,31,198,31,120,31,104,31,91,31,2,31,109,31,188,31,161,31,27,31,27,31,239,31,180,31,20,31,105,31,105,30,79,31,178,31,48,31,48,30,33,31,97,31,229,31,229,30,9,31,235,31,81,31,126,31,126,30,126,29,240,31,111,31,83,31,83,30,106,31,14,31,169,31,198,31,187,31,170,31,181,31,201,31,201,30,195,31,225,31,225,30,225,29,225,28,40,31,63,31,207,31,252,31,214,31,96,31,181,31,111,31,251,31,251,30,80,31,37,31,213,31,238,31,237,31,237,30,64,31,179,31,149,31,112,31,112,30,52,31,158,31,239,31,211,31,211,30,59,31,217,31,94,31,174,31,174,30,63,31,40,31,40,30,58,31,240,31,240,30,142,31,94,31,94,30,106,31,66,31,25,31,25,30,92,31,238,31,214,31,232,31,24,31,24,30,178,31,178,30,178,29,99,31,125,31,125,30,26,31,184,31,83,31,83,30,122,31,129,31,184,31,241,31,227,31,121,31,70,31,209,31,118,31,118,30,118,29,118,28,229,31,71,31,66,31,66,30,244,31,244,30,244,29,207,31,202,31,114,31,119,31,51,31,5,31,170,31,171,31,173,31,1,31,128,31,209,31,105,31,219,31,219,30,93,31,37,31,32,31,17,31,211,31,10,31,65,31,65,30,179,31,169,31,92,31,92,30,188,31,95,31,250,31,182,31,53,31,68,31,87,31,178,31,129,31,129,30,135,31,135,30,255,31,163,31,69,31,96,31,96,30,156,31,228,31,243,31,66,31,223,31,97,31,208,31,74,31,100,31,151,31,202,31,81,31,254,31,254,30,254,29,152,31,255,31,51,31,51,30,63,31,63,30,63,29,182,31,147,31,147,30,135,31,236,31,179,31,52,31,93,31,93,30,225,31,225,30,225,29,250,31,22,31,69,31,5,31,5,30,150,31,138,31,28,31,28,30,215,31,150,31,150,30,131,31,206,31,16,31,69,31,47,31,223,31,223,30,223,29,223,28,223,27,54,31,54,30,75,31,31,31,205,31,205,30,122,31,122,30,40,31,102,31,223,31,203,31,5,31,247,31,115,31,115,30,18,31,229,31,229,30,108,31,50,31,251,31,55,31,133,31,151,31,151,30,40,31,69,31,203,31,203,30,227,31,24,31,136,31,14,31,14,30,41,31,63,31,63,30,99,31,99,30,228,31,41,31,47,31,215,31,220,31,189,31,3,31,122,31,122,30,14,31,126,31,25,31,189,31,194,31,26,31,26,30,128,31,54,31,5,31,64,31,183,31,92,31,36,31,12,31,12,30,245,31,245,30,187,31,164,31,40,31,126,31,232,31,251,31,251,30,54,31,187,31,96,31,165,31,222,31,246,31,189,31,135,31,198,31,35,31,134,31,113,31,113,30,6,31,42,31,42,30,86,31,78,31,78,30,78,29,213,31,232,31,199,31,18,31,187,31,187,30,39,31,218,31,210,31,254,31,183,31,115,31,115,30,163,31,163,30,41,31,138,31,91,31,91,30,91,29,191,31,222,31,232,31,95,31,210,31,210,30,86,31,86,30,233,31,236,31,130,31,130,30,130,29,130,28,72,31,255,31,90,31,90,30,253,31,204,31,204,30,204,29,204,28,20,31,20,30,155,31,122,31,240,31,86,31,235,31,121,31,114,31,210,31,230,31,8,31,57,31,155,31,129,31,43,31,42,31,42,30,82,31,235,31,17,31,17,30,17,29,17,28,193,31,195,31,11,31,11,30,11,29,230,31,230,30,230,29,230,28,126,31,36,31,213,31,249,31,148,31,122,31,187,31,44,31,109,31,109,30,109,29,84,31,84,30,84,29,65,31,249,31,247,31,125,31,240,31,63,31,110,31,227,31,124,31,48,31,48,30,197,31,25,31,25,30,129,31,50,31,117,31,240,31,240,30,240,29,240,28,67,31,177,31,73,31,227,31,221,31,17,31,80,31,80,30,125,31,125,30,232,31,199,31,148,31,26,31,26,30,26,29,26,28,221,31,235,31,57,31,57,30,87,31,147,31,147,30,147,29,47,31,95,31,112,31,189,31,189,30,135,31,119,31,107,31,79,31,115,31,29,31,218,31,218,30,69,31,246,31,246,30,216,31,13,31,140,31,123,31,123,30,193,31,171,31,149,31,235,31,184,31,32,31,22,31,97,31,162,31,96,31,42,31,42,30,2,31,2,30,122,31,154,31,154,30,205,31,145,31,118,31,118,30,118,29,140,31,142,31,142,30,28,31,19,31,130,31,195,31,195,30,195,29,233,31,33,31,173,31,188,31,104,31,100,31,18,31,18,30,4,31,179,31,54,31,13,31,208,31,157,31,62,31,62,30,62,29,62,28,200,31,141,31,93,31,213,31,83,31,214,31,45,31,185,31,171,31,229,31,248,31,141,31,230,31,230,30,230,29,163,31,80,31,76,31,76,30,76,29,27,31,82,31,82,30,98,31,41,31,235,31,96,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
