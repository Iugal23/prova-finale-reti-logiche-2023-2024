-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 849;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (191,0,18,0,114,0,0,0,179,0,95,0,129,0,55,0,109,0,0,0,31,0,102,0,0,0,177,0,141,0,0,0,223,0,21,0,73,0,107,0,37,0,161,0,79,0,0,0,204,0,0,0,171,0,221,0,0,0,121,0,74,0,28,0,148,0,225,0,0,0,202,0,226,0,0,0,118,0,0,0,0,0,72,0,26,0,91,0,146,0,189,0,195,0,0,0,3,0,80,0,0,0,119,0,76,0,237,0,206,0,172,0,25,0,111,0,42,0,197,0,210,0,23,0,221,0,33,0,0,0,163,0,0,0,220,0,193,0,76,0,0,0,0,0,220,0,190,0,42,0,71,0,25,0,0,0,200,0,28,0,39,0,189,0,206,0,11,0,0,0,66,0,0,0,0,0,38,0,134,0,205,0,0,0,160,0,15,0,180,0,45,0,0,0,165,0,108,0,0,0,232,0,10,0,213,0,8,0,0,0,243,0,101,0,81,0,244,0,0,0,0,0,253,0,91,0,254,0,0,0,244,0,110,0,214,0,30,0,104,0,112,0,254,0,0,0,0,0,186,0,182,0,187,0,230,0,0,0,124,0,222,0,86,0,145,0,42,0,3,0,80,0,124,0,0,0,108,0,218,0,152,0,44,0,29,0,238,0,159,0,163,0,233,0,0,0,4,0,179,0,42,0,52,0,0,0,75,0,76,0,219,0,0,0,245,0,0,0,220,0,0,0,42,0,181,0,86,0,2,0,222,0,224,0,175,0,223,0,255,0,69,0,28,0,80,0,0,0,97,0,135,0,22,0,46,0,194,0,84,0,231,0,246,0,44,0,66,0,216,0,0,0,19,0,125,0,27,0,0,0,5,0,200,0,55,0,0,0,224,0,143,0,0,0,4,0,0,0,216,0,16,0,94,0,0,0,0,0,253,0,0,0,69,0,237,0,63,0,174,0,165,0,143,0,229,0,107,0,115,0,187,0,152,0,0,0,58,0,0,0,19,0,0,0,238,0,0,0,36,0,219,0,94,0,218,0,58,0,0,0,142,0,165,0,239,0,158,0,0,0,43,0,149,0,205,0,0,0,24,0,159,0,0,0,0,0,66,0,0,0,23,0,235,0,27,0,225,0,225,0,38,0,186,0,41,0,244,0,31,0,8,0,215,0,134,0,178,0,0,0,84,0,55,0,194,0,115,0,116,0,209,0,0,0,0,0,0,0,87,0,0,0,98,0,40,0,161,0,23,0,116,0,202,0,208,0,0,0,249,0,102,0,106,0,205,0,103,0,212,0,29,0,42,0,171,0,251,0,9,0,43,0,45,0,102,0,101,0,116,0,143,0,248,0,0,0,248,0,142,0,0,0,176,0,130,0,122,0,151,0,166,0,209,0,182,0,0,0,0,0,0,0,123,0,199,0,237,0,87,0,250,0,196,0,0,0,0,0,189,0,185,0,136,0,113,0,166,0,6,0,0,0,67,0,215,0,233,0,176,0,137,0,0,0,103,0,206,0,136,0,144,0,99,0,144,0,15,0,0,0,140,0,14,0,0,0,0,0,85,0,0,0,89,0,184,0,155,0,0,0,120,0,4,0,65,0,234,0,0,0,156,0,213,0,242,0,180,0,184,0,0,0,221,0,250,0,121,0,61,0,57,0,56,0,21,0,168,0,210,0,88,0,93,0,0,0,239,0,24,0,244,0,155,0,184,0,194,0,200,0,164,0,48,0,51,0,127,0,81,0,174,0,77,0,163,0,12,0,103,0,112,0,33,0,10,0,137,0,0,0,254,0,170,0,208,0,144,0,162,0,138,0,108,0,0,0,18,0,38,0,0,0,51,0,153,0,0,0,186,0,118,0,29,0,51,0,148,0,15,0,188,0,179,0,54,0,111,0,0,0,0,0,158,0,81,0,160,0,0,0,201,0,179,0,0,0,120,0,66,0,0,0,190,0,0,0,0,0,228,0,188,0,193,0,175,0,173,0,98,0,0,0,183,0,187,0,120,0,6,0,0,0,0,0,170,0,69,0,0,0,0,0,70,0,47,0,74,0,0,0,99,0,58,0,105,0,173,0,0,0,204,0,145,0,214,0,0,0,0,0,0,0,107,0,0,0,143,0,0,0,113,0,79,0,0,0,71,0,0,0,155,0,155,0,148,0,213,0,106,0,222,0,230,0,0,0,121,0,0,0,127,0,0,0,254,0,29,0,5,0,80,0,125,0,135,0,251,0,0,0,84,0,38,0,171,0,220,0,250,0,169,0,109,0,139,0,91,0,55,0,68,0,217,0,115,0,170,0,0,0,204,0,59,0,69,0,146,0,60,0,18,0,0,0,178,0,179,0,169,0,203,0,3,0,83,0,0,0,0,0,0,0,81,0,76,0,70,0,59,0,202,0,0,0,130,0,241,0,71,0,0,0,55,0,214,0,204,0,177,0,16,0,110,0,169,0,244,0,30,0,166,0,75,0,0,0,0,0,132,0,189,0,0,0,0,0,218,0,196,0,138,0,133,0,152,0,93,0,0,0,238,0,101,0,164,0,134,0,224,0,246,0,234,0,116,0,168,0,0,0,199,0,134,0,125,0,0,0,50,0,86,0,188,0,195,0,18,0,160,0,0,0,13,0,74,0,0,0,179,0,155,0,35,0,0,0,163,0,0,0,174,0,99,0,0,0,64,0,152,0,45,0,109,0,0,0,89,0,0,0,48,0,230,0,0,0,51,0,242,0,85,0,161,0,193,0,24,0,105,0,0,0,129,0,16,0,125,0,203,0,248,0,249,0,233,0,0,0,0,0,137,0,144,0,187,0,110,0,51,0,215,0,0,0,38,0,107,0,0,0,74,0,0,0,0,0,55,0,62,0,0,0,181,0,166,0,166,0,192,0,241,0,0,0,94,0,106,0,173,0,210,0,12,0,0,0,81,0,0,0,250,0,0,0,178,0,52,0,158,0,31,0,0,0,0,0,219,0,199,0,95,0,105,0,237,0,0,0,80,0,0,0,243,0,231,0,181,0,72,0,0,0,12,0,116,0,105,0,53,0,190,0,0,0,55,0,182,0,10,0,78,0,94,0,0,0,223,0,115,0,228,0,163,0,124,0,255,0,252,0,118,0,0,0,52,0,139,0,180,0,0,0,175,0,246,0,135,0,0,0,69,0,182,0,0,0,38,0,48,0,0,0,92,0,91,0,179,0,33,0,245,0,38,0,160,0,0,0,150,0,0,0,0,0,0,0,224,0,109,0,52,0,61,0,111,0,103,0,1,0,42,0,0,0,164,0,104,0,201,0,193,0,164,0,131,0,83,0,161,0,0,0,250,0,105,0,124,0,15,0,18,0,249,0,26,0,201,0,200,0,0,0,216,0,128,0,0,0,254,0,163,0,121,0,34,0,36,0,224,0,0,0,0,0,3,0,0,0,93,0,184,0,123,0,221,0,204,0,168,0,219,0,57,0,134,0,0,0,79,0,73,0,237,0,231,0,18,0,98,0,96,0,0,0,0,0,36,0,0,0,224,0,110,0,0,0,208,0,222,0,0,0,0,0,151,0,171,0,56,0,153,0,33,0,238,0,57,0,32,0,218,0,35,0,241,0,0,0,25,0,110,0,0,0,150,0,75,0,70,0,165,0,88,0,8,0,104,0,153,0,253,0,70,0,239,0,0,0,28,0,149,0,6,0,221,0,220,0,63,0,30,0,90,0,11,0,19,0,101,0,28,0,251,0,0,0,190,0,104,0,111,0,116,0,18,0,169,0,77,0,104,0,0,0,166,0,24,0,0,0,105,0,237,0,99,0,229,0,50,0,136,0,218,0,235,0,0,0);
signal scenario_full  : scenario_type := (191,31,18,31,114,31,114,30,179,31,95,31,129,31,55,31,109,31,109,30,31,31,102,31,102,30,177,31,141,31,141,30,223,31,21,31,73,31,107,31,37,31,161,31,79,31,79,30,204,31,204,30,171,31,221,31,221,30,121,31,74,31,28,31,148,31,225,31,225,30,202,31,226,31,226,30,118,31,118,30,118,29,72,31,26,31,91,31,146,31,189,31,195,31,195,30,3,31,80,31,80,30,119,31,76,31,237,31,206,31,172,31,25,31,111,31,42,31,197,31,210,31,23,31,221,31,33,31,33,30,163,31,163,30,220,31,193,31,76,31,76,30,76,29,220,31,190,31,42,31,71,31,25,31,25,30,200,31,28,31,39,31,189,31,206,31,11,31,11,30,66,31,66,30,66,29,38,31,134,31,205,31,205,30,160,31,15,31,180,31,45,31,45,30,165,31,108,31,108,30,232,31,10,31,213,31,8,31,8,30,243,31,101,31,81,31,244,31,244,30,244,29,253,31,91,31,254,31,254,30,244,31,110,31,214,31,30,31,104,31,112,31,254,31,254,30,254,29,186,31,182,31,187,31,230,31,230,30,124,31,222,31,86,31,145,31,42,31,3,31,80,31,124,31,124,30,108,31,218,31,152,31,44,31,29,31,238,31,159,31,163,31,233,31,233,30,4,31,179,31,42,31,52,31,52,30,75,31,76,31,219,31,219,30,245,31,245,30,220,31,220,30,42,31,181,31,86,31,2,31,222,31,224,31,175,31,223,31,255,31,69,31,28,31,80,31,80,30,97,31,135,31,22,31,46,31,194,31,84,31,231,31,246,31,44,31,66,31,216,31,216,30,19,31,125,31,27,31,27,30,5,31,200,31,55,31,55,30,224,31,143,31,143,30,4,31,4,30,216,31,16,31,94,31,94,30,94,29,253,31,253,30,69,31,237,31,63,31,174,31,165,31,143,31,229,31,107,31,115,31,187,31,152,31,152,30,58,31,58,30,19,31,19,30,238,31,238,30,36,31,219,31,94,31,218,31,58,31,58,30,142,31,165,31,239,31,158,31,158,30,43,31,149,31,205,31,205,30,24,31,159,31,159,30,159,29,66,31,66,30,23,31,235,31,27,31,225,31,225,31,38,31,186,31,41,31,244,31,31,31,8,31,215,31,134,31,178,31,178,30,84,31,55,31,194,31,115,31,116,31,209,31,209,30,209,29,209,28,87,31,87,30,98,31,40,31,161,31,23,31,116,31,202,31,208,31,208,30,249,31,102,31,106,31,205,31,103,31,212,31,29,31,42,31,171,31,251,31,9,31,43,31,45,31,102,31,101,31,116,31,143,31,248,31,248,30,248,31,142,31,142,30,176,31,130,31,122,31,151,31,166,31,209,31,182,31,182,30,182,29,182,28,123,31,199,31,237,31,87,31,250,31,196,31,196,30,196,29,189,31,185,31,136,31,113,31,166,31,6,31,6,30,67,31,215,31,233,31,176,31,137,31,137,30,103,31,206,31,136,31,144,31,99,31,144,31,15,31,15,30,140,31,14,31,14,30,14,29,85,31,85,30,89,31,184,31,155,31,155,30,120,31,4,31,65,31,234,31,234,30,156,31,213,31,242,31,180,31,184,31,184,30,221,31,250,31,121,31,61,31,57,31,56,31,21,31,168,31,210,31,88,31,93,31,93,30,239,31,24,31,244,31,155,31,184,31,194,31,200,31,164,31,48,31,51,31,127,31,81,31,174,31,77,31,163,31,12,31,103,31,112,31,33,31,10,31,137,31,137,30,254,31,170,31,208,31,144,31,162,31,138,31,108,31,108,30,18,31,38,31,38,30,51,31,153,31,153,30,186,31,118,31,29,31,51,31,148,31,15,31,188,31,179,31,54,31,111,31,111,30,111,29,158,31,81,31,160,31,160,30,201,31,179,31,179,30,120,31,66,31,66,30,190,31,190,30,190,29,228,31,188,31,193,31,175,31,173,31,98,31,98,30,183,31,187,31,120,31,6,31,6,30,6,29,170,31,69,31,69,30,69,29,70,31,47,31,74,31,74,30,99,31,58,31,105,31,173,31,173,30,204,31,145,31,214,31,214,30,214,29,214,28,107,31,107,30,143,31,143,30,113,31,79,31,79,30,71,31,71,30,155,31,155,31,148,31,213,31,106,31,222,31,230,31,230,30,121,31,121,30,127,31,127,30,254,31,29,31,5,31,80,31,125,31,135,31,251,31,251,30,84,31,38,31,171,31,220,31,250,31,169,31,109,31,139,31,91,31,55,31,68,31,217,31,115,31,170,31,170,30,204,31,59,31,69,31,146,31,60,31,18,31,18,30,178,31,179,31,169,31,203,31,3,31,83,31,83,30,83,29,83,28,81,31,76,31,70,31,59,31,202,31,202,30,130,31,241,31,71,31,71,30,55,31,214,31,204,31,177,31,16,31,110,31,169,31,244,31,30,31,166,31,75,31,75,30,75,29,132,31,189,31,189,30,189,29,218,31,196,31,138,31,133,31,152,31,93,31,93,30,238,31,101,31,164,31,134,31,224,31,246,31,234,31,116,31,168,31,168,30,199,31,134,31,125,31,125,30,50,31,86,31,188,31,195,31,18,31,160,31,160,30,13,31,74,31,74,30,179,31,155,31,35,31,35,30,163,31,163,30,174,31,99,31,99,30,64,31,152,31,45,31,109,31,109,30,89,31,89,30,48,31,230,31,230,30,51,31,242,31,85,31,161,31,193,31,24,31,105,31,105,30,129,31,16,31,125,31,203,31,248,31,249,31,233,31,233,30,233,29,137,31,144,31,187,31,110,31,51,31,215,31,215,30,38,31,107,31,107,30,74,31,74,30,74,29,55,31,62,31,62,30,181,31,166,31,166,31,192,31,241,31,241,30,94,31,106,31,173,31,210,31,12,31,12,30,81,31,81,30,250,31,250,30,178,31,52,31,158,31,31,31,31,30,31,29,219,31,199,31,95,31,105,31,237,31,237,30,80,31,80,30,243,31,231,31,181,31,72,31,72,30,12,31,116,31,105,31,53,31,190,31,190,30,55,31,182,31,10,31,78,31,94,31,94,30,223,31,115,31,228,31,163,31,124,31,255,31,252,31,118,31,118,30,52,31,139,31,180,31,180,30,175,31,246,31,135,31,135,30,69,31,182,31,182,30,38,31,48,31,48,30,92,31,91,31,179,31,33,31,245,31,38,31,160,31,160,30,150,31,150,30,150,29,150,28,224,31,109,31,52,31,61,31,111,31,103,31,1,31,42,31,42,30,164,31,104,31,201,31,193,31,164,31,131,31,83,31,161,31,161,30,250,31,105,31,124,31,15,31,18,31,249,31,26,31,201,31,200,31,200,30,216,31,128,31,128,30,254,31,163,31,121,31,34,31,36,31,224,31,224,30,224,29,3,31,3,30,93,31,184,31,123,31,221,31,204,31,168,31,219,31,57,31,134,31,134,30,79,31,73,31,237,31,231,31,18,31,98,31,96,31,96,30,96,29,36,31,36,30,224,31,110,31,110,30,208,31,222,31,222,30,222,29,151,31,171,31,56,31,153,31,33,31,238,31,57,31,32,31,218,31,35,31,241,31,241,30,25,31,110,31,110,30,150,31,75,31,70,31,165,31,88,31,8,31,104,31,153,31,253,31,70,31,239,31,239,30,28,31,149,31,6,31,221,31,220,31,63,31,30,31,90,31,11,31,19,31,101,31,28,31,251,31,251,30,190,31,104,31,111,31,116,31,18,31,169,31,77,31,104,31,104,30,166,31,24,31,24,30,105,31,237,31,99,31,229,31,50,31,136,31,218,31,235,31,235,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
