-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 848;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (63,0,21,0,46,0,198,0,0,0,0,0,58,0,50,0,255,0,129,0,97,0,4,0,0,0,148,0,49,0,195,0,122,0,80,0,174,0,200,0,106,0,0,0,160,0,0,0,0,0,186,0,0,0,147,0,241,0,137,0,0,0,112,0,0,0,236,0,208,0,162,0,0,0,244,0,42,0,113,0,58,0,201,0,31,0,149,0,127,0,158,0,0,0,0,0,0,0,146,0,0,0,134,0,0,0,246,0,121,0,0,0,179,0,235,0,172,0,22,0,89,0,151,0,116,0,7,0,99,0,120,0,254,0,183,0,186,0,173,0,184,0,0,0,195,0,0,0,153,0,195,0,150,0,0,0,9,0,102,0,176,0,0,0,111,0,4,0,117,0,252,0,133,0,155,0,240,0,0,0,0,0,71,0,152,0,131,0,98,0,133,0,16,0,192,0,127,0,236,0,0,0,167,0,46,0,0,0,251,0,94,0,134,0,116,0,148,0,125,0,0,0,8,0,0,0,214,0,46,0,0,0,245,0,0,0,156,0,191,0,187,0,229,0,0,0,131,0,42,0,169,0,0,0,24,0,160,0,0,0,44,0,193,0,2,0,0,0,123,0,0,0,0,0,172,0,0,0,117,0,0,0,207,0,101,0,188,0,0,0,206,0,121,0,0,0,109,0,126,0,30,0,30,0,0,0,179,0,219,0,62,0,147,0,179,0,194,0,234,0,239,0,230,0,24,0,52,0,156,0,5,0,0,0,197,0,164,0,244,0,118,0,90,0,99,0,34,0,148,0,69,0,63,0,0,0,167,0,0,0,35,0,0,0,134,0,18,0,188,0,248,0,0,0,219,0,112,0,163,0,79,0,50,0,36,0,2,0,132,0,134,0,249,0,208,0,161,0,1,0,161,0,12,0,220,0,17,0,180,0,224,0,70,0,162,0,0,0,42,0,0,0,208,0,167,0,166,0,0,0,35,0,0,0,237,0,229,0,57,0,107,0,0,0,104,0,158,0,202,0,83,0,235,0,0,0,128,0,234,0,142,0,199,0,249,0,105,0,0,0,152,0,96,0,130,0,238,0,96,0,69,0,0,0,31,0,53,0,60,0,226,0,21,0,0,0,88,0,92,0,0,0,37,0,0,0,97,0,91,0,79,0,143,0,0,0,156,0,95,0,151,0,86,0,180,0,172,0,218,0,28,0,238,0,172,0,42,0,98,0,62,0,51,0,206,0,183,0,216,0,237,0,0,0,208,0,225,0,159,0,54,0,0,0,14,0,0,0,151,0,196,0,206,0,44,0,160,0,69,0,0,0,38,0,174,0,90,0,170,0,118,0,0,0,0,0,171,0,0,0,149,0,117,0,146,0,0,0,0,0,168,0,16,0,13,0,37,0,0,0,41,0,79,0,29,0,159,0,14,0,209,0,113,0,0,0,245,0,135,0,67,0,123,0,0,0,52,0,123,0,234,0,61,0,0,0,63,0,35,0,165,0,246,0,141,0,0,0,231,0,146,0,101,0,0,0,63,0,0,0,0,0,208,0,209,0,0,0,0,0,0,0,188,0,177,0,165,0,189,0,182,0,223,0,0,0,19,0,91,0,158,0,136,0,49,0,112,0,60,0,0,0,209,0,32,0,0,0,103,0,0,0,254,0,83,0,13,0,0,0,0,0,89,0,232,0,206,0,110,0,238,0,0,0,30,0,35,0,225,0,225,0,244,0,0,0,0,0,79,0,130,0,4,0,0,0,0,0,195,0,51,0,252,0,0,0,60,0,150,0,160,0,38,0,0,0,8,0,145,0,124,0,0,0,12,0,166,0,8,0,237,0,219,0,170,0,0,0,132,0,150,0,225,0,164,0,0,0,148,0,34,0,69,0,131,0,67,0,121,0,88,0,121,0,85,0,245,0,234,0,112,0,156,0,0,0,219,0,113,0,0,0,196,0,0,0,186,0,0,0,138,0,236,0,172,0,227,0,53,0,132,0,204,0,0,0,255,0,0,0,87,0,118,0,231,0,76,0,48,0,180,0,79,0,57,0,179,0,176,0,0,0,253,0,191,0,0,0,197,0,11,0,129,0,10,0,254,0,110,0,46,0,0,0,0,0,122,0,212,0,0,0,124,0,81,0,0,0,96,0,0,0,158,0,139,0,95,0,105,0,137,0,5,0,129,0,128,0,0,0,24,0,193,0,73,0,211,0,80,0,0,0,190,0,0,0,224,0,156,0,0,0,0,0,129,0,171,0,0,0,10,0,182,0,0,0,115,0,0,0,0,0,12,0,247,0,0,0,72,0,0,0,0,0,201,0,1,0,141,0,177,0,131,0,86,0,0,0,0,0,239,0,153,0,0,0,195,0,207,0,175,0,199,0,87,0,0,0,131,0,4,0,197,0,0,0,0,0,0,0,37,0,193,0,248,0,0,0,0,0,181,0,199,0,0,0,41,0,0,0,161,0,0,0,78,0,0,0,62,0,168,0,111,0,131,0,0,0,118,0,15,0,192,0,72,0,140,0,144,0,89,0,173,0,73,0,208,0,0,0,159,0,106,0,179,0,0,0,0,0,88,0,20,0,238,0,235,0,42,0,154,0,252,0,247,0,0,0,85,0,106,0,188,0,144,0,199,0,75,0,49,0,6,0,253,0,78,0,57,0,76,0,48,0,45,0,95,0,0,0,238,0,0,0,59,0,219,0,101,0,211,0,102,0,0,0,94,0,96,0,0,0,158,0,109,0,0,0,38,0,254,0,9,0,72,0,162,0,202,0,0,0,171,0,41,0,66,0,159,0,172,0,252,0,87,0,125,0,190,0,174,0,149,0,0,0,33,0,13,0,25,0,54,0,206,0,16,0,2,0,3,0,135,0,55,0,203,0,38,0,240,0,0,0,0,0,70,0,162,0,94,0,206,0,2,0,220,0,174,0,109,0,0,0,0,0,0,0,151,0,104,0,16,0,206,0,120,0,3,0,159,0,255,0,174,0,28,0,254,0,218,0,133,0,225,0,0,0,2,0,39,0,29,0,0,0,177,0,233,0,24,0,169,0,41,0,167,0,30,0,220,0,0,0,210,0,0,0,0,0,209,0,0,0,1,0,34,0,94,0,0,0,113,0,9,0,250,0,0,0,191,0,88,0,200,0,201,0,30,0,150,0,244,0,145,0,28,0,105,0,59,0,153,0,0,0,61,0,89,0,107,0,210,0,0,0,192,0,109,0,0,0,111,0,26,0,0,0,232,0,0,0,174,0,108,0,51,0,182,0,25,0,117,0,47,0,134,0,57,0,236,0,139,0,93,0,225,0,50,0,206,0,10,0,191,0,87,0,0,0,0,0,190,0,39,0,226,0,138,0,32,0,0,0,50,0,98,0,0,0,58,0,157,0,185,0,2,0,0,0,0,0,102,0,177,0,140,0,26,0,148,0,2,0,79,0,251,0,0,0,0,0,54,0,8,0,152,0,227,0,0,0,0,0,0,0,36,0,165,0,84,0,96,0,0,0,208,0,1,0,133,0,44,0,150,0,0,0,0,0,0,0,229,0,131,0,8,0,0,0,23,0,41,0,184,0,221,0,223,0,75,0,153,0,21,0,206,0,45,0,178,0,194,0,213,0,227,0,0,0,250,0,0,0,254,0,206,0,130,0,0,0,54,0,102,0,27,0,148,0,0,0,174,0,0,0,114,0,0,0,0,0,95,0,38,0,73,0,206,0,176,0,160,0,91,0,69,0,146,0,87,0,148,0,201,0,207,0,87,0,243,0,165,0,216,0,148,0,0,0,33,0,103,0,237,0,0,0,226,0,0,0,254,0,103,0);
signal scenario_full  : scenario_type := (63,31,21,31,46,31,198,31,198,30,198,29,58,31,50,31,255,31,129,31,97,31,4,31,4,30,148,31,49,31,195,31,122,31,80,31,174,31,200,31,106,31,106,30,160,31,160,30,160,29,186,31,186,30,147,31,241,31,137,31,137,30,112,31,112,30,236,31,208,31,162,31,162,30,244,31,42,31,113,31,58,31,201,31,31,31,149,31,127,31,158,31,158,30,158,29,158,28,146,31,146,30,134,31,134,30,246,31,121,31,121,30,179,31,235,31,172,31,22,31,89,31,151,31,116,31,7,31,99,31,120,31,254,31,183,31,186,31,173,31,184,31,184,30,195,31,195,30,153,31,195,31,150,31,150,30,9,31,102,31,176,31,176,30,111,31,4,31,117,31,252,31,133,31,155,31,240,31,240,30,240,29,71,31,152,31,131,31,98,31,133,31,16,31,192,31,127,31,236,31,236,30,167,31,46,31,46,30,251,31,94,31,134,31,116,31,148,31,125,31,125,30,8,31,8,30,214,31,46,31,46,30,245,31,245,30,156,31,191,31,187,31,229,31,229,30,131,31,42,31,169,31,169,30,24,31,160,31,160,30,44,31,193,31,2,31,2,30,123,31,123,30,123,29,172,31,172,30,117,31,117,30,207,31,101,31,188,31,188,30,206,31,121,31,121,30,109,31,126,31,30,31,30,31,30,30,179,31,219,31,62,31,147,31,179,31,194,31,234,31,239,31,230,31,24,31,52,31,156,31,5,31,5,30,197,31,164,31,244,31,118,31,90,31,99,31,34,31,148,31,69,31,63,31,63,30,167,31,167,30,35,31,35,30,134,31,18,31,188,31,248,31,248,30,219,31,112,31,163,31,79,31,50,31,36,31,2,31,132,31,134,31,249,31,208,31,161,31,1,31,161,31,12,31,220,31,17,31,180,31,224,31,70,31,162,31,162,30,42,31,42,30,208,31,167,31,166,31,166,30,35,31,35,30,237,31,229,31,57,31,107,31,107,30,104,31,158,31,202,31,83,31,235,31,235,30,128,31,234,31,142,31,199,31,249,31,105,31,105,30,152,31,96,31,130,31,238,31,96,31,69,31,69,30,31,31,53,31,60,31,226,31,21,31,21,30,88,31,92,31,92,30,37,31,37,30,97,31,91,31,79,31,143,31,143,30,156,31,95,31,151,31,86,31,180,31,172,31,218,31,28,31,238,31,172,31,42,31,98,31,62,31,51,31,206,31,183,31,216,31,237,31,237,30,208,31,225,31,159,31,54,31,54,30,14,31,14,30,151,31,196,31,206,31,44,31,160,31,69,31,69,30,38,31,174,31,90,31,170,31,118,31,118,30,118,29,171,31,171,30,149,31,117,31,146,31,146,30,146,29,168,31,16,31,13,31,37,31,37,30,41,31,79,31,29,31,159,31,14,31,209,31,113,31,113,30,245,31,135,31,67,31,123,31,123,30,52,31,123,31,234,31,61,31,61,30,63,31,35,31,165,31,246,31,141,31,141,30,231,31,146,31,101,31,101,30,63,31,63,30,63,29,208,31,209,31,209,30,209,29,209,28,188,31,177,31,165,31,189,31,182,31,223,31,223,30,19,31,91,31,158,31,136,31,49,31,112,31,60,31,60,30,209,31,32,31,32,30,103,31,103,30,254,31,83,31,13,31,13,30,13,29,89,31,232,31,206,31,110,31,238,31,238,30,30,31,35,31,225,31,225,31,244,31,244,30,244,29,79,31,130,31,4,31,4,30,4,29,195,31,51,31,252,31,252,30,60,31,150,31,160,31,38,31,38,30,8,31,145,31,124,31,124,30,12,31,166,31,8,31,237,31,219,31,170,31,170,30,132,31,150,31,225,31,164,31,164,30,148,31,34,31,69,31,131,31,67,31,121,31,88,31,121,31,85,31,245,31,234,31,112,31,156,31,156,30,219,31,113,31,113,30,196,31,196,30,186,31,186,30,138,31,236,31,172,31,227,31,53,31,132,31,204,31,204,30,255,31,255,30,87,31,118,31,231,31,76,31,48,31,180,31,79,31,57,31,179,31,176,31,176,30,253,31,191,31,191,30,197,31,11,31,129,31,10,31,254,31,110,31,46,31,46,30,46,29,122,31,212,31,212,30,124,31,81,31,81,30,96,31,96,30,158,31,139,31,95,31,105,31,137,31,5,31,129,31,128,31,128,30,24,31,193,31,73,31,211,31,80,31,80,30,190,31,190,30,224,31,156,31,156,30,156,29,129,31,171,31,171,30,10,31,182,31,182,30,115,31,115,30,115,29,12,31,247,31,247,30,72,31,72,30,72,29,201,31,1,31,141,31,177,31,131,31,86,31,86,30,86,29,239,31,153,31,153,30,195,31,207,31,175,31,199,31,87,31,87,30,131,31,4,31,197,31,197,30,197,29,197,28,37,31,193,31,248,31,248,30,248,29,181,31,199,31,199,30,41,31,41,30,161,31,161,30,78,31,78,30,62,31,168,31,111,31,131,31,131,30,118,31,15,31,192,31,72,31,140,31,144,31,89,31,173,31,73,31,208,31,208,30,159,31,106,31,179,31,179,30,179,29,88,31,20,31,238,31,235,31,42,31,154,31,252,31,247,31,247,30,85,31,106,31,188,31,144,31,199,31,75,31,49,31,6,31,253,31,78,31,57,31,76,31,48,31,45,31,95,31,95,30,238,31,238,30,59,31,219,31,101,31,211,31,102,31,102,30,94,31,96,31,96,30,158,31,109,31,109,30,38,31,254,31,9,31,72,31,162,31,202,31,202,30,171,31,41,31,66,31,159,31,172,31,252,31,87,31,125,31,190,31,174,31,149,31,149,30,33,31,13,31,25,31,54,31,206,31,16,31,2,31,3,31,135,31,55,31,203,31,38,31,240,31,240,30,240,29,70,31,162,31,94,31,206,31,2,31,220,31,174,31,109,31,109,30,109,29,109,28,151,31,104,31,16,31,206,31,120,31,3,31,159,31,255,31,174,31,28,31,254,31,218,31,133,31,225,31,225,30,2,31,39,31,29,31,29,30,177,31,233,31,24,31,169,31,41,31,167,31,30,31,220,31,220,30,210,31,210,30,210,29,209,31,209,30,1,31,34,31,94,31,94,30,113,31,9,31,250,31,250,30,191,31,88,31,200,31,201,31,30,31,150,31,244,31,145,31,28,31,105,31,59,31,153,31,153,30,61,31,89,31,107,31,210,31,210,30,192,31,109,31,109,30,111,31,26,31,26,30,232,31,232,30,174,31,108,31,51,31,182,31,25,31,117,31,47,31,134,31,57,31,236,31,139,31,93,31,225,31,50,31,206,31,10,31,191,31,87,31,87,30,87,29,190,31,39,31,226,31,138,31,32,31,32,30,50,31,98,31,98,30,58,31,157,31,185,31,2,31,2,30,2,29,102,31,177,31,140,31,26,31,148,31,2,31,79,31,251,31,251,30,251,29,54,31,8,31,152,31,227,31,227,30,227,29,227,28,36,31,165,31,84,31,96,31,96,30,208,31,1,31,133,31,44,31,150,31,150,30,150,29,150,28,229,31,131,31,8,31,8,30,23,31,41,31,184,31,221,31,223,31,75,31,153,31,21,31,206,31,45,31,178,31,194,31,213,31,227,31,227,30,250,31,250,30,254,31,206,31,130,31,130,30,54,31,102,31,27,31,148,31,148,30,174,31,174,30,114,31,114,30,114,29,95,31,38,31,73,31,206,31,176,31,160,31,91,31,69,31,146,31,87,31,148,31,201,31,207,31,87,31,243,31,165,31,216,31,148,31,148,30,33,31,103,31,237,31,237,30,226,31,226,30,254,31,103,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
