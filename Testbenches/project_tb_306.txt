-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 329;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (68,0,144,0,138,0,226,0,0,0,166,0,0,0,146,0,0,0,132,0,0,0,108,0,212,0,192,0,0,0,206,0,128,0,35,0,0,0,1,0,176,0,231,0,237,0,157,0,107,0,176,0,226,0,0,0,0,0,0,0,0,0,0,0,21,0,162,0,162,0,149,0,156,0,56,0,6,0,0,0,219,0,183,0,0,0,219,0,199,0,168,0,95,0,69,0,39,0,103,0,0,0,9,0,150,0,9,0,102,0,58,0,175,0,0,0,125,0,243,0,38,0,106,0,138,0,47,0,146,0,36,0,0,0,0,0,4,0,0,0,221,0,58,0,88,0,201,0,247,0,133,0,0,0,193,0,38,0,0,0,100,0,180,0,191,0,234,0,63,0,46,0,208,0,171,0,64,0,53,0,66,0,0,0,0,0,25,0,57,0,49,0,96,0,182,0,164,0,0,0,42,0,16,0,29,0,0,0,167,0,95,0,189,0,127,0,211,0,210,0,9,0,2,0,79,0,34,0,196,0,169,0,3,0,133,0,48,0,137,0,10,0,222,0,151,0,131,0,191,0,201,0,227,0,66,0,174,0,47,0,223,0,0,0,180,0,241,0,72,0,0,0,48,0,75,0,0,0,0,0,248,0,0,0,143,0,121,0,16,0,62,0,47,0,204,0,72,0,246,0,183,0,186,0,0,0,226,0,0,0,0,0,0,0,78,0,20,0,9,0,72,0,60,0,243,0,93,0,44,0,216,0,0,0,0,0,104,0,163,0,67,0,59,0,0,0,204,0,93,0,52,0,124,0,227,0,5,0,114,0,25,0,188,0,203,0,0,0,0,0,226,0,231,0,48,0,93,0,211,0,5,0,138,0,13,0,188,0,180,0,0,0,187,0,97,0,58,0,104,0,5,0,73,0,216,0,44,0,0,0,67,0,83,0,245,0,60,0,0,0,133,0,221,0,204,0,57,0,213,0,5,0,206,0,47,0,0,0,131,0,164,0,55,0,224,0,82,0,223,0,135,0,115,0,126,0,17,0,98,0,47,0,0,0,241,0,145,0,0,0,150,0,0,0,156,0,67,0,170,0,235,0,95,0,160,0,0,0,0,0,56,0,3,0,28,0,39,0,223,0,68,0,103,0,0,0,85,0,96,0,68,0,227,0,13,0,120,0,207,0,187,0,60,0,0,0,201,0,242,0,240,0,9,0,47,0,14,0,239,0,35,0,0,0,0,0,188,0,40,0,33,0,73,0,15,0,164,0,98,0,203,0,170,0,163,0,3,0,28,0,88,0,15,0,82,0,156,0,122,0,118,0,242,0,32,0,180,0,166,0,212,0,0,0,25,0,184,0,0,0,239,0,153,0,106,0,205,0,78,0,51,0,0,0,31,0,251,0,0,0,104,0,226,0,0,0,34,0,218,0,39,0,211,0,0,0,194,0,35,0,24,0,136,0,184,0,99,0,4,0,74,0,62,0,0,0,112,0);
signal scenario_full  : scenario_type := (68,31,144,31,138,31,226,31,226,30,166,31,166,30,146,31,146,30,132,31,132,30,108,31,212,31,192,31,192,30,206,31,128,31,35,31,35,30,1,31,176,31,231,31,237,31,157,31,107,31,176,31,226,31,226,30,226,29,226,28,226,27,226,26,21,31,162,31,162,31,149,31,156,31,56,31,6,31,6,30,219,31,183,31,183,30,219,31,199,31,168,31,95,31,69,31,39,31,103,31,103,30,9,31,150,31,9,31,102,31,58,31,175,31,175,30,125,31,243,31,38,31,106,31,138,31,47,31,146,31,36,31,36,30,36,29,4,31,4,30,221,31,58,31,88,31,201,31,247,31,133,31,133,30,193,31,38,31,38,30,100,31,180,31,191,31,234,31,63,31,46,31,208,31,171,31,64,31,53,31,66,31,66,30,66,29,25,31,57,31,49,31,96,31,182,31,164,31,164,30,42,31,16,31,29,31,29,30,167,31,95,31,189,31,127,31,211,31,210,31,9,31,2,31,79,31,34,31,196,31,169,31,3,31,133,31,48,31,137,31,10,31,222,31,151,31,131,31,191,31,201,31,227,31,66,31,174,31,47,31,223,31,223,30,180,31,241,31,72,31,72,30,48,31,75,31,75,30,75,29,248,31,248,30,143,31,121,31,16,31,62,31,47,31,204,31,72,31,246,31,183,31,186,31,186,30,226,31,226,30,226,29,226,28,78,31,20,31,9,31,72,31,60,31,243,31,93,31,44,31,216,31,216,30,216,29,104,31,163,31,67,31,59,31,59,30,204,31,93,31,52,31,124,31,227,31,5,31,114,31,25,31,188,31,203,31,203,30,203,29,226,31,231,31,48,31,93,31,211,31,5,31,138,31,13,31,188,31,180,31,180,30,187,31,97,31,58,31,104,31,5,31,73,31,216,31,44,31,44,30,67,31,83,31,245,31,60,31,60,30,133,31,221,31,204,31,57,31,213,31,5,31,206,31,47,31,47,30,131,31,164,31,55,31,224,31,82,31,223,31,135,31,115,31,126,31,17,31,98,31,47,31,47,30,241,31,145,31,145,30,150,31,150,30,156,31,67,31,170,31,235,31,95,31,160,31,160,30,160,29,56,31,3,31,28,31,39,31,223,31,68,31,103,31,103,30,85,31,96,31,68,31,227,31,13,31,120,31,207,31,187,31,60,31,60,30,201,31,242,31,240,31,9,31,47,31,14,31,239,31,35,31,35,30,35,29,188,31,40,31,33,31,73,31,15,31,164,31,98,31,203,31,170,31,163,31,3,31,28,31,88,31,15,31,82,31,156,31,122,31,118,31,242,31,32,31,180,31,166,31,212,31,212,30,25,31,184,31,184,30,239,31,153,31,106,31,205,31,78,31,51,31,51,30,31,31,251,31,251,30,104,31,226,31,226,30,34,31,218,31,39,31,211,31,211,30,194,31,35,31,24,31,136,31,184,31,99,31,4,31,74,31,62,31,62,30,112,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
