-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 348;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (43,0,134,0,100,0,35,0,30,0,92,0,99,0,0,0,244,0,0,0,154,0,217,0,102,0,0,0,41,0,255,0,45,0,147,0,98,0,204,0,0,0,114,0,0,0,233,0,209,0,127,0,155,0,33,0,157,0,228,0,194,0,249,0,142,0,11,0,54,0,218,0,10,0,169,0,0,0,40,0,7,0,150,0,228,0,51,0,5,0,35,0,189,0,0,0,0,0,118,0,0,0,0,0,135,0,133,0,109,0,231,0,108,0,12,0,0,0,148,0,179,0,4,0,32,0,103,0,245,0,57,0,241,0,237,0,143,0,220,0,47,0,0,0,80,0,79,0,0,0,189,0,140,0,217,0,3,0,254,0,16,0,207,0,135,0,25,0,49,0,70,0,171,0,47,0,125,0,0,0,104,0,197,0,155,0,165,0,41,0,0,0,129,0,234,0,243,0,0,0,26,0,149,0,36,0,0,0,202,0,161,0,63,0,0,0,89,0,102,0,76,0,122,0,227,0,246,0,225,0,0,0,0,0,245,0,178,0,205,0,115,0,117,0,227,0,17,0,56,0,246,0,0,0,0,0,0,0,248,0,0,0,113,0,150,0,0,0,214,0,120,0,132,0,188,0,0,0,246,0,58,0,165,0,102,0,0,0,0,0,207,0,0,0,52,0,109,0,251,0,140,0,172,0,248,0,57,0,113,0,240,0,135,0,252,0,163,0,0,0,70,0,8,0,0,0,40,0,103,0,55,0,69,0,137,0,45,0,40,0,168,0,254,0,0,0,0,0,77,0,80,0,22,0,56,0,168,0,210,0,140,0,208,0,0,0,161,0,0,0,107,0,149,0,149,0,113,0,74,0,203,0,88,0,14,0,10,0,209,0,217,0,255,0,204,0,214,0,254,0,52,0,0,0,0,0,0,0,71,0,185,0,0,0,94,0,163,0,83,0,75,0,179,0,154,0,47,0,82,0,193,0,148,0,83,0,111,0,187,0,80,0,204,0,124,0,63,0,0,0,0,0,147,0,193,0,111,0,55,0,128,0,0,0,0,0,0,0,97,0,0,0,98,0,43,0,49,0,0,0,216,0,77,0,0,0,0,0,188,0,0,0,44,0,0,0,27,0,0,0,0,0,0,0,0,0,163,0,173,0,5,0,165,0,52,0,49,0,157,0,45,0,92,0,226,0,98,0,240,0,117,0,54,0,94,0,25,0,0,0,32,0,243,0,0,0,0,0,164,0,67,0,211,0,225,0,20,0,65,0,197,0,157,0,101,0,0,0,185,0,180,0,2,0,89,0,0,0,156,0,0,0,198,0,0,0,192,0,32,0,90,0,0,0,79,0,67,0,0,0,123,0,156,0,0,0,145,0,235,0,237,0,227,0,187,0,215,0,0,0,210,0,0,0,158,0,248,0,172,0,0,0,112,0,171,0,115,0,156,0,162,0,148,0,0,0,69,0,217,0,142,0,208,0,149,0,0,0,78,0,0,0,191,0,35,0,82,0,220,0,0,0,163,0,137,0,89,0,161,0,143,0,22,0,51,0,0,0,16,0,75,0,71,0,37,0);
signal scenario_full  : scenario_type := (43,31,134,31,100,31,35,31,30,31,92,31,99,31,99,30,244,31,244,30,154,31,217,31,102,31,102,30,41,31,255,31,45,31,147,31,98,31,204,31,204,30,114,31,114,30,233,31,209,31,127,31,155,31,33,31,157,31,228,31,194,31,249,31,142,31,11,31,54,31,218,31,10,31,169,31,169,30,40,31,7,31,150,31,228,31,51,31,5,31,35,31,189,31,189,30,189,29,118,31,118,30,118,29,135,31,133,31,109,31,231,31,108,31,12,31,12,30,148,31,179,31,4,31,32,31,103,31,245,31,57,31,241,31,237,31,143,31,220,31,47,31,47,30,80,31,79,31,79,30,189,31,140,31,217,31,3,31,254,31,16,31,207,31,135,31,25,31,49,31,70,31,171,31,47,31,125,31,125,30,104,31,197,31,155,31,165,31,41,31,41,30,129,31,234,31,243,31,243,30,26,31,149,31,36,31,36,30,202,31,161,31,63,31,63,30,89,31,102,31,76,31,122,31,227,31,246,31,225,31,225,30,225,29,245,31,178,31,205,31,115,31,117,31,227,31,17,31,56,31,246,31,246,30,246,29,246,28,248,31,248,30,113,31,150,31,150,30,214,31,120,31,132,31,188,31,188,30,246,31,58,31,165,31,102,31,102,30,102,29,207,31,207,30,52,31,109,31,251,31,140,31,172,31,248,31,57,31,113,31,240,31,135,31,252,31,163,31,163,30,70,31,8,31,8,30,40,31,103,31,55,31,69,31,137,31,45,31,40,31,168,31,254,31,254,30,254,29,77,31,80,31,22,31,56,31,168,31,210,31,140,31,208,31,208,30,161,31,161,30,107,31,149,31,149,31,113,31,74,31,203,31,88,31,14,31,10,31,209,31,217,31,255,31,204,31,214,31,254,31,52,31,52,30,52,29,52,28,71,31,185,31,185,30,94,31,163,31,83,31,75,31,179,31,154,31,47,31,82,31,193,31,148,31,83,31,111,31,187,31,80,31,204,31,124,31,63,31,63,30,63,29,147,31,193,31,111,31,55,31,128,31,128,30,128,29,128,28,97,31,97,30,98,31,43,31,49,31,49,30,216,31,77,31,77,30,77,29,188,31,188,30,44,31,44,30,27,31,27,30,27,29,27,28,27,27,163,31,173,31,5,31,165,31,52,31,49,31,157,31,45,31,92,31,226,31,98,31,240,31,117,31,54,31,94,31,25,31,25,30,32,31,243,31,243,30,243,29,164,31,67,31,211,31,225,31,20,31,65,31,197,31,157,31,101,31,101,30,185,31,180,31,2,31,89,31,89,30,156,31,156,30,198,31,198,30,192,31,32,31,90,31,90,30,79,31,67,31,67,30,123,31,156,31,156,30,145,31,235,31,237,31,227,31,187,31,215,31,215,30,210,31,210,30,158,31,248,31,172,31,172,30,112,31,171,31,115,31,156,31,162,31,148,31,148,30,69,31,217,31,142,31,208,31,149,31,149,30,78,31,78,30,191,31,35,31,82,31,220,31,220,30,163,31,137,31,89,31,161,31,143,31,22,31,51,31,51,30,16,31,75,31,71,31,37,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
