-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 915;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (23,0,104,0,114,0,151,0,0,0,0,0,20,0,211,0,91,0,170,0,0,0,13,0,129,0,169,0,102,0,0,0,115,0,0,0,167,0,204,0,241,0,253,0,3,0,35,0,0,0,86,0,176,0,53,0,61,0,125,0,105,0,31,0,165,0,106,0,85,0,215,0,105,0,170,0,132,0,72,0,170,0,210,0,38,0,0,0,120,0,0,0,79,0,193,0,0,0,0,0,75,0,20,0,45,0,227,0,241,0,223,0,18,0,156,0,152,0,193,0,19,0,38,0,226,0,68,0,0,0,92,0,197,0,210,0,186,0,187,0,155,0,0,0,0,0,116,0,88,0,0,0,99,0,194,0,0,0,201,0,110,0,18,0,0,0,0,0,89,0,175,0,0,0,40,0,15,0,141,0,211,0,245,0,4,0,68,0,0,0,110,0,27,0,52,0,211,0,61,0,0,0,105,0,0,0,157,0,140,0,154,0,142,0,4,0,212,0,156,0,25,0,55,0,14,0,0,0,0,0,128,0,200,0,0,0,47,0,172,0,10,0,0,0,0,0,78,0,0,0,153,0,224,0,0,0,234,0,48,0,29,0,0,0,142,0,0,0,202,0,131,0,59,0,186,0,0,0,12,0,59,0,228,0,25,0,160,0,89,0,30,0,15,0,21,0,73,0,176,0,0,0,0,0,5,0,0,0,2,0,209,0,237,0,73,0,16,0,0,0,0,0,0,0,0,0,252,0,182,0,205,0,206,0,0,0,17,0,116,0,147,0,127,0,232,0,15,0,108,0,131,0,185,0,189,0,191,0,14,0,1,0,0,0,224,0,56,0,100,0,175,0,0,0,101,0,233,0,0,0,0,0,190,0,0,0,111,0,46,0,163,0,13,0,174,0,154,0,240,0,251,0,176,0,249,0,0,0,224,0,159,0,0,0,233,0,0,0,0,0,142,0,62,0,71,0,238,0,175,0,0,0,67,0,168,0,177,0,0,0,39,0,30,0,0,0,171,0,235,0,63,0,251,0,99,0,163,0,243,0,29,0,195,0,21,0,227,0,125,0,203,0,0,0,101,0,0,0,86,0,117,0,174,0,152,0,47,0,33,0,24,0,5,0,102,0,0,0,0,0,216,0,48,0,92,0,48,0,86,0,223,0,234,0,15,0,194,0,5,0,0,0,124,0,159,0,106,0,151,0,255,0,219,0,54,0,196,0,0,0,132,0,0,0,112,0,0,0,68,0,0,0,210,0,27,0,145,0,21,0,55,0,69,0,128,0,209,0,10,0,126,0,26,0,145,0,214,0,73,0,92,0,0,0,0,0,0,0,125,0,228,0,151,0,112,0,50,0,77,0,185,0,25,0,189,0,182,0,190,0,0,0,13,0,0,0,129,0,25,0,0,0,246,0,123,0,0,0,164,0,110,0,173,0,0,0,1,0,160,0,197,0,9,0,62,0,173,0,51,0,38,0,188,0,181,0,95,0,179,0,0,0,33,0,0,0,0,0,228,0,202,0,27,0,209,0,171,0,8,0,85,0,6,0,0,0,117,0,91,0,13,0,34,0,156,0,0,0,0,0,228,0,0,0,209,0,89,0,12,0,0,0,0,0,8,0,245,0,182,0,0,0,243,0,143,0,206,0,100,0,74,0,39,0,5,0,59,0,221,0,143,0,72,0,0,0,0,0,67,0,0,0,189,0,81,0,78,0,0,0,123,0,0,0,113,0,233,0,112,0,0,0,0,0,113,0,137,0,227,0,144,0,124,0,1,0,219,0,208,0,123,0,200,0,151,0,137,0,125,0,181,0,0,0,230,0,236,0,106,0,48,0,156,0,0,0,207,0,185,0,37,0,0,0,241,0,0,0,179,0,68,0,211,0,45,0,134,0,108,0,228,0,86,0,239,0,181,0,30,0,222,0,0,0,0,0,98,0,111,0,97,0,15,0,156,0,188,0,135,0,110,0,239,0,111,0,170,0,52,0,0,0,204,0,99,0,0,0,52,0,0,0,114,0,0,0,151,0,159,0,204,0,241,0,0,0,95,0,35,0,45,0,56,0,56,0,58,0,228,0,0,0,0,0,187,0,0,0,74,0,69,0,252,0,3,0,78,0,199,0,164,0,49,0,208,0,80,0,18,0,44,0,0,0,0,0,12,0,115,0,0,0,229,0,90,0,210,0,248,0,0,0,92,0,118,0,13,0,172,0,0,0,8,0,0,0,0,0,149,0,207,0,39,0,36,0,0,0,133,0,243,0,170,0,40,0,133,0,42,0,29,0,0,0,132,0,0,0,9,0,27,0,164,0,0,0,37,0,101,0,207,0,0,0,46,0,209,0,0,0,59,0,24,0,0,0,0,0,56,0,167,0,94,0,0,0,197,0,0,0,0,0,15,0,188,0,45,0,220,0,177,0,0,0,56,0,0,0,167,0,71,0,220,0,191,0,98,0,57,0,68,0,54,0,22,0,130,0,234,0,191,0,0,0,111,0,0,0,47,0,202,0,158,0,38,0,155,0,134,0,0,0,0,0,172,0,142,0,3,0,0,0,0,0,225,0,243,0,126,0,195,0,17,0,0,0,75,0,250,0,155,0,95,0,218,0,91,0,107,0,91,0,241,0,0,0,0,0,217,0,54,0,177,0,70,0,73,0,164,0,0,0,32,0,228,0,0,0,20,0,193,0,0,0,0,0,0,0,0,0,7,0,17,0,66,0,21,0,79,0,183,0,45,0,105,0,0,0,187,0,35,0,230,0,212,0,0,0,220,0,182,0,0,0,217,0,77,0,75,0,208,0,159,0,0,0,116,0,32,0,127,0,0,0,204,0,0,0,0,0,182,0,177,0,216,0,239,0,0,0,20,0,0,0,80,0,0,0,23,0,101,0,249,0,0,0,141,0,228,0,0,0,177,0,0,0,26,0,237,0,49,0,121,0,214,0,159,0,153,0,89,0,84,0,198,0,218,0,144,0,68,0,0,0,50,0,59,0,0,0,158,0,113,0,194,0,98,0,207,0,95,0,20,0,78,0,92,0,40,0,207,0,176,0,199,0,85,0,226,0,24,0,16,0,139,0,238,0,123,0,254,0,148,0,22,0,57,0,150,0,0,0,158,0,36,0,0,0,116,0,14,0,137,0,144,0,0,0,155,0,233,0,223,0,82,0,7,0,0,0,8,0,166,0,111,0,0,0,95,0,185,0,4,0,114,0,230,0,102,0,168,0,87,0,61,0,27,0,0,0,172,0,88,0,168,0,182,0,0,0,23,0,19,0,215,0,0,0,0,0,153,0,153,0,169,0,79,0,188,0,39,0,21,0,229,0,0,0,0,0,226,0,91,0,18,0,54,0,81,0,234,0,4,0,124,0,242,0,180,0,118,0,172,0,0,0,9,0,88,0,91,0,238,0,73,0,217,0,25,0,179,0,92,0,25,0,8,0,181,0,238,0,203,0,0,0,156,0,201,0,57,0,242,0,172,0,180,0,111,0,213,0,59,0,131,0,207,0,0,0,75,0,42,0,130,0,163,0,19,0,152,0,253,0,102,0,249,0,1,0,174,0,86,0,216,0,218,0,221,0,0,0,95,0,0,0,0,0,0,0,131,0,250,0,176,0,0,0,0,0,80,0,193,0,90,0,188,0,0,0,0,0,171,0,0,0,19,0,0,0,74,0,20,0,73,0,77,0,127,0,153,0,148,0,0,0,19,0,60,0,0,0,231,0,0,0,0,0,0,0,18,0,93,0,0,0,6,0,57,0,224,0,177,0,200,0,0,0,155,0,161,0,108,0,0,0,0,0,0,0,143,0,85,0,0,0,122,0,0,0,218,0,231,0,248,0,188,0,58,0,179,0,0,0,106,0,0,0,143,0,157,0,172,0,49,0,68,0,218,0,51,0,0,0,202,0,154,0,210,0,32,0,240,0,93,0,214,0,0,0,218,0,54,0,0,0,20,0,0,0,21,0,0,0,253,0,164,0,0,0,32,0,0,0,0,0,74,0,227,0,134,0,49,0,37,0,221,0,37,0,0,0,0,0,0,0,227,0,15,0,60,0,232,0,0,0,0,0,215,0,84,0,109,0,9,0,104,0,134,0,166,0,196,0,17,0,20,0,38,0);
signal scenario_full  : scenario_type := (23,31,104,31,114,31,151,31,151,30,151,29,20,31,211,31,91,31,170,31,170,30,13,31,129,31,169,31,102,31,102,30,115,31,115,30,167,31,204,31,241,31,253,31,3,31,35,31,35,30,86,31,176,31,53,31,61,31,125,31,105,31,31,31,165,31,106,31,85,31,215,31,105,31,170,31,132,31,72,31,170,31,210,31,38,31,38,30,120,31,120,30,79,31,193,31,193,30,193,29,75,31,20,31,45,31,227,31,241,31,223,31,18,31,156,31,152,31,193,31,19,31,38,31,226,31,68,31,68,30,92,31,197,31,210,31,186,31,187,31,155,31,155,30,155,29,116,31,88,31,88,30,99,31,194,31,194,30,201,31,110,31,18,31,18,30,18,29,89,31,175,31,175,30,40,31,15,31,141,31,211,31,245,31,4,31,68,31,68,30,110,31,27,31,52,31,211,31,61,31,61,30,105,31,105,30,157,31,140,31,154,31,142,31,4,31,212,31,156,31,25,31,55,31,14,31,14,30,14,29,128,31,200,31,200,30,47,31,172,31,10,31,10,30,10,29,78,31,78,30,153,31,224,31,224,30,234,31,48,31,29,31,29,30,142,31,142,30,202,31,131,31,59,31,186,31,186,30,12,31,59,31,228,31,25,31,160,31,89,31,30,31,15,31,21,31,73,31,176,31,176,30,176,29,5,31,5,30,2,31,209,31,237,31,73,31,16,31,16,30,16,29,16,28,16,27,252,31,182,31,205,31,206,31,206,30,17,31,116,31,147,31,127,31,232,31,15,31,108,31,131,31,185,31,189,31,191,31,14,31,1,31,1,30,224,31,56,31,100,31,175,31,175,30,101,31,233,31,233,30,233,29,190,31,190,30,111,31,46,31,163,31,13,31,174,31,154,31,240,31,251,31,176,31,249,31,249,30,224,31,159,31,159,30,233,31,233,30,233,29,142,31,62,31,71,31,238,31,175,31,175,30,67,31,168,31,177,31,177,30,39,31,30,31,30,30,171,31,235,31,63,31,251,31,99,31,163,31,243,31,29,31,195,31,21,31,227,31,125,31,203,31,203,30,101,31,101,30,86,31,117,31,174,31,152,31,47,31,33,31,24,31,5,31,102,31,102,30,102,29,216,31,48,31,92,31,48,31,86,31,223,31,234,31,15,31,194,31,5,31,5,30,124,31,159,31,106,31,151,31,255,31,219,31,54,31,196,31,196,30,132,31,132,30,112,31,112,30,68,31,68,30,210,31,27,31,145,31,21,31,55,31,69,31,128,31,209,31,10,31,126,31,26,31,145,31,214,31,73,31,92,31,92,30,92,29,92,28,125,31,228,31,151,31,112,31,50,31,77,31,185,31,25,31,189,31,182,31,190,31,190,30,13,31,13,30,129,31,25,31,25,30,246,31,123,31,123,30,164,31,110,31,173,31,173,30,1,31,160,31,197,31,9,31,62,31,173,31,51,31,38,31,188,31,181,31,95,31,179,31,179,30,33,31,33,30,33,29,228,31,202,31,27,31,209,31,171,31,8,31,85,31,6,31,6,30,117,31,91,31,13,31,34,31,156,31,156,30,156,29,228,31,228,30,209,31,89,31,12,31,12,30,12,29,8,31,245,31,182,31,182,30,243,31,143,31,206,31,100,31,74,31,39,31,5,31,59,31,221,31,143,31,72,31,72,30,72,29,67,31,67,30,189,31,81,31,78,31,78,30,123,31,123,30,113,31,233,31,112,31,112,30,112,29,113,31,137,31,227,31,144,31,124,31,1,31,219,31,208,31,123,31,200,31,151,31,137,31,125,31,181,31,181,30,230,31,236,31,106,31,48,31,156,31,156,30,207,31,185,31,37,31,37,30,241,31,241,30,179,31,68,31,211,31,45,31,134,31,108,31,228,31,86,31,239,31,181,31,30,31,222,31,222,30,222,29,98,31,111,31,97,31,15,31,156,31,188,31,135,31,110,31,239,31,111,31,170,31,52,31,52,30,204,31,99,31,99,30,52,31,52,30,114,31,114,30,151,31,159,31,204,31,241,31,241,30,95,31,35,31,45,31,56,31,56,31,58,31,228,31,228,30,228,29,187,31,187,30,74,31,69,31,252,31,3,31,78,31,199,31,164,31,49,31,208,31,80,31,18,31,44,31,44,30,44,29,12,31,115,31,115,30,229,31,90,31,210,31,248,31,248,30,92,31,118,31,13,31,172,31,172,30,8,31,8,30,8,29,149,31,207,31,39,31,36,31,36,30,133,31,243,31,170,31,40,31,133,31,42,31,29,31,29,30,132,31,132,30,9,31,27,31,164,31,164,30,37,31,101,31,207,31,207,30,46,31,209,31,209,30,59,31,24,31,24,30,24,29,56,31,167,31,94,31,94,30,197,31,197,30,197,29,15,31,188,31,45,31,220,31,177,31,177,30,56,31,56,30,167,31,71,31,220,31,191,31,98,31,57,31,68,31,54,31,22,31,130,31,234,31,191,31,191,30,111,31,111,30,47,31,202,31,158,31,38,31,155,31,134,31,134,30,134,29,172,31,142,31,3,31,3,30,3,29,225,31,243,31,126,31,195,31,17,31,17,30,75,31,250,31,155,31,95,31,218,31,91,31,107,31,91,31,241,31,241,30,241,29,217,31,54,31,177,31,70,31,73,31,164,31,164,30,32,31,228,31,228,30,20,31,193,31,193,30,193,29,193,28,193,27,7,31,17,31,66,31,21,31,79,31,183,31,45,31,105,31,105,30,187,31,35,31,230,31,212,31,212,30,220,31,182,31,182,30,217,31,77,31,75,31,208,31,159,31,159,30,116,31,32,31,127,31,127,30,204,31,204,30,204,29,182,31,177,31,216,31,239,31,239,30,20,31,20,30,80,31,80,30,23,31,101,31,249,31,249,30,141,31,228,31,228,30,177,31,177,30,26,31,237,31,49,31,121,31,214,31,159,31,153,31,89,31,84,31,198,31,218,31,144,31,68,31,68,30,50,31,59,31,59,30,158,31,113,31,194,31,98,31,207,31,95,31,20,31,78,31,92,31,40,31,207,31,176,31,199,31,85,31,226,31,24,31,16,31,139,31,238,31,123,31,254,31,148,31,22,31,57,31,150,31,150,30,158,31,36,31,36,30,116,31,14,31,137,31,144,31,144,30,155,31,233,31,223,31,82,31,7,31,7,30,8,31,166,31,111,31,111,30,95,31,185,31,4,31,114,31,230,31,102,31,168,31,87,31,61,31,27,31,27,30,172,31,88,31,168,31,182,31,182,30,23,31,19,31,215,31,215,30,215,29,153,31,153,31,169,31,79,31,188,31,39,31,21,31,229,31,229,30,229,29,226,31,91,31,18,31,54,31,81,31,234,31,4,31,124,31,242,31,180,31,118,31,172,31,172,30,9,31,88,31,91,31,238,31,73,31,217,31,25,31,179,31,92,31,25,31,8,31,181,31,238,31,203,31,203,30,156,31,201,31,57,31,242,31,172,31,180,31,111,31,213,31,59,31,131,31,207,31,207,30,75,31,42,31,130,31,163,31,19,31,152,31,253,31,102,31,249,31,1,31,174,31,86,31,216,31,218,31,221,31,221,30,95,31,95,30,95,29,95,28,131,31,250,31,176,31,176,30,176,29,80,31,193,31,90,31,188,31,188,30,188,29,171,31,171,30,19,31,19,30,74,31,20,31,73,31,77,31,127,31,153,31,148,31,148,30,19,31,60,31,60,30,231,31,231,30,231,29,231,28,18,31,93,31,93,30,6,31,57,31,224,31,177,31,200,31,200,30,155,31,161,31,108,31,108,30,108,29,108,28,143,31,85,31,85,30,122,31,122,30,218,31,231,31,248,31,188,31,58,31,179,31,179,30,106,31,106,30,143,31,157,31,172,31,49,31,68,31,218,31,51,31,51,30,202,31,154,31,210,31,32,31,240,31,93,31,214,31,214,30,218,31,54,31,54,30,20,31,20,30,21,31,21,30,253,31,164,31,164,30,32,31,32,30,32,29,74,31,227,31,134,31,49,31,37,31,221,31,37,31,37,30,37,29,37,28,227,31,15,31,60,31,232,31,232,30,232,29,215,31,84,31,109,31,9,31,104,31,134,31,166,31,196,31,17,31,20,31,38,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
