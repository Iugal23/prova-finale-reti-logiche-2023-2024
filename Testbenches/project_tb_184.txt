-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 783;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (242,0,78,0,204,0,227,0,0,0,70,0,139,0,0,0,142,0,78,0,61,0,61,0,215,0,88,0,206,0,109,0,4,0,0,0,24,0,175,0,123,0,43,0,252,0,133,0,52,0,0,0,191,0,40,0,195,0,0,0,0,0,30,0,173,0,227,0,149,0,78,0,0,0,235,0,224,0,221,0,204,0,165,0,0,0,29,0,80,0,0,0,0,0,22,0,26,0,0,0,6,0,186,0,25,0,216,0,0,0,152,0,219,0,194,0,0,0,179,0,235,0,20,0,110,0,42,0,10,0,0,0,102,0,60,0,181,0,177,0,226,0,152,0,1,0,229,0,169,0,219,0,20,0,66,0,195,0,0,0,82,0,122,0,152,0,132,0,191,0,204,0,0,0,103,0,96,0,37,0,0,0,164,0,0,0,0,0,51,0,135,0,127,0,140,0,67,0,0,0,0,0,209,0,186,0,18,0,0,0,196,0,0,0,193,0,151,0,210,0,2,0,230,0,205,0,191,0,166,0,42,0,27,0,41,0,225,0,0,0,63,0,46,0,55,0,75,0,54,0,39,0,0,0,0,0,209,0,144,0,56,0,69,0,0,0,226,0,82,0,223,0,0,0,0,0,23,0,215,0,102,0,224,0,120,0,178,0,31,0,0,0,0,0,137,0,201,0,0,0,88,0,37,0,0,0,52,0,74,0,33,0,26,0,94,0,55,0,89,0,0,0,166,0,166,0,183,0,138,0,35,0,0,0,241,0,251,0,22,0,0,0,64,0,23,0,84,0,187,0,72,0,7,0,176,0,67,0,232,0,0,0,130,0,228,0,77,0,129,0,184,0,15,0,51,0,226,0,0,0,194,0,0,0,89,0,123,0,141,0,60,0,250,0,95,0,240,0,155,0,157,0,123,0,127,0,143,0,180,0,6,0,26,0,134,0,50,0,167,0,0,0,109,0,0,0,214,0,0,0,142,0,123,0,22,0,24,0,44,0,0,0,29,0,121,0,0,0,160,0,214,0,124,0,97,0,91,0,49,0,242,0,245,0,173,0,193,0,190,0,112,0,91,0,221,0,137,0,23,0,233,0,250,0,59,0,82,0,15,0,127,0,243,0,19,0,130,0,247,0,0,0,202,0,189,0,66,0,149,0,0,0,233,0,147,0,0,0,79,0,0,0,193,0,227,0,192,0,48,0,63,0,105,0,0,0,134,0,48,0,137,0,58,0,88,0,170,0,94,0,217,0,118,0,122,0,2,0,161,0,5,0,215,0,220,0,124,0,186,0,87,0,122,0,80,0,44,0,36,0,206,0,0,0,104,0,182,0,249,0,9,0,100,0,182,0,66,0,37,0,0,0,9,0,200,0,94,0,240,0,250,0,216,0,0,0,88,0,74,0,0,0,211,0,48,0,65,0,253,0,0,0,199,0,0,0,34,0,176,0,203,0,0,0,246,0,35,0,212,0,183,0,170,0,216,0,221,0,0,0,233,0,102,0,43,0,0,0,15,0,56,0,0,0,77,0,248,0,51,0,41,0,35,0,0,0,144,0,0,0,15,0,0,0,64,0,189,0,11,0,0,0,138,0,101,0,13,0,13,0,179,0,0,0,215,0,164,0,173,0,232,0,54,0,0,0,120,0,114,0,0,0,38,0,112,0,151,0,17,0,58,0,196,0,0,0,114,0,4,0,189,0,0,0,202,0,24,0,197,0,183,0,100,0,59,0,113,0,205,0,229,0,127,0,67,0,157,0,0,0,0,0,0,0,106,0,0,0,0,0,126,0,208,0,81,0,255,0,130,0,109,0,130,0,180,0,231,0,196,0,60,0,0,0,253,0,227,0,205,0,145,0,19,0,199,0,177,0,87,0,110,0,13,0,120,0,134,0,0,0,0,0,201,0,0,0,54,0,203,0,22,0,0,0,0,0,0,0,210,0,109,0,173,0,225,0,191,0,84,0,0,0,14,0,46,0,187,0,0,0,189,0,81,0,138,0,254,0,155,0,0,0,170,0,229,0,129,0,0,0,95,0,248,0,0,0,58,0,227,0,208,0,127,0,46,0,138,0,113,0,27,0,150,0,70,0,161,0,103,0,124,0,221,0,101,0,0,0,211,0,0,0,90,0,190,0,84,0,0,0,161,0,179,0,190,0,0,0,252,0,0,0,0,0,90,0,42,0,147,0,62,0,23,0,0,0,0,0,0,0,169,0,123,0,216,0,0,0,49,0,229,0,185,0,0,0,214,0,218,0,0,0,221,0,0,0,141,0,100,0,0,0,43,0,234,0,210,0,36,0,206,0,172,0,82,0,0,0,147,0,220,0,144,0,45,0,123,0,0,0,201,0,116,0,104,0,109,0,239,0,74,0,0,0,0,0,194,0,86,0,182,0,158,0,24,0,14,0,0,0,247,0,254,0,164,0,0,0,24,0,85,0,80,0,184,0,101,0,113,0,136,0,77,0,102,0,0,0,73,0,93,0,234,0,194,0,234,0,115,0,133,0,67,0,0,0,52,0,208,0,6,0,71,0,80,0,20,0,0,0,34,0,104,0,175,0,18,0,254,0,0,0,58,0,28,0,250,0,72,0,206,0,117,0,131,0,248,0,8,0,0,0,247,0,250,0,26,0,46,0,60,0,12,0,0,0,209,0,144,0,88,0,104,0,0,0,191,0,115,0,152,0,159,0,230,0,0,0,212,0,31,0,0,0,35,0,156,0,2,0,250,0,243,0,154,0,159,0,243,0,194,0,0,0,0,0,217,0,6,0,82,0,169,0,138,0,65,0,4,0,1,0,104,0,113,0,124,0,0,0,10,0,39,0,224,0,166,0,64,0,0,0,33,0,7,0,68,0,191,0,217,0,209,0,0,0,144,0,147,0,177,0,0,0,0,0,0,0,97,0,67,0,228,0,169,0,106,0,180,0,96,0,76,0,142,0,78,0,171,0,0,0,25,0,249,0,3,0,0,0,72,0,185,0,0,0,120,0,105,0,76,0,40,0,110,0,5,0,236,0,0,0,146,0,0,0,94,0,255,0,174,0,248,0,225,0,162,0,206,0,224,0,43,0,41,0,65,0,77,0,240,0,213,0,138,0,40,0,66,0,93,0,42,0,206,0,221,0,0,0,49,0,190,0,150,0,152,0,0,0,179,0,239,0,155,0,0,0,226,0,210,0,244,0,80,0,189,0,0,0,116,0,12,0,0,0,246,0,93,0,150,0,144,0,0,0,154,0,167,0,5,0,0,0,0,0,4,0,129,0,114,0,236,0,81,0,177,0,87,0,107,0,59,0,176,0,130,0,48,0,0,0,247,0,209,0,25,0,0,0,250,0,128,0,232,0,22,0,121,0,91,0,187,0,109,0,205,0,38,0,187,0,75,0,0,0,104,0,26,0,117,0,188,0,118,0,26,0,33,0,191,0,146,0,43,0,8,0,179,0,0,0,0,0,186,0,184,0,76,0,0,0,131,0,248,0,0,0,0,0,150,0,67,0,0,0,109,0,0,0,217,0,0,0,140,0);
signal scenario_full  : scenario_type := (242,31,78,31,204,31,227,31,227,30,70,31,139,31,139,30,142,31,78,31,61,31,61,31,215,31,88,31,206,31,109,31,4,31,4,30,24,31,175,31,123,31,43,31,252,31,133,31,52,31,52,30,191,31,40,31,195,31,195,30,195,29,30,31,173,31,227,31,149,31,78,31,78,30,235,31,224,31,221,31,204,31,165,31,165,30,29,31,80,31,80,30,80,29,22,31,26,31,26,30,6,31,186,31,25,31,216,31,216,30,152,31,219,31,194,31,194,30,179,31,235,31,20,31,110,31,42,31,10,31,10,30,102,31,60,31,181,31,177,31,226,31,152,31,1,31,229,31,169,31,219,31,20,31,66,31,195,31,195,30,82,31,122,31,152,31,132,31,191,31,204,31,204,30,103,31,96,31,37,31,37,30,164,31,164,30,164,29,51,31,135,31,127,31,140,31,67,31,67,30,67,29,209,31,186,31,18,31,18,30,196,31,196,30,193,31,151,31,210,31,2,31,230,31,205,31,191,31,166,31,42,31,27,31,41,31,225,31,225,30,63,31,46,31,55,31,75,31,54,31,39,31,39,30,39,29,209,31,144,31,56,31,69,31,69,30,226,31,82,31,223,31,223,30,223,29,23,31,215,31,102,31,224,31,120,31,178,31,31,31,31,30,31,29,137,31,201,31,201,30,88,31,37,31,37,30,52,31,74,31,33,31,26,31,94,31,55,31,89,31,89,30,166,31,166,31,183,31,138,31,35,31,35,30,241,31,251,31,22,31,22,30,64,31,23,31,84,31,187,31,72,31,7,31,176,31,67,31,232,31,232,30,130,31,228,31,77,31,129,31,184,31,15,31,51,31,226,31,226,30,194,31,194,30,89,31,123,31,141,31,60,31,250,31,95,31,240,31,155,31,157,31,123,31,127,31,143,31,180,31,6,31,26,31,134,31,50,31,167,31,167,30,109,31,109,30,214,31,214,30,142,31,123,31,22,31,24,31,44,31,44,30,29,31,121,31,121,30,160,31,214,31,124,31,97,31,91,31,49,31,242,31,245,31,173,31,193,31,190,31,112,31,91,31,221,31,137,31,23,31,233,31,250,31,59,31,82,31,15,31,127,31,243,31,19,31,130,31,247,31,247,30,202,31,189,31,66,31,149,31,149,30,233,31,147,31,147,30,79,31,79,30,193,31,227,31,192,31,48,31,63,31,105,31,105,30,134,31,48,31,137,31,58,31,88,31,170,31,94,31,217,31,118,31,122,31,2,31,161,31,5,31,215,31,220,31,124,31,186,31,87,31,122,31,80,31,44,31,36,31,206,31,206,30,104,31,182,31,249,31,9,31,100,31,182,31,66,31,37,31,37,30,9,31,200,31,94,31,240,31,250,31,216,31,216,30,88,31,74,31,74,30,211,31,48,31,65,31,253,31,253,30,199,31,199,30,34,31,176,31,203,31,203,30,246,31,35,31,212,31,183,31,170,31,216,31,221,31,221,30,233,31,102,31,43,31,43,30,15,31,56,31,56,30,77,31,248,31,51,31,41,31,35,31,35,30,144,31,144,30,15,31,15,30,64,31,189,31,11,31,11,30,138,31,101,31,13,31,13,31,179,31,179,30,215,31,164,31,173,31,232,31,54,31,54,30,120,31,114,31,114,30,38,31,112,31,151,31,17,31,58,31,196,31,196,30,114,31,4,31,189,31,189,30,202,31,24,31,197,31,183,31,100,31,59,31,113,31,205,31,229,31,127,31,67,31,157,31,157,30,157,29,157,28,106,31,106,30,106,29,126,31,208,31,81,31,255,31,130,31,109,31,130,31,180,31,231,31,196,31,60,31,60,30,253,31,227,31,205,31,145,31,19,31,199,31,177,31,87,31,110,31,13,31,120,31,134,31,134,30,134,29,201,31,201,30,54,31,203,31,22,31,22,30,22,29,22,28,210,31,109,31,173,31,225,31,191,31,84,31,84,30,14,31,46,31,187,31,187,30,189,31,81,31,138,31,254,31,155,31,155,30,170,31,229,31,129,31,129,30,95,31,248,31,248,30,58,31,227,31,208,31,127,31,46,31,138,31,113,31,27,31,150,31,70,31,161,31,103,31,124,31,221,31,101,31,101,30,211,31,211,30,90,31,190,31,84,31,84,30,161,31,179,31,190,31,190,30,252,31,252,30,252,29,90,31,42,31,147,31,62,31,23,31,23,30,23,29,23,28,169,31,123,31,216,31,216,30,49,31,229,31,185,31,185,30,214,31,218,31,218,30,221,31,221,30,141,31,100,31,100,30,43,31,234,31,210,31,36,31,206,31,172,31,82,31,82,30,147,31,220,31,144,31,45,31,123,31,123,30,201,31,116,31,104,31,109,31,239,31,74,31,74,30,74,29,194,31,86,31,182,31,158,31,24,31,14,31,14,30,247,31,254,31,164,31,164,30,24,31,85,31,80,31,184,31,101,31,113,31,136,31,77,31,102,31,102,30,73,31,93,31,234,31,194,31,234,31,115,31,133,31,67,31,67,30,52,31,208,31,6,31,71,31,80,31,20,31,20,30,34,31,104,31,175,31,18,31,254,31,254,30,58,31,28,31,250,31,72,31,206,31,117,31,131,31,248,31,8,31,8,30,247,31,250,31,26,31,46,31,60,31,12,31,12,30,209,31,144,31,88,31,104,31,104,30,191,31,115,31,152,31,159,31,230,31,230,30,212,31,31,31,31,30,35,31,156,31,2,31,250,31,243,31,154,31,159,31,243,31,194,31,194,30,194,29,217,31,6,31,82,31,169,31,138,31,65,31,4,31,1,31,104,31,113,31,124,31,124,30,10,31,39,31,224,31,166,31,64,31,64,30,33,31,7,31,68,31,191,31,217,31,209,31,209,30,144,31,147,31,177,31,177,30,177,29,177,28,97,31,67,31,228,31,169,31,106,31,180,31,96,31,76,31,142,31,78,31,171,31,171,30,25,31,249,31,3,31,3,30,72,31,185,31,185,30,120,31,105,31,76,31,40,31,110,31,5,31,236,31,236,30,146,31,146,30,94,31,255,31,174,31,248,31,225,31,162,31,206,31,224,31,43,31,41,31,65,31,77,31,240,31,213,31,138,31,40,31,66,31,93,31,42,31,206,31,221,31,221,30,49,31,190,31,150,31,152,31,152,30,179,31,239,31,155,31,155,30,226,31,210,31,244,31,80,31,189,31,189,30,116,31,12,31,12,30,246,31,93,31,150,31,144,31,144,30,154,31,167,31,5,31,5,30,5,29,4,31,129,31,114,31,236,31,81,31,177,31,87,31,107,31,59,31,176,31,130,31,48,31,48,30,247,31,209,31,25,31,25,30,250,31,128,31,232,31,22,31,121,31,91,31,187,31,109,31,205,31,38,31,187,31,75,31,75,30,104,31,26,31,117,31,188,31,118,31,26,31,33,31,191,31,146,31,43,31,8,31,179,31,179,30,179,29,186,31,184,31,76,31,76,30,131,31,248,31,248,30,248,29,150,31,67,31,67,30,109,31,109,30,217,31,217,30,140,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
