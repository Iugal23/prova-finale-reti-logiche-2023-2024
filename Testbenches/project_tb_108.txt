-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 240;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (119,0,197,0,68,0,126,0,46,0,206,0,178,0,151,0,238,0,0,0,130,0,169,0,203,0,121,0,222,0,64,0,220,0,0,0,223,0,238,0,0,0,37,0,111,0,0,0,0,0,146,0,205,0,226,0,46,0,119,0,212,0,0,0,184,0,0,0,210,0,238,0,64,0,55,0,15,0,128,0,0,0,215,0,252,0,87,0,156,0,143,0,182,0,45,0,140,0,115,0,134,0,154,0,0,0,109,0,147,0,147,0,110,0,0,0,26,0,89,0,0,0,123,0,122,0,246,0,31,0,125,0,171,0,83,0,153,0,112,0,21,0,80,0,21,0,183,0,38,0,45,0,2,0,124,0,50,0,255,0,152,0,224,0,26,0,0,0,0,0,67,0,73,0,61,0,0,0,0,0,102,0,72,0,158,0,235,0,0,0,250,0,248,0,131,0,255,0,0,0,117,0,0,0,179,0,9,0,6,0,0,0,0,0,80,0,0,0,148,0,84,0,10,0,40,0,198,0,117,0,152,0,212,0,83,0,147,0,89,0,20,0,71,0,195,0,82,0,0,0,226,0,14,0,0,0,92,0,213,0,185,0,80,0,223,0,235,0,98,0,136,0,212,0,176,0,0,0,54,0,241,0,53,0,227,0,0,0,111,0,103,0,241,0,0,0,248,0,0,0,32,0,106,0,65,0,0,0,197,0,0,0,157,0,0,0,174,0,0,0,249,0,0,0,0,0,114,0,132,0,74,0,181,0,0,0,0,0,0,0,102,0,93,0,118,0,137,0,100,0,210,0,248,0,71,0,0,0,29,0,83,0,197,0,0,0,47,0,145,0,79,0,0,0,100,0,154,0,12,0,74,0,84,0,222,0,10,0,160,0,91,0,167,0,32,0,45,0,76,0,220,0,8,0,13,0,1,0,173,0,0,0,15,0,90,0,8,0,126,0,209,0,189,0,136,0,94,0,45,0,0,0,49,0,0,0,130,0,199,0,255,0,16,0,164,0,90,0,0,0,0,0,0,0,90,0,163,0,194,0,63,0,111,0,177,0,0,0,11,0,217,0,2,0,152,0,205,0,239,0);
signal scenario_full  : scenario_type := (119,31,197,31,68,31,126,31,46,31,206,31,178,31,151,31,238,31,238,30,130,31,169,31,203,31,121,31,222,31,64,31,220,31,220,30,223,31,238,31,238,30,37,31,111,31,111,30,111,29,146,31,205,31,226,31,46,31,119,31,212,31,212,30,184,31,184,30,210,31,238,31,64,31,55,31,15,31,128,31,128,30,215,31,252,31,87,31,156,31,143,31,182,31,45,31,140,31,115,31,134,31,154,31,154,30,109,31,147,31,147,31,110,31,110,30,26,31,89,31,89,30,123,31,122,31,246,31,31,31,125,31,171,31,83,31,153,31,112,31,21,31,80,31,21,31,183,31,38,31,45,31,2,31,124,31,50,31,255,31,152,31,224,31,26,31,26,30,26,29,67,31,73,31,61,31,61,30,61,29,102,31,72,31,158,31,235,31,235,30,250,31,248,31,131,31,255,31,255,30,117,31,117,30,179,31,9,31,6,31,6,30,6,29,80,31,80,30,148,31,84,31,10,31,40,31,198,31,117,31,152,31,212,31,83,31,147,31,89,31,20,31,71,31,195,31,82,31,82,30,226,31,14,31,14,30,92,31,213,31,185,31,80,31,223,31,235,31,98,31,136,31,212,31,176,31,176,30,54,31,241,31,53,31,227,31,227,30,111,31,103,31,241,31,241,30,248,31,248,30,32,31,106,31,65,31,65,30,197,31,197,30,157,31,157,30,174,31,174,30,249,31,249,30,249,29,114,31,132,31,74,31,181,31,181,30,181,29,181,28,102,31,93,31,118,31,137,31,100,31,210,31,248,31,71,31,71,30,29,31,83,31,197,31,197,30,47,31,145,31,79,31,79,30,100,31,154,31,12,31,74,31,84,31,222,31,10,31,160,31,91,31,167,31,32,31,45,31,76,31,220,31,8,31,13,31,1,31,173,31,173,30,15,31,90,31,8,31,126,31,209,31,189,31,136,31,94,31,45,31,45,30,49,31,49,30,130,31,199,31,255,31,16,31,164,31,90,31,90,30,90,29,90,28,90,31,163,31,194,31,63,31,111,31,177,31,177,30,11,31,217,31,2,31,152,31,205,31,239,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
