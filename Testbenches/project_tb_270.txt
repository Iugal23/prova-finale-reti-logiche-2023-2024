-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 966;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (245,0,4,0,0,0,114,0,224,0,249,0,125,0,0,0,104,0,251,0,0,0,117,0,199,0,254,0,166,0,95,0,70,0,0,0,0,0,152,0,69,0,177,0,241,0,0,0,167,0,169,0,165,0,121,0,0,0,70,0,117,0,244,0,128,0,158,0,0,0,106,0,7,0,52,0,107,0,33,0,170,0,53,0,210,0,0,0,139,0,0,0,204,0,55,0,29,0,0,0,178,0,0,0,86,0,0,0,220,0,61,0,249,0,47,0,199,0,149,0,166,0,151,0,191,0,0,0,91,0,192,0,0,0,47,0,78,0,104,0,76,0,0,0,34,0,162,0,194,0,36,0,155,0,203,0,0,0,77,0,180,0,39,0,26,0,0,0,169,0,164,0,152,0,190,0,194,0,0,0,59,0,197,0,132,0,14,0,0,0,131,0,0,0,20,0,11,0,206,0,225,0,83,0,221,0,0,0,254,0,245,0,7,0,0,0,0,0,182,0,237,0,61,0,33,0,109,0,187,0,0,0,66,0,242,0,238,0,50,0,138,0,0,0,78,0,211,0,190,0,117,0,21,0,8,0,186,0,163,0,249,0,66,0,219,0,40,0,29,0,0,0,145,0,0,0,201,0,189,0,0,0,42,0,193,0,124,0,97,0,121,0,205,0,109,0,94,0,121,0,85,0,200,0,52,0,141,0,38,0,39,0,70,0,204,0,0,0,93,0,0,0,46,0,120,0,0,0,115,0,232,0,3,0,135,0,74,0,0,0,38,0,0,0,169,0,107,0,116,0,25,0,251,0,139,0,44,0,21,0,42,0,70,0,178,0,7,0,103,0,20,0,25,0,0,0,67,0,157,0,169,0,0,0,49,0,115,0,0,0,44,0,38,0,101,0,6,0,82,0,102,0,73,0,231,0,111,0,115,0,0,0,213,0,94,0,122,0,253,0,48,0,122,0,67,0,200,0,182,0,62,0,0,0,184,0,189,0,0,0,232,0,222,0,0,0,250,0,45,0,2,0,220,0,74,0,0,0,122,0,49,0,114,0,0,0,64,0,45,0,139,0,124,0,70,0,235,0,0,0,4,0,0,0,187,0,0,0,91,0,74,0,231,0,15,0,174,0,4,0,192,0,119,0,121,0,230,0,238,0,54,0,228,0,99,0,51,0,163,0,251,0,18,0,10,0,123,0,0,0,200,0,0,0,0,0,223,0,65,0,93,0,0,0,0,0,34,0,112,0,41,0,166,0,185,0,0,0,61,0,0,0,86,0,0,0,20,0,151,0,10,0,40,0,17,0,108,0,0,0,66,0,80,0,107,0,58,0,0,0,190,0,173,0,39,0,103,0,0,0,80,0,3,0,205,0,108,0,0,0,141,0,224,0,0,0,109,0,173,0,50,0,0,0,0,0,128,0,177,0,26,0,199,0,208,0,221,0,0,0,60,0,50,0,225,0,32,0,112,0,224,0,216,0,135,0,220,0,170,0,16,0,188,0,81,0,95,0,194,0,195,0,225,0,173,0,166,0,71,0,0,0,137,0,49,0,227,0,214,0,25,0,22,0,251,0,79,0,0,0,231,0,188,0,211,0,190,0,68,0,213,0,68,0,4,0,0,0,119,0,219,0,123,0,183,0,187,0,251,0,166,0,86,0,80,0,51,0,101,0,39,0,88,0,156,0,0,0,59,0,223,0,0,0,149,0,54,0,218,0,189,0,0,0,0,0,166,0,29,0,55,0,20,0,37,0,70,0,128,0,91,0,0,0,171,0,169,0,15,0,7,0,207,0,213,0,164,0,114,0,130,0,0,0,197,0,146,0,0,0,0,0,9,0,28,0,159,0,188,0,195,0,49,0,148,0,238,0,0,0,211,0,191,0,0,0,171,0,0,0,104,0,105,0,49,0,251,0,233,0,230,0,56,0,11,0,207,0,95,0,119,0,183,0,236,0,64,0,152,0,160,0,232,0,244,0,176,0,0,0,23,0,21,0,0,0,179,0,155,0,8,0,252,0,23,0,115,0,0,0,49,0,97,0,0,0,73,0,145,0,223,0,84,0,54,0,162,0,1,0,119,0,91,0,0,0,53,0,0,0,3,0,0,0,72,0,0,0,0,0,0,0,77,0,33,0,29,0,90,0,144,0,37,0,0,0,147,0,217,0,206,0,93,0,0,0,44,0,213,0,98,0,69,0,0,0,57,0,123,0,27,0,17,0,242,0,255,0,0,0,0,0,26,0,0,0,205,0,0,0,109,0,0,0,0,0,146,0,23,0,83,0,94,0,44,0,3,0,233,0,0,0,228,0,35,0,96,0,142,0,80,0,34,0,45,0,145,0,39,0,39,0,171,0,140,0,86,0,0,0,228,0,0,0,139,0,144,0,55,0,183,0,20,0,0,0,0,0,134,0,88,0,154,0,0,0,178,0,116,0,34,0,0,0,243,0,196,0,88,0,31,0,113,0,70,0,215,0,216,0,141,0,63,0,64,0,159,0,72,0,139,0,120,0,219,0,163,0,0,0,0,0,207,0,21,0,11,0,228,0,62,0,139,0,187,0,41,0,34,0,72,0,106,0,29,0,0,0,0,0,242,0,20,0,221,0,20,0,196,0,29,0,171,0,237,0,0,0,202,0,255,0,29,0,152,0,37,0,85,0,99,0,138,0,80,0,119,0,224,0,88,0,116,0,35,0,153,0,175,0,176,0,148,0,242,0,172,0,20,0,127,0,1,0,113,0,131,0,71,0,116,0,0,0,123,0,202,0,210,0,145,0,1,0,35,0,34,0,152,0,70,0,128,0,8,0,44,0,236,0,151,0,127,0,161,0,157,0,192,0,100,0,201,0,243,0,168,0,115,0,128,0,206,0,172,0,145,0,166,0,0,0,68,0,0,0,129,0,252,0,167,0,185,0,68,0,0,0,206,0,243,0,8,0,55,0,99,0,0,0,227,0,72,0,209,0,201,0,24,0,90,0,0,0,0,0,187,0,211,0,0,0,106,0,0,0,0,0,236,0,178,0,12,0,33,0,20,0,185,0,0,0,132,0,1,0,42,0,44,0,123,0,0,0,210,0,117,0,0,0,231,0,37,0,109,0,158,0,76,0,168,0,247,0,0,0,38,0,0,0,60,0,0,0,161,0,236,0,144,0,192,0,0,0,21,0,91,0,0,0,93,0,200,0,205,0,177,0,221,0,39,0,71,0,30,0,222,0,246,0,90,0,44,0,0,0,235,0,98,0,183,0,171,0,232,0,0,0,46,0,22,0,5,0,29,0,0,0,43,0,119,0,136,0,236,0,211,0,197,0,215,0,222,0,78,0,141,0,106,0,183,0,134,0,0,0,3,0,0,0,143,0,81,0,102,0,233,0,102,0,226,0,73,0,0,0,6,0,0,0,249,0,92,0,190,0,173,0,244,0,143,0,62,0,130,0,23,0,12,0,0,0,151,0,45,0,227,0,186,0,93,0,0,0,6,0,118,0,0,0,3,0,224,0,199,0,134,0,151,0,0,0,0,0,37,0,202,0,137,0,0,0,83,0,59,0,136,0,249,0,126,0,238,0,81,0,64,0,103,0,0,0,187,0,0,0,126,0,9,0,0,0,86,0,22,0,91,0,230,0,200,0,0,0,180,0,95,0,173,0,174,0,0,0,201,0,244,0,176,0,87,0,134,0,179,0,146,0,188,0,40,0,187,0,221,0,132,0,84,0,0,0,253,0,66,0,76,0,0,0,97,0,160,0,42,0,63,0,33,0,161,0,208,0,0,0,179,0,77,0,75,0,0,0,228,0,0,0,239,0,22,0,37,0,150,0,70,0,71,0,241,0,0,0,156,0,0,0,44,0,221,0,0,0,136,0,22,0,59,0,112,0,20,0,147,0,118,0,162,0,174,0,23,0,221,0,177,0,0,0,0,0,0,0,0,0,0,0,98,0,184,0,69,0,29,0,166,0,193,0,81,0,46,0,40,0,110,0,158,0,208,0,104,0,56,0,143,0,220,0,0,0,68,0,177,0,0,0,39,0,160,0,62,0,77,0,16,0,237,0,115,0,0,0,29,0,63,0,153,0,245,0,190,0,91,0,44,0,0,0,99,0,0,0,43,0,255,0,204,0,49,0,0,0,142,0,75,0,115,0,223,0,251,0,0,0,0,0,0,0,103,0,89,0,0,0,252,0,224,0,64,0,164,0,234,0,195,0,23,0,37,0,117,0,37,0,255,0,0,0,203,0,102,0,38,0,207,0,230,0,0,0,237,0,172,0,65,0,0,0,13,0,45,0,162,0,85,0,0,0,179,0,0,0,0,0,41,0,13,0,151,0,59,0,128,0,0,0,11,0,244,0);
signal scenario_full  : scenario_type := (245,31,4,31,4,30,114,31,224,31,249,31,125,31,125,30,104,31,251,31,251,30,117,31,199,31,254,31,166,31,95,31,70,31,70,30,70,29,152,31,69,31,177,31,241,31,241,30,167,31,169,31,165,31,121,31,121,30,70,31,117,31,244,31,128,31,158,31,158,30,106,31,7,31,52,31,107,31,33,31,170,31,53,31,210,31,210,30,139,31,139,30,204,31,55,31,29,31,29,30,178,31,178,30,86,31,86,30,220,31,61,31,249,31,47,31,199,31,149,31,166,31,151,31,191,31,191,30,91,31,192,31,192,30,47,31,78,31,104,31,76,31,76,30,34,31,162,31,194,31,36,31,155,31,203,31,203,30,77,31,180,31,39,31,26,31,26,30,169,31,164,31,152,31,190,31,194,31,194,30,59,31,197,31,132,31,14,31,14,30,131,31,131,30,20,31,11,31,206,31,225,31,83,31,221,31,221,30,254,31,245,31,7,31,7,30,7,29,182,31,237,31,61,31,33,31,109,31,187,31,187,30,66,31,242,31,238,31,50,31,138,31,138,30,78,31,211,31,190,31,117,31,21,31,8,31,186,31,163,31,249,31,66,31,219,31,40,31,29,31,29,30,145,31,145,30,201,31,189,31,189,30,42,31,193,31,124,31,97,31,121,31,205,31,109,31,94,31,121,31,85,31,200,31,52,31,141,31,38,31,39,31,70,31,204,31,204,30,93,31,93,30,46,31,120,31,120,30,115,31,232,31,3,31,135,31,74,31,74,30,38,31,38,30,169,31,107,31,116,31,25,31,251,31,139,31,44,31,21,31,42,31,70,31,178,31,7,31,103,31,20,31,25,31,25,30,67,31,157,31,169,31,169,30,49,31,115,31,115,30,44,31,38,31,101,31,6,31,82,31,102,31,73,31,231,31,111,31,115,31,115,30,213,31,94,31,122,31,253,31,48,31,122,31,67,31,200,31,182,31,62,31,62,30,184,31,189,31,189,30,232,31,222,31,222,30,250,31,45,31,2,31,220,31,74,31,74,30,122,31,49,31,114,31,114,30,64,31,45,31,139,31,124,31,70,31,235,31,235,30,4,31,4,30,187,31,187,30,91,31,74,31,231,31,15,31,174,31,4,31,192,31,119,31,121,31,230,31,238,31,54,31,228,31,99,31,51,31,163,31,251,31,18,31,10,31,123,31,123,30,200,31,200,30,200,29,223,31,65,31,93,31,93,30,93,29,34,31,112,31,41,31,166,31,185,31,185,30,61,31,61,30,86,31,86,30,20,31,151,31,10,31,40,31,17,31,108,31,108,30,66,31,80,31,107,31,58,31,58,30,190,31,173,31,39,31,103,31,103,30,80,31,3,31,205,31,108,31,108,30,141,31,224,31,224,30,109,31,173,31,50,31,50,30,50,29,128,31,177,31,26,31,199,31,208,31,221,31,221,30,60,31,50,31,225,31,32,31,112,31,224,31,216,31,135,31,220,31,170,31,16,31,188,31,81,31,95,31,194,31,195,31,225,31,173,31,166,31,71,31,71,30,137,31,49,31,227,31,214,31,25,31,22,31,251,31,79,31,79,30,231,31,188,31,211,31,190,31,68,31,213,31,68,31,4,31,4,30,119,31,219,31,123,31,183,31,187,31,251,31,166,31,86,31,80,31,51,31,101,31,39,31,88,31,156,31,156,30,59,31,223,31,223,30,149,31,54,31,218,31,189,31,189,30,189,29,166,31,29,31,55,31,20,31,37,31,70,31,128,31,91,31,91,30,171,31,169,31,15,31,7,31,207,31,213,31,164,31,114,31,130,31,130,30,197,31,146,31,146,30,146,29,9,31,28,31,159,31,188,31,195,31,49,31,148,31,238,31,238,30,211,31,191,31,191,30,171,31,171,30,104,31,105,31,49,31,251,31,233,31,230,31,56,31,11,31,207,31,95,31,119,31,183,31,236,31,64,31,152,31,160,31,232,31,244,31,176,31,176,30,23,31,21,31,21,30,179,31,155,31,8,31,252,31,23,31,115,31,115,30,49,31,97,31,97,30,73,31,145,31,223,31,84,31,54,31,162,31,1,31,119,31,91,31,91,30,53,31,53,30,3,31,3,30,72,31,72,30,72,29,72,28,77,31,33,31,29,31,90,31,144,31,37,31,37,30,147,31,217,31,206,31,93,31,93,30,44,31,213,31,98,31,69,31,69,30,57,31,123,31,27,31,17,31,242,31,255,31,255,30,255,29,26,31,26,30,205,31,205,30,109,31,109,30,109,29,146,31,23,31,83,31,94,31,44,31,3,31,233,31,233,30,228,31,35,31,96,31,142,31,80,31,34,31,45,31,145,31,39,31,39,31,171,31,140,31,86,31,86,30,228,31,228,30,139,31,144,31,55,31,183,31,20,31,20,30,20,29,134,31,88,31,154,31,154,30,178,31,116,31,34,31,34,30,243,31,196,31,88,31,31,31,113,31,70,31,215,31,216,31,141,31,63,31,64,31,159,31,72,31,139,31,120,31,219,31,163,31,163,30,163,29,207,31,21,31,11,31,228,31,62,31,139,31,187,31,41,31,34,31,72,31,106,31,29,31,29,30,29,29,242,31,20,31,221,31,20,31,196,31,29,31,171,31,237,31,237,30,202,31,255,31,29,31,152,31,37,31,85,31,99,31,138,31,80,31,119,31,224,31,88,31,116,31,35,31,153,31,175,31,176,31,148,31,242,31,172,31,20,31,127,31,1,31,113,31,131,31,71,31,116,31,116,30,123,31,202,31,210,31,145,31,1,31,35,31,34,31,152,31,70,31,128,31,8,31,44,31,236,31,151,31,127,31,161,31,157,31,192,31,100,31,201,31,243,31,168,31,115,31,128,31,206,31,172,31,145,31,166,31,166,30,68,31,68,30,129,31,252,31,167,31,185,31,68,31,68,30,206,31,243,31,8,31,55,31,99,31,99,30,227,31,72,31,209,31,201,31,24,31,90,31,90,30,90,29,187,31,211,31,211,30,106,31,106,30,106,29,236,31,178,31,12,31,33,31,20,31,185,31,185,30,132,31,1,31,42,31,44,31,123,31,123,30,210,31,117,31,117,30,231,31,37,31,109,31,158,31,76,31,168,31,247,31,247,30,38,31,38,30,60,31,60,30,161,31,236,31,144,31,192,31,192,30,21,31,91,31,91,30,93,31,200,31,205,31,177,31,221,31,39,31,71,31,30,31,222,31,246,31,90,31,44,31,44,30,235,31,98,31,183,31,171,31,232,31,232,30,46,31,22,31,5,31,29,31,29,30,43,31,119,31,136,31,236,31,211,31,197,31,215,31,222,31,78,31,141,31,106,31,183,31,134,31,134,30,3,31,3,30,143,31,81,31,102,31,233,31,102,31,226,31,73,31,73,30,6,31,6,30,249,31,92,31,190,31,173,31,244,31,143,31,62,31,130,31,23,31,12,31,12,30,151,31,45,31,227,31,186,31,93,31,93,30,6,31,118,31,118,30,3,31,224,31,199,31,134,31,151,31,151,30,151,29,37,31,202,31,137,31,137,30,83,31,59,31,136,31,249,31,126,31,238,31,81,31,64,31,103,31,103,30,187,31,187,30,126,31,9,31,9,30,86,31,22,31,91,31,230,31,200,31,200,30,180,31,95,31,173,31,174,31,174,30,201,31,244,31,176,31,87,31,134,31,179,31,146,31,188,31,40,31,187,31,221,31,132,31,84,31,84,30,253,31,66,31,76,31,76,30,97,31,160,31,42,31,63,31,33,31,161,31,208,31,208,30,179,31,77,31,75,31,75,30,228,31,228,30,239,31,22,31,37,31,150,31,70,31,71,31,241,31,241,30,156,31,156,30,44,31,221,31,221,30,136,31,22,31,59,31,112,31,20,31,147,31,118,31,162,31,174,31,23,31,221,31,177,31,177,30,177,29,177,28,177,27,177,26,98,31,184,31,69,31,29,31,166,31,193,31,81,31,46,31,40,31,110,31,158,31,208,31,104,31,56,31,143,31,220,31,220,30,68,31,177,31,177,30,39,31,160,31,62,31,77,31,16,31,237,31,115,31,115,30,29,31,63,31,153,31,245,31,190,31,91,31,44,31,44,30,99,31,99,30,43,31,255,31,204,31,49,31,49,30,142,31,75,31,115,31,223,31,251,31,251,30,251,29,251,28,103,31,89,31,89,30,252,31,224,31,64,31,164,31,234,31,195,31,23,31,37,31,117,31,37,31,255,31,255,30,203,31,102,31,38,31,207,31,230,31,230,30,237,31,172,31,65,31,65,30,13,31,45,31,162,31,85,31,85,30,179,31,179,30,179,29,41,31,13,31,151,31,59,31,128,31,128,30,11,31,244,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
