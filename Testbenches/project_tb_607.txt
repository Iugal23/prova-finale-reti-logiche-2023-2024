-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 533;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (142,0,79,0,121,0,144,0,0,0,20,0,0,0,0,0,174,0,194,0,158,0,167,0,147,0,0,0,109,0,36,0,5,0,0,0,53,0,39,0,241,0,0,0,146,0,0,0,0,0,32,0,93,0,57,0,91,0,161,0,38,0,71,0,0,0,193,0,21,0,99,0,148,0,0,0,0,0,103,0,0,0,0,0,176,0,120,0,209,0,252,0,31,0,136,0,174,0,37,0,215,0,0,0,185,0,132,0,92,0,122,0,180,0,84,0,0,0,45,0,168,0,0,0,86,0,0,0,0,0,185,0,254,0,213,0,0,0,53,0,142,0,24,0,0,0,195,0,8,0,225,0,0,0,229,0,0,0,0,0,195,0,0,0,164,0,0,0,63,0,119,0,119,0,0,0,0,0,109,0,48,0,61,0,226,0,80,0,155,0,188,0,186,0,0,0,32,0,187,0,148,0,170,0,0,0,56,0,241,0,82,0,244,0,0,0,0,0,27,0,229,0,240,0,246,0,0,0,215,0,12,0,188,0,68,0,0,0,188,0,0,0,0,0,89,0,0,0,0,0,225,0,0,0,202,0,155,0,197,0,56,0,81,0,0,0,38,0,38,0,0,0,208,0,166,0,0,0,63,0,163,0,88,0,213,0,219,0,0,0,157,0,161,0,0,0,86,0,0,0,0,0,0,0,81,0,222,0,103,0,82,0,0,0,0,0,199,0,255,0,172,0,29,0,192,0,0,0,129,0,32,0,95,0,0,0,18,0,114,0,17,0,179,0,0,0,0,0,0,0,0,0,218,0,139,0,13,0,172,0,10,0,0,0,0,0,85,0,28,0,0,0,11,0,161,0,142,0,139,0,0,0,102,0,225,0,112,0,234,0,0,0,133,0,157,0,0,0,0,0,45,0,164,0,170,0,77,0,137,0,0,0,0,0,170,0,0,0,108,0,0,0,0,0,10,0,0,0,250,0,175,0,239,0,148,0,0,0,214,0,118,0,17,0,126,0,225,0,247,0,0,0,188,0,0,0,0,0,15,0,0,0,252,0,30,0,212,0,26,0,196,0,102,0,69,0,110,0,233,0,216,0,36,0,89,0,0,0,0,0,0,0,0,0,0,0,180,0,7,0,0,0,0,0,43,0,241,0,136,0,0,0,139,0,0,0,0,0,0,0,192,0,0,0,63,0,157,0,224,0,149,0,71,0,50,0,201,0,0,0,194,0,10,0,243,0,194,0,211,0,156,0,25,0,236,0,26,0,165,0,84,0,220,0,228,0,96,0,0,0,192,0,96,0,13,0,96,0,2,0,183,0,0,0,111,0,127,0,62,0,232,0,0,0,33,0,173,0,142,0,110,0,56,0,43,0,234,0,56,0,114,0,110,0,40,0,0,0,194,0,74,0,245,0,189,0,222,0,0,0,132,0,84,0,194,0,93,0,23,0,0,0,0,0,232,0,0,0,238,0,78,0,0,0,0,0,244,0,70,0,0,0,48,0,171,0,234,0,40,0,87,0,130,0,224,0,196,0,205,0,232,0,0,0,109,0,0,0,187,0,24,0,116,0,186,0,75,0,32,0,12,0,112,0,0,0,229,0,169,0,247,0,108,0,192,0,182,0,91,0,53,0,205,0,218,0,3,0,0,0,23,0,0,0,105,0,247,0,115,0,161,0,152,0,219,0,137,0,181,0,191,0,252,0,0,0,0,0,0,0,10,0,249,0,56,0,53,0,12,0,70,0,101,0,0,0,0,0,206,0,140,0,250,0,245,0,159,0,103,0,250,0,118,0,7,0,0,0,85,0,189,0,0,0,152,0,255,0,184,0,216,0,0,0,213,0,211,0,159,0,0,0,0,0,0,0,38,0,13,0,235,0,237,0,13,0,27,0,0,0,100,0,68,0,93,0,152,0,0,0,73,0,23,0,231,0,0,0,56,0,88,0,244,0,106,0,140,0,136,0,0,0,233,0,85,0,149,0,0,0,65,0,125,0,110,0,208,0,0,0,152,0,0,0,121,0,0,0,244,0,186,0,0,0,32,0,0,0,184,0,207,0,205,0,255,0,0,0,245,0,147,0,38,0,67,0,200,0,127,0,210,0,105,0,208,0,154,0,105,0,0,0,27,0,0,0,186,0,12,0,206,0,7,0,64,0,197,0,122,0,145,0,12,0,0,0,24,0,105,0,0,0,255,0,0,0,154,0,0,0,207,0,65,0,102,0,223,0,32,0,0,0,42,0,0,0,119,0,151,0,0,0,0,0,107,0,111,0,99,0,0,0,136,0,179,0,37,0,52,0,0,0,97,0,60,0,252,0,139,0,85,0,205,0,142,0,234,0,68,0,48,0,203,0,151,0,0,0,0,0,56,0,204,0,242,0,4,0,38,0,181,0,142,0,38,0);
signal scenario_full  : scenario_type := (142,31,79,31,121,31,144,31,144,30,20,31,20,30,20,29,174,31,194,31,158,31,167,31,147,31,147,30,109,31,36,31,5,31,5,30,53,31,39,31,241,31,241,30,146,31,146,30,146,29,32,31,93,31,57,31,91,31,161,31,38,31,71,31,71,30,193,31,21,31,99,31,148,31,148,30,148,29,103,31,103,30,103,29,176,31,120,31,209,31,252,31,31,31,136,31,174,31,37,31,215,31,215,30,185,31,132,31,92,31,122,31,180,31,84,31,84,30,45,31,168,31,168,30,86,31,86,30,86,29,185,31,254,31,213,31,213,30,53,31,142,31,24,31,24,30,195,31,8,31,225,31,225,30,229,31,229,30,229,29,195,31,195,30,164,31,164,30,63,31,119,31,119,31,119,30,119,29,109,31,48,31,61,31,226,31,80,31,155,31,188,31,186,31,186,30,32,31,187,31,148,31,170,31,170,30,56,31,241,31,82,31,244,31,244,30,244,29,27,31,229,31,240,31,246,31,246,30,215,31,12,31,188,31,68,31,68,30,188,31,188,30,188,29,89,31,89,30,89,29,225,31,225,30,202,31,155,31,197,31,56,31,81,31,81,30,38,31,38,31,38,30,208,31,166,31,166,30,63,31,163,31,88,31,213,31,219,31,219,30,157,31,161,31,161,30,86,31,86,30,86,29,86,28,81,31,222,31,103,31,82,31,82,30,82,29,199,31,255,31,172,31,29,31,192,31,192,30,129,31,32,31,95,31,95,30,18,31,114,31,17,31,179,31,179,30,179,29,179,28,179,27,218,31,139,31,13,31,172,31,10,31,10,30,10,29,85,31,28,31,28,30,11,31,161,31,142,31,139,31,139,30,102,31,225,31,112,31,234,31,234,30,133,31,157,31,157,30,157,29,45,31,164,31,170,31,77,31,137,31,137,30,137,29,170,31,170,30,108,31,108,30,108,29,10,31,10,30,250,31,175,31,239,31,148,31,148,30,214,31,118,31,17,31,126,31,225,31,247,31,247,30,188,31,188,30,188,29,15,31,15,30,252,31,30,31,212,31,26,31,196,31,102,31,69,31,110,31,233,31,216,31,36,31,89,31,89,30,89,29,89,28,89,27,89,26,180,31,7,31,7,30,7,29,43,31,241,31,136,31,136,30,139,31,139,30,139,29,139,28,192,31,192,30,63,31,157,31,224,31,149,31,71,31,50,31,201,31,201,30,194,31,10,31,243,31,194,31,211,31,156,31,25,31,236,31,26,31,165,31,84,31,220,31,228,31,96,31,96,30,192,31,96,31,13,31,96,31,2,31,183,31,183,30,111,31,127,31,62,31,232,31,232,30,33,31,173,31,142,31,110,31,56,31,43,31,234,31,56,31,114,31,110,31,40,31,40,30,194,31,74,31,245,31,189,31,222,31,222,30,132,31,84,31,194,31,93,31,23,31,23,30,23,29,232,31,232,30,238,31,78,31,78,30,78,29,244,31,70,31,70,30,48,31,171,31,234,31,40,31,87,31,130,31,224,31,196,31,205,31,232,31,232,30,109,31,109,30,187,31,24,31,116,31,186,31,75,31,32,31,12,31,112,31,112,30,229,31,169,31,247,31,108,31,192,31,182,31,91,31,53,31,205,31,218,31,3,31,3,30,23,31,23,30,105,31,247,31,115,31,161,31,152,31,219,31,137,31,181,31,191,31,252,31,252,30,252,29,252,28,10,31,249,31,56,31,53,31,12,31,70,31,101,31,101,30,101,29,206,31,140,31,250,31,245,31,159,31,103,31,250,31,118,31,7,31,7,30,85,31,189,31,189,30,152,31,255,31,184,31,216,31,216,30,213,31,211,31,159,31,159,30,159,29,159,28,38,31,13,31,235,31,237,31,13,31,27,31,27,30,100,31,68,31,93,31,152,31,152,30,73,31,23,31,231,31,231,30,56,31,88,31,244,31,106,31,140,31,136,31,136,30,233,31,85,31,149,31,149,30,65,31,125,31,110,31,208,31,208,30,152,31,152,30,121,31,121,30,244,31,186,31,186,30,32,31,32,30,184,31,207,31,205,31,255,31,255,30,245,31,147,31,38,31,67,31,200,31,127,31,210,31,105,31,208,31,154,31,105,31,105,30,27,31,27,30,186,31,12,31,206,31,7,31,64,31,197,31,122,31,145,31,12,31,12,30,24,31,105,31,105,30,255,31,255,30,154,31,154,30,207,31,65,31,102,31,223,31,32,31,32,30,42,31,42,30,119,31,151,31,151,30,151,29,107,31,111,31,99,31,99,30,136,31,179,31,37,31,52,31,52,30,97,31,60,31,252,31,139,31,85,31,205,31,142,31,234,31,68,31,48,31,203,31,151,31,151,30,151,29,56,31,204,31,242,31,4,31,38,31,181,31,142,31,38,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
