-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 796;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (157,0,131,0,11,0,0,0,166,0,20,0,0,0,0,0,228,0,223,0,207,0,0,0,73,0,106,0,0,0,60,0,240,0,124,0,65,0,68,0,255,0,163,0,202,0,178,0,0,0,74,0,38,0,63,0,237,0,34,0,183,0,155,0,68,0,103,0,71,0,223,0,226,0,116,0,255,0,64,0,20,0,0,0,139,0,16,0,151,0,47,0,49,0,165,0,130,0,0,0,224,0,137,0,70,0,74,0,0,0,242,0,182,0,252,0,122,0,55,0,51,0,249,0,7,0,226,0,148,0,184,0,0,0,235,0,51,0,0,0,238,0,198,0,52,0,160,0,247,0,0,0,151,0,142,0,86,0,0,0,246,0,176,0,176,0,0,0,138,0,80,0,19,0,0,0,0,0,181,0,87,0,93,0,210,0,70,0,248,0,21,0,0,0,251,0,18,0,77,0,0,0,138,0,43,0,72,0,0,0,57,0,0,0,37,0,102,0,234,0,60,0,89,0,16,0,0,0,128,0,78,0,0,0,44,0,101,0,234,0,125,0,251,0,79,0,118,0,251,0,64,0,132,0,129,0,157,0,200,0,165,0,188,0,7,0,0,0,0,0,65,0,37,0,250,0,27,0,218,0,106,0,137,0,176,0,72,0,110,0,7,0,38,0,136,0,49,0,240,0,20,0,0,0,184,0,215,0,153,0,0,0,0,0,53,0,245,0,0,0,131,0,173,0,14,0,27,0,0,0,0,0,160,0,0,0,14,0,186,0,199,0,195,0,27,0,28,0,8,0,77,0,0,0,112,0,245,0,15,0,157,0,155,0,29,0,174,0,174,0,226,0,12,0,217,0,42,0,74,0,61,0,255,0,59,0,0,0,117,0,141,0,1,0,0,0,167,0,207,0,154,0,161,0,176,0,20,0,90,0,216,0,0,0,211,0,55,0,180,0,158,0,185,0,141,0,88,0,65,0,0,0,0,0,227,0,99,0,219,0,162,0,0,0,172,0,182,0,186,0,183,0,0,0,126,0,157,0,95,0,0,0,229,0,219,0,93,0,43,0,0,0,0,0,232,0,0,0,148,0,46,0,208,0,247,0,9,0,0,0,129,0,149,0,50,0,59,0,193,0,252,0,0,0,124,0,25,0,142,0,0,0,12,0,191,0,0,0,187,0,216,0,150,0,95,0,225,0,32,0,36,0,180,0,198,0,51,0,35,0,3,0,255,0,112,0,168,0,77,0,147,0,199,0,0,0,92,0,209,0,125,0,176,0,0,0,0,0,197,0,161,0,0,0,0,0,57,0,208,0,0,0,84,0,252,0,255,0,0,0,149,0,133,0,175,0,60,0,0,0,125,0,144,0,125,0,179,0,251,0,189,0,175,0,124,0,185,0,33,0,0,0,154,0,216,0,107,0,173,0,0,0,0,0,198,0,216,0,12,0,3,0,136,0,67,0,0,0,176,0,30,0,226,0,159,0,152,0,56,0,90,0,132,0,102,0,165,0,149,0,9,0,183,0,0,0,49,0,115,0,190,0,122,0,254,0,233,0,234,0,128,0,246,0,29,0,0,0,0,0,32,0,82,0,35,0,0,0,104,0,0,0,178,0,0,0,142,0,58,0,158,0,225,0,0,0,140,0,246,0,168,0,247,0,147,0,196,0,215,0,193,0,123,0,34,0,0,0,201,0,57,0,1,0,0,0,27,0,152,0,20,0,57,0,0,0,238,0,108,0,80,0,0,0,0,0,20,0,119,0,226,0,92,0,171,0,133,0,213,0,252,0,53,0,196,0,233,0,89,0,85,0,242,0,119,0,171,0,88,0,16,0,125,0,0,0,226,0,0,0,135,0,0,0,87,0,246,0,225,0,0,0,215,0,99,0,183,0,252,0,30,0,111,0,37,0,76,0,236,0,194,0,195,0,139,0,3,0,5,0,186,0,115,0,0,0,100,0,100,0,77,0,98,0,18,0,106,0,88,0,192,0,78,0,167,0,168,0,0,0,98,0,0,0,49,0,108,0,144,0,169,0,180,0,145,0,176,0,46,0,60,0,179,0,250,0,160,0,65,0,206,0,137,0,255,0,0,0,5,0,0,0,196,0,199,0,0,0,22,0,181,0,244,0,0,0,247,0,201,0,96,0,0,0,171,0,200,0,39,0,97,0,0,0,60,0,198,0,132,0,223,0,152,0,0,0,139,0,146,0,233,0,162,0,221,0,202,0,149,0,0,0,244,0,19,0,117,0,218,0,191,0,140,0,22,0,0,0,0,0,1,0,0,0,0,0,203,0,153,0,247,0,112,0,0,0,90,0,0,0,247,0,0,0,140,0,243,0,4,0,95,0,109,0,138,0,4,0,176,0,0,0,127,0,57,0,39,0,0,0,179,0,0,0,209,0,26,0,0,0,109,0,0,0,174,0,104,0,85,0,211,0,79,0,248,0,127,0,156,0,87,0,145,0,80,0,134,0,71,0,0,0,0,0,40,0,139,0,16,0,230,0,195,0,22,0,0,0,0,0,172,0,165,0,90,0,13,0,221,0,64,0,183,0,104,0,0,0,0,0,77,0,102,0,12,0,87,0,0,0,0,0,0,0,73,0,230,0,10,0,0,0,160,0,11,0,0,0,197,0,197,0,32,0,15,0,84,0,0,0,0,0,135,0,130,0,83,0,64,0,123,0,11,0,95,0,154,0,251,0,95,0,211,0,46,0,118,0,205,0,232,0,59,0,0,0,49,0,199,0,200,0,2,0,98,0,5,0,63,0,41,0,88,0,199,0,0,0,24,0,180,0,0,0,246,0,7,0,136,0,185,0,210,0,56,0,181,0,108,0,253,0,87,0,233,0,0,0,242,0,92,0,24,0,125,0,183,0,0,0,15,0,221,0,0,0,225,0,13,0,0,0,59,0,12,0,159,0,0,0,225,0,14,0,66,0,179,0,0,0,227,0,138,0,13,0,0,0,177,0,77,0,0,0,61,0,171,0,49,0,124,0,70,0,0,0,131,0,158,0,246,0,0,0,238,0,110,0,0,0,156,0,0,0,173,0,144,0,26,0,227,0,0,0,84,0,0,0,0,0,221,0,40,0,57,0,181,0,53,0,81,0,109,0,103,0,167,0,238,0,0,0,251,0,233,0,122,0,19,0,0,0,28,0,76,0,0,0,185,0,0,0,160,0,70,0,68,0,53,0,47,0,214,0,0,0,206,0,101,0,0,0,137,0,98,0,0,0,0,0,84,0,39,0,106,0,182,0,35,0,219,0,64,0,104,0,92,0,0,0,195,0,205,0,126,0,222,0,9,0,0,0,71,0,75,0,187,0,0,0,0,0,46,0,179,0,55,0,67,0,40,0,0,0,62,0,194,0,242,0,181,0,33,0,0,0,0,0,157,0,94,0,0,0,147,0,0,0,0,0,18,0,197,0,0,0,218,0,80,0,164,0,151,0,0,0,122,0,114,0,150,0,29,0,242,0,35,0,99,0,201,0,228,0,0,0,157,0,6,0,186,0,73,0,8,0,51,0,89,0,217,0,177,0,205,0,182,0,98,0,71,0,93,0,201,0,196,0,195,0,173,0);
signal scenario_full  : scenario_type := (157,31,131,31,11,31,11,30,166,31,20,31,20,30,20,29,228,31,223,31,207,31,207,30,73,31,106,31,106,30,60,31,240,31,124,31,65,31,68,31,255,31,163,31,202,31,178,31,178,30,74,31,38,31,63,31,237,31,34,31,183,31,155,31,68,31,103,31,71,31,223,31,226,31,116,31,255,31,64,31,20,31,20,30,139,31,16,31,151,31,47,31,49,31,165,31,130,31,130,30,224,31,137,31,70,31,74,31,74,30,242,31,182,31,252,31,122,31,55,31,51,31,249,31,7,31,226,31,148,31,184,31,184,30,235,31,51,31,51,30,238,31,198,31,52,31,160,31,247,31,247,30,151,31,142,31,86,31,86,30,246,31,176,31,176,31,176,30,138,31,80,31,19,31,19,30,19,29,181,31,87,31,93,31,210,31,70,31,248,31,21,31,21,30,251,31,18,31,77,31,77,30,138,31,43,31,72,31,72,30,57,31,57,30,37,31,102,31,234,31,60,31,89,31,16,31,16,30,128,31,78,31,78,30,44,31,101,31,234,31,125,31,251,31,79,31,118,31,251,31,64,31,132,31,129,31,157,31,200,31,165,31,188,31,7,31,7,30,7,29,65,31,37,31,250,31,27,31,218,31,106,31,137,31,176,31,72,31,110,31,7,31,38,31,136,31,49,31,240,31,20,31,20,30,184,31,215,31,153,31,153,30,153,29,53,31,245,31,245,30,131,31,173,31,14,31,27,31,27,30,27,29,160,31,160,30,14,31,186,31,199,31,195,31,27,31,28,31,8,31,77,31,77,30,112,31,245,31,15,31,157,31,155,31,29,31,174,31,174,31,226,31,12,31,217,31,42,31,74,31,61,31,255,31,59,31,59,30,117,31,141,31,1,31,1,30,167,31,207,31,154,31,161,31,176,31,20,31,90,31,216,31,216,30,211,31,55,31,180,31,158,31,185,31,141,31,88,31,65,31,65,30,65,29,227,31,99,31,219,31,162,31,162,30,172,31,182,31,186,31,183,31,183,30,126,31,157,31,95,31,95,30,229,31,219,31,93,31,43,31,43,30,43,29,232,31,232,30,148,31,46,31,208,31,247,31,9,31,9,30,129,31,149,31,50,31,59,31,193,31,252,31,252,30,124,31,25,31,142,31,142,30,12,31,191,31,191,30,187,31,216,31,150,31,95,31,225,31,32,31,36,31,180,31,198,31,51,31,35,31,3,31,255,31,112,31,168,31,77,31,147,31,199,31,199,30,92,31,209,31,125,31,176,31,176,30,176,29,197,31,161,31,161,30,161,29,57,31,208,31,208,30,84,31,252,31,255,31,255,30,149,31,133,31,175,31,60,31,60,30,125,31,144,31,125,31,179,31,251,31,189,31,175,31,124,31,185,31,33,31,33,30,154,31,216,31,107,31,173,31,173,30,173,29,198,31,216,31,12,31,3,31,136,31,67,31,67,30,176,31,30,31,226,31,159,31,152,31,56,31,90,31,132,31,102,31,165,31,149,31,9,31,183,31,183,30,49,31,115,31,190,31,122,31,254,31,233,31,234,31,128,31,246,31,29,31,29,30,29,29,32,31,82,31,35,31,35,30,104,31,104,30,178,31,178,30,142,31,58,31,158,31,225,31,225,30,140,31,246,31,168,31,247,31,147,31,196,31,215,31,193,31,123,31,34,31,34,30,201,31,57,31,1,31,1,30,27,31,152,31,20,31,57,31,57,30,238,31,108,31,80,31,80,30,80,29,20,31,119,31,226,31,92,31,171,31,133,31,213,31,252,31,53,31,196,31,233,31,89,31,85,31,242,31,119,31,171,31,88,31,16,31,125,31,125,30,226,31,226,30,135,31,135,30,87,31,246,31,225,31,225,30,215,31,99,31,183,31,252,31,30,31,111,31,37,31,76,31,236,31,194,31,195,31,139,31,3,31,5,31,186,31,115,31,115,30,100,31,100,31,77,31,98,31,18,31,106,31,88,31,192,31,78,31,167,31,168,31,168,30,98,31,98,30,49,31,108,31,144,31,169,31,180,31,145,31,176,31,46,31,60,31,179,31,250,31,160,31,65,31,206,31,137,31,255,31,255,30,5,31,5,30,196,31,199,31,199,30,22,31,181,31,244,31,244,30,247,31,201,31,96,31,96,30,171,31,200,31,39,31,97,31,97,30,60,31,198,31,132,31,223,31,152,31,152,30,139,31,146,31,233,31,162,31,221,31,202,31,149,31,149,30,244,31,19,31,117,31,218,31,191,31,140,31,22,31,22,30,22,29,1,31,1,30,1,29,203,31,153,31,247,31,112,31,112,30,90,31,90,30,247,31,247,30,140,31,243,31,4,31,95,31,109,31,138,31,4,31,176,31,176,30,127,31,57,31,39,31,39,30,179,31,179,30,209,31,26,31,26,30,109,31,109,30,174,31,104,31,85,31,211,31,79,31,248,31,127,31,156,31,87,31,145,31,80,31,134,31,71,31,71,30,71,29,40,31,139,31,16,31,230,31,195,31,22,31,22,30,22,29,172,31,165,31,90,31,13,31,221,31,64,31,183,31,104,31,104,30,104,29,77,31,102,31,12,31,87,31,87,30,87,29,87,28,73,31,230,31,10,31,10,30,160,31,11,31,11,30,197,31,197,31,32,31,15,31,84,31,84,30,84,29,135,31,130,31,83,31,64,31,123,31,11,31,95,31,154,31,251,31,95,31,211,31,46,31,118,31,205,31,232,31,59,31,59,30,49,31,199,31,200,31,2,31,98,31,5,31,63,31,41,31,88,31,199,31,199,30,24,31,180,31,180,30,246,31,7,31,136,31,185,31,210,31,56,31,181,31,108,31,253,31,87,31,233,31,233,30,242,31,92,31,24,31,125,31,183,31,183,30,15,31,221,31,221,30,225,31,13,31,13,30,59,31,12,31,159,31,159,30,225,31,14,31,66,31,179,31,179,30,227,31,138,31,13,31,13,30,177,31,77,31,77,30,61,31,171,31,49,31,124,31,70,31,70,30,131,31,158,31,246,31,246,30,238,31,110,31,110,30,156,31,156,30,173,31,144,31,26,31,227,31,227,30,84,31,84,30,84,29,221,31,40,31,57,31,181,31,53,31,81,31,109,31,103,31,167,31,238,31,238,30,251,31,233,31,122,31,19,31,19,30,28,31,76,31,76,30,185,31,185,30,160,31,70,31,68,31,53,31,47,31,214,31,214,30,206,31,101,31,101,30,137,31,98,31,98,30,98,29,84,31,39,31,106,31,182,31,35,31,219,31,64,31,104,31,92,31,92,30,195,31,205,31,126,31,222,31,9,31,9,30,71,31,75,31,187,31,187,30,187,29,46,31,179,31,55,31,67,31,40,31,40,30,62,31,194,31,242,31,181,31,33,31,33,30,33,29,157,31,94,31,94,30,147,31,147,30,147,29,18,31,197,31,197,30,218,31,80,31,164,31,151,31,151,30,122,31,114,31,150,31,29,31,242,31,35,31,99,31,201,31,228,31,228,30,157,31,6,31,186,31,73,31,8,31,51,31,89,31,217,31,177,31,205,31,182,31,98,31,71,31,93,31,201,31,196,31,195,31,173,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
