-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 614;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,138,0,90,0,137,0,0,0,197,0,62,0,142,0,150,0,5,0,181,0,97,0,0,0,124,0,210,0,228,0,208,0,0,0,224,0,0,0,0,0,97,0,0,0,100,0,202,0,250,0,16,0,95,0,186,0,158,0,6,0,0,0,219,0,125,0,27,0,1,0,38,0,41,0,239,0,19,0,137,0,100,0,244,0,149,0,181,0,31,0,158,0,71,0,0,0,0,0,122,0,0,0,144,0,94,0,0,0,136,0,247,0,83,0,17,0,135,0,0,0,233,0,69,0,180,0,40,0,219,0,70,0,0,0,125,0,0,0,24,0,17,0,0,0,250,0,175,0,0,0,210,0,13,0,16,0,216,0,0,0,72,0,158,0,18,0,0,0,56,0,0,0,137,0,18,0,194,0,0,0,125,0,108,0,74,0,81,0,130,0,0,0,22,0,0,0,0,0,30,0,0,0,29,0,202,0,243,0,249,0,213,0,36,0,68,0,0,0,0,0,0,0,127,0,0,0,37,0,0,0,59,0,0,0,240,0,252,0,188,0,0,0,0,0,164,0,189,0,90,0,19,0,0,0,26,0,147,0,0,0,0,0,183,0,79,0,148,0,0,0,171,0,175,0,106,0,94,0,16,0,0,0,214,0,0,0,238,0,50,0,19,0,0,0,253,0,0,0,249,0,62,0,203,0,0,0,0,0,22,0,0,0,140,0,228,0,0,0,217,0,165,0,203,0,186,0,220,0,188,0,32,0,199,0,24,0,229,0,22,0,201,0,44,0,124,0,195,0,55,0,28,0,120,0,0,0,131,0,0,0,10,0,197,0,185,0,83,0,176,0,199,0,59,0,35,0,221,0,156,0,49,0,203,0,88,0,157,0,113,0,104,0,122,0,113,0,0,0,111,0,0,0,50,0,21,0,152,0,37,0,84,0,121,0,154,0,88,0,183,0,0,0,250,0,171,0,199,0,74,0,0,0,169,0,214,0,75,0,155,0,207,0,102,0,31,0,7,0,193,0,223,0,168,0,0,0,0,0,73,0,132,0,7,0,222,0,0,0,214,0,0,0,163,0,214,0,246,0,13,0,144,0,0,0,156,0,51,0,40,0,173,0,245,0,42,0,84,0,0,0,0,0,17,0,170,0,0,0,43,0,0,0,191,0,224,0,0,0,0,0,40,0,163,0,0,0,0,0,54,0,0,0,29,0,0,0,0,0,155,0,164,0,151,0,125,0,183,0,110,0,211,0,221,0,36,0,33,0,153,0,117,0,72,0,209,0,133,0,31,0,39,0,138,0,163,0,133,0,237,0,58,0,29,0,45,0,0,0,97,0,181,0,143,0,167,0,47,0,166,0,52,0,80,0,84,0,196,0,0,0,165,0,240,0,0,0,72,0,0,0,235,0,15,0,220,0,39,0,0,0,97,0,196,0,62,0,75,0,215,0,34,0,176,0,237,0,243,0,78,0,29,0,0,0,1,0,237,0,234,0,24,0,80,0,0,0,9,0,0,0,3,0,228,0,212,0,43,0,226,0,36,0,0,0,15,0,0,0,204,0,0,0,190,0,0,0,242,0,26,0,159,0,50,0,124,0,117,0,164,0,206,0,137,0,25,0,131,0,237,0,191,0,68,0,183,0,0,0,200,0,0,0,121,0,71,0,102,0,53,0,0,0,177,0,61,0,103,0,119,0,57,0,92,0,76,0,216,0,140,0,202,0,142,0,56,0,0,0,113,0,236,0,187,0,0,0,25,0,0,0,161,0,88,0,2,0,0,0,172,0,194,0,139,0,0,0,242,0,0,0,150,0,65,0,0,0,105,0,178,0,243,0,0,0,12,0,13,0,73,0,89,0,227,0,201,0,0,0,0,0,214,0,93,0,102,0,202,0,15,0,7,0,1,0,177,0,20,0,109,0,237,0,235,0,0,0,238,0,217,0,239,0,0,0,120,0,0,0,97,0,103,0,0,0,10,0,137,0,165,0,167,0,97,0,245,0,156,0,98,0,39,0,29,0,29,0,124,0,0,0,185,0,133,0,205,0,149,0,242,0,153,0,0,0,122,0,255,0,137,0,112,0,238,0,0,0,0,0,128,0,33,0,202,0,176,0,55,0,235,0,232,0,144,0,0,0,103,0,0,0,0,0,125,0,137,0,229,0,191,0,235,0,125,0,0,0,0,0,108,0,206,0,97,0,228,0,219,0,153,0,249,0,239,0,183,0,176,0,253,0,111,0,133,0,0,0,0,0,54,0,89,0,88,0,68,0,81,0,0,0,13,0,0,0,197,0,130,0,22,0,71,0,132,0,78,0,100,0,252,0,227,0,228,0,162,0,211,0,153,0,0,0,182,0,215,0,71,0,224,0,97,0,50,0,57,0,105,0,202,0,97,0,0,0,230,0,84,0,106,0,22,0,41,0,203,0,31,0,8,0,24,0,208,0,253,0,29,0,170,0,0,0,93,0,75,0,44,0,80,0,153,0,39,0,144,0,164,0,66,0,101,0,173,0,164,0,94,0,221,0,56,0,0,0,165,0,66,0,119,0,123,0,17,0,255,0,170,0,66,0,120,0,0,0,3,0,18,0,70,0,181,0,150,0,57,0,156,0,86,0,10,0,22,0,142,0,96,0,63,0,0,0,0,0,101,0,69,0,239,0,121,0,3,0,0,0,103,0,170,0,193,0,0,0,0,0,66,0,53,0,105,0,155,0,115,0,0,0,0,0,225,0,225,0,190,0,225,0,52,0,0,0,145,0,37,0);
signal scenario_full  : scenario_type := (0,0,138,31,90,31,137,31,137,30,197,31,62,31,142,31,150,31,5,31,181,31,97,31,97,30,124,31,210,31,228,31,208,31,208,30,224,31,224,30,224,29,97,31,97,30,100,31,202,31,250,31,16,31,95,31,186,31,158,31,6,31,6,30,219,31,125,31,27,31,1,31,38,31,41,31,239,31,19,31,137,31,100,31,244,31,149,31,181,31,31,31,158,31,71,31,71,30,71,29,122,31,122,30,144,31,94,31,94,30,136,31,247,31,83,31,17,31,135,31,135,30,233,31,69,31,180,31,40,31,219,31,70,31,70,30,125,31,125,30,24,31,17,31,17,30,250,31,175,31,175,30,210,31,13,31,16,31,216,31,216,30,72,31,158,31,18,31,18,30,56,31,56,30,137,31,18,31,194,31,194,30,125,31,108,31,74,31,81,31,130,31,130,30,22,31,22,30,22,29,30,31,30,30,29,31,202,31,243,31,249,31,213,31,36,31,68,31,68,30,68,29,68,28,127,31,127,30,37,31,37,30,59,31,59,30,240,31,252,31,188,31,188,30,188,29,164,31,189,31,90,31,19,31,19,30,26,31,147,31,147,30,147,29,183,31,79,31,148,31,148,30,171,31,175,31,106,31,94,31,16,31,16,30,214,31,214,30,238,31,50,31,19,31,19,30,253,31,253,30,249,31,62,31,203,31,203,30,203,29,22,31,22,30,140,31,228,31,228,30,217,31,165,31,203,31,186,31,220,31,188,31,32,31,199,31,24,31,229,31,22,31,201,31,44,31,124,31,195,31,55,31,28,31,120,31,120,30,131,31,131,30,10,31,197,31,185,31,83,31,176,31,199,31,59,31,35,31,221,31,156,31,49,31,203,31,88,31,157,31,113,31,104,31,122,31,113,31,113,30,111,31,111,30,50,31,21,31,152,31,37,31,84,31,121,31,154,31,88,31,183,31,183,30,250,31,171,31,199,31,74,31,74,30,169,31,214,31,75,31,155,31,207,31,102,31,31,31,7,31,193,31,223,31,168,31,168,30,168,29,73,31,132,31,7,31,222,31,222,30,214,31,214,30,163,31,214,31,246,31,13,31,144,31,144,30,156,31,51,31,40,31,173,31,245,31,42,31,84,31,84,30,84,29,17,31,170,31,170,30,43,31,43,30,191,31,224,31,224,30,224,29,40,31,163,31,163,30,163,29,54,31,54,30,29,31,29,30,29,29,155,31,164,31,151,31,125,31,183,31,110,31,211,31,221,31,36,31,33,31,153,31,117,31,72,31,209,31,133,31,31,31,39,31,138,31,163,31,133,31,237,31,58,31,29,31,45,31,45,30,97,31,181,31,143,31,167,31,47,31,166,31,52,31,80,31,84,31,196,31,196,30,165,31,240,31,240,30,72,31,72,30,235,31,15,31,220,31,39,31,39,30,97,31,196,31,62,31,75,31,215,31,34,31,176,31,237,31,243,31,78,31,29,31,29,30,1,31,237,31,234,31,24,31,80,31,80,30,9,31,9,30,3,31,228,31,212,31,43,31,226,31,36,31,36,30,15,31,15,30,204,31,204,30,190,31,190,30,242,31,26,31,159,31,50,31,124,31,117,31,164,31,206,31,137,31,25,31,131,31,237,31,191,31,68,31,183,31,183,30,200,31,200,30,121,31,71,31,102,31,53,31,53,30,177,31,61,31,103,31,119,31,57,31,92,31,76,31,216,31,140,31,202,31,142,31,56,31,56,30,113,31,236,31,187,31,187,30,25,31,25,30,161,31,88,31,2,31,2,30,172,31,194,31,139,31,139,30,242,31,242,30,150,31,65,31,65,30,105,31,178,31,243,31,243,30,12,31,13,31,73,31,89,31,227,31,201,31,201,30,201,29,214,31,93,31,102,31,202,31,15,31,7,31,1,31,177,31,20,31,109,31,237,31,235,31,235,30,238,31,217,31,239,31,239,30,120,31,120,30,97,31,103,31,103,30,10,31,137,31,165,31,167,31,97,31,245,31,156,31,98,31,39,31,29,31,29,31,124,31,124,30,185,31,133,31,205,31,149,31,242,31,153,31,153,30,122,31,255,31,137,31,112,31,238,31,238,30,238,29,128,31,33,31,202,31,176,31,55,31,235,31,232,31,144,31,144,30,103,31,103,30,103,29,125,31,137,31,229,31,191,31,235,31,125,31,125,30,125,29,108,31,206,31,97,31,228,31,219,31,153,31,249,31,239,31,183,31,176,31,253,31,111,31,133,31,133,30,133,29,54,31,89,31,88,31,68,31,81,31,81,30,13,31,13,30,197,31,130,31,22,31,71,31,132,31,78,31,100,31,252,31,227,31,228,31,162,31,211,31,153,31,153,30,182,31,215,31,71,31,224,31,97,31,50,31,57,31,105,31,202,31,97,31,97,30,230,31,84,31,106,31,22,31,41,31,203,31,31,31,8,31,24,31,208,31,253,31,29,31,170,31,170,30,93,31,75,31,44,31,80,31,153,31,39,31,144,31,164,31,66,31,101,31,173,31,164,31,94,31,221,31,56,31,56,30,165,31,66,31,119,31,123,31,17,31,255,31,170,31,66,31,120,31,120,30,3,31,18,31,70,31,181,31,150,31,57,31,156,31,86,31,10,31,22,31,142,31,96,31,63,31,63,30,63,29,101,31,69,31,239,31,121,31,3,31,3,30,103,31,170,31,193,31,193,30,193,29,66,31,53,31,105,31,155,31,115,31,115,30,115,29,225,31,225,31,190,31,225,31,52,31,52,30,145,31,37,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
