-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 789;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (18,0,224,0,16,0,9,0,18,0,88,0,158,0,8,0,28,0,139,0,39,0,181,0,131,0,38,0,110,0,207,0,164,0,38,0,124,0,21,0,178,0,10,0,95,0,211,0,223,0,136,0,216,0,217,0,0,0,158,0,243,0,137,0,0,0,187,0,190,0,121,0,105,0,15,0,97,0,151,0,15,0,100,0,224,0,108,0,82,0,50,0,14,0,97,0,141,0,199,0,113,0,5,0,120,0,157,0,153,0,34,0,0,0,254,0,248,0,0,0,78,0,0,0,43,0,154,0,182,0,140,0,0,0,105,0,247,0,153,0,0,0,27,0,154,0,7,0,20,0,199,0,168,0,39,0,156,0,0,0,148,0,132,0,76,0,174,0,193,0,0,0,0,0,233,0,0,0,0,0,140,0,103,0,69,0,0,0,79,0,80,0,146,0,226,0,96,0,136,0,71,0,198,0,75,0,22,0,42,0,190,0,138,0,69,0,55,0,62,0,174,0,64,0,56,0,174,0,201,0,233,0,172,0,96,0,21,0,108,0,0,0,200,0,0,0,217,0,71,0,0,0,197,0,151,0,76,0,249,0,191,0,0,0,0,0,0,0,0,0,0,0,229,0,38,0,75,0,170,0,181,0,2,0,70,0,142,0,151,0,102,0,188,0,33,0,180,0,131,0,0,0,131,0,243,0,93,0,178,0,159,0,0,0,17,0,0,0,0,0,48,0,6,0,252,0,63,0,169,0,70,0,80,0,94,0,60,0,99,0,0,0,0,0,58,0,149,0,73,0,0,0,2,0,86,0,180,0,243,0,140,0,41,0,0,0,0,0,7,0,0,0,3,0,158,0,35,0,45,0,73,0,173,0,241,0,144,0,196,0,44,0,233,0,198,0,133,0,49,0,0,0,101,0,182,0,2,0,81,0,217,0,173,0,85,0,113,0,0,0,0,0,229,0,230,0,34,0,0,0,0,0,71,0,117,0,0,0,0,0,237,0,92,0,33,0,71,0,132,0,174,0,95,0,204,0,0,0,177,0,99,0,33,0,83,0,99,0,44,0,174,0,0,0,101,0,29,0,191,0,41,0,45,0,49,0,139,0,212,0,119,0,115,0,0,0,85,0,252,0,7,0,67,0,195,0,2,0,237,0,155,0,0,0,232,0,48,0,102,0,37,0,0,0,108,0,245,0,145,0,0,0,136,0,154,0,162,0,75,0,180,0,173,0,131,0,34,0,180,0,44,0,0,0,221,0,129,0,71,0,183,0,112,0,0,0,222,0,222,0,0,0,0,0,0,0,0,0,230,0,102,0,23,0,0,0,22,0,0,0,48,0,0,0,102,0,71,0,95,0,0,0,111,0,126,0,210,0,0,0,0,0,55,0,143,0,0,0,168,0,212,0,23,0,103,0,224,0,106,0,73,0,201,0,188,0,216,0,11,0,124,0,0,0,0,0,202,0,0,0,109,0,75,0,163,0,224,0,235,0,233,0,0,0,118,0,43,0,27,0,0,0,249,0,212,0,0,0,243,0,233,0,87,0,0,0,171,0,0,0,69,0,123,0,215,0,155,0,93,0,129,0,227,0,119,0,0,0,125,0,2,0,87,0,139,0,0,0,200,0,0,0,196,0,204,0,155,0,200,0,66,0,20,0,224,0,46,0,0,0,178,0,0,0,0,0,184,0,189,0,1,0,200,0,0,0,15,0,193,0,0,0,14,0,0,0,212,0,152,0,197,0,116,0,249,0,6,0,0,0,91,0,0,0,63,0,17,0,220,0,0,0,250,0,0,0,0,0,101,0,51,0,230,0,237,0,237,0,43,0,61,0,56,0,188,0,210,0,0,0,0,0,83,0,162,0,246,0,0,0,75,0,155,0,29,0,242,0,228,0,148,0,208,0,88,0,129,0,173,0,0,0,232,0,173,0,109,0,221,0,233,0,3,0,72,0,18,0,0,0,199,0,51,0,124,0,197,0,243,0,0,0,22,0,0,0,29,0,30,0,124,0,200,0,0,0,50,0,0,0,0,0,200,0,33,0,182,0,161,0,163,0,244,0,128,0,208,0,254,0,55,0,232,0,132,0,49,0,71,0,126,0,205,0,164,0,135,0,0,0,146,0,194,0,37,0,135,0,202,0,0,0,193,0,36,0,144,0,0,0,0,0,239,0,248,0,68,0,148,0,0,0,0,0,202,0,0,0,165,0,254,0,137,0,202,0,34,0,210,0,0,0,209,0,70,0,110,0,139,0,232,0,114,0,69,0,117,0,98,0,67,0,31,0,0,0,98,0,102,0,199,0,222,0,13,0,156,0,1,0,169,0,81,0,0,0,173,0,141,0,179,0,89,0,16,0,6,0,0,0,70,0,124,0,74,0,220,0,144,0,1,0,107,0,179,0,152,0,92,0,146,0,0,0,159,0,47,0,52,0,146,0,45,0,0,0,0,0,123,0,68,0,0,0,0,0,0,0,30,0,206,0,203,0,0,0,163,0,157,0,94,0,81,0,237,0,138,0,111,0,103,0,127,0,144,0,57,0,145,0,34,0,0,0,73,0,24,0,246,0,174,0,0,0,221,0,135,0,80,0,0,0,86,0,39,0,18,0,200,0,0,0,73,0,123,0,81,0,237,0,212,0,0,0,47,0,174,0,0,0,98,0,136,0,72,0,0,0,178,0,99,0,223,0,0,0,114,0,53,0,75,0,45,0,0,0,231,0,56,0,118,0,153,0,253,0,0,0,250,0,34,0,6,0,0,0,51,0,0,0,164,0,37,0,169,0,163,0,17,0,0,0,0,0,53,0,9,0,1,0,37,0,177,0,158,0,233,0,0,0,0,0,110,0,4,0,156,0,0,0,14,0,57,0,0,0,37,0,246,0,130,0,0,0,40,0,170,0,253,0,243,0,93,0,99,0,111,0,0,0,177,0,208,0,103,0,139,0,0,0,26,0,0,0,0,0,11,0,0,0,69,0,42,0,102,0,86,0,124,0,61,0,48,0,33,0,1,0,0,0,68,0,189,0,102,0,202,0,67,0,187,0,66,0,169,0,0,0,30,0,0,0,188,0,205,0,178,0,11,0,188,0,223,0,225,0,0,0,85,0,16,0,103,0,13,0,28,0,0,0,168,0,208,0,0,0,67,0,10,0,0,0,127,0,0,0,246,0,130,0,13,0,108,0,128,0,5,0,112,0,164,0,185,0,225,0,158,0,53,0,0,0,217,0,0,0,4,0,241,0,68,0,0,0,59,0,191,0,15,0,0,0,84,0,0,0,0,0,123,0,142,0,174,0,14,0,2,0,47,0,0,0,230,0,58,0,224,0,191,0,0,0,192,0,0,0,170,0,65,0,69,0,27,0,9,0,65,0,110,0,0,0,208,0,24,0,118,0,85,0,0,0,138,0,116,0,0,0,43,0,3,0,146,0,165,0,99,0,67,0,36,0,104,0,188,0,138,0,58,0,8,0,74,0,23,0,167,0,193,0,180,0,241,0,175,0,180,0,38,0,132,0,191,0,190,0,0,0,157,0,0,0,0,0,173,0,0,0);
signal scenario_full  : scenario_type := (18,31,224,31,16,31,9,31,18,31,88,31,158,31,8,31,28,31,139,31,39,31,181,31,131,31,38,31,110,31,207,31,164,31,38,31,124,31,21,31,178,31,10,31,95,31,211,31,223,31,136,31,216,31,217,31,217,30,158,31,243,31,137,31,137,30,187,31,190,31,121,31,105,31,15,31,97,31,151,31,15,31,100,31,224,31,108,31,82,31,50,31,14,31,97,31,141,31,199,31,113,31,5,31,120,31,157,31,153,31,34,31,34,30,254,31,248,31,248,30,78,31,78,30,43,31,154,31,182,31,140,31,140,30,105,31,247,31,153,31,153,30,27,31,154,31,7,31,20,31,199,31,168,31,39,31,156,31,156,30,148,31,132,31,76,31,174,31,193,31,193,30,193,29,233,31,233,30,233,29,140,31,103,31,69,31,69,30,79,31,80,31,146,31,226,31,96,31,136,31,71,31,198,31,75,31,22,31,42,31,190,31,138,31,69,31,55,31,62,31,174,31,64,31,56,31,174,31,201,31,233,31,172,31,96,31,21,31,108,31,108,30,200,31,200,30,217,31,71,31,71,30,197,31,151,31,76,31,249,31,191,31,191,30,191,29,191,28,191,27,191,26,229,31,38,31,75,31,170,31,181,31,2,31,70,31,142,31,151,31,102,31,188,31,33,31,180,31,131,31,131,30,131,31,243,31,93,31,178,31,159,31,159,30,17,31,17,30,17,29,48,31,6,31,252,31,63,31,169,31,70,31,80,31,94,31,60,31,99,31,99,30,99,29,58,31,149,31,73,31,73,30,2,31,86,31,180,31,243,31,140,31,41,31,41,30,41,29,7,31,7,30,3,31,158,31,35,31,45,31,73,31,173,31,241,31,144,31,196,31,44,31,233,31,198,31,133,31,49,31,49,30,101,31,182,31,2,31,81,31,217,31,173,31,85,31,113,31,113,30,113,29,229,31,230,31,34,31,34,30,34,29,71,31,117,31,117,30,117,29,237,31,92,31,33,31,71,31,132,31,174,31,95,31,204,31,204,30,177,31,99,31,33,31,83,31,99,31,44,31,174,31,174,30,101,31,29,31,191,31,41,31,45,31,49,31,139,31,212,31,119,31,115,31,115,30,85,31,252,31,7,31,67,31,195,31,2,31,237,31,155,31,155,30,232,31,48,31,102,31,37,31,37,30,108,31,245,31,145,31,145,30,136,31,154,31,162,31,75,31,180,31,173,31,131,31,34,31,180,31,44,31,44,30,221,31,129,31,71,31,183,31,112,31,112,30,222,31,222,31,222,30,222,29,222,28,222,27,230,31,102,31,23,31,23,30,22,31,22,30,48,31,48,30,102,31,71,31,95,31,95,30,111,31,126,31,210,31,210,30,210,29,55,31,143,31,143,30,168,31,212,31,23,31,103,31,224,31,106,31,73,31,201,31,188,31,216,31,11,31,124,31,124,30,124,29,202,31,202,30,109,31,75,31,163,31,224,31,235,31,233,31,233,30,118,31,43,31,27,31,27,30,249,31,212,31,212,30,243,31,233,31,87,31,87,30,171,31,171,30,69,31,123,31,215,31,155,31,93,31,129,31,227,31,119,31,119,30,125,31,2,31,87,31,139,31,139,30,200,31,200,30,196,31,204,31,155,31,200,31,66,31,20,31,224,31,46,31,46,30,178,31,178,30,178,29,184,31,189,31,1,31,200,31,200,30,15,31,193,31,193,30,14,31,14,30,212,31,152,31,197,31,116,31,249,31,6,31,6,30,91,31,91,30,63,31,17,31,220,31,220,30,250,31,250,30,250,29,101,31,51,31,230,31,237,31,237,31,43,31,61,31,56,31,188,31,210,31,210,30,210,29,83,31,162,31,246,31,246,30,75,31,155,31,29,31,242,31,228,31,148,31,208,31,88,31,129,31,173,31,173,30,232,31,173,31,109,31,221,31,233,31,3,31,72,31,18,31,18,30,199,31,51,31,124,31,197,31,243,31,243,30,22,31,22,30,29,31,30,31,124,31,200,31,200,30,50,31,50,30,50,29,200,31,33,31,182,31,161,31,163,31,244,31,128,31,208,31,254,31,55,31,232,31,132,31,49,31,71,31,126,31,205,31,164,31,135,31,135,30,146,31,194,31,37,31,135,31,202,31,202,30,193,31,36,31,144,31,144,30,144,29,239,31,248,31,68,31,148,31,148,30,148,29,202,31,202,30,165,31,254,31,137,31,202,31,34,31,210,31,210,30,209,31,70,31,110,31,139,31,232,31,114,31,69,31,117,31,98,31,67,31,31,31,31,30,98,31,102,31,199,31,222,31,13,31,156,31,1,31,169,31,81,31,81,30,173,31,141,31,179,31,89,31,16,31,6,31,6,30,70,31,124,31,74,31,220,31,144,31,1,31,107,31,179,31,152,31,92,31,146,31,146,30,159,31,47,31,52,31,146,31,45,31,45,30,45,29,123,31,68,31,68,30,68,29,68,28,30,31,206,31,203,31,203,30,163,31,157,31,94,31,81,31,237,31,138,31,111,31,103,31,127,31,144,31,57,31,145,31,34,31,34,30,73,31,24,31,246,31,174,31,174,30,221,31,135,31,80,31,80,30,86,31,39,31,18,31,200,31,200,30,73,31,123,31,81,31,237,31,212,31,212,30,47,31,174,31,174,30,98,31,136,31,72,31,72,30,178,31,99,31,223,31,223,30,114,31,53,31,75,31,45,31,45,30,231,31,56,31,118,31,153,31,253,31,253,30,250,31,34,31,6,31,6,30,51,31,51,30,164,31,37,31,169,31,163,31,17,31,17,30,17,29,53,31,9,31,1,31,37,31,177,31,158,31,233,31,233,30,233,29,110,31,4,31,156,31,156,30,14,31,57,31,57,30,37,31,246,31,130,31,130,30,40,31,170,31,253,31,243,31,93,31,99,31,111,31,111,30,177,31,208,31,103,31,139,31,139,30,26,31,26,30,26,29,11,31,11,30,69,31,42,31,102,31,86,31,124,31,61,31,48,31,33,31,1,31,1,30,68,31,189,31,102,31,202,31,67,31,187,31,66,31,169,31,169,30,30,31,30,30,188,31,205,31,178,31,11,31,188,31,223,31,225,31,225,30,85,31,16,31,103,31,13,31,28,31,28,30,168,31,208,31,208,30,67,31,10,31,10,30,127,31,127,30,246,31,130,31,13,31,108,31,128,31,5,31,112,31,164,31,185,31,225,31,158,31,53,31,53,30,217,31,217,30,4,31,241,31,68,31,68,30,59,31,191,31,15,31,15,30,84,31,84,30,84,29,123,31,142,31,174,31,14,31,2,31,47,31,47,30,230,31,58,31,224,31,191,31,191,30,192,31,192,30,170,31,65,31,69,31,27,31,9,31,65,31,110,31,110,30,208,31,24,31,118,31,85,31,85,30,138,31,116,31,116,30,43,31,3,31,146,31,165,31,99,31,67,31,36,31,104,31,188,31,138,31,58,31,8,31,74,31,23,31,167,31,193,31,180,31,241,31,175,31,180,31,38,31,132,31,191,31,190,31,190,30,157,31,157,30,157,29,173,31,173,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
