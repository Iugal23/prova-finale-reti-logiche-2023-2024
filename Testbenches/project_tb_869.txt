-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 796;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,147,0,104,0,0,0,241,0,121,0,0,0,0,0,0,0,153,0,81,0,196,0,73,0,132,0,0,0,114,0,177,0,0,0,166,0,232,0,0,0,0,0,231,0,0,0,177,0,205,0,202,0,242,0,14,0,239,0,116,0,245,0,82,0,0,0,107,0,88,0,189,0,3,0,32,0,3,0,255,0,0,0,54,0,161,0,133,0,254,0,206,0,246,0,189,0,238,0,132,0,0,0,201,0,108,0,164,0,38,0,226,0,22,0,215,0,248,0,0,0,200,0,154,0,0,0,8,0,67,0,62,0,0,0,0,0,100,0,0,0,19,0,108,0,0,0,0,0,170,0,209,0,247,0,19,0,0,0,0,0,162,0,11,0,71,0,241,0,152,0,75,0,222,0,150,0,167,0,228,0,104,0,240,0,104,0,0,0,179,0,186,0,53,0,123,0,0,0,126,0,200,0,0,0,0,0,73,0,204,0,17,0,0,0,219,0,188,0,4,0,0,0,0,0,85,0,59,0,0,0,79,0,12,0,109,0,0,0,160,0,109,0,234,0,63,0,59,0,143,0,92,0,93,0,53,0,0,0,72,0,61,0,22,0,208,0,78,0,96,0,40,0,0,0,138,0,66,0,162,0,0,0,0,0,47,0,254,0,101,0,60,0,175,0,217,0,209,0,136,0,144,0,0,0,172,0,23,0,0,0,238,0,181,0,0,0,0,0,0,0,0,0,166,0,249,0,66,0,205,0,33,0,159,0,173,0,215,0,195,0,107,0,0,0,212,0,189,0,103,0,66,0,129,0,0,0,85,0,175,0,0,0,17,0,92,0,39,0,0,0,112,0,38,0,103,0,205,0,228,0,61,0,234,0,107,0,109,0,211,0,216,0,166,0,222,0,78,0,0,0,6,0,220,0,160,0,3,0,186,0,168,0,119,0,30,0,19,0,243,0,14,0,22,0,213,0,64,0,85,0,244,0,224,0,211,0,199,0,104,0,216,0,241,0,136,0,4,0,0,0,18,0,0,0,0,0,99,0,121,0,52,0,215,0,92,0,171,0,4,0,0,0,232,0,0,0,14,0,51,0,0,0,8,0,166,0,37,0,30,0,140,0,180,0,110,0,107,0,86,0,133,0,70,0,98,0,67,0,127,0,23,0,0,0,105,0,13,0,0,0,145,0,5,0,223,0,137,0,99,0,0,0,117,0,219,0,221,0,0,0,106,0,190,0,236,0,39,0,84,0,0,0,205,0,121,0,98,0,100,0,0,0,122,0,221,0,192,0,78,0,20,0,226,0,132,0,210,0,51,0,4,0,129,0,194,0,42,0,56,0,79,0,0,0,234,0,202,0,129,0,4,0,0,0,0,0,0,0,245,0,147,0,70,0,22,0,204,0,76,0,0,0,6,0,0,0,203,0,46,0,0,0,220,0,0,0,169,0,182,0,80,0,148,0,0,0,211,0,85,0,26,0,18,0,136,0,117,0,77,0,83,0,40,0,114,0,180,0,0,0,201,0,245,0,0,0,0,0,0,0,35,0,129,0,113,0,130,0,199,0,150,0,167,0,209,0,0,0,25,0,0,0,0,0,78,0,0,0,124,0,0,0,52,0,174,0,50,0,0,0,49,0,234,0,60,0,61,0,28,0,148,0,0,0,9,0,0,0,0,0,224,0,0,0,240,0,0,0,163,0,204,0,150,0,71,0,187,0,184,0,231,0,221,0,237,0,241,0,132,0,0,0,176,0,0,0,120,0,47,0,157,0,0,0,126,0,218,0,11,0,19,0,241,0,155,0,0,0,194,0,0,0,120,0,180,0,4,0,0,0,157,0,252,0,0,0,40,0,7,0,224,0,1,0,0,0,0,0,215,0,29,0,184,0,118,0,17,0,13,0,8,0,228,0,243,0,8,0,0,0,88,0,0,0,95,0,82,0,0,0,56,0,194,0,126,0,58,0,198,0,113,0,246,0,238,0,75,0,89,0,187,0,0,0,120,0,49,0,129,0,150,0,29,0,223,0,122,0,144,0,94,0,90,0,71,0,72,0,176,0,88,0,14,0,206,0,0,0,0,0,141,0,5,0,232,0,35,0,0,0,129,0,97,0,86,0,0,0,143,0,219,0,212,0,128,0,242,0,7,0,198,0,35,0,24,0,132,0,206,0,137,0,35,0,9,0,189,0,170,0,12,0,231,0,0,0,165,0,169,0,24,0,53,0,180,0,5,0,151,0,245,0,221,0,30,0,14,0,0,0,229,0,91,0,66,0,220,0,63,0,94,0,222,0,122,0,0,0,137,0,0,0,114,0,55,0,98,0,72,0,38,0,169,0,219,0,57,0,0,0,83,0,45,0,142,0,238,0,0,0,58,0,0,0,0,0,0,0,69,0,18,0,73,0,32,0,193,0,66,0,249,0,192,0,0,0,0,0,161,0,205,0,179,0,139,0,0,0,0,0,75,0,0,0,0,0,0,0,0,0,191,0,234,0,55,0,185,0,0,0,62,0,0,0,195,0,60,0,0,0,0,0,222,0,185,0,155,0,195,0,195,0,236,0,83,0,248,0,110,0,59,0,10,0,0,0,3,0,194,0,176,0,95,0,66,0,0,0,132,0,74,0,59,0,144,0,0,0,0,0,112,0,24,0,0,0,25,0,224,0,0,0,156,0,0,0,63,0,67,0,116,0,55,0,0,0,210,0,98,0,197,0,191,0,152,0,122,0,0,0,68,0,104,0,25,0,0,0,5,0,0,0,153,0,155,0,241,0,87,0,0,0,74,0,25,0,53,0,0,0,193,0,0,0,206,0,0,0,80,0,116,0,154,0,0,0,0,0,16,0,1,0,23,0,78,0,228,0,254,0,0,0,63,0,0,0,57,0,254,0,10,0,202,0,37,0,136,0,201,0,164,0,192,0,49,0,192,0,29,0,78,0,141,0,211,0,208,0,132,0,0,0,0,0,129,0,0,0,118,0,183,0,161,0,190,0,142,0,242,0,51,0,196,0,218,0,41,0,246,0,111,0,99,0,118,0,59,0,86,0,249,0,5,0,209,0,198,0,116,0,141,0,55,0,234,0,141,0,219,0,0,0,0,0,215,0,145,0,161,0,0,0,197,0,215,0,152,0,195,0,0,0,95,0,0,0,214,0,182,0,104,0,31,0,82,0,211,0,151,0,82,0,112,0,0,0,143,0,138,0,51,0,0,0,214,0,0,0,0,0,183,0,217,0,140,0,229,0,0,0,13,0,2,0,11,0,189,0,217,0,181,0,236,0,168,0,123,0,0,0,21,0,21,0,147,0,0,0,128,0,192,0,0,0,21,0,0,0,0,0,225,0,155,0,135,0,203,0,25,0,33,0,111,0,159,0,0,0,73,0,0,0,222,0,74,0,72,0,0,0,234,0,45,0,119,0,21,0,199,0,0,0,3,0,220,0,0,0,179,0,143,0,175,0,22,0,0,0,114,0,109,0,0,0,144,0,168,0,108,0,0,0,239,0,70,0,211,0,64,0,0,0,122,0,86,0,9,0,156,0,244,0,0,0,236,0,43,0,0,0,23,0,0,0,244,0,0,0,215,0);
signal scenario_full  : scenario_type := (0,0,147,31,104,31,104,30,241,31,121,31,121,30,121,29,121,28,153,31,81,31,196,31,73,31,132,31,132,30,114,31,177,31,177,30,166,31,232,31,232,30,232,29,231,31,231,30,177,31,205,31,202,31,242,31,14,31,239,31,116,31,245,31,82,31,82,30,107,31,88,31,189,31,3,31,32,31,3,31,255,31,255,30,54,31,161,31,133,31,254,31,206,31,246,31,189,31,238,31,132,31,132,30,201,31,108,31,164,31,38,31,226,31,22,31,215,31,248,31,248,30,200,31,154,31,154,30,8,31,67,31,62,31,62,30,62,29,100,31,100,30,19,31,108,31,108,30,108,29,170,31,209,31,247,31,19,31,19,30,19,29,162,31,11,31,71,31,241,31,152,31,75,31,222,31,150,31,167,31,228,31,104,31,240,31,104,31,104,30,179,31,186,31,53,31,123,31,123,30,126,31,200,31,200,30,200,29,73,31,204,31,17,31,17,30,219,31,188,31,4,31,4,30,4,29,85,31,59,31,59,30,79,31,12,31,109,31,109,30,160,31,109,31,234,31,63,31,59,31,143,31,92,31,93,31,53,31,53,30,72,31,61,31,22,31,208,31,78,31,96,31,40,31,40,30,138,31,66,31,162,31,162,30,162,29,47,31,254,31,101,31,60,31,175,31,217,31,209,31,136,31,144,31,144,30,172,31,23,31,23,30,238,31,181,31,181,30,181,29,181,28,181,27,166,31,249,31,66,31,205,31,33,31,159,31,173,31,215,31,195,31,107,31,107,30,212,31,189,31,103,31,66,31,129,31,129,30,85,31,175,31,175,30,17,31,92,31,39,31,39,30,112,31,38,31,103,31,205,31,228,31,61,31,234,31,107,31,109,31,211,31,216,31,166,31,222,31,78,31,78,30,6,31,220,31,160,31,3,31,186,31,168,31,119,31,30,31,19,31,243,31,14,31,22,31,213,31,64,31,85,31,244,31,224,31,211,31,199,31,104,31,216,31,241,31,136,31,4,31,4,30,18,31,18,30,18,29,99,31,121,31,52,31,215,31,92,31,171,31,4,31,4,30,232,31,232,30,14,31,51,31,51,30,8,31,166,31,37,31,30,31,140,31,180,31,110,31,107,31,86,31,133,31,70,31,98,31,67,31,127,31,23,31,23,30,105,31,13,31,13,30,145,31,5,31,223,31,137,31,99,31,99,30,117,31,219,31,221,31,221,30,106,31,190,31,236,31,39,31,84,31,84,30,205,31,121,31,98,31,100,31,100,30,122,31,221,31,192,31,78,31,20,31,226,31,132,31,210,31,51,31,4,31,129,31,194,31,42,31,56,31,79,31,79,30,234,31,202,31,129,31,4,31,4,30,4,29,4,28,245,31,147,31,70,31,22,31,204,31,76,31,76,30,6,31,6,30,203,31,46,31,46,30,220,31,220,30,169,31,182,31,80,31,148,31,148,30,211,31,85,31,26,31,18,31,136,31,117,31,77,31,83,31,40,31,114,31,180,31,180,30,201,31,245,31,245,30,245,29,245,28,35,31,129,31,113,31,130,31,199,31,150,31,167,31,209,31,209,30,25,31,25,30,25,29,78,31,78,30,124,31,124,30,52,31,174,31,50,31,50,30,49,31,234,31,60,31,61,31,28,31,148,31,148,30,9,31,9,30,9,29,224,31,224,30,240,31,240,30,163,31,204,31,150,31,71,31,187,31,184,31,231,31,221,31,237,31,241,31,132,31,132,30,176,31,176,30,120,31,47,31,157,31,157,30,126,31,218,31,11,31,19,31,241,31,155,31,155,30,194,31,194,30,120,31,180,31,4,31,4,30,157,31,252,31,252,30,40,31,7,31,224,31,1,31,1,30,1,29,215,31,29,31,184,31,118,31,17,31,13,31,8,31,228,31,243,31,8,31,8,30,88,31,88,30,95,31,82,31,82,30,56,31,194,31,126,31,58,31,198,31,113,31,246,31,238,31,75,31,89,31,187,31,187,30,120,31,49,31,129,31,150,31,29,31,223,31,122,31,144,31,94,31,90,31,71,31,72,31,176,31,88,31,14,31,206,31,206,30,206,29,141,31,5,31,232,31,35,31,35,30,129,31,97,31,86,31,86,30,143,31,219,31,212,31,128,31,242,31,7,31,198,31,35,31,24,31,132,31,206,31,137,31,35,31,9,31,189,31,170,31,12,31,231,31,231,30,165,31,169,31,24,31,53,31,180,31,5,31,151,31,245,31,221,31,30,31,14,31,14,30,229,31,91,31,66,31,220,31,63,31,94,31,222,31,122,31,122,30,137,31,137,30,114,31,55,31,98,31,72,31,38,31,169,31,219,31,57,31,57,30,83,31,45,31,142,31,238,31,238,30,58,31,58,30,58,29,58,28,69,31,18,31,73,31,32,31,193,31,66,31,249,31,192,31,192,30,192,29,161,31,205,31,179,31,139,31,139,30,139,29,75,31,75,30,75,29,75,28,75,27,191,31,234,31,55,31,185,31,185,30,62,31,62,30,195,31,60,31,60,30,60,29,222,31,185,31,155,31,195,31,195,31,236,31,83,31,248,31,110,31,59,31,10,31,10,30,3,31,194,31,176,31,95,31,66,31,66,30,132,31,74,31,59,31,144,31,144,30,144,29,112,31,24,31,24,30,25,31,224,31,224,30,156,31,156,30,63,31,67,31,116,31,55,31,55,30,210,31,98,31,197,31,191,31,152,31,122,31,122,30,68,31,104,31,25,31,25,30,5,31,5,30,153,31,155,31,241,31,87,31,87,30,74,31,25,31,53,31,53,30,193,31,193,30,206,31,206,30,80,31,116,31,154,31,154,30,154,29,16,31,1,31,23,31,78,31,228,31,254,31,254,30,63,31,63,30,57,31,254,31,10,31,202,31,37,31,136,31,201,31,164,31,192,31,49,31,192,31,29,31,78,31,141,31,211,31,208,31,132,31,132,30,132,29,129,31,129,30,118,31,183,31,161,31,190,31,142,31,242,31,51,31,196,31,218,31,41,31,246,31,111,31,99,31,118,31,59,31,86,31,249,31,5,31,209,31,198,31,116,31,141,31,55,31,234,31,141,31,219,31,219,30,219,29,215,31,145,31,161,31,161,30,197,31,215,31,152,31,195,31,195,30,95,31,95,30,214,31,182,31,104,31,31,31,82,31,211,31,151,31,82,31,112,31,112,30,143,31,138,31,51,31,51,30,214,31,214,30,214,29,183,31,217,31,140,31,229,31,229,30,13,31,2,31,11,31,189,31,217,31,181,31,236,31,168,31,123,31,123,30,21,31,21,31,147,31,147,30,128,31,192,31,192,30,21,31,21,30,21,29,225,31,155,31,135,31,203,31,25,31,33,31,111,31,159,31,159,30,73,31,73,30,222,31,74,31,72,31,72,30,234,31,45,31,119,31,21,31,199,31,199,30,3,31,220,31,220,30,179,31,143,31,175,31,22,31,22,30,114,31,109,31,109,30,144,31,168,31,108,31,108,30,239,31,70,31,211,31,64,31,64,30,122,31,86,31,9,31,156,31,244,31,244,30,236,31,43,31,43,30,23,31,23,30,244,31,244,30,215,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
