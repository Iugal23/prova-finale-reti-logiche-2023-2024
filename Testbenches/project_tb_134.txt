-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 555;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (196,0,3,0,224,0,0,0,0,0,177,0,146,0,151,0,41,0,171,0,222,0,36,0,6,0,178,0,205,0,169,0,96,0,215,0,0,0,179,0,231,0,138,0,40,0,163,0,155,0,254,0,0,0,232,0,71,0,254,0,67,0,27,0,44,0,101,0,231,0,0,0,237,0,62,0,81,0,128,0,229,0,0,0,253,0,47,0,116,0,250,0,122,0,111,0,194,0,0,0,68,0,175,0,109,0,28,0,0,0,60,0,219,0,87,0,0,0,28,0,83,0,0,0,206,0,0,0,195,0,208,0,215,0,93,0,24,0,55,0,102,0,133,0,85,0,174,0,0,0,207,0,73,0,132,0,136,0,0,0,51,0,0,0,70,0,213,0,0,0,28,0,60,0,73,0,0,0,0,0,48,0,4,0,0,0,0,0,193,0,52,0,0,0,0,0,212,0,69,0,26,0,0,0,32,0,113,0,0,0,209,0,79,0,36,0,57,0,219,0,213,0,53,0,143,0,79,0,0,0,0,0,251,0,143,0,151,0,102,0,9,0,0,0,139,0,194,0,4,0,141,0,151,0,0,0,34,0,208,0,134,0,253,0,0,0,177,0,18,0,52,0,169,0,171,0,42,0,192,0,254,0,0,0,0,0,0,0,112,0,0,0,143,0,0,0,75,0,223,0,143,0,163,0,208,0,61,0,119,0,0,0,160,0,0,0,0,0,0,0,219,0,127,0,59,0,92,0,74,0,23,0,0,0,92,0,109,0,188,0,0,0,141,0,128,0,137,0,72,0,227,0,143,0,7,0,185,0,109,0,52,0,167,0,230,0,92,0,0,0,102,0,218,0,172,0,136,0,116,0,16,0,0,0,231,0,19,0,214,0,182,0,227,0,41,0,247,0,0,0,224,0,199,0,238,0,203,0,235,0,0,0,153,0,14,0,0,0,66,0,84,0,170,0,33,0,23,0,218,0,0,0,74,0,36,0,0,0,141,0,181,0,203,0,156,0,171,0,111,0,0,0,198,0,0,0,0,0,86,0,63,0,202,0,68,0,250,0,48,0,0,0,76,0,210,0,243,0,10,0,68,0,229,0,10,0,169,0,159,0,46,0,0,0,0,0,0,0,159,0,58,0,144,0,0,0,221,0,55,0,0,0,168,0,0,0,141,0,181,0,123,0,202,0,81,0,52,0,210,0,232,0,223,0,166,0,65,0,0,0,220,0,37,0,174,0,184,0,138,0,202,0,133,0,109,0,246,0,220,0,8,0,45,0,196,0,0,0,67,0,0,0,184,0,151,0,58,0,28,0,45,0,141,0,0,0,1,0,228,0,181,0,5,0,67,0,0,0,222,0,97,0,44,0,0,0,26,0,162,0,249,0,90,0,97,0,229,0,0,0,204,0,99,0,7,0,0,0,155,0,18,0,104,0,30,0,181,0,54,0,0,0,0,0,81,0,183,0,9,0,0,0,0,0,0,0,47,0,192,0,169,0,118,0,104,0,17,0,45,0,252,0,59,0,0,0,11,0,0,0,156,0,137,0,203,0,243,0,18,0,220,0,218,0,105,0,142,0,16,0,13,0,0,0,237,0,116,0,185,0,187,0,69,0,149,0,71,0,134,0,219,0,14,0,91,0,136,0,0,0,109,0,182,0,174,0,227,0,171,0,172,0,79,0,176,0,203,0,0,0,46,0,227,0,0,0,0,0,49,0,237,0,95,0,0,0,124,0,0,0,0,0,145,0,57,0,0,0,28,0,0,0,236,0,42,0,0,0,0,0,246,0,136,0,55,0,55,0,207,0,0,0,195,0,0,0,140,0,0,0,94,0,34,0,30,0,178,0,112,0,55,0,0,0,1,0,28,0,205,0,229,0,64,0,0,0,157,0,45,0,169,0,0,0,146,0,0,0,75,0,161,0,74,0,0,0,209,0,249,0,215,0,161,0,34,0,244,0,0,0,165,0,107,0,224,0,92,0,89,0,0,0,0,0,0,0,16,0,13,0,174,0,247,0,0,0,111,0,220,0,0,0,57,0,55,0,0,0,0,0,116,0,0,0,0,0,0,0,97,0,88,0,138,0,81,0,29,0,203,0,15,0,0,0,151,0,0,0,66,0,4,0,124,0,175,0,46,0,154,0,110,0,177,0,0,0,88,0,212,0,114,0,140,0,251,0,130,0,0,0,131,0,188,0,241,0,0,0,0,0,0,0,233,0,0,0,49,0,77,0,26,0,22,0,27,0,111,0,151,0,14,0,28,0,230,0,76,0,18,0,5,0,192,0,0,0,83,0,4,0,229,0,231,0,62,0,0,0,57,0,210,0,0,0,0,0,86,0,231,0,131,0,0,0,0,0,161,0,44,0,0,0,0,0,66,0,106,0,0,0,216,0,235,0,201,0,0,0,0,0,245,0,248,0,222,0,0,0,0,0,216,0,247,0,183,0,0,0,31,0,0,0,125,0,217,0,86,0,111,0,129,0,148,0,150,0,61,0,28,0);
signal scenario_full  : scenario_type := (196,31,3,31,224,31,224,30,224,29,177,31,146,31,151,31,41,31,171,31,222,31,36,31,6,31,178,31,205,31,169,31,96,31,215,31,215,30,179,31,231,31,138,31,40,31,163,31,155,31,254,31,254,30,232,31,71,31,254,31,67,31,27,31,44,31,101,31,231,31,231,30,237,31,62,31,81,31,128,31,229,31,229,30,253,31,47,31,116,31,250,31,122,31,111,31,194,31,194,30,68,31,175,31,109,31,28,31,28,30,60,31,219,31,87,31,87,30,28,31,83,31,83,30,206,31,206,30,195,31,208,31,215,31,93,31,24,31,55,31,102,31,133,31,85,31,174,31,174,30,207,31,73,31,132,31,136,31,136,30,51,31,51,30,70,31,213,31,213,30,28,31,60,31,73,31,73,30,73,29,48,31,4,31,4,30,4,29,193,31,52,31,52,30,52,29,212,31,69,31,26,31,26,30,32,31,113,31,113,30,209,31,79,31,36,31,57,31,219,31,213,31,53,31,143,31,79,31,79,30,79,29,251,31,143,31,151,31,102,31,9,31,9,30,139,31,194,31,4,31,141,31,151,31,151,30,34,31,208,31,134,31,253,31,253,30,177,31,18,31,52,31,169,31,171,31,42,31,192,31,254,31,254,30,254,29,254,28,112,31,112,30,143,31,143,30,75,31,223,31,143,31,163,31,208,31,61,31,119,31,119,30,160,31,160,30,160,29,160,28,219,31,127,31,59,31,92,31,74,31,23,31,23,30,92,31,109,31,188,31,188,30,141,31,128,31,137,31,72,31,227,31,143,31,7,31,185,31,109,31,52,31,167,31,230,31,92,31,92,30,102,31,218,31,172,31,136,31,116,31,16,31,16,30,231,31,19,31,214,31,182,31,227,31,41,31,247,31,247,30,224,31,199,31,238,31,203,31,235,31,235,30,153,31,14,31,14,30,66,31,84,31,170,31,33,31,23,31,218,31,218,30,74,31,36,31,36,30,141,31,181,31,203,31,156,31,171,31,111,31,111,30,198,31,198,30,198,29,86,31,63,31,202,31,68,31,250,31,48,31,48,30,76,31,210,31,243,31,10,31,68,31,229,31,10,31,169,31,159,31,46,31,46,30,46,29,46,28,159,31,58,31,144,31,144,30,221,31,55,31,55,30,168,31,168,30,141,31,181,31,123,31,202,31,81,31,52,31,210,31,232,31,223,31,166,31,65,31,65,30,220,31,37,31,174,31,184,31,138,31,202,31,133,31,109,31,246,31,220,31,8,31,45,31,196,31,196,30,67,31,67,30,184,31,151,31,58,31,28,31,45,31,141,31,141,30,1,31,228,31,181,31,5,31,67,31,67,30,222,31,97,31,44,31,44,30,26,31,162,31,249,31,90,31,97,31,229,31,229,30,204,31,99,31,7,31,7,30,155,31,18,31,104,31,30,31,181,31,54,31,54,30,54,29,81,31,183,31,9,31,9,30,9,29,9,28,47,31,192,31,169,31,118,31,104,31,17,31,45,31,252,31,59,31,59,30,11,31,11,30,156,31,137,31,203,31,243,31,18,31,220,31,218,31,105,31,142,31,16,31,13,31,13,30,237,31,116,31,185,31,187,31,69,31,149,31,71,31,134,31,219,31,14,31,91,31,136,31,136,30,109,31,182,31,174,31,227,31,171,31,172,31,79,31,176,31,203,31,203,30,46,31,227,31,227,30,227,29,49,31,237,31,95,31,95,30,124,31,124,30,124,29,145,31,57,31,57,30,28,31,28,30,236,31,42,31,42,30,42,29,246,31,136,31,55,31,55,31,207,31,207,30,195,31,195,30,140,31,140,30,94,31,34,31,30,31,178,31,112,31,55,31,55,30,1,31,28,31,205,31,229,31,64,31,64,30,157,31,45,31,169,31,169,30,146,31,146,30,75,31,161,31,74,31,74,30,209,31,249,31,215,31,161,31,34,31,244,31,244,30,165,31,107,31,224,31,92,31,89,31,89,30,89,29,89,28,16,31,13,31,174,31,247,31,247,30,111,31,220,31,220,30,57,31,55,31,55,30,55,29,116,31,116,30,116,29,116,28,97,31,88,31,138,31,81,31,29,31,203,31,15,31,15,30,151,31,151,30,66,31,4,31,124,31,175,31,46,31,154,31,110,31,177,31,177,30,88,31,212,31,114,31,140,31,251,31,130,31,130,30,131,31,188,31,241,31,241,30,241,29,241,28,233,31,233,30,49,31,77,31,26,31,22,31,27,31,111,31,151,31,14,31,28,31,230,31,76,31,18,31,5,31,192,31,192,30,83,31,4,31,229,31,231,31,62,31,62,30,57,31,210,31,210,30,210,29,86,31,231,31,131,31,131,30,131,29,161,31,44,31,44,30,44,29,66,31,106,31,106,30,216,31,235,31,201,31,201,30,201,29,245,31,248,31,222,31,222,30,222,29,216,31,247,31,183,31,183,30,31,31,31,30,125,31,217,31,86,31,111,31,129,31,148,31,150,31,61,31,28,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
