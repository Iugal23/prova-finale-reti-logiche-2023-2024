-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 434;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (199,0,138,0,0,0,218,0,192,0,32,0,234,0,155,0,0,0,230,0,137,0,0,0,163,0,225,0,66,0,85,0,255,0,95,0,0,0,0,0,145,0,69,0,152,0,125,0,51,0,68,0,30,0,55,0,0,0,152,0,130,0,159,0,153,0,0,0,0,0,61,0,0,0,15,0,0,0,173,0,0,0,135,0,180,0,132,0,0,0,197,0,211,0,102,0,164,0,192,0,76,0,148,0,68,0,0,0,243,0,0,0,92,0,252,0,4,0,120,0,120,0,89,0,155,0,92,0,185,0,177,0,40,0,250,0,118,0,87,0,41,0,202,0,143,0,0,0,144,0,51,0,0,0,25,0,180,0,38,0,87,0,137,0,210,0,0,0,241,0,174,0,0,0,233,0,84,0,115,0,75,0,204,0,180,0,159,0,53,0,0,0,0,0,98,0,114,0,214,0,0,0,164,0,16,0,226,0,227,0,26,0,183,0,193,0,73,0,180,0,66,0,0,0,85,0,215,0,88,0,175,0,20,0,11,0,216,0,35,0,178,0,167,0,64,0,86,0,158,0,0,0,223,0,241,0,91,0,164,0,78,0,0,0,43,0,82,0,226,0,213,0,82,0,254,0,58,0,228,0,218,0,243,0,219,0,247,0,222,0,0,0,0,0,184,0,135,0,0,0,95,0,110,0,0,0,24,0,87,0,174,0,5,0,0,0,89,0,137,0,249,0,151,0,87,0,124,0,141,0,207,0,117,0,177,0,60,0,224,0,217,0,30,0,0,0,0,0,0,0,0,0,0,0,16,0,91,0,135,0,143,0,187,0,0,0,151,0,250,0,0,0,232,0,81,0,238,0,0,0,10,0,199,0,10,0,0,0,206,0,0,0,243,0,207,0,53,0,74,0,111,0,241,0,2,0,117,0,152,0,0,0,154,0,0,0,56,0,48,0,83,0,7,0,67,0,0,0,219,0,27,0,14,0,132,0,0,0,123,0,4,0,85,0,0,0,179,0,204,0,48,0,242,0,171,0,96,0,181,0,19,0,0,0,0,0,224,0,114,0,12,0,188,0,115,0,83,0,131,0,205,0,161,0,4,0,156,0,173,0,149,0,185,0,103,0,207,0,153,0,238,0,0,0,10,0,0,0,32,0,25,0,194,0,116,0,171,0,145,0,233,0,0,0,145,0,0,0,230,0,250,0,125,0,107,0,13,0,30,0,38,0,246,0,171,0,163,0,192,0,174,0,103,0,225,0,242,0,1,0,0,0,187,0,149,0,59,0,148,0,0,0,200,0,198,0,133,0,159,0,182,0,253,0,213,0,87,0,0,0,190,0,54,0,199,0,118,0,219,0,28,0,83,0,235,0,224,0,95,0,0,0,149,0,208,0,245,0,176,0,86,0,243,0,217,0,0,0,0,0,182,0,178,0,235,0,202,0,114,0,153,0,72,0,190,0,0,0,221,0,0,0,211,0,202,0,114,0,236,0,105,0,94,0,34,0,120,0,0,0,244,0,221,0,0,0,144,0,6,0,118,0,201,0,148,0,163,0,219,0,128,0,77,0,0,0,0,0,92,0,90,0,70,0,71,0,0,0,0,0,213,0,62,0,115,0,1,0,125,0,0,0,254,0,128,0,6,0,122,0,200,0,43,0,30,0,0,0,25,0,195,0,70,0,151,0,212,0,102,0,162,0,230,0,131,0,0,0,201,0,169,0,134,0,221,0,93,0,0,0,114,0,238,0,112,0,127,0,213,0,180,0,84,0,5,0,56,0,238,0,28,0,30,0,123,0,110,0,200,0,209,0,20,0,0,0,145,0,8,0,100,0,241,0,0,0,89,0,49,0,224,0,6,0,250,0,84,0,230,0,168,0,125,0,62,0,185,0,74,0,64,0,168,0,178,0,231,0,0,0,72,0,128,0,211,0,60,0,144,0,203,0,0,0,0,0,10,0);
signal scenario_full  : scenario_type := (199,31,138,31,138,30,218,31,192,31,32,31,234,31,155,31,155,30,230,31,137,31,137,30,163,31,225,31,66,31,85,31,255,31,95,31,95,30,95,29,145,31,69,31,152,31,125,31,51,31,68,31,30,31,55,31,55,30,152,31,130,31,159,31,153,31,153,30,153,29,61,31,61,30,15,31,15,30,173,31,173,30,135,31,180,31,132,31,132,30,197,31,211,31,102,31,164,31,192,31,76,31,148,31,68,31,68,30,243,31,243,30,92,31,252,31,4,31,120,31,120,31,89,31,155,31,92,31,185,31,177,31,40,31,250,31,118,31,87,31,41,31,202,31,143,31,143,30,144,31,51,31,51,30,25,31,180,31,38,31,87,31,137,31,210,31,210,30,241,31,174,31,174,30,233,31,84,31,115,31,75,31,204,31,180,31,159,31,53,31,53,30,53,29,98,31,114,31,214,31,214,30,164,31,16,31,226,31,227,31,26,31,183,31,193,31,73,31,180,31,66,31,66,30,85,31,215,31,88,31,175,31,20,31,11,31,216,31,35,31,178,31,167,31,64,31,86,31,158,31,158,30,223,31,241,31,91,31,164,31,78,31,78,30,43,31,82,31,226,31,213,31,82,31,254,31,58,31,228,31,218,31,243,31,219,31,247,31,222,31,222,30,222,29,184,31,135,31,135,30,95,31,110,31,110,30,24,31,87,31,174,31,5,31,5,30,89,31,137,31,249,31,151,31,87,31,124,31,141,31,207,31,117,31,177,31,60,31,224,31,217,31,30,31,30,30,30,29,30,28,30,27,30,26,16,31,91,31,135,31,143,31,187,31,187,30,151,31,250,31,250,30,232,31,81,31,238,31,238,30,10,31,199,31,10,31,10,30,206,31,206,30,243,31,207,31,53,31,74,31,111,31,241,31,2,31,117,31,152,31,152,30,154,31,154,30,56,31,48,31,83,31,7,31,67,31,67,30,219,31,27,31,14,31,132,31,132,30,123,31,4,31,85,31,85,30,179,31,204,31,48,31,242,31,171,31,96,31,181,31,19,31,19,30,19,29,224,31,114,31,12,31,188,31,115,31,83,31,131,31,205,31,161,31,4,31,156,31,173,31,149,31,185,31,103,31,207,31,153,31,238,31,238,30,10,31,10,30,32,31,25,31,194,31,116,31,171,31,145,31,233,31,233,30,145,31,145,30,230,31,250,31,125,31,107,31,13,31,30,31,38,31,246,31,171,31,163,31,192,31,174,31,103,31,225,31,242,31,1,31,1,30,187,31,149,31,59,31,148,31,148,30,200,31,198,31,133,31,159,31,182,31,253,31,213,31,87,31,87,30,190,31,54,31,199,31,118,31,219,31,28,31,83,31,235,31,224,31,95,31,95,30,149,31,208,31,245,31,176,31,86,31,243,31,217,31,217,30,217,29,182,31,178,31,235,31,202,31,114,31,153,31,72,31,190,31,190,30,221,31,221,30,211,31,202,31,114,31,236,31,105,31,94,31,34,31,120,31,120,30,244,31,221,31,221,30,144,31,6,31,118,31,201,31,148,31,163,31,219,31,128,31,77,31,77,30,77,29,92,31,90,31,70,31,71,31,71,30,71,29,213,31,62,31,115,31,1,31,125,31,125,30,254,31,128,31,6,31,122,31,200,31,43,31,30,31,30,30,25,31,195,31,70,31,151,31,212,31,102,31,162,31,230,31,131,31,131,30,201,31,169,31,134,31,221,31,93,31,93,30,114,31,238,31,112,31,127,31,213,31,180,31,84,31,5,31,56,31,238,31,28,31,30,31,123,31,110,31,200,31,209,31,20,31,20,30,145,31,8,31,100,31,241,31,241,30,89,31,49,31,224,31,6,31,250,31,84,31,230,31,168,31,125,31,62,31,185,31,74,31,64,31,168,31,178,31,231,31,231,30,72,31,128,31,211,31,60,31,144,31,203,31,203,30,203,29,10,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
