-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 243;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (130,0,109,0,119,0,74,0,60,0,0,0,206,0,65,0,14,0,189,0,242,0,0,0,223,0,0,0,172,0,159,0,166,0,91,0,76,0,215,0,0,0,42,0,26,0,146,0,0,0,0,0,0,0,0,0,138,0,37,0,127,0,0,0,76,0,72,0,141,0,77,0,200,0,167,0,178,0,15,0,17,0,159,0,67,0,125,0,84,0,109,0,50,0,47,0,56,0,220,0,92,0,176,0,0,0,0,0,0,0,54,0,0,0,7,0,136,0,46,0,128,0,108,0,238,0,194,0,0,0,243,0,0,0,223,0,0,0,20,0,49,0,0,0,196,0,3,0,39,0,0,0,251,0,59,0,224,0,189,0,185,0,0,0,11,0,34,0,212,0,62,0,88,0,0,0,204,0,0,0,140,0,0,0,27,0,68,0,180,0,233,0,108,0,0,0,227,0,13,0,132,0,0,0,19,0,0,0,72,0,0,0,163,0,63,0,196,0,145,0,82,0,83,0,0,0,0,0,113,0,78,0,242,0,36,0,210,0,54,0,0,0,70,0,0,0,47,0,32,0,124,0,83,0,0,0,236,0,6,0,77,0,0,0,126,0,52,0,149,0,53,0,62,0,0,0,47,0,0,0,100,0,211,0,212,0,229,0,242,0,164,0,29,0,234,0,128,0,174,0,230,0,0,0,37,0,159,0,0,0,60,0,102,0,47,0,38,0,191,0,42,0,31,0,71,0,78,0,0,0,103,0,0,0,0,0,16,0,54,0,29,0,54,0,146,0,71,0,252,0,191,0,132,0,0,0,245,0,192,0,108,0,0,0,250,0,141,0,0,0,119,0,189,0,76,0,201,0,110,0,3,0,94,0,56,0,66,0,185,0,248,0,197,0,109,0,124,0,219,0,205,0,0,0,0,0,0,0,218,0,0,0,208,0,149,0,59,0,0,0,118,0,65,0,211,0,0,0,94,0,5,0,107,0,194,0,1,0,0,0,196,0,146,0,37,0,67,0,80,0,80,0,23,0,115,0,254,0,63,0,5,0,178,0,116,0,67,0,141,0,159,0,35,0,157,0,20,0,0,0,108,0,242,0,169,0);
signal scenario_full  : scenario_type := (130,31,109,31,119,31,74,31,60,31,60,30,206,31,65,31,14,31,189,31,242,31,242,30,223,31,223,30,172,31,159,31,166,31,91,31,76,31,215,31,215,30,42,31,26,31,146,31,146,30,146,29,146,28,146,27,138,31,37,31,127,31,127,30,76,31,72,31,141,31,77,31,200,31,167,31,178,31,15,31,17,31,159,31,67,31,125,31,84,31,109,31,50,31,47,31,56,31,220,31,92,31,176,31,176,30,176,29,176,28,54,31,54,30,7,31,136,31,46,31,128,31,108,31,238,31,194,31,194,30,243,31,243,30,223,31,223,30,20,31,49,31,49,30,196,31,3,31,39,31,39,30,251,31,59,31,224,31,189,31,185,31,185,30,11,31,34,31,212,31,62,31,88,31,88,30,204,31,204,30,140,31,140,30,27,31,68,31,180,31,233,31,108,31,108,30,227,31,13,31,132,31,132,30,19,31,19,30,72,31,72,30,163,31,63,31,196,31,145,31,82,31,83,31,83,30,83,29,113,31,78,31,242,31,36,31,210,31,54,31,54,30,70,31,70,30,47,31,32,31,124,31,83,31,83,30,236,31,6,31,77,31,77,30,126,31,52,31,149,31,53,31,62,31,62,30,47,31,47,30,100,31,211,31,212,31,229,31,242,31,164,31,29,31,234,31,128,31,174,31,230,31,230,30,37,31,159,31,159,30,60,31,102,31,47,31,38,31,191,31,42,31,31,31,71,31,78,31,78,30,103,31,103,30,103,29,16,31,54,31,29,31,54,31,146,31,71,31,252,31,191,31,132,31,132,30,245,31,192,31,108,31,108,30,250,31,141,31,141,30,119,31,189,31,76,31,201,31,110,31,3,31,94,31,56,31,66,31,185,31,248,31,197,31,109,31,124,31,219,31,205,31,205,30,205,29,205,28,218,31,218,30,208,31,149,31,59,31,59,30,118,31,65,31,211,31,211,30,94,31,5,31,107,31,194,31,1,31,1,30,196,31,146,31,37,31,67,31,80,31,80,31,23,31,115,31,254,31,63,31,5,31,178,31,116,31,67,31,141,31,159,31,35,31,157,31,20,31,20,30,108,31,242,31,169,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
