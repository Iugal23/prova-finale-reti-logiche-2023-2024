-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 934;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (121,0,253,0,0,0,41,0,244,0,55,0,33,0,7,0,158,0,32,0,0,0,3,0,253,0,0,0,118,0,0,0,112,0,106,0,6,0,1,0,26,0,225,0,186,0,205,0,242,0,0,0,26,0,0,0,162,0,222,0,85,0,120,0,209,0,165,0,0,0,93,0,0,0,164,0,0,0,183,0,150,0,8,0,0,0,0,0,207,0,168,0,126,0,192,0,53,0,0,0,67,0,207,0,209,0,219,0,231,0,244,0,227,0,177,0,150,0,216,0,152,0,65,0,64,0,194,0,11,0,0,0,16,0,0,0,10,0,49,0,217,0,19,0,1,0,0,0,0,0,170,0,160,0,124,0,189,0,136,0,196,0,112,0,52,0,104,0,216,0,33,0,128,0,70,0,0,0,91,0,230,0,11,0,92,0,38,0,55,0,150,0,247,0,11,0,0,0,75,0,19,0,76,0,75,0,243,0,139,0,173,0,68,0,77,0,255,0,40,0,221,0,3,0,95,0,0,0,67,0,35,0,0,0,168,0,212,0,199,0,0,0,88,0,5,0,236,0,76,0,67,0,12,0,244,0,101,0,210,0,82,0,0,0,0,0,83,0,18,0,167,0,148,0,0,0,27,0,5,0,58,0,65,0,0,0,244,0,114,0,239,0,189,0,0,0,151,0,0,0,0,0,251,0,117,0,221,0,0,0,40,0,0,0,174,0,105,0,166,0,201,0,76,0,179,0,41,0,38,0,95,0,123,0,211,0,215,0,138,0,34,0,118,0,225,0,20,0,0,0,188,0,0,0,23,0,114,0,0,0,0,0,238,0,0,0,189,0,0,0,206,0,6,0,0,0,103,0,105,0,0,0,189,0,0,0,104,0,144,0,65,0,50,0,40,0,162,0,104,0,92,0,0,0,0,0,86,0,53,0,0,0,0,0,107,0,189,0,65,0,51,0,163,0,54,0,0,0,45,0,150,0,20,0,0,0,171,0,199,0,75,0,189,0,8,0,118,0,63,0,246,0,165,0,82,0,214,0,68,0,0,0,0,0,33,0,0,0,142,0,144,0,71,0,232,0,106,0,69,0,100,0,0,0,158,0,75,0,220,0,76,0,0,0,244,0,44,0,138,0,192,0,4,0,177,0,166,0,234,0,245,0,175,0,137,0,202,0,27,0,250,0,0,0,0,0,115,0,83,0,125,0,66,0,175,0,172,0,30,0,65,0,4,0,234,0,58,0,208,0,254,0,253,0,61,0,205,0,171,0,0,0,0,0,10,0,238,0,162,0,253,0,47,0,21,0,0,0,206,0,0,0,0,0,0,0,209,0,0,0,29,0,141,0,0,0,217,0,171,0,92,0,85,0,152,0,0,0,229,0,132,0,134,0,60,0,0,0,139,0,0,0,233,0,45,0,192,0,122,0,101,0,199,0,175,0,85,0,0,0,0,0,132,0,168,0,0,0,0,0,5,0,0,0,77,0,93,0,38,0,0,0,246,0,104,0,38,0,0,0,148,0,61,0,202,0,241,0,0,0,247,0,20,0,226,0,0,0,199,0,5,0,0,0,129,0,55,0,0,0,0,0,77,0,225,0,223,0,195,0,122,0,185,0,0,0,4,0,182,0,50,0,142,0,0,0,211,0,85,0,191,0,0,0,0,0,179,0,8,0,122,0,205,0,29,0,127,0,117,0,229,0,80,0,191,0,13,0,0,0,0,0,0,0,0,0,41,0,122,0,0,0,231,0,163,0,76,0,0,0,0,0,164,0,0,0,30,0,157,0,0,0,135,0,0,0,0,0,78,0,23,0,181,0,229,0,189,0,0,0,7,0,130,0,60,0,187,0,0,0,157,0,223,0,61,0,220,0,41,0,225,0,58,0,24,0,115,0,255,0,242,0,0,0,252,0,0,0,65,0,0,0,76,0,141,0,13,0,0,0,7,0,63,0,130,0,97,0,128,0,55,0,70,0,0,0,37,0,211,0,17,0,47,0,0,0,132,0,36,0,105,0,115,0,186,0,83,0,66,0,0,0,32,0,166,0,19,0,75,0,154,0,142,0,154,0,49,0,213,0,0,0,170,0,0,0,0,0,69,0,52,0,0,0,70,0,181,0,195,0,28,0,0,0,128,0,44,0,165,0,92,0,246,0,247,0,126,0,68,0,30,0,0,0,178,0,107,0,66,0,0,0,107,0,29,0,214,0,42,0,125,0,0,0,122,0,152,0,200,0,149,0,0,0,72,0,21,0,5,0,78,0,117,0,6,0,145,0,77,0,70,0,138,0,170,0,0,0,91,0,181,0,0,0,63,0,218,0,5,0,251,0,0,0,0,0,92,0,187,0,61,0,152,0,99,0,0,0,0,0,253,0,108,0,221,0,27,0,0,0,137,0,67,0,0,0,175,0,34,0,107,0,251,0,0,0,128,0,0,0,8,0,114,0,215,0,0,0,32,0,70,0,109,0,178,0,116,0,22,0,131,0,0,0,23,0,180,0,156,0,33,0,203,0,36,0,245,0,203,0,225,0,90,0,85,0,0,0,0,0,0,0,71,0,211,0,51,0,221,0,230,0,0,0,191,0,0,0,48,0,0,0,147,0,0,0,0,0,198,0,96,0,141,0,152,0,255,0,1,0,0,0,237,0,100,0,47,0,238,0,178,0,31,0,0,0,227,0,136,0,252,0,201,0,36,0,183,0,5,0,160,0,114,0,88,0,0,0,34,0,214,0,168,0,4,0,139,0,247,0,87,0,158,0,217,0,131,0,0,0,190,0,166,0,116,0,54,0,109,0,60,0,246,0,127,0,232,0,109,0,145,0,175,0,24,0,0,0,0,0,84,0,99,0,176,0,149,0,92,0,32,0,207,0,61,0,131,0,123,0,77,0,10,0,165,0,101,0,254,0,123,0,84,0,46,0,0,0,36,0,58,0,0,0,186,0,100,0,115,0,0,0,192,0,0,0,169,0,24,0,107,0,8,0,214,0,233,0,157,0,0,0,232,0,213,0,126,0,50,0,235,0,24,0,0,0,0,0,206,0,27,0,0,0,234,0,0,0,77,0,8,0,106,0,0,0,228,0,59,0,46,0,27,0,46,0,202,0,0,0,94,0,0,0,178,0,33,0,145,0,0,0,239,0,0,0,42,0,232,0,0,0,233,0,217,0,224,0,184,0,135,0,129,0,174,0,5,0,178,0,109,0,217,0,80,0,3,0,90,0,173,0,247,0,11,0,0,0,39,0,145,0,57,0,54,0,242,0,55,0,110,0,216,0,230,0,0,0,185,0,6,0,0,0,61,0,0,0,132,0,0,0,44,0,194,0,8,0,144,0,33,0,58,0,91,0,156,0,209,0,196,0,0,0,248,0,0,0,65,0,30,0,126,0,17,0,97,0,222,0,180,0,78,0,253,0,0,0,0,0,14,0,251,0,97,0,141,0,83,0,225,0,251,0,0,0,185,0,12,0,249,0,238,0,102,0,149,0,0,0,0,0,118,0,53,0,70,0,221,0,88,0,248,0,170,0,182,0,175,0,230,0,10,0,113,0,68,0,240,0,0,0,145,0,3,0,40,0,88,0,209,0,0,0,0,0,0,0,0,0,0,0,185,0,162,0,66,0,168,0,75,0,171,0,56,0,0,0,0,0,117,0,0,0,120,0,105,0,135,0,37,0,0,0,76,0,34,0,0,0,93,0,154,0,119,0,182,0,240,0,0,0,144,0,0,0,189,0,111,0,254,0,14,0,101,0,77,0,95,0,0,0,0,0,207,0,0,0,231,0,77,0,7,0,111,0,0,0,207,0,3,0,64,0,127,0,29,0,42,0,126,0,10,0,0,0,174,0,110,0,237,0,155,0,211,0,70,0,235,0,21,0,251,0,204,0,32,0,66,0,226,0,0,0,1,0,0,0,245,0,0,0,216,0,107,0,237,0,43,0,227,0,199,0,0,0,241,0,24,0,0,0,229,0,17,0,13,0,0,0,223,0,169,0,83,0,0,0,157,0,170,0,147,0,55,0,0,0,122,0,166,0,0,0,77,0,84,0,0,0,158,0,0,0,9,0,20,0,0,0,92,0,209,0,100,0,0,0,65,0,238,0,68,0,0,0,0,0,37,0,108,0,155,0,0,0,111,0,195,0,8,0,180,0,148,0,182,0,206,0,0,0,20,0,89,0,101,0,245,0,96,0,152,0,0,0,90,0);
signal scenario_full  : scenario_type := (121,31,253,31,253,30,41,31,244,31,55,31,33,31,7,31,158,31,32,31,32,30,3,31,253,31,253,30,118,31,118,30,112,31,106,31,6,31,1,31,26,31,225,31,186,31,205,31,242,31,242,30,26,31,26,30,162,31,222,31,85,31,120,31,209,31,165,31,165,30,93,31,93,30,164,31,164,30,183,31,150,31,8,31,8,30,8,29,207,31,168,31,126,31,192,31,53,31,53,30,67,31,207,31,209,31,219,31,231,31,244,31,227,31,177,31,150,31,216,31,152,31,65,31,64,31,194,31,11,31,11,30,16,31,16,30,10,31,49,31,217,31,19,31,1,31,1,30,1,29,170,31,160,31,124,31,189,31,136,31,196,31,112,31,52,31,104,31,216,31,33,31,128,31,70,31,70,30,91,31,230,31,11,31,92,31,38,31,55,31,150,31,247,31,11,31,11,30,75,31,19,31,76,31,75,31,243,31,139,31,173,31,68,31,77,31,255,31,40,31,221,31,3,31,95,31,95,30,67,31,35,31,35,30,168,31,212,31,199,31,199,30,88,31,5,31,236,31,76,31,67,31,12,31,244,31,101,31,210,31,82,31,82,30,82,29,83,31,18,31,167,31,148,31,148,30,27,31,5,31,58,31,65,31,65,30,244,31,114,31,239,31,189,31,189,30,151,31,151,30,151,29,251,31,117,31,221,31,221,30,40,31,40,30,174,31,105,31,166,31,201,31,76,31,179,31,41,31,38,31,95,31,123,31,211,31,215,31,138,31,34,31,118,31,225,31,20,31,20,30,188,31,188,30,23,31,114,31,114,30,114,29,238,31,238,30,189,31,189,30,206,31,6,31,6,30,103,31,105,31,105,30,189,31,189,30,104,31,144,31,65,31,50,31,40,31,162,31,104,31,92,31,92,30,92,29,86,31,53,31,53,30,53,29,107,31,189,31,65,31,51,31,163,31,54,31,54,30,45,31,150,31,20,31,20,30,171,31,199,31,75,31,189,31,8,31,118,31,63,31,246,31,165,31,82,31,214,31,68,31,68,30,68,29,33,31,33,30,142,31,144,31,71,31,232,31,106,31,69,31,100,31,100,30,158,31,75,31,220,31,76,31,76,30,244,31,44,31,138,31,192,31,4,31,177,31,166,31,234,31,245,31,175,31,137,31,202,31,27,31,250,31,250,30,250,29,115,31,83,31,125,31,66,31,175,31,172,31,30,31,65,31,4,31,234,31,58,31,208,31,254,31,253,31,61,31,205,31,171,31,171,30,171,29,10,31,238,31,162,31,253,31,47,31,21,31,21,30,206,31,206,30,206,29,206,28,209,31,209,30,29,31,141,31,141,30,217,31,171,31,92,31,85,31,152,31,152,30,229,31,132,31,134,31,60,31,60,30,139,31,139,30,233,31,45,31,192,31,122,31,101,31,199,31,175,31,85,31,85,30,85,29,132,31,168,31,168,30,168,29,5,31,5,30,77,31,93,31,38,31,38,30,246,31,104,31,38,31,38,30,148,31,61,31,202,31,241,31,241,30,247,31,20,31,226,31,226,30,199,31,5,31,5,30,129,31,55,31,55,30,55,29,77,31,225,31,223,31,195,31,122,31,185,31,185,30,4,31,182,31,50,31,142,31,142,30,211,31,85,31,191,31,191,30,191,29,179,31,8,31,122,31,205,31,29,31,127,31,117,31,229,31,80,31,191,31,13,31,13,30,13,29,13,28,13,27,41,31,122,31,122,30,231,31,163,31,76,31,76,30,76,29,164,31,164,30,30,31,157,31,157,30,135,31,135,30,135,29,78,31,23,31,181,31,229,31,189,31,189,30,7,31,130,31,60,31,187,31,187,30,157,31,223,31,61,31,220,31,41,31,225,31,58,31,24,31,115,31,255,31,242,31,242,30,252,31,252,30,65,31,65,30,76,31,141,31,13,31,13,30,7,31,63,31,130,31,97,31,128,31,55,31,70,31,70,30,37,31,211,31,17,31,47,31,47,30,132,31,36,31,105,31,115,31,186,31,83,31,66,31,66,30,32,31,166,31,19,31,75,31,154,31,142,31,154,31,49,31,213,31,213,30,170,31,170,30,170,29,69,31,52,31,52,30,70,31,181,31,195,31,28,31,28,30,128,31,44,31,165,31,92,31,246,31,247,31,126,31,68,31,30,31,30,30,178,31,107,31,66,31,66,30,107,31,29,31,214,31,42,31,125,31,125,30,122,31,152,31,200,31,149,31,149,30,72,31,21,31,5,31,78,31,117,31,6,31,145,31,77,31,70,31,138,31,170,31,170,30,91,31,181,31,181,30,63,31,218,31,5,31,251,31,251,30,251,29,92,31,187,31,61,31,152,31,99,31,99,30,99,29,253,31,108,31,221,31,27,31,27,30,137,31,67,31,67,30,175,31,34,31,107,31,251,31,251,30,128,31,128,30,8,31,114,31,215,31,215,30,32,31,70,31,109,31,178,31,116,31,22,31,131,31,131,30,23,31,180,31,156,31,33,31,203,31,36,31,245,31,203,31,225,31,90,31,85,31,85,30,85,29,85,28,71,31,211,31,51,31,221,31,230,31,230,30,191,31,191,30,48,31,48,30,147,31,147,30,147,29,198,31,96,31,141,31,152,31,255,31,1,31,1,30,237,31,100,31,47,31,238,31,178,31,31,31,31,30,227,31,136,31,252,31,201,31,36,31,183,31,5,31,160,31,114,31,88,31,88,30,34,31,214,31,168,31,4,31,139,31,247,31,87,31,158,31,217,31,131,31,131,30,190,31,166,31,116,31,54,31,109,31,60,31,246,31,127,31,232,31,109,31,145,31,175,31,24,31,24,30,24,29,84,31,99,31,176,31,149,31,92,31,32,31,207,31,61,31,131,31,123,31,77,31,10,31,165,31,101,31,254,31,123,31,84,31,46,31,46,30,36,31,58,31,58,30,186,31,100,31,115,31,115,30,192,31,192,30,169,31,24,31,107,31,8,31,214,31,233,31,157,31,157,30,232,31,213,31,126,31,50,31,235,31,24,31,24,30,24,29,206,31,27,31,27,30,234,31,234,30,77,31,8,31,106,31,106,30,228,31,59,31,46,31,27,31,46,31,202,31,202,30,94,31,94,30,178,31,33,31,145,31,145,30,239,31,239,30,42,31,232,31,232,30,233,31,217,31,224,31,184,31,135,31,129,31,174,31,5,31,178,31,109,31,217,31,80,31,3,31,90,31,173,31,247,31,11,31,11,30,39,31,145,31,57,31,54,31,242,31,55,31,110,31,216,31,230,31,230,30,185,31,6,31,6,30,61,31,61,30,132,31,132,30,44,31,194,31,8,31,144,31,33,31,58,31,91,31,156,31,209,31,196,31,196,30,248,31,248,30,65,31,30,31,126,31,17,31,97,31,222,31,180,31,78,31,253,31,253,30,253,29,14,31,251,31,97,31,141,31,83,31,225,31,251,31,251,30,185,31,12,31,249,31,238,31,102,31,149,31,149,30,149,29,118,31,53,31,70,31,221,31,88,31,248,31,170,31,182,31,175,31,230,31,10,31,113,31,68,31,240,31,240,30,145,31,3,31,40,31,88,31,209,31,209,30,209,29,209,28,209,27,209,26,185,31,162,31,66,31,168,31,75,31,171,31,56,31,56,30,56,29,117,31,117,30,120,31,105,31,135,31,37,31,37,30,76,31,34,31,34,30,93,31,154,31,119,31,182,31,240,31,240,30,144,31,144,30,189,31,111,31,254,31,14,31,101,31,77,31,95,31,95,30,95,29,207,31,207,30,231,31,77,31,7,31,111,31,111,30,207,31,3,31,64,31,127,31,29,31,42,31,126,31,10,31,10,30,174,31,110,31,237,31,155,31,211,31,70,31,235,31,21,31,251,31,204,31,32,31,66,31,226,31,226,30,1,31,1,30,245,31,245,30,216,31,107,31,237,31,43,31,227,31,199,31,199,30,241,31,24,31,24,30,229,31,17,31,13,31,13,30,223,31,169,31,83,31,83,30,157,31,170,31,147,31,55,31,55,30,122,31,166,31,166,30,77,31,84,31,84,30,158,31,158,30,9,31,20,31,20,30,92,31,209,31,100,31,100,30,65,31,238,31,68,31,68,30,68,29,37,31,108,31,155,31,155,30,111,31,195,31,8,31,180,31,148,31,182,31,206,31,206,30,20,31,89,31,101,31,245,31,96,31,152,31,152,30,90,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
