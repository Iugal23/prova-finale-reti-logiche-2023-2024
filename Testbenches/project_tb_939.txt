-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 853;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,81,0,0,0,161,0,250,0,198,0,93,0,69,0,136,0,191,0,39,0,179,0,250,0,0,0,0,0,76,0,0,0,0,0,89,0,51,0,54,0,4,0,0,0,0,0,175,0,0,0,0,0,181,0,134,0,219,0,0,0,144,0,175,0,215,0,239,0,0,0,126,0,242,0,50,0,250,0,38,0,139,0,136,0,49,0,0,0,58,0,164,0,209,0,74,0,217,0,214,0,164,0,0,0,251,0,182,0,126,0,0,0,188,0,0,0,0,0,126,0,169,0,223,0,160,0,195,0,0,0,153,0,191,0,79,0,32,0,223,0,226,0,186,0,0,0,68,0,115,0,0,0,102,0,196,0,0,0,9,0,156,0,0,0,50,0,16,0,0,0,191,0,164,0,166,0,78,0,235,0,111,0,0,0,121,0,229,0,130,0,0,0,26,0,0,0,0,0,245,0,151,0,42,0,58,0,72,0,0,0,23,0,227,0,152,0,101,0,0,0,0,0,177,0,92,0,107,0,128,0,175,0,0,0,92,0,233,0,0,0,35,0,0,0,172,0,199,0,0,0,225,0,0,0,62,0,232,0,133,0,133,0,131,0,241,0,170,0,0,0,166,0,205,0,92,0,120,0,90,0,179,0,71,0,175,0,116,0,96,0,133,0,255,0,207,0,125,0,0,0,146,0,51,0,187,0,78,0,0,0,56,0,95,0,0,0,222,0,112,0,247,0,128,0,34,0,229,0,56,0,214,0,120,0,242,0,81,0,180,0,250,0,147,0,213,0,60,0,147,0,0,0,2,0,244,0,241,0,0,0,102,0,165,0,22,0,155,0,177,0,164,0,172,0,175,0,135,0,0,0,170,0,222,0,62,0,103,0,128,0,0,0,0,0,132,0,0,0,0,0,97,0,230,0,0,0,71,0,197,0,0,0,58,0,149,0,93,0,136,0,0,0,117,0,28,0,26,0,164,0,0,0,53,0,135,0,137,0,116,0,212,0,45,0,0,0,97,0,0,0,0,0,87,0,24,0,0,0,0,0,90,0,100,0,43,0,133,0,15,0,6,0,112,0,107,0,114,0,117,0,238,0,62,0,0,0,0,0,0,0,0,0,3,0,161,0,94,0,93,0,156,0,103,0,239,0,116,0,41,0,58,0,0,0,0,0,0,0,2,0,28,0,246,0,0,0,224,0,98,0,177,0,171,0,245,0,0,0,79,0,108,0,90,0,77,0,8,0,213,0,7,0,132,0,181,0,0,0,0,0,3,0,87,0,246,0,166,0,54,0,38,0,14,0,110,0,255,0,179,0,41,0,137,0,205,0,0,0,224,0,102,0,152,0,185,0,155,0,36,0,148,0,0,0,0,0,126,0,250,0,209,0,56,0,186,0,194,0,107,0,137,0,34,0,204,0,201,0,0,0,197,0,164,0,96,0,147,0,147,0,0,0,212,0,68,0,0,0,0,0,0,0,0,0,197,0,239,0,144,0,71,0,0,0,119,0,208,0,183,0,25,0,121,0,255,0,182,0,0,0,11,0,0,0,10,0,0,0,185,0,235,0,246,0,0,0,180,0,169,0,0,0,211,0,243,0,8,0,139,0,0,0,81,0,154,0,224,0,220,0,79,0,166,0,253,0,159,0,95,0,179,0,175,0,13,0,246,0,0,0,0,0,75,0,120,0,0,0,254,0,0,0,88,0,168,0,67,0,73,0,36,0,20,0,0,0,169,0,0,0,31,0,114,0,78,0,3,0,13,0,229,0,120,0,213,0,39,0,0,0,147,0,172,0,209,0,129,0,238,0,201,0,0,0,152,0,47,0,198,0,68,0,16,0,246,0,193,0,136,0,169,0,11,0,125,0,83,0,0,0,0,0,0,0,111,0,91,0,11,0,232,0,49,0,0,0,165,0,0,0,178,0,0,0,0,0,0,0,61,0,166,0,241,0,0,0,229,0,0,0,241,0,203,0,109,0,155,0,0,0,109,0,11,0,165,0,46,0,0,0,41,0,175,0,80,0,0,0,123,0,152,0,90,0,74,0,81,0,0,0,19,0,102,0,0,0,253,0,13,0,69,0,56,0,51,0,103,0,63,0,194,0,224,0,0,0,174,0,99,0,12,0,9,0,25,0,0,0,45,0,133,0,58,0,105,0,180,0,162,0,41,0,102,0,60,0,243,0,0,0,124,0,132,0,0,0,184,0,22,0,160,0,3,0,114,0,181,0,255,0,83,0,236,0,251,0,75,0,0,0,170,0,127,0,3,0,242,0,91,0,69,0,0,0,115,0,0,0,173,0,82,0,129,0,0,0,0,0,36,0,154,0,54,0,46,0,186,0,22,0,94,0,58,0,63,0,0,0,175,0,38,0,0,0,6,0,212,0,36,0,32,0,96,0,83,0,211,0,0,0,0,0,0,0,223,0,110,0,104,0,247,0,0,0,77,0,229,0,214,0,21,0,67,0,108,0,0,0,61,0,0,0,61,0,0,0,49,0,4,0,240,0,0,0,39,0,61,0,218,0,185,0,28,0,85,0,192,0,0,0,0,0,225,0,0,0,113,0,204,0,54,0,0,0,231,0,167,0,154,0,52,0,0,0,172,0,0,0,3,0,138,0,11,0,158,0,0,0,18,0,0,0,150,0,111,0,152,0,210,0,0,0,60,0,186,0,0,0,24,0,194,0,101,0,150,0,0,0,0,0,226,0,231,0,43,0,169,0,246,0,0,0,149,0,0,0,202,0,194,0,69,0,143,0,172,0,118,0,149,0,0,0,73,0,53,0,179,0,0,0,0,0,203,0,137,0,225,0,0,0,175,0,167,0,4,0,101,0,117,0,0,0,0,0,128,0,165,0,67,0,0,0,159,0,192,0,236,0,0,0,0,0,0,0,148,0,77,0,54,0,0,0,84,0,172,0,148,0,138,0,0,0,79,0,159,0,98,0,78,0,0,0,208,0,172,0,35,0,79,0,250,0,208,0,0,0,195,0,192,0,0,0,157,0,61,0,3,0,135,0,95,0,89,0,242,0,109,0,220,0,196,0,255,0,41,0,13,0,0,0,35,0,41,0,0,0,202,0,0,0,252,0,0,0,147,0,12,0,226,0,236,0,187,0,0,0,46,0,39,0,236,0,18,0,122,0,46,0,50,0,6,0,142,0,0,0,209,0,0,0,136,0,49,0,15,0,28,0,180,0,37,0,32,0,232,0,17,0,100,0,0,0,154,0,221,0,15,0,48,0,160,0,86,0,13,0,188,0,0,0,92,0,0,0,0,0,49,0,0,0,69,0,207,0,112,0,0,0,12,0,92,0,8,0,222,0,252,0,150,0,23,0,0,0,174,0,0,0,103,0,32,0,176,0,91,0,0,0,89,0,0,0,184,0,0,0,0,0,0,0,0,0,92,0,179,0,183,0,58,0,130,0,133,0,154,0,217,0,13,0,0,0,17,0,47,0,92,0,163,0,115,0,225,0,181,0,0,0,0,0,0,0,0,0,0,0,179,0,11,0,35,0,0,0,106,0,119,0,4,0,183,0,59,0,204,0,50,0,57,0,93,0,158,0,24,0,119,0,218,0,0,0,111,0,72,0,48,0,172,0,243,0,223,0,147,0,189,0,173,0,209,0,191,0,5,0,43,0,239,0,196,0,0,0,124,0,219,0,0,0,0,0,18,0,0,0,37,0,60,0,110,0,180,0,86,0,0,0,128,0,175,0,175,0,0,0,122,0,152,0,0,0,78,0,152,0,134,0,108,0,13,0,125,0,228,0,243,0,218,0,10,0,151,0,69,0,119,0,6,0,0,0,179,0,13,0,161,0,174,0,20,0,202,0);
signal scenario_full  : scenario_type := (0,0,81,31,81,30,161,31,250,31,198,31,93,31,69,31,136,31,191,31,39,31,179,31,250,31,250,30,250,29,76,31,76,30,76,29,89,31,51,31,54,31,4,31,4,30,4,29,175,31,175,30,175,29,181,31,134,31,219,31,219,30,144,31,175,31,215,31,239,31,239,30,126,31,242,31,50,31,250,31,38,31,139,31,136,31,49,31,49,30,58,31,164,31,209,31,74,31,217,31,214,31,164,31,164,30,251,31,182,31,126,31,126,30,188,31,188,30,188,29,126,31,169,31,223,31,160,31,195,31,195,30,153,31,191,31,79,31,32,31,223,31,226,31,186,31,186,30,68,31,115,31,115,30,102,31,196,31,196,30,9,31,156,31,156,30,50,31,16,31,16,30,191,31,164,31,166,31,78,31,235,31,111,31,111,30,121,31,229,31,130,31,130,30,26,31,26,30,26,29,245,31,151,31,42,31,58,31,72,31,72,30,23,31,227,31,152,31,101,31,101,30,101,29,177,31,92,31,107,31,128,31,175,31,175,30,92,31,233,31,233,30,35,31,35,30,172,31,199,31,199,30,225,31,225,30,62,31,232,31,133,31,133,31,131,31,241,31,170,31,170,30,166,31,205,31,92,31,120,31,90,31,179,31,71,31,175,31,116,31,96,31,133,31,255,31,207,31,125,31,125,30,146,31,51,31,187,31,78,31,78,30,56,31,95,31,95,30,222,31,112,31,247,31,128,31,34,31,229,31,56,31,214,31,120,31,242,31,81,31,180,31,250,31,147,31,213,31,60,31,147,31,147,30,2,31,244,31,241,31,241,30,102,31,165,31,22,31,155,31,177,31,164,31,172,31,175,31,135,31,135,30,170,31,222,31,62,31,103,31,128,31,128,30,128,29,132,31,132,30,132,29,97,31,230,31,230,30,71,31,197,31,197,30,58,31,149,31,93,31,136,31,136,30,117,31,28,31,26,31,164,31,164,30,53,31,135,31,137,31,116,31,212,31,45,31,45,30,97,31,97,30,97,29,87,31,24,31,24,30,24,29,90,31,100,31,43,31,133,31,15,31,6,31,112,31,107,31,114,31,117,31,238,31,62,31,62,30,62,29,62,28,62,27,3,31,161,31,94,31,93,31,156,31,103,31,239,31,116,31,41,31,58,31,58,30,58,29,58,28,2,31,28,31,246,31,246,30,224,31,98,31,177,31,171,31,245,31,245,30,79,31,108,31,90,31,77,31,8,31,213,31,7,31,132,31,181,31,181,30,181,29,3,31,87,31,246,31,166,31,54,31,38,31,14,31,110,31,255,31,179,31,41,31,137,31,205,31,205,30,224,31,102,31,152,31,185,31,155,31,36,31,148,31,148,30,148,29,126,31,250,31,209,31,56,31,186,31,194,31,107,31,137,31,34,31,204,31,201,31,201,30,197,31,164,31,96,31,147,31,147,31,147,30,212,31,68,31,68,30,68,29,68,28,68,27,197,31,239,31,144,31,71,31,71,30,119,31,208,31,183,31,25,31,121,31,255,31,182,31,182,30,11,31,11,30,10,31,10,30,185,31,235,31,246,31,246,30,180,31,169,31,169,30,211,31,243,31,8,31,139,31,139,30,81,31,154,31,224,31,220,31,79,31,166,31,253,31,159,31,95,31,179,31,175,31,13,31,246,31,246,30,246,29,75,31,120,31,120,30,254,31,254,30,88,31,168,31,67,31,73,31,36,31,20,31,20,30,169,31,169,30,31,31,114,31,78,31,3,31,13,31,229,31,120,31,213,31,39,31,39,30,147,31,172,31,209,31,129,31,238,31,201,31,201,30,152,31,47,31,198,31,68,31,16,31,246,31,193,31,136,31,169,31,11,31,125,31,83,31,83,30,83,29,83,28,111,31,91,31,11,31,232,31,49,31,49,30,165,31,165,30,178,31,178,30,178,29,178,28,61,31,166,31,241,31,241,30,229,31,229,30,241,31,203,31,109,31,155,31,155,30,109,31,11,31,165,31,46,31,46,30,41,31,175,31,80,31,80,30,123,31,152,31,90,31,74,31,81,31,81,30,19,31,102,31,102,30,253,31,13,31,69,31,56,31,51,31,103,31,63,31,194,31,224,31,224,30,174,31,99,31,12,31,9,31,25,31,25,30,45,31,133,31,58,31,105,31,180,31,162,31,41,31,102,31,60,31,243,31,243,30,124,31,132,31,132,30,184,31,22,31,160,31,3,31,114,31,181,31,255,31,83,31,236,31,251,31,75,31,75,30,170,31,127,31,3,31,242,31,91,31,69,31,69,30,115,31,115,30,173,31,82,31,129,31,129,30,129,29,36,31,154,31,54,31,46,31,186,31,22,31,94,31,58,31,63,31,63,30,175,31,38,31,38,30,6,31,212,31,36,31,32,31,96,31,83,31,211,31,211,30,211,29,211,28,223,31,110,31,104,31,247,31,247,30,77,31,229,31,214,31,21,31,67,31,108,31,108,30,61,31,61,30,61,31,61,30,49,31,4,31,240,31,240,30,39,31,61,31,218,31,185,31,28,31,85,31,192,31,192,30,192,29,225,31,225,30,113,31,204,31,54,31,54,30,231,31,167,31,154,31,52,31,52,30,172,31,172,30,3,31,138,31,11,31,158,31,158,30,18,31,18,30,150,31,111,31,152,31,210,31,210,30,60,31,186,31,186,30,24,31,194,31,101,31,150,31,150,30,150,29,226,31,231,31,43,31,169,31,246,31,246,30,149,31,149,30,202,31,194,31,69,31,143,31,172,31,118,31,149,31,149,30,73,31,53,31,179,31,179,30,179,29,203,31,137,31,225,31,225,30,175,31,167,31,4,31,101,31,117,31,117,30,117,29,128,31,165,31,67,31,67,30,159,31,192,31,236,31,236,30,236,29,236,28,148,31,77,31,54,31,54,30,84,31,172,31,148,31,138,31,138,30,79,31,159,31,98,31,78,31,78,30,208,31,172,31,35,31,79,31,250,31,208,31,208,30,195,31,192,31,192,30,157,31,61,31,3,31,135,31,95,31,89,31,242,31,109,31,220,31,196,31,255,31,41,31,13,31,13,30,35,31,41,31,41,30,202,31,202,30,252,31,252,30,147,31,12,31,226,31,236,31,187,31,187,30,46,31,39,31,236,31,18,31,122,31,46,31,50,31,6,31,142,31,142,30,209,31,209,30,136,31,49,31,15,31,28,31,180,31,37,31,32,31,232,31,17,31,100,31,100,30,154,31,221,31,15,31,48,31,160,31,86,31,13,31,188,31,188,30,92,31,92,30,92,29,49,31,49,30,69,31,207,31,112,31,112,30,12,31,92,31,8,31,222,31,252,31,150,31,23,31,23,30,174,31,174,30,103,31,32,31,176,31,91,31,91,30,89,31,89,30,184,31,184,30,184,29,184,28,184,27,92,31,179,31,183,31,58,31,130,31,133,31,154,31,217,31,13,31,13,30,17,31,47,31,92,31,163,31,115,31,225,31,181,31,181,30,181,29,181,28,181,27,181,26,179,31,11,31,35,31,35,30,106,31,119,31,4,31,183,31,59,31,204,31,50,31,57,31,93,31,158,31,24,31,119,31,218,31,218,30,111,31,72,31,48,31,172,31,243,31,223,31,147,31,189,31,173,31,209,31,191,31,5,31,43,31,239,31,196,31,196,30,124,31,219,31,219,30,219,29,18,31,18,30,37,31,60,31,110,31,180,31,86,31,86,30,128,31,175,31,175,31,175,30,122,31,152,31,152,30,78,31,152,31,134,31,108,31,13,31,125,31,228,31,243,31,218,31,10,31,151,31,69,31,119,31,6,31,6,30,179,31,13,31,161,31,174,31,20,31,202,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
