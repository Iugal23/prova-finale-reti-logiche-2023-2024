-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 734;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (24,0,0,0,5,0,56,0,3,0,169,0,180,0,5,0,75,0,0,0,0,0,0,0,171,0,23,0,32,0,205,0,35,0,156,0,235,0,0,0,0,0,130,0,0,0,210,0,84,0,149,0,0,0,145,0,251,0,34,0,0,0,8,0,164,0,177,0,232,0,164,0,225,0,0,0,163,0,215,0,129,0,151,0,222,0,55,0,107,0,132,0,211,0,218,0,12,0,80,0,174,0,0,0,25,0,108,0,0,0,171,0,0,0,96,0,25,0,1,0,86,0,126,0,188,0,190,0,202,0,35,0,36,0,0,0,240,0,211,0,0,0,66,0,232,0,213,0,0,0,142,0,50,0,152,0,192,0,0,0,125,0,0,0,130,0,0,0,89,0,68,0,251,0,247,0,155,0,113,0,173,0,26,0,46,0,80,0,65,0,98,0,239,0,33,0,165,0,234,0,0,0,193,0,132,0,56,0,234,0,107,0,167,0,0,0,0,0,0,0,70,0,41,0,110,0,40,0,224,0,82,0,31,0,132,0,82,0,45,0,112,0,213,0,82,0,0,0,137,0,74,0,15,0,221,0,215,0,0,0,143,0,0,0,143,0,114,0,162,0,134,0,141,0,0,0,7,0,18,0,61,0,116,0,106,0,197,0,150,0,0,0,0,0,0,0,238,0,132,0,21,0,151,0,0,0,208,0,0,0,43,0,245,0,39,0,110,0,220,0,230,0,226,0,0,0,0,0,191,0,0,0,136,0,0,0,132,0,167,0,152,0,0,0,13,0,69,0,0,0,13,0,210,0,0,0,182,0,8,0,4,0,0,0,28,0,64,0,119,0,0,0,165,0,83,0,10,0,89,0,117,0,224,0,87,0,198,0,99,0,178,0,30,0,30,0,0,0,0,0,0,0,0,0,0,0,138,0,250,0,66,0,201,0,0,0,8,0,88,0,24,0,206,0,86,0,0,0,59,0,134,0,0,0,127,0,123,0,210,0,169,0,133,0,50,0,0,0,11,0,61,0,82,0,0,0,78,0,97,0,18,0,125,0,0,0,0,0,26,0,30,0,205,0,38,0,126,0,10,0,213,0,0,0,37,0,0,0,48,0,95,0,0,0,184,0,91,0,0,0,185,0,139,0,38,0,0,0,238,0,25,0,104,0,82,0,59,0,17,0,32,0,0,0,205,0,0,0,26,0,19,0,113,0,192,0,189,0,0,0,204,0,5,0,15,0,0,0,103,0,250,0,67,0,65,0,138,0,30,0,0,0,205,0,67,0,0,0,134,0,183,0,250,0,242,0,1,0,71,0,135,0,104,0,58,0,92,0,101,0,0,0,11,0,179,0,39,0,197,0,87,0,34,0,220,0,26,0,164,0,0,0,0,0,0,0,0,0,0,0,238,0,244,0,78,0,48,0,0,0,193,0,197,0,230,0,0,0,52,0,173,0,39,0,210,0,122,0,180,0,221,0,129,0,116,0,168,0,220,0,0,0,150,0,203,0,233,0,140,0,156,0,0,0,0,0,0,0,167,0,0,0,0,0,152,0,134,0,42,0,0,0,231,0,238,0,168,0,112,0,97,0,175,0,74,0,119,0,180,0,239,0,0,0,0,0,221,0,129,0,176,0,122,0,98,0,0,0,102,0,203,0,142,0,41,0,13,0,240,0,64,0,80,0,117,0,0,0,143,0,0,0,246,0,0,0,0,0,57,0,166,0,46,0,50,0,160,0,23,0,16,0,48,0,91,0,157,0,153,0,128,0,176,0,68,0,229,0,0,0,0,0,5,0,64,0,117,0,0,0,214,0,252,0,0,0,3,0,172,0,57,0,45,0,70,0,16,0,53,0,20,0,237,0,209,0,0,0,90,0,187,0,0,0,0,0,79,0,26,0,249,0,63,0,224,0,7,0,8,0,125,0,10,0,88,0,60,0,55,0,234,0,187,0,136,0,0,0,0,0,81,0,103,0,234,0,29,0,221,0,22,0,130,0,0,0,61,0,115,0,192,0,150,0,13,0,114,0,142,0,64,0,32,0,51,0,0,0,139,0,233,0,133,0,0,0,92,0,235,0,180,0,145,0,168,0,169,0,218,0,23,0,94,0,226,0,198,0,25,0,0,0,41,0,195,0,112,0,146,0,34,0,189,0,101,0,31,0,11,0,232,0,2,0,0,0,40,0,117,0,128,0,134,0,0,0,15,0,0,0,17,0,72,0,100,0,0,0,233,0,162,0,138,0,96,0,46,0,5,0,253,0,16,0,203,0,0,0,0,0,221,0,183,0,153,0,0,0,65,0,122,0,0,0,6,0,0,0,82,0,0,0,0,0,0,0,0,0,182,0,0,0,178,0,173,0,190,0,0,0,0,0,147,0,0,0,0,0,0,0,187,0,10,0,0,0,0,0,192,0,181,0,117,0,0,0,137,0,59,0,207,0,0,0,0,0,154,0,179,0,29,0,12,0,3,0,198,0,43,0,228,0,185,0,147,0,9,0,224,0,36,0,21,0,162,0,106,0,124,0,247,0,21,0,239,0,114,0,139,0,177,0,68,0,27,0,110,0,227,0,237,0,47,0,253,0,66,0,199,0,14,0,166,0,211,0,8,0,158,0,213,0,135,0,75,0,113,0,245,0,0,0,155,0,178,0,189,0,207,0,147,0,227,0,210,0,139,0,118,0,73,0,0,0,68,0,51,0,216,0,123,0,172,0,0,0,172,0,245,0,24,0,47,0,0,0,26,0,83,0,166,0,0,0,170,0,240,0,144,0,0,0,214,0,57,0,77,0,41,0,3,0,27,0,151,0,223,0,0,0,0,0,80,0,30,0,79,0,42,0,193,0,0,0,0,0,127,0,0,0,136,0,0,0,3,0,137,0,22,0,209,0,96,0,217,0,0,0,247,0,17,0,128,0,0,0,167,0,63,0,126,0,0,0,219,0,38,0,2,0,60,0,0,0,0,0,141,0,191,0,15,0,111,0,0,0,121,0,29,0,156,0,138,0,59,0,1,0,242,0,185,0,10,0,248,0,203,0,0,0,240,0,181,0,26,0,197,0,0,0,67,0,0,0,0,0,5,0,151,0,39,0,0,0,76,0,61,0,34,0,0,0,250,0,167,0,5,0,43,0,115,0,26,0,195,0,98,0,200,0,177,0,36,0,148,0,214,0,1,0,30,0,58,0,62,0,0,0,0,0,149,0,61,0,4,0,0,0,191,0,238,0,0,0,110,0,59,0,0,0,199,0,0,0,43,0,158,0,0,0,91,0,201,0,99,0,21,0,181,0,252,0,59,0,0,0,217,0);
signal scenario_full  : scenario_type := (24,31,24,30,5,31,56,31,3,31,169,31,180,31,5,31,75,31,75,30,75,29,75,28,171,31,23,31,32,31,205,31,35,31,156,31,235,31,235,30,235,29,130,31,130,30,210,31,84,31,149,31,149,30,145,31,251,31,34,31,34,30,8,31,164,31,177,31,232,31,164,31,225,31,225,30,163,31,215,31,129,31,151,31,222,31,55,31,107,31,132,31,211,31,218,31,12,31,80,31,174,31,174,30,25,31,108,31,108,30,171,31,171,30,96,31,25,31,1,31,86,31,126,31,188,31,190,31,202,31,35,31,36,31,36,30,240,31,211,31,211,30,66,31,232,31,213,31,213,30,142,31,50,31,152,31,192,31,192,30,125,31,125,30,130,31,130,30,89,31,68,31,251,31,247,31,155,31,113,31,173,31,26,31,46,31,80,31,65,31,98,31,239,31,33,31,165,31,234,31,234,30,193,31,132,31,56,31,234,31,107,31,167,31,167,30,167,29,167,28,70,31,41,31,110,31,40,31,224,31,82,31,31,31,132,31,82,31,45,31,112,31,213,31,82,31,82,30,137,31,74,31,15,31,221,31,215,31,215,30,143,31,143,30,143,31,114,31,162,31,134,31,141,31,141,30,7,31,18,31,61,31,116,31,106,31,197,31,150,31,150,30,150,29,150,28,238,31,132,31,21,31,151,31,151,30,208,31,208,30,43,31,245,31,39,31,110,31,220,31,230,31,226,31,226,30,226,29,191,31,191,30,136,31,136,30,132,31,167,31,152,31,152,30,13,31,69,31,69,30,13,31,210,31,210,30,182,31,8,31,4,31,4,30,28,31,64,31,119,31,119,30,165,31,83,31,10,31,89,31,117,31,224,31,87,31,198,31,99,31,178,31,30,31,30,31,30,30,30,29,30,28,30,27,30,26,138,31,250,31,66,31,201,31,201,30,8,31,88,31,24,31,206,31,86,31,86,30,59,31,134,31,134,30,127,31,123,31,210,31,169,31,133,31,50,31,50,30,11,31,61,31,82,31,82,30,78,31,97,31,18,31,125,31,125,30,125,29,26,31,30,31,205,31,38,31,126,31,10,31,213,31,213,30,37,31,37,30,48,31,95,31,95,30,184,31,91,31,91,30,185,31,139,31,38,31,38,30,238,31,25,31,104,31,82,31,59,31,17,31,32,31,32,30,205,31,205,30,26,31,19,31,113,31,192,31,189,31,189,30,204,31,5,31,15,31,15,30,103,31,250,31,67,31,65,31,138,31,30,31,30,30,205,31,67,31,67,30,134,31,183,31,250,31,242,31,1,31,71,31,135,31,104,31,58,31,92,31,101,31,101,30,11,31,179,31,39,31,197,31,87,31,34,31,220,31,26,31,164,31,164,30,164,29,164,28,164,27,164,26,238,31,244,31,78,31,48,31,48,30,193,31,197,31,230,31,230,30,52,31,173,31,39,31,210,31,122,31,180,31,221,31,129,31,116,31,168,31,220,31,220,30,150,31,203,31,233,31,140,31,156,31,156,30,156,29,156,28,167,31,167,30,167,29,152,31,134,31,42,31,42,30,231,31,238,31,168,31,112,31,97,31,175,31,74,31,119,31,180,31,239,31,239,30,239,29,221,31,129,31,176,31,122,31,98,31,98,30,102,31,203,31,142,31,41,31,13,31,240,31,64,31,80,31,117,31,117,30,143,31,143,30,246,31,246,30,246,29,57,31,166,31,46,31,50,31,160,31,23,31,16,31,48,31,91,31,157,31,153,31,128,31,176,31,68,31,229,31,229,30,229,29,5,31,64,31,117,31,117,30,214,31,252,31,252,30,3,31,172,31,57,31,45,31,70,31,16,31,53,31,20,31,237,31,209,31,209,30,90,31,187,31,187,30,187,29,79,31,26,31,249,31,63,31,224,31,7,31,8,31,125,31,10,31,88,31,60,31,55,31,234,31,187,31,136,31,136,30,136,29,81,31,103,31,234,31,29,31,221,31,22,31,130,31,130,30,61,31,115,31,192,31,150,31,13,31,114,31,142,31,64,31,32,31,51,31,51,30,139,31,233,31,133,31,133,30,92,31,235,31,180,31,145,31,168,31,169,31,218,31,23,31,94,31,226,31,198,31,25,31,25,30,41,31,195,31,112,31,146,31,34,31,189,31,101,31,31,31,11,31,232,31,2,31,2,30,40,31,117,31,128,31,134,31,134,30,15,31,15,30,17,31,72,31,100,31,100,30,233,31,162,31,138,31,96,31,46,31,5,31,253,31,16,31,203,31,203,30,203,29,221,31,183,31,153,31,153,30,65,31,122,31,122,30,6,31,6,30,82,31,82,30,82,29,82,28,82,27,182,31,182,30,178,31,173,31,190,31,190,30,190,29,147,31,147,30,147,29,147,28,187,31,10,31,10,30,10,29,192,31,181,31,117,31,117,30,137,31,59,31,207,31,207,30,207,29,154,31,179,31,29,31,12,31,3,31,198,31,43,31,228,31,185,31,147,31,9,31,224,31,36,31,21,31,162,31,106,31,124,31,247,31,21,31,239,31,114,31,139,31,177,31,68,31,27,31,110,31,227,31,237,31,47,31,253,31,66,31,199,31,14,31,166,31,211,31,8,31,158,31,213,31,135,31,75,31,113,31,245,31,245,30,155,31,178,31,189,31,207,31,147,31,227,31,210,31,139,31,118,31,73,31,73,30,68,31,51,31,216,31,123,31,172,31,172,30,172,31,245,31,24,31,47,31,47,30,26,31,83,31,166,31,166,30,170,31,240,31,144,31,144,30,214,31,57,31,77,31,41,31,3,31,27,31,151,31,223,31,223,30,223,29,80,31,30,31,79,31,42,31,193,31,193,30,193,29,127,31,127,30,136,31,136,30,3,31,137,31,22,31,209,31,96,31,217,31,217,30,247,31,17,31,128,31,128,30,167,31,63,31,126,31,126,30,219,31,38,31,2,31,60,31,60,30,60,29,141,31,191,31,15,31,111,31,111,30,121,31,29,31,156,31,138,31,59,31,1,31,242,31,185,31,10,31,248,31,203,31,203,30,240,31,181,31,26,31,197,31,197,30,67,31,67,30,67,29,5,31,151,31,39,31,39,30,76,31,61,31,34,31,34,30,250,31,167,31,5,31,43,31,115,31,26,31,195,31,98,31,200,31,177,31,36,31,148,31,214,31,1,31,30,31,58,31,62,31,62,30,62,29,149,31,61,31,4,31,4,30,191,31,238,31,238,30,110,31,59,31,59,30,199,31,199,30,43,31,158,31,158,30,91,31,201,31,99,31,21,31,181,31,252,31,59,31,59,30,217,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
