-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 622;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,202,0,140,0,49,0,31,0,84,0,251,0,184,0,0,0,227,0,186,0,87,0,0,0,139,0,0,0,201,0,173,0,103,0,159,0,195,0,0,0,246,0,161,0,22,0,177,0,151,0,137,0,240,0,202,0,104,0,174,0,56,0,163,0,30,0,179,0,196,0,88,0,126,0,252,0,83,0,244,0,15,0,0,0,134,0,215,0,82,0,11,0,143,0,153,0,155,0,249,0,205,0,49,0,11,0,96,0,207,0,177,0,0,0,164,0,220,0,0,0,239,0,27,0,0,0,76,0,0,0,174,0,82,0,201,0,250,0,194,0,0,0,223,0,53,0,239,0,206,0,125,0,124,0,190,0,0,0,0,0,41,0,0,0,201,0,62,0,61,0,25,0,0,0,131,0,246,0,143,0,253,0,203,0,0,0,139,0,164,0,50,0,162,0,175,0,193,0,6,0,232,0,221,0,120,0,106,0,42,0,241,0,0,0,0,0,189,0,252,0,0,0,237,0,62,0,159,0,16,0,205,0,202,0,120,0,187,0,129,0,228,0,0,0,0,0,71,0,97,0,0,0,88,0,83,0,18,0,30,0,249,0,212,0,3,0,6,0,0,0,48,0,0,0,211,0,139,0,211,0,241,0,177,0,0,0,192,0,211,0,127,0,153,0,0,0,0,0,226,0,0,0,176,0,246,0,0,0,0,0,170,0,216,0,79,0,0,0,0,0,186,0,0,0,246,0,55,0,95,0,0,0,84,0,144,0,43,0,6,0,172,0,236,0,223,0,0,0,0,0,183,0,3,0,224,0,0,0,45,0,72,0,227,0,248,0,0,0,64,0,0,0,128,0,13,0,117,0,57,0,51,0,83,0,0,0,124,0,60,0,199,0,54,0,188,0,131,0,62,0,238,0,124,0,92,0,169,0,0,0,0,0,189,0,231,0,4,0,233,0,116,0,0,0,98,0,4,0,63,0,106,0,0,0,90,0,190,0,142,0,118,0,200,0,104,0,9,0,0,0,0,0,0,0,51,0,51,0,0,0,0,0,0,0,251,0,0,0,116,0,135,0,16,0,100,0,0,0,167,0,129,0,185,0,235,0,86,0,0,0,0,0,150,0,98,0,70,0,77,0,234,0,64,0,167,0,0,0,179,0,168,0,17,0,253,0,179,0,160,0,82,0,237,0,161,0,85,0,196,0,0,0,189,0,84,0,0,0,142,0,249,0,91,0,211,0,144,0,106,0,0,0,215,0,69,0,117,0,28,0,162,0,115,0,239,0,1,0,82,0,5,0,36,0,13,0,10,0,238,0,129,0,71,0,0,0,160,0,42,0,184,0,104,0,203,0,158,0,0,0,49,0,18,0,217,0,153,0,137,0,166,0,211,0,0,0,0,0,109,0,224,0,227,0,7,0,138,0,61,0,120,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,40,0,134,0,208,0,26,0,75,0,213,0,240,0,139,0,185,0,166,0,140,0,163,0,0,0,0,0,0,0,188,0,0,0,0,0,3,0,60,0,0,0,190,0,86,0,160,0,0,0,128,0,147,0,142,0,207,0,216,0,233,0,201,0,5,0,227,0,82,0,0,0,0,0,250,0,0,0,0,0,204,0,188,0,0,0,173,0,138,0,92,0,121,0,112,0,204,0,12,0,117,0,0,0,0,0,0,0,66,0,0,0,124,0,254,0,179,0,0,0,180,0,96,0,109,0,38,0,253,0,169,0,238,0,103,0,0,0,0,0,92,0,216,0,0,0,150,0,9,0,165,0,249,0,29,0,100,0,159,0,81,0,0,0,0,0,0,0,5,0,183,0,132,0,239,0,222,0,204,0,192,0,215,0,0,0,159,0,220,0,0,0,3,0,85,0,203,0,19,0,0,0,78,0,20,0,86,0,126,0,64,0,0,0,155,0,152,0,206,0,0,0,215,0,62,0,156,0,178,0,0,0,0,0,200,0,198,0,226,0,124,0,0,0,203,0,198,0,8,0,238,0,84,0,154,0,188,0,99,0,97,0,189,0,157,0,97,0,44,0,86,0,73,0,0,0,36,0,0,0,0,0,221,0,87,0,89,0,183,0,0,0,179,0,232,0,72,0,84,0,98,0,0,0,0,0,79,0,8,0,143,0,76,0,0,0,206,0,0,0,166,0,0,0,0,0,0,0,163,0,78,0,250,0,160,0,236,0,109,0,221,0,243,0,219,0,114,0,140,0,113,0,221,0,180,0,171,0,55,0,51,0,0,0,0,0,236,0,157,0,140,0,157,0,100,0,181,0,0,0,158,0,104,0,0,0,0,0,0,0,0,0,117,0,15,0,46,0,114,0,53,0,175,0,8,0,17,0,195,0,126,0,53,0,10,0,0,0,0,0,102,0,163,0,86,0,45,0,41,0,82,0,250,0,214,0,0,0,176,0,117,0,91,0,3,0,175,0,24,0,0,0,16,0,0,0,87,0,97,0,60,0,177,0,3,0,0,0,169,0,156,0,231,0,131,0,199,0,218,0,226,0,231,0,50,0,244,0,227,0,99,0,237,0,173,0,189,0,152,0,13,0,222,0,0,0,0,0,249,0,90,0,167,0,0,0,20,0,227,0,45,0,0,0,0,0,0,0,0,0,6,0,2,0,15,0,0,0,109,0,101,0,0,0,139,0,51,0,0,0,245,0,15,0,162,0,63,0,229,0,131,0,213,0,105,0,168,0,0,0,115,0,0,0,0,0,102,0,97,0,0,0,25,0,114,0,122,0,212,0,199,0,27,0,0,0);
signal scenario_full  : scenario_type := (0,0,202,31,140,31,49,31,31,31,84,31,251,31,184,31,184,30,227,31,186,31,87,31,87,30,139,31,139,30,201,31,173,31,103,31,159,31,195,31,195,30,246,31,161,31,22,31,177,31,151,31,137,31,240,31,202,31,104,31,174,31,56,31,163,31,30,31,179,31,196,31,88,31,126,31,252,31,83,31,244,31,15,31,15,30,134,31,215,31,82,31,11,31,143,31,153,31,155,31,249,31,205,31,49,31,11,31,96,31,207,31,177,31,177,30,164,31,220,31,220,30,239,31,27,31,27,30,76,31,76,30,174,31,82,31,201,31,250,31,194,31,194,30,223,31,53,31,239,31,206,31,125,31,124,31,190,31,190,30,190,29,41,31,41,30,201,31,62,31,61,31,25,31,25,30,131,31,246,31,143,31,253,31,203,31,203,30,139,31,164,31,50,31,162,31,175,31,193,31,6,31,232,31,221,31,120,31,106,31,42,31,241,31,241,30,241,29,189,31,252,31,252,30,237,31,62,31,159,31,16,31,205,31,202,31,120,31,187,31,129,31,228,31,228,30,228,29,71,31,97,31,97,30,88,31,83,31,18,31,30,31,249,31,212,31,3,31,6,31,6,30,48,31,48,30,211,31,139,31,211,31,241,31,177,31,177,30,192,31,211,31,127,31,153,31,153,30,153,29,226,31,226,30,176,31,246,31,246,30,246,29,170,31,216,31,79,31,79,30,79,29,186,31,186,30,246,31,55,31,95,31,95,30,84,31,144,31,43,31,6,31,172,31,236,31,223,31,223,30,223,29,183,31,3,31,224,31,224,30,45,31,72,31,227,31,248,31,248,30,64,31,64,30,128,31,13,31,117,31,57,31,51,31,83,31,83,30,124,31,60,31,199,31,54,31,188,31,131,31,62,31,238,31,124,31,92,31,169,31,169,30,169,29,189,31,231,31,4,31,233,31,116,31,116,30,98,31,4,31,63,31,106,31,106,30,90,31,190,31,142,31,118,31,200,31,104,31,9,31,9,30,9,29,9,28,51,31,51,31,51,30,51,29,51,28,251,31,251,30,116,31,135,31,16,31,100,31,100,30,167,31,129,31,185,31,235,31,86,31,86,30,86,29,150,31,98,31,70,31,77,31,234,31,64,31,167,31,167,30,179,31,168,31,17,31,253,31,179,31,160,31,82,31,237,31,161,31,85,31,196,31,196,30,189,31,84,31,84,30,142,31,249,31,91,31,211,31,144,31,106,31,106,30,215,31,69,31,117,31,28,31,162,31,115,31,239,31,1,31,82,31,5,31,36,31,13,31,10,31,238,31,129,31,71,31,71,30,160,31,42,31,184,31,104,31,203,31,158,31,158,30,49,31,18,31,217,31,153,31,137,31,166,31,211,31,211,30,211,29,109,31,224,31,227,31,7,31,138,31,61,31,120,31,120,30,120,29,120,28,120,27,120,26,18,31,18,30,40,31,134,31,208,31,26,31,75,31,213,31,240,31,139,31,185,31,166,31,140,31,163,31,163,30,163,29,163,28,188,31,188,30,188,29,3,31,60,31,60,30,190,31,86,31,160,31,160,30,128,31,147,31,142,31,207,31,216,31,233,31,201,31,5,31,227,31,82,31,82,30,82,29,250,31,250,30,250,29,204,31,188,31,188,30,173,31,138,31,92,31,121,31,112,31,204,31,12,31,117,31,117,30,117,29,117,28,66,31,66,30,124,31,254,31,179,31,179,30,180,31,96,31,109,31,38,31,253,31,169,31,238,31,103,31,103,30,103,29,92,31,216,31,216,30,150,31,9,31,165,31,249,31,29,31,100,31,159,31,81,31,81,30,81,29,81,28,5,31,183,31,132,31,239,31,222,31,204,31,192,31,215,31,215,30,159,31,220,31,220,30,3,31,85,31,203,31,19,31,19,30,78,31,20,31,86,31,126,31,64,31,64,30,155,31,152,31,206,31,206,30,215,31,62,31,156,31,178,31,178,30,178,29,200,31,198,31,226,31,124,31,124,30,203,31,198,31,8,31,238,31,84,31,154,31,188,31,99,31,97,31,189,31,157,31,97,31,44,31,86,31,73,31,73,30,36,31,36,30,36,29,221,31,87,31,89,31,183,31,183,30,179,31,232,31,72,31,84,31,98,31,98,30,98,29,79,31,8,31,143,31,76,31,76,30,206,31,206,30,166,31,166,30,166,29,166,28,163,31,78,31,250,31,160,31,236,31,109,31,221,31,243,31,219,31,114,31,140,31,113,31,221,31,180,31,171,31,55,31,51,31,51,30,51,29,236,31,157,31,140,31,157,31,100,31,181,31,181,30,158,31,104,31,104,30,104,29,104,28,104,27,117,31,15,31,46,31,114,31,53,31,175,31,8,31,17,31,195,31,126,31,53,31,10,31,10,30,10,29,102,31,163,31,86,31,45,31,41,31,82,31,250,31,214,31,214,30,176,31,117,31,91,31,3,31,175,31,24,31,24,30,16,31,16,30,87,31,97,31,60,31,177,31,3,31,3,30,169,31,156,31,231,31,131,31,199,31,218,31,226,31,231,31,50,31,244,31,227,31,99,31,237,31,173,31,189,31,152,31,13,31,222,31,222,30,222,29,249,31,90,31,167,31,167,30,20,31,227,31,45,31,45,30,45,29,45,28,45,27,6,31,2,31,15,31,15,30,109,31,101,31,101,30,139,31,51,31,51,30,245,31,15,31,162,31,63,31,229,31,131,31,213,31,105,31,168,31,168,30,115,31,115,30,115,29,102,31,97,31,97,30,25,31,114,31,122,31,212,31,199,31,27,31,27,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
