-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 509;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (10,0,0,0,244,0,21,0,212,0,0,0,101,0,109,0,28,0,105,0,0,0,143,0,0,0,242,0,3,0,114,0,183,0,235,0,58,0,10,0,0,0,171,0,163,0,46,0,85,0,204,0,177,0,49,0,113,0,0,0,1,0,173,0,153,0,72,0,99,0,169,0,78,0,0,0,208,0,93,0,0,0,62,0,77,0,185,0,62,0,0,0,135,0,191,0,0,0,0,0,0,0,213,0,229,0,147,0,150,0,95,0,238,0,172,0,24,0,248,0,134,0,93,0,35,0,18,0,231,0,31,0,0,0,172,0,152,0,0,0,14,0,0,0,155,0,234,0,77,0,24,0,0,0,194,0,35,0,16,0,0,0,67,0,13,0,48,0,153,0,65,0,161,0,32,0,208,0,149,0,142,0,0,0,148,0,46,0,0,0,0,0,201,0,80,0,0,0,137,0,46,0,231,0,232,0,75,0,164,0,64,0,151,0,205,0,5,0,220,0,71,0,233,0,0,0,58,0,57,0,0,0,161,0,44,0,30,0,40,0,214,0,9,0,0,0,254,0,105,0,218,0,0,0,25,0,172,0,181,0,32,0,128,0,71,0,204,0,0,0,138,0,168,0,0,0,112,0,151,0,16,0,2,0,200,0,68,0,167,0,182,0,234,0,198,0,109,0,211,0,255,0,133,0,134,0,45,0,112,0,0,0,70,0,142,0,34,0,28,0,158,0,0,0,211,0,8,0,0,0,34,0,69,0,93,0,121,0,45,0,235,0,0,0,113,0,163,0,219,0,0,0,0,0,181,0,186,0,0,0,162,0,192,0,91,0,117,0,0,0,53,0,47,0,134,0,213,0,44,0,78,0,198,0,4,0,97,0,194,0,224,0,172,0,79,0,76,0,56,0,103,0,15,0,106,0,159,0,253,0,169,0,0,0,115,0,26,0,231,0,50,0,121,0,43,0,91,0,110,0,17,0,0,0,0,0,242,0,21,0,68,0,84,0,0,0,229,0,94,0,61,0,230,0,0,0,188,0,247,0,150,0,97,0,0,0,209,0,197,0,244,0,0,0,241,0,227,0,73,0,132,0,204,0,39,0,202,0,196,0,191,0,56,0,0,0,55,0,23,0,84,0,0,0,115,0,137,0,43,0,33,0,160,0,22,0,0,0,107,0,87,0,147,0,215,0,0,0,197,0,186,0,84,0,173,0,74,0,52,0,44,0,58,0,0,0,183,0,0,0,177,0,172,0,0,0,153,0,210,0,51,0,36,0,251,0,18,0,7,0,0,0,0,0,151,0,20,0,0,0,0,0,204,0,167,0,77,0,0,0,210,0,23,0,80,0,56,0,151,0,160,0,33,0,192,0,0,0,0,0,17,0,73,0,78,0,1,0,123,0,0,0,31,0,162,0,125,0,38,0,112,0,195,0,190,0,13,0,80,0,84,0,15,0,53,0,0,0,97,0,147,0,221,0,246,0,249,0,235,0,0,0,150,0,201,0,249,0,106,0,239,0,74,0,177,0,218,0,211,0,0,0,47,0,106,0,0,0,135,0,133,0,0,0,30,0,176,0,3,0,140,0,146,0,45,0,0,0,157,0,149,0,220,0,86,0,100,0,2,0,0,0,45,0,120,0,252,0,28,0,69,0,0,0,102,0,234,0,2,0,0,0,79,0,252,0,0,0,0,0,169,0,0,0,188,0,0,0,15,0,246,0,163,0,0,0,0,0,223,0,75,0,198,0,108,0,99,0,127,0,147,0,255,0,46,0,37,0,207,0,85,0,0,0,209,0,75,0,159,0,117,0,75,0,0,0,178,0,99,0,237,0,94,0,4,0,0,0,126,0,87,0,159,0,26,0,180,0,177,0,226,0,194,0,0,0,232,0,220,0,0,0,225,0,181,0,174,0,132,0,127,0,167,0,223,0,95,0,157,0,0,0,90,0,94,0,0,0,7,0,97,0,60,0,148,0,47,0,182,0,232,0,0,0,41,0,141,0,36,0,211,0,11,0,3,0,182,0,173,0,112,0,58,0,203,0,201,0,115,0,195,0,79,0,173,0,59,0,0,0,253,0,255,0,17,0,0,0,87,0,0,0,107,0,234,0,183,0,221,0,238,0,0,0,55,0,0,0,115,0,177,0,79,0,27,0,242,0,185,0,150,0,98,0,41,0,104,0,0,0,79,0,148,0,61,0,29,0,0,0,76,0,233,0,12,0,71,0,73,0,0,0,173,0,35,0,9,0,74,0,0,0,0,0,202,0,232,0,16,0,175,0,253,0,85,0,224,0);
signal scenario_full  : scenario_type := (10,31,10,30,244,31,21,31,212,31,212,30,101,31,109,31,28,31,105,31,105,30,143,31,143,30,242,31,3,31,114,31,183,31,235,31,58,31,10,31,10,30,171,31,163,31,46,31,85,31,204,31,177,31,49,31,113,31,113,30,1,31,173,31,153,31,72,31,99,31,169,31,78,31,78,30,208,31,93,31,93,30,62,31,77,31,185,31,62,31,62,30,135,31,191,31,191,30,191,29,191,28,213,31,229,31,147,31,150,31,95,31,238,31,172,31,24,31,248,31,134,31,93,31,35,31,18,31,231,31,31,31,31,30,172,31,152,31,152,30,14,31,14,30,155,31,234,31,77,31,24,31,24,30,194,31,35,31,16,31,16,30,67,31,13,31,48,31,153,31,65,31,161,31,32,31,208,31,149,31,142,31,142,30,148,31,46,31,46,30,46,29,201,31,80,31,80,30,137,31,46,31,231,31,232,31,75,31,164,31,64,31,151,31,205,31,5,31,220,31,71,31,233,31,233,30,58,31,57,31,57,30,161,31,44,31,30,31,40,31,214,31,9,31,9,30,254,31,105,31,218,31,218,30,25,31,172,31,181,31,32,31,128,31,71,31,204,31,204,30,138,31,168,31,168,30,112,31,151,31,16,31,2,31,200,31,68,31,167,31,182,31,234,31,198,31,109,31,211,31,255,31,133,31,134,31,45,31,112,31,112,30,70,31,142,31,34,31,28,31,158,31,158,30,211,31,8,31,8,30,34,31,69,31,93,31,121,31,45,31,235,31,235,30,113,31,163,31,219,31,219,30,219,29,181,31,186,31,186,30,162,31,192,31,91,31,117,31,117,30,53,31,47,31,134,31,213,31,44,31,78,31,198,31,4,31,97,31,194,31,224,31,172,31,79,31,76,31,56,31,103,31,15,31,106,31,159,31,253,31,169,31,169,30,115,31,26,31,231,31,50,31,121,31,43,31,91,31,110,31,17,31,17,30,17,29,242,31,21,31,68,31,84,31,84,30,229,31,94,31,61,31,230,31,230,30,188,31,247,31,150,31,97,31,97,30,209,31,197,31,244,31,244,30,241,31,227,31,73,31,132,31,204,31,39,31,202,31,196,31,191,31,56,31,56,30,55,31,23,31,84,31,84,30,115,31,137,31,43,31,33,31,160,31,22,31,22,30,107,31,87,31,147,31,215,31,215,30,197,31,186,31,84,31,173,31,74,31,52,31,44,31,58,31,58,30,183,31,183,30,177,31,172,31,172,30,153,31,210,31,51,31,36,31,251,31,18,31,7,31,7,30,7,29,151,31,20,31,20,30,20,29,204,31,167,31,77,31,77,30,210,31,23,31,80,31,56,31,151,31,160,31,33,31,192,31,192,30,192,29,17,31,73,31,78,31,1,31,123,31,123,30,31,31,162,31,125,31,38,31,112,31,195,31,190,31,13,31,80,31,84,31,15,31,53,31,53,30,97,31,147,31,221,31,246,31,249,31,235,31,235,30,150,31,201,31,249,31,106,31,239,31,74,31,177,31,218,31,211,31,211,30,47,31,106,31,106,30,135,31,133,31,133,30,30,31,176,31,3,31,140,31,146,31,45,31,45,30,157,31,149,31,220,31,86,31,100,31,2,31,2,30,45,31,120,31,252,31,28,31,69,31,69,30,102,31,234,31,2,31,2,30,79,31,252,31,252,30,252,29,169,31,169,30,188,31,188,30,15,31,246,31,163,31,163,30,163,29,223,31,75,31,198,31,108,31,99,31,127,31,147,31,255,31,46,31,37,31,207,31,85,31,85,30,209,31,75,31,159,31,117,31,75,31,75,30,178,31,99,31,237,31,94,31,4,31,4,30,126,31,87,31,159,31,26,31,180,31,177,31,226,31,194,31,194,30,232,31,220,31,220,30,225,31,181,31,174,31,132,31,127,31,167,31,223,31,95,31,157,31,157,30,90,31,94,31,94,30,7,31,97,31,60,31,148,31,47,31,182,31,232,31,232,30,41,31,141,31,36,31,211,31,11,31,3,31,182,31,173,31,112,31,58,31,203,31,201,31,115,31,195,31,79,31,173,31,59,31,59,30,253,31,255,31,17,31,17,30,87,31,87,30,107,31,234,31,183,31,221,31,238,31,238,30,55,31,55,30,115,31,177,31,79,31,27,31,242,31,185,31,150,31,98,31,41,31,104,31,104,30,79,31,148,31,61,31,29,31,29,30,76,31,233,31,12,31,71,31,73,31,73,30,173,31,35,31,9,31,74,31,74,30,74,29,202,31,232,31,16,31,175,31,253,31,85,31,224,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
