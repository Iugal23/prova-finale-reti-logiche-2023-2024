-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 443;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (97,0,21,0,203,0,224,0,14,0,227,0,0,0,253,0,237,0,0,0,81,0,0,0,226,0,0,0,223,0,166,0,128,0,0,0,110,0,9,0,0,0,108,0,171,0,197,0,22,0,99,0,83,0,242,0,37,0,0,0,172,0,0,0,31,0,241,0,0,0,137,0,81,0,182,0,252,0,131,0,22,0,0,0,87,0,209,0,0,0,57,0,162,0,251,0,0,0,163,0,47,0,0,0,32,0,132,0,15,0,230,0,190,0,172,0,60,0,229,0,57,0,49,0,89,0,151,0,83,0,0,0,78,0,34,0,67,0,86,0,11,0,133,0,244,0,228,0,200,0,203,0,72,0,145,0,239,0,89,0,228,0,0,0,2,0,0,0,196,0,29,0,119,0,2,0,0,0,48,0,33,0,149,0,105,0,134,0,0,0,103,0,18,0,238,0,150,0,0,0,139,0,0,0,136,0,123,0,0,0,149,0,202,0,0,0,138,0,182,0,243,0,186,0,133,0,106,0,250,0,196,0,98,0,98,0,165,0,238,0,39,0,0,0,8,0,182,0,119,0,230,0,27,0,211,0,0,0,52,0,25,0,157,0,0,0,0,0,190,0,170,0,165,0,246,0,94,0,215,0,253,0,0,0,7,0,211,0,210,0,224,0,244,0,90,0,0,0,215,0,0,0,0,0,36,0,0,0,0,0,39,0,246,0,14,0,146,0,0,0,41,0,123,0,0,0,24,0,0,0,20,0,108,0,187,0,0,0,239,0,99,0,0,0,212,0,195,0,0,0,172,0,81,0,230,0,0,0,184,0,94,0,221,0,103,0,32,0,202,0,200,0,90,0,51,0,0,0,0,0,101,0,37,0,81,0,98,0,110,0,0,0,0,0,142,0,0,0,247,0,129,0,71,0,87,0,16,0,127,0,4,0,150,0,115,0,45,0,75,0,84,0,129,0,211,0,149,0,88,0,0,0,58,0,100,0,218,0,31,0,32,0,214,0,104,0,36,0,221,0,139,0,50,0,106,0,0,0,116,0,185,0,23,0,51,0,50,0,36,0,3,0,179,0,249,0,116,0,0,0,37,0,241,0,155,0,2,0,84,0,178,0,42,0,0,0,0,0,0,0,127,0,68,0,100,0,24,0,0,0,0,0,112,0,223,0,86,0,237,0,36,0,98,0,47,0,110,0,142,0,19,0,181,0,0,0,125,0,85,0,83,0,65,0,110,0,0,0,49,0,215,0,155,0,0,0,190,0,184,0,204,0,103,0,19,0,194,0,99,0,145,0,141,0,122,0,102,0,0,0,14,0,239,0,238,0,148,0,0,0,34,0,191,0,19,0,242,0,8,0,179,0,203,0,221,0,11,0,195,0,102,0,117,0,89,0,149,0,161,0,69,0,34,0,8,0,178,0,230,0,44,0,108,0,95,0,12,0,45,0,2,0,46,0,86,0,94,0,160,0,181,0,2,0,28,0,72,0,15,0,217,0,157,0,241,0,39,0,197,0,0,0,88,0,50,0,60,0,108,0,25,0,198,0,15,0,223,0,193,0,70,0,181,0,0,0,7,0,136,0,15,0,166,0,179,0,1,0,204,0,251,0,197,0,119,0,79,0,68,0,128,0,0,0,130,0,239,0,181,0,155,0,111,0,195,0,40,0,248,0,18,0,0,0,2,0,100,0,251,0,199,0,0,0,0,0,208,0,0,0,0,0,0,0,127,0,64,0,5,0,196,0,0,0,0,0,109,0,83,0,183,0,200,0,187,0,245,0,31,0,118,0,174,0,0,0,250,0,0,0,126,0,51,0,51,0,121,0,252,0,20,0,177,0,64,0,55,0,250,0,221,0,201,0,120,0,54,0,135,0,73,0,70,0,20,0,178,0,0,0,31,0,0,0,0,0,30,0,123,0,249,0,105,0,54,0,0,0,133,0,165,0,0,0,238,0,0,0,17,0,217,0,91,0,0,0,245,0,185,0,119,0,236,0,86,0);
signal scenario_full  : scenario_type := (97,31,21,31,203,31,224,31,14,31,227,31,227,30,253,31,237,31,237,30,81,31,81,30,226,31,226,30,223,31,166,31,128,31,128,30,110,31,9,31,9,30,108,31,171,31,197,31,22,31,99,31,83,31,242,31,37,31,37,30,172,31,172,30,31,31,241,31,241,30,137,31,81,31,182,31,252,31,131,31,22,31,22,30,87,31,209,31,209,30,57,31,162,31,251,31,251,30,163,31,47,31,47,30,32,31,132,31,15,31,230,31,190,31,172,31,60,31,229,31,57,31,49,31,89,31,151,31,83,31,83,30,78,31,34,31,67,31,86,31,11,31,133,31,244,31,228,31,200,31,203,31,72,31,145,31,239,31,89,31,228,31,228,30,2,31,2,30,196,31,29,31,119,31,2,31,2,30,48,31,33,31,149,31,105,31,134,31,134,30,103,31,18,31,238,31,150,31,150,30,139,31,139,30,136,31,123,31,123,30,149,31,202,31,202,30,138,31,182,31,243,31,186,31,133,31,106,31,250,31,196,31,98,31,98,31,165,31,238,31,39,31,39,30,8,31,182,31,119,31,230,31,27,31,211,31,211,30,52,31,25,31,157,31,157,30,157,29,190,31,170,31,165,31,246,31,94,31,215,31,253,31,253,30,7,31,211,31,210,31,224,31,244,31,90,31,90,30,215,31,215,30,215,29,36,31,36,30,36,29,39,31,246,31,14,31,146,31,146,30,41,31,123,31,123,30,24,31,24,30,20,31,108,31,187,31,187,30,239,31,99,31,99,30,212,31,195,31,195,30,172,31,81,31,230,31,230,30,184,31,94,31,221,31,103,31,32,31,202,31,200,31,90,31,51,31,51,30,51,29,101,31,37,31,81,31,98,31,110,31,110,30,110,29,142,31,142,30,247,31,129,31,71,31,87,31,16,31,127,31,4,31,150,31,115,31,45,31,75,31,84,31,129,31,211,31,149,31,88,31,88,30,58,31,100,31,218,31,31,31,32,31,214,31,104,31,36,31,221,31,139,31,50,31,106,31,106,30,116,31,185,31,23,31,51,31,50,31,36,31,3,31,179,31,249,31,116,31,116,30,37,31,241,31,155,31,2,31,84,31,178,31,42,31,42,30,42,29,42,28,127,31,68,31,100,31,24,31,24,30,24,29,112,31,223,31,86,31,237,31,36,31,98,31,47,31,110,31,142,31,19,31,181,31,181,30,125,31,85,31,83,31,65,31,110,31,110,30,49,31,215,31,155,31,155,30,190,31,184,31,204,31,103,31,19,31,194,31,99,31,145,31,141,31,122,31,102,31,102,30,14,31,239,31,238,31,148,31,148,30,34,31,191,31,19,31,242,31,8,31,179,31,203,31,221,31,11,31,195,31,102,31,117,31,89,31,149,31,161,31,69,31,34,31,8,31,178,31,230,31,44,31,108,31,95,31,12,31,45,31,2,31,46,31,86,31,94,31,160,31,181,31,2,31,28,31,72,31,15,31,217,31,157,31,241,31,39,31,197,31,197,30,88,31,50,31,60,31,108,31,25,31,198,31,15,31,223,31,193,31,70,31,181,31,181,30,7,31,136,31,15,31,166,31,179,31,1,31,204,31,251,31,197,31,119,31,79,31,68,31,128,31,128,30,130,31,239,31,181,31,155,31,111,31,195,31,40,31,248,31,18,31,18,30,2,31,100,31,251,31,199,31,199,30,199,29,208,31,208,30,208,29,208,28,127,31,64,31,5,31,196,31,196,30,196,29,109,31,83,31,183,31,200,31,187,31,245,31,31,31,118,31,174,31,174,30,250,31,250,30,126,31,51,31,51,31,121,31,252,31,20,31,177,31,64,31,55,31,250,31,221,31,201,31,120,31,54,31,135,31,73,31,70,31,20,31,178,31,178,30,31,31,31,30,31,29,30,31,123,31,249,31,105,31,54,31,54,30,133,31,165,31,165,30,238,31,238,30,17,31,217,31,91,31,91,30,245,31,185,31,119,31,236,31,86,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
