-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 760;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (113,0,89,0,172,0,57,0,109,0,186,0,212,0,25,0,253,0,238,0,73,0,0,0,185,0,0,0,8,0,130,0,30,0,0,0,117,0,53,0,207,0,152,0,93,0,23,0,205,0,107,0,52,0,73,0,0,0,199,0,207,0,240,0,242,0,114,0,195,0,6,0,228,0,0,0,21,0,105,0,85,0,0,0,0,0,25,0,187,0,43,0,0,0,0,0,103,0,166,0,42,0,207,0,167,0,0,0,95,0,59,0,91,0,0,0,0,0,208,0,89,0,125,0,124,0,255,0,95,0,205,0,171,0,166,0,127,0,146,0,127,0,113,0,135,0,213,0,0,0,172,0,65,0,0,0,105,0,59,0,33,0,190,0,179,0,0,0,0,0,165,0,34,0,172,0,0,0,132,0,85,0,111,0,72,0,234,0,20,0,98,0,3,0,29,0,121,0,0,0,0,0,175,0,0,0,88,0,189,0,216,0,224,0,0,0,45,0,102,0,92,0,166,0,179,0,81,0,0,0,118,0,163,0,0,0,224,0,73,0,153,0,0,0,85,0,148,0,162,0,253,0,52,0,0,0,146,0,0,0,213,0,254,0,60,0,155,0,201,0,103,0,32,0,88,0,174,0,66,0,178,0,103,0,0,0,117,0,0,0,49,0,150,0,114,0,148,0,67,0,88,0,0,0,100,0,0,0,0,0,50,0,0,0,26,0,188,0,0,0,121,0,99,0,101,0,54,0,11,0,234,0,0,0,90,0,70,0,90,0,56,0,157,0,0,0,170,0,138,0,157,0,144,0,233,0,4,0,184,0,0,0,45,0,39,0,0,0,116,0,93,0,143,0,0,0,46,0,113,0,168,0,56,0,96,0,119,0,104,0,40,0,0,0,0,0,167,0,98,0,166,0,0,0,143,0,121,0,84,0,101,0,157,0,252,0,213,0,182,0,123,0,204,0,22,0,28,0,0,0,141,0,109,0,255,0,170,0,20,0,199,0,168,0,250,0,12,0,0,0,141,0,3,0,202,0,124,0,90,0,195,0,152,0,183,0,73,0,0,0,26,0,185,0,0,0,178,0,180,0,6,0,111,0,149,0,233,0,137,0,32,0,104,0,34,0,100,0,250,0,0,0,92,0,0,0,152,0,0,0,0,0,204,0,122,0,63,0,195,0,244,0,231,0,137,0,178,0,0,0,0,0,0,0,0,0,168,0,21,0,195,0,215,0,66,0,48,0,129,0,164,0,0,0,182,0,174,0,134,0,231,0,11,0,0,0,243,0,84,0,219,0,158,0,215,0,35,0,0,0,32,0,0,0,95,0,248,0,151,0,13,0,191,0,42,0,174,0,80,0,221,0,0,0,3,0,97,0,75,0,9,0,201,0,52,0,0,0,20,0,78,0,0,0,64,0,198,0,70,0,88,0,8,0,208,0,0,0,43,0,0,0,227,0,8,0,31,0,126,0,0,0,129,0,0,0,0,0,71,0,79,0,2,0,34,0,201,0,238,0,0,0,165,0,76,0,135,0,252,0,72,0,0,0,183,0,78,0,92,0,201,0,0,0,243,0,29,0,119,0,31,0,33,0,242,0,222,0,124,0,252,0,216,0,40,0,119,0,235,0,159,0,19,0,166,0,1,0,236,0,117,0,69,0,2,0,213,0,0,0,25,0,15,0,13,0,139,0,185,0,67,0,109,0,42,0,58,0,184,0,0,0,54,0,109,0,197,0,169,0,210,0,0,0,145,0,245,0,0,0,192,0,50,0,119,0,192,0,209,0,0,0,0,0,6,0,0,0,209,0,77,0,0,0,0,0,237,0,40,0,25,0,0,0,158,0,97,0,135,0,124,0,141,0,212,0,132,0,0,0,0,0,160,0,226,0,0,0,180,0,69,0,167,0,118,0,98,0,0,0,210,0,251,0,130,0,144,0,195,0,54,0,252,0,162,0,158,0,0,0,239,0,10,0,94,0,196,0,100,0,0,0,190,0,253,0,33,0,0,0,206,0,85,0,211,0,0,0,142,0,56,0,210,0,218,0,150,0,197,0,103,0,228,0,0,0,122,0,189,0,145,0,111,0,0,0,87,0,0,0,134,0,204,0,156,0,19,0,31,0,66,0,115,0,136,0,32,0,104,0,0,0,0,0,0,0,135,0,105,0,0,0,0,0,116,0,237,0,180,0,0,0,1,0,49,0,5,0,223,0,0,0,138,0,33,0,38,0,126,0,228,0,211,0,22,0,0,0,34,0,106,0,220,0,21,0,249,0,202,0,11,0,58,0,165,0,167,0,0,0,97,0,0,0,0,0,72,0,115,0,80,0,28,0,124,0,144,0,202,0,0,0,204,0,182,0,0,0,0,0,16,0,124,0,8,0,223,0,251,0,0,0,54,0,60,0,20,0,230,0,249,0,253,0,0,0,88,0,136,0,63,0,71,0,183,0,35,0,186,0,176,0,64,0,215,0,176,0,244,0,0,0,164,0,0,0,0,0,241,0,0,0,195,0,44,0,156,0,116,0,21,0,130,0,13,0,165,0,40,0,234,0,91,0,0,0,91,0,86,0,132,0,0,0,177,0,253,0,210,0,0,0,50,0,0,0,203,0,252,0,230,0,178,0,109,0,187,0,212,0,53,0,255,0,11,0,0,0,242,0,0,0,69,0,133,0,51,0,145,0,23,0,123,0,170,0,0,0,0,0,92,0,0,0,0,0,101,0,105,0,136,0,51,0,0,0,69,0,147,0,51,0,48,0,134,0,145,0,163,0,0,0,157,0,241,0,232,0,253,0,125,0,132,0,0,0,0,0,145,0,89,0,0,0,228,0,152,0,73,0,227,0,23,0,0,0,244,0,140,0,170,0,44,0,28,0,135,0,216,0,36,0,233,0,92,0,171,0,65,0,102,0,0,0,205,0,34,0,0,0,41,0,235,0,88,0,60,0,35,0,106,0,206,0,230,0,84,0,206,0,0,0,0,0,227,0,59,0,59,0,0,0,159,0,101,0,0,0,0,0,115,0,101,0,22,0,248,0,0,0,176,0,242,0,66,0,80,0,233,0,35,0,114,0,0,0,139,0,0,0,170,0,26,0,0,0,129,0,227,0,166,0,128,0,74,0,0,0,42,0,192,0,0,0,189,0,0,0,0,0,120,0,0,0,0,0,246,0,129,0,0,0,134,0,0,0,0,0,176,0,87,0,0,0,0,0,121,0,178,0,17,0,98,0,164,0,0,0,120,0,144,0,53,0,60,0,77,0,6,0,33,0,168,0,115,0,104,0,168,0,110,0,195,0,0,0,86,0,0,0,240,0,199,0,13,0,0,0,227,0,184,0,121,0,100,0,245,0,39,0,0,0,145,0,68,0,159,0,176,0,61,0,218,0,193,0,137,0,160,0,215,0,0,0,57,0,151,0,122,0);
signal scenario_full  : scenario_type := (113,31,89,31,172,31,57,31,109,31,186,31,212,31,25,31,253,31,238,31,73,31,73,30,185,31,185,30,8,31,130,31,30,31,30,30,117,31,53,31,207,31,152,31,93,31,23,31,205,31,107,31,52,31,73,31,73,30,199,31,207,31,240,31,242,31,114,31,195,31,6,31,228,31,228,30,21,31,105,31,85,31,85,30,85,29,25,31,187,31,43,31,43,30,43,29,103,31,166,31,42,31,207,31,167,31,167,30,95,31,59,31,91,31,91,30,91,29,208,31,89,31,125,31,124,31,255,31,95,31,205,31,171,31,166,31,127,31,146,31,127,31,113,31,135,31,213,31,213,30,172,31,65,31,65,30,105,31,59,31,33,31,190,31,179,31,179,30,179,29,165,31,34,31,172,31,172,30,132,31,85,31,111,31,72,31,234,31,20,31,98,31,3,31,29,31,121,31,121,30,121,29,175,31,175,30,88,31,189,31,216,31,224,31,224,30,45,31,102,31,92,31,166,31,179,31,81,31,81,30,118,31,163,31,163,30,224,31,73,31,153,31,153,30,85,31,148,31,162,31,253,31,52,31,52,30,146,31,146,30,213,31,254,31,60,31,155,31,201,31,103,31,32,31,88,31,174,31,66,31,178,31,103,31,103,30,117,31,117,30,49,31,150,31,114,31,148,31,67,31,88,31,88,30,100,31,100,30,100,29,50,31,50,30,26,31,188,31,188,30,121,31,99,31,101,31,54,31,11,31,234,31,234,30,90,31,70,31,90,31,56,31,157,31,157,30,170,31,138,31,157,31,144,31,233,31,4,31,184,31,184,30,45,31,39,31,39,30,116,31,93,31,143,31,143,30,46,31,113,31,168,31,56,31,96,31,119,31,104,31,40,31,40,30,40,29,167,31,98,31,166,31,166,30,143,31,121,31,84,31,101,31,157,31,252,31,213,31,182,31,123,31,204,31,22,31,28,31,28,30,141,31,109,31,255,31,170,31,20,31,199,31,168,31,250,31,12,31,12,30,141,31,3,31,202,31,124,31,90,31,195,31,152,31,183,31,73,31,73,30,26,31,185,31,185,30,178,31,180,31,6,31,111,31,149,31,233,31,137,31,32,31,104,31,34,31,100,31,250,31,250,30,92,31,92,30,152,31,152,30,152,29,204,31,122,31,63,31,195,31,244,31,231,31,137,31,178,31,178,30,178,29,178,28,178,27,168,31,21,31,195,31,215,31,66,31,48,31,129,31,164,31,164,30,182,31,174,31,134,31,231,31,11,31,11,30,243,31,84,31,219,31,158,31,215,31,35,31,35,30,32,31,32,30,95,31,248,31,151,31,13,31,191,31,42,31,174,31,80,31,221,31,221,30,3,31,97,31,75,31,9,31,201,31,52,31,52,30,20,31,78,31,78,30,64,31,198,31,70,31,88,31,8,31,208,31,208,30,43,31,43,30,227,31,8,31,31,31,126,31,126,30,129,31,129,30,129,29,71,31,79,31,2,31,34,31,201,31,238,31,238,30,165,31,76,31,135,31,252,31,72,31,72,30,183,31,78,31,92,31,201,31,201,30,243,31,29,31,119,31,31,31,33,31,242,31,222,31,124,31,252,31,216,31,40,31,119,31,235,31,159,31,19,31,166,31,1,31,236,31,117,31,69,31,2,31,213,31,213,30,25,31,15,31,13,31,139,31,185,31,67,31,109,31,42,31,58,31,184,31,184,30,54,31,109,31,197,31,169,31,210,31,210,30,145,31,245,31,245,30,192,31,50,31,119,31,192,31,209,31,209,30,209,29,6,31,6,30,209,31,77,31,77,30,77,29,237,31,40,31,25,31,25,30,158,31,97,31,135,31,124,31,141,31,212,31,132,31,132,30,132,29,160,31,226,31,226,30,180,31,69,31,167,31,118,31,98,31,98,30,210,31,251,31,130,31,144,31,195,31,54,31,252,31,162,31,158,31,158,30,239,31,10,31,94,31,196,31,100,31,100,30,190,31,253,31,33,31,33,30,206,31,85,31,211,31,211,30,142,31,56,31,210,31,218,31,150,31,197,31,103,31,228,31,228,30,122,31,189,31,145,31,111,31,111,30,87,31,87,30,134,31,204,31,156,31,19,31,31,31,66,31,115,31,136,31,32,31,104,31,104,30,104,29,104,28,135,31,105,31,105,30,105,29,116,31,237,31,180,31,180,30,1,31,49,31,5,31,223,31,223,30,138,31,33,31,38,31,126,31,228,31,211,31,22,31,22,30,34,31,106,31,220,31,21,31,249,31,202,31,11,31,58,31,165,31,167,31,167,30,97,31,97,30,97,29,72,31,115,31,80,31,28,31,124,31,144,31,202,31,202,30,204,31,182,31,182,30,182,29,16,31,124,31,8,31,223,31,251,31,251,30,54,31,60,31,20,31,230,31,249,31,253,31,253,30,88,31,136,31,63,31,71,31,183,31,35,31,186,31,176,31,64,31,215,31,176,31,244,31,244,30,164,31,164,30,164,29,241,31,241,30,195,31,44,31,156,31,116,31,21,31,130,31,13,31,165,31,40,31,234,31,91,31,91,30,91,31,86,31,132,31,132,30,177,31,253,31,210,31,210,30,50,31,50,30,203,31,252,31,230,31,178,31,109,31,187,31,212,31,53,31,255,31,11,31,11,30,242,31,242,30,69,31,133,31,51,31,145,31,23,31,123,31,170,31,170,30,170,29,92,31,92,30,92,29,101,31,105,31,136,31,51,31,51,30,69,31,147,31,51,31,48,31,134,31,145,31,163,31,163,30,157,31,241,31,232,31,253,31,125,31,132,31,132,30,132,29,145,31,89,31,89,30,228,31,152,31,73,31,227,31,23,31,23,30,244,31,140,31,170,31,44,31,28,31,135,31,216,31,36,31,233,31,92,31,171,31,65,31,102,31,102,30,205,31,34,31,34,30,41,31,235,31,88,31,60,31,35,31,106,31,206,31,230,31,84,31,206,31,206,30,206,29,227,31,59,31,59,31,59,30,159,31,101,31,101,30,101,29,115,31,101,31,22,31,248,31,248,30,176,31,242,31,66,31,80,31,233,31,35,31,114,31,114,30,139,31,139,30,170,31,26,31,26,30,129,31,227,31,166,31,128,31,74,31,74,30,42,31,192,31,192,30,189,31,189,30,189,29,120,31,120,30,120,29,246,31,129,31,129,30,134,31,134,30,134,29,176,31,87,31,87,30,87,29,121,31,178,31,17,31,98,31,164,31,164,30,120,31,144,31,53,31,60,31,77,31,6,31,33,31,168,31,115,31,104,31,168,31,110,31,195,31,195,30,86,31,86,30,240,31,199,31,13,31,13,30,227,31,184,31,121,31,100,31,245,31,39,31,39,30,145,31,68,31,159,31,176,31,61,31,218,31,193,31,137,31,160,31,215,31,215,30,57,31,151,31,122,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
