-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 717;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (76,0,0,0,70,0,246,0,69,0,113,0,75,0,35,0,150,0,106,0,103,0,0,0,0,0,0,0,0,0,150,0,41,0,126,0,142,0,45,0,202,0,241,0,0,0,4,0,44,0,0,0,0,0,113,0,208,0,27,0,0,0,79,0,168,0,96,0,160,0,167,0,88,0,169,0,110,0,49,0,131,0,0,0,212,0,152,0,202,0,0,0,0,0,181,0,89,0,11,0,246,0,0,0,239,0,65,0,193,0,0,0,61,0,74,0,198,0,201,0,224,0,197,0,50,0,0,0,65,0,124,0,240,0,238,0,66,0,127,0,104,0,0,0,243,0,223,0,71,0,6,0,0,0,181,0,215,0,0,0,0,0,0,0,0,0,121,0,69,0,158,0,17,0,0,0,0,0,145,0,29,0,168,0,89,0,0,0,112,0,128,0,74,0,244,0,156,0,142,0,40,0,205,0,0,0,83,0,118,0,67,0,0,0,0,0,230,0,0,0,185,0,0,0,89,0,105,0,73,0,176,0,194,0,197,0,70,0,14,0,121,0,99,0,253,0,0,0,19,0,255,0,204,0,192,0,127,0,0,0,205,0,205,0,110,0,172,0,49,0,94,0,177,0,0,0,202,0,231,0,17,0,253,0,196,0,142,0,228,0,116,0,247,0,2,0,180,0,93,0,21,0,115,0,129,0,215,0,0,0,79,0,48,0,197,0,253,0,0,0,205,0,0,0,229,0,215,0,52,0,186,0,155,0,245,0,23,0,30,0,71,0,197,0,109,0,14,0,16,0,42,0,29,0,244,0,215,0,194,0,132,0,229,0,195,0,241,0,118,0,72,0,0,0,24,0,220,0,78,0,14,0,95,0,0,0,111,0,35,0,0,0,134,0,141,0,0,0,130,0,102,0,103,0,0,0,88,0,199,0,88,0,0,0,184,0,96,0,90,0,37,0,128,0,171,0,94,0,67,0,124,0,58,0,209,0,244,0,174,0,25,0,0,0,50,0,185,0,24,0,168,0,91,0,210,0,87,0,106,0,157,0,137,0,184,0,231,0,50,0,0,0,197,0,79,0,32,0,150,0,144,0,113,0,0,0,0,0,131,0,163,0,5,0,0,0,211,0,0,0,59,0,243,0,172,0,77,0,0,0,53,0,177,0,241,0,172,0,78,0,67,0,62,0,0,0,0,0,97,0,0,0,151,0,0,0,203,0,165,0,151,0,97,0,198,0,187,0,139,0,188,0,145,0,185,0,86,0,245,0,209,0,9,0,243,0,113,0,68,0,0,0,0,0,18,0,6,0,0,0,231,0,43,0,231,0,0,0,4,0,169,0,24,0,174,0,110,0,57,0,124,0,7,0,240,0,0,0,65,0,16,0,0,0,0,0,150,0,171,0,0,0,0,0,0,0,244,0,51,0,24,0,11,0,0,0,0,0,29,0,166,0,221,0,226,0,207,0,56,0,0,0,218,0,164,0,254,0,0,0,159,0,21,0,0,0,130,0,81,0,220,0,251,0,154,0,202,0,0,0,0,0,0,0,0,0,51,0,0,0,51,0,238,0,46,0,120,0,103,0,114,0,94,0,53,0,129,0,162,0,0,0,199,0,243,0,89,0,85,0,92,0,132,0,0,0,0,0,143,0,228,0,130,0,165,0,0,0,114,0,140,0,0,0,5,0,0,0,126,0,206,0,210,0,68,0,183,0,22,0,188,0,48,0,133,0,0,0,209,0,103,0,0,0,140,0,0,0,0,0,0,0,177,0,197,0,4,0,74,0,128,0,14,0,0,0,129,0,154,0,0,0,73,0,0,0,187,0,0,0,0,0,17,0,227,0,51,0,162,0,62,0,65,0,141,0,172,0,90,0,167,0,111,0,137,0,205,0,71,0,155,0,19,0,111,0,0,0,171,0,201,0,58,0,77,0,87,0,0,0,60,0,131,0,0,0,112,0,110,0,47,0,87,0,54,0,251,0,163,0,223,0,199,0,0,0,0,0,191,0,11,0,194,0,7,0,245,0,123,0,69,0,15,0,0,0,158,0,0,0,0,0,0,0,14,0,162,0,120,0,0,0,192,0,144,0,0,0,205,0,97,0,5,0,70,0,65,0,3,0,200,0,220,0,0,0,189,0,61,0,13,0,234,0,193,0,197,0,92,0,3,0,196,0,0,0,248,0,94,0,8,0,121,0,68,0,152,0,41,0,179,0,172,0,156,0,223,0,188,0,9,0,0,0,0,0,167,0,178,0,60,0,18,0,132,0,174,0,194,0,25,0,212,0,0,0,68,0,27,0,42,0,181,0,98,0,193,0,230,0,0,0,205,0,0,0,0,0,0,0,0,0,60,0,219,0,224,0,216,0,181,0,51,0,182,0,49,0,149,0,0,0,92,0,118,0,34,0,79,0,0,0,13,0,213,0,0,0,177,0,235,0,164,0,112,0,0,0,86,0,189,0,34,0,79,0,129,0,239,0,163,0,101,0,130,0,14,0,2,0,158,0,67,0,217,0,156,0,235,0,27,0,225,0,120,0,193,0,116,0,87,0,135,0,0,0,0,0,123,0,171,0,164,0,163,0,124,0,182,0,0,0,252,0,3,0,149,0,144,0,46,0,0,0,221,0,0,0,57,0,221,0,0,0,95,0,84,0,92,0,172,0,116,0,209,0,137,0,125,0,247,0,0,0,110,0,129,0,166,0,99,0,0,0,68,0,45,0,254,0,170,0,135,0,69,0,190,0,213,0,34,0,0,0,0,0,0,0,71,0,189,0,166,0,107,0,110,0,112,0,38,0,106,0,16,0,43,0,91,0,181,0,81,0,0,0,0,0,72,0,114,0,76,0,107,0,192,0,0,0,180,0,177,0,162,0,0,0,7,0,0,0,14,0,115,0,0,0,231,0,247,0,0,0,23,0,63,0,0,0,26,0,0,0,156,0,140,0,0,0,177,0,0,0,0,0,10,0,229,0,101,0,0,0,47,0,143,0,0,0,3,0,31,0,15,0,217,0,214,0,68,0,160,0,213,0,250,0,52,0,192,0,0,0,14,0,26,0,243,0,131,0,107,0,149,0,19,0,212,0,15,0,0,0,63,0,0,0,14,0,88,0,175,0,13,0,165,0,48,0,145,0,35,0,187,0,133,0,10,0,220,0,159,0,179,0,115,0,0,0,96,0,44,0,98,0,23,0,124,0,63,0,122,0,0,0,165,0,135,0,0,0,61,0);
signal scenario_full  : scenario_type := (76,31,76,30,70,31,246,31,69,31,113,31,75,31,35,31,150,31,106,31,103,31,103,30,103,29,103,28,103,27,150,31,41,31,126,31,142,31,45,31,202,31,241,31,241,30,4,31,44,31,44,30,44,29,113,31,208,31,27,31,27,30,79,31,168,31,96,31,160,31,167,31,88,31,169,31,110,31,49,31,131,31,131,30,212,31,152,31,202,31,202,30,202,29,181,31,89,31,11,31,246,31,246,30,239,31,65,31,193,31,193,30,61,31,74,31,198,31,201,31,224,31,197,31,50,31,50,30,65,31,124,31,240,31,238,31,66,31,127,31,104,31,104,30,243,31,223,31,71,31,6,31,6,30,181,31,215,31,215,30,215,29,215,28,215,27,121,31,69,31,158,31,17,31,17,30,17,29,145,31,29,31,168,31,89,31,89,30,112,31,128,31,74,31,244,31,156,31,142,31,40,31,205,31,205,30,83,31,118,31,67,31,67,30,67,29,230,31,230,30,185,31,185,30,89,31,105,31,73,31,176,31,194,31,197,31,70,31,14,31,121,31,99,31,253,31,253,30,19,31,255,31,204,31,192,31,127,31,127,30,205,31,205,31,110,31,172,31,49,31,94,31,177,31,177,30,202,31,231,31,17,31,253,31,196,31,142,31,228,31,116,31,247,31,2,31,180,31,93,31,21,31,115,31,129,31,215,31,215,30,79,31,48,31,197,31,253,31,253,30,205,31,205,30,229,31,215,31,52,31,186,31,155,31,245,31,23,31,30,31,71,31,197,31,109,31,14,31,16,31,42,31,29,31,244,31,215,31,194,31,132,31,229,31,195,31,241,31,118,31,72,31,72,30,24,31,220,31,78,31,14,31,95,31,95,30,111,31,35,31,35,30,134,31,141,31,141,30,130,31,102,31,103,31,103,30,88,31,199,31,88,31,88,30,184,31,96,31,90,31,37,31,128,31,171,31,94,31,67,31,124,31,58,31,209,31,244,31,174,31,25,31,25,30,50,31,185,31,24,31,168,31,91,31,210,31,87,31,106,31,157,31,137,31,184,31,231,31,50,31,50,30,197,31,79,31,32,31,150,31,144,31,113,31,113,30,113,29,131,31,163,31,5,31,5,30,211,31,211,30,59,31,243,31,172,31,77,31,77,30,53,31,177,31,241,31,172,31,78,31,67,31,62,31,62,30,62,29,97,31,97,30,151,31,151,30,203,31,165,31,151,31,97,31,198,31,187,31,139,31,188,31,145,31,185,31,86,31,245,31,209,31,9,31,243,31,113,31,68,31,68,30,68,29,18,31,6,31,6,30,231,31,43,31,231,31,231,30,4,31,169,31,24,31,174,31,110,31,57,31,124,31,7,31,240,31,240,30,65,31,16,31,16,30,16,29,150,31,171,31,171,30,171,29,171,28,244,31,51,31,24,31,11,31,11,30,11,29,29,31,166,31,221,31,226,31,207,31,56,31,56,30,218,31,164,31,254,31,254,30,159,31,21,31,21,30,130,31,81,31,220,31,251,31,154,31,202,31,202,30,202,29,202,28,202,27,51,31,51,30,51,31,238,31,46,31,120,31,103,31,114,31,94,31,53,31,129,31,162,31,162,30,199,31,243,31,89,31,85,31,92,31,132,31,132,30,132,29,143,31,228,31,130,31,165,31,165,30,114,31,140,31,140,30,5,31,5,30,126,31,206,31,210,31,68,31,183,31,22,31,188,31,48,31,133,31,133,30,209,31,103,31,103,30,140,31,140,30,140,29,140,28,177,31,197,31,4,31,74,31,128,31,14,31,14,30,129,31,154,31,154,30,73,31,73,30,187,31,187,30,187,29,17,31,227,31,51,31,162,31,62,31,65,31,141,31,172,31,90,31,167,31,111,31,137,31,205,31,71,31,155,31,19,31,111,31,111,30,171,31,201,31,58,31,77,31,87,31,87,30,60,31,131,31,131,30,112,31,110,31,47,31,87,31,54,31,251,31,163,31,223,31,199,31,199,30,199,29,191,31,11,31,194,31,7,31,245,31,123,31,69,31,15,31,15,30,158,31,158,30,158,29,158,28,14,31,162,31,120,31,120,30,192,31,144,31,144,30,205,31,97,31,5,31,70,31,65,31,3,31,200,31,220,31,220,30,189,31,61,31,13,31,234,31,193,31,197,31,92,31,3,31,196,31,196,30,248,31,94,31,8,31,121,31,68,31,152,31,41,31,179,31,172,31,156,31,223,31,188,31,9,31,9,30,9,29,167,31,178,31,60,31,18,31,132,31,174,31,194,31,25,31,212,31,212,30,68,31,27,31,42,31,181,31,98,31,193,31,230,31,230,30,205,31,205,30,205,29,205,28,205,27,60,31,219,31,224,31,216,31,181,31,51,31,182,31,49,31,149,31,149,30,92,31,118,31,34,31,79,31,79,30,13,31,213,31,213,30,177,31,235,31,164,31,112,31,112,30,86,31,189,31,34,31,79,31,129,31,239,31,163,31,101,31,130,31,14,31,2,31,158,31,67,31,217,31,156,31,235,31,27,31,225,31,120,31,193,31,116,31,87,31,135,31,135,30,135,29,123,31,171,31,164,31,163,31,124,31,182,31,182,30,252,31,3,31,149,31,144,31,46,31,46,30,221,31,221,30,57,31,221,31,221,30,95,31,84,31,92,31,172,31,116,31,209,31,137,31,125,31,247,31,247,30,110,31,129,31,166,31,99,31,99,30,68,31,45,31,254,31,170,31,135,31,69,31,190,31,213,31,34,31,34,30,34,29,34,28,71,31,189,31,166,31,107,31,110,31,112,31,38,31,106,31,16,31,43,31,91,31,181,31,81,31,81,30,81,29,72,31,114,31,76,31,107,31,192,31,192,30,180,31,177,31,162,31,162,30,7,31,7,30,14,31,115,31,115,30,231,31,247,31,247,30,23,31,63,31,63,30,26,31,26,30,156,31,140,31,140,30,177,31,177,30,177,29,10,31,229,31,101,31,101,30,47,31,143,31,143,30,3,31,31,31,15,31,217,31,214,31,68,31,160,31,213,31,250,31,52,31,192,31,192,30,14,31,26,31,243,31,131,31,107,31,149,31,19,31,212,31,15,31,15,30,63,31,63,30,14,31,88,31,175,31,13,31,165,31,48,31,145,31,35,31,187,31,133,31,10,31,220,31,159,31,179,31,115,31,115,30,96,31,44,31,98,31,23,31,124,31,63,31,122,31,122,30,165,31,135,31,135,30,61,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
