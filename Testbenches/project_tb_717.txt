-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 546;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (29,0,51,0,156,0,0,0,190,0,0,0,252,0,101,0,46,0,111,0,171,0,161,0,194,0,198,0,201,0,60,0,127,0,197,0,180,0,178,0,118,0,214,0,0,0,208,0,202,0,58,0,0,0,182,0,95,0,0,0,0,0,180,0,0,0,166,0,0,0,142,0,0,0,33,0,5,0,142,0,72,0,126,0,28,0,78,0,248,0,204,0,128,0,155,0,218,0,105,0,80,0,196,0,102,0,223,0,201,0,215,0,0,0,9,0,6,0,231,0,0,0,40,0,0,0,0,0,58,0,0,0,127,0,149,0,118,0,176,0,227,0,192,0,163,0,99,0,152,0,0,0,232,0,223,0,0,0,0,0,9,0,238,0,149,0,0,0,148,0,166,0,249,0,95,0,58,0,189,0,225,0,119,0,239,0,89,0,151,0,0,0,71,0,101,0,143,0,190,0,188,0,79,0,241,0,218,0,197,0,0,0,39,0,0,0,197,0,160,0,181,0,145,0,0,0,180,0,230,0,140,0,182,0,233,0,196,0,98,0,18,0,0,0,0,0,0,0,245,0,48,0,138,0,37,0,0,0,245,0,88,0,250,0,72,0,0,0,30,0,50,0,19,0,244,0,149,0,129,0,131,0,102,0,97,0,154,0,217,0,0,0,69,0,111,0,96,0,226,0,220,0,145,0,226,0,0,0,88,0,134,0,160,0,86,0,0,0,229,0,0,0,0,0,58,0,0,0,255,0,188,0,56,0,103,0,52,0,79,0,130,0,0,0,79,0,219,0,0,0,154,0,183,0,243,0,151,0,52,0,0,0,0,0,248,0,44,0,84,0,232,0,100,0,0,0,88,0,152,0,0,0,73,0,164,0,127,0,49,0,161,0,0,0,69,0,115,0,3,0,87,0,224,0,210,0,131,0,233,0,109,0,197,0,240,0,78,0,141,0,0,0,235,0,0,0,4,0,34,0,0,0,5,0,0,0,0,0,0,0,140,0,254,0,60,0,252,0,94,0,245,0,183,0,0,0,108,0,0,0,208,0,0,0,86,0,0,0,167,0,0,0,0,0,244,0,178,0,36,0,92,0,124,0,0,0,187,0,140,0,3,0,167,0,0,0,0,0,2,0,36,0,0,0,0,0,0,0,0,0,152,0,146,0,0,0,191,0,107,0,119,0,158,0,0,0,235,0,134,0,33,0,150,0,69,0,11,0,145,0,122,0,21,0,0,0,117,0,29,0,0,0,36,0,0,0,44,0,54,0,128,0,77,0,135,0,216,0,74,0,206,0,250,0,0,0,248,0,163,0,207,0,97,0,160,0,115,0,81,0,60,0,186,0,85,0,250,0,0,0,26,0,247,0,139,0,14,0,210,0,33,0,0,0,90,0,180,0,124,0,132,0,142,0,250,0,112,0,0,0,25,0,100,0,137,0,133,0,0,0,255,0,140,0,8,0,0,0,0,0,212,0,0,0,58,0,34,0,190,0,0,0,53,0,130,0,233,0,243,0,188,0,182,0,8,0,45,0,0,0,40,0,117,0,57,0,31,0,0,0,80,0,213,0,103,0,0,0,134,0,0,0,173,0,95,0,11,0,78,0,7,0,147,0,40,0,239,0,164,0,167,0,66,0,191,0,252,0,123,0,143,0,13,0,44,0,0,0,0,0,5,0,186,0,0,0,0,0,191,0,0,0,40,0,101,0,236,0,63,0,126,0,34,0,63,0,38,0,229,0,55,0,76,0,179,0,0,0,39,0,92,0,0,0,98,0,0,0,204,0,234,0,0,0,101,0,39,0,183,0,87,0,0,0,197,0,207,0,218,0,56,0,233,0,0,0,0,0,94,0,75,0,173,0,50,0,0,0,0,0,0,0,0,0,0,0,129,0,0,0,83,0,60,0,88,0,125,0,47,0,6,0,213,0,132,0,0,0,241,0,229,0,201,0,223,0,0,0,0,0,240,0,215,0,0,0,76,0,251,0,0,0,34,0,109,0,96,0,84,0,52,0,214,0,120,0,187,0,197,0,252,0,104,0,108,0,0,0,240,0,189,0,11,0,76,0,0,0,199,0,46,0,189,0,243,0,191,0,0,0,0,0,120,0,90,0,114,0,124,0,5,0,207,0,11,0,124,0,170,0,125,0,81,0,153,0,220,0,215,0,0,0,129,0,199,0,54,0,142,0,50,0,40,0,52,0,194,0,88,0,94,0,172,0,183,0,238,0,219,0,45,0,83,0,219,0,89,0,172,0,85,0,170,0,19,0,211,0,32,0,41,0,233,0,0,0,63,0,242,0,0,0,85,0,61,0,0,0,0,0,219,0,128,0,91,0,216,0,0,0,113,0,193,0,0,0,72,0,193,0,178,0,246,0,144,0,207,0,65,0,108,0,159,0,199,0,15,0,251,0,164,0,203,0,65,0,193,0,0,0,186,0,242,0,22,0,242,0,74,0,0,0);
signal scenario_full  : scenario_type := (29,31,51,31,156,31,156,30,190,31,190,30,252,31,101,31,46,31,111,31,171,31,161,31,194,31,198,31,201,31,60,31,127,31,197,31,180,31,178,31,118,31,214,31,214,30,208,31,202,31,58,31,58,30,182,31,95,31,95,30,95,29,180,31,180,30,166,31,166,30,142,31,142,30,33,31,5,31,142,31,72,31,126,31,28,31,78,31,248,31,204,31,128,31,155,31,218,31,105,31,80,31,196,31,102,31,223,31,201,31,215,31,215,30,9,31,6,31,231,31,231,30,40,31,40,30,40,29,58,31,58,30,127,31,149,31,118,31,176,31,227,31,192,31,163,31,99,31,152,31,152,30,232,31,223,31,223,30,223,29,9,31,238,31,149,31,149,30,148,31,166,31,249,31,95,31,58,31,189,31,225,31,119,31,239,31,89,31,151,31,151,30,71,31,101,31,143,31,190,31,188,31,79,31,241,31,218,31,197,31,197,30,39,31,39,30,197,31,160,31,181,31,145,31,145,30,180,31,230,31,140,31,182,31,233,31,196,31,98,31,18,31,18,30,18,29,18,28,245,31,48,31,138,31,37,31,37,30,245,31,88,31,250,31,72,31,72,30,30,31,50,31,19,31,244,31,149,31,129,31,131,31,102,31,97,31,154,31,217,31,217,30,69,31,111,31,96,31,226,31,220,31,145,31,226,31,226,30,88,31,134,31,160,31,86,31,86,30,229,31,229,30,229,29,58,31,58,30,255,31,188,31,56,31,103,31,52,31,79,31,130,31,130,30,79,31,219,31,219,30,154,31,183,31,243,31,151,31,52,31,52,30,52,29,248,31,44,31,84,31,232,31,100,31,100,30,88,31,152,31,152,30,73,31,164,31,127,31,49,31,161,31,161,30,69,31,115,31,3,31,87,31,224,31,210,31,131,31,233,31,109,31,197,31,240,31,78,31,141,31,141,30,235,31,235,30,4,31,34,31,34,30,5,31,5,30,5,29,5,28,140,31,254,31,60,31,252,31,94,31,245,31,183,31,183,30,108,31,108,30,208,31,208,30,86,31,86,30,167,31,167,30,167,29,244,31,178,31,36,31,92,31,124,31,124,30,187,31,140,31,3,31,167,31,167,30,167,29,2,31,36,31,36,30,36,29,36,28,36,27,152,31,146,31,146,30,191,31,107,31,119,31,158,31,158,30,235,31,134,31,33,31,150,31,69,31,11,31,145,31,122,31,21,31,21,30,117,31,29,31,29,30,36,31,36,30,44,31,54,31,128,31,77,31,135,31,216,31,74,31,206,31,250,31,250,30,248,31,163,31,207,31,97,31,160,31,115,31,81,31,60,31,186,31,85,31,250,31,250,30,26,31,247,31,139,31,14,31,210,31,33,31,33,30,90,31,180,31,124,31,132,31,142,31,250,31,112,31,112,30,25,31,100,31,137,31,133,31,133,30,255,31,140,31,8,31,8,30,8,29,212,31,212,30,58,31,34,31,190,31,190,30,53,31,130,31,233,31,243,31,188,31,182,31,8,31,45,31,45,30,40,31,117,31,57,31,31,31,31,30,80,31,213,31,103,31,103,30,134,31,134,30,173,31,95,31,11,31,78,31,7,31,147,31,40,31,239,31,164,31,167,31,66,31,191,31,252,31,123,31,143,31,13,31,44,31,44,30,44,29,5,31,186,31,186,30,186,29,191,31,191,30,40,31,101,31,236,31,63,31,126,31,34,31,63,31,38,31,229,31,55,31,76,31,179,31,179,30,39,31,92,31,92,30,98,31,98,30,204,31,234,31,234,30,101,31,39,31,183,31,87,31,87,30,197,31,207,31,218,31,56,31,233,31,233,30,233,29,94,31,75,31,173,31,50,31,50,30,50,29,50,28,50,27,50,26,129,31,129,30,83,31,60,31,88,31,125,31,47,31,6,31,213,31,132,31,132,30,241,31,229,31,201,31,223,31,223,30,223,29,240,31,215,31,215,30,76,31,251,31,251,30,34,31,109,31,96,31,84,31,52,31,214,31,120,31,187,31,197,31,252,31,104,31,108,31,108,30,240,31,189,31,11,31,76,31,76,30,199,31,46,31,189,31,243,31,191,31,191,30,191,29,120,31,90,31,114,31,124,31,5,31,207,31,11,31,124,31,170,31,125,31,81,31,153,31,220,31,215,31,215,30,129,31,199,31,54,31,142,31,50,31,40,31,52,31,194,31,88,31,94,31,172,31,183,31,238,31,219,31,45,31,83,31,219,31,89,31,172,31,85,31,170,31,19,31,211,31,32,31,41,31,233,31,233,30,63,31,242,31,242,30,85,31,61,31,61,30,61,29,219,31,128,31,91,31,216,31,216,30,113,31,193,31,193,30,72,31,193,31,178,31,246,31,144,31,207,31,65,31,108,31,159,31,199,31,15,31,251,31,164,31,203,31,65,31,193,31,193,30,186,31,242,31,22,31,242,31,74,31,74,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
