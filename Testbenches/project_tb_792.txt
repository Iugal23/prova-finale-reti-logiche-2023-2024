-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 734;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (126,0,0,0,120,0,193,0,0,0,224,0,189,0,239,0,104,0,181,0,255,0,111,0,211,0,184,0,141,0,0,0,251,0,138,0,67,0,217,0,36,0,0,0,232,0,0,0,13,0,195,0,123,0,230,0,252,0,0,0,20,0,106,0,144,0,229,0,0,0,22,0,36,0,0,0,145,0,0,0,56,0,136,0,38,0,47,0,197,0,0,0,0,0,141,0,237,0,153,0,208,0,135,0,158,0,37,0,0,0,40,0,63,0,204,0,93,0,0,0,0,0,66,0,39,0,184,0,0,0,38,0,5,0,49,0,2,0,0,0,0,0,0,0,72,0,85,0,242,0,160,0,0,0,0,0,253,0,232,0,235,0,152,0,0,0,50,0,38,0,76,0,144,0,196,0,16,0,31,0,40,0,99,0,0,0,0,0,88,0,37,0,161,0,254,0,0,0,0,0,56,0,63,0,197,0,240,0,38,0,212,0,0,0,0,0,114,0,136,0,231,0,154,0,0,0,42,0,125,0,125,0,0,0,33,0,217,0,158,0,0,0,0,0,118,0,62,0,113,0,179,0,0,0,70,0,143,0,220,0,142,0,40,0,61,0,154,0,213,0,53,0,29,0,203,0,82,0,42,0,51,0,0,0,118,0,120,0,129,0,217,0,88,0,66,0,0,0,57,0,248,0,238,0,17,0,210,0,239,0,31,0,43,0,56,0,75,0,252,0,175,0,6,0,0,0,0,0,183,0,36,0,184,0,73,0,10,0,166,0,119,0,132,0,214,0,46,0,134,0,0,0,0,0,5,0,0,0,210,0,94,0,199,0,0,0,207,0,16,0,124,0,0,0,15,0,69,0,29,0,153,0,169,0,134,0,172,0,34,0,252,0,253,0,6,0,249,0,92,0,0,0,19,0,140,0,0,0,116,0,65,0,20,0,0,0,44,0,43,0,93,0,108,0,196,0,253,0,107,0,63,0,76,0,0,0,101,0,140,0,0,0,0,0,167,0,148,0,73,0,162,0,139,0,58,0,79,0,143,0,103,0,0,0,30,0,216,0,0,0,0,0,243,0,236,0,232,0,38,0,0,0,208,0,78,0,40,0,86,0,0,0,164,0,240,0,157,0,193,0,212,0,0,0,30,0,83,0,85,0,162,0,132,0,0,0,188,0,253,0,83,0,93,0,22,0,0,0,11,0,0,0,104,0,158,0,0,0,155,0,0,0,12,0,0,0,0,0,7,0,55,0,133,0,3,0,0,0,141,0,87,0,32,0,116,0,87,0,161,0,201,0,0,0,8,0,150,0,73,0,76,0,122,0,0,0,103,0,195,0,143,0,22,0,75,0,163,0,124,0,0,0,226,0,198,0,62,0,202,0,0,0,254,0,13,0,161,0,216,0,28,0,218,0,208,0,0,0,123,0,188,0,86,0,93,0,168,0,54,0,225,0,79,0,148,0,64,0,104,0,113,0,104,0,56,0,183,0,26,0,219,0,204,0,0,0,0,0,239,0,210,0,81,0,52,0,87,0,168,0,204,0,13,0,45,0,0,0,185,0,182,0,25,0,109,0,127,0,235,0,173,0,0,0,210,0,103,0,225,0,110,0,0,0,104,0,156,0,91,0,5,0,161,0,0,0,115,0,103,0,0,0,170,0,211,0,182,0,212,0,205,0,233,0,156,0,223,0,16,0,0,0,170,0,74,0,148,0,187,0,199,0,170,0,0,0,27,0,77,0,100,0,95,0,78,0,14,0,181,0,190,0,176,0,201,0,172,0,208,0,222,0,48,0,215,0,208,0,0,0,0,0,0,0,216,0,232,0,0,0,16,0,141,0,44,0,4,0,191,0,164,0,136,0,124,0,250,0,0,0,0,0,195,0,0,0,102,0,0,0,240,0,0,0,115,0,52,0,22,0,0,0,0,0,0,0,43,0,183,0,0,0,19,0,0,0,93,0,86,0,234,0,153,0,255,0,60,0,104,0,246,0,241,0,186,0,193,0,0,0,112,0,152,0,146,0,0,0,6,0,55,0,186,0,0,0,83,0,0,0,156,0,0,0,0,0,230,0,102,0,21,0,234,0,185,0,41,0,85,0,241,0,147,0,237,0,92,0,172,0,249,0,80,0,147,0,16,0,204,0,49,0,212,0,34,0,142,0,199,0,77,0,207,0,70,0,120,0,172,0,101,0,224,0,228,0,52,0,204,0,0,0,0,0,66,0,50,0,246,0,27,0,0,0,0,0,178,0,0,0,0,0,152,0,1,0,82,0,126,0,181,0,0,0,227,0,52,0,73,0,207,0,2,0,45,0,201,0,0,0,0,0,92,0,107,0,0,0,96,0,196,0,204,0,225,0,253,0,94,0,185,0,126,0,49,0,0,0,0,0,75,0,197,0,190,0,244,0,0,0,169,0,0,0,45,0,127,0,137,0,178,0,162,0,169,0,67,0,213,0,125,0,0,0,143,0,0,0,8,0,8,0,184,0,82,0,178,0,13,0,161,0,53,0,21,0,77,0,184,0,150,0,54,0,189,0,0,0,2,0,9,0,60,0,0,0,16,0,68,0,3,0,0,0,0,0,0,0,225,0,231,0,0,0,253,0,38,0,99,0,234,0,0,0,0,0,84,0,91,0,49,0,118,0,253,0,178,0,0,0,78,0,166,0,226,0,35,0,69,0,49,0,0,0,0,0,0,0,0,0,0,0,20,0,84,0,153,0,0,0,225,0,156,0,27,0,242,0,0,0,26,0,0,0,62,0,163,0,126,0,31,0,89,0,122,0,95,0,44,0,247,0,40,0,143,0,214,0,138,0,12,0,0,0,162,0,153,0,232,0,0,0,170,0,240,0,72,0,27,0,13,0,130,0,147,0,137,0,144,0,141,0,14,0,157,0,0,0,44,0,132,0,44,0,159,0,0,0,205,0,78,0,53,0,64,0,70,0,168,0,0,0,230,0,63,0,44,0,29,0,0,0,3,0,81,0,102,0,250,0,0,0,86,0,232,0,0,0,0,0,61,0,21,0,0,0,207,0,191,0,224,0,61,0,0,0,9,0,24,0,158,0,6,0,83,0,254,0,102,0,163,0,82,0,231,0,158,0,0,0,0,0,101,0,11,0,162,0,0,0,0,0,32,0,173,0,0,0,125,0,0,0,11,0,0,0,0,0,131,0,113,0,26,0,0,0,114,0,231,0,246,0,210,0,185,0,18,0,213,0,0,0,79,0,0,0,171,0,59,0,223,0,161,0,200,0,0,0,178,0,148,0,0,0,209,0,204,0,47,0,147,0,92,0,0,0,0,0);
signal scenario_full  : scenario_type := (126,31,126,30,120,31,193,31,193,30,224,31,189,31,239,31,104,31,181,31,255,31,111,31,211,31,184,31,141,31,141,30,251,31,138,31,67,31,217,31,36,31,36,30,232,31,232,30,13,31,195,31,123,31,230,31,252,31,252,30,20,31,106,31,144,31,229,31,229,30,22,31,36,31,36,30,145,31,145,30,56,31,136,31,38,31,47,31,197,31,197,30,197,29,141,31,237,31,153,31,208,31,135,31,158,31,37,31,37,30,40,31,63,31,204,31,93,31,93,30,93,29,66,31,39,31,184,31,184,30,38,31,5,31,49,31,2,31,2,30,2,29,2,28,72,31,85,31,242,31,160,31,160,30,160,29,253,31,232,31,235,31,152,31,152,30,50,31,38,31,76,31,144,31,196,31,16,31,31,31,40,31,99,31,99,30,99,29,88,31,37,31,161,31,254,31,254,30,254,29,56,31,63,31,197,31,240,31,38,31,212,31,212,30,212,29,114,31,136,31,231,31,154,31,154,30,42,31,125,31,125,31,125,30,33,31,217,31,158,31,158,30,158,29,118,31,62,31,113,31,179,31,179,30,70,31,143,31,220,31,142,31,40,31,61,31,154,31,213,31,53,31,29,31,203,31,82,31,42,31,51,31,51,30,118,31,120,31,129,31,217,31,88,31,66,31,66,30,57,31,248,31,238,31,17,31,210,31,239,31,31,31,43,31,56,31,75,31,252,31,175,31,6,31,6,30,6,29,183,31,36,31,184,31,73,31,10,31,166,31,119,31,132,31,214,31,46,31,134,31,134,30,134,29,5,31,5,30,210,31,94,31,199,31,199,30,207,31,16,31,124,31,124,30,15,31,69,31,29,31,153,31,169,31,134,31,172,31,34,31,252,31,253,31,6,31,249,31,92,31,92,30,19,31,140,31,140,30,116,31,65,31,20,31,20,30,44,31,43,31,93,31,108,31,196,31,253,31,107,31,63,31,76,31,76,30,101,31,140,31,140,30,140,29,167,31,148,31,73,31,162,31,139,31,58,31,79,31,143,31,103,31,103,30,30,31,216,31,216,30,216,29,243,31,236,31,232,31,38,31,38,30,208,31,78,31,40,31,86,31,86,30,164,31,240,31,157,31,193,31,212,31,212,30,30,31,83,31,85,31,162,31,132,31,132,30,188,31,253,31,83,31,93,31,22,31,22,30,11,31,11,30,104,31,158,31,158,30,155,31,155,30,12,31,12,30,12,29,7,31,55,31,133,31,3,31,3,30,141,31,87,31,32,31,116,31,87,31,161,31,201,31,201,30,8,31,150,31,73,31,76,31,122,31,122,30,103,31,195,31,143,31,22,31,75,31,163,31,124,31,124,30,226,31,198,31,62,31,202,31,202,30,254,31,13,31,161,31,216,31,28,31,218,31,208,31,208,30,123,31,188,31,86,31,93,31,168,31,54,31,225,31,79,31,148,31,64,31,104,31,113,31,104,31,56,31,183,31,26,31,219,31,204,31,204,30,204,29,239,31,210,31,81,31,52,31,87,31,168,31,204,31,13,31,45,31,45,30,185,31,182,31,25,31,109,31,127,31,235,31,173,31,173,30,210,31,103,31,225,31,110,31,110,30,104,31,156,31,91,31,5,31,161,31,161,30,115,31,103,31,103,30,170,31,211,31,182,31,212,31,205,31,233,31,156,31,223,31,16,31,16,30,170,31,74,31,148,31,187,31,199,31,170,31,170,30,27,31,77,31,100,31,95,31,78,31,14,31,181,31,190,31,176,31,201,31,172,31,208,31,222,31,48,31,215,31,208,31,208,30,208,29,208,28,216,31,232,31,232,30,16,31,141,31,44,31,4,31,191,31,164,31,136,31,124,31,250,31,250,30,250,29,195,31,195,30,102,31,102,30,240,31,240,30,115,31,52,31,22,31,22,30,22,29,22,28,43,31,183,31,183,30,19,31,19,30,93,31,86,31,234,31,153,31,255,31,60,31,104,31,246,31,241,31,186,31,193,31,193,30,112,31,152,31,146,31,146,30,6,31,55,31,186,31,186,30,83,31,83,30,156,31,156,30,156,29,230,31,102,31,21,31,234,31,185,31,41,31,85,31,241,31,147,31,237,31,92,31,172,31,249,31,80,31,147,31,16,31,204,31,49,31,212,31,34,31,142,31,199,31,77,31,207,31,70,31,120,31,172,31,101,31,224,31,228,31,52,31,204,31,204,30,204,29,66,31,50,31,246,31,27,31,27,30,27,29,178,31,178,30,178,29,152,31,1,31,82,31,126,31,181,31,181,30,227,31,52,31,73,31,207,31,2,31,45,31,201,31,201,30,201,29,92,31,107,31,107,30,96,31,196,31,204,31,225,31,253,31,94,31,185,31,126,31,49,31,49,30,49,29,75,31,197,31,190,31,244,31,244,30,169,31,169,30,45,31,127,31,137,31,178,31,162,31,169,31,67,31,213,31,125,31,125,30,143,31,143,30,8,31,8,31,184,31,82,31,178,31,13,31,161,31,53,31,21,31,77,31,184,31,150,31,54,31,189,31,189,30,2,31,9,31,60,31,60,30,16,31,68,31,3,31,3,30,3,29,3,28,225,31,231,31,231,30,253,31,38,31,99,31,234,31,234,30,234,29,84,31,91,31,49,31,118,31,253,31,178,31,178,30,78,31,166,31,226,31,35,31,69,31,49,31,49,30,49,29,49,28,49,27,49,26,20,31,84,31,153,31,153,30,225,31,156,31,27,31,242,31,242,30,26,31,26,30,62,31,163,31,126,31,31,31,89,31,122,31,95,31,44,31,247,31,40,31,143,31,214,31,138,31,12,31,12,30,162,31,153,31,232,31,232,30,170,31,240,31,72,31,27,31,13,31,130,31,147,31,137,31,144,31,141,31,14,31,157,31,157,30,44,31,132,31,44,31,159,31,159,30,205,31,78,31,53,31,64,31,70,31,168,31,168,30,230,31,63,31,44,31,29,31,29,30,3,31,81,31,102,31,250,31,250,30,86,31,232,31,232,30,232,29,61,31,21,31,21,30,207,31,191,31,224,31,61,31,61,30,9,31,24,31,158,31,6,31,83,31,254,31,102,31,163,31,82,31,231,31,158,31,158,30,158,29,101,31,11,31,162,31,162,30,162,29,32,31,173,31,173,30,125,31,125,30,11,31,11,30,11,29,131,31,113,31,26,31,26,30,114,31,231,31,246,31,210,31,185,31,18,31,213,31,213,30,79,31,79,30,171,31,59,31,223,31,161,31,200,31,200,30,178,31,148,31,148,30,209,31,204,31,47,31,147,31,92,31,92,30,92,29);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
