-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 764;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (102,0,181,0,0,0,137,0,0,0,3,0,243,0,0,0,58,0,122,0,169,0,120,0,12,0,0,0,160,0,0,0,2,0,0,0,123,0,111,0,0,0,247,0,0,0,1,0,0,0,223,0,59,0,0,0,237,0,54,0,58,0,125,0,157,0,60,0,93,0,142,0,2,0,108,0,0,0,110,0,203,0,123,0,237,0,87,0,227,0,161,0,160,0,157,0,83,0,208,0,0,0,0,0,0,0,237,0,160,0,205,0,249,0,48,0,3,0,115,0,10,0,127,0,78,0,197,0,64,0,205,0,84,0,0,0,8,0,239,0,74,0,97,0,27,0,225,0,248,0,0,0,169,0,10,0,219,0,204,0,97,0,136,0,240,0,17,0,138,0,118,0,0,0,79,0,155,0,28,0,0,0,108,0,90,0,19,0,0,0,130,0,238,0,14,0,162,0,0,0,246,0,0,0,79,0,200,0,180,0,154,0,0,0,0,0,164,0,0,0,187,0,0,0,133,0,0,0,194,0,198,0,112,0,182,0,50,0,0,0,213,0,65,0,242,0,194,0,21,0,0,0,107,0,112,0,176,0,160,0,0,0,0,0,100,0,20,0,0,0,0,0,226,0,204,0,222,0,0,0,139,0,100,0,149,0,40,0,29,0,157,0,196,0,9,0,253,0,123,0,127,0,189,0,98,0,148,0,0,0,144,0,0,0,226,0,130,0,210,0,89,0,93,0,13,0,111,0,209,0,87,0,184,0,0,0,0,0,201,0,0,0,0,0,0,0,0,0,184,0,0,0,74,0,186,0,13,0,190,0,45,0,0,0,189,0,0,0,193,0,106,0,0,0,55,0,239,0,160,0,47,0,60,0,99,0,0,0,84,0,0,0,0,0,116,0,0,0,99,0,18,0,0,0,22,0,0,0,82,0,14,0,227,0,237,0,0,0,117,0,0,0,65,0,160,0,149,0,142,0,0,0,233,0,91,0,185,0,122,0,35,0,91,0,0,0,22,0,0,0,25,0,240,0,160,0,117,0,93,0,87,0,27,0,22,0,132,0,78,0,234,0,222,0,0,0,101,0,251,0,96,0,87,0,212,0,201,0,0,0,0,0,142,0,216,0,32,0,164,0,49,0,0,0,31,0,0,0,40,0,0,0,216,0,0,0,55,0,0,0,103,0,0,0,104,0,46,0,0,0,102,0,159,0,0,0,218,0,171,0,52,0,51,0,53,0,90,0,64,0,154,0,133,0,234,0,0,0,99,0,66,0,31,0,203,0,8,0,63,0,15,0,215,0,211,0,0,0,250,0,219,0,35,0,0,0,132,0,32,0,182,0,211,0,27,0,0,0,108,0,9,0,55,0,212,0,183,0,243,0,0,0,125,0,13,0,146,0,0,0,48,0,0,0,0,0,0,0,159,0,7,0,191,0,0,0,209,0,0,0,0,0,155,0,197,0,226,0,48,0,113,0,185,0,61,0,102,0,0,0,163,0,35,0,75,0,35,0,0,0,223,0,215,0,8,0,111,0,167,0,58,0,173,0,132,0,0,0,48,0,226,0,43,0,227,0,0,0,129,0,0,0,153,0,0,0,183,0,0,0,29,0,0,0,169,0,0,0,219,0,38,0,214,0,170,0,188,0,74,0,85,0,0,0,0,0,64,0,170,0,176,0,0,0,114,0,236,0,0,0,100,0,74,0,4,0,102,0,170,0,222,0,0,0,175,0,166,0,175,0,78,0,61,0,87,0,0,0,93,0,159,0,42,0,237,0,251,0,194,0,151,0,199,0,0,0,168,0,6,0,0,0,173,0,97,0,0,0,94,0,33,0,11,0,234,0,138,0,143,0,98,0,185,0,149,0,76,0,4,0,62,0,95,0,97,0,103,0,163,0,39,0,0,0,106,0,174,0,0,0,109,0,105,0,111,0,86,0,172,0,212,0,159,0,182,0,103,0,34,0,59,0,170,0,54,0,119,0,81,0,0,0,63,0,0,0,57,0,13,0,91,0,185,0,195,0,95,0,193,0,120,0,171,0,250,0,109,0,237,0,55,0,0,0,125,0,250,0,100,0,247,0,152,0,158,0,0,0,129,0,0,0,9,0,188,0,185,0,114,0,0,0,241,0,224,0,221,0,58,0,0,0,69,0,73,0,221,0,210,0,226,0,183,0,233,0,0,0,9,0,124,0,218,0,0,0,41,0,19,0,206,0,91,0,228,0,78,0,231,0,159,0,48,0,133,0,163,0,111,0,160,0,133,0,102,0,227,0,203,0,200,0,0,0,255,0,212,0,230,0,110,0,99,0,193,0,46,0,225,0,0,0,1,0,206,0,64,0,194,0,0,0,0,0,191,0,10,0,153,0,0,0,247,0,129,0,120,0,159,0,17,0,164,0,103,0,98,0,200,0,0,0,235,0,180,0,185,0,30,0,114,0,92,0,23,0,0,0,54,0,0,0,0,0,0,0,33,0,96,0,77,0,152,0,32,0,86,0,0,0,99,0,247,0,192,0,200,0,213,0,201,0,20,0,252,0,0,0,74,0,0,0,111,0,192,0,250,0,0,0,238,0,80,0,141,0,73,0,220,0,2,0,208,0,91,0,0,0,21,0,164,0,137,0,154,0,165,0,244,0,144,0,0,0,221,0,187,0,95,0,198,0,99,0,231,0,84,0,134,0,198,0,195,0,92,0,129,0,240,0,27,0,199,0,146,0,169,0,0,0,177,0,242,0,248,0,0,0,210,0,232,0,243,0,69,0,5,0,0,0,115,0,101,0,0,0,230,0,161,0,82,0,121,0,187,0,232,0,0,0,151,0,0,0,0,0,11,0,0,0,0,0,0,0,221,0,250,0,216,0,146,0,150,0,114,0,99,0,162,0,92,0,168,0,146,0,215,0,191,0,51,0,0,0,0,0,110,0,232,0,62,0,102,0,209,0,221,0,176,0,158,0,241,0,74,0,219,0,243,0,19,0,137,0,5,0,238,0,55,0,29,0,60,0,73,0,235,0,144,0,0,0,51,0,0,0,164,0,65,0,84,0,227,0,215,0,40,0,254,0,236,0,175,0,136,0,41,0,0,0,179,0,67,0,233,0,18,0,28,0,0,0,4,0,229,0,197,0,0,0,189,0,0,0,238,0,0,0,188,0,0,0,184,0,69,0,162,0,216,0,86,0,213,0,0,0,3,0,0,0,62,0,0,0,113,0,62,0,127,0,0,0,16,0,250,0,116,0,96,0,45,0,122,0,142,0,230,0,0,0,0,0,240,0,0,0,35,0,35,0,65,0,18,0,70,0,8,0,94,0,66,0,153,0,162,0,62,0,0,0,183,0,114,0,0,0,94,0,164,0,235,0,152,0,130,0,0,0,0,0,44,0,158,0,89,0,43,0,0,0,0,0,18,0,152,0,144,0,82,0,53,0,28,0,242,0,0,0);
signal scenario_full  : scenario_type := (102,31,181,31,181,30,137,31,137,30,3,31,243,31,243,30,58,31,122,31,169,31,120,31,12,31,12,30,160,31,160,30,2,31,2,30,123,31,111,31,111,30,247,31,247,30,1,31,1,30,223,31,59,31,59,30,237,31,54,31,58,31,125,31,157,31,60,31,93,31,142,31,2,31,108,31,108,30,110,31,203,31,123,31,237,31,87,31,227,31,161,31,160,31,157,31,83,31,208,31,208,30,208,29,208,28,237,31,160,31,205,31,249,31,48,31,3,31,115,31,10,31,127,31,78,31,197,31,64,31,205,31,84,31,84,30,8,31,239,31,74,31,97,31,27,31,225,31,248,31,248,30,169,31,10,31,219,31,204,31,97,31,136,31,240,31,17,31,138,31,118,31,118,30,79,31,155,31,28,31,28,30,108,31,90,31,19,31,19,30,130,31,238,31,14,31,162,31,162,30,246,31,246,30,79,31,200,31,180,31,154,31,154,30,154,29,164,31,164,30,187,31,187,30,133,31,133,30,194,31,198,31,112,31,182,31,50,31,50,30,213,31,65,31,242,31,194,31,21,31,21,30,107,31,112,31,176,31,160,31,160,30,160,29,100,31,20,31,20,30,20,29,226,31,204,31,222,31,222,30,139,31,100,31,149,31,40,31,29,31,157,31,196,31,9,31,253,31,123,31,127,31,189,31,98,31,148,31,148,30,144,31,144,30,226,31,130,31,210,31,89,31,93,31,13,31,111,31,209,31,87,31,184,31,184,30,184,29,201,31,201,30,201,29,201,28,201,27,184,31,184,30,74,31,186,31,13,31,190,31,45,31,45,30,189,31,189,30,193,31,106,31,106,30,55,31,239,31,160,31,47,31,60,31,99,31,99,30,84,31,84,30,84,29,116,31,116,30,99,31,18,31,18,30,22,31,22,30,82,31,14,31,227,31,237,31,237,30,117,31,117,30,65,31,160,31,149,31,142,31,142,30,233,31,91,31,185,31,122,31,35,31,91,31,91,30,22,31,22,30,25,31,240,31,160,31,117,31,93,31,87,31,27,31,22,31,132,31,78,31,234,31,222,31,222,30,101,31,251,31,96,31,87,31,212,31,201,31,201,30,201,29,142,31,216,31,32,31,164,31,49,31,49,30,31,31,31,30,40,31,40,30,216,31,216,30,55,31,55,30,103,31,103,30,104,31,46,31,46,30,102,31,159,31,159,30,218,31,171,31,52,31,51,31,53,31,90,31,64,31,154,31,133,31,234,31,234,30,99,31,66,31,31,31,203,31,8,31,63,31,15,31,215,31,211,31,211,30,250,31,219,31,35,31,35,30,132,31,32,31,182,31,211,31,27,31,27,30,108,31,9,31,55,31,212,31,183,31,243,31,243,30,125,31,13,31,146,31,146,30,48,31,48,30,48,29,48,28,159,31,7,31,191,31,191,30,209,31,209,30,209,29,155,31,197,31,226,31,48,31,113,31,185,31,61,31,102,31,102,30,163,31,35,31,75,31,35,31,35,30,223,31,215,31,8,31,111,31,167,31,58,31,173,31,132,31,132,30,48,31,226,31,43,31,227,31,227,30,129,31,129,30,153,31,153,30,183,31,183,30,29,31,29,30,169,31,169,30,219,31,38,31,214,31,170,31,188,31,74,31,85,31,85,30,85,29,64,31,170,31,176,31,176,30,114,31,236,31,236,30,100,31,74,31,4,31,102,31,170,31,222,31,222,30,175,31,166,31,175,31,78,31,61,31,87,31,87,30,93,31,159,31,42,31,237,31,251,31,194,31,151,31,199,31,199,30,168,31,6,31,6,30,173,31,97,31,97,30,94,31,33,31,11,31,234,31,138,31,143,31,98,31,185,31,149,31,76,31,4,31,62,31,95,31,97,31,103,31,163,31,39,31,39,30,106,31,174,31,174,30,109,31,105,31,111,31,86,31,172,31,212,31,159,31,182,31,103,31,34,31,59,31,170,31,54,31,119,31,81,31,81,30,63,31,63,30,57,31,13,31,91,31,185,31,195,31,95,31,193,31,120,31,171,31,250,31,109,31,237,31,55,31,55,30,125,31,250,31,100,31,247,31,152,31,158,31,158,30,129,31,129,30,9,31,188,31,185,31,114,31,114,30,241,31,224,31,221,31,58,31,58,30,69,31,73,31,221,31,210,31,226,31,183,31,233,31,233,30,9,31,124,31,218,31,218,30,41,31,19,31,206,31,91,31,228,31,78,31,231,31,159,31,48,31,133,31,163,31,111,31,160,31,133,31,102,31,227,31,203,31,200,31,200,30,255,31,212,31,230,31,110,31,99,31,193,31,46,31,225,31,225,30,1,31,206,31,64,31,194,31,194,30,194,29,191,31,10,31,153,31,153,30,247,31,129,31,120,31,159,31,17,31,164,31,103,31,98,31,200,31,200,30,235,31,180,31,185,31,30,31,114,31,92,31,23,31,23,30,54,31,54,30,54,29,54,28,33,31,96,31,77,31,152,31,32,31,86,31,86,30,99,31,247,31,192,31,200,31,213,31,201,31,20,31,252,31,252,30,74,31,74,30,111,31,192,31,250,31,250,30,238,31,80,31,141,31,73,31,220,31,2,31,208,31,91,31,91,30,21,31,164,31,137,31,154,31,165,31,244,31,144,31,144,30,221,31,187,31,95,31,198,31,99,31,231,31,84,31,134,31,198,31,195,31,92,31,129,31,240,31,27,31,199,31,146,31,169,31,169,30,177,31,242,31,248,31,248,30,210,31,232,31,243,31,69,31,5,31,5,30,115,31,101,31,101,30,230,31,161,31,82,31,121,31,187,31,232,31,232,30,151,31,151,30,151,29,11,31,11,30,11,29,11,28,221,31,250,31,216,31,146,31,150,31,114,31,99,31,162,31,92,31,168,31,146,31,215,31,191,31,51,31,51,30,51,29,110,31,232,31,62,31,102,31,209,31,221,31,176,31,158,31,241,31,74,31,219,31,243,31,19,31,137,31,5,31,238,31,55,31,29,31,60,31,73,31,235,31,144,31,144,30,51,31,51,30,164,31,65,31,84,31,227,31,215,31,40,31,254,31,236,31,175,31,136,31,41,31,41,30,179,31,67,31,233,31,18,31,28,31,28,30,4,31,229,31,197,31,197,30,189,31,189,30,238,31,238,30,188,31,188,30,184,31,69,31,162,31,216,31,86,31,213,31,213,30,3,31,3,30,62,31,62,30,113,31,62,31,127,31,127,30,16,31,250,31,116,31,96,31,45,31,122,31,142,31,230,31,230,30,230,29,240,31,240,30,35,31,35,31,65,31,18,31,70,31,8,31,94,31,66,31,153,31,162,31,62,31,62,30,183,31,114,31,114,30,94,31,164,31,235,31,152,31,130,31,130,30,130,29,44,31,158,31,89,31,43,31,43,30,43,29,18,31,152,31,144,31,82,31,53,31,28,31,242,31,242,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
