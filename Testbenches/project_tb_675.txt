-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 401;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (0,0,155,0,179,0,181,0,185,0,129,0,211,0,145,0,0,0,196,0,26,0,107,0,50,0,37,0,0,0,4,0,39,0,0,0,220,0,192,0,252,0,85,0,163,0,68,0,196,0,124,0,95,0,220,0,51,0,0,0,111,0,0,0,179,0,0,0,0,0,235,0,0,0,244,0,0,0,0,0,113,0,246,0,231,0,154,0,64,0,0,0,3,0,229,0,57,0,0,0,194,0,204,0,165,0,88,0,83,0,9,0,130,0,156,0,31,0,0,0,92,0,237,0,144,0,86,0,82,0,62,0,65,0,255,0,0,0,0,0,24,0,0,0,0,0,165,0,0,0,76,0,0,0,156,0,110,0,81,0,0,0,52,0,29,0,180,0,0,0,96,0,54,0,0,0,0,0,134,0,81,0,36,0,183,0,52,0,138,0,0,0,222,0,181,0,30,0,0,0,45,0,0,0,117,0,0,0,167,0,248,0,125,0,219,0,165,0,0,0,122,0,247,0,148,0,217,0,115,0,37,0,28,0,116,0,162,0,78,0,243,0,137,0,73,0,0,0,150,0,156,0,55,0,161,0,164,0,139,0,0,0,34,0,13,0,30,0,121,0,0,0,134,0,0,0,83,0,0,0,0,0,0,0,2,0,168,0,13,0,144,0,169,0,161,0,152,0,34,0,219,0,35,0,28,0,59,0,0,0,252,0,102,0,110,0,81,0,251,0,207,0,51,0,6,0,56,0,27,0,61,0,144,0,133,0,240,0,0,0,11,0,228,0,138,0,235,0,30,0,220,0,22,0,213,0,207,0,74,0,71,0,64,0,0,0,225,0,168,0,204,0,0,0,1,0,146,0,246,0,177,0,160,0,147,0,0,0,0,0,229,0,76,0,201,0,0,0,217,0,171,0,187,0,13,0,124,0,139,0,102,0,188,0,242,0,193,0,176,0,81,0,234,0,80,0,117,0,212,0,157,0,49,0,20,0,118,0,0,0,67,0,0,0,222,0,0,0,107,0,214,0,9,0,0,0,226,0,176,0,0,0,138,0,0,0,61,0,22,0,238,0,252,0,192,0,114,0,0,0,98,0,65,0,0,0,28,0,240,0,0,0,0,0,189,0,117,0,11,0,0,0,83,0,88,0,54,0,186,0,0,0,0,0,254,0,77,0,197,0,247,0,14,0,154,0,57,0,48,0,0,0,83,0,198,0,0,0,50,0,199,0,60,0,116,0,198,0,194,0,166,0,133,0,248,0,234,0,115,0,188,0,105,0,40,0,0,0,0,0,85,0,202,0,0,0,141,0,127,0,120,0,8,0,77,0,253,0,180,0,53,0,217,0,177,0,33,0,0,0,32,0,129,0,0,0,27,0,0,0,0,0,0,0,0,0,46,0,176,0,89,0,162,0,36,0,68,0,68,0,89,0,209,0,58,0,111,0,23,0,68,0,180,0,220,0,181,0,14,0,103,0,203,0,88,0,10,0,203,0,0,0,237,0,70,0,179,0,40,0,131,0,219,0,38,0,194,0,235,0,0,0,120,0,58,0,208,0,161,0,0,0,213,0,74,0,152,0,123,0,165,0,171,0,169,0,0,0,3,0,0,0,156,0,56,0,222,0,133,0,226,0,242,0,15,0,248,0,0,0,26,0,0,0,213,0,19,0,5,0,184,0,170,0,119,0,174,0,0,0,113,0,171,0,105,0,130,0,0,0,0,0,190,0,37,0,107,0,33,0,239,0,30,0,30,0,191,0,0,0,43,0,253,0,0,0,0,0,0,0,147,0,224,0,0,0,10,0,83,0,169,0);
signal scenario_full  : scenario_type := (0,0,155,31,179,31,181,31,185,31,129,31,211,31,145,31,145,30,196,31,26,31,107,31,50,31,37,31,37,30,4,31,39,31,39,30,220,31,192,31,252,31,85,31,163,31,68,31,196,31,124,31,95,31,220,31,51,31,51,30,111,31,111,30,179,31,179,30,179,29,235,31,235,30,244,31,244,30,244,29,113,31,246,31,231,31,154,31,64,31,64,30,3,31,229,31,57,31,57,30,194,31,204,31,165,31,88,31,83,31,9,31,130,31,156,31,31,31,31,30,92,31,237,31,144,31,86,31,82,31,62,31,65,31,255,31,255,30,255,29,24,31,24,30,24,29,165,31,165,30,76,31,76,30,156,31,110,31,81,31,81,30,52,31,29,31,180,31,180,30,96,31,54,31,54,30,54,29,134,31,81,31,36,31,183,31,52,31,138,31,138,30,222,31,181,31,30,31,30,30,45,31,45,30,117,31,117,30,167,31,248,31,125,31,219,31,165,31,165,30,122,31,247,31,148,31,217,31,115,31,37,31,28,31,116,31,162,31,78,31,243,31,137,31,73,31,73,30,150,31,156,31,55,31,161,31,164,31,139,31,139,30,34,31,13,31,30,31,121,31,121,30,134,31,134,30,83,31,83,30,83,29,83,28,2,31,168,31,13,31,144,31,169,31,161,31,152,31,34,31,219,31,35,31,28,31,59,31,59,30,252,31,102,31,110,31,81,31,251,31,207,31,51,31,6,31,56,31,27,31,61,31,144,31,133,31,240,31,240,30,11,31,228,31,138,31,235,31,30,31,220,31,22,31,213,31,207,31,74,31,71,31,64,31,64,30,225,31,168,31,204,31,204,30,1,31,146,31,246,31,177,31,160,31,147,31,147,30,147,29,229,31,76,31,201,31,201,30,217,31,171,31,187,31,13,31,124,31,139,31,102,31,188,31,242,31,193,31,176,31,81,31,234,31,80,31,117,31,212,31,157,31,49,31,20,31,118,31,118,30,67,31,67,30,222,31,222,30,107,31,214,31,9,31,9,30,226,31,176,31,176,30,138,31,138,30,61,31,22,31,238,31,252,31,192,31,114,31,114,30,98,31,65,31,65,30,28,31,240,31,240,30,240,29,189,31,117,31,11,31,11,30,83,31,88,31,54,31,186,31,186,30,186,29,254,31,77,31,197,31,247,31,14,31,154,31,57,31,48,31,48,30,83,31,198,31,198,30,50,31,199,31,60,31,116,31,198,31,194,31,166,31,133,31,248,31,234,31,115,31,188,31,105,31,40,31,40,30,40,29,85,31,202,31,202,30,141,31,127,31,120,31,8,31,77,31,253,31,180,31,53,31,217,31,177,31,33,31,33,30,32,31,129,31,129,30,27,31,27,30,27,29,27,28,27,27,46,31,176,31,89,31,162,31,36,31,68,31,68,31,89,31,209,31,58,31,111,31,23,31,68,31,180,31,220,31,181,31,14,31,103,31,203,31,88,31,10,31,203,31,203,30,237,31,70,31,179,31,40,31,131,31,219,31,38,31,194,31,235,31,235,30,120,31,58,31,208,31,161,31,161,30,213,31,74,31,152,31,123,31,165,31,171,31,169,31,169,30,3,31,3,30,156,31,56,31,222,31,133,31,226,31,242,31,15,31,248,31,248,30,26,31,26,30,213,31,19,31,5,31,184,31,170,31,119,31,174,31,174,30,113,31,171,31,105,31,130,31,130,30,130,29,190,31,37,31,107,31,33,31,239,31,30,31,30,31,191,31,191,30,43,31,253,31,253,30,253,29,253,28,147,31,224,31,224,30,10,31,83,31,169,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
