-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 708;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (201,0,85,0,63,0,186,0,0,0,35,0,252,0,169,0,43,0,146,0,182,0,10,0,96,0,185,0,71,0,5,0,146,0,155,0,222,0,199,0,128,0,217,0,180,0,0,0,83,0,241,0,70,0,94,0,0,0,109,0,0,0,127,0,188,0,134,0,28,0,6,0,154,0,49,0,131,0,20,0,153,0,33,0,184,0,115,0,9,0,91,0,151,0,137,0,0,0,0,0,190,0,8,0,0,0,21,0,21,0,233,0,135,0,172,0,166,0,0,0,97,0,170,0,251,0,0,0,169,0,228,0,236,0,0,0,248,0,228,0,129,0,58,0,102,0,0,0,0,0,146,0,73,0,198,0,14,0,234,0,14,0,159,0,0,0,64,0,82,0,0,0,81,0,72,0,225,0,72,0,0,0,0,0,0,0,0,0,237,0,202,0,0,0,17,0,135,0,0,0,213,0,222,0,13,0,104,0,0,0,251,0,101,0,35,0,111,0,240,0,226,0,28,0,119,0,48,0,25,0,156,0,252,0,244,0,6,0,252,0,115,0,0,0,21,0,0,0,38,0,214,0,32,0,114,0,68,0,255,0,113,0,234,0,4,0,4,0,16,0,176,0,0,0,17,0,0,0,92,0,111,0,0,0,75,0,39,0,115,0,26,0,231,0,72,0,128,0,0,0,21,0,33,0,106,0,0,0,47,0,0,0,4,0,152,0,175,0,222,0,0,0,229,0,16,0,24,0,175,0,111,0,8,0,0,0,0,0,36,0,243,0,11,0,0,0,253,0,0,0,210,0,255,0,95,0,0,0,207,0,62,0,133,0,0,0,111,0,166,0,95,0,0,0,198,0,0,0,139,0,0,0,39,0,248,0,117,0,48,0,190,0,48,0,84,0,0,0,139,0,35,0,67,0,216,0,114,0,31,0,64,0,205,0,48,0,97,0,62,0,69,0,0,0,172,0,0,0,146,0,72,0,29,0,26,0,187,0,176,0,0,0,6,0,0,0,24,0,159,0,16,0,160,0,131,0,207,0,233,0,60,0,137,0,60,0,245,0,211,0,119,0,0,0,52,0,153,0,80,0,34,0,171,0,207,0,219,0,115,0,189,0,16,0,235,0,74,0,0,0,89,0,52,0,148,0,206,0,188,0,45,0,0,0,57,0,254,0,159,0,0,0,0,0,228,0,0,0,206,0,22,0,48,0,185,0,0,0,99,0,144,0,0,0,105,0,220,0,86,0,10,0,83,0,139,0,0,0,187,0,64,0,0,0,1,0,88,0,51,0,142,0,2,0,252,0,26,0,0,0,0,0,175,0,178,0,12,0,33,0,197,0,0,0,25,0,15,0,132,0,119,0,24,0,0,0,167,0,81,0,138,0,9,0,0,0,11,0,72,0,106,0,0,0,0,0,0,0,98,0,91,0,0,0,136,0,221,0,0,0,0,0,92,0,155,0,225,0,8,0,144,0,28,0,66,0,0,0,208,0,76,0,216,0,112,0,159,0,29,0,8,0,120,0,65,0,93,0,50,0,0,0,0,0,235,0,0,0,0,0,193,0,242,0,113,0,173,0,0,0,136,0,40,0,250,0,179,0,7,0,176,0,0,0,212,0,35,0,75,0,0,0,167,0,73,0,90,0,0,0,108,0,75,0,0,0,0,0,0,0,238,0,160,0,150,0,0,0,142,0,168,0,243,0,202,0,0,0,136,0,166,0,107,0,68,0,131,0,44,0,3,0,0,0,134,0,226,0,58,0,162,0,2,0,97,0,27,0,250,0,207,0,65,0,37,0,41,0,97,0,0,0,227,0,235,0,174,0,202,0,230,0,134,0,99,0,240,0,43,0,0,0,0,0,226,0,69,0,0,0,41,0,185,0,185,0,28,0,231,0,0,0,0,0,215,0,163,0,38,0,0,0,106,0,107,0,170,0,243,0,0,0,81,0,96,0,0,0,0,0,94,0,223,0,207,0,109,0,7,0,0,0,105,0,103,0,0,0,41,0,105,0,50,0,192,0,104,0,0,0,248,0,173,0,223,0,0,0,120,0,187,0,242,0,58,0,0,0,198,0,19,0,221,0,33,0,0,0,96,0,0,0,82,0,0,0,40,0,10,0,77,0,0,0,3,0,0,0,0,0,0,0,142,0,35,0,138,0,0,0,185,0,217,0,180,0,0,0,239,0,226,0,195,0,181,0,148,0,2,0,0,0,24,0,19,0,214,0,246,0,128,0,163,0,228,0,97,0,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,6,0,0,0,159,0,248,0,164,0,175,0,0,0,0,0,138,0,164,0,0,0,14,0,27,0,123,0,71,0,173,0,154,0,135,0,209,0,0,0,153,0,138,0,124,0,207,0,154,0,0,0,86,0,0,0,77,0,155,0,104,0,84,0,242,0,43,0,227,0,229,0,231,0,182,0,0,0,109,0,128,0,0,0,67,0,113,0,210,0,110,0,0,0,0,0,84,0,99,0,0,0,122,0,71,0,54,0,56,0,0,0,206,0,0,0,73,0,0,0,140,0,113,0,235,0,80,0,0,0,150,0,18,0,192,0,130,0,141,0,0,0,89,0,142,0,29,0,239,0,149,0,118,0,156,0,134,0,57,0,90,0,7,0,253,0,215,0,217,0,0,0,130,0,29,0,75,0,207,0,0,0,15,0,242,0,0,0,0,0,33,0,100,0,157,0,155,0,236,0,188,0,0,0,118,0,255,0,0,0,197,0,180,0,0,0,185,0,0,0,252,0,88,0,98,0,239,0,119,0,156,0,182,0,206,0,49,0,0,0,23,0,21,0,215,0,0,0,89,0,146,0,154,0,178,0,249,0,214,0,250,0,241,0,61,0,0,0,150,0,79,0,177,0,65,0,158,0,251,0,76,0,87,0,0,0,0,0,224,0,22,0,27,0,130,0,144,0,0,0,28,0,39,0,26,0,26,0,201,0,28,0,0,0,142,0,44,0,182,0,197,0,0,0,230,0,19,0,137,0,162,0,41,0,0,0,0,0,218,0,102,0,184,0,53,0,105,0,0,0,168,0,0,0,123,0,156,0,0,0,134,0,0,0,213,0,223,0,15,0,85,0,5,0,0,0,176,0,133,0,251,0,93,0,26,0,72,0,54,0,122,0,249,0,0,0,181,0,230,0);
signal scenario_full  : scenario_type := (201,31,85,31,63,31,186,31,186,30,35,31,252,31,169,31,43,31,146,31,182,31,10,31,96,31,185,31,71,31,5,31,146,31,155,31,222,31,199,31,128,31,217,31,180,31,180,30,83,31,241,31,70,31,94,31,94,30,109,31,109,30,127,31,188,31,134,31,28,31,6,31,154,31,49,31,131,31,20,31,153,31,33,31,184,31,115,31,9,31,91,31,151,31,137,31,137,30,137,29,190,31,8,31,8,30,21,31,21,31,233,31,135,31,172,31,166,31,166,30,97,31,170,31,251,31,251,30,169,31,228,31,236,31,236,30,248,31,228,31,129,31,58,31,102,31,102,30,102,29,146,31,73,31,198,31,14,31,234,31,14,31,159,31,159,30,64,31,82,31,82,30,81,31,72,31,225,31,72,31,72,30,72,29,72,28,72,27,237,31,202,31,202,30,17,31,135,31,135,30,213,31,222,31,13,31,104,31,104,30,251,31,101,31,35,31,111,31,240,31,226,31,28,31,119,31,48,31,25,31,156,31,252,31,244,31,6,31,252,31,115,31,115,30,21,31,21,30,38,31,214,31,32,31,114,31,68,31,255,31,113,31,234,31,4,31,4,31,16,31,176,31,176,30,17,31,17,30,92,31,111,31,111,30,75,31,39,31,115,31,26,31,231,31,72,31,128,31,128,30,21,31,33,31,106,31,106,30,47,31,47,30,4,31,152,31,175,31,222,31,222,30,229,31,16,31,24,31,175,31,111,31,8,31,8,30,8,29,36,31,243,31,11,31,11,30,253,31,253,30,210,31,255,31,95,31,95,30,207,31,62,31,133,31,133,30,111,31,166,31,95,31,95,30,198,31,198,30,139,31,139,30,39,31,248,31,117,31,48,31,190,31,48,31,84,31,84,30,139,31,35,31,67,31,216,31,114,31,31,31,64,31,205,31,48,31,97,31,62,31,69,31,69,30,172,31,172,30,146,31,72,31,29,31,26,31,187,31,176,31,176,30,6,31,6,30,24,31,159,31,16,31,160,31,131,31,207,31,233,31,60,31,137,31,60,31,245,31,211,31,119,31,119,30,52,31,153,31,80,31,34,31,171,31,207,31,219,31,115,31,189,31,16,31,235,31,74,31,74,30,89,31,52,31,148,31,206,31,188,31,45,31,45,30,57,31,254,31,159,31,159,30,159,29,228,31,228,30,206,31,22,31,48,31,185,31,185,30,99,31,144,31,144,30,105,31,220,31,86,31,10,31,83,31,139,31,139,30,187,31,64,31,64,30,1,31,88,31,51,31,142,31,2,31,252,31,26,31,26,30,26,29,175,31,178,31,12,31,33,31,197,31,197,30,25,31,15,31,132,31,119,31,24,31,24,30,167,31,81,31,138,31,9,31,9,30,11,31,72,31,106,31,106,30,106,29,106,28,98,31,91,31,91,30,136,31,221,31,221,30,221,29,92,31,155,31,225,31,8,31,144,31,28,31,66,31,66,30,208,31,76,31,216,31,112,31,159,31,29,31,8,31,120,31,65,31,93,31,50,31,50,30,50,29,235,31,235,30,235,29,193,31,242,31,113,31,173,31,173,30,136,31,40,31,250,31,179,31,7,31,176,31,176,30,212,31,35,31,75,31,75,30,167,31,73,31,90,31,90,30,108,31,75,31,75,30,75,29,75,28,238,31,160,31,150,31,150,30,142,31,168,31,243,31,202,31,202,30,136,31,166,31,107,31,68,31,131,31,44,31,3,31,3,30,134,31,226,31,58,31,162,31,2,31,97,31,27,31,250,31,207,31,65,31,37,31,41,31,97,31,97,30,227,31,235,31,174,31,202,31,230,31,134,31,99,31,240,31,43,31,43,30,43,29,226,31,69,31,69,30,41,31,185,31,185,31,28,31,231,31,231,30,231,29,215,31,163,31,38,31,38,30,106,31,107,31,170,31,243,31,243,30,81,31,96,31,96,30,96,29,94,31,223,31,207,31,109,31,7,31,7,30,105,31,103,31,103,30,41,31,105,31,50,31,192,31,104,31,104,30,248,31,173,31,223,31,223,30,120,31,187,31,242,31,58,31,58,30,198,31,19,31,221,31,33,31,33,30,96,31,96,30,82,31,82,30,40,31,10,31,77,31,77,30,3,31,3,30,3,29,3,28,142,31,35,31,138,31,138,30,185,31,217,31,180,31,180,30,239,31,226,31,195,31,181,31,148,31,2,31,2,30,24,31,19,31,214,31,246,31,128,31,163,31,228,31,97,31,214,31,214,30,214,29,214,28,214,27,214,26,214,25,214,24,39,31,6,31,6,30,159,31,248,31,164,31,175,31,175,30,175,29,138,31,164,31,164,30,14,31,27,31,123,31,71,31,173,31,154,31,135,31,209,31,209,30,153,31,138,31,124,31,207,31,154,31,154,30,86,31,86,30,77,31,155,31,104,31,84,31,242,31,43,31,227,31,229,31,231,31,182,31,182,30,109,31,128,31,128,30,67,31,113,31,210,31,110,31,110,30,110,29,84,31,99,31,99,30,122,31,71,31,54,31,56,31,56,30,206,31,206,30,73,31,73,30,140,31,113,31,235,31,80,31,80,30,150,31,18,31,192,31,130,31,141,31,141,30,89,31,142,31,29,31,239,31,149,31,118,31,156,31,134,31,57,31,90,31,7,31,253,31,215,31,217,31,217,30,130,31,29,31,75,31,207,31,207,30,15,31,242,31,242,30,242,29,33,31,100,31,157,31,155,31,236,31,188,31,188,30,118,31,255,31,255,30,197,31,180,31,180,30,185,31,185,30,252,31,88,31,98,31,239,31,119,31,156,31,182,31,206,31,49,31,49,30,23,31,21,31,215,31,215,30,89,31,146,31,154,31,178,31,249,31,214,31,250,31,241,31,61,31,61,30,150,31,79,31,177,31,65,31,158,31,251,31,76,31,87,31,87,30,87,29,224,31,22,31,27,31,130,31,144,31,144,30,28,31,39,31,26,31,26,31,201,31,28,31,28,30,142,31,44,31,182,31,197,31,197,30,230,31,19,31,137,31,162,31,41,31,41,30,41,29,218,31,102,31,184,31,53,31,105,31,105,30,168,31,168,30,123,31,156,31,156,30,134,31,134,30,213,31,223,31,15,31,85,31,5,31,5,30,176,31,133,31,251,31,93,31,26,31,72,31,54,31,122,31,249,31,249,30,181,31,230,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
