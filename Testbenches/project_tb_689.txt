-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 315;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (127,0,236,0,24,0,232,0,26,0,116,0,233,0,36,0,8,0,97,0,141,0,45,0,193,0,0,0,0,0,0,0,151,0,102,0,151,0,105,0,235,0,99,0,38,0,92,0,172,0,113,0,15,0,0,0,78,0,37,0,191,0,84,0,78,0,0,0,102,0,0,0,185,0,49,0,66,0,0,0,104,0,100,0,0,0,206,0,0,0,11,0,213,0,0,0,0,0,108,0,0,0,220,0,215,0,0,0,0,0,82,0,2,0,82,0,0,0,50,0,3,0,0,0,199,0,209,0,114,0,0,0,0,0,42,0,43,0,109,0,137,0,240,0,92,0,50,0,86,0,193,0,180,0,105,0,0,0,65,0,0,0,0,0,70,0,106,0,22,0,0,0,6,0,16,0,138,0,167,0,0,0,131,0,37,0,40,0,0,0,157,0,0,0,20,0,160,0,130,0,0,0,186,0,23,0,0,0,0,0,79,0,0,0,193,0,0,0,0,0,0,0,186,0,156,0,65,0,187,0,136,0,0,0,154,0,197,0,93,0,80,0,254,0,215,0,177,0,43,0,27,0,146,0,117,0,0,0,17,0,150,0,249,0,255,0,0,0,25,0,215,0,237,0,6,0,89,0,90,0,0,0,0,0,203,0,0,0,58,0,251,0,232,0,84,0,86,0,50,0,153,0,207,0,71,0,27,0,86,0,149,0,124,0,0,0,171,0,59,0,111,0,0,0,0,0,242,0,0,0,167,0,86,0,250,0,232,0,250,0,169,0,202,0,189,0,5,0,48,0,94,0,94,0,0,0,0,0,117,0,145,0,151,0,0,0,0,0,201,0,24,0,229,0,0,0,239,0,178,0,19,0,0,0,172,0,224,0,0,0,167,0,138,0,213,0,65,0,41,0,0,0,242,0,152,0,200,0,165,0,28,0,46,0,0,0,197,0,108,0,14,0,0,0,156,0,112,0,6,0,198,0,17,0,149,0,0,0,0,0,173,0,122,0,0,0,18,0,0,0,63,0,66,0,64,0,181,0,47,0,70,0,65,0,137,0,98,0,0,0,23,0,77,0,32,0,12,0,102,0,170,0,0,0,59,0,25,0,0,0,116,0,247,0,217,0,218,0,119,0,145,0,52,0,203,0,91,0,190,0,197,0,0,0,5,0,206,0,119,0,2,0,110,0,0,0,69,0,0,0,255,0,117,0,8,0,36,0,0,0,148,0,227,0,159,0,2,0,26,0,168,0,179,0,0,0,57,0,81,0,143,0,248,0,157,0,68,0,132,0,112,0,184,0,44,0,241,0,22,0,26,0,29,0,34,0,0,0,231,0,0,0,42,0,82,0,251,0,116,0,88,0,136,0,217,0,196,0,0,0,235,0,168,0,213,0,0,0,0,0,151,0,201,0,137,0,200,0,173,0);
signal scenario_full  : scenario_type := (127,31,236,31,24,31,232,31,26,31,116,31,233,31,36,31,8,31,97,31,141,31,45,31,193,31,193,30,193,29,193,28,151,31,102,31,151,31,105,31,235,31,99,31,38,31,92,31,172,31,113,31,15,31,15,30,78,31,37,31,191,31,84,31,78,31,78,30,102,31,102,30,185,31,49,31,66,31,66,30,104,31,100,31,100,30,206,31,206,30,11,31,213,31,213,30,213,29,108,31,108,30,220,31,215,31,215,30,215,29,82,31,2,31,82,31,82,30,50,31,3,31,3,30,199,31,209,31,114,31,114,30,114,29,42,31,43,31,109,31,137,31,240,31,92,31,50,31,86,31,193,31,180,31,105,31,105,30,65,31,65,30,65,29,70,31,106,31,22,31,22,30,6,31,16,31,138,31,167,31,167,30,131,31,37,31,40,31,40,30,157,31,157,30,20,31,160,31,130,31,130,30,186,31,23,31,23,30,23,29,79,31,79,30,193,31,193,30,193,29,193,28,186,31,156,31,65,31,187,31,136,31,136,30,154,31,197,31,93,31,80,31,254,31,215,31,177,31,43,31,27,31,146,31,117,31,117,30,17,31,150,31,249,31,255,31,255,30,25,31,215,31,237,31,6,31,89,31,90,31,90,30,90,29,203,31,203,30,58,31,251,31,232,31,84,31,86,31,50,31,153,31,207,31,71,31,27,31,86,31,149,31,124,31,124,30,171,31,59,31,111,31,111,30,111,29,242,31,242,30,167,31,86,31,250,31,232,31,250,31,169,31,202,31,189,31,5,31,48,31,94,31,94,31,94,30,94,29,117,31,145,31,151,31,151,30,151,29,201,31,24,31,229,31,229,30,239,31,178,31,19,31,19,30,172,31,224,31,224,30,167,31,138,31,213,31,65,31,41,31,41,30,242,31,152,31,200,31,165,31,28,31,46,31,46,30,197,31,108,31,14,31,14,30,156,31,112,31,6,31,198,31,17,31,149,31,149,30,149,29,173,31,122,31,122,30,18,31,18,30,63,31,66,31,64,31,181,31,47,31,70,31,65,31,137,31,98,31,98,30,23,31,77,31,32,31,12,31,102,31,170,31,170,30,59,31,25,31,25,30,116,31,247,31,217,31,218,31,119,31,145,31,52,31,203,31,91,31,190,31,197,31,197,30,5,31,206,31,119,31,2,31,110,31,110,30,69,31,69,30,255,31,117,31,8,31,36,31,36,30,148,31,227,31,159,31,2,31,26,31,168,31,179,31,179,30,57,31,81,31,143,31,248,31,157,31,68,31,132,31,112,31,184,31,44,31,241,31,22,31,26,31,29,31,34,31,34,30,231,31,231,30,42,31,82,31,251,31,116,31,88,31,136,31,217,31,196,31,196,30,235,31,168,31,213,31,213,30,213,29,151,31,201,31,137,31,200,31,173,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
