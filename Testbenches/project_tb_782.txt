-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 535;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (16,0,217,0,0,0,56,0,142,0,130,0,170,0,181,0,237,0,28,0,0,0,55,0,192,0,4,0,142,0,53,0,198,0,0,0,210,0,202,0,214,0,204,0,65,0,48,0,0,0,65,0,214,0,78,0,146,0,186,0,0,0,54,0,172,0,10,0,60,0,183,0,122,0,84,0,59,0,157,0,99,0,158,0,106,0,180,0,151,0,138,0,182,0,98,0,81,0,130,0,120,0,249,0,58,0,0,0,188,0,120,0,50,0,14,0,203,0,244,0,9,0,214,0,131,0,106,0,198,0,146,0,118,0,180,0,114,0,69,0,195,0,0,0,128,0,38,0,0,0,158,0,196,0,34,0,0,0,217,0,203,0,1,0,21,0,141,0,154,0,223,0,133,0,4,0,58,0,226,0,193,0,67,0,241,0,40,0,248,0,50,0,231,0,70,0,125,0,39,0,0,0,35,0,45,0,182,0,0,0,250,0,224,0,158,0,0,0,70,0,192,0,0,0,200,0,198,0,0,0,229,0,56,0,30,0,248,0,146,0,192,0,8,0,38,0,0,0,0,0,0,0,0,0,15,0,0,0,60,0,101,0,246,0,137,0,238,0,38,0,71,0,234,0,64,0,0,0,109,0,234,0,116,0,9,0,0,0,245,0,233,0,0,0,121,0,178,0,86,0,190,0,143,0,147,0,40,0,0,0,0,0,0,0,1,0,139,0,47,0,173,0,247,0,190,0,255,0,111,0,247,0,10,0,113,0,31,0,0,0,0,0,100,0,128,0,237,0,168,0,103,0,91,0,191,0,117,0,195,0,0,0,171,0,43,0,92,0,0,0,145,0,50,0,94,0,152,0,85,0,0,0,0,0,0,0,79,0,243,0,120,0,0,0,29,0,141,0,107,0,11,0,151,0,179,0,134,0,231,0,67,0,3,0,0,0,93,0,0,0,89,0,89,0,0,0,0,0,0,0,82,0,222,0,12,0,172,0,84,0,12,0,104,0,0,0,120,0,245,0,215,0,150,0,114,0,82,0,0,0,0,0,78,0,87,0,0,0,52,0,92,0,115,0,237,0,0,0,112,0,171,0,244,0,255,0,177,0,157,0,57,0,216,0,31,0,71,0,195,0,187,0,166,0,66,0,62,0,209,0,239,0,85,0,0,0,56,0,213,0,254,0,133,0,202,0,162,0,240,0,99,0,221,0,65,0,0,0,0,0,0,0,35,0,254,0,209,0,219,0,32,0,40,0,229,0,162,0,205,0,181,0,222,0,0,0,4,0,0,0,179,0,204,0,48,0,155,0,0,0,138,0,0,0,6,0,89,0,211,0,14,0,0,0,133,0,170,0,237,0,71,0,13,0,204,0,0,0,42,0,208,0,75,0,31,0,210,0,233,0,0,0,94,0,236,0,0,0,0,0,0,0,35,0,19,0,83,0,148,0,33,0,248,0,73,0,0,0,73,0,33,0,177,0,149,0,102,0,209,0,0,0,0,0,43,0,119,0,0,0,178,0,0,0,0,0,0,0,140,0,122,0,226,0,205,0,147,0,108,0,81,0,42,0,180,0,234,0,250,0,142,0,137,0,246,0,0,0,46,0,0,0,207,0,122,0,0,0,133,0,154,0,238,0,0,0,126,0,210,0,106,0,34,0,0,0,49,0,118,0,81,0,222,0,88,0,124,0,245,0,188,0,0,0,0,0,136,0,0,0,211,0,137,0,82,0,199,0,0,0,92,0,31,0,129,0,84,0,74,0,171,0,0,0,0,0,0,0,208,0,131,0,170,0,0,0,215,0,174,0,81,0,92,0,161,0,49,0,61,0,73,0,95,0,0,0,57,0,0,0,173,0,238,0,78,0,0,0,0,0,129,0,172,0,116,0,0,0,0,0,227,0,108,0,133,0,199,0,108,0,108,0,229,0,130,0,66,0,192,0,231,0,220,0,190,0,229,0,108,0,0,0,50,0,91,0,130,0,254,0,135,0,181,0,203,0,15,0,3,0,247,0,60,0,86,0,97,0,0,0,158,0,150,0,175,0,44,0,79,0,238,0,11,0,146,0,0,0,189,0,201,0,113,0,152,0,0,0,63,0,186,0,90,0,245,0,129,0,192,0,0,0,162,0,37,0,0,0,95,0,135,0,216,0,246,0,193,0,59,0,37,0,241,0,141,0,54,0,0,0,0,0,0,0,87,0,0,0,196,0,205,0,0,0,0,0,207,0,182,0,163,0,115,0,255,0,211,0,0,0,123,0,168,0,82,0,181,0,137,0,80,0,67,0,208,0,23,0,0,0,129,0,199,0,139,0,104,0,15,0,12,0,0,0,148,0,64,0,0,0,57,0,160,0,188,0,221,0,0,0,74,0,141,0,222,0,207,0,178,0,190,0,29,0,64,0,245,0,105,0);
signal scenario_full  : scenario_type := (16,31,217,31,217,30,56,31,142,31,130,31,170,31,181,31,237,31,28,31,28,30,55,31,192,31,4,31,142,31,53,31,198,31,198,30,210,31,202,31,214,31,204,31,65,31,48,31,48,30,65,31,214,31,78,31,146,31,186,31,186,30,54,31,172,31,10,31,60,31,183,31,122,31,84,31,59,31,157,31,99,31,158,31,106,31,180,31,151,31,138,31,182,31,98,31,81,31,130,31,120,31,249,31,58,31,58,30,188,31,120,31,50,31,14,31,203,31,244,31,9,31,214,31,131,31,106,31,198,31,146,31,118,31,180,31,114,31,69,31,195,31,195,30,128,31,38,31,38,30,158,31,196,31,34,31,34,30,217,31,203,31,1,31,21,31,141,31,154,31,223,31,133,31,4,31,58,31,226,31,193,31,67,31,241,31,40,31,248,31,50,31,231,31,70,31,125,31,39,31,39,30,35,31,45,31,182,31,182,30,250,31,224,31,158,31,158,30,70,31,192,31,192,30,200,31,198,31,198,30,229,31,56,31,30,31,248,31,146,31,192,31,8,31,38,31,38,30,38,29,38,28,38,27,15,31,15,30,60,31,101,31,246,31,137,31,238,31,38,31,71,31,234,31,64,31,64,30,109,31,234,31,116,31,9,31,9,30,245,31,233,31,233,30,121,31,178,31,86,31,190,31,143,31,147,31,40,31,40,30,40,29,40,28,1,31,139,31,47,31,173,31,247,31,190,31,255,31,111,31,247,31,10,31,113,31,31,31,31,30,31,29,100,31,128,31,237,31,168,31,103,31,91,31,191,31,117,31,195,31,195,30,171,31,43,31,92,31,92,30,145,31,50,31,94,31,152,31,85,31,85,30,85,29,85,28,79,31,243,31,120,31,120,30,29,31,141,31,107,31,11,31,151,31,179,31,134,31,231,31,67,31,3,31,3,30,93,31,93,30,89,31,89,31,89,30,89,29,89,28,82,31,222,31,12,31,172,31,84,31,12,31,104,31,104,30,120,31,245,31,215,31,150,31,114,31,82,31,82,30,82,29,78,31,87,31,87,30,52,31,92,31,115,31,237,31,237,30,112,31,171,31,244,31,255,31,177,31,157,31,57,31,216,31,31,31,71,31,195,31,187,31,166,31,66,31,62,31,209,31,239,31,85,31,85,30,56,31,213,31,254,31,133,31,202,31,162,31,240,31,99,31,221,31,65,31,65,30,65,29,65,28,35,31,254,31,209,31,219,31,32,31,40,31,229,31,162,31,205,31,181,31,222,31,222,30,4,31,4,30,179,31,204,31,48,31,155,31,155,30,138,31,138,30,6,31,89,31,211,31,14,31,14,30,133,31,170,31,237,31,71,31,13,31,204,31,204,30,42,31,208,31,75,31,31,31,210,31,233,31,233,30,94,31,236,31,236,30,236,29,236,28,35,31,19,31,83,31,148,31,33,31,248,31,73,31,73,30,73,31,33,31,177,31,149,31,102,31,209,31,209,30,209,29,43,31,119,31,119,30,178,31,178,30,178,29,178,28,140,31,122,31,226,31,205,31,147,31,108,31,81,31,42,31,180,31,234,31,250,31,142,31,137,31,246,31,246,30,46,31,46,30,207,31,122,31,122,30,133,31,154,31,238,31,238,30,126,31,210,31,106,31,34,31,34,30,49,31,118,31,81,31,222,31,88,31,124,31,245,31,188,31,188,30,188,29,136,31,136,30,211,31,137,31,82,31,199,31,199,30,92,31,31,31,129,31,84,31,74,31,171,31,171,30,171,29,171,28,208,31,131,31,170,31,170,30,215,31,174,31,81,31,92,31,161,31,49,31,61,31,73,31,95,31,95,30,57,31,57,30,173,31,238,31,78,31,78,30,78,29,129,31,172,31,116,31,116,30,116,29,227,31,108,31,133,31,199,31,108,31,108,31,229,31,130,31,66,31,192,31,231,31,220,31,190,31,229,31,108,31,108,30,50,31,91,31,130,31,254,31,135,31,181,31,203,31,15,31,3,31,247,31,60,31,86,31,97,31,97,30,158,31,150,31,175,31,44,31,79,31,238,31,11,31,146,31,146,30,189,31,201,31,113,31,152,31,152,30,63,31,186,31,90,31,245,31,129,31,192,31,192,30,162,31,37,31,37,30,95,31,135,31,216,31,246,31,193,31,59,31,37,31,241,31,141,31,54,31,54,30,54,29,54,28,87,31,87,30,196,31,205,31,205,30,205,29,207,31,182,31,163,31,115,31,255,31,211,31,211,30,123,31,168,31,82,31,181,31,137,31,80,31,67,31,208,31,23,31,23,30,129,31,199,31,139,31,104,31,15,31,12,31,12,30,148,31,64,31,64,30,57,31,160,31,188,31,221,31,221,30,74,31,141,31,222,31,207,31,178,31,190,31,29,31,64,31,245,31,105,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
