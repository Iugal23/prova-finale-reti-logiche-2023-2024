-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 691;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (145,0,57,0,201,0,12,0,0,0,0,0,139,0,0,0,0,0,175,0,15,0,239,0,199,0,187,0,0,0,0,0,74,0,12,0,189,0,46,0,24,0,21,0,131,0,18,0,104,0,0,0,135,0,33,0,233,0,0,0,0,0,200,0,137,0,60,0,127,0,0,0,128,0,87,0,212,0,250,0,122,0,89,0,134,0,213,0,181,0,120,0,0,0,32,0,0,0,23,0,73,0,69,0,189,0,156,0,0,0,172,0,175,0,106,0,140,0,190,0,80,0,199,0,164,0,104,0,65,0,255,0,95,0,126,0,0,0,150,0,98,0,74,0,0,0,118,0,1,0,41,0,104,0,175,0,250,0,157,0,240,0,0,0,0,0,188,0,191,0,194,0,0,0,154,0,0,0,95,0,192,0,0,0,250,0,171,0,81,0,132,0,103,0,12,0,154,0,0,0,0,0,18,0,144,0,0,0,77,0,125,0,129,0,18,0,189,0,158,0,219,0,194,0,2,0,42,0,171,0,234,0,197,0,0,0,255,0,11,0,65,0,130,0,0,0,120,0,131,0,0,0,252,0,0,0,246,0,63,0,31,0,110,0,3,0,116,0,0,0,209,0,164,0,51,0,208,0,214,0,0,0,42,0,0,0,94,0,0,0,218,0,171,0,184,0,0,0,114,0,46,0,131,0,0,0,15,0,56,0,118,0,0,0,0,0,0,0,124,0,189,0,10,0,63,0,7,0,81,0,0,0,0,0,244,0,94,0,130,0,99,0,146,0,23,0,196,0,253,0,230,0,244,0,40,0,27,0,0,0,85,0,43,0,165,0,25,0,61,0,69,0,93,0,2,0,172,0,0,0,121,0,92,0,79,0,54,0,238,0,183,0,0,0,59,0,0,0,62,0,98,0,0,0,101,0,172,0,0,0,33,0,15,0,0,0,199,0,0,0,238,0,63,0,235,0,31,0,216,0,62,0,129,0,153,0,166,0,15,0,0,0,112,0,0,0,194,0,0,0,0,0,0,0,0,0,131,0,59,0,101,0,0,0,227,0,178,0,0,0,0,0,112,0,0,0,21,0,0,0,60,0,0,0,0,0,118,0,240,0,0,0,206,0,244,0,188,0,220,0,184,0,255,0,0,0,20,0,152,0,46,0,58,0,0,0,91,0,125,0,81,0,60,0,246,0,67,0,65,0,134,0,33,0,60,0,161,0,0,0,0,0,54,0,0,0,177,0,31,0,38,0,224,0,0,0,118,0,166,0,0,0,173,0,24,0,149,0,138,0,235,0,69,0,176,0,171,0,72,0,12,0,103,0,117,0,189,0,98,0,187,0,0,0,149,0,0,0,118,0,0,0,10,0,9,0,102,0,0,0,227,0,7,0,0,0,99,0,66,0,13,0,0,0,99,0,233,0,198,0,228,0,249,0,97,0,57,0,195,0,193,0,98,0,0,0,247,0,0,0,83,0,0,0,224,0,66,0,105,0,136,0,15,0,0,0,72,0,0,0,0,0,112,0,0,0,145,0,0,0,18,0,0,0,159,0,136,0,10,0,9,0,226,0,178,0,138,0,154,0,11,0,232,0,23,0,0,0,143,0,80,0,0,0,213,0,26,0,139,0,192,0,0,0,79,0,185,0,91,0,0,0,0,0,85,0,165,0,168,0,0,0,89,0,0,0,95,0,6,0,6,0,91,0,29,0,66,0,40,0,0,0,118,0,126,0,167,0,111,0,98,0,0,0,0,0,81,0,136,0,117,0,147,0,248,0,0,0,74,0,133,0,130,0,216,0,142,0,0,0,155,0,0,0,49,0,176,0,126,0,0,0,0,0,189,0,0,0,54,0,130,0,0,0,12,0,0,0,188,0,234,0,230,0,52,0,68,0,64,0,145,0,170,0,200,0,217,0,0,0,157,0,72,0,204,0,226,0,89,0,1,0,115,0,140,0,99,0,57,0,57,0,93,0,0,0,203,0,78,0,214,0,0,0,77,0,0,0,249,0,0,0,66,0,0,0,113,0,142,0,188,0,181,0,37,0,65,0,36,0,55,0,119,0,78,0,85,0,21,0,255,0,0,0,73,0,0,0,247,0,194,0,121,0,146,0,105,0,130,0,87,0,0,0,0,0,65,0,159,0,231,0,117,0,0,0,0,0,208,0,181,0,170,0,0,0,0,0,0,0,0,0,0,0,132,0,141,0,246,0,131,0,223,0,103,0,125,0,91,0,128,0,47,0,166,0,20,0,0,0,236,0,0,0,0,0,48,0,165,0,129,0,79,0,34,0,108,0,175,0,0,0,29,0,0,0,95,0,235,0,0,0,109,0,0,0,152,0,203,0,38,0,148,0,36,0,86,0,48,0,238,0,92,0,0,0,15,0,32,0,189,0,117,0,61,0,56,0,95,0,111,0,246,0,194,0,98,0,0,0,59,0,184,0,56,0,84,0,240,0,253,0,3,0,85,0,0,0,0,0,149,0,239,0,107,0,0,0,0,0,162,0,204,0,77,0,184,0,91,0,33,0,18,0,248,0,77,0,131,0,91,0,82,0,227,0,165,0,250,0,172,0,0,0,47,0,48,0,153,0,25,0,19,0,102,0,170,0,129,0,142,0,119,0,62,0,238,0,20,0,227,0,0,0,52,0,221,0,43,0,57,0,0,0,119,0,136,0,0,0,3,0,103,0,167,0,146,0,211,0,166,0,223,0,191,0,0,0,188,0,237,0,207,0,49,0,0,0,70,0,51,0,189,0,31,0,165,0,122,0,61,0,218,0,251,0,154,0,253,0,253,0,187,0,0,0,0,0,0,0,77,0,121,0,128,0,151,0,128,0,152,0,91,0,245,0,88,0,0,0,19,0,240,0,154,0,162,0,172,0,164,0,248,0,118,0,129,0,36,0,56,0,172,0,70,0,57,0,24,0,153,0,178,0,148,0,0,0,0,0,0,0,142,0,117,0,91,0,53,0,110,0,71,0,210,0,231,0,8,0,108,0,147,0,0,0,206,0,60,0,234,0,0,0,0,0,246,0,189,0,33,0,32,0,161,0,127,0,0,0,80,0,0,0,34,0,139,0,123,0,227,0,0,0,22,0,246,0,0,0,49,0);
signal scenario_full  : scenario_type := (145,31,57,31,201,31,12,31,12,30,12,29,139,31,139,30,139,29,175,31,15,31,239,31,199,31,187,31,187,30,187,29,74,31,12,31,189,31,46,31,24,31,21,31,131,31,18,31,104,31,104,30,135,31,33,31,233,31,233,30,233,29,200,31,137,31,60,31,127,31,127,30,128,31,87,31,212,31,250,31,122,31,89,31,134,31,213,31,181,31,120,31,120,30,32,31,32,30,23,31,73,31,69,31,189,31,156,31,156,30,172,31,175,31,106,31,140,31,190,31,80,31,199,31,164,31,104,31,65,31,255,31,95,31,126,31,126,30,150,31,98,31,74,31,74,30,118,31,1,31,41,31,104,31,175,31,250,31,157,31,240,31,240,30,240,29,188,31,191,31,194,31,194,30,154,31,154,30,95,31,192,31,192,30,250,31,171,31,81,31,132,31,103,31,12,31,154,31,154,30,154,29,18,31,144,31,144,30,77,31,125,31,129,31,18,31,189,31,158,31,219,31,194,31,2,31,42,31,171,31,234,31,197,31,197,30,255,31,11,31,65,31,130,31,130,30,120,31,131,31,131,30,252,31,252,30,246,31,63,31,31,31,110,31,3,31,116,31,116,30,209,31,164,31,51,31,208,31,214,31,214,30,42,31,42,30,94,31,94,30,218,31,171,31,184,31,184,30,114,31,46,31,131,31,131,30,15,31,56,31,118,31,118,30,118,29,118,28,124,31,189,31,10,31,63,31,7,31,81,31,81,30,81,29,244,31,94,31,130,31,99,31,146,31,23,31,196,31,253,31,230,31,244,31,40,31,27,31,27,30,85,31,43,31,165,31,25,31,61,31,69,31,93,31,2,31,172,31,172,30,121,31,92,31,79,31,54,31,238,31,183,31,183,30,59,31,59,30,62,31,98,31,98,30,101,31,172,31,172,30,33,31,15,31,15,30,199,31,199,30,238,31,63,31,235,31,31,31,216,31,62,31,129,31,153,31,166,31,15,31,15,30,112,31,112,30,194,31,194,30,194,29,194,28,194,27,131,31,59,31,101,31,101,30,227,31,178,31,178,30,178,29,112,31,112,30,21,31,21,30,60,31,60,30,60,29,118,31,240,31,240,30,206,31,244,31,188,31,220,31,184,31,255,31,255,30,20,31,152,31,46,31,58,31,58,30,91,31,125,31,81,31,60,31,246,31,67,31,65,31,134,31,33,31,60,31,161,31,161,30,161,29,54,31,54,30,177,31,31,31,38,31,224,31,224,30,118,31,166,31,166,30,173,31,24,31,149,31,138,31,235,31,69,31,176,31,171,31,72,31,12,31,103,31,117,31,189,31,98,31,187,31,187,30,149,31,149,30,118,31,118,30,10,31,9,31,102,31,102,30,227,31,7,31,7,30,99,31,66,31,13,31,13,30,99,31,233,31,198,31,228,31,249,31,97,31,57,31,195,31,193,31,98,31,98,30,247,31,247,30,83,31,83,30,224,31,66,31,105,31,136,31,15,31,15,30,72,31,72,30,72,29,112,31,112,30,145,31,145,30,18,31,18,30,159,31,136,31,10,31,9,31,226,31,178,31,138,31,154,31,11,31,232,31,23,31,23,30,143,31,80,31,80,30,213,31,26,31,139,31,192,31,192,30,79,31,185,31,91,31,91,30,91,29,85,31,165,31,168,31,168,30,89,31,89,30,95,31,6,31,6,31,91,31,29,31,66,31,40,31,40,30,118,31,126,31,167,31,111,31,98,31,98,30,98,29,81,31,136,31,117,31,147,31,248,31,248,30,74,31,133,31,130,31,216,31,142,31,142,30,155,31,155,30,49,31,176,31,126,31,126,30,126,29,189,31,189,30,54,31,130,31,130,30,12,31,12,30,188,31,234,31,230,31,52,31,68,31,64,31,145,31,170,31,200,31,217,31,217,30,157,31,72,31,204,31,226,31,89,31,1,31,115,31,140,31,99,31,57,31,57,31,93,31,93,30,203,31,78,31,214,31,214,30,77,31,77,30,249,31,249,30,66,31,66,30,113,31,142,31,188,31,181,31,37,31,65,31,36,31,55,31,119,31,78,31,85,31,21,31,255,31,255,30,73,31,73,30,247,31,194,31,121,31,146,31,105,31,130,31,87,31,87,30,87,29,65,31,159,31,231,31,117,31,117,30,117,29,208,31,181,31,170,31,170,30,170,29,170,28,170,27,170,26,132,31,141,31,246,31,131,31,223,31,103,31,125,31,91,31,128,31,47,31,166,31,20,31,20,30,236,31,236,30,236,29,48,31,165,31,129,31,79,31,34,31,108,31,175,31,175,30,29,31,29,30,95,31,235,31,235,30,109,31,109,30,152,31,203,31,38,31,148,31,36,31,86,31,48,31,238,31,92,31,92,30,15,31,32,31,189,31,117,31,61,31,56,31,95,31,111,31,246,31,194,31,98,31,98,30,59,31,184,31,56,31,84,31,240,31,253,31,3,31,85,31,85,30,85,29,149,31,239,31,107,31,107,30,107,29,162,31,204,31,77,31,184,31,91,31,33,31,18,31,248,31,77,31,131,31,91,31,82,31,227,31,165,31,250,31,172,31,172,30,47,31,48,31,153,31,25,31,19,31,102,31,170,31,129,31,142,31,119,31,62,31,238,31,20,31,227,31,227,30,52,31,221,31,43,31,57,31,57,30,119,31,136,31,136,30,3,31,103,31,167,31,146,31,211,31,166,31,223,31,191,31,191,30,188,31,237,31,207,31,49,31,49,30,70,31,51,31,189,31,31,31,165,31,122,31,61,31,218,31,251,31,154,31,253,31,253,31,187,31,187,30,187,29,187,28,77,31,121,31,128,31,151,31,128,31,152,31,91,31,245,31,88,31,88,30,19,31,240,31,154,31,162,31,172,31,164,31,248,31,118,31,129,31,36,31,56,31,172,31,70,31,57,31,24,31,153,31,178,31,148,31,148,30,148,29,148,28,142,31,117,31,91,31,53,31,110,31,71,31,210,31,231,31,8,31,108,31,147,31,147,30,206,31,60,31,234,31,234,30,234,29,246,31,189,31,33,31,32,31,161,31,127,31,127,30,80,31,80,30,34,31,139,31,123,31,227,31,227,30,22,31,246,31,246,30,49,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
