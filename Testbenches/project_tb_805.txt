-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 311;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (142,0,96,0,0,0,203,0,0,0,150,0,126,0,79,0,137,0,203,0,243,0,80,0,0,0,0,0,4,0,229,0,0,0,112,0,70,0,6,0,140,0,100,0,87,0,79,0,235,0,26,0,243,0,152,0,16,0,212,0,39,0,0,0,70,0,13,0,36,0,0,0,236,0,40,0,0,0,93,0,70,0,150,0,0,0,32,0,85,0,202,0,243,0,35,0,0,0,163,0,91,0,194,0,80,0,118,0,171,0,123,0,0,0,230,0,62,0,132,0,68,0,0,0,185,0,210,0,0,0,54,0,54,0,146,0,124,0,148,0,203,0,147,0,0,0,73,0,39,0,142,0,159,0,12,0,0,0,0,0,0,0,165,0,26,0,235,0,185,0,17,0,48,0,92,0,247,0,82,0,204,0,0,0,192,0,251,0,31,0,1,0,218,0,56,0,102,0,254,0,6,0,0,0,109,0,0,0,72,0,144,0,0,0,212,0,81,0,98,0,13,0,68,0,177,0,0,0,191,0,228,0,0,0,195,0,196,0,86,0,1,0,0,0,179,0,164,0,0,0,175,0,0,0,0,0,204,0,123,0,29,0,175,0,45,0,197,0,239,0,98,0,48,0,196,0,122,0,88,0,0,0,154,0,40,0,199,0,255,0,0,0,40,0,96,0,0,0,99,0,38,0,0,0,104,0,99,0,94,0,203,0,163,0,142,0,0,0,0,0,206,0,229,0,208,0,0,0,241,0,103,0,143,0,235,0,116,0,187,0,56,0,231,0,219,0,242,0,127,0,0,0,69,0,241,0,93,0,96,0,0,0,248,0,94,0,177,0,238,0,237,0,118,0,12,0,69,0,101,0,48,0,194,0,184,0,85,0,90,0,96,0,239,0,250,0,12,0,157,0,68,0,43,0,228,0,76,0,0,0,0,0,110,0,157,0,63,0,5,0,37,0,0,0,175,0,100,0,120,0,0,0,70,0,230,0,111,0,187,0,94,0,51,0,132,0,186,0,0,0,246,0,83,0,235,0,0,0,44,0,14,0,172,0,83,0,163,0,189,0,0,0,56,0,80,0,63,0,0,0,49,0,142,0,66,0,31,0,76,0,43,0,95,0,112,0,60,0,15,0,219,0,239,0,9,0,122,0,228,0,91,0,224,0,184,0,113,0,242,0,173,0,0,0,197,0,44,0,157,0,133,0,197,0,192,0,35,0,117,0,232,0,201,0,47,0,143,0,150,0,98,0,204,0,14,0,167,0,137,0,0,0,246,0,230,0,156,0,110,0,98,0,32,0,8,0,207,0,0,0,90,0,96,0,89,0,91,0,0,0,8,0,110,0,21,0,0,0,0,0,21,0,21,0,128,0,47,0,187,0,135,0,0,0,76,0,193,0,137,0,122,0);
signal scenario_full  : scenario_type := (142,31,96,31,96,30,203,31,203,30,150,31,126,31,79,31,137,31,203,31,243,31,80,31,80,30,80,29,4,31,229,31,229,30,112,31,70,31,6,31,140,31,100,31,87,31,79,31,235,31,26,31,243,31,152,31,16,31,212,31,39,31,39,30,70,31,13,31,36,31,36,30,236,31,40,31,40,30,93,31,70,31,150,31,150,30,32,31,85,31,202,31,243,31,35,31,35,30,163,31,91,31,194,31,80,31,118,31,171,31,123,31,123,30,230,31,62,31,132,31,68,31,68,30,185,31,210,31,210,30,54,31,54,31,146,31,124,31,148,31,203,31,147,31,147,30,73,31,39,31,142,31,159,31,12,31,12,30,12,29,12,28,165,31,26,31,235,31,185,31,17,31,48,31,92,31,247,31,82,31,204,31,204,30,192,31,251,31,31,31,1,31,218,31,56,31,102,31,254,31,6,31,6,30,109,31,109,30,72,31,144,31,144,30,212,31,81,31,98,31,13,31,68,31,177,31,177,30,191,31,228,31,228,30,195,31,196,31,86,31,1,31,1,30,179,31,164,31,164,30,175,31,175,30,175,29,204,31,123,31,29,31,175,31,45,31,197,31,239,31,98,31,48,31,196,31,122,31,88,31,88,30,154,31,40,31,199,31,255,31,255,30,40,31,96,31,96,30,99,31,38,31,38,30,104,31,99,31,94,31,203,31,163,31,142,31,142,30,142,29,206,31,229,31,208,31,208,30,241,31,103,31,143,31,235,31,116,31,187,31,56,31,231,31,219,31,242,31,127,31,127,30,69,31,241,31,93,31,96,31,96,30,248,31,94,31,177,31,238,31,237,31,118,31,12,31,69,31,101,31,48,31,194,31,184,31,85,31,90,31,96,31,239,31,250,31,12,31,157,31,68,31,43,31,228,31,76,31,76,30,76,29,110,31,157,31,63,31,5,31,37,31,37,30,175,31,100,31,120,31,120,30,70,31,230,31,111,31,187,31,94,31,51,31,132,31,186,31,186,30,246,31,83,31,235,31,235,30,44,31,14,31,172,31,83,31,163,31,189,31,189,30,56,31,80,31,63,31,63,30,49,31,142,31,66,31,31,31,76,31,43,31,95,31,112,31,60,31,15,31,219,31,239,31,9,31,122,31,228,31,91,31,224,31,184,31,113,31,242,31,173,31,173,30,197,31,44,31,157,31,133,31,197,31,192,31,35,31,117,31,232,31,201,31,47,31,143,31,150,31,98,31,204,31,14,31,167,31,137,31,137,30,246,31,230,31,156,31,110,31,98,31,32,31,8,31,207,31,207,30,90,31,96,31,89,31,91,31,91,30,8,31,110,31,21,31,21,30,21,29,21,31,21,31,128,31,47,31,187,31,135,31,135,30,76,31,193,31,137,31,122,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
