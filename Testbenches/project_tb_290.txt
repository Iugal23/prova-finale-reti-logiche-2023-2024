-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 698;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (48,0,0,0,146,0,252,0,0,0,129,0,116,0,159,0,221,0,211,0,0,0,0,0,0,0,207,0,184,0,248,0,236,0,0,0,0,0,204,0,0,0,0,0,151,0,219,0,0,0,96,0,150,0,201,0,190,0,14,0,145,0,0,0,31,0,98,0,0,0,160,0,59,0,230,0,153,0,0,0,0,0,0,0,13,0,160,0,0,0,235,0,0,0,159,0,166,0,221,0,0,0,236,0,48,0,226,0,0,0,72,0,224,0,59,0,165,0,94,0,165,0,216,0,253,0,12,0,0,0,182,0,0,0,149,0,0,0,0,0,242,0,14,0,197,0,3,0,62,0,110,0,196,0,73,0,25,0,58,0,10,0,219,0,0,0,27,0,138,0,222,0,128,0,68,0,241,0,61,0,0,0,91,0,231,0,142,0,112,0,158,0,134,0,154,0,210,0,253,0,0,0,244,0,0,0,43,0,140,0,145,0,22,0,138,0,119,0,208,0,203,0,191,0,178,0,112,0,92,0,0,0,93,0,159,0,47,0,0,0,254,0,239,0,4,0,91,0,0,0,200,0,33,0,22,0,108,0,56,0,86,0,0,0,0,0,86,0,0,0,138,0,141,0,190,0,108,0,203,0,195,0,0,0,4,0,219,0,12,0,67,0,198,0,0,0,0,0,118,0,242,0,86,0,237,0,116,0,231,0,214,0,0,0,0,0,0,0,219,0,45,0,63,0,0,0,121,0,210,0,0,0,152,0,0,0,129,0,166,0,96,0,82,0,190,0,77,0,162,0,98,0,60,0,67,0,245,0,6,0,43,0,84,0,118,0,47,0,158,0,0,0,221,0,75,0,99,0,147,0,146,0,12,0,76,0,169,0,14,0,58,0,208,0,255,0,64,0,91,0,210,0,0,0,223,0,163,0,14,0,111,0,65,0,151,0,64,0,51,0,174,0,76,0,58,0,247,0,83,0,0,0,218,0,0,0,187,0,121,0,63,0,63,0,133,0,0,0,218,0,0,0,0,0,4,0,101,0,35,0,117,0,187,0,0,0,113,0,0,0,2,0,223,0,208,0,142,0,163,0,13,0,159,0,130,0,25,0,0,0,170,0,116,0,51,0,109,0,13,0,71,0,196,0,0,0,206,0,247,0,0,0,66,0,229,0,159,0,147,0,60,0,160,0,0,0,0,0,207,0,0,0,6,0,98,0,36,0,0,0,51,0,151,0,143,0,12,0,87,0,105,0,147,0,42,0,38,0,43,0,6,0,25,0,215,0,185,0,0,0,38,0,252,0,204,0,219,0,0,0,187,0,2,0,35,0,36,0,91,0,217,0,39,0,0,0,237,0,236,0,0,0,159,0,201,0,0,0,0,0,28,0,63,0,0,0,226,0,61,0,134,0,1,0,230,0,162,0,222,0,98,0,185,0,29,0,164,0,0,0,0,0,69,0,51,0,31,0,0,0,161,0,90,0,125,0,145,0,231,0,209,0,195,0,55,0,39,0,212,0,82,0,203,0,125,0,168,0,99,0,37,0,109,0,161,0,238,0,204,0,96,0,205,0,0,0,181,0,0,0,205,0,21,0,250,0,95,0,208,0,82,0,207,0,23,0,139,0,201,0,83,0,0,0,34,0,0,0,255,0,1,0,66,0,75,0,145,0,174,0,44,0,250,0,15,0,100,0,0,0,48,0,153,0,0,0,0,0,198,0,142,0,50,0,10,0,56,0,78,0,52,0,181,0,188,0,175,0,185,0,0,0,14,0,0,0,0,0,204,0,126,0,177,0,0,0,252,0,77,0,192,0,53,0,0,0,148,0,11,0,127,0,17,0,91,0,218,0,15,0,2,0,20,0,124,0,109,0,64,0,0,0,252,0,59,0,105,0,0,0,248,0,15,0,180,0,0,0,215,0,175,0,189,0,153,0,247,0,0,0,231,0,0,0,0,0,211,0,124,0,163,0,157,0,134,0,159,0,0,0,241,0,153,0,57,0,254,0,152,0,185,0,14,0,124,0,12,0,0,0,137,0,130,0,7,0,89,0,0,0,206,0,28,0,195,0,109,0,197,0,210,0,0,0,0,0,61,0,73,0,202,0,0,0,237,0,194,0,95,0,167,0,124,0,198,0,79,0,199,0,241,0,15,0,163,0,144,0,0,0,252,0,0,0,162,0,64,0,0,0,0,0,0,0,36,0,102,0,0,0,6,0,124,0,0,0,0,0,0,0,0,0,0,0,142,0,19,0,237,0,178,0,0,0,42,0,61,0,127,0,0,0,23,0,107,0,128,0,104,0,0,0,105,0,29,0,141,0,128,0,101,0,0,0,178,0,246,0,190,0,0,0,169,0,212,0,16,0,49,0,92,0,235,0,41,0,174,0,149,0,0,0,16,0,137,0,96,0,64,0,70,0,117,0,85,0,255,0,218,0,160,0,75,0,108,0,66,0,163,0,113,0,240,0,198,0,206,0,0,0,0,0,152,0,180,0,184,0,98,0,103,0,38,0,37,0,101,0,115,0,195,0,44,0,113,0,0,0,210,0,11,0,71,0,3,0,0,0,89,0,188,0,53,0,0,0,111,0,24,0,0,0,0,0,241,0,221,0,194,0,205,0,51,0,185,0,158,0,134,0,0,0,0,0,0,0,110,0,232,0,76,0,157,0,29,0,151,0,170,0,254,0,123,0,109,0,40,0,50,0,133,0,0,0,125,0,246,0,92,0,0,0,193,0,0,0,125,0,23,0,0,0,0,0,200,0,232,0,204,0,249,0,131,0,95,0,232,0,148,0,54,0,121,0,247,0,218,0,71,0,62,0,3,0,0,0,40,0,47,0,137,0,0,0,235,0,157,0,1,0,101,0,50,0,76,0,118,0,26,0,70,0,241,0,23,0,175,0,172,0,0,0,0,0,125,0,4,0,147,0,26,0,198,0,216,0,139,0,0,0,0,0,117,0,0,0,215,0,0,0,109,0,80,0,152,0,248,0,244,0,129,0,0,0,0,0,137,0,134,0,0,0,255,0,84,0,100,0,184,0,0,0,74,0,0,0,112,0,10,0,0,0,125,0,20,0,90,0,31,0,172,0,0,0,23,0,54,0,186,0,49,0,168,0,186,0,11,0,200,0,62,0,95,0,97,0);
signal scenario_full  : scenario_type := (48,31,48,30,146,31,252,31,252,30,129,31,116,31,159,31,221,31,211,31,211,30,211,29,211,28,207,31,184,31,248,31,236,31,236,30,236,29,204,31,204,30,204,29,151,31,219,31,219,30,96,31,150,31,201,31,190,31,14,31,145,31,145,30,31,31,98,31,98,30,160,31,59,31,230,31,153,31,153,30,153,29,153,28,13,31,160,31,160,30,235,31,235,30,159,31,166,31,221,31,221,30,236,31,48,31,226,31,226,30,72,31,224,31,59,31,165,31,94,31,165,31,216,31,253,31,12,31,12,30,182,31,182,30,149,31,149,30,149,29,242,31,14,31,197,31,3,31,62,31,110,31,196,31,73,31,25,31,58,31,10,31,219,31,219,30,27,31,138,31,222,31,128,31,68,31,241,31,61,31,61,30,91,31,231,31,142,31,112,31,158,31,134,31,154,31,210,31,253,31,253,30,244,31,244,30,43,31,140,31,145,31,22,31,138,31,119,31,208,31,203,31,191,31,178,31,112,31,92,31,92,30,93,31,159,31,47,31,47,30,254,31,239,31,4,31,91,31,91,30,200,31,33,31,22,31,108,31,56,31,86,31,86,30,86,29,86,31,86,30,138,31,141,31,190,31,108,31,203,31,195,31,195,30,4,31,219,31,12,31,67,31,198,31,198,30,198,29,118,31,242,31,86,31,237,31,116,31,231,31,214,31,214,30,214,29,214,28,219,31,45,31,63,31,63,30,121,31,210,31,210,30,152,31,152,30,129,31,166,31,96,31,82,31,190,31,77,31,162,31,98,31,60,31,67,31,245,31,6,31,43,31,84,31,118,31,47,31,158,31,158,30,221,31,75,31,99,31,147,31,146,31,12,31,76,31,169,31,14,31,58,31,208,31,255,31,64,31,91,31,210,31,210,30,223,31,163,31,14,31,111,31,65,31,151,31,64,31,51,31,174,31,76,31,58,31,247,31,83,31,83,30,218,31,218,30,187,31,121,31,63,31,63,31,133,31,133,30,218,31,218,30,218,29,4,31,101,31,35,31,117,31,187,31,187,30,113,31,113,30,2,31,223,31,208,31,142,31,163,31,13,31,159,31,130,31,25,31,25,30,170,31,116,31,51,31,109,31,13,31,71,31,196,31,196,30,206,31,247,31,247,30,66,31,229,31,159,31,147,31,60,31,160,31,160,30,160,29,207,31,207,30,6,31,98,31,36,31,36,30,51,31,151,31,143,31,12,31,87,31,105,31,147,31,42,31,38,31,43,31,6,31,25,31,215,31,185,31,185,30,38,31,252,31,204,31,219,31,219,30,187,31,2,31,35,31,36,31,91,31,217,31,39,31,39,30,237,31,236,31,236,30,159,31,201,31,201,30,201,29,28,31,63,31,63,30,226,31,61,31,134,31,1,31,230,31,162,31,222,31,98,31,185,31,29,31,164,31,164,30,164,29,69,31,51,31,31,31,31,30,161,31,90,31,125,31,145,31,231,31,209,31,195,31,55,31,39,31,212,31,82,31,203,31,125,31,168,31,99,31,37,31,109,31,161,31,238,31,204,31,96,31,205,31,205,30,181,31,181,30,205,31,21,31,250,31,95,31,208,31,82,31,207,31,23,31,139,31,201,31,83,31,83,30,34,31,34,30,255,31,1,31,66,31,75,31,145,31,174,31,44,31,250,31,15,31,100,31,100,30,48,31,153,31,153,30,153,29,198,31,142,31,50,31,10,31,56,31,78,31,52,31,181,31,188,31,175,31,185,31,185,30,14,31,14,30,14,29,204,31,126,31,177,31,177,30,252,31,77,31,192,31,53,31,53,30,148,31,11,31,127,31,17,31,91,31,218,31,15,31,2,31,20,31,124,31,109,31,64,31,64,30,252,31,59,31,105,31,105,30,248,31,15,31,180,31,180,30,215,31,175,31,189,31,153,31,247,31,247,30,231,31,231,30,231,29,211,31,124,31,163,31,157,31,134,31,159,31,159,30,241,31,153,31,57,31,254,31,152,31,185,31,14,31,124,31,12,31,12,30,137,31,130,31,7,31,89,31,89,30,206,31,28,31,195,31,109,31,197,31,210,31,210,30,210,29,61,31,73,31,202,31,202,30,237,31,194,31,95,31,167,31,124,31,198,31,79,31,199,31,241,31,15,31,163,31,144,31,144,30,252,31,252,30,162,31,64,31,64,30,64,29,64,28,36,31,102,31,102,30,6,31,124,31,124,30,124,29,124,28,124,27,124,26,142,31,19,31,237,31,178,31,178,30,42,31,61,31,127,31,127,30,23,31,107,31,128,31,104,31,104,30,105,31,29,31,141,31,128,31,101,31,101,30,178,31,246,31,190,31,190,30,169,31,212,31,16,31,49,31,92,31,235,31,41,31,174,31,149,31,149,30,16,31,137,31,96,31,64,31,70,31,117,31,85,31,255,31,218,31,160,31,75,31,108,31,66,31,163,31,113,31,240,31,198,31,206,31,206,30,206,29,152,31,180,31,184,31,98,31,103,31,38,31,37,31,101,31,115,31,195,31,44,31,113,31,113,30,210,31,11,31,71,31,3,31,3,30,89,31,188,31,53,31,53,30,111,31,24,31,24,30,24,29,241,31,221,31,194,31,205,31,51,31,185,31,158,31,134,31,134,30,134,29,134,28,110,31,232,31,76,31,157,31,29,31,151,31,170,31,254,31,123,31,109,31,40,31,50,31,133,31,133,30,125,31,246,31,92,31,92,30,193,31,193,30,125,31,23,31,23,30,23,29,200,31,232,31,204,31,249,31,131,31,95,31,232,31,148,31,54,31,121,31,247,31,218,31,71,31,62,31,3,31,3,30,40,31,47,31,137,31,137,30,235,31,157,31,1,31,101,31,50,31,76,31,118,31,26,31,70,31,241,31,23,31,175,31,172,31,172,30,172,29,125,31,4,31,147,31,26,31,198,31,216,31,139,31,139,30,139,29,117,31,117,30,215,31,215,30,109,31,80,31,152,31,248,31,244,31,129,31,129,30,129,29,137,31,134,31,134,30,255,31,84,31,100,31,184,31,184,30,74,31,74,30,112,31,10,31,10,30,125,31,20,31,90,31,31,31,172,31,172,30,23,31,54,31,186,31,49,31,168,31,186,31,11,31,200,31,62,31,95,31,97,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
