-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 726;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (71,0,190,0,25,0,81,0,0,0,107,0,0,0,0,0,44,0,178,0,88,0,22,0,114,0,238,0,162,0,13,0,0,0,157,0,249,0,0,0,209,0,2,0,244,0,140,0,134,0,0,0,20,0,206,0,68,0,13,0,152,0,236,0,58,0,198,0,191,0,20,0,206,0,72,0,0,0,13,0,110,0,63,0,87,0,0,0,237,0,90,0,185,0,43,0,23,0,8,0,145,0,0,0,187,0,201,0,0,0,161,0,228,0,254,0,223,0,63,0,52,0,32,0,120,0,136,0,135,0,244,0,162,0,50,0,145,0,79,0,181,0,0,0,105,0,0,0,0,0,218,0,159,0,206,0,53,0,0,0,102,0,24,0,0,0,98,0,142,0,0,0,44,0,198,0,183,0,206,0,0,0,0,0,202,0,50,0,11,0,249,0,245,0,88,0,138,0,219,0,25,0,181,0,32,0,103,0,0,0,0,0,0,0,224,0,45,0,126,0,0,0,6,0,28,0,134,0,193,0,146,0,237,0,208,0,179,0,92,0,56,0,0,0,202,0,163,0,128,0,93,0,93,0,91,0,0,0,108,0,0,0,0,0,0,0,250,0,49,0,0,0,0,0,89,0,0,0,158,0,239,0,0,0,250,0,252,0,89,0,29,0,172,0,77,0,244,0,174,0,244,0,0,0,166,0,126,0,0,0,218,0,200,0,217,0,144,0,146,0,155,0,73,0,172,0,251,0,253,0,205,0,3,0,141,0,68,0,10,0,153,0,33,0,207,0,36,0,253,0,79,0,234,0,157,0,103,0,171,0,168,0,132,0,0,0,37,0,0,0,22,0,0,0,72,0,105,0,0,0,168,0,243,0,0,0,252,0,102,0,0,0,55,0,0,0,0,0,33,0,243,0,0,0,155,0,32,0,216,0,169,0,139,0,0,0,0,0,66,0,228,0,226,0,180,0,87,0,0,0,24,0,72,0,17,0,26,0,34,0,179,0,108,0,188,0,227,0,0,0,0,0,125,0,0,0,187,0,240,0,160,0,132,0,0,0,148,0,62,0,229,0,171,0,167,0,252,0,0,0,66,0,155,0,239,0,81,0,0,0,68,0,124,0,141,0,0,0,200,0,145,0,55,0,94,0,77,0,47,0,105,0,233,0,88,0,73,0,34,0,79,0,0,0,201,0,0,0,237,0,125,0,0,0,7,0,88,0,77,0,119,0,31,0,87,0,91,0,234,0,0,0,0,0,69,0,80,0,161,0,24,0,121,0,0,0,233,0,245,0,24,0,228,0,145,0,107,0,0,0,32,0,61,0,112,0,94,0,117,0,196,0,0,0,179,0,0,0,34,0,0,0,147,0,21,0,245,0,198,0,213,0,172,0,0,0,65,0,91,0,145,0,51,0,213,0,27,0,218,0,0,0,82,0,120,0,2,0,101,0,132,0,214,0,195,0,0,0,0,0,80,0,247,0,172,0,72,0,86,0,174,0,211,0,115,0,83,0,234,0,124,0,130,0,192,0,130,0,0,0,127,0,206,0,0,0,171,0,137,0,248,0,64,0,254,0,221,0,151,0,221,0,0,0,0,0,252,0,193,0,244,0,138,0,194,0,63,0,172,0,1,0,0,0,42,0,153,0,63,0,115,0,165,0,32,0,26,0,123,0,13,0,235,0,48,0,5,0,8,0,3,0,6,0,125,0,36,0,59,0,0,0,95,0,222,0,0,0,0,0,206,0,161,0,65,0,123,0,4,0,43,0,3,0,0,0,103,0,114,0,146,0,141,0,196,0,244,0,151,0,254,0,121,0,0,0,23,0,230,0,203,0,0,0,13,0,73,0,134,0,0,0,183,0,242,0,156,0,0,0,0,0,0,0,59,0,0,0,0,0,154,0,15,0,109,0,7,0,109,0,0,0,231,0,103,0,5,0,0,0,81,0,123,0,23,0,137,0,148,0,135,0,0,0,86,0,235,0,114,0,166,0,0,0,126,0,0,0,254,0,126,0,188,0,74,0,0,0,148,0,0,0,194,0,251,0,132,0,61,0,82,0,30,0,60,0,242,0,0,0,71,0,76,0,236,0,99,0,0,0,232,0,17,0,0,0,0,0,7,0,180,0,89,0,76,0,206,0,142,0,0,0,0,0,129,0,244,0,184,0,13,0,0,0,0,0,21,0,0,0,0,0,86,0,75,0,230,0,189,0,39,0,43,0,102,0,130,0,108,0,110,0,0,0,84,0,200,0,179,0,39,0,96,0,39,0,39,0,0,0,240,0,165,0,57,0,87,0,0,0,209,0,0,0,163,0,101,0,0,0,192,0,235,0,0,0,254,0,207,0,102,0,61,0,157,0,250,0,248,0,48,0,94,0,245,0,96,0,0,0,170,0,114,0,131,0,217,0,251,0,80,0,150,0,156,0,240,0,228,0,21,0,201,0,0,0,226,0,189,0,11,0,0,0,118,0,159,0,103,0,2,0,39,0,241,0,0,0,108,0,25,0,202,0,34,0,157,0,12,0,172,0,160,0,0,0,56,0,154,0,113,0,41,0,215,0,62,0,252,0,136,0,189,0,81,0,61,0,0,0,35,0,193,0,239,0,102,0,167,0,0,0,189,0,23,0,0,0,48,0,175,0,187,0,53,0,0,0,69,0,0,0,113,0,228,0,100,0,162,0,219,0,61,0,160,0,255,0,191,0,0,0,0,0,131,0,0,0,185,0,0,0,157,0,232,0,26,0,228,0,1,0,0,0,15,0,116,0,2,0,0,0,180,0,217,0,237,0,25,0,251,0,41,0,0,0,169,0,121,0,230,0,50,0,36,0,221,0,134,0,98,0,0,0,23,0,78,0,135,0,108,0,171,0,58,0,105,0,0,0,89,0,68,0,207,0,217,0,193,0,0,0,3,0,0,0,211,0,0,0,230,0,145,0,133,0,0,0,0,0,250,0,0,0,0,0,0,0,0,0,2,0,70,0,164,0,0,0,17,0,61,0,0,0,183,0,40,0,84,0,90,0,139,0,0,0,161,0,21,0,0,0,104,0,97,0,197,0,120,0,18,0,62,0,149,0,18,0,0,0,120,0,132,0,68,0,33,0,19,0,0,0,79,0,123,0,0,0,130,0,19,0,93,0,111,0,0,0,108,0,0,0,39,0,55,0,164,0,206,0,176,0,0,0,0,0,0,0,142,0,76,0,34,0,56,0,24,0,215,0,46,0,201,0,0,0,168,0,35,0,133,0,198,0,77,0,192,0,206,0,121,0);
signal scenario_full  : scenario_type := (71,31,190,31,25,31,81,31,81,30,107,31,107,30,107,29,44,31,178,31,88,31,22,31,114,31,238,31,162,31,13,31,13,30,157,31,249,31,249,30,209,31,2,31,244,31,140,31,134,31,134,30,20,31,206,31,68,31,13,31,152,31,236,31,58,31,198,31,191,31,20,31,206,31,72,31,72,30,13,31,110,31,63,31,87,31,87,30,237,31,90,31,185,31,43,31,23,31,8,31,145,31,145,30,187,31,201,31,201,30,161,31,228,31,254,31,223,31,63,31,52,31,32,31,120,31,136,31,135,31,244,31,162,31,50,31,145,31,79,31,181,31,181,30,105,31,105,30,105,29,218,31,159,31,206,31,53,31,53,30,102,31,24,31,24,30,98,31,142,31,142,30,44,31,198,31,183,31,206,31,206,30,206,29,202,31,50,31,11,31,249,31,245,31,88,31,138,31,219,31,25,31,181,31,32,31,103,31,103,30,103,29,103,28,224,31,45,31,126,31,126,30,6,31,28,31,134,31,193,31,146,31,237,31,208,31,179,31,92,31,56,31,56,30,202,31,163,31,128,31,93,31,93,31,91,31,91,30,108,31,108,30,108,29,108,28,250,31,49,31,49,30,49,29,89,31,89,30,158,31,239,31,239,30,250,31,252,31,89,31,29,31,172,31,77,31,244,31,174,31,244,31,244,30,166,31,126,31,126,30,218,31,200,31,217,31,144,31,146,31,155,31,73,31,172,31,251,31,253,31,205,31,3,31,141,31,68,31,10,31,153,31,33,31,207,31,36,31,253,31,79,31,234,31,157,31,103,31,171,31,168,31,132,31,132,30,37,31,37,30,22,31,22,30,72,31,105,31,105,30,168,31,243,31,243,30,252,31,102,31,102,30,55,31,55,30,55,29,33,31,243,31,243,30,155,31,32,31,216,31,169,31,139,31,139,30,139,29,66,31,228,31,226,31,180,31,87,31,87,30,24,31,72,31,17,31,26,31,34,31,179,31,108,31,188,31,227,31,227,30,227,29,125,31,125,30,187,31,240,31,160,31,132,31,132,30,148,31,62,31,229,31,171,31,167,31,252,31,252,30,66,31,155,31,239,31,81,31,81,30,68,31,124,31,141,31,141,30,200,31,145,31,55,31,94,31,77,31,47,31,105,31,233,31,88,31,73,31,34,31,79,31,79,30,201,31,201,30,237,31,125,31,125,30,7,31,88,31,77,31,119,31,31,31,87,31,91,31,234,31,234,30,234,29,69,31,80,31,161,31,24,31,121,31,121,30,233,31,245,31,24,31,228,31,145,31,107,31,107,30,32,31,61,31,112,31,94,31,117,31,196,31,196,30,179,31,179,30,34,31,34,30,147,31,21,31,245,31,198,31,213,31,172,31,172,30,65,31,91,31,145,31,51,31,213,31,27,31,218,31,218,30,82,31,120,31,2,31,101,31,132,31,214,31,195,31,195,30,195,29,80,31,247,31,172,31,72,31,86,31,174,31,211,31,115,31,83,31,234,31,124,31,130,31,192,31,130,31,130,30,127,31,206,31,206,30,171,31,137,31,248,31,64,31,254,31,221,31,151,31,221,31,221,30,221,29,252,31,193,31,244,31,138,31,194,31,63,31,172,31,1,31,1,30,42,31,153,31,63,31,115,31,165,31,32,31,26,31,123,31,13,31,235,31,48,31,5,31,8,31,3,31,6,31,125,31,36,31,59,31,59,30,95,31,222,31,222,30,222,29,206,31,161,31,65,31,123,31,4,31,43,31,3,31,3,30,103,31,114,31,146,31,141,31,196,31,244,31,151,31,254,31,121,31,121,30,23,31,230,31,203,31,203,30,13,31,73,31,134,31,134,30,183,31,242,31,156,31,156,30,156,29,156,28,59,31,59,30,59,29,154,31,15,31,109,31,7,31,109,31,109,30,231,31,103,31,5,31,5,30,81,31,123,31,23,31,137,31,148,31,135,31,135,30,86,31,235,31,114,31,166,31,166,30,126,31,126,30,254,31,126,31,188,31,74,31,74,30,148,31,148,30,194,31,251,31,132,31,61,31,82,31,30,31,60,31,242,31,242,30,71,31,76,31,236,31,99,31,99,30,232,31,17,31,17,30,17,29,7,31,180,31,89,31,76,31,206,31,142,31,142,30,142,29,129,31,244,31,184,31,13,31,13,30,13,29,21,31,21,30,21,29,86,31,75,31,230,31,189,31,39,31,43,31,102,31,130,31,108,31,110,31,110,30,84,31,200,31,179,31,39,31,96,31,39,31,39,31,39,30,240,31,165,31,57,31,87,31,87,30,209,31,209,30,163,31,101,31,101,30,192,31,235,31,235,30,254,31,207,31,102,31,61,31,157,31,250,31,248,31,48,31,94,31,245,31,96,31,96,30,170,31,114,31,131,31,217,31,251,31,80,31,150,31,156,31,240,31,228,31,21,31,201,31,201,30,226,31,189,31,11,31,11,30,118,31,159,31,103,31,2,31,39,31,241,31,241,30,108,31,25,31,202,31,34,31,157,31,12,31,172,31,160,31,160,30,56,31,154,31,113,31,41,31,215,31,62,31,252,31,136,31,189,31,81,31,61,31,61,30,35,31,193,31,239,31,102,31,167,31,167,30,189,31,23,31,23,30,48,31,175,31,187,31,53,31,53,30,69,31,69,30,113,31,228,31,100,31,162,31,219,31,61,31,160,31,255,31,191,31,191,30,191,29,131,31,131,30,185,31,185,30,157,31,232,31,26,31,228,31,1,31,1,30,15,31,116,31,2,31,2,30,180,31,217,31,237,31,25,31,251,31,41,31,41,30,169,31,121,31,230,31,50,31,36,31,221,31,134,31,98,31,98,30,23,31,78,31,135,31,108,31,171,31,58,31,105,31,105,30,89,31,68,31,207,31,217,31,193,31,193,30,3,31,3,30,211,31,211,30,230,31,145,31,133,31,133,30,133,29,250,31,250,30,250,29,250,28,250,27,2,31,70,31,164,31,164,30,17,31,61,31,61,30,183,31,40,31,84,31,90,31,139,31,139,30,161,31,21,31,21,30,104,31,97,31,197,31,120,31,18,31,62,31,149,31,18,31,18,30,120,31,132,31,68,31,33,31,19,31,19,30,79,31,123,31,123,30,130,31,19,31,93,31,111,31,111,30,108,31,108,30,39,31,55,31,164,31,206,31,176,31,176,30,176,29,176,28,142,31,76,31,34,31,56,31,24,31,215,31,46,31,201,31,201,30,168,31,35,31,133,31,198,31,77,31,192,31,206,31,121,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
