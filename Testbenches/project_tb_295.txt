-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 860;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (206,0,175,0,204,0,241,0,248,0,26,0,83,0,3,0,0,0,106,0,241,0,218,0,52,0,172,0,0,0,206,0,98,0,152,0,143,0,53,0,0,0,57,0,97,0,174,0,93,0,213,0,139,0,220,0,214,0,131,0,195,0,39,0,124,0,0,0,130,0,0,0,253,0,103,0,246,0,22,0,209,0,23,0,0,0,57,0,27,0,0,0,203,0,0,0,172,0,184,0,145,0,63,0,91,0,32,0,168,0,77,0,109,0,183,0,24,0,167,0,84,0,0,0,80,0,92,0,219,0,155,0,0,0,185,0,66,0,17,0,191,0,0,0,44,0,0,0,0,0,0,0,154,0,83,0,0,0,58,0,169,0,0,0,133,0,50,0,172,0,96,0,11,0,254,0,35,0,126,0,226,0,242,0,140,0,225,0,126,0,218,0,1,0,213,0,0,0,126,0,173,0,222,0,252,0,59,0,150,0,246,0,0,0,31,0,143,0,0,0,239,0,37,0,85,0,188,0,75,0,0,0,0,0,191,0,241,0,139,0,205,0,60,0,97,0,0,0,183,0,0,0,153,0,4,0,160,0,0,0,196,0,60,0,119,0,0,0,187,0,59,0,197,0,0,0,93,0,167,0,213,0,0,0,0,0,0,0,216,0,60,0,184,0,194,0,161,0,104,0,0,0,120,0,0,0,59,0,13,0,112,0,195,0,243,0,51,0,0,0,0,0,136,0,0,0,132,0,238,0,0,0,0,0,158,0,28,0,51,0,183,0,103,0,0,0,0,0,0,0,237,0,144,0,0,0,121,0,0,0,213,0,107,0,9,0,0,0,0,0,171,0,148,0,0,0,0,0,218,0,78,0,179,0,0,0,241,0,0,0,0,0,67,0,134,0,43,0,62,0,0,0,142,0,0,0,234,0,140,0,135,0,0,0,0,0,57,0,87,0,0,0,106,0,0,0,147,0,58,0,0,0,68,0,78,0,24,0,249,0,0,0,11,0,115,0,0,0,0,0,242,0,211,0,151,0,14,0,0,0,62,0,86,0,75,0,93,0,115,0,83,0,151,0,60,0,114,0,29,0,199,0,178,0,0,0,253,0,230,0,64,0,4,0,214,0,115,0,253,0,0,0,0,0,143,0,205,0,219,0,84,0,100,0,91,0,168,0,0,0,0,0,9,0,32,0,61,0,100,0,158,0,43,0,249,0,216,0,0,0,224,0,176,0,213,0,195,0,194,0,0,0,0,0,114,0,219,0,245,0,0,0,194,0,141,0,244,0,70,0,77,0,0,0,211,0,115,0,59,0,3,0,166,0,18,0,0,0,176,0,109,0,94,0,76,0,53,0,204,0,0,0,0,0,112,0,20,0,232,0,68,0,172,0,6,0,0,0,249,0,221,0,109,0,235,0,81,0,241,0,151,0,169,0,231,0,79,0,235,0,193,0,52,0,158,0,0,0,0,0,0,0,66,0,220,0,20,0,0,0,78,0,229,0,212,0,0,0,201,0,228,0,64,0,92,0,191,0,236,0,0,0,21,0,231,0,191,0,0,0,0,0,156,0,184,0,38,0,37,0,224,0,51,0,81,0,0,0,57,0,37,0,42,0,0,0,18,0,168,0,0,0,165,0,0,0,199,0,23,0,172,0,167,0,0,0,68,0,0,0,157,0,167,0,227,0,108,0,51,0,93,0,94,0,14,0,63,0,0,0,132,0,5,0,178,0,0,0,0,0,0,0,137,0,32,0,73,0,34,0,6,0,203,0,73,0,242,0,83,0,97,0,56,0,194,0,165,0,26,0,19,0,142,0,5,0,157,0,138,0,32,0,201,0,6,0,209,0,64,0,120,0,0,0,177,0,0,0,60,0,160,0,197,0,0,0,187,0,117,0,31,0,174,0,155,0,77,0,0,0,48,0,96,0,203,0,187,0,184,0,0,0,156,0,60,0,30,0,0,0,40,0,255,0,245,0,80,0,0,0,0,0,28,0,0,0,179,0,247,0,196,0,15,0,199,0,57,0,0,0,0,0,110,0,0,0,183,0,0,0,0,0,68,0,219,0,194,0,48,0,146,0,0,0,24,0,217,0,201,0,10,0,177,0,90,0,166,0,164,0,190,0,34,0,221,0,148,0,124,0,0,0,23,0,40,0,166,0,0,0,157,0,136,0,159,0,63,0,0,0,121,0,113,0,0,0,130,0,0,0,137,0,107,0,35,0,142,0,213,0,0,0,211,0,97,0,108,0,58,0,103,0,0,0,214,0,84,0,226,0,214,0,0,0,208,0,101,0,87,0,0,0,0,0,0,0,51,0,175,0,223,0,10,0,215,0,94,0,87,0,113,0,0,0,0,0,171,0,0,0,124,0,56,0,189,0,0,0,46,0,158,0,99,0,222,0,110,0,81,0,84,0,207,0,125,0,0,0,0,0,98,0,201,0,11,0,232,0,51,0,157,0,82,0,168,0,39,0,170,0,138,0,46,0,203,0,248,0,88,0,102,0,210,0,179,0,244,0,0,0,225,0,123,0,0,0,146,0,4,0,0,0,103,0,0,0,99,0,246,0,32,0,192,0,149,0,114,0,0,0,0,0,146,0,116,0,25,0,243,0,131,0,8,0,195,0,71,0,23,0,220,0,228,0,49,0,0,0,202,0,0,0,196,0,0,0,32,0,35,0,234,0,169,0,125,0,0,0,113,0,137,0,231,0,0,0,183,0,128,0,189,0,57,0,9,0,39,0,114,0,199,0,179,0,226,0,97,0,0,0,185,0,174,0,149,0,77,0,105,0,31,0,13,0,55,0,235,0,177,0,246,0,118,0,16,0,188,0,0,0,7,0,253,0,0,0,116,0,138,0,152,0,123,0,142,0,78,0,120,0,34,0,88,0,108,0,110,0,66,0,0,0,166,0,125,0,202,0,4,0,112,0,0,0,222,0,121,0,236,0,215,0,0,0,190,0,171,0,121,0,85,0,157,0,202,0,36,0,130,0,8,0,0,0,4,0,133,0,175,0,0,0,173,0,169,0,55,0,50,0,0,0,46,0,64,0,218,0,239,0,0,0,0,0,157,0,255,0,194,0,64,0,45,0,163,0,244,0,160,0,168,0,163,0,8,0,19,0,96,0,73,0,72,0,39,0,170,0,71,0,0,0,59,0,0,0,191,0,0,0,108,0,76,0,191,0,214,0,89,0,110,0,0,0,0,0,163,0,40,0,44,0,230,0,222,0,227,0,242,0,0,0,113,0,205,0,237,0,0,0,224,0,85,0,2,0,161,0,51,0,45,0,211,0,43,0,199,0,122,0,192,0,71,0,0,0,230,0,0,0,127,0,0,0,201,0,101,0,11,0,0,0,30,0,140,0,193,0,137,0,107,0,0,0,134,0,17,0,62,0,0,0,136,0,109,0,214,0,66,0,6,0,9,0,4,0,97,0,177,0,101,0,0,0,0,0,187,0,0,0,95,0,0,0,0,0,239,0,0,0,14,0,160,0,101,0,180,0,46,0,84,0,7,0,65,0,0,0,35,0,111,0,0,0,33,0,119,0,234,0,0,0,244,0,203,0,199,0,0,0,72,0,10,0,59,0,220,0,71,0,235,0,0,0,0,0,164,0,249,0,0,0,46,0,252,0,161,0,216,0,151,0,29,0,155,0,0,0,28,0,186,0,109,0,248,0,0,0,0,0,91,0,214,0,240,0,37,0,133,0,179,0,151,0,59,0,0,0,166,0,217,0,0,0,157,0,190,0,7,0,127,0,62,0,131,0,0,0,0,0,216,0,71,0,195,0,35,0,83,0,0,0,0,0,79,0,144,0,0,0,227,0,57,0,32,0,101,0,158,0,0,0,114,0,44,0,61,0,134,0);
signal scenario_full  : scenario_type := (206,31,175,31,204,31,241,31,248,31,26,31,83,31,3,31,3,30,106,31,241,31,218,31,52,31,172,31,172,30,206,31,98,31,152,31,143,31,53,31,53,30,57,31,97,31,174,31,93,31,213,31,139,31,220,31,214,31,131,31,195,31,39,31,124,31,124,30,130,31,130,30,253,31,103,31,246,31,22,31,209,31,23,31,23,30,57,31,27,31,27,30,203,31,203,30,172,31,184,31,145,31,63,31,91,31,32,31,168,31,77,31,109,31,183,31,24,31,167,31,84,31,84,30,80,31,92,31,219,31,155,31,155,30,185,31,66,31,17,31,191,31,191,30,44,31,44,30,44,29,44,28,154,31,83,31,83,30,58,31,169,31,169,30,133,31,50,31,172,31,96,31,11,31,254,31,35,31,126,31,226,31,242,31,140,31,225,31,126,31,218,31,1,31,213,31,213,30,126,31,173,31,222,31,252,31,59,31,150,31,246,31,246,30,31,31,143,31,143,30,239,31,37,31,85,31,188,31,75,31,75,30,75,29,191,31,241,31,139,31,205,31,60,31,97,31,97,30,183,31,183,30,153,31,4,31,160,31,160,30,196,31,60,31,119,31,119,30,187,31,59,31,197,31,197,30,93,31,167,31,213,31,213,30,213,29,213,28,216,31,60,31,184,31,194,31,161,31,104,31,104,30,120,31,120,30,59,31,13,31,112,31,195,31,243,31,51,31,51,30,51,29,136,31,136,30,132,31,238,31,238,30,238,29,158,31,28,31,51,31,183,31,103,31,103,30,103,29,103,28,237,31,144,31,144,30,121,31,121,30,213,31,107,31,9,31,9,30,9,29,171,31,148,31,148,30,148,29,218,31,78,31,179,31,179,30,241,31,241,30,241,29,67,31,134,31,43,31,62,31,62,30,142,31,142,30,234,31,140,31,135,31,135,30,135,29,57,31,87,31,87,30,106,31,106,30,147,31,58,31,58,30,68,31,78,31,24,31,249,31,249,30,11,31,115,31,115,30,115,29,242,31,211,31,151,31,14,31,14,30,62,31,86,31,75,31,93,31,115,31,83,31,151,31,60,31,114,31,29,31,199,31,178,31,178,30,253,31,230,31,64,31,4,31,214,31,115,31,253,31,253,30,253,29,143,31,205,31,219,31,84,31,100,31,91,31,168,31,168,30,168,29,9,31,32,31,61,31,100,31,158,31,43,31,249,31,216,31,216,30,224,31,176,31,213,31,195,31,194,31,194,30,194,29,114,31,219,31,245,31,245,30,194,31,141,31,244,31,70,31,77,31,77,30,211,31,115,31,59,31,3,31,166,31,18,31,18,30,176,31,109,31,94,31,76,31,53,31,204,31,204,30,204,29,112,31,20,31,232,31,68,31,172,31,6,31,6,30,249,31,221,31,109,31,235,31,81,31,241,31,151,31,169,31,231,31,79,31,235,31,193,31,52,31,158,31,158,30,158,29,158,28,66,31,220,31,20,31,20,30,78,31,229,31,212,31,212,30,201,31,228,31,64,31,92,31,191,31,236,31,236,30,21,31,231,31,191,31,191,30,191,29,156,31,184,31,38,31,37,31,224,31,51,31,81,31,81,30,57,31,37,31,42,31,42,30,18,31,168,31,168,30,165,31,165,30,199,31,23,31,172,31,167,31,167,30,68,31,68,30,157,31,167,31,227,31,108,31,51,31,93,31,94,31,14,31,63,31,63,30,132,31,5,31,178,31,178,30,178,29,178,28,137,31,32,31,73,31,34,31,6,31,203,31,73,31,242,31,83,31,97,31,56,31,194,31,165,31,26,31,19,31,142,31,5,31,157,31,138,31,32,31,201,31,6,31,209,31,64,31,120,31,120,30,177,31,177,30,60,31,160,31,197,31,197,30,187,31,117,31,31,31,174,31,155,31,77,31,77,30,48,31,96,31,203,31,187,31,184,31,184,30,156,31,60,31,30,31,30,30,40,31,255,31,245,31,80,31,80,30,80,29,28,31,28,30,179,31,247,31,196,31,15,31,199,31,57,31,57,30,57,29,110,31,110,30,183,31,183,30,183,29,68,31,219,31,194,31,48,31,146,31,146,30,24,31,217,31,201,31,10,31,177,31,90,31,166,31,164,31,190,31,34,31,221,31,148,31,124,31,124,30,23,31,40,31,166,31,166,30,157,31,136,31,159,31,63,31,63,30,121,31,113,31,113,30,130,31,130,30,137,31,107,31,35,31,142,31,213,31,213,30,211,31,97,31,108,31,58,31,103,31,103,30,214,31,84,31,226,31,214,31,214,30,208,31,101,31,87,31,87,30,87,29,87,28,51,31,175,31,223,31,10,31,215,31,94,31,87,31,113,31,113,30,113,29,171,31,171,30,124,31,56,31,189,31,189,30,46,31,158,31,99,31,222,31,110,31,81,31,84,31,207,31,125,31,125,30,125,29,98,31,201,31,11,31,232,31,51,31,157,31,82,31,168,31,39,31,170,31,138,31,46,31,203,31,248,31,88,31,102,31,210,31,179,31,244,31,244,30,225,31,123,31,123,30,146,31,4,31,4,30,103,31,103,30,99,31,246,31,32,31,192,31,149,31,114,31,114,30,114,29,146,31,116,31,25,31,243,31,131,31,8,31,195,31,71,31,23,31,220,31,228,31,49,31,49,30,202,31,202,30,196,31,196,30,32,31,35,31,234,31,169,31,125,31,125,30,113,31,137,31,231,31,231,30,183,31,128,31,189,31,57,31,9,31,39,31,114,31,199,31,179,31,226,31,97,31,97,30,185,31,174,31,149,31,77,31,105,31,31,31,13,31,55,31,235,31,177,31,246,31,118,31,16,31,188,31,188,30,7,31,253,31,253,30,116,31,138,31,152,31,123,31,142,31,78,31,120,31,34,31,88,31,108,31,110,31,66,31,66,30,166,31,125,31,202,31,4,31,112,31,112,30,222,31,121,31,236,31,215,31,215,30,190,31,171,31,121,31,85,31,157,31,202,31,36,31,130,31,8,31,8,30,4,31,133,31,175,31,175,30,173,31,169,31,55,31,50,31,50,30,46,31,64,31,218,31,239,31,239,30,239,29,157,31,255,31,194,31,64,31,45,31,163,31,244,31,160,31,168,31,163,31,8,31,19,31,96,31,73,31,72,31,39,31,170,31,71,31,71,30,59,31,59,30,191,31,191,30,108,31,76,31,191,31,214,31,89,31,110,31,110,30,110,29,163,31,40,31,44,31,230,31,222,31,227,31,242,31,242,30,113,31,205,31,237,31,237,30,224,31,85,31,2,31,161,31,51,31,45,31,211,31,43,31,199,31,122,31,192,31,71,31,71,30,230,31,230,30,127,31,127,30,201,31,101,31,11,31,11,30,30,31,140,31,193,31,137,31,107,31,107,30,134,31,17,31,62,31,62,30,136,31,109,31,214,31,66,31,6,31,9,31,4,31,97,31,177,31,101,31,101,30,101,29,187,31,187,30,95,31,95,30,95,29,239,31,239,30,14,31,160,31,101,31,180,31,46,31,84,31,7,31,65,31,65,30,35,31,111,31,111,30,33,31,119,31,234,31,234,30,244,31,203,31,199,31,199,30,72,31,10,31,59,31,220,31,71,31,235,31,235,30,235,29,164,31,249,31,249,30,46,31,252,31,161,31,216,31,151,31,29,31,155,31,155,30,28,31,186,31,109,31,248,31,248,30,248,29,91,31,214,31,240,31,37,31,133,31,179,31,151,31,59,31,59,30,166,31,217,31,217,30,157,31,190,31,7,31,127,31,62,31,131,31,131,30,131,29,216,31,71,31,195,31,35,31,83,31,83,30,83,29,79,31,144,31,144,30,227,31,57,31,32,31,101,31,158,31,158,30,114,31,44,31,61,31,134,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
