-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 455;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (89,0,156,0,76,0,0,0,137,0,48,0,206,0,90,0,0,0,122,0,62,0,0,0,217,0,253,0,198,0,96,0,0,0,39,0,220,0,147,0,0,0,0,0,104,0,130,0,62,0,129,0,20,0,123,0,66,0,0,0,177,0,53,0,0,0,199,0,142,0,249,0,191,0,75,0,196,0,164,0,0,0,18,0,99,0,18,0,181,0,0,0,221,0,192,0,158,0,112,0,161,0,0,0,253,0,240,0,127,0,112,0,112,0,229,0,86,0,12,0,164,0,196,0,168,0,57,0,123,0,0,0,223,0,103,0,149,0,3,0,188,0,173,0,0,0,163,0,89,0,21,0,0,0,112,0,35,0,184,0,216,0,112,0,253,0,0,0,254,0,83,0,0,0,177,0,96,0,246,0,208,0,117,0,234,0,238,0,211,0,64,0,226,0,91,0,230,0,0,0,154,0,212,0,0,0,123,0,161,0,114,0,32,0,205,0,0,0,106,0,117,0,106,0,158,0,87,0,229,0,214,0,206,0,59,0,196,0,67,0,124,0,29,0,1,0,0,0,22,0,156,0,162,0,244,0,27,0,30,0,0,0,58,0,3,0,250,0,64,0,9,0,0,0,181,0,192,0,37,0,164,0,143,0,0,0,114,0,67,0,130,0,113,0,174,0,78,0,0,0,59,0,72,0,115,0,197,0,166,0,37,0,0,0,215,0,150,0,38,0,0,0,90,0,251,0,244,0,0,0,22,0,223,0,9,0,0,0,82,0,39,0,46,0,0,0,90,0,187,0,232,0,120,0,108,0,13,0,204,0,60,0,150,0,0,0,38,0,0,0,153,0,94,0,117,0,98,0,2,0,0,0,212,0,248,0,33,0,171,0,0,0,4,0,249,0,135,0,0,0,0,0,162,0,141,0,125,0,5,0,0,0,247,0,40,0,176,0,0,0,215,0,0,0,178,0,78,0,100,0,0,0,27,0,192,0,197,0,0,0,50,0,1,0,131,0,0,0,15,0,0,0,7,0,159,0,0,0,168,0,205,0,0,0,60,0,220,0,108,0,173,0,47,0,251,0,234,0,0,0,251,0,74,0,146,0,133,0,228,0,15,0,116,0,112,0,202,0,112,0,169,0,30,0,194,0,166,0,134,0,0,0,240,0,238,0,38,0,68,0,108,0,212,0,237,0,144,0,0,0,0,0,36,0,0,0,231,0,69,0,72,0,98,0,123,0,185,0,0,0,251,0,0,0,244,0,161,0,0,0,0,0,128,0,0,0,103,0,0,0,0,0,0,0,0,0,213,0,222,0,39,0,119,0,24,0,92,0,169,0,71,0,5,0,215,0,0,0,124,0,88,0,0,0,199,0,207,0,189,0,90,0,5,0,177,0,0,0,0,0,117,0,21,0,242,0,20,0,159,0,197,0,192,0,202,0,217,0,246,0,9,0,110,0,232,0,177,0,0,0,61,0,66,0,219,0,0,0,157,0,69,0,80,0,0,0,119,0,199,0,9,0,193,0,131,0,251,0,226,0,0,0,0,0,173,0,174,0,0,0,0,0,127,0,161,0,48,0,232,0,36,0,175,0,119,0,3,0,0,0,36,0,147,0,179,0,125,0,166,0,146,0,232,0,0,0,0,0,91,0,247,0,44,0,161,0,190,0,127,0,135,0,1,0,93,0,76,0,0,0,27,0,222,0,74,0,68,0,0,0,242,0,138,0,79,0,0,0,178,0,43,0,81,0,178,0,0,0,0,0,151,0,243,0,238,0,0,0,243,0,20,0,207,0,0,0,162,0,73,0,0,0,113,0,6,0,0,0,154,0,51,0,222,0,0,0,109,0,204,0,137,0,242,0,232,0,80,0,198,0,102,0,5,0,28,0,192,0,103,0,165,0,2,0,84,0,196,0,30,0,104,0,15,0,0,0,216,0,4,0,186,0,243,0,82,0,184,0,95,0,245,0,145,0,255,0,195,0,49,0,221,0,223,0,252,0,215,0,240,0,110,0,124,0,224,0,180,0,212,0,36,0,0,0,48,0,19,0,0,0);
signal scenario_full  : scenario_type := (89,31,156,31,76,31,76,30,137,31,48,31,206,31,90,31,90,30,122,31,62,31,62,30,217,31,253,31,198,31,96,31,96,30,39,31,220,31,147,31,147,30,147,29,104,31,130,31,62,31,129,31,20,31,123,31,66,31,66,30,177,31,53,31,53,30,199,31,142,31,249,31,191,31,75,31,196,31,164,31,164,30,18,31,99,31,18,31,181,31,181,30,221,31,192,31,158,31,112,31,161,31,161,30,253,31,240,31,127,31,112,31,112,31,229,31,86,31,12,31,164,31,196,31,168,31,57,31,123,31,123,30,223,31,103,31,149,31,3,31,188,31,173,31,173,30,163,31,89,31,21,31,21,30,112,31,35,31,184,31,216,31,112,31,253,31,253,30,254,31,83,31,83,30,177,31,96,31,246,31,208,31,117,31,234,31,238,31,211,31,64,31,226,31,91,31,230,31,230,30,154,31,212,31,212,30,123,31,161,31,114,31,32,31,205,31,205,30,106,31,117,31,106,31,158,31,87,31,229,31,214,31,206,31,59,31,196,31,67,31,124,31,29,31,1,31,1,30,22,31,156,31,162,31,244,31,27,31,30,31,30,30,58,31,3,31,250,31,64,31,9,31,9,30,181,31,192,31,37,31,164,31,143,31,143,30,114,31,67,31,130,31,113,31,174,31,78,31,78,30,59,31,72,31,115,31,197,31,166,31,37,31,37,30,215,31,150,31,38,31,38,30,90,31,251,31,244,31,244,30,22,31,223,31,9,31,9,30,82,31,39,31,46,31,46,30,90,31,187,31,232,31,120,31,108,31,13,31,204,31,60,31,150,31,150,30,38,31,38,30,153,31,94,31,117,31,98,31,2,31,2,30,212,31,248,31,33,31,171,31,171,30,4,31,249,31,135,31,135,30,135,29,162,31,141,31,125,31,5,31,5,30,247,31,40,31,176,31,176,30,215,31,215,30,178,31,78,31,100,31,100,30,27,31,192,31,197,31,197,30,50,31,1,31,131,31,131,30,15,31,15,30,7,31,159,31,159,30,168,31,205,31,205,30,60,31,220,31,108,31,173,31,47,31,251,31,234,31,234,30,251,31,74,31,146,31,133,31,228,31,15,31,116,31,112,31,202,31,112,31,169,31,30,31,194,31,166,31,134,31,134,30,240,31,238,31,38,31,68,31,108,31,212,31,237,31,144,31,144,30,144,29,36,31,36,30,231,31,69,31,72,31,98,31,123,31,185,31,185,30,251,31,251,30,244,31,161,31,161,30,161,29,128,31,128,30,103,31,103,30,103,29,103,28,103,27,213,31,222,31,39,31,119,31,24,31,92,31,169,31,71,31,5,31,215,31,215,30,124,31,88,31,88,30,199,31,207,31,189,31,90,31,5,31,177,31,177,30,177,29,117,31,21,31,242,31,20,31,159,31,197,31,192,31,202,31,217,31,246,31,9,31,110,31,232,31,177,31,177,30,61,31,66,31,219,31,219,30,157,31,69,31,80,31,80,30,119,31,199,31,9,31,193,31,131,31,251,31,226,31,226,30,226,29,173,31,174,31,174,30,174,29,127,31,161,31,48,31,232,31,36,31,175,31,119,31,3,31,3,30,36,31,147,31,179,31,125,31,166,31,146,31,232,31,232,30,232,29,91,31,247,31,44,31,161,31,190,31,127,31,135,31,1,31,93,31,76,31,76,30,27,31,222,31,74,31,68,31,68,30,242,31,138,31,79,31,79,30,178,31,43,31,81,31,178,31,178,30,178,29,151,31,243,31,238,31,238,30,243,31,20,31,207,31,207,30,162,31,73,31,73,30,113,31,6,31,6,30,154,31,51,31,222,31,222,30,109,31,204,31,137,31,242,31,232,31,80,31,198,31,102,31,5,31,28,31,192,31,103,31,165,31,2,31,84,31,196,31,30,31,104,31,15,31,15,30,216,31,4,31,186,31,243,31,82,31,184,31,95,31,245,31,145,31,255,31,195,31,49,31,221,31,223,31,252,31,215,31,240,31,110,31,124,31,224,31,180,31,212,31,36,31,36,30,48,31,19,31,19,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
