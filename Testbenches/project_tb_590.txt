-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 992;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (109,0,51,0,0,0,225,0,85,0,0,0,219,0,138,0,10,0,248,0,6,0,123,0,243,0,1,0,106,0,0,0,16,0,253,0,0,0,115,0,77,0,103,0,0,0,154,0,28,0,40,0,0,0,155,0,216,0,50,0,84,0,244,0,35,0,97,0,141,0,90,0,123,0,85,0,0,0,0,0,0,0,227,0,91,0,183,0,130,0,237,0,30,0,44,0,0,0,97,0,228,0,41,0,124,0,30,0,151,0,175,0,90,0,139,0,219,0,49,0,144,0,161,0,55,0,0,0,164,0,161,0,38,0,51,0,115,0,74,0,104,0,130,0,144,0,143,0,96,0,162,0,167,0,74,0,0,0,232,0,229,0,31,0,0,0,29,0,246,0,238,0,42,0,80,0,82,0,148,0,240,0,107,0,82,0,105,0,0,0,117,0,45,0,82,0,55,0,172,0,0,0,95,0,182,0,254,0,31,0,206,0,6,0,98,0,48,0,0,0,171,0,3,0,0,0,132,0,254,0,0,0,242,0,0,0,132,0,254,0,189,0,128,0,135,0,59,0,32,0,140,0,0,0,111,0,142,0,81,0,126,0,136,0,0,0,114,0,72,0,184,0,124,0,0,0,0,0,138,0,208,0,200,0,222,0,126,0,0,0,194,0,188,0,59,0,0,0,118,0,5,0,142,0,81,0,91,0,0,0,119,0,10,0,200,0,0,0,203,0,0,0,172,0,0,0,0,0,213,0,103,0,99,0,30,0,44,0,114,0,147,0,103,0,0,0,0,0,182,0,198,0,199,0,251,0,62,0,145,0,150,0,98,0,0,0,132,0,250,0,11,0,22,0,197,0,240,0,89,0,87,0,51,0,166,0,0,0,0,0,182,0,12,0,208,0,114,0,149,0,0,0,244,0,0,0,218,0,52,0,201,0,154,0,55,0,95,0,26,0,255,0,186,0,3,0,218,0,0,0,96,0,37,0,102,0,252,0,0,0,84,0,0,0,106,0,160,0,40,0,0,0,122,0,65,0,2,0,0,0,25,0,88,0,0,0,0,0,178,0,233,0,190,0,0,0,200,0,215,0,205,0,99,0,66,0,0,0,138,0,0,0,169,0,177,0,105,0,0,0,222,0,44,0,93,0,15,0,0,0,249,0,56,0,0,0,0,0,37,0,106,0,207,0,206,0,0,0,203,0,226,0,124,0,99,0,55,0,59,0,115,0,0,0,0,0,49,0,93,0,0,0,79,0,123,0,185,0,224,0,195,0,1,0,184,0,214,0,228,0,4,0,229,0,147,0,0,0,165,0,241,0,85,0,139,0,220,0,96,0,197,0,195,0,247,0,0,0,0,0,78,0,96,0,0,0,0,0,186,0,191,0,253,0,3,0,73,0,76,0,157,0,51,0,229,0,182,0,35,0,241,0,19,0,224,0,170,0,0,0,194,0,38,0,46,0,0,0,125,0,55,0,3,0,147,0,253,0,234,0,70,0,233,0,155,0,131,0,2,0,86,0,212,0,202,0,48,0,190,0,235,0,212,0,9,0,27,0,178,0,223,0,65,0,215,0,233,0,246,0,121,0,14,0,0,0,233,0,218,0,238,0,225,0,184,0,159,0,117,0,243,0,0,0,105,0,0,0,251,0,216,0,223,0,0,0,223,0,242,0,231,0,201,0,236,0,215,0,224,0,113,0,186,0,0,0,236,0,164,0,27,0,226,0,111,0,105,0,80,0,100,0,184,0,138,0,0,0,56,0,236,0,217,0,208,0,156,0,252,0,180,0,212,0,67,0,252,0,197,0,172,0,18,0,220,0,189,0,0,0,30,0,67,0,184,0,110,0,109,0,28,0,95,0,134,0,39,0,28,0,212,0,150,0,120,0,84,0,212,0,119,0,173,0,51,0,202,0,181,0,179,0,125,0,0,0,69,0,0,0,136,0,28,0,237,0,4,0,161,0,54,0,163,0,139,0,12,0,133,0,34,0,0,0,116,0,0,0,0,0,240,0,67,0,51,0,55,0,151,0,99,0,147,0,41,0,26,0,112,0,86,0,0,0,229,0,87,0,78,0,195,0,18,0,20,0,16,0,128,0,0,0,127,0,85,0,0,0,19,0,161,0,0,0,95,0,0,0,41,0,233,0,138,0,203,0,158,0,0,0,102,0,225,0,0,0,16,0,154,0,82,0,106,0,0,0,219,0,160,0,114,0,0,0,35,0,250,0,32,0,0,0,141,0,215,0,196,0,92,0,7,0,118,0,151,0,196,0,201,0,0,0,104,0,0,0,105,0,70,0,141,0,233,0,134,0,160,0,0,0,0,0,63,0,29,0,237,0,0,0,14,0,106,0,27,0,216,0,107,0,38,0,132,0,34,0,57,0,0,0,115,0,175,0,76,0,39,0,101,0,25,0,233,0,217,0,255,0,200,0,0,0,0,0,16,0,246,0,237,0,179,0,242,0,0,0,230,0,0,0,204,0,117,0,88,0,98,0,136,0,206,0,36,0,0,0,96,0,163,0,245,0,182,0,50,0,6,0,0,0,122,0,236,0,96,0,215,0,55,0,176,0,130,0,161,0,153,0,200,0,118,0,211,0,218,0,124,0,231,0,0,0,213,0,82,0,65,0,102,0,145,0,22,0,81,0,26,0,200,0,0,0,0,0,255,0,21,0,0,0,131,0,35,0,0,0,34,0,0,0,116,0,253,0,122,0,116,0,104,0,44,0,0,0,46,0,136,0,35,0,67,0,0,0,71,0,160,0,81,0,144,0,0,0,0,0,108,0,0,0,175,0,59,0,133,0,160,0,82,0,36,0,96,0,141,0,0,0,0,0,45,0,0,0,179,0,163,0,64,0,28,0,141,0,63,0,7,0,0,0,65,0,222,0,0,0,118,0,181,0,207,0,165,0,132,0,152,0,116,0,190,0,212,0,6,0,75,0,228,0,0,0,76,0,78,0,123,0,153,0,181,0,0,0,0,0,0,0,112,0,48,0,192,0,0,0,0,0,45,0,217,0,98,0,244,0,116,0,172,0,39,0,0,0,15,0,22,0,253,0,255,0,40,0,143,0,16,0,180,0,212,0,0,0,52,0,240,0,158,0,0,0,119,0,0,0,157,0,76,0,10,0,104,0,200,0,104,0,0,0,249,0,22,0,0,0,111,0,0,0,227,0,242,0,234,0,75,0,227,0,142,0,126,0,49,0,0,0,71,0,163,0,41,0,105,0,19,0,119,0,112,0,0,0,223,0,0,0,0,0,158,0,0,0,0,0,110,0,228,0,169,0,251,0,0,0,132,0,182,0,179,0,203,0,0,0,24,0,4,0,0,0,64,0,101,0,163,0,0,0,0,0,23,0,147,0,165,0,230,0,153,0,253,0,4,0,51,0,97,0,165,0,32,0,240,0,132,0,52,0,0,0,78,0,64,0,236,0,109,0,135,0,122,0,0,0,119,0,210,0,185,0,0,0,0,0,30,0,203,0,238,0,61,0,51,0,3,0,191,0,200,0,97,0,56,0,188,0,76,0,102,0,200,0,28,0,0,0,0,0,41,0,0,0,127,0,177,0,35,0,195,0,163,0,140,0,221,0,0,0,82,0,32,0,138,0,56,0,71,0,145,0,166,0,0,0,97,0,223,0,161,0,250,0,74,0,198,0,157,0,18,0,50,0,67,0,58,0,0,0,0,0,233,0,193,0,108,0,140,0,225,0,0,0,0,0,63,0,47,0,0,0,125,0,31,0,189,0,0,0,48,0,125,0,201,0,19,0,144,0,0,0,138,0,0,0,236,0,245,0,107,0,5,0,0,0,225,0,0,0,157,0,0,0,0,0,0,0,237,0,0,0,0,0,70,0,0,0,56,0,187,0,0,0,48,0,129,0,100,0,153,0,34,0,1,0,240,0,149,0,0,0,84,0,81,0,0,0,9,0,91,0,99,0,182,0,140,0,137,0,232,0,118,0,175,0,184,0,116,0,127,0,0,0,68,0,233,0,0,0,60,0,141,0,164,0,178,0,235,0,121,0,224,0,35,0,51,0,210,0,141,0,0,0,147,0,23,0,45,0,43,0,121,0,228,0,176,0,78,0,132,0,0,0,204,0,61,0,191,0,97,0,163,0,125,0,40,0,60,0,0,0,146,0,47,0,239,0,241,0,116,0,218,0,37,0,40,0,108,0,0,0,0,0,41,0,113,0,0,0,127,0,205,0,31,0,59,0,186,0,111,0,159,0,67,0,215,0,0,0,0,0,19,0,0,0,134,0,0,0,236,0,158,0,119,0,95,0,158,0,0,0,51,0,34,0,0,0,55,0,0,0,0,0,41,0,21,0,234,0,145,0,86,0,0,0,145,0,0,0,0,0,120,0,0,0,141,0,169,0,185,0,241,0,202,0,127,0,137,0,57,0,228,0,0,0,210,0,0,0,204,0,46,0,223,0,0,0,99,0,159,0,0,0);
signal scenario_full  : scenario_type := (109,31,51,31,51,30,225,31,85,31,85,30,219,31,138,31,10,31,248,31,6,31,123,31,243,31,1,31,106,31,106,30,16,31,253,31,253,30,115,31,77,31,103,31,103,30,154,31,28,31,40,31,40,30,155,31,216,31,50,31,84,31,244,31,35,31,97,31,141,31,90,31,123,31,85,31,85,30,85,29,85,28,227,31,91,31,183,31,130,31,237,31,30,31,44,31,44,30,97,31,228,31,41,31,124,31,30,31,151,31,175,31,90,31,139,31,219,31,49,31,144,31,161,31,55,31,55,30,164,31,161,31,38,31,51,31,115,31,74,31,104,31,130,31,144,31,143,31,96,31,162,31,167,31,74,31,74,30,232,31,229,31,31,31,31,30,29,31,246,31,238,31,42,31,80,31,82,31,148,31,240,31,107,31,82,31,105,31,105,30,117,31,45,31,82,31,55,31,172,31,172,30,95,31,182,31,254,31,31,31,206,31,6,31,98,31,48,31,48,30,171,31,3,31,3,30,132,31,254,31,254,30,242,31,242,30,132,31,254,31,189,31,128,31,135,31,59,31,32,31,140,31,140,30,111,31,142,31,81,31,126,31,136,31,136,30,114,31,72,31,184,31,124,31,124,30,124,29,138,31,208,31,200,31,222,31,126,31,126,30,194,31,188,31,59,31,59,30,118,31,5,31,142,31,81,31,91,31,91,30,119,31,10,31,200,31,200,30,203,31,203,30,172,31,172,30,172,29,213,31,103,31,99,31,30,31,44,31,114,31,147,31,103,31,103,30,103,29,182,31,198,31,199,31,251,31,62,31,145,31,150,31,98,31,98,30,132,31,250,31,11,31,22,31,197,31,240,31,89,31,87,31,51,31,166,31,166,30,166,29,182,31,12,31,208,31,114,31,149,31,149,30,244,31,244,30,218,31,52,31,201,31,154,31,55,31,95,31,26,31,255,31,186,31,3,31,218,31,218,30,96,31,37,31,102,31,252,31,252,30,84,31,84,30,106,31,160,31,40,31,40,30,122,31,65,31,2,31,2,30,25,31,88,31,88,30,88,29,178,31,233,31,190,31,190,30,200,31,215,31,205,31,99,31,66,31,66,30,138,31,138,30,169,31,177,31,105,31,105,30,222,31,44,31,93,31,15,31,15,30,249,31,56,31,56,30,56,29,37,31,106,31,207,31,206,31,206,30,203,31,226,31,124,31,99,31,55,31,59,31,115,31,115,30,115,29,49,31,93,31,93,30,79,31,123,31,185,31,224,31,195,31,1,31,184,31,214,31,228,31,4,31,229,31,147,31,147,30,165,31,241,31,85,31,139,31,220,31,96,31,197,31,195,31,247,31,247,30,247,29,78,31,96,31,96,30,96,29,186,31,191,31,253,31,3,31,73,31,76,31,157,31,51,31,229,31,182,31,35,31,241,31,19,31,224,31,170,31,170,30,194,31,38,31,46,31,46,30,125,31,55,31,3,31,147,31,253,31,234,31,70,31,233,31,155,31,131,31,2,31,86,31,212,31,202,31,48,31,190,31,235,31,212,31,9,31,27,31,178,31,223,31,65,31,215,31,233,31,246,31,121,31,14,31,14,30,233,31,218,31,238,31,225,31,184,31,159,31,117,31,243,31,243,30,105,31,105,30,251,31,216,31,223,31,223,30,223,31,242,31,231,31,201,31,236,31,215,31,224,31,113,31,186,31,186,30,236,31,164,31,27,31,226,31,111,31,105,31,80,31,100,31,184,31,138,31,138,30,56,31,236,31,217,31,208,31,156,31,252,31,180,31,212,31,67,31,252,31,197,31,172,31,18,31,220,31,189,31,189,30,30,31,67,31,184,31,110,31,109,31,28,31,95,31,134,31,39,31,28,31,212,31,150,31,120,31,84,31,212,31,119,31,173,31,51,31,202,31,181,31,179,31,125,31,125,30,69,31,69,30,136,31,28,31,237,31,4,31,161,31,54,31,163,31,139,31,12,31,133,31,34,31,34,30,116,31,116,30,116,29,240,31,67,31,51,31,55,31,151,31,99,31,147,31,41,31,26,31,112,31,86,31,86,30,229,31,87,31,78,31,195,31,18,31,20,31,16,31,128,31,128,30,127,31,85,31,85,30,19,31,161,31,161,30,95,31,95,30,41,31,233,31,138,31,203,31,158,31,158,30,102,31,225,31,225,30,16,31,154,31,82,31,106,31,106,30,219,31,160,31,114,31,114,30,35,31,250,31,32,31,32,30,141,31,215,31,196,31,92,31,7,31,118,31,151,31,196,31,201,31,201,30,104,31,104,30,105,31,70,31,141,31,233,31,134,31,160,31,160,30,160,29,63,31,29,31,237,31,237,30,14,31,106,31,27,31,216,31,107,31,38,31,132,31,34,31,57,31,57,30,115,31,175,31,76,31,39,31,101,31,25,31,233,31,217,31,255,31,200,31,200,30,200,29,16,31,246,31,237,31,179,31,242,31,242,30,230,31,230,30,204,31,117,31,88,31,98,31,136,31,206,31,36,31,36,30,96,31,163,31,245,31,182,31,50,31,6,31,6,30,122,31,236,31,96,31,215,31,55,31,176,31,130,31,161,31,153,31,200,31,118,31,211,31,218,31,124,31,231,31,231,30,213,31,82,31,65,31,102,31,145,31,22,31,81,31,26,31,200,31,200,30,200,29,255,31,21,31,21,30,131,31,35,31,35,30,34,31,34,30,116,31,253,31,122,31,116,31,104,31,44,31,44,30,46,31,136,31,35,31,67,31,67,30,71,31,160,31,81,31,144,31,144,30,144,29,108,31,108,30,175,31,59,31,133,31,160,31,82,31,36,31,96,31,141,31,141,30,141,29,45,31,45,30,179,31,163,31,64,31,28,31,141,31,63,31,7,31,7,30,65,31,222,31,222,30,118,31,181,31,207,31,165,31,132,31,152,31,116,31,190,31,212,31,6,31,75,31,228,31,228,30,76,31,78,31,123,31,153,31,181,31,181,30,181,29,181,28,112,31,48,31,192,31,192,30,192,29,45,31,217,31,98,31,244,31,116,31,172,31,39,31,39,30,15,31,22,31,253,31,255,31,40,31,143,31,16,31,180,31,212,31,212,30,52,31,240,31,158,31,158,30,119,31,119,30,157,31,76,31,10,31,104,31,200,31,104,31,104,30,249,31,22,31,22,30,111,31,111,30,227,31,242,31,234,31,75,31,227,31,142,31,126,31,49,31,49,30,71,31,163,31,41,31,105,31,19,31,119,31,112,31,112,30,223,31,223,30,223,29,158,31,158,30,158,29,110,31,228,31,169,31,251,31,251,30,132,31,182,31,179,31,203,31,203,30,24,31,4,31,4,30,64,31,101,31,163,31,163,30,163,29,23,31,147,31,165,31,230,31,153,31,253,31,4,31,51,31,97,31,165,31,32,31,240,31,132,31,52,31,52,30,78,31,64,31,236,31,109,31,135,31,122,31,122,30,119,31,210,31,185,31,185,30,185,29,30,31,203,31,238,31,61,31,51,31,3,31,191,31,200,31,97,31,56,31,188,31,76,31,102,31,200,31,28,31,28,30,28,29,41,31,41,30,127,31,177,31,35,31,195,31,163,31,140,31,221,31,221,30,82,31,32,31,138,31,56,31,71,31,145,31,166,31,166,30,97,31,223,31,161,31,250,31,74,31,198,31,157,31,18,31,50,31,67,31,58,31,58,30,58,29,233,31,193,31,108,31,140,31,225,31,225,30,225,29,63,31,47,31,47,30,125,31,31,31,189,31,189,30,48,31,125,31,201,31,19,31,144,31,144,30,138,31,138,30,236,31,245,31,107,31,5,31,5,30,225,31,225,30,157,31,157,30,157,29,157,28,237,31,237,30,237,29,70,31,70,30,56,31,187,31,187,30,48,31,129,31,100,31,153,31,34,31,1,31,240,31,149,31,149,30,84,31,81,31,81,30,9,31,91,31,99,31,182,31,140,31,137,31,232,31,118,31,175,31,184,31,116,31,127,31,127,30,68,31,233,31,233,30,60,31,141,31,164,31,178,31,235,31,121,31,224,31,35,31,51,31,210,31,141,31,141,30,147,31,23,31,45,31,43,31,121,31,228,31,176,31,78,31,132,31,132,30,204,31,61,31,191,31,97,31,163,31,125,31,40,31,60,31,60,30,146,31,47,31,239,31,241,31,116,31,218,31,37,31,40,31,108,31,108,30,108,29,41,31,113,31,113,30,127,31,205,31,31,31,59,31,186,31,111,31,159,31,67,31,215,31,215,30,215,29,19,31,19,30,134,31,134,30,236,31,158,31,119,31,95,31,158,31,158,30,51,31,34,31,34,30,55,31,55,30,55,29,41,31,21,31,234,31,145,31,86,31,86,30,145,31,145,30,145,29,120,31,120,30,141,31,169,31,185,31,241,31,202,31,127,31,137,31,57,31,228,31,228,30,210,31,210,30,204,31,46,31,223,31,223,30,99,31,159,31,159,30);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
