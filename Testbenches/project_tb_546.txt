-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 900;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (160,0,141,0,62,0,7,0,255,0,236,0,52,0,10,0,168,0,46,0,162,0,9,0,13,0,14,0,0,0,49,0,0,0,149,0,114,0,0,0,118,0,120,0,229,0,42,0,69,0,0,0,0,0,205,0,145,0,220,0,139,0,0,0,222,0,0,0,26,0,0,0,96,0,114,0,150,0,121,0,143,0,121,0,35,0,141,0,37,0,44,0,136,0,66,0,196,0,26,0,10,0,188,0,137,0,227,0,3,0,70,0,67,0,164,0,32,0,0,0,175,0,176,0,163,0,194,0,236,0,0,0,0,0,203,0,0,0,155,0,103,0,26,0,213,0,0,0,86,0,114,0,205,0,201,0,0,0,112,0,217,0,165,0,219,0,221,0,54,0,141,0,46,0,81,0,238,0,229,0,73,0,241,0,0,0,249,0,48,0,164,0,0,0,120,0,129,0,178,0,186,0,0,0,36,0,14,0,0,0,238,0,168,0,110,0,212,0,140,0,35,0,102,0,0,0,141,0,130,0,84,0,0,0,174,0,0,0,0,0,221,0,23,0,203,0,42,0,48,0,35,0,172,0,25,0,106,0,53,0,0,0,0,0,123,0,35,0,0,0,131,0,197,0,0,0,60,0,214,0,54,0,169,0,179,0,230,0,87,0,0,0,22,0,197,0,0,0,0,0,3,0,160,0,0,0,45,0,201,0,169,0,173,0,0,0,177,0,166,0,250,0,2,0,0,0,0,0,0,0,0,0,125,0,44,0,76,0,200,0,236,0,108,0,0,0,25,0,0,0,89,0,141,0,124,0,235,0,179,0,22,0,255,0,143,0,32,0,25,0,247,0,76,0,138,0,9,0,219,0,234,0,135,0,159,0,85,0,145,0,68,0,146,0,96,0,0,0,200,0,220,0,107,0,19,0,248,0,98,0,0,0,189,0,140,0,0,0,0,0,167,0,0,0,151,0,0,0,176,0,0,0,169,0,0,0,197,0,0,0,72,0,176,0,189,0,233,0,1,0,112,0,123,0,57,0,184,0,63,0,0,0,238,0,53,0,0,0,0,0,73,0,90,0,101,0,250,0,110,0,91,0,147,0,0,0,193,0,92,0,63,0,241,0,218,0,0,0,0,0,209,0,225,0,0,0,48,0,146,0,34,0,0,0,25,0,146,0,0,0,0,0,0,0,73,0,219,0,146,0,155,0,59,0,0,0,38,0,101,0,74,0,20,0,234,0,3,0,0,0,149,0,0,0,64,0,0,0,134,0,164,0,59,0,172,0,36,0,117,0,133,0,151,0,116,0,0,0,210,0,13,0,0,0,123,0,83,0,250,0,186,0,0,0,226,0,106,0,112,0,207,0,3,0,0,0,69,0,182,0,76,0,0,0,201,0,19,0,0,0,0,0,0,0,0,0,170,0,91,0,239,0,0,0,0,0,150,0,84,0,144,0,0,0,121,0,89,0,24,0,134,0,74,0,167,0,215,0,0,0,246,0,195,0,48,0,39,0,253,0,53,0,71,0,194,0,83,0,92,0,0,0,0,0,197,0,199,0,176,0,255,0,125,0,74,0,159,0,49,0,29,0,81,0,39,0,109,0,0,0,184,0,198,0,0,0,124,0,235,0,86,0,234,0,229,0,84,0,73,0,32,0,200,0,147,0,76,0,0,0,0,0,116,0,191,0,211,0,218,0,52,0,112,0,110,0,48,0,102,0,241,0,167,0,140,0,0,0,117,0,19,0,174,0,146,0,51,0,114,0,235,0,165,0,109,0,129,0,0,0,25,0,151,0,78,0,0,0,20,0,255,0,49,0,0,0,0,0,130,0,218,0,184,0,12,0,224,0,0,0,203,0,46,0,241,0,0,0,223,0,0,0,203,0,150,0,0,0,9,0,177,0,206,0,200,0,154,0,216,0,201,0,148,0,92,0,152,0,95,0,156,0,234,0,188,0,0,0,45,0,222,0,0,0,0,0,83,0,43,0,128,0,62,0,134,0,0,0,98,0,89,0,26,0,61,0,220,0,149,0,0,0,221,0,159,0,0,0,37,0,164,0,228,0,49,0,0,0,232,0,106,0,197,0,0,0,206,0,167,0,240,0,170,0,0,0,227,0,0,0,54,0,54,0,0,0,192,0,62,0,0,0,43,0,27,0,0,0,0,0,145,0,137,0,33,0,236,0,0,0,177,0,66,0,9,0,0,0,91,0,81,0,0,0,0,0,97,0,0,0,57,0,172,0,40,0,209,0,194,0,0,0,220,0,57,0,216,0,0,0,50,0,198,0,77,0,0,0,41,0,167,0,73,0,176,0,78,0,48,0,67,0,20,0,48,0,41,0,223,0,173,0,62,0,216,0,221,0,49,0,26,0,151,0,0,0,192,0,63,0,121,0,0,0,0,0,246,0,49,0,151,0,0,0,103,0,0,0,0,0,0,0,19,0,169,0,89,0,81,0,0,0,208,0,0,0,254,0,0,0,0,0,24,0,176,0,0,0,92,0,75,0,52,0,221,0,200,0,0,0,3,0,250,0,0,0,3,0,121,0,85,0,0,0,40,0,82,0,246,0,101,0,0,0,198,0,138,0,227,0,17,0,51,0,0,0,164,0,0,0,4,0,215,0,0,0,0,0,135,0,0,0,0,0,179,0,127,0,0,0,226,0,150,0,0,0,128,0,246,0,0,0,137,0,69,0,8,0,105,0,0,0,240,0,128,0,150,0,130,0,0,0,33,0,57,0,0,0,107,0,163,0,128,0,24,0,37,0,31,0,227,0,77,0,209,0,191,0,0,0,193,0,148,0,63,0,188,0,197,0,65,0,225,0,242,0,127,0,26,0,151,0,159,0,219,0,14,0,89,0,0,0,7,0,242,0,96,0,82,0,10,0,0,0,217,0,142,0,49,0,159,0,223,0,174,0,212,0,57,0,248,0,13,0,133,0,97,0,203,0,0,0,159,0,209,0,36,0,0,0,0,0,0,0,0,0,5,0,77,0,95,0,0,0,116,0,0,0,107,0,186,0,117,0,216,0,0,0,209,0,141,0,27,0,237,0,143,0,7,0,0,0,19,0,23,0,247,0,0,0,92,0,0,0,205,0,69,0,240,0,0,0,0,0,5,0,30,0,129,0,78,0,25,0,0,0,223,0,189,0,41,0,78,0,223,0,209,0,44,0,174,0,198,0,161,0,161,0,0,0,98,0,5,0,0,0,53,0,52,0,67,0,37,0,37,0,22,0,40,0,253,0,82,0,132,0,0,0,58,0,237,0,239,0,16,0,142,0,182,0,179,0,211,0,217,0,198,0,0,0,0,0,59,0,239,0,150,0,79,0,242,0,48,0,180,0,15,0,200,0,148,0,122,0,0,0,251,0,178,0,64,0,196,0,51,0,4,0,118,0,197,0,232,0,253,0,0,0,96,0,72,0,78,0,0,0,48,0,0,0,0,0,245,0,219,0,129,0,172,0,207,0,0,0,136,0,0,0,25,0,14,0,214,0,90,0,38,0,195,0,141,0,161,0,17,0,47,0,133,0,25,0,76,0,249,0,73,0,39,0,10,0,0,0,0,0,0,0,131,0,12,0,155,0,0,0,220,0,207,0,138,0,139,0,110,0,102,0,107,0,0,0,240,0,157,0,0,0,244,0,0,0,210,0,138,0,80,0,70,0,27,0,66,0,121,0,193,0,136,0,36,0,29,0,95,0,168,0,100,0,213,0,0,0,91,0,208,0,64,0,231,0,215,0,207,0,50,0,226,0,87,0,0,0,0,0,82,0,49,0,0,0,28,0,0,0,166,0,0,0,252,0,1,0,0,0,0,0,77,0,94,0,32,0,197,0,171,0,152,0,230,0,104,0,19,0,0,0,37,0,46,0,229,0,155,0,0,0,47,0,0,0,106,0,0,0,139,0,193,0,60,0,217,0,78,0,224,0,108,0,235,0,0,0,0,0,90,0,80,0,111,0,45,0,251,0,68,0,39,0,191,0,112,0,11,0,0,0,238,0,162,0,0,0,123,0,0,0,86,0,127,0,110,0,17,0,36,0,96,0);
signal scenario_full  : scenario_type := (160,31,141,31,62,31,7,31,255,31,236,31,52,31,10,31,168,31,46,31,162,31,9,31,13,31,14,31,14,30,49,31,49,30,149,31,114,31,114,30,118,31,120,31,229,31,42,31,69,31,69,30,69,29,205,31,145,31,220,31,139,31,139,30,222,31,222,30,26,31,26,30,96,31,114,31,150,31,121,31,143,31,121,31,35,31,141,31,37,31,44,31,136,31,66,31,196,31,26,31,10,31,188,31,137,31,227,31,3,31,70,31,67,31,164,31,32,31,32,30,175,31,176,31,163,31,194,31,236,31,236,30,236,29,203,31,203,30,155,31,103,31,26,31,213,31,213,30,86,31,114,31,205,31,201,31,201,30,112,31,217,31,165,31,219,31,221,31,54,31,141,31,46,31,81,31,238,31,229,31,73,31,241,31,241,30,249,31,48,31,164,31,164,30,120,31,129,31,178,31,186,31,186,30,36,31,14,31,14,30,238,31,168,31,110,31,212,31,140,31,35,31,102,31,102,30,141,31,130,31,84,31,84,30,174,31,174,30,174,29,221,31,23,31,203,31,42,31,48,31,35,31,172,31,25,31,106,31,53,31,53,30,53,29,123,31,35,31,35,30,131,31,197,31,197,30,60,31,214,31,54,31,169,31,179,31,230,31,87,31,87,30,22,31,197,31,197,30,197,29,3,31,160,31,160,30,45,31,201,31,169,31,173,31,173,30,177,31,166,31,250,31,2,31,2,30,2,29,2,28,2,27,125,31,44,31,76,31,200,31,236,31,108,31,108,30,25,31,25,30,89,31,141,31,124,31,235,31,179,31,22,31,255,31,143,31,32,31,25,31,247,31,76,31,138,31,9,31,219,31,234,31,135,31,159,31,85,31,145,31,68,31,146,31,96,31,96,30,200,31,220,31,107,31,19,31,248,31,98,31,98,30,189,31,140,31,140,30,140,29,167,31,167,30,151,31,151,30,176,31,176,30,169,31,169,30,197,31,197,30,72,31,176,31,189,31,233,31,1,31,112,31,123,31,57,31,184,31,63,31,63,30,238,31,53,31,53,30,53,29,73,31,90,31,101,31,250,31,110,31,91,31,147,31,147,30,193,31,92,31,63,31,241,31,218,31,218,30,218,29,209,31,225,31,225,30,48,31,146,31,34,31,34,30,25,31,146,31,146,30,146,29,146,28,73,31,219,31,146,31,155,31,59,31,59,30,38,31,101,31,74,31,20,31,234,31,3,31,3,30,149,31,149,30,64,31,64,30,134,31,164,31,59,31,172,31,36,31,117,31,133,31,151,31,116,31,116,30,210,31,13,31,13,30,123,31,83,31,250,31,186,31,186,30,226,31,106,31,112,31,207,31,3,31,3,30,69,31,182,31,76,31,76,30,201,31,19,31,19,30,19,29,19,28,19,27,170,31,91,31,239,31,239,30,239,29,150,31,84,31,144,31,144,30,121,31,89,31,24,31,134,31,74,31,167,31,215,31,215,30,246,31,195,31,48,31,39,31,253,31,53,31,71,31,194,31,83,31,92,31,92,30,92,29,197,31,199,31,176,31,255,31,125,31,74,31,159,31,49,31,29,31,81,31,39,31,109,31,109,30,184,31,198,31,198,30,124,31,235,31,86,31,234,31,229,31,84,31,73,31,32,31,200,31,147,31,76,31,76,30,76,29,116,31,191,31,211,31,218,31,52,31,112,31,110,31,48,31,102,31,241,31,167,31,140,31,140,30,117,31,19,31,174,31,146,31,51,31,114,31,235,31,165,31,109,31,129,31,129,30,25,31,151,31,78,31,78,30,20,31,255,31,49,31,49,30,49,29,130,31,218,31,184,31,12,31,224,31,224,30,203,31,46,31,241,31,241,30,223,31,223,30,203,31,150,31,150,30,9,31,177,31,206,31,200,31,154,31,216,31,201,31,148,31,92,31,152,31,95,31,156,31,234,31,188,31,188,30,45,31,222,31,222,30,222,29,83,31,43,31,128,31,62,31,134,31,134,30,98,31,89,31,26,31,61,31,220,31,149,31,149,30,221,31,159,31,159,30,37,31,164,31,228,31,49,31,49,30,232,31,106,31,197,31,197,30,206,31,167,31,240,31,170,31,170,30,227,31,227,30,54,31,54,31,54,30,192,31,62,31,62,30,43,31,27,31,27,30,27,29,145,31,137,31,33,31,236,31,236,30,177,31,66,31,9,31,9,30,91,31,81,31,81,30,81,29,97,31,97,30,57,31,172,31,40,31,209,31,194,31,194,30,220,31,57,31,216,31,216,30,50,31,198,31,77,31,77,30,41,31,167,31,73,31,176,31,78,31,48,31,67,31,20,31,48,31,41,31,223,31,173,31,62,31,216,31,221,31,49,31,26,31,151,31,151,30,192,31,63,31,121,31,121,30,121,29,246,31,49,31,151,31,151,30,103,31,103,30,103,29,103,28,19,31,169,31,89,31,81,31,81,30,208,31,208,30,254,31,254,30,254,29,24,31,176,31,176,30,92,31,75,31,52,31,221,31,200,31,200,30,3,31,250,31,250,30,3,31,121,31,85,31,85,30,40,31,82,31,246,31,101,31,101,30,198,31,138,31,227,31,17,31,51,31,51,30,164,31,164,30,4,31,215,31,215,30,215,29,135,31,135,30,135,29,179,31,127,31,127,30,226,31,150,31,150,30,128,31,246,31,246,30,137,31,69,31,8,31,105,31,105,30,240,31,128,31,150,31,130,31,130,30,33,31,57,31,57,30,107,31,163,31,128,31,24,31,37,31,31,31,227,31,77,31,209,31,191,31,191,30,193,31,148,31,63,31,188,31,197,31,65,31,225,31,242,31,127,31,26,31,151,31,159,31,219,31,14,31,89,31,89,30,7,31,242,31,96,31,82,31,10,31,10,30,217,31,142,31,49,31,159,31,223,31,174,31,212,31,57,31,248,31,13,31,133,31,97,31,203,31,203,30,159,31,209,31,36,31,36,30,36,29,36,28,36,27,5,31,77,31,95,31,95,30,116,31,116,30,107,31,186,31,117,31,216,31,216,30,209,31,141,31,27,31,237,31,143,31,7,31,7,30,19,31,23,31,247,31,247,30,92,31,92,30,205,31,69,31,240,31,240,30,240,29,5,31,30,31,129,31,78,31,25,31,25,30,223,31,189,31,41,31,78,31,223,31,209,31,44,31,174,31,198,31,161,31,161,31,161,30,98,31,5,31,5,30,53,31,52,31,67,31,37,31,37,31,22,31,40,31,253,31,82,31,132,31,132,30,58,31,237,31,239,31,16,31,142,31,182,31,179,31,211,31,217,31,198,31,198,30,198,29,59,31,239,31,150,31,79,31,242,31,48,31,180,31,15,31,200,31,148,31,122,31,122,30,251,31,178,31,64,31,196,31,51,31,4,31,118,31,197,31,232,31,253,31,253,30,96,31,72,31,78,31,78,30,48,31,48,30,48,29,245,31,219,31,129,31,172,31,207,31,207,30,136,31,136,30,25,31,14,31,214,31,90,31,38,31,195,31,141,31,161,31,17,31,47,31,133,31,25,31,76,31,249,31,73,31,39,31,10,31,10,30,10,29,10,28,131,31,12,31,155,31,155,30,220,31,207,31,138,31,139,31,110,31,102,31,107,31,107,30,240,31,157,31,157,30,244,31,244,30,210,31,138,31,80,31,70,31,27,31,66,31,121,31,193,31,136,31,36,31,29,31,95,31,168,31,100,31,213,31,213,30,91,31,208,31,64,31,231,31,215,31,207,31,50,31,226,31,87,31,87,30,87,29,82,31,49,31,49,30,28,31,28,30,166,31,166,30,252,31,1,31,1,30,1,29,77,31,94,31,32,31,197,31,171,31,152,31,230,31,104,31,19,31,19,30,37,31,46,31,229,31,155,31,155,30,47,31,47,30,106,31,106,30,139,31,193,31,60,31,217,31,78,31,224,31,108,31,235,31,235,30,235,29,90,31,80,31,111,31,45,31,251,31,68,31,39,31,191,31,112,31,11,31,11,30,238,31,162,31,162,30,123,31,123,30,86,31,127,31,110,31,17,31,36,31,96,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
