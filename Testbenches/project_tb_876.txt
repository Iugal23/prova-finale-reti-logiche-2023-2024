-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 963;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (101,0,213,0,44,0,216,0,197,0,202,0,155,0,0,0,232,0,189,0,230,0,137,0,94,0,50,0,163,0,181,0,155,0,0,0,124,0,19,0,178,0,77,0,89,0,12,0,95,0,235,0,92,0,168,0,67,0,251,0,153,0,0,0,213,0,195,0,190,0,168,0,168,0,98,0,55,0,205,0,92,0,96,0,244,0,164,0,38,0,101,0,62,0,230,0,0,0,0,0,191,0,25,0,0,0,0,0,5,0,86,0,2,0,0,0,219,0,84,0,134,0,60,0,15,0,121,0,149,0,24,0,215,0,254,0,25,0,69,0,227,0,0,0,213,0,67,0,70,0,253,0,133,0,210,0,152,0,247,0,65,0,204,0,123,0,166,0,113,0,218,0,0,0,0,0,8,0,83,0,121,0,0,0,90,0,36,0,0,0,27,0,126,0,43,0,138,0,22,0,185,0,73,0,194,0,169,0,0,0,70,0,227,0,119,0,0,0,30,0,16,0,95,0,0,0,241,0,149,0,233,0,0,0,0,0,135,0,41,0,99,0,95,0,0,0,253,0,191,0,4,0,211,0,0,0,214,0,137,0,219,0,51,0,133,0,137,0,205,0,165,0,106,0,0,0,29,0,21,0,0,0,168,0,149,0,123,0,138,0,237,0,255,0,0,0,114,0,235,0,0,0,183,0,4,0,43,0,237,0,26,0,255,0,59,0,117,0,13,0,21,0,207,0,84,0,0,0,62,0,136,0,83,0,245,0,249,0,0,0,212,0,145,0,96,0,206,0,215,0,0,0,0,0,48,0,0,0,0,0,27,0,61,0,36,0,21,0,119,0,33,0,69,0,20,0,42,0,5,0,0,0,122,0,44,0,108,0,0,0,230,0,196,0,16,0,79,0,93,0,194,0,60,0,7,0,0,0,93,0,58,0,210,0,39,0,167,0,151,0,31,0,0,0,203,0,88,0,255,0,11,0,102,0,142,0,164,0,0,0,137,0,178,0,118,0,194,0,223,0,28,0,179,0,0,0,72,0,183,0,244,0,0,0,236,0,55,0,14,0,107,0,174,0,0,0,9,0,63,0,200,0,110,0,0,0,222,0,0,0,0,0,7,0,99,0,0,0,0,0,0,0,26,0,52,0,113,0,0,0,91,0,72,0,56,0,149,0,0,0,0,0,0,0,136,0,26,0,222,0,135,0,117,0,33,0,169,0,21,0,0,0,221,0,0,0,255,0,80,0,221,0,88,0,0,0,151,0,8,0,220,0,162,0,0,0,20,0,32,0,166,0,0,0,19,0,22,0,0,0,0,0,194,0,247,0,123,0,165,0,169,0,0,0,237,0,49,0,238,0,8,0,251,0,175,0,201,0,0,0,0,0,55,0,32,0,101,0,0,0,110,0,50,0,0,0,109,0,149,0,181,0,0,0,187,0,79,0,0,0,153,0,237,0,173,0,50,0,94,0,80,0,179,0,235,0,0,0,52,0,0,0,241,0,71,0,127,0,4,0,0,0,245,0,47,0,157,0,189,0,208,0,246,0,216,0,0,0,6,0,0,0,240,0,0,0,0,0,51,0,8,0,130,0,21,0,150,0,77,0,0,0,68,0,78,0,228,0,244,0,156,0,200,0,32,0,126,0,99,0,55,0,4,0,13,0,235,0,94,0,82,0,0,0,145,0,0,0,194,0,215,0,0,0,115,0,177,0,65,0,35,0,0,0,0,0,165,0,7,0,73,0,44,0,40,0,0,0,0,0,0,0,73,0,193,0,250,0,75,0,188,0,150,0,0,0,25,0,207,0,188,0,219,0,0,0,23,0,147,0,125,0,91,0,130,0,213,0,135,0,172,0,0,0,0,0,11,0,41,0,4,0,0,0,0,0,126,0,88,0,55,0,194,0,0,0,129,0,74,0,223,0,0,0,222,0,0,0,0,0,0,0,134,0,57,0,136,0,8,0,180,0,65,0,14,0,0,0,238,0,117,0,58,0,105,0,251,0,184,0,52,0,119,0,204,0,178,0,0,0,131,0,197,0,41,0,254,0,0,0,59,0,35,0,79,0,0,0,122,0,48,0,225,0,49,0,141,0,211,0,106,0,151,0,4,0,132,0,238,0,11,0,0,0,200,0,70,0,0,0,50,0,160,0,161,0,0,0,0,0,116,0,8,0,245,0,27,0,239,0,41,0,86,0,0,0,48,0,49,0,153,0,0,0,106,0,203,0,48,0,8,0,0,0,39,0,0,0,126,0,13,0,15,0,0,0,3,0,229,0,229,0,145,0,7,0,164,0,0,0,0,0,124,0,69,0,147,0,32,0,162,0,253,0,160,0,187,0,47,0,214,0,12,0,0,0,0,0,44,0,212,0,0,0,52,0,0,0,20,0,228,0,0,0,190,0,0,0,211,0,114,0,94,0,31,0,115,0,0,0,0,0,0,0,0,0,58,0,55,0,4,0,35,0,201,0,194,0,19,0,250,0,0,0,242,0,72,0,110,0,0,0,14,0,95,0,0,0,16,0,117,0,50,0,120,0,251,0,235,0,184,0,245,0,163,0,0,0,130,0,76,0,39,0,74,0,0,0,32,0,248,0,166,0,72,0,222,0,204,0,48,0,209,0,180,0,241,0,158,0,192,0,9,0,209,0,89,0,0,0,21,0,232,0,80,0,78,0,30,0,191,0,0,0,223,0,253,0,205,0,62,0,209,0,61,0,121,0,56,0,139,0,146,0,118,0,0,0,0,0,221,0,84,0,0,0,0,0,19,0,15,0,0,0,0,0,4,0,28,0,169,0,220,0,0,0,107,0,52,0,216,0,54,0,77,0,0,0,96,0,0,0,185,0,104,0,66,0,114,0,0,0,0,0,188,0,0,0,239,0,45,0,146,0,129,0,138,0,125,0,142,0,155,0,82,0,24,0,46,0,0,0,0,0,211,0,114,0,162,0,158,0,229,0,76,0,40,0,63,0,96,0,118,0,154,0,183,0,58,0,155,0,0,0,118,0,0,0,222,0,0,0,210,0,0,0,244,0,88,0,88,0,0,0,179,0,102,0,163,0,195,0,179,0,0,0,85,0,201,0,40,0,166,0,191,0,130,0,201,0,0,0,151,0,161,0,233,0,0,0,76,0,164,0,0,0,0,0,116,0,91,0,166,0,214,0,20,0,161,0,123,0,241,0,0,0,61,0,0,0,171,0,0,0,185,0,227,0,0,0,236,0,130,0,17,0,101,0,52,0,96,0,85,0,59,0,23,0,59,0,24,0,0,0,205,0,234,0,39,0,125,0,158,0,228,0,218,0,132,0,198,0,0,0,196,0,166,0,0,0,1,0,192,0,77,0,100,0,62,0,190,0,77,0,138,0,75,0,0,0,72,0,122,0,145,0,191,0,247,0,63,0,0,0,159,0,0,0,160,0,167,0,0,0,171,0,205,0,14,0,0,0,54,0,194,0,28,0,193,0,0,0,111,0,147,0,137,0,35,0,158,0,101,0,0,0,89,0,92,0,0,0,144,0,222,0,164,0,75,0,31,0,107,0,167,0,210,0,166,0,0,0,29,0,161,0,254,0,85,0,22,0,84,0,58,0,60,0,69,0,78,0,89,0,100,0,221,0,0,0,199,0,0,0,215,0,249,0,19,0,180,0,51,0,25,0,241,0,224,0,23,0,48,0,192,0,255,0,164,0,0,0,109,0,210,0,0,0,0,0,241,0,77,0,0,0,230,0,221,0,41,0,94,0,39,0,0,0,0,0,208,0,0,0,243,0,105,0,0,0,118,0,154,0,0,0,187,0,187,0,85,0,198,0,242,0,0,0,224,0,0,0,204,0,251,0,203,0,187,0,99,0,5,0,1,0,162,0,111,0,233,0,0,0,206,0,51,0,186,0,0,0,157,0,234,0,0,0,130,0,157,0,184,0,44,0,0,0,96,0,0,0,132,0,160,0,28,0,46,0,215,0,32,0,0,0,245,0,0,0,110,0,143,0,208,0,52,0,91,0,205,0,0,0,0,0,191,0,156,0,239,0,210,0,110,0,0,0,135,0,133,0,116,0,0,0,65,0,98,0,0,0,0,0,205,0,57,0,0,0,0,0,0,0,0,0,11,0,11,0,163,0,201,0,0,0,37,0,0,0,248,0,238,0,0,0,41,0,129,0,144,0,0,0,242,0,23,0,115,0,192,0,47,0,219,0,167,0,249,0,227,0,124,0,252,0,0,0,112,0,43,0,73,0,83,0,179,0,24,0,0,0,114,0,0,0,133,0,0,0,0,0,0,0,167,0,238,0,105,0,47,0,191,0,21,0,134,0,199,0,0,0,0,0,103,0);
signal scenario_full  : scenario_type := (101,31,213,31,44,31,216,31,197,31,202,31,155,31,155,30,232,31,189,31,230,31,137,31,94,31,50,31,163,31,181,31,155,31,155,30,124,31,19,31,178,31,77,31,89,31,12,31,95,31,235,31,92,31,168,31,67,31,251,31,153,31,153,30,213,31,195,31,190,31,168,31,168,31,98,31,55,31,205,31,92,31,96,31,244,31,164,31,38,31,101,31,62,31,230,31,230,30,230,29,191,31,25,31,25,30,25,29,5,31,86,31,2,31,2,30,219,31,84,31,134,31,60,31,15,31,121,31,149,31,24,31,215,31,254,31,25,31,69,31,227,31,227,30,213,31,67,31,70,31,253,31,133,31,210,31,152,31,247,31,65,31,204,31,123,31,166,31,113,31,218,31,218,30,218,29,8,31,83,31,121,31,121,30,90,31,36,31,36,30,27,31,126,31,43,31,138,31,22,31,185,31,73,31,194,31,169,31,169,30,70,31,227,31,119,31,119,30,30,31,16,31,95,31,95,30,241,31,149,31,233,31,233,30,233,29,135,31,41,31,99,31,95,31,95,30,253,31,191,31,4,31,211,31,211,30,214,31,137,31,219,31,51,31,133,31,137,31,205,31,165,31,106,31,106,30,29,31,21,31,21,30,168,31,149,31,123,31,138,31,237,31,255,31,255,30,114,31,235,31,235,30,183,31,4,31,43,31,237,31,26,31,255,31,59,31,117,31,13,31,21,31,207,31,84,31,84,30,62,31,136,31,83,31,245,31,249,31,249,30,212,31,145,31,96,31,206,31,215,31,215,30,215,29,48,31,48,30,48,29,27,31,61,31,36,31,21,31,119,31,33,31,69,31,20,31,42,31,5,31,5,30,122,31,44,31,108,31,108,30,230,31,196,31,16,31,79,31,93,31,194,31,60,31,7,31,7,30,93,31,58,31,210,31,39,31,167,31,151,31,31,31,31,30,203,31,88,31,255,31,11,31,102,31,142,31,164,31,164,30,137,31,178,31,118,31,194,31,223,31,28,31,179,31,179,30,72,31,183,31,244,31,244,30,236,31,55,31,14,31,107,31,174,31,174,30,9,31,63,31,200,31,110,31,110,30,222,31,222,30,222,29,7,31,99,31,99,30,99,29,99,28,26,31,52,31,113,31,113,30,91,31,72,31,56,31,149,31,149,30,149,29,149,28,136,31,26,31,222,31,135,31,117,31,33,31,169,31,21,31,21,30,221,31,221,30,255,31,80,31,221,31,88,31,88,30,151,31,8,31,220,31,162,31,162,30,20,31,32,31,166,31,166,30,19,31,22,31,22,30,22,29,194,31,247,31,123,31,165,31,169,31,169,30,237,31,49,31,238,31,8,31,251,31,175,31,201,31,201,30,201,29,55,31,32,31,101,31,101,30,110,31,50,31,50,30,109,31,149,31,181,31,181,30,187,31,79,31,79,30,153,31,237,31,173,31,50,31,94,31,80,31,179,31,235,31,235,30,52,31,52,30,241,31,71,31,127,31,4,31,4,30,245,31,47,31,157,31,189,31,208,31,246,31,216,31,216,30,6,31,6,30,240,31,240,30,240,29,51,31,8,31,130,31,21,31,150,31,77,31,77,30,68,31,78,31,228,31,244,31,156,31,200,31,32,31,126,31,99,31,55,31,4,31,13,31,235,31,94,31,82,31,82,30,145,31,145,30,194,31,215,31,215,30,115,31,177,31,65,31,35,31,35,30,35,29,165,31,7,31,73,31,44,31,40,31,40,30,40,29,40,28,73,31,193,31,250,31,75,31,188,31,150,31,150,30,25,31,207,31,188,31,219,31,219,30,23,31,147,31,125,31,91,31,130,31,213,31,135,31,172,31,172,30,172,29,11,31,41,31,4,31,4,30,4,29,126,31,88,31,55,31,194,31,194,30,129,31,74,31,223,31,223,30,222,31,222,30,222,29,222,28,134,31,57,31,136,31,8,31,180,31,65,31,14,31,14,30,238,31,117,31,58,31,105,31,251,31,184,31,52,31,119,31,204,31,178,31,178,30,131,31,197,31,41,31,254,31,254,30,59,31,35,31,79,31,79,30,122,31,48,31,225,31,49,31,141,31,211,31,106,31,151,31,4,31,132,31,238,31,11,31,11,30,200,31,70,31,70,30,50,31,160,31,161,31,161,30,161,29,116,31,8,31,245,31,27,31,239,31,41,31,86,31,86,30,48,31,49,31,153,31,153,30,106,31,203,31,48,31,8,31,8,30,39,31,39,30,126,31,13,31,15,31,15,30,3,31,229,31,229,31,145,31,7,31,164,31,164,30,164,29,124,31,69,31,147,31,32,31,162,31,253,31,160,31,187,31,47,31,214,31,12,31,12,30,12,29,44,31,212,31,212,30,52,31,52,30,20,31,228,31,228,30,190,31,190,30,211,31,114,31,94,31,31,31,115,31,115,30,115,29,115,28,115,27,58,31,55,31,4,31,35,31,201,31,194,31,19,31,250,31,250,30,242,31,72,31,110,31,110,30,14,31,95,31,95,30,16,31,117,31,50,31,120,31,251,31,235,31,184,31,245,31,163,31,163,30,130,31,76,31,39,31,74,31,74,30,32,31,248,31,166,31,72,31,222,31,204,31,48,31,209,31,180,31,241,31,158,31,192,31,9,31,209,31,89,31,89,30,21,31,232,31,80,31,78,31,30,31,191,31,191,30,223,31,253,31,205,31,62,31,209,31,61,31,121,31,56,31,139,31,146,31,118,31,118,30,118,29,221,31,84,31,84,30,84,29,19,31,15,31,15,30,15,29,4,31,28,31,169,31,220,31,220,30,107,31,52,31,216,31,54,31,77,31,77,30,96,31,96,30,185,31,104,31,66,31,114,31,114,30,114,29,188,31,188,30,239,31,45,31,146,31,129,31,138,31,125,31,142,31,155,31,82,31,24,31,46,31,46,30,46,29,211,31,114,31,162,31,158,31,229,31,76,31,40,31,63,31,96,31,118,31,154,31,183,31,58,31,155,31,155,30,118,31,118,30,222,31,222,30,210,31,210,30,244,31,88,31,88,31,88,30,179,31,102,31,163,31,195,31,179,31,179,30,85,31,201,31,40,31,166,31,191,31,130,31,201,31,201,30,151,31,161,31,233,31,233,30,76,31,164,31,164,30,164,29,116,31,91,31,166,31,214,31,20,31,161,31,123,31,241,31,241,30,61,31,61,30,171,31,171,30,185,31,227,31,227,30,236,31,130,31,17,31,101,31,52,31,96,31,85,31,59,31,23,31,59,31,24,31,24,30,205,31,234,31,39,31,125,31,158,31,228,31,218,31,132,31,198,31,198,30,196,31,166,31,166,30,1,31,192,31,77,31,100,31,62,31,190,31,77,31,138,31,75,31,75,30,72,31,122,31,145,31,191,31,247,31,63,31,63,30,159,31,159,30,160,31,167,31,167,30,171,31,205,31,14,31,14,30,54,31,194,31,28,31,193,31,193,30,111,31,147,31,137,31,35,31,158,31,101,31,101,30,89,31,92,31,92,30,144,31,222,31,164,31,75,31,31,31,107,31,167,31,210,31,166,31,166,30,29,31,161,31,254,31,85,31,22,31,84,31,58,31,60,31,69,31,78,31,89,31,100,31,221,31,221,30,199,31,199,30,215,31,249,31,19,31,180,31,51,31,25,31,241,31,224,31,23,31,48,31,192,31,255,31,164,31,164,30,109,31,210,31,210,30,210,29,241,31,77,31,77,30,230,31,221,31,41,31,94,31,39,31,39,30,39,29,208,31,208,30,243,31,105,31,105,30,118,31,154,31,154,30,187,31,187,31,85,31,198,31,242,31,242,30,224,31,224,30,204,31,251,31,203,31,187,31,99,31,5,31,1,31,162,31,111,31,233,31,233,30,206,31,51,31,186,31,186,30,157,31,234,31,234,30,130,31,157,31,184,31,44,31,44,30,96,31,96,30,132,31,160,31,28,31,46,31,215,31,32,31,32,30,245,31,245,30,110,31,143,31,208,31,52,31,91,31,205,31,205,30,205,29,191,31,156,31,239,31,210,31,110,31,110,30,135,31,133,31,116,31,116,30,65,31,98,31,98,30,98,29,205,31,57,31,57,30,57,29,57,28,57,27,11,31,11,31,163,31,201,31,201,30,37,31,37,30,248,31,238,31,238,30,41,31,129,31,144,31,144,30,242,31,23,31,115,31,192,31,47,31,219,31,167,31,249,31,227,31,124,31,252,31,252,30,112,31,43,31,73,31,83,31,179,31,24,31,24,30,114,31,114,30,133,31,133,30,133,29,133,28,167,31,238,31,105,31,47,31,191,31,21,31,134,31,199,31,199,30,199,29,103,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
