-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 728;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (52,0,248,0,158,0,41,0,95,0,113,0,15,0,0,0,181,0,0,0,68,0,118,0,3,0,63,0,67,0,0,0,0,0,112,0,101,0,229,0,63,0,203,0,28,0,0,0,178,0,40,0,68,0,0,0,174,0,63,0,210,0,163,0,37,0,122,0,218,0,43,0,40,0,64,0,105,0,216,0,51,0,196,0,181,0,240,0,214,0,69,0,0,0,188,0,68,0,0,0,65,0,141,0,232,0,147,0,68,0,90,0,0,0,238,0,71,0,54,0,251,0,0,0,128,0,126,0,53,0,218,0,172,0,0,0,195,0,171,0,221,0,148,0,112,0,205,0,0,0,68,0,56,0,42,0,248,0,0,0,114,0,59,0,251,0,0,0,12,0,183,0,44,0,110,0,118,0,0,0,185,0,172,0,124,0,60,0,0,0,235,0,0,0,128,0,98,0,190,0,0,0,0,0,13,0,139,0,205,0,132,0,107,0,148,0,176,0,18,0,7,0,234,0,58,0,205,0,56,0,89,0,0,0,77,0,138,0,59,0,0,0,250,0,20,0,98,0,0,0,0,0,50,0,0,0,174,0,69,0,191,0,4,0,127,0,98,0,121,0,22,0,244,0,123,0,0,0,68,0,211,0,211,0,231,0,121,0,178,0,0,0,69,0,5,0,0,0,161,0,1,0,115,0,152,0,0,0,228,0,91,0,46,0,206,0,130,0,241,0,0,0,16,0,198,0,115,0,246,0,173,0,32,0,0,0,18,0,246,0,120,0,169,0,150,0,4,0,252,0,209,0,0,0,137,0,176,0,88,0,137,0,0,0,23,0,245,0,199,0,34,0,212,0,243,0,0,0,0,0,27,0,245,0,0,0,123,0,0,0,54,0,0,0,174,0,0,0,151,0,196,0,15,0,228,0,100,0,233,0,88,0,15,0,90,0,163,0,86,0,124,0,0,0,2,0,6,0,126,0,35,0,178,0,1,0,237,0,0,0,70,0,179,0,0,0,206,0,0,0,0,0,13,0,178,0,9,0,0,0,0,0,42,0,30,0,75,0,59,0,184,0,0,0,105,0,147,0,0,0,176,0,101,0,149,0,214,0,121,0,246,0,50,0,42,0,199,0,59,0,57,0,0,0,219,0,185,0,37,0,153,0,203,0,86,0,43,0,141,0,0,0,203,0,82,0,0,0,0,0,210,0,171,0,243,0,66,0,10,0,0,0,60,0,0,0,131,0,17,0,0,0,0,0,75,0,221,0,0,0,118,0,238,0,208,0,142,0,38,0,127,0,10,0,98,0,0,0,66,0,101,0,190,0,0,0,0,0,209,0,163,0,0,0,246,0,68,0,56,0,174,0,43,0,2,0,126,0,206,0,0,0,85,0,88,0,3,0,180,0,0,0,216,0,82,0,161,0,89,0,0,0,228,0,0,0,150,0,187,0,112,0,0,0,58,0,64,0,230,0,96,0,171,0,86,0,56,0,0,0,153,0,0,0,0,0,17,0,48,0,155,0,209,0,167,0,0,0,217,0,230,0,122,0,162,0,56,0,16,0,0,0,127,0,41,0,0,0,90,0,98,0,69,0,0,0,178,0,96,0,59,0,26,0,130,0,80,0,240,0,71,0,49,0,33,0,244,0,108,0,251,0,155,0,210,0,93,0,92,0,130,0,73,0,0,0,95,0,181,0,75,0,39,0,217,0,0,0,150,0,108,0,42,0,127,0,0,0,23,0,5,0,88,0,78,0,172,0,138,0,158,0,211,0,0,0,36,0,165,0,223,0,103,0,215,0,213,0,174,0,101,0,40,0,238,0,227,0,0,0,0,0,198,0,0,0,61,0,0,0,0,0,0,0,0,0,151,0,0,0,181,0,73,0,0,0,10,0,163,0,72,0,229,0,186,0,0,0,0,0,0,0,129,0,0,0,61,0,149,0,83,0,108,0,0,0,233,0,5,0,117,0,254,0,26,0,0,0,145,0,152,0,92,0,194,0,32,0,0,0,46,0,98,0,156,0,0,0,97,0,0,0,22,0,43,0,187,0,0,0,1,0,47,0,212,0,201,0,0,0,216,0,32,0,124,0,243,0,0,0,8,0,175,0,140,0,16,0,76,0,35,0,182,0,112,0,150,0,51,0,0,0,0,0,15,0,6,0,200,0,191,0,202,0,0,0,0,0,224,0,227,0,26,0,0,0,66,0,100,0,121,0,160,0,212,0,232,0,0,0,233,0,0,0,188,0,131,0,0,0,162,0,112,0,15,0,0,0,137,0,89,0,146,0,130,0,0,0,127,0,73,0,0,0,31,0,0,0,43,0,64,0,92,0,0,0,0,0,81,0,0,0,18,0,176,0,0,0,245,0,39,0,145,0,0,0,133,0,5,0,0,0,0,0,49,0,105,0,104,0,157,0,184,0,12,0,147,0,35,0,8,0,0,0,0,0,223,0,0,0,153,0,0,0,124,0,98,0,45,0,0,0,94,0,78,0,125,0,0,0,133,0,0,0,1,0,0,0,255,0,174,0,0,0,71,0,222,0,0,0,42,0,170,0,137,0,0,0,231,0,160,0,205,0,172,0,46,0,0,0,154,0,171,0,69,0,60,0,107,0,128,0,0,0,79,0,0,0,0,0,137,0,80,0,76,0,39,0,11,0,0,0,21,0,110,0,221,0,161,0,0,0,0,0,138,0,24,0,228,0,251,0,249,0,46,0,0,0,205,0,236,0,0,0,245,0,39,0,89,0,205,0,227,0,111,0,158,0,58,0,220,0,0,0,0,0,226,0,39,0,0,0,121,0,45,0,53,0,101,0,217,0,53,0,113,0,128,0,0,0,184,0,27,0,79,0,161,0,93,0,233,0,79,0,224,0,0,0,43,0,126,0,21,0,137,0,148,0,0,0,106,0,186,0,233,0,96,0,174,0,117,0,107,0,0,0,158,0,0,0,0,0,151,0,75,0,237,0,0,0,0,0,11,0,60,0,0,0,141,0,124,0,0,0,162,0,161,0,66,0,56,0,139,0,0,0,142,0,107,0,0,0,88,0,62,0,102,0,232,0,212,0,0,0,0,0,238,0,77,0,0,0,0,0,0,0,146,0,0,0,80,0,0,0,243,0,112,0,101,0,101,0,0,0,214,0,228,0,239,0,87,0,149,0,0,0,73,0,0,0,68,0,0,0,0,0,237,0,0,0,13,0,79,0,114,0,229,0,159,0,0,0,184,0,33,0,172,0,66,0,0,0,120,0,0,0,150,0,53,0,165,0,152,0,82,0);
signal scenario_full  : scenario_type := (52,31,248,31,158,31,41,31,95,31,113,31,15,31,15,30,181,31,181,30,68,31,118,31,3,31,63,31,67,31,67,30,67,29,112,31,101,31,229,31,63,31,203,31,28,31,28,30,178,31,40,31,68,31,68,30,174,31,63,31,210,31,163,31,37,31,122,31,218,31,43,31,40,31,64,31,105,31,216,31,51,31,196,31,181,31,240,31,214,31,69,31,69,30,188,31,68,31,68,30,65,31,141,31,232,31,147,31,68,31,90,31,90,30,238,31,71,31,54,31,251,31,251,30,128,31,126,31,53,31,218,31,172,31,172,30,195,31,171,31,221,31,148,31,112,31,205,31,205,30,68,31,56,31,42,31,248,31,248,30,114,31,59,31,251,31,251,30,12,31,183,31,44,31,110,31,118,31,118,30,185,31,172,31,124,31,60,31,60,30,235,31,235,30,128,31,98,31,190,31,190,30,190,29,13,31,139,31,205,31,132,31,107,31,148,31,176,31,18,31,7,31,234,31,58,31,205,31,56,31,89,31,89,30,77,31,138,31,59,31,59,30,250,31,20,31,98,31,98,30,98,29,50,31,50,30,174,31,69,31,191,31,4,31,127,31,98,31,121,31,22,31,244,31,123,31,123,30,68,31,211,31,211,31,231,31,121,31,178,31,178,30,69,31,5,31,5,30,161,31,1,31,115,31,152,31,152,30,228,31,91,31,46,31,206,31,130,31,241,31,241,30,16,31,198,31,115,31,246,31,173,31,32,31,32,30,18,31,246,31,120,31,169,31,150,31,4,31,252,31,209,31,209,30,137,31,176,31,88,31,137,31,137,30,23,31,245,31,199,31,34,31,212,31,243,31,243,30,243,29,27,31,245,31,245,30,123,31,123,30,54,31,54,30,174,31,174,30,151,31,196,31,15,31,228,31,100,31,233,31,88,31,15,31,90,31,163,31,86,31,124,31,124,30,2,31,6,31,126,31,35,31,178,31,1,31,237,31,237,30,70,31,179,31,179,30,206,31,206,30,206,29,13,31,178,31,9,31,9,30,9,29,42,31,30,31,75,31,59,31,184,31,184,30,105,31,147,31,147,30,176,31,101,31,149,31,214,31,121,31,246,31,50,31,42,31,199,31,59,31,57,31,57,30,219,31,185,31,37,31,153,31,203,31,86,31,43,31,141,31,141,30,203,31,82,31,82,30,82,29,210,31,171,31,243,31,66,31,10,31,10,30,60,31,60,30,131,31,17,31,17,30,17,29,75,31,221,31,221,30,118,31,238,31,208,31,142,31,38,31,127,31,10,31,98,31,98,30,66,31,101,31,190,31,190,30,190,29,209,31,163,31,163,30,246,31,68,31,56,31,174,31,43,31,2,31,126,31,206,31,206,30,85,31,88,31,3,31,180,31,180,30,216,31,82,31,161,31,89,31,89,30,228,31,228,30,150,31,187,31,112,31,112,30,58,31,64,31,230,31,96,31,171,31,86,31,56,31,56,30,153,31,153,30,153,29,17,31,48,31,155,31,209,31,167,31,167,30,217,31,230,31,122,31,162,31,56,31,16,31,16,30,127,31,41,31,41,30,90,31,98,31,69,31,69,30,178,31,96,31,59,31,26,31,130,31,80,31,240,31,71,31,49,31,33,31,244,31,108,31,251,31,155,31,210,31,93,31,92,31,130,31,73,31,73,30,95,31,181,31,75,31,39,31,217,31,217,30,150,31,108,31,42,31,127,31,127,30,23,31,5,31,88,31,78,31,172,31,138,31,158,31,211,31,211,30,36,31,165,31,223,31,103,31,215,31,213,31,174,31,101,31,40,31,238,31,227,31,227,30,227,29,198,31,198,30,61,31,61,30,61,29,61,28,61,27,151,31,151,30,181,31,73,31,73,30,10,31,163,31,72,31,229,31,186,31,186,30,186,29,186,28,129,31,129,30,61,31,149,31,83,31,108,31,108,30,233,31,5,31,117,31,254,31,26,31,26,30,145,31,152,31,92,31,194,31,32,31,32,30,46,31,98,31,156,31,156,30,97,31,97,30,22,31,43,31,187,31,187,30,1,31,47,31,212,31,201,31,201,30,216,31,32,31,124,31,243,31,243,30,8,31,175,31,140,31,16,31,76,31,35,31,182,31,112,31,150,31,51,31,51,30,51,29,15,31,6,31,200,31,191,31,202,31,202,30,202,29,224,31,227,31,26,31,26,30,66,31,100,31,121,31,160,31,212,31,232,31,232,30,233,31,233,30,188,31,131,31,131,30,162,31,112,31,15,31,15,30,137,31,89,31,146,31,130,31,130,30,127,31,73,31,73,30,31,31,31,30,43,31,64,31,92,31,92,30,92,29,81,31,81,30,18,31,176,31,176,30,245,31,39,31,145,31,145,30,133,31,5,31,5,30,5,29,49,31,105,31,104,31,157,31,184,31,12,31,147,31,35,31,8,31,8,30,8,29,223,31,223,30,153,31,153,30,124,31,98,31,45,31,45,30,94,31,78,31,125,31,125,30,133,31,133,30,1,31,1,30,255,31,174,31,174,30,71,31,222,31,222,30,42,31,170,31,137,31,137,30,231,31,160,31,205,31,172,31,46,31,46,30,154,31,171,31,69,31,60,31,107,31,128,31,128,30,79,31,79,30,79,29,137,31,80,31,76,31,39,31,11,31,11,30,21,31,110,31,221,31,161,31,161,30,161,29,138,31,24,31,228,31,251,31,249,31,46,31,46,30,205,31,236,31,236,30,245,31,39,31,89,31,205,31,227,31,111,31,158,31,58,31,220,31,220,30,220,29,226,31,39,31,39,30,121,31,45,31,53,31,101,31,217,31,53,31,113,31,128,31,128,30,184,31,27,31,79,31,161,31,93,31,233,31,79,31,224,31,224,30,43,31,126,31,21,31,137,31,148,31,148,30,106,31,186,31,233,31,96,31,174,31,117,31,107,31,107,30,158,31,158,30,158,29,151,31,75,31,237,31,237,30,237,29,11,31,60,31,60,30,141,31,124,31,124,30,162,31,161,31,66,31,56,31,139,31,139,30,142,31,107,31,107,30,88,31,62,31,102,31,232,31,212,31,212,30,212,29,238,31,77,31,77,30,77,29,77,28,146,31,146,30,80,31,80,30,243,31,112,31,101,31,101,31,101,30,214,31,228,31,239,31,87,31,149,31,149,30,73,31,73,30,68,31,68,30,68,29,237,31,237,30,13,31,79,31,114,31,229,31,159,31,159,30,184,31,33,31,172,31,66,31,66,30,120,31,120,30,150,31,53,31,165,31,152,31,82,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
