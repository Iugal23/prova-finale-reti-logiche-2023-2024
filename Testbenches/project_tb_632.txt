-- TB EXAMPLE PFRL 2023-2024

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity project_tb is
end project_tb;

architecture project_tb_arch of project_tb is
    constant CLOCK_PERIOD : time := 20 ns;
    signal tb_clk : std_logic := '0';
    signal tb_rst, tb_start, tb_done : std_logic;
    signal tb_add : std_logic_vector(15 downto 0);
    signal tb_k   : std_logic_vector(9 downto 0);

    signal tb_o_mem_addr, exc_o_mem_addr, init_o_mem_addr : std_logic_vector(15 downto 0);
    signal tb_o_mem_data, exc_o_mem_data, init_o_mem_data : std_logic_vector(7 downto 0);
    signal tb_i_mem_data : std_logic_vector(7 downto 0);
    signal tb_o_mem_we, tb_o_mem_en, exc_o_mem_we, exc_o_mem_en, init_o_mem_we, init_o_mem_en : std_logic;

    type ram_type is array (65535 downto 0) of std_logic_vector(7 downto 0);
    signal RAM : ram_type := (OTHERS => "00000000");

constant SCENARIO_LENGTH : integer := 513;
    type scenario_type is array (0 to SCENARIO_LENGTH*2-1) of integer;

signal scenario_input : scenario_type := (52,0,177,0,131,0,94,0,0,0,0,0,0,0,34,0,0,0,171,0,245,0,7,0,103,0,206,0,120,0,156,0,176,0,239,0,57,0,177,0,190,0,106,0,34,0,35,0,147,0,46,0,249,0,0,0,151,0,0,0,0,0,188,0,0,0,84,0,146,0,0,0,0,0,131,0,90,0,183,0,0,0,92,0,115,0,0,0,43,0,194,0,186,0,0,0,106,0,213,0,201,0,169,0,0,0,220,0,114,0,82,0,127,0,246,0,170,0,38,0,0,0,174,0,237,0,204,0,204,0,139,0,170,0,0,0,72,0,97,0,53,0,34,0,242,0,0,0,0,0,0,0,215,0,0,0,125,0,211,0,0,0,0,0,30,0,63,0,219,0,230,0,172,0,190,0,78,0,0,0,187,0,41,0,204,0,127,0,201,0,118,0,240,0,171,0,178,0,10,0,9,0,18,0,233,0,235,0,110,0,222,0,14,0,186,0,254,0,179,0,223,0,0,0,0,0,0,0,84,0,0,0,172,0,79,0,44,0,165,0,137,0,46,0,247,0,198,0,232,0,0,0,53,0,122,0,156,0,97,0,50,0,164,0,154,0,0,0,17,0,190,0,239,0,227,0,141,0,0,0,2,0,0,0,224,0,244,0,250,0,184,0,20,0,166,0,128,0,0,0,1,0,164,0,113,0,24,0,207,0,0,0,142,0,0,0,29,0,64,0,0,0,233,0,49,0,25,0,8,0,157,0,202,0,118,0,45,0,243,0,117,0,8,0,133,0,53,0,0,0,60,0,59,0,169,0,69,0,0,0,98,0,16,0,205,0,249,0,0,0,29,0,203,0,151,0,21,0,156,0,33,0,242,0,82,0,215,0,194,0,162,0,145,0,163,0,239,0,249,0,0,0,81,0,247,0,238,0,211,0,199,0,169,0,236,0,243,0,55,0,0,0,78,0,130,0,189,0,236,0,93,0,0,0,223,0,196,0,0,0,252,0,237,0,220,0,238,0,29,0,0,0,80,0,64,0,208,0,0,0,135,0,216,0,104,0,19,0,54,0,21,0,16,0,0,0,123,0,195,0,151,0,195,0,94,0,118,0,0,0,75,0,49,0,239,0,153,0,0,0,53,0,80,0,167,0,81,0,101,0,154,0,245,0,228,0,252,0,0,0,0,0,2,0,125,0,39,0,156,0,194,0,159,0,0,0,47,0,65,0,32,0,184,0,88,0,154,0,28,0,143,0,252,0,129,0,63,0,197,0,80,0,86,0,180,0,0,0,20,0,114,0,96,0,92,0,73,0,41,0,214,0,206,0,77,0,94,0,0,0,106,0,134,0,1,0,248,0,127,0,6,0,48,0,220,0,183,0,139,0,159,0,14,0,7,0,46,0,0,0,251,0,101,0,205,0,139,0,21,0,0,0,191,0,111,0,226,0,214,0,75,0,164,0,194,0,101,0,0,0,0,0,4,0,96,0,170,0,175,0,164,0,94,0,158,0,0,0,248,0,137,0,145,0,193,0,51,0,207,0,183,0,207,0,0,0,134,0,246,0,209,0,234,0,7,0,164,0,58,0,0,0,17,0,10,0,99,0,79,0,191,0,0,0,0,0,0,0,17,0,184,0,135,0,137,0,0,0,0,0,0,0,234,0,14,0,185,0,176,0,234,0,78,0,179,0,166,0,152,0,0,0,254,0,27,0,0,0,191,0,0,0,66,0,131,0,0,0,94,0,10,0,0,0,78,0,124,0,70,0,0,0,0,0,0,0,243,0,210,0,146,0,110,0,2,0,196,0,179,0,20,0,54,0,15,0,40,0,228,0,41,0,255,0,203,0,11,0,134,0,0,0,119,0,193,0,172,0,0,0,121,0,155,0,216,0,236,0,163,0,214,0,183,0,57,0,191,0,44,0,68,0,142,0,0,0,156,0,71,0,74,0,207,0,188,0,199,0,139,0,19,0,218,0,162,0,238,0,0,0,48,0,137,0,0,0,153,0,236,0,47,0,149,0,229,0,10,0,252,0,246,0,0,0,208,0,0,0,85,0,193,0,94,0,219,0,98,0,222,0,132,0,124,0,232,0,64,0,82,0,0,0,0,0,148,0,145,0,142,0,63,0,29,0,12,0,250,0,20,0,124,0,202,0,218,0,131,0,208,0,161,0,0,0,0,0,0,0,0,0,0,0,215,0,230,0,0,0,35,0,32,0,31,0,178,0,216,0,23,0,0,0,0,0,0,0,0,0,0,0,151,0,75,0,85,0,9,0,128,0,0,0,155,0,255,0,28,0,155,0,61,0,131,0,159,0);
signal scenario_full  : scenario_type := (52,31,177,31,131,31,94,31,94,30,94,29,94,28,34,31,34,30,171,31,245,31,7,31,103,31,206,31,120,31,156,31,176,31,239,31,57,31,177,31,190,31,106,31,34,31,35,31,147,31,46,31,249,31,249,30,151,31,151,30,151,29,188,31,188,30,84,31,146,31,146,30,146,29,131,31,90,31,183,31,183,30,92,31,115,31,115,30,43,31,194,31,186,31,186,30,106,31,213,31,201,31,169,31,169,30,220,31,114,31,82,31,127,31,246,31,170,31,38,31,38,30,174,31,237,31,204,31,204,31,139,31,170,31,170,30,72,31,97,31,53,31,34,31,242,31,242,30,242,29,242,28,215,31,215,30,125,31,211,31,211,30,211,29,30,31,63,31,219,31,230,31,172,31,190,31,78,31,78,30,187,31,41,31,204,31,127,31,201,31,118,31,240,31,171,31,178,31,10,31,9,31,18,31,233,31,235,31,110,31,222,31,14,31,186,31,254,31,179,31,223,31,223,30,223,29,223,28,84,31,84,30,172,31,79,31,44,31,165,31,137,31,46,31,247,31,198,31,232,31,232,30,53,31,122,31,156,31,97,31,50,31,164,31,154,31,154,30,17,31,190,31,239,31,227,31,141,31,141,30,2,31,2,30,224,31,244,31,250,31,184,31,20,31,166,31,128,31,128,30,1,31,164,31,113,31,24,31,207,31,207,30,142,31,142,30,29,31,64,31,64,30,233,31,49,31,25,31,8,31,157,31,202,31,118,31,45,31,243,31,117,31,8,31,133,31,53,31,53,30,60,31,59,31,169,31,69,31,69,30,98,31,16,31,205,31,249,31,249,30,29,31,203,31,151,31,21,31,156,31,33,31,242,31,82,31,215,31,194,31,162,31,145,31,163,31,239,31,249,31,249,30,81,31,247,31,238,31,211,31,199,31,169,31,236,31,243,31,55,31,55,30,78,31,130,31,189,31,236,31,93,31,93,30,223,31,196,31,196,30,252,31,237,31,220,31,238,31,29,31,29,30,80,31,64,31,208,31,208,30,135,31,216,31,104,31,19,31,54,31,21,31,16,31,16,30,123,31,195,31,151,31,195,31,94,31,118,31,118,30,75,31,49,31,239,31,153,31,153,30,53,31,80,31,167,31,81,31,101,31,154,31,245,31,228,31,252,31,252,30,252,29,2,31,125,31,39,31,156,31,194,31,159,31,159,30,47,31,65,31,32,31,184,31,88,31,154,31,28,31,143,31,252,31,129,31,63,31,197,31,80,31,86,31,180,31,180,30,20,31,114,31,96,31,92,31,73,31,41,31,214,31,206,31,77,31,94,31,94,30,106,31,134,31,1,31,248,31,127,31,6,31,48,31,220,31,183,31,139,31,159,31,14,31,7,31,46,31,46,30,251,31,101,31,205,31,139,31,21,31,21,30,191,31,111,31,226,31,214,31,75,31,164,31,194,31,101,31,101,30,101,29,4,31,96,31,170,31,175,31,164,31,94,31,158,31,158,30,248,31,137,31,145,31,193,31,51,31,207,31,183,31,207,31,207,30,134,31,246,31,209,31,234,31,7,31,164,31,58,31,58,30,17,31,10,31,99,31,79,31,191,31,191,30,191,29,191,28,17,31,184,31,135,31,137,31,137,30,137,29,137,28,234,31,14,31,185,31,176,31,234,31,78,31,179,31,166,31,152,31,152,30,254,31,27,31,27,30,191,31,191,30,66,31,131,31,131,30,94,31,10,31,10,30,78,31,124,31,70,31,70,30,70,29,70,28,243,31,210,31,146,31,110,31,2,31,196,31,179,31,20,31,54,31,15,31,40,31,228,31,41,31,255,31,203,31,11,31,134,31,134,30,119,31,193,31,172,31,172,30,121,31,155,31,216,31,236,31,163,31,214,31,183,31,57,31,191,31,44,31,68,31,142,31,142,30,156,31,71,31,74,31,207,31,188,31,199,31,139,31,19,31,218,31,162,31,238,31,238,30,48,31,137,31,137,30,153,31,236,31,47,31,149,31,229,31,10,31,252,31,246,31,246,30,208,31,208,30,85,31,193,31,94,31,219,31,98,31,222,31,132,31,124,31,232,31,64,31,82,31,82,30,82,29,148,31,145,31,142,31,63,31,29,31,12,31,250,31,20,31,124,31,202,31,218,31,131,31,208,31,161,31,161,30,161,29,161,28,161,27,161,26,215,31,230,31,230,30,35,31,32,31,31,31,178,31,216,31,23,31,23,30,23,29,23,28,23,27,23,26,151,31,75,31,85,31,9,31,128,31,128,30,155,31,255,31,28,31,155,31,61,31,131,31,159,31);

    signal memory_control : std_logic := '0';
    
    constant SCENARIO_ADDRESS : integer := 1234;

    component project_reti_logiche is
        port (
                i_clk : in std_logic;
                i_rst : in std_logic;
                i_start : in std_logic;
                i_add : in std_logic_vector(15 downto 0);
                i_k   : in std_logic_vector(9 downto 0);
                
                o_done : out std_logic;
                
                o_mem_addr : out std_logic_vector(15 downto 0);
                i_mem_data : in  std_logic_vector(7 downto 0);
                o_mem_data : out std_logic_vector(7 downto 0);
                o_mem_we   : out std_logic;
                o_mem_en   : out std_logic
        );
    end component project_reti_logiche;

begin
    UUT : project_reti_logiche
    port map(
                i_clk   => tb_clk,
                i_rst   => tb_rst,
                i_start => tb_start,
                i_add   => tb_add,
                i_k     => tb_k,
                
                o_done => tb_done,
                
                o_mem_addr => exc_o_mem_addr,
                i_mem_data => tb_i_mem_data,
                o_mem_data => exc_o_mem_data,
                o_mem_we   => exc_o_mem_we,
                o_mem_en   => exc_o_mem_en
    );

    -- Clock generation
    tb_clk <= not tb_clk after CLOCK_PERIOD/2;

    -- Process related to the memory
    MEM : process (tb_clk)
    begin
        if tb_clk'event and tb_clk = '1' then
            if tb_o_mem_en = '1' then
                if tb_o_mem_we = '1' then
                    RAM(to_integer(unsigned(tb_o_mem_addr))) <= tb_o_mem_data after 1 ns;
                    tb_i_mem_data <= tb_o_mem_data after 1 ns;
                else
                    tb_i_mem_data <= RAM(to_integer(unsigned(tb_o_mem_addr))) after 1 ns;
                end if;
            end if;
        end if;
    end process;
    
    memory_signal_swapper : process(memory_control, init_o_mem_addr, init_o_mem_data,
                                    init_o_mem_en,  init_o_mem_we,   exc_o_mem_addr,
                                    exc_o_mem_data, exc_o_mem_en, exc_o_mem_we)
    begin
        -- This is necessary for the testbench to work: we swap the memory
        -- signals from the component to the testbench when needed.
    
        tb_o_mem_addr <= init_o_mem_addr;
        tb_o_mem_data <= init_o_mem_data;
        tb_o_mem_en   <= init_o_mem_en;
        tb_o_mem_we   <= init_o_mem_we;

        if memory_control = '1' then
            tb_o_mem_addr <= exc_o_mem_addr;
            tb_o_mem_data <= exc_o_mem_data;
            tb_o_mem_en   <= exc_o_mem_en;
            tb_o_mem_we   <= exc_o_mem_we;
        end if;
    end process;
    
    -- This process provides the correct scenario on the signal controlled by the TB
    create_scenario : process
    begin
        wait for 50 ns;

        -- Signal initialization and reset of the component
        tb_start <= '0';
        tb_add <= (others=>'0');
        tb_k   <= (others=>'0');
        tb_rst <= '1';
        
        -- Wait some time for the component to reset...
        wait for 50 ns;
        
        tb_rst <= '0';
        memory_control <= '0';  -- Memory controlled by the testbench
        
        wait until falling_edge(tb_clk); -- Skew the testbench transitions with respect to the clock

        -- Configure the memory        
        for i in 0 to SCENARIO_LENGTH*2-1 loop
            init_o_mem_addr<= std_logic_vector(to_unsigned(SCENARIO_ADDRESS+i, 16));
            init_o_mem_data<= std_logic_vector(to_unsigned(scenario_input(i),8));
            init_o_mem_en  <= '1';
            init_o_mem_we  <= '1';
            wait until rising_edge(tb_clk);   
        end loop;
        
        wait until falling_edge(tb_clk);

        memory_control <= '1';  -- Memory controlled by the component
        
        tb_add <= std_logic_vector(to_unsigned(SCENARIO_ADDRESS, 16));
        tb_k   <= std_logic_vector(to_unsigned(SCENARIO_LENGTH, 10));
        
        tb_start <= '1';

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        wait for 5 ns;
        
        tb_start <= '0';
        
        wait;
        
    end process;

    -- Process without sensitivity list designed to test the actual component.
    test_routine : process
    begin

        wait until tb_rst = '1';
        wait for 25 ns;
        assert tb_done = '0' report "TEST FALLITO o_done !=0 during reset" severity failure;
        wait until tb_rst = '0';

        wait until falling_edge(tb_clk);
        assert tb_done = '0' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        
        wait until rising_edge(tb_start);

        while tb_done /= '1' loop                
            wait until rising_edge(tb_clk);
        end loop;

        assert tb_o_mem_en = '0' or tb_o_mem_we = '0' report "TEST FALLITO o_mem_en !=0 memory should not be written after done." severity failure;

        for i in 0 to SCENARIO_LENGTH*2-1 loop
            assert RAM(SCENARIO_ADDRESS+i) = std_logic_vector(to_unsigned(scenario_full(i),8)) report "TEST FALLITO @ OFFSET=" & integer'image(i) & " expected= " & integer'image(scenario_full(i)) & " actual=" & integer'image(to_integer(unsigned(RAM(i)))) severity failure;
        end loop;

        wait until falling_edge(tb_start);
        assert tb_done = '1' report "TEST FALLITO o_done !=0 after reset before start" severity failure;
        wait until falling_edge(tb_done);

        assert false report "Simulation Ended! TEST PASSATO (EXAMPLE)" severity failure;
    end process;

end architecture;
